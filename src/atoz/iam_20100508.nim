
import
  json, options, hashes, uri, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: AWS Identity and Access Management
## version: 2010-05-08
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>AWS Identity and Access Management</fullname> <p>AWS Identity and Access Management (IAM) is a web service that you can use to manage users and user permissions under your AWS account. This guide provides descriptions of IAM actions that you can call programmatically. For general information about IAM, see <a href="http://aws.amazon.com/iam/">AWS Identity and Access Management (IAM)</a>. For the user guide for IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/">Using IAM</a>. </p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to IAM and AWS. For example, the SDKs take care of tasks such as cryptographically signing requests (see below), managing errors, and retrying requests automatically. For information about the AWS SDKs, including how to download and install them, see the <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a> page. </p> </note> <p>We recommend that you use the AWS SDKs to make programmatic API calls to IAM. However, you can also use the IAM Query API to make direct calls to the IAM web service. To learn more about the IAM Query API, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>Using IAM</i> guide. IAM supports GET and POST requests for all actions. That is, the API does not require you to use GET for some actions and POST for others. However, GET requests are subject to the limitation size of a URL. Therefore, for operations that require larger sizes, use a POST request. </p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your AWS account access key ID and secret access key for everyday work with IAM. You can use the access key ID and secret access key for an IAM user or you can use the AWS Security Token Service to generate temporary security credentials and use those to sign requests.</p> <p>To sign requests, we recommend that you use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>. If you have an existing application that uses Signature Version 2, you do not have to update it to use Signature Version 4. However, some operations now require Signature Version 4. The documentation for operations that require version 4 indicate this requirement. </p> <p> <b>Additional Resources</b> </p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html">AWS Security Credentials</a>. This topic provides general information about the types of credentials used for accessing AWS. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html">IAM Best Practices</a>. This topic presents a list of suggestions for using the IAM service to help secure your AWS resources. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a>. This set of topics walk you through the process of signing a request using an access key ID and secret access key. </p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/iam/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_593437 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_593437](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_593437): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
                           "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable, Scheme.Https: {
      "cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
      "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable}.toTable
const
  awsServiceName = "iam"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddClientIDToOpenIDConnectProvider_594046 = ref object of OpenApiRestCall_593437
proc url_PostAddClientIDToOpenIDConnectProvider_594048(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddClientIDToOpenIDConnectProvider_594047(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594049 = query.getOrDefault("Action")
  valid_594049 = validateParameter(valid_594049, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_594049 != nil:
    section.add "Action", valid_594049
  var valid_594050 = query.getOrDefault("Version")
  valid_594050 = validateParameter(valid_594050, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594050 != nil:
    section.add "Version", valid_594050
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594051 = header.getOrDefault("X-Amz-Date")
  valid_594051 = validateParameter(valid_594051, JString, required = false,
                                 default = nil)
  if valid_594051 != nil:
    section.add "X-Amz-Date", valid_594051
  var valid_594052 = header.getOrDefault("X-Amz-Security-Token")
  valid_594052 = validateParameter(valid_594052, JString, required = false,
                                 default = nil)
  if valid_594052 != nil:
    section.add "X-Amz-Security-Token", valid_594052
  var valid_594053 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594053 = validateParameter(valid_594053, JString, required = false,
                                 default = nil)
  if valid_594053 != nil:
    section.add "X-Amz-Content-Sha256", valid_594053
  var valid_594054 = header.getOrDefault("X-Amz-Algorithm")
  valid_594054 = validateParameter(valid_594054, JString, required = false,
                                 default = nil)
  if valid_594054 != nil:
    section.add "X-Amz-Algorithm", valid_594054
  var valid_594055 = header.getOrDefault("X-Amz-Signature")
  valid_594055 = validateParameter(valid_594055, JString, required = false,
                                 default = nil)
  if valid_594055 != nil:
    section.add "X-Amz-Signature", valid_594055
  var valid_594056 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594056 = validateParameter(valid_594056, JString, required = false,
                                 default = nil)
  if valid_594056 != nil:
    section.add "X-Amz-SignedHeaders", valid_594056
  var valid_594057 = header.getOrDefault("X-Amz-Credential")
  valid_594057 = validateParameter(valid_594057, JString, required = false,
                                 default = nil)
  if valid_594057 != nil:
    section.add "X-Amz-Credential", valid_594057
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_594058 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_594058 = validateParameter(valid_594058, JString, required = true,
                                 default = nil)
  if valid_594058 != nil:
    section.add "OpenIDConnectProviderArn", valid_594058
  var valid_594059 = formData.getOrDefault("ClientID")
  valid_594059 = validateParameter(valid_594059, JString, required = true,
                                 default = nil)
  if valid_594059 != nil:
    section.add "ClientID", valid_594059
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594060: Call_PostAddClientIDToOpenIDConnectProvider_594046;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_594060.validator(path, query, header, formData, body)
  let scheme = call_594060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594060.url(scheme.get, call_594060.host, call_594060.base,
                         call_594060.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594060, url, valid)

proc call*(call_594061: Call_PostAddClientIDToOpenIDConnectProvider_594046;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  var query_594062 = newJObject()
  var formData_594063 = newJObject()
  add(formData_594063, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_594062, "Action", newJString(Action))
  add(query_594062, "Version", newJString(Version))
  add(formData_594063, "ClientID", newJString(ClientID))
  result = call_594061.call(nil, query_594062, nil, formData_594063, nil)

var postAddClientIDToOpenIDConnectProvider* = Call_PostAddClientIDToOpenIDConnectProvider_594046(
    name: "postAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_PostAddClientIDToOpenIDConnectProvider_594047, base: "/",
    url: url_PostAddClientIDToOpenIDConnectProvider_594048,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddClientIDToOpenIDConnectProvider_593774 = ref object of OpenApiRestCall_593437
proc url_GetAddClientIDToOpenIDConnectProvider_593776(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddClientIDToOpenIDConnectProvider_593775(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_593888 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_593888 = validateParameter(valid_593888, JString, required = true,
                                 default = nil)
  if valid_593888 != nil:
    section.add "OpenIDConnectProviderArn", valid_593888
  var valid_593902 = query.getOrDefault("Action")
  valid_593902 = validateParameter(valid_593902, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_593902 != nil:
    section.add "Action", valid_593902
  var valid_593903 = query.getOrDefault("ClientID")
  valid_593903 = validateParameter(valid_593903, JString, required = true,
                                 default = nil)
  if valid_593903 != nil:
    section.add "ClientID", valid_593903
  var valid_593904 = query.getOrDefault("Version")
  valid_593904 = validateParameter(valid_593904, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_593904 != nil:
    section.add "Version", valid_593904
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_593905 = header.getOrDefault("X-Amz-Date")
  valid_593905 = validateParameter(valid_593905, JString, required = false,
                                 default = nil)
  if valid_593905 != nil:
    section.add "X-Amz-Date", valid_593905
  var valid_593906 = header.getOrDefault("X-Amz-Security-Token")
  valid_593906 = validateParameter(valid_593906, JString, required = false,
                                 default = nil)
  if valid_593906 != nil:
    section.add "X-Amz-Security-Token", valid_593906
  var valid_593907 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593907 = validateParameter(valid_593907, JString, required = false,
                                 default = nil)
  if valid_593907 != nil:
    section.add "X-Amz-Content-Sha256", valid_593907
  var valid_593908 = header.getOrDefault("X-Amz-Algorithm")
  valid_593908 = validateParameter(valid_593908, JString, required = false,
                                 default = nil)
  if valid_593908 != nil:
    section.add "X-Amz-Algorithm", valid_593908
  var valid_593909 = header.getOrDefault("X-Amz-Signature")
  valid_593909 = validateParameter(valid_593909, JString, required = false,
                                 default = nil)
  if valid_593909 != nil:
    section.add "X-Amz-Signature", valid_593909
  var valid_593910 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593910 = validateParameter(valid_593910, JString, required = false,
                                 default = nil)
  if valid_593910 != nil:
    section.add "X-Amz-SignedHeaders", valid_593910
  var valid_593911 = header.getOrDefault("X-Amz-Credential")
  valid_593911 = validateParameter(valid_593911, JString, required = false,
                                 default = nil)
  if valid_593911 != nil:
    section.add "X-Amz-Credential", valid_593911
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593934: Call_GetAddClientIDToOpenIDConnectProvider_593774;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_593934.validator(path, query, header, formData, body)
  let scheme = call_593934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593934.url(scheme.get, call_593934.host, call_593934.base,
                         call_593934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593934, url, valid)

proc call*(call_594005: Call_GetAddClientIDToOpenIDConnectProvider_593774;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   Version: string (required)
  var query_594006 = newJObject()
  add(query_594006, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_594006, "Action", newJString(Action))
  add(query_594006, "ClientID", newJString(ClientID))
  add(query_594006, "Version", newJString(Version))
  result = call_594005.call(nil, query_594006, nil, nil, nil)

var getAddClientIDToOpenIDConnectProvider* = Call_GetAddClientIDToOpenIDConnectProvider_593774(
    name: "getAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_GetAddClientIDToOpenIDConnectProvider_593775, base: "/",
    url: url_GetAddClientIDToOpenIDConnectProvider_593776,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToInstanceProfile_594081 = ref object of OpenApiRestCall_593437
proc url_PostAddRoleToInstanceProfile_594083(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddRoleToInstanceProfile_594082(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594084 = query.getOrDefault("Action")
  valid_594084 = validateParameter(valid_594084, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_594084 != nil:
    section.add "Action", valid_594084
  var valid_594085 = query.getOrDefault("Version")
  valid_594085 = validateParameter(valid_594085, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594085 != nil:
    section.add "Version", valid_594085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594086 = header.getOrDefault("X-Amz-Date")
  valid_594086 = validateParameter(valid_594086, JString, required = false,
                                 default = nil)
  if valid_594086 != nil:
    section.add "X-Amz-Date", valid_594086
  var valid_594087 = header.getOrDefault("X-Amz-Security-Token")
  valid_594087 = validateParameter(valid_594087, JString, required = false,
                                 default = nil)
  if valid_594087 != nil:
    section.add "X-Amz-Security-Token", valid_594087
  var valid_594088 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594088 = validateParameter(valid_594088, JString, required = false,
                                 default = nil)
  if valid_594088 != nil:
    section.add "X-Amz-Content-Sha256", valid_594088
  var valid_594089 = header.getOrDefault("X-Amz-Algorithm")
  valid_594089 = validateParameter(valid_594089, JString, required = false,
                                 default = nil)
  if valid_594089 != nil:
    section.add "X-Amz-Algorithm", valid_594089
  var valid_594090 = header.getOrDefault("X-Amz-Signature")
  valid_594090 = validateParameter(valid_594090, JString, required = false,
                                 default = nil)
  if valid_594090 != nil:
    section.add "X-Amz-Signature", valid_594090
  var valid_594091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594091 = validateParameter(valid_594091, JString, required = false,
                                 default = nil)
  if valid_594091 != nil:
    section.add "X-Amz-SignedHeaders", valid_594091
  var valid_594092 = header.getOrDefault("X-Amz-Credential")
  valid_594092 = validateParameter(valid_594092, JString, required = false,
                                 default = nil)
  if valid_594092 != nil:
    section.add "X-Amz-Credential", valid_594092
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_594093 = formData.getOrDefault("RoleName")
  valid_594093 = validateParameter(valid_594093, JString, required = true,
                                 default = nil)
  if valid_594093 != nil:
    section.add "RoleName", valid_594093
  var valid_594094 = formData.getOrDefault("InstanceProfileName")
  valid_594094 = validateParameter(valid_594094, JString, required = true,
                                 default = nil)
  if valid_594094 != nil:
    section.add "InstanceProfileName", valid_594094
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594095: Call_PostAddRoleToInstanceProfile_594081; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_594095.validator(path, query, header, formData, body)
  let scheme = call_594095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594095.url(scheme.get, call_594095.host, call_594095.base,
                         call_594095.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594095, url, valid)

proc call*(call_594096: Call_PostAddRoleToInstanceProfile_594081; RoleName: string;
          InstanceProfileName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_594097 = newJObject()
  var formData_594098 = newJObject()
  add(formData_594098, "RoleName", newJString(RoleName))
  add(query_594097, "Action", newJString(Action))
  add(formData_594098, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_594097, "Version", newJString(Version))
  result = call_594096.call(nil, query_594097, nil, formData_594098, nil)

var postAddRoleToInstanceProfile* = Call_PostAddRoleToInstanceProfile_594081(
    name: "postAddRoleToInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_PostAddRoleToInstanceProfile_594082, base: "/",
    url: url_PostAddRoleToInstanceProfile_594083,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToInstanceProfile_594064 = ref object of OpenApiRestCall_593437
proc url_GetAddRoleToInstanceProfile_594066(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddRoleToInstanceProfile_594065(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_594067 = query.getOrDefault("InstanceProfileName")
  valid_594067 = validateParameter(valid_594067, JString, required = true,
                                 default = nil)
  if valid_594067 != nil:
    section.add "InstanceProfileName", valid_594067
  var valid_594068 = query.getOrDefault("Action")
  valid_594068 = validateParameter(valid_594068, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_594068 != nil:
    section.add "Action", valid_594068
  var valid_594069 = query.getOrDefault("RoleName")
  valid_594069 = validateParameter(valid_594069, JString, required = true,
                                 default = nil)
  if valid_594069 != nil:
    section.add "RoleName", valid_594069
  var valid_594070 = query.getOrDefault("Version")
  valid_594070 = validateParameter(valid_594070, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594070 != nil:
    section.add "Version", valid_594070
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594071 = header.getOrDefault("X-Amz-Date")
  valid_594071 = validateParameter(valid_594071, JString, required = false,
                                 default = nil)
  if valid_594071 != nil:
    section.add "X-Amz-Date", valid_594071
  var valid_594072 = header.getOrDefault("X-Amz-Security-Token")
  valid_594072 = validateParameter(valid_594072, JString, required = false,
                                 default = nil)
  if valid_594072 != nil:
    section.add "X-Amz-Security-Token", valid_594072
  var valid_594073 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594073 = validateParameter(valid_594073, JString, required = false,
                                 default = nil)
  if valid_594073 != nil:
    section.add "X-Amz-Content-Sha256", valid_594073
  var valid_594074 = header.getOrDefault("X-Amz-Algorithm")
  valid_594074 = validateParameter(valid_594074, JString, required = false,
                                 default = nil)
  if valid_594074 != nil:
    section.add "X-Amz-Algorithm", valid_594074
  var valid_594075 = header.getOrDefault("X-Amz-Signature")
  valid_594075 = validateParameter(valid_594075, JString, required = false,
                                 default = nil)
  if valid_594075 != nil:
    section.add "X-Amz-Signature", valid_594075
  var valid_594076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594076 = validateParameter(valid_594076, JString, required = false,
                                 default = nil)
  if valid_594076 != nil:
    section.add "X-Amz-SignedHeaders", valid_594076
  var valid_594077 = header.getOrDefault("X-Amz-Credential")
  valid_594077 = validateParameter(valid_594077, JString, required = false,
                                 default = nil)
  if valid_594077 != nil:
    section.add "X-Amz-Credential", valid_594077
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594078: Call_GetAddRoleToInstanceProfile_594064; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_594078.validator(path, query, header, formData, body)
  let scheme = call_594078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594078.url(scheme.get, call_594078.host, call_594078.base,
                         call_594078.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594078, url, valid)

proc call*(call_594079: Call_GetAddRoleToInstanceProfile_594064;
          InstanceProfileName: string; RoleName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_594080 = newJObject()
  add(query_594080, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_594080, "Action", newJString(Action))
  add(query_594080, "RoleName", newJString(RoleName))
  add(query_594080, "Version", newJString(Version))
  result = call_594079.call(nil, query_594080, nil, nil, nil)

var getAddRoleToInstanceProfile* = Call_GetAddRoleToInstanceProfile_594064(
    name: "getAddRoleToInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_GetAddRoleToInstanceProfile_594065, base: "/",
    url: url_GetAddRoleToInstanceProfile_594066,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddUserToGroup_594116 = ref object of OpenApiRestCall_593437
proc url_PostAddUserToGroup_594118(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddUserToGroup_594117(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594119 = query.getOrDefault("Action")
  valid_594119 = validateParameter(valid_594119, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_594119 != nil:
    section.add "Action", valid_594119
  var valid_594120 = query.getOrDefault("Version")
  valid_594120 = validateParameter(valid_594120, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594120 != nil:
    section.add "Version", valid_594120
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594121 = header.getOrDefault("X-Amz-Date")
  valid_594121 = validateParameter(valid_594121, JString, required = false,
                                 default = nil)
  if valid_594121 != nil:
    section.add "X-Amz-Date", valid_594121
  var valid_594122 = header.getOrDefault("X-Amz-Security-Token")
  valid_594122 = validateParameter(valid_594122, JString, required = false,
                                 default = nil)
  if valid_594122 != nil:
    section.add "X-Amz-Security-Token", valid_594122
  var valid_594123 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594123 = validateParameter(valid_594123, JString, required = false,
                                 default = nil)
  if valid_594123 != nil:
    section.add "X-Amz-Content-Sha256", valid_594123
  var valid_594124 = header.getOrDefault("X-Amz-Algorithm")
  valid_594124 = validateParameter(valid_594124, JString, required = false,
                                 default = nil)
  if valid_594124 != nil:
    section.add "X-Amz-Algorithm", valid_594124
  var valid_594125 = header.getOrDefault("X-Amz-Signature")
  valid_594125 = validateParameter(valid_594125, JString, required = false,
                                 default = nil)
  if valid_594125 != nil:
    section.add "X-Amz-Signature", valid_594125
  var valid_594126 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594126 = validateParameter(valid_594126, JString, required = false,
                                 default = nil)
  if valid_594126 != nil:
    section.add "X-Amz-SignedHeaders", valid_594126
  var valid_594127 = header.getOrDefault("X-Amz-Credential")
  valid_594127 = validateParameter(valid_594127, JString, required = false,
                                 default = nil)
  if valid_594127 != nil:
    section.add "X-Amz-Credential", valid_594127
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_594128 = formData.getOrDefault("UserName")
  valid_594128 = validateParameter(valid_594128, JString, required = true,
                                 default = nil)
  if valid_594128 != nil:
    section.add "UserName", valid_594128
  var valid_594129 = formData.getOrDefault("GroupName")
  valid_594129 = validateParameter(valid_594129, JString, required = true,
                                 default = nil)
  if valid_594129 != nil:
    section.add "GroupName", valid_594129
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594130: Call_PostAddUserToGroup_594116; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_594130.validator(path, query, header, formData, body)
  let scheme = call_594130.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594130.url(scheme.get, call_594130.host, call_594130.base,
                         call_594130.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594130, url, valid)

proc call*(call_594131: Call_PostAddUserToGroup_594116; UserName: string;
          GroupName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594132 = newJObject()
  var formData_594133 = newJObject()
  add(formData_594133, "UserName", newJString(UserName))
  add(formData_594133, "GroupName", newJString(GroupName))
  add(query_594132, "Action", newJString(Action))
  add(query_594132, "Version", newJString(Version))
  result = call_594131.call(nil, query_594132, nil, formData_594133, nil)

var postAddUserToGroup* = Call_PostAddUserToGroup_594116(
    name: "postAddUserToGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddUserToGroup",
    validator: validate_PostAddUserToGroup_594117, base: "/",
    url: url_PostAddUserToGroup_594118, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddUserToGroup_594099 = ref object of OpenApiRestCall_593437
proc url_GetAddUserToGroup_594101(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddUserToGroup_594100(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_594102 = query.getOrDefault("UserName")
  valid_594102 = validateParameter(valid_594102, JString, required = true,
                                 default = nil)
  if valid_594102 != nil:
    section.add "UserName", valid_594102
  var valid_594103 = query.getOrDefault("Action")
  valid_594103 = validateParameter(valid_594103, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_594103 != nil:
    section.add "Action", valid_594103
  var valid_594104 = query.getOrDefault("GroupName")
  valid_594104 = validateParameter(valid_594104, JString, required = true,
                                 default = nil)
  if valid_594104 != nil:
    section.add "GroupName", valid_594104
  var valid_594105 = query.getOrDefault("Version")
  valid_594105 = validateParameter(valid_594105, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594105 != nil:
    section.add "Version", valid_594105
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594106 = header.getOrDefault("X-Amz-Date")
  valid_594106 = validateParameter(valid_594106, JString, required = false,
                                 default = nil)
  if valid_594106 != nil:
    section.add "X-Amz-Date", valid_594106
  var valid_594107 = header.getOrDefault("X-Amz-Security-Token")
  valid_594107 = validateParameter(valid_594107, JString, required = false,
                                 default = nil)
  if valid_594107 != nil:
    section.add "X-Amz-Security-Token", valid_594107
  var valid_594108 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594108 = validateParameter(valid_594108, JString, required = false,
                                 default = nil)
  if valid_594108 != nil:
    section.add "X-Amz-Content-Sha256", valid_594108
  var valid_594109 = header.getOrDefault("X-Amz-Algorithm")
  valid_594109 = validateParameter(valid_594109, JString, required = false,
                                 default = nil)
  if valid_594109 != nil:
    section.add "X-Amz-Algorithm", valid_594109
  var valid_594110 = header.getOrDefault("X-Amz-Signature")
  valid_594110 = validateParameter(valid_594110, JString, required = false,
                                 default = nil)
  if valid_594110 != nil:
    section.add "X-Amz-Signature", valid_594110
  var valid_594111 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594111 = validateParameter(valid_594111, JString, required = false,
                                 default = nil)
  if valid_594111 != nil:
    section.add "X-Amz-SignedHeaders", valid_594111
  var valid_594112 = header.getOrDefault("X-Amz-Credential")
  valid_594112 = validateParameter(valid_594112, JString, required = false,
                                 default = nil)
  if valid_594112 != nil:
    section.add "X-Amz-Credential", valid_594112
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594113: Call_GetAddUserToGroup_594099; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_594113.validator(path, query, header, formData, body)
  let scheme = call_594113.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594113.url(scheme.get, call_594113.host, call_594113.base,
                         call_594113.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594113, url, valid)

proc call*(call_594114: Call_GetAddUserToGroup_594099; UserName: string;
          GroupName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_594115 = newJObject()
  add(query_594115, "UserName", newJString(UserName))
  add(query_594115, "Action", newJString(Action))
  add(query_594115, "GroupName", newJString(GroupName))
  add(query_594115, "Version", newJString(Version))
  result = call_594114.call(nil, query_594115, nil, nil, nil)

var getAddUserToGroup* = Call_GetAddUserToGroup_594099(name: "getAddUserToGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=AddUserToGroup", validator: validate_GetAddUserToGroup_594100,
    base: "/", url: url_GetAddUserToGroup_594101,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachGroupPolicy_594151 = ref object of OpenApiRestCall_593437
proc url_PostAttachGroupPolicy_594153(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAttachGroupPolicy_594152(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594154 = query.getOrDefault("Action")
  valid_594154 = validateParameter(valid_594154, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_594154 != nil:
    section.add "Action", valid_594154
  var valid_594155 = query.getOrDefault("Version")
  valid_594155 = validateParameter(valid_594155, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594155 != nil:
    section.add "Version", valid_594155
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594156 = header.getOrDefault("X-Amz-Date")
  valid_594156 = validateParameter(valid_594156, JString, required = false,
                                 default = nil)
  if valid_594156 != nil:
    section.add "X-Amz-Date", valid_594156
  var valid_594157 = header.getOrDefault("X-Amz-Security-Token")
  valid_594157 = validateParameter(valid_594157, JString, required = false,
                                 default = nil)
  if valid_594157 != nil:
    section.add "X-Amz-Security-Token", valid_594157
  var valid_594158 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594158 = validateParameter(valid_594158, JString, required = false,
                                 default = nil)
  if valid_594158 != nil:
    section.add "X-Amz-Content-Sha256", valid_594158
  var valid_594159 = header.getOrDefault("X-Amz-Algorithm")
  valid_594159 = validateParameter(valid_594159, JString, required = false,
                                 default = nil)
  if valid_594159 != nil:
    section.add "X-Amz-Algorithm", valid_594159
  var valid_594160 = header.getOrDefault("X-Amz-Signature")
  valid_594160 = validateParameter(valid_594160, JString, required = false,
                                 default = nil)
  if valid_594160 != nil:
    section.add "X-Amz-Signature", valid_594160
  var valid_594161 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594161 = validateParameter(valid_594161, JString, required = false,
                                 default = nil)
  if valid_594161 != nil:
    section.add "X-Amz-SignedHeaders", valid_594161
  var valid_594162 = header.getOrDefault("X-Amz-Credential")
  valid_594162 = validateParameter(valid_594162, JString, required = false,
                                 default = nil)
  if valid_594162 != nil:
    section.add "X-Amz-Credential", valid_594162
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_594163 = formData.getOrDefault("PolicyArn")
  valid_594163 = validateParameter(valid_594163, JString, required = true,
                                 default = nil)
  if valid_594163 != nil:
    section.add "PolicyArn", valid_594163
  var valid_594164 = formData.getOrDefault("GroupName")
  valid_594164 = validateParameter(valid_594164, JString, required = true,
                                 default = nil)
  if valid_594164 != nil:
    section.add "GroupName", valid_594164
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594165: Call_PostAttachGroupPolicy_594151; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594165.validator(path, query, header, formData, body)
  let scheme = call_594165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594165.url(scheme.get, call_594165.host, call_594165.base,
                         call_594165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594165, url, valid)

proc call*(call_594166: Call_PostAttachGroupPolicy_594151; PolicyArn: string;
          GroupName: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594167 = newJObject()
  var formData_594168 = newJObject()
  add(formData_594168, "PolicyArn", newJString(PolicyArn))
  add(formData_594168, "GroupName", newJString(GroupName))
  add(query_594167, "Action", newJString(Action))
  add(query_594167, "Version", newJString(Version))
  result = call_594166.call(nil, query_594167, nil, formData_594168, nil)

var postAttachGroupPolicy* = Call_PostAttachGroupPolicy_594151(
    name: "postAttachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_PostAttachGroupPolicy_594152, base: "/",
    url: url_PostAttachGroupPolicy_594153, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachGroupPolicy_594134 = ref object of OpenApiRestCall_593437
proc url_GetAttachGroupPolicy_594136(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAttachGroupPolicy_594135(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_594137 = query.getOrDefault("PolicyArn")
  valid_594137 = validateParameter(valid_594137, JString, required = true,
                                 default = nil)
  if valid_594137 != nil:
    section.add "PolicyArn", valid_594137
  var valid_594138 = query.getOrDefault("Action")
  valid_594138 = validateParameter(valid_594138, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_594138 != nil:
    section.add "Action", valid_594138
  var valid_594139 = query.getOrDefault("GroupName")
  valid_594139 = validateParameter(valid_594139, JString, required = true,
                                 default = nil)
  if valid_594139 != nil:
    section.add "GroupName", valid_594139
  var valid_594140 = query.getOrDefault("Version")
  valid_594140 = validateParameter(valid_594140, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594140 != nil:
    section.add "Version", valid_594140
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594141 = header.getOrDefault("X-Amz-Date")
  valid_594141 = validateParameter(valid_594141, JString, required = false,
                                 default = nil)
  if valid_594141 != nil:
    section.add "X-Amz-Date", valid_594141
  var valid_594142 = header.getOrDefault("X-Amz-Security-Token")
  valid_594142 = validateParameter(valid_594142, JString, required = false,
                                 default = nil)
  if valid_594142 != nil:
    section.add "X-Amz-Security-Token", valid_594142
  var valid_594143 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594143 = validateParameter(valid_594143, JString, required = false,
                                 default = nil)
  if valid_594143 != nil:
    section.add "X-Amz-Content-Sha256", valid_594143
  var valid_594144 = header.getOrDefault("X-Amz-Algorithm")
  valid_594144 = validateParameter(valid_594144, JString, required = false,
                                 default = nil)
  if valid_594144 != nil:
    section.add "X-Amz-Algorithm", valid_594144
  var valid_594145 = header.getOrDefault("X-Amz-Signature")
  valid_594145 = validateParameter(valid_594145, JString, required = false,
                                 default = nil)
  if valid_594145 != nil:
    section.add "X-Amz-Signature", valid_594145
  var valid_594146 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594146 = validateParameter(valid_594146, JString, required = false,
                                 default = nil)
  if valid_594146 != nil:
    section.add "X-Amz-SignedHeaders", valid_594146
  var valid_594147 = header.getOrDefault("X-Amz-Credential")
  valid_594147 = validateParameter(valid_594147, JString, required = false,
                                 default = nil)
  if valid_594147 != nil:
    section.add "X-Amz-Credential", valid_594147
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594148: Call_GetAttachGroupPolicy_594134; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594148.validator(path, query, header, formData, body)
  let scheme = call_594148.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594148.url(scheme.get, call_594148.host, call_594148.base,
                         call_594148.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594148, url, valid)

proc call*(call_594149: Call_GetAttachGroupPolicy_594134; PolicyArn: string;
          GroupName: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_594150 = newJObject()
  add(query_594150, "PolicyArn", newJString(PolicyArn))
  add(query_594150, "Action", newJString(Action))
  add(query_594150, "GroupName", newJString(GroupName))
  add(query_594150, "Version", newJString(Version))
  result = call_594149.call(nil, query_594150, nil, nil, nil)

var getAttachGroupPolicy* = Call_GetAttachGroupPolicy_594134(
    name: "getAttachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_GetAttachGroupPolicy_594135, base: "/",
    url: url_GetAttachGroupPolicy_594136, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachRolePolicy_594186 = ref object of OpenApiRestCall_593437
proc url_PostAttachRolePolicy_594188(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAttachRolePolicy_594187(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594189 = query.getOrDefault("Action")
  valid_594189 = validateParameter(valid_594189, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_594189 != nil:
    section.add "Action", valid_594189
  var valid_594190 = query.getOrDefault("Version")
  valid_594190 = validateParameter(valid_594190, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594190 != nil:
    section.add "Version", valid_594190
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594191 = header.getOrDefault("X-Amz-Date")
  valid_594191 = validateParameter(valid_594191, JString, required = false,
                                 default = nil)
  if valid_594191 != nil:
    section.add "X-Amz-Date", valid_594191
  var valid_594192 = header.getOrDefault("X-Amz-Security-Token")
  valid_594192 = validateParameter(valid_594192, JString, required = false,
                                 default = nil)
  if valid_594192 != nil:
    section.add "X-Amz-Security-Token", valid_594192
  var valid_594193 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594193 = validateParameter(valid_594193, JString, required = false,
                                 default = nil)
  if valid_594193 != nil:
    section.add "X-Amz-Content-Sha256", valid_594193
  var valid_594194 = header.getOrDefault("X-Amz-Algorithm")
  valid_594194 = validateParameter(valid_594194, JString, required = false,
                                 default = nil)
  if valid_594194 != nil:
    section.add "X-Amz-Algorithm", valid_594194
  var valid_594195 = header.getOrDefault("X-Amz-Signature")
  valid_594195 = validateParameter(valid_594195, JString, required = false,
                                 default = nil)
  if valid_594195 != nil:
    section.add "X-Amz-Signature", valid_594195
  var valid_594196 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594196 = validateParameter(valid_594196, JString, required = false,
                                 default = nil)
  if valid_594196 != nil:
    section.add "X-Amz-SignedHeaders", valid_594196
  var valid_594197 = header.getOrDefault("X-Amz-Credential")
  valid_594197 = validateParameter(valid_594197, JString, required = false,
                                 default = nil)
  if valid_594197 != nil:
    section.add "X-Amz-Credential", valid_594197
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_594198 = formData.getOrDefault("RoleName")
  valid_594198 = validateParameter(valid_594198, JString, required = true,
                                 default = nil)
  if valid_594198 != nil:
    section.add "RoleName", valid_594198
  var valid_594199 = formData.getOrDefault("PolicyArn")
  valid_594199 = validateParameter(valid_594199, JString, required = true,
                                 default = nil)
  if valid_594199 != nil:
    section.add "PolicyArn", valid_594199
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594200: Call_PostAttachRolePolicy_594186; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594200.validator(path, query, header, formData, body)
  let scheme = call_594200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594200.url(scheme.get, call_594200.host, call_594200.base,
                         call_594200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594200, url, valid)

proc call*(call_594201: Call_PostAttachRolePolicy_594186; RoleName: string;
          PolicyArn: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594202 = newJObject()
  var formData_594203 = newJObject()
  add(formData_594203, "RoleName", newJString(RoleName))
  add(formData_594203, "PolicyArn", newJString(PolicyArn))
  add(query_594202, "Action", newJString(Action))
  add(query_594202, "Version", newJString(Version))
  result = call_594201.call(nil, query_594202, nil, formData_594203, nil)

var postAttachRolePolicy* = Call_PostAttachRolePolicy_594186(
    name: "postAttachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_PostAttachRolePolicy_594187, base: "/",
    url: url_PostAttachRolePolicy_594188, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachRolePolicy_594169 = ref object of OpenApiRestCall_593437
proc url_GetAttachRolePolicy_594171(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAttachRolePolicy_594170(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_594172 = query.getOrDefault("PolicyArn")
  valid_594172 = validateParameter(valid_594172, JString, required = true,
                                 default = nil)
  if valid_594172 != nil:
    section.add "PolicyArn", valid_594172
  var valid_594173 = query.getOrDefault("Action")
  valid_594173 = validateParameter(valid_594173, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_594173 != nil:
    section.add "Action", valid_594173
  var valid_594174 = query.getOrDefault("RoleName")
  valid_594174 = validateParameter(valid_594174, JString, required = true,
                                 default = nil)
  if valid_594174 != nil:
    section.add "RoleName", valid_594174
  var valid_594175 = query.getOrDefault("Version")
  valid_594175 = validateParameter(valid_594175, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594175 != nil:
    section.add "Version", valid_594175
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594176 = header.getOrDefault("X-Amz-Date")
  valid_594176 = validateParameter(valid_594176, JString, required = false,
                                 default = nil)
  if valid_594176 != nil:
    section.add "X-Amz-Date", valid_594176
  var valid_594177 = header.getOrDefault("X-Amz-Security-Token")
  valid_594177 = validateParameter(valid_594177, JString, required = false,
                                 default = nil)
  if valid_594177 != nil:
    section.add "X-Amz-Security-Token", valid_594177
  var valid_594178 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594178 = validateParameter(valid_594178, JString, required = false,
                                 default = nil)
  if valid_594178 != nil:
    section.add "X-Amz-Content-Sha256", valid_594178
  var valid_594179 = header.getOrDefault("X-Amz-Algorithm")
  valid_594179 = validateParameter(valid_594179, JString, required = false,
                                 default = nil)
  if valid_594179 != nil:
    section.add "X-Amz-Algorithm", valid_594179
  var valid_594180 = header.getOrDefault("X-Amz-Signature")
  valid_594180 = validateParameter(valid_594180, JString, required = false,
                                 default = nil)
  if valid_594180 != nil:
    section.add "X-Amz-Signature", valid_594180
  var valid_594181 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594181 = validateParameter(valid_594181, JString, required = false,
                                 default = nil)
  if valid_594181 != nil:
    section.add "X-Amz-SignedHeaders", valid_594181
  var valid_594182 = header.getOrDefault("X-Amz-Credential")
  valid_594182 = validateParameter(valid_594182, JString, required = false,
                                 default = nil)
  if valid_594182 != nil:
    section.add "X-Amz-Credential", valid_594182
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594183: Call_GetAttachRolePolicy_594169; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594183.validator(path, query, header, formData, body)
  let scheme = call_594183.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594183.url(scheme.get, call_594183.host, call_594183.base,
                         call_594183.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594183, url, valid)

proc call*(call_594184: Call_GetAttachRolePolicy_594169; PolicyArn: string;
          RoleName: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_594185 = newJObject()
  add(query_594185, "PolicyArn", newJString(PolicyArn))
  add(query_594185, "Action", newJString(Action))
  add(query_594185, "RoleName", newJString(RoleName))
  add(query_594185, "Version", newJString(Version))
  result = call_594184.call(nil, query_594185, nil, nil, nil)

var getAttachRolePolicy* = Call_GetAttachRolePolicy_594169(
    name: "getAttachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_GetAttachRolePolicy_594170, base: "/",
    url: url_GetAttachRolePolicy_594171, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachUserPolicy_594221 = ref object of OpenApiRestCall_593437
proc url_PostAttachUserPolicy_594223(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAttachUserPolicy_594222(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594224 = query.getOrDefault("Action")
  valid_594224 = validateParameter(valid_594224, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_594224 != nil:
    section.add "Action", valid_594224
  var valid_594225 = query.getOrDefault("Version")
  valid_594225 = validateParameter(valid_594225, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594225 != nil:
    section.add "Version", valid_594225
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594226 = header.getOrDefault("X-Amz-Date")
  valid_594226 = validateParameter(valid_594226, JString, required = false,
                                 default = nil)
  if valid_594226 != nil:
    section.add "X-Amz-Date", valid_594226
  var valid_594227 = header.getOrDefault("X-Amz-Security-Token")
  valid_594227 = validateParameter(valid_594227, JString, required = false,
                                 default = nil)
  if valid_594227 != nil:
    section.add "X-Amz-Security-Token", valid_594227
  var valid_594228 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594228 = validateParameter(valid_594228, JString, required = false,
                                 default = nil)
  if valid_594228 != nil:
    section.add "X-Amz-Content-Sha256", valid_594228
  var valid_594229 = header.getOrDefault("X-Amz-Algorithm")
  valid_594229 = validateParameter(valid_594229, JString, required = false,
                                 default = nil)
  if valid_594229 != nil:
    section.add "X-Amz-Algorithm", valid_594229
  var valid_594230 = header.getOrDefault("X-Amz-Signature")
  valid_594230 = validateParameter(valid_594230, JString, required = false,
                                 default = nil)
  if valid_594230 != nil:
    section.add "X-Amz-Signature", valid_594230
  var valid_594231 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594231 = validateParameter(valid_594231, JString, required = false,
                                 default = nil)
  if valid_594231 != nil:
    section.add "X-Amz-SignedHeaders", valid_594231
  var valid_594232 = header.getOrDefault("X-Amz-Credential")
  valid_594232 = validateParameter(valid_594232, JString, required = false,
                                 default = nil)
  if valid_594232 != nil:
    section.add "X-Amz-Credential", valid_594232
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_594233 = formData.getOrDefault("UserName")
  valid_594233 = validateParameter(valid_594233, JString, required = true,
                                 default = nil)
  if valid_594233 != nil:
    section.add "UserName", valid_594233
  var valid_594234 = formData.getOrDefault("PolicyArn")
  valid_594234 = validateParameter(valid_594234, JString, required = true,
                                 default = nil)
  if valid_594234 != nil:
    section.add "PolicyArn", valid_594234
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594235: Call_PostAttachUserPolicy_594221; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594235.validator(path, query, header, formData, body)
  let scheme = call_594235.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594235.url(scheme.get, call_594235.host, call_594235.base,
                         call_594235.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594235, url, valid)

proc call*(call_594236: Call_PostAttachUserPolicy_594221; UserName: string;
          PolicyArn: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594237 = newJObject()
  var formData_594238 = newJObject()
  add(formData_594238, "UserName", newJString(UserName))
  add(formData_594238, "PolicyArn", newJString(PolicyArn))
  add(query_594237, "Action", newJString(Action))
  add(query_594237, "Version", newJString(Version))
  result = call_594236.call(nil, query_594237, nil, formData_594238, nil)

var postAttachUserPolicy* = Call_PostAttachUserPolicy_594221(
    name: "postAttachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_PostAttachUserPolicy_594222, base: "/",
    url: url_PostAttachUserPolicy_594223, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachUserPolicy_594204 = ref object of OpenApiRestCall_593437
proc url_GetAttachUserPolicy_594206(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAttachUserPolicy_594205(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_594207 = query.getOrDefault("PolicyArn")
  valid_594207 = validateParameter(valid_594207, JString, required = true,
                                 default = nil)
  if valid_594207 != nil:
    section.add "PolicyArn", valid_594207
  var valid_594208 = query.getOrDefault("UserName")
  valid_594208 = validateParameter(valid_594208, JString, required = true,
                                 default = nil)
  if valid_594208 != nil:
    section.add "UserName", valid_594208
  var valid_594209 = query.getOrDefault("Action")
  valid_594209 = validateParameter(valid_594209, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_594209 != nil:
    section.add "Action", valid_594209
  var valid_594210 = query.getOrDefault("Version")
  valid_594210 = validateParameter(valid_594210, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594210 != nil:
    section.add "Version", valid_594210
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594211 = header.getOrDefault("X-Amz-Date")
  valid_594211 = validateParameter(valid_594211, JString, required = false,
                                 default = nil)
  if valid_594211 != nil:
    section.add "X-Amz-Date", valid_594211
  var valid_594212 = header.getOrDefault("X-Amz-Security-Token")
  valid_594212 = validateParameter(valid_594212, JString, required = false,
                                 default = nil)
  if valid_594212 != nil:
    section.add "X-Amz-Security-Token", valid_594212
  var valid_594213 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594213 = validateParameter(valid_594213, JString, required = false,
                                 default = nil)
  if valid_594213 != nil:
    section.add "X-Amz-Content-Sha256", valid_594213
  var valid_594214 = header.getOrDefault("X-Amz-Algorithm")
  valid_594214 = validateParameter(valid_594214, JString, required = false,
                                 default = nil)
  if valid_594214 != nil:
    section.add "X-Amz-Algorithm", valid_594214
  var valid_594215 = header.getOrDefault("X-Amz-Signature")
  valid_594215 = validateParameter(valid_594215, JString, required = false,
                                 default = nil)
  if valid_594215 != nil:
    section.add "X-Amz-Signature", valid_594215
  var valid_594216 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594216 = validateParameter(valid_594216, JString, required = false,
                                 default = nil)
  if valid_594216 != nil:
    section.add "X-Amz-SignedHeaders", valid_594216
  var valid_594217 = header.getOrDefault("X-Amz-Credential")
  valid_594217 = validateParameter(valid_594217, JString, required = false,
                                 default = nil)
  if valid_594217 != nil:
    section.add "X-Amz-Credential", valid_594217
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594218: Call_GetAttachUserPolicy_594204; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594218.validator(path, query, header, formData, body)
  let scheme = call_594218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594218.url(scheme.get, call_594218.host, call_594218.base,
                         call_594218.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594218, url, valid)

proc call*(call_594219: Call_GetAttachUserPolicy_594204; PolicyArn: string;
          UserName: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594220 = newJObject()
  add(query_594220, "PolicyArn", newJString(PolicyArn))
  add(query_594220, "UserName", newJString(UserName))
  add(query_594220, "Action", newJString(Action))
  add(query_594220, "Version", newJString(Version))
  result = call_594219.call(nil, query_594220, nil, nil, nil)

var getAttachUserPolicy* = Call_GetAttachUserPolicy_594204(
    name: "getAttachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_GetAttachUserPolicy_594205, base: "/",
    url: url_GetAttachUserPolicy_594206, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostChangePassword_594256 = ref object of OpenApiRestCall_593437
proc url_PostChangePassword_594258(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostChangePassword_594257(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594259 = query.getOrDefault("Action")
  valid_594259 = validateParameter(valid_594259, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_594259 != nil:
    section.add "Action", valid_594259
  var valid_594260 = query.getOrDefault("Version")
  valid_594260 = validateParameter(valid_594260, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594260 != nil:
    section.add "Version", valid_594260
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594261 = header.getOrDefault("X-Amz-Date")
  valid_594261 = validateParameter(valid_594261, JString, required = false,
                                 default = nil)
  if valid_594261 != nil:
    section.add "X-Amz-Date", valid_594261
  var valid_594262 = header.getOrDefault("X-Amz-Security-Token")
  valid_594262 = validateParameter(valid_594262, JString, required = false,
                                 default = nil)
  if valid_594262 != nil:
    section.add "X-Amz-Security-Token", valid_594262
  var valid_594263 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594263 = validateParameter(valid_594263, JString, required = false,
                                 default = nil)
  if valid_594263 != nil:
    section.add "X-Amz-Content-Sha256", valid_594263
  var valid_594264 = header.getOrDefault("X-Amz-Algorithm")
  valid_594264 = validateParameter(valid_594264, JString, required = false,
                                 default = nil)
  if valid_594264 != nil:
    section.add "X-Amz-Algorithm", valid_594264
  var valid_594265 = header.getOrDefault("X-Amz-Signature")
  valid_594265 = validateParameter(valid_594265, JString, required = false,
                                 default = nil)
  if valid_594265 != nil:
    section.add "X-Amz-Signature", valid_594265
  var valid_594266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594266 = validateParameter(valid_594266, JString, required = false,
                                 default = nil)
  if valid_594266 != nil:
    section.add "X-Amz-SignedHeaders", valid_594266
  var valid_594267 = header.getOrDefault("X-Amz-Credential")
  valid_594267 = validateParameter(valid_594267, JString, required = false,
                                 default = nil)
  if valid_594267 != nil:
    section.add "X-Amz-Credential", valid_594267
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `NewPassword` field"
  var valid_594268 = formData.getOrDefault("NewPassword")
  valid_594268 = validateParameter(valid_594268, JString, required = true,
                                 default = nil)
  if valid_594268 != nil:
    section.add "NewPassword", valid_594268
  var valid_594269 = formData.getOrDefault("OldPassword")
  valid_594269 = validateParameter(valid_594269, JString, required = true,
                                 default = nil)
  if valid_594269 != nil:
    section.add "OldPassword", valid_594269
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594270: Call_PostChangePassword_594256; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594270.validator(path, query, header, formData, body)
  let scheme = call_594270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594270.url(scheme.get, call_594270.host, call_594270.base,
                         call_594270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594270, url, valid)

proc call*(call_594271: Call_PostChangePassword_594256; NewPassword: string;
          OldPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## postChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Version: string (required)
  var query_594272 = newJObject()
  var formData_594273 = newJObject()
  add(query_594272, "Action", newJString(Action))
  add(formData_594273, "NewPassword", newJString(NewPassword))
  add(formData_594273, "OldPassword", newJString(OldPassword))
  add(query_594272, "Version", newJString(Version))
  result = call_594271.call(nil, query_594272, nil, formData_594273, nil)

var postChangePassword* = Call_PostChangePassword_594256(
    name: "postChangePassword", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ChangePassword",
    validator: validate_PostChangePassword_594257, base: "/",
    url: url_PostChangePassword_594258, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChangePassword_594239 = ref object of OpenApiRestCall_593437
proc url_GetChangePassword_594241(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetChangePassword_594240(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  ##   Action: JString (required)
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OldPassword` field"
  var valid_594242 = query.getOrDefault("OldPassword")
  valid_594242 = validateParameter(valid_594242, JString, required = true,
                                 default = nil)
  if valid_594242 != nil:
    section.add "OldPassword", valid_594242
  var valid_594243 = query.getOrDefault("Action")
  valid_594243 = validateParameter(valid_594243, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_594243 != nil:
    section.add "Action", valid_594243
  var valid_594244 = query.getOrDefault("NewPassword")
  valid_594244 = validateParameter(valid_594244, JString, required = true,
                                 default = nil)
  if valid_594244 != nil:
    section.add "NewPassword", valid_594244
  var valid_594245 = query.getOrDefault("Version")
  valid_594245 = validateParameter(valid_594245, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594245 != nil:
    section.add "Version", valid_594245
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594246 = header.getOrDefault("X-Amz-Date")
  valid_594246 = validateParameter(valid_594246, JString, required = false,
                                 default = nil)
  if valid_594246 != nil:
    section.add "X-Amz-Date", valid_594246
  var valid_594247 = header.getOrDefault("X-Amz-Security-Token")
  valid_594247 = validateParameter(valid_594247, JString, required = false,
                                 default = nil)
  if valid_594247 != nil:
    section.add "X-Amz-Security-Token", valid_594247
  var valid_594248 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594248 = validateParameter(valid_594248, JString, required = false,
                                 default = nil)
  if valid_594248 != nil:
    section.add "X-Amz-Content-Sha256", valid_594248
  var valid_594249 = header.getOrDefault("X-Amz-Algorithm")
  valid_594249 = validateParameter(valid_594249, JString, required = false,
                                 default = nil)
  if valid_594249 != nil:
    section.add "X-Amz-Algorithm", valid_594249
  var valid_594250 = header.getOrDefault("X-Amz-Signature")
  valid_594250 = validateParameter(valid_594250, JString, required = false,
                                 default = nil)
  if valid_594250 != nil:
    section.add "X-Amz-Signature", valid_594250
  var valid_594251 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594251 = validateParameter(valid_594251, JString, required = false,
                                 default = nil)
  if valid_594251 != nil:
    section.add "X-Amz-SignedHeaders", valid_594251
  var valid_594252 = header.getOrDefault("X-Amz-Credential")
  valid_594252 = validateParameter(valid_594252, JString, required = false,
                                 default = nil)
  if valid_594252 != nil:
    section.add "X-Amz-Credential", valid_594252
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594253: Call_GetChangePassword_594239; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594253.validator(path, query, header, formData, body)
  let scheme = call_594253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594253.url(scheme.get, call_594253.host, call_594253.base,
                         call_594253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594253, url, valid)

proc call*(call_594254: Call_GetChangePassword_594239; OldPassword: string;
          NewPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## getChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Action: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: string (required)
  var query_594255 = newJObject()
  add(query_594255, "OldPassword", newJString(OldPassword))
  add(query_594255, "Action", newJString(Action))
  add(query_594255, "NewPassword", newJString(NewPassword))
  add(query_594255, "Version", newJString(Version))
  result = call_594254.call(nil, query_594255, nil, nil, nil)

var getChangePassword* = Call_GetChangePassword_594239(name: "getChangePassword",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ChangePassword", validator: validate_GetChangePassword_594240,
    base: "/", url: url_GetChangePassword_594241,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccessKey_594290 = ref object of OpenApiRestCall_593437
proc url_PostCreateAccessKey_594292(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateAccessKey_594291(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594293 = query.getOrDefault("Action")
  valid_594293 = validateParameter(valid_594293, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_594293 != nil:
    section.add "Action", valid_594293
  var valid_594294 = query.getOrDefault("Version")
  valid_594294 = validateParameter(valid_594294, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594294 != nil:
    section.add "Version", valid_594294
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594295 = header.getOrDefault("X-Amz-Date")
  valid_594295 = validateParameter(valid_594295, JString, required = false,
                                 default = nil)
  if valid_594295 != nil:
    section.add "X-Amz-Date", valid_594295
  var valid_594296 = header.getOrDefault("X-Amz-Security-Token")
  valid_594296 = validateParameter(valid_594296, JString, required = false,
                                 default = nil)
  if valid_594296 != nil:
    section.add "X-Amz-Security-Token", valid_594296
  var valid_594297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594297 = validateParameter(valid_594297, JString, required = false,
                                 default = nil)
  if valid_594297 != nil:
    section.add "X-Amz-Content-Sha256", valid_594297
  var valid_594298 = header.getOrDefault("X-Amz-Algorithm")
  valid_594298 = validateParameter(valid_594298, JString, required = false,
                                 default = nil)
  if valid_594298 != nil:
    section.add "X-Amz-Algorithm", valid_594298
  var valid_594299 = header.getOrDefault("X-Amz-Signature")
  valid_594299 = validateParameter(valid_594299, JString, required = false,
                                 default = nil)
  if valid_594299 != nil:
    section.add "X-Amz-Signature", valid_594299
  var valid_594300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594300 = validateParameter(valid_594300, JString, required = false,
                                 default = nil)
  if valid_594300 != nil:
    section.add "X-Amz-SignedHeaders", valid_594300
  var valid_594301 = header.getOrDefault("X-Amz-Credential")
  valid_594301 = validateParameter(valid_594301, JString, required = false,
                                 default = nil)
  if valid_594301 != nil:
    section.add "X-Amz-Credential", valid_594301
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_594302 = formData.getOrDefault("UserName")
  valid_594302 = validateParameter(valid_594302, JString, required = false,
                                 default = nil)
  if valid_594302 != nil:
    section.add "UserName", valid_594302
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594303: Call_PostCreateAccessKey_594290; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_594303.validator(path, query, header, formData, body)
  let scheme = call_594303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594303.url(scheme.get, call_594303.host, call_594303.base,
                         call_594303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594303, url, valid)

proc call*(call_594304: Call_PostCreateAccessKey_594290; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594305 = newJObject()
  var formData_594306 = newJObject()
  add(formData_594306, "UserName", newJString(UserName))
  add(query_594305, "Action", newJString(Action))
  add(query_594305, "Version", newJString(Version))
  result = call_594304.call(nil, query_594305, nil, formData_594306, nil)

var postCreateAccessKey* = Call_PostCreateAccessKey_594290(
    name: "postCreateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccessKey",
    validator: validate_PostCreateAccessKey_594291, base: "/",
    url: url_PostCreateAccessKey_594292, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccessKey_594274 = ref object of OpenApiRestCall_593437
proc url_GetCreateAccessKey_594276(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateAccessKey_594275(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_594277 = query.getOrDefault("UserName")
  valid_594277 = validateParameter(valid_594277, JString, required = false,
                                 default = nil)
  if valid_594277 != nil:
    section.add "UserName", valid_594277
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594278 = query.getOrDefault("Action")
  valid_594278 = validateParameter(valid_594278, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_594278 != nil:
    section.add "Action", valid_594278
  var valid_594279 = query.getOrDefault("Version")
  valid_594279 = validateParameter(valid_594279, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594279 != nil:
    section.add "Version", valid_594279
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594280 = header.getOrDefault("X-Amz-Date")
  valid_594280 = validateParameter(valid_594280, JString, required = false,
                                 default = nil)
  if valid_594280 != nil:
    section.add "X-Amz-Date", valid_594280
  var valid_594281 = header.getOrDefault("X-Amz-Security-Token")
  valid_594281 = validateParameter(valid_594281, JString, required = false,
                                 default = nil)
  if valid_594281 != nil:
    section.add "X-Amz-Security-Token", valid_594281
  var valid_594282 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594282 = validateParameter(valid_594282, JString, required = false,
                                 default = nil)
  if valid_594282 != nil:
    section.add "X-Amz-Content-Sha256", valid_594282
  var valid_594283 = header.getOrDefault("X-Amz-Algorithm")
  valid_594283 = validateParameter(valid_594283, JString, required = false,
                                 default = nil)
  if valid_594283 != nil:
    section.add "X-Amz-Algorithm", valid_594283
  var valid_594284 = header.getOrDefault("X-Amz-Signature")
  valid_594284 = validateParameter(valid_594284, JString, required = false,
                                 default = nil)
  if valid_594284 != nil:
    section.add "X-Amz-Signature", valid_594284
  var valid_594285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594285 = validateParameter(valid_594285, JString, required = false,
                                 default = nil)
  if valid_594285 != nil:
    section.add "X-Amz-SignedHeaders", valid_594285
  var valid_594286 = header.getOrDefault("X-Amz-Credential")
  valid_594286 = validateParameter(valid_594286, JString, required = false,
                                 default = nil)
  if valid_594286 != nil:
    section.add "X-Amz-Credential", valid_594286
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594287: Call_GetCreateAccessKey_594274; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_594287.validator(path, query, header, formData, body)
  let scheme = call_594287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594287.url(scheme.get, call_594287.host, call_594287.base,
                         call_594287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594287, url, valid)

proc call*(call_594288: Call_GetCreateAccessKey_594274; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594289 = newJObject()
  add(query_594289, "UserName", newJString(UserName))
  add(query_594289, "Action", newJString(Action))
  add(query_594289, "Version", newJString(Version))
  result = call_594288.call(nil, query_594289, nil, nil, nil)

var getCreateAccessKey* = Call_GetCreateAccessKey_594274(
    name: "getCreateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateAccessKey", validator: validate_GetCreateAccessKey_594275,
    base: "/", url: url_GetCreateAccessKey_594276,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccountAlias_594323 = ref object of OpenApiRestCall_593437
proc url_PostCreateAccountAlias_594325(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateAccountAlias_594324(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594326 = query.getOrDefault("Action")
  valid_594326 = validateParameter(valid_594326, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_594326 != nil:
    section.add "Action", valid_594326
  var valid_594327 = query.getOrDefault("Version")
  valid_594327 = validateParameter(valid_594327, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594327 != nil:
    section.add "Version", valid_594327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594328 = header.getOrDefault("X-Amz-Date")
  valid_594328 = validateParameter(valid_594328, JString, required = false,
                                 default = nil)
  if valid_594328 != nil:
    section.add "X-Amz-Date", valid_594328
  var valid_594329 = header.getOrDefault("X-Amz-Security-Token")
  valid_594329 = validateParameter(valid_594329, JString, required = false,
                                 default = nil)
  if valid_594329 != nil:
    section.add "X-Amz-Security-Token", valid_594329
  var valid_594330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594330 = validateParameter(valid_594330, JString, required = false,
                                 default = nil)
  if valid_594330 != nil:
    section.add "X-Amz-Content-Sha256", valid_594330
  var valid_594331 = header.getOrDefault("X-Amz-Algorithm")
  valid_594331 = validateParameter(valid_594331, JString, required = false,
                                 default = nil)
  if valid_594331 != nil:
    section.add "X-Amz-Algorithm", valid_594331
  var valid_594332 = header.getOrDefault("X-Amz-Signature")
  valid_594332 = validateParameter(valid_594332, JString, required = false,
                                 default = nil)
  if valid_594332 != nil:
    section.add "X-Amz-Signature", valid_594332
  var valid_594333 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594333 = validateParameter(valid_594333, JString, required = false,
                                 default = nil)
  if valid_594333 != nil:
    section.add "X-Amz-SignedHeaders", valid_594333
  var valid_594334 = header.getOrDefault("X-Amz-Credential")
  valid_594334 = validateParameter(valid_594334, JString, required = false,
                                 default = nil)
  if valid_594334 != nil:
    section.add "X-Amz-Credential", valid_594334
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_594335 = formData.getOrDefault("AccountAlias")
  valid_594335 = validateParameter(valid_594335, JString, required = true,
                                 default = nil)
  if valid_594335 != nil:
    section.add "AccountAlias", valid_594335
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594336: Call_PostCreateAccountAlias_594323; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_594336.validator(path, query, header, formData, body)
  let scheme = call_594336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594336.url(scheme.get, call_594336.host, call_594336.base,
                         call_594336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594336, url, valid)

proc call*(call_594337: Call_PostCreateAccountAlias_594323; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594338 = newJObject()
  var formData_594339 = newJObject()
  add(formData_594339, "AccountAlias", newJString(AccountAlias))
  add(query_594338, "Action", newJString(Action))
  add(query_594338, "Version", newJString(Version))
  result = call_594337.call(nil, query_594338, nil, formData_594339, nil)

var postCreateAccountAlias* = Call_PostCreateAccountAlias_594323(
    name: "postCreateAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_PostCreateAccountAlias_594324, base: "/",
    url: url_PostCreateAccountAlias_594325, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccountAlias_594307 = ref object of OpenApiRestCall_593437
proc url_GetCreateAccountAlias_594309(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateAccountAlias_594308(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_594310 = query.getOrDefault("AccountAlias")
  valid_594310 = validateParameter(valid_594310, JString, required = true,
                                 default = nil)
  if valid_594310 != nil:
    section.add "AccountAlias", valid_594310
  var valid_594311 = query.getOrDefault("Action")
  valid_594311 = validateParameter(valid_594311, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_594311 != nil:
    section.add "Action", valid_594311
  var valid_594312 = query.getOrDefault("Version")
  valid_594312 = validateParameter(valid_594312, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594312 != nil:
    section.add "Version", valid_594312
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594313 = header.getOrDefault("X-Amz-Date")
  valid_594313 = validateParameter(valid_594313, JString, required = false,
                                 default = nil)
  if valid_594313 != nil:
    section.add "X-Amz-Date", valid_594313
  var valid_594314 = header.getOrDefault("X-Amz-Security-Token")
  valid_594314 = validateParameter(valid_594314, JString, required = false,
                                 default = nil)
  if valid_594314 != nil:
    section.add "X-Amz-Security-Token", valid_594314
  var valid_594315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594315 = validateParameter(valid_594315, JString, required = false,
                                 default = nil)
  if valid_594315 != nil:
    section.add "X-Amz-Content-Sha256", valid_594315
  var valid_594316 = header.getOrDefault("X-Amz-Algorithm")
  valid_594316 = validateParameter(valid_594316, JString, required = false,
                                 default = nil)
  if valid_594316 != nil:
    section.add "X-Amz-Algorithm", valid_594316
  var valid_594317 = header.getOrDefault("X-Amz-Signature")
  valid_594317 = validateParameter(valid_594317, JString, required = false,
                                 default = nil)
  if valid_594317 != nil:
    section.add "X-Amz-Signature", valid_594317
  var valid_594318 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594318 = validateParameter(valid_594318, JString, required = false,
                                 default = nil)
  if valid_594318 != nil:
    section.add "X-Amz-SignedHeaders", valid_594318
  var valid_594319 = header.getOrDefault("X-Amz-Credential")
  valid_594319 = validateParameter(valid_594319, JString, required = false,
                                 default = nil)
  if valid_594319 != nil:
    section.add "X-Amz-Credential", valid_594319
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594320: Call_GetCreateAccountAlias_594307; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_594320.validator(path, query, header, formData, body)
  let scheme = call_594320.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594320.url(scheme.get, call_594320.host, call_594320.base,
                         call_594320.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594320, url, valid)

proc call*(call_594321: Call_GetCreateAccountAlias_594307; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594322 = newJObject()
  add(query_594322, "AccountAlias", newJString(AccountAlias))
  add(query_594322, "Action", newJString(Action))
  add(query_594322, "Version", newJString(Version))
  result = call_594321.call(nil, query_594322, nil, nil, nil)

var getCreateAccountAlias* = Call_GetCreateAccountAlias_594307(
    name: "getCreateAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_GetCreateAccountAlias_594308, base: "/",
    url: url_GetCreateAccountAlias_594309, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGroup_594357 = ref object of OpenApiRestCall_593437
proc url_PostCreateGroup_594359(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateGroup_594358(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594360 = query.getOrDefault("Action")
  valid_594360 = validateParameter(valid_594360, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_594360 != nil:
    section.add "Action", valid_594360
  var valid_594361 = query.getOrDefault("Version")
  valid_594361 = validateParameter(valid_594361, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594361 != nil:
    section.add "Version", valid_594361
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594362 = header.getOrDefault("X-Amz-Date")
  valid_594362 = validateParameter(valid_594362, JString, required = false,
                                 default = nil)
  if valid_594362 != nil:
    section.add "X-Amz-Date", valid_594362
  var valid_594363 = header.getOrDefault("X-Amz-Security-Token")
  valid_594363 = validateParameter(valid_594363, JString, required = false,
                                 default = nil)
  if valid_594363 != nil:
    section.add "X-Amz-Security-Token", valid_594363
  var valid_594364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594364 = validateParameter(valid_594364, JString, required = false,
                                 default = nil)
  if valid_594364 != nil:
    section.add "X-Amz-Content-Sha256", valid_594364
  var valid_594365 = header.getOrDefault("X-Amz-Algorithm")
  valid_594365 = validateParameter(valid_594365, JString, required = false,
                                 default = nil)
  if valid_594365 != nil:
    section.add "X-Amz-Algorithm", valid_594365
  var valid_594366 = header.getOrDefault("X-Amz-Signature")
  valid_594366 = validateParameter(valid_594366, JString, required = false,
                                 default = nil)
  if valid_594366 != nil:
    section.add "X-Amz-Signature", valid_594366
  var valid_594367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594367 = validateParameter(valid_594367, JString, required = false,
                                 default = nil)
  if valid_594367 != nil:
    section.add "X-Amz-SignedHeaders", valid_594367
  var valid_594368 = header.getOrDefault("X-Amz-Credential")
  valid_594368 = validateParameter(valid_594368, JString, required = false,
                                 default = nil)
  if valid_594368 != nil:
    section.add "X-Amz-Credential", valid_594368
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_594369 = formData.getOrDefault("GroupName")
  valid_594369 = validateParameter(valid_594369, JString, required = true,
                                 default = nil)
  if valid_594369 != nil:
    section.add "GroupName", valid_594369
  var valid_594370 = formData.getOrDefault("Path")
  valid_594370 = validateParameter(valid_594370, JString, required = false,
                                 default = nil)
  if valid_594370 != nil:
    section.add "Path", valid_594370
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594371: Call_PostCreateGroup_594357; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594371.validator(path, query, header, formData, body)
  let scheme = call_594371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594371.url(scheme.get, call_594371.host, call_594371.base,
                         call_594371.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594371, url, valid)

proc call*(call_594372: Call_PostCreateGroup_594357; GroupName: string;
          Action: string = "CreateGroup"; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_594373 = newJObject()
  var formData_594374 = newJObject()
  add(formData_594374, "GroupName", newJString(GroupName))
  add(query_594373, "Action", newJString(Action))
  add(query_594373, "Version", newJString(Version))
  add(formData_594374, "Path", newJString(Path))
  result = call_594372.call(nil, query_594373, nil, formData_594374, nil)

var postCreateGroup* = Call_PostCreateGroup_594357(name: "postCreateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_PostCreateGroup_594358,
    base: "/", url: url_PostCreateGroup_594359, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGroup_594340 = ref object of OpenApiRestCall_593437
proc url_GetCreateGroup_594342(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateGroup_594341(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594343 = query.getOrDefault("Action")
  valid_594343 = validateParameter(valid_594343, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_594343 != nil:
    section.add "Action", valid_594343
  var valid_594344 = query.getOrDefault("GroupName")
  valid_594344 = validateParameter(valid_594344, JString, required = true,
                                 default = nil)
  if valid_594344 != nil:
    section.add "GroupName", valid_594344
  var valid_594345 = query.getOrDefault("Path")
  valid_594345 = validateParameter(valid_594345, JString, required = false,
                                 default = nil)
  if valid_594345 != nil:
    section.add "Path", valid_594345
  var valid_594346 = query.getOrDefault("Version")
  valid_594346 = validateParameter(valid_594346, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594346 != nil:
    section.add "Version", valid_594346
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594347 = header.getOrDefault("X-Amz-Date")
  valid_594347 = validateParameter(valid_594347, JString, required = false,
                                 default = nil)
  if valid_594347 != nil:
    section.add "X-Amz-Date", valid_594347
  var valid_594348 = header.getOrDefault("X-Amz-Security-Token")
  valid_594348 = validateParameter(valid_594348, JString, required = false,
                                 default = nil)
  if valid_594348 != nil:
    section.add "X-Amz-Security-Token", valid_594348
  var valid_594349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594349 = validateParameter(valid_594349, JString, required = false,
                                 default = nil)
  if valid_594349 != nil:
    section.add "X-Amz-Content-Sha256", valid_594349
  var valid_594350 = header.getOrDefault("X-Amz-Algorithm")
  valid_594350 = validateParameter(valid_594350, JString, required = false,
                                 default = nil)
  if valid_594350 != nil:
    section.add "X-Amz-Algorithm", valid_594350
  var valid_594351 = header.getOrDefault("X-Amz-Signature")
  valid_594351 = validateParameter(valid_594351, JString, required = false,
                                 default = nil)
  if valid_594351 != nil:
    section.add "X-Amz-Signature", valid_594351
  var valid_594352 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594352 = validateParameter(valid_594352, JString, required = false,
                                 default = nil)
  if valid_594352 != nil:
    section.add "X-Amz-SignedHeaders", valid_594352
  var valid_594353 = header.getOrDefault("X-Amz-Credential")
  valid_594353 = validateParameter(valid_594353, JString, required = false,
                                 default = nil)
  if valid_594353 != nil:
    section.add "X-Amz-Credential", valid_594353
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594354: Call_GetCreateGroup_594340; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594354.validator(path, query, header, formData, body)
  let scheme = call_594354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594354.url(scheme.get, call_594354.host, call_594354.base,
                         call_594354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594354, url, valid)

proc call*(call_594355: Call_GetCreateGroup_594340; GroupName: string;
          Action: string = "CreateGroup"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_594356 = newJObject()
  add(query_594356, "Action", newJString(Action))
  add(query_594356, "GroupName", newJString(GroupName))
  add(query_594356, "Path", newJString(Path))
  add(query_594356, "Version", newJString(Version))
  result = call_594355.call(nil, query_594356, nil, nil, nil)

var getCreateGroup* = Call_GetCreateGroup_594340(name: "getCreateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_GetCreateGroup_594341,
    base: "/", url: url_GetCreateGroup_594342, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateInstanceProfile_594392 = ref object of OpenApiRestCall_593437
proc url_PostCreateInstanceProfile_594394(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateInstanceProfile_594393(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594395 = query.getOrDefault("Action")
  valid_594395 = validateParameter(valid_594395, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_594395 != nil:
    section.add "Action", valid_594395
  var valid_594396 = query.getOrDefault("Version")
  valid_594396 = validateParameter(valid_594396, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594396 != nil:
    section.add "Version", valid_594396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594397 = header.getOrDefault("X-Amz-Date")
  valid_594397 = validateParameter(valid_594397, JString, required = false,
                                 default = nil)
  if valid_594397 != nil:
    section.add "X-Amz-Date", valid_594397
  var valid_594398 = header.getOrDefault("X-Amz-Security-Token")
  valid_594398 = validateParameter(valid_594398, JString, required = false,
                                 default = nil)
  if valid_594398 != nil:
    section.add "X-Amz-Security-Token", valid_594398
  var valid_594399 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594399 = validateParameter(valid_594399, JString, required = false,
                                 default = nil)
  if valid_594399 != nil:
    section.add "X-Amz-Content-Sha256", valid_594399
  var valid_594400 = header.getOrDefault("X-Amz-Algorithm")
  valid_594400 = validateParameter(valid_594400, JString, required = false,
                                 default = nil)
  if valid_594400 != nil:
    section.add "X-Amz-Algorithm", valid_594400
  var valid_594401 = header.getOrDefault("X-Amz-Signature")
  valid_594401 = validateParameter(valid_594401, JString, required = false,
                                 default = nil)
  if valid_594401 != nil:
    section.add "X-Amz-Signature", valid_594401
  var valid_594402 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594402 = validateParameter(valid_594402, JString, required = false,
                                 default = nil)
  if valid_594402 != nil:
    section.add "X-Amz-SignedHeaders", valid_594402
  var valid_594403 = header.getOrDefault("X-Amz-Credential")
  valid_594403 = validateParameter(valid_594403, JString, required = false,
                                 default = nil)
  if valid_594403 != nil:
    section.add "X-Amz-Credential", valid_594403
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_594404 = formData.getOrDefault("InstanceProfileName")
  valid_594404 = validateParameter(valid_594404, JString, required = true,
                                 default = nil)
  if valid_594404 != nil:
    section.add "InstanceProfileName", valid_594404
  var valid_594405 = formData.getOrDefault("Path")
  valid_594405 = validateParameter(valid_594405, JString, required = false,
                                 default = nil)
  if valid_594405 != nil:
    section.add "Path", valid_594405
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594406: Call_PostCreateInstanceProfile_594392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594406.validator(path, query, header, formData, body)
  let scheme = call_594406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594406.url(scheme.get, call_594406.host, call_594406.base,
                         call_594406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594406, url, valid)

proc call*(call_594407: Call_PostCreateInstanceProfile_594392;
          InstanceProfileName: string; Action: string = "CreateInstanceProfile";
          Version: string = "2010-05-08"; Path: string = ""): Recallable =
  ## postCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_594408 = newJObject()
  var formData_594409 = newJObject()
  add(query_594408, "Action", newJString(Action))
  add(formData_594409, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_594408, "Version", newJString(Version))
  add(formData_594409, "Path", newJString(Path))
  result = call_594407.call(nil, query_594408, nil, formData_594409, nil)

var postCreateInstanceProfile* = Call_PostCreateInstanceProfile_594392(
    name: "postCreateInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_PostCreateInstanceProfile_594393, base: "/",
    url: url_PostCreateInstanceProfile_594394,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateInstanceProfile_594375 = ref object of OpenApiRestCall_593437
proc url_GetCreateInstanceProfile_594377(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateInstanceProfile_594376(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_594378 = query.getOrDefault("InstanceProfileName")
  valid_594378 = validateParameter(valid_594378, JString, required = true,
                                 default = nil)
  if valid_594378 != nil:
    section.add "InstanceProfileName", valid_594378
  var valid_594379 = query.getOrDefault("Action")
  valid_594379 = validateParameter(valid_594379, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_594379 != nil:
    section.add "Action", valid_594379
  var valid_594380 = query.getOrDefault("Path")
  valid_594380 = validateParameter(valid_594380, JString, required = false,
                                 default = nil)
  if valid_594380 != nil:
    section.add "Path", valid_594380
  var valid_594381 = query.getOrDefault("Version")
  valid_594381 = validateParameter(valid_594381, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594381 != nil:
    section.add "Version", valid_594381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594382 = header.getOrDefault("X-Amz-Date")
  valid_594382 = validateParameter(valid_594382, JString, required = false,
                                 default = nil)
  if valid_594382 != nil:
    section.add "X-Amz-Date", valid_594382
  var valid_594383 = header.getOrDefault("X-Amz-Security-Token")
  valid_594383 = validateParameter(valid_594383, JString, required = false,
                                 default = nil)
  if valid_594383 != nil:
    section.add "X-Amz-Security-Token", valid_594383
  var valid_594384 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594384 = validateParameter(valid_594384, JString, required = false,
                                 default = nil)
  if valid_594384 != nil:
    section.add "X-Amz-Content-Sha256", valid_594384
  var valid_594385 = header.getOrDefault("X-Amz-Algorithm")
  valid_594385 = validateParameter(valid_594385, JString, required = false,
                                 default = nil)
  if valid_594385 != nil:
    section.add "X-Amz-Algorithm", valid_594385
  var valid_594386 = header.getOrDefault("X-Amz-Signature")
  valid_594386 = validateParameter(valid_594386, JString, required = false,
                                 default = nil)
  if valid_594386 != nil:
    section.add "X-Amz-Signature", valid_594386
  var valid_594387 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594387 = validateParameter(valid_594387, JString, required = false,
                                 default = nil)
  if valid_594387 != nil:
    section.add "X-Amz-SignedHeaders", valid_594387
  var valid_594388 = header.getOrDefault("X-Amz-Credential")
  valid_594388 = validateParameter(valid_594388, JString, required = false,
                                 default = nil)
  if valid_594388 != nil:
    section.add "X-Amz-Credential", valid_594388
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594389: Call_GetCreateInstanceProfile_594375; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594389.validator(path, query, header, formData, body)
  let scheme = call_594389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594389.url(scheme.get, call_594389.host, call_594389.base,
                         call_594389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594389, url, valid)

proc call*(call_594390: Call_GetCreateInstanceProfile_594375;
          InstanceProfileName: string; Action: string = "CreateInstanceProfile";
          Path: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_594391 = newJObject()
  add(query_594391, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_594391, "Action", newJString(Action))
  add(query_594391, "Path", newJString(Path))
  add(query_594391, "Version", newJString(Version))
  result = call_594390.call(nil, query_594391, nil, nil, nil)

var getCreateInstanceProfile* = Call_GetCreateInstanceProfile_594375(
    name: "getCreateInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_GetCreateInstanceProfile_594376, base: "/",
    url: url_GetCreateInstanceProfile_594377, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLoginProfile_594428 = ref object of OpenApiRestCall_593437
proc url_PostCreateLoginProfile_594430(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateLoginProfile_594429(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594431 = query.getOrDefault("Action")
  valid_594431 = validateParameter(valid_594431, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_594431 != nil:
    section.add "Action", valid_594431
  var valid_594432 = query.getOrDefault("Version")
  valid_594432 = validateParameter(valid_594432, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594432 != nil:
    section.add "Version", valid_594432
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594433 = header.getOrDefault("X-Amz-Date")
  valid_594433 = validateParameter(valid_594433, JString, required = false,
                                 default = nil)
  if valid_594433 != nil:
    section.add "X-Amz-Date", valid_594433
  var valid_594434 = header.getOrDefault("X-Amz-Security-Token")
  valid_594434 = validateParameter(valid_594434, JString, required = false,
                                 default = nil)
  if valid_594434 != nil:
    section.add "X-Amz-Security-Token", valid_594434
  var valid_594435 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594435 = validateParameter(valid_594435, JString, required = false,
                                 default = nil)
  if valid_594435 != nil:
    section.add "X-Amz-Content-Sha256", valid_594435
  var valid_594436 = header.getOrDefault("X-Amz-Algorithm")
  valid_594436 = validateParameter(valid_594436, JString, required = false,
                                 default = nil)
  if valid_594436 != nil:
    section.add "X-Amz-Algorithm", valid_594436
  var valid_594437 = header.getOrDefault("X-Amz-Signature")
  valid_594437 = validateParameter(valid_594437, JString, required = false,
                                 default = nil)
  if valid_594437 != nil:
    section.add "X-Amz-Signature", valid_594437
  var valid_594438 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594438 = validateParameter(valid_594438, JString, required = false,
                                 default = nil)
  if valid_594438 != nil:
    section.add "X-Amz-SignedHeaders", valid_594438
  var valid_594439 = header.getOrDefault("X-Amz-Credential")
  valid_594439 = validateParameter(valid_594439, JString, required = false,
                                 default = nil)
  if valid_594439 != nil:
    section.add "X-Amz-Credential", valid_594439
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_594440 = formData.getOrDefault("UserName")
  valid_594440 = validateParameter(valid_594440, JString, required = true,
                                 default = nil)
  if valid_594440 != nil:
    section.add "UserName", valid_594440
  var valid_594441 = formData.getOrDefault("Password")
  valid_594441 = validateParameter(valid_594441, JString, required = true,
                                 default = nil)
  if valid_594441 != nil:
    section.add "Password", valid_594441
  var valid_594442 = formData.getOrDefault("PasswordResetRequired")
  valid_594442 = validateParameter(valid_594442, JBool, required = false, default = nil)
  if valid_594442 != nil:
    section.add "PasswordResetRequired", valid_594442
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594443: Call_PostCreateLoginProfile_594428; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_594443.validator(path, query, header, formData, body)
  let scheme = call_594443.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594443.url(scheme.get, call_594443.host, call_594443.base,
                         call_594443.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594443, url, valid)

proc call*(call_594444: Call_PostCreateLoginProfile_594428; UserName: string;
          Password: string; PasswordResetRequired: bool = false;
          Action: string = "CreateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594445 = newJObject()
  var formData_594446 = newJObject()
  add(formData_594446, "UserName", newJString(UserName))
  add(formData_594446, "Password", newJString(Password))
  add(formData_594446, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_594445, "Action", newJString(Action))
  add(query_594445, "Version", newJString(Version))
  result = call_594444.call(nil, query_594445, nil, formData_594446, nil)

var postCreateLoginProfile* = Call_PostCreateLoginProfile_594428(
    name: "postCreateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_PostCreateLoginProfile_594429, base: "/",
    url: url_PostCreateLoginProfile_594430, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLoginProfile_594410 = ref object of OpenApiRestCall_593437
proc url_GetCreateLoginProfile_594412(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateLoginProfile_594411(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_594413 = query.getOrDefault("UserName")
  valid_594413 = validateParameter(valid_594413, JString, required = true,
                                 default = nil)
  if valid_594413 != nil:
    section.add "UserName", valid_594413
  var valid_594414 = query.getOrDefault("PasswordResetRequired")
  valid_594414 = validateParameter(valid_594414, JBool, required = false, default = nil)
  if valid_594414 != nil:
    section.add "PasswordResetRequired", valid_594414
  var valid_594415 = query.getOrDefault("Action")
  valid_594415 = validateParameter(valid_594415, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_594415 != nil:
    section.add "Action", valid_594415
  var valid_594416 = query.getOrDefault("Password")
  valid_594416 = validateParameter(valid_594416, JString, required = true,
                                 default = nil)
  if valid_594416 != nil:
    section.add "Password", valid_594416
  var valid_594417 = query.getOrDefault("Version")
  valid_594417 = validateParameter(valid_594417, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594417 != nil:
    section.add "Version", valid_594417
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594418 = header.getOrDefault("X-Amz-Date")
  valid_594418 = validateParameter(valid_594418, JString, required = false,
                                 default = nil)
  if valid_594418 != nil:
    section.add "X-Amz-Date", valid_594418
  var valid_594419 = header.getOrDefault("X-Amz-Security-Token")
  valid_594419 = validateParameter(valid_594419, JString, required = false,
                                 default = nil)
  if valid_594419 != nil:
    section.add "X-Amz-Security-Token", valid_594419
  var valid_594420 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594420 = validateParameter(valid_594420, JString, required = false,
                                 default = nil)
  if valid_594420 != nil:
    section.add "X-Amz-Content-Sha256", valid_594420
  var valid_594421 = header.getOrDefault("X-Amz-Algorithm")
  valid_594421 = validateParameter(valid_594421, JString, required = false,
                                 default = nil)
  if valid_594421 != nil:
    section.add "X-Amz-Algorithm", valid_594421
  var valid_594422 = header.getOrDefault("X-Amz-Signature")
  valid_594422 = validateParameter(valid_594422, JString, required = false,
                                 default = nil)
  if valid_594422 != nil:
    section.add "X-Amz-Signature", valid_594422
  var valid_594423 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594423 = validateParameter(valid_594423, JString, required = false,
                                 default = nil)
  if valid_594423 != nil:
    section.add "X-Amz-SignedHeaders", valid_594423
  var valid_594424 = header.getOrDefault("X-Amz-Credential")
  valid_594424 = validateParameter(valid_594424, JString, required = false,
                                 default = nil)
  if valid_594424 != nil:
    section.add "X-Amz-Credential", valid_594424
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594425: Call_GetCreateLoginProfile_594410; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_594425.validator(path, query, header, formData, body)
  let scheme = call_594425.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594425.url(scheme.get, call_594425.host, call_594425.base,
                         call_594425.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594425, url, valid)

proc call*(call_594426: Call_GetCreateLoginProfile_594410; UserName: string;
          Password: string; PasswordResetRequired: bool = false;
          Action: string = "CreateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: string (required)
  var query_594427 = newJObject()
  add(query_594427, "UserName", newJString(UserName))
  add(query_594427, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_594427, "Action", newJString(Action))
  add(query_594427, "Password", newJString(Password))
  add(query_594427, "Version", newJString(Version))
  result = call_594426.call(nil, query_594427, nil, nil, nil)

var getCreateLoginProfile* = Call_GetCreateLoginProfile_594410(
    name: "getCreateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_GetCreateLoginProfile_594411, base: "/",
    url: url_GetCreateLoginProfile_594412, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOpenIDConnectProvider_594465 = ref object of OpenApiRestCall_593437
proc url_PostCreateOpenIDConnectProvider_594467(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateOpenIDConnectProvider_594466(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594468 = query.getOrDefault("Action")
  valid_594468 = validateParameter(valid_594468, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_594468 != nil:
    section.add "Action", valid_594468
  var valid_594469 = query.getOrDefault("Version")
  valid_594469 = validateParameter(valid_594469, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594469 != nil:
    section.add "Version", valid_594469
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594470 = header.getOrDefault("X-Amz-Date")
  valid_594470 = validateParameter(valid_594470, JString, required = false,
                                 default = nil)
  if valid_594470 != nil:
    section.add "X-Amz-Date", valid_594470
  var valid_594471 = header.getOrDefault("X-Amz-Security-Token")
  valid_594471 = validateParameter(valid_594471, JString, required = false,
                                 default = nil)
  if valid_594471 != nil:
    section.add "X-Amz-Security-Token", valid_594471
  var valid_594472 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594472 = validateParameter(valid_594472, JString, required = false,
                                 default = nil)
  if valid_594472 != nil:
    section.add "X-Amz-Content-Sha256", valid_594472
  var valid_594473 = header.getOrDefault("X-Amz-Algorithm")
  valid_594473 = validateParameter(valid_594473, JString, required = false,
                                 default = nil)
  if valid_594473 != nil:
    section.add "X-Amz-Algorithm", valid_594473
  var valid_594474 = header.getOrDefault("X-Amz-Signature")
  valid_594474 = validateParameter(valid_594474, JString, required = false,
                                 default = nil)
  if valid_594474 != nil:
    section.add "X-Amz-Signature", valid_594474
  var valid_594475 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594475 = validateParameter(valid_594475, JString, required = false,
                                 default = nil)
  if valid_594475 != nil:
    section.add "X-Amz-SignedHeaders", valid_594475
  var valid_594476 = header.getOrDefault("X-Amz-Credential")
  valid_594476 = validateParameter(valid_594476, JString, required = false,
                                 default = nil)
  if valid_594476 != nil:
    section.add "X-Amz-Credential", valid_594476
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  section = newJObject()
  var valid_594477 = formData.getOrDefault("ClientIDList")
  valid_594477 = validateParameter(valid_594477, JArray, required = false,
                                 default = nil)
  if valid_594477 != nil:
    section.add "ClientIDList", valid_594477
  assert formData != nil,
        "formData argument is necessary due to required `ThumbprintList` field"
  var valid_594478 = formData.getOrDefault("ThumbprintList")
  valid_594478 = validateParameter(valid_594478, JArray, required = true, default = nil)
  if valid_594478 != nil:
    section.add "ThumbprintList", valid_594478
  var valid_594479 = formData.getOrDefault("Url")
  valid_594479 = validateParameter(valid_594479, JString, required = true,
                                 default = nil)
  if valid_594479 != nil:
    section.add "Url", valid_594479
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594480: Call_PostCreateOpenIDConnectProvider_594465;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_594480.validator(path, query, header, formData, body)
  let scheme = call_594480.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594480.url(scheme.get, call_594480.host, call_594480.base,
                         call_594480.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594480, url, valid)

proc call*(call_594481: Call_PostCreateOpenIDConnectProvider_594465;
          ThumbprintList: JsonNode; Url: string; ClientIDList: JsonNode = nil;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  var query_594482 = newJObject()
  var formData_594483 = newJObject()
  if ClientIDList != nil:
    formData_594483.add "ClientIDList", ClientIDList
  if ThumbprintList != nil:
    formData_594483.add "ThumbprintList", ThumbprintList
  add(query_594482, "Action", newJString(Action))
  add(query_594482, "Version", newJString(Version))
  add(formData_594483, "Url", newJString(Url))
  result = call_594481.call(nil, query_594482, nil, formData_594483, nil)

var postCreateOpenIDConnectProvider* = Call_PostCreateOpenIDConnectProvider_594465(
    name: "postCreateOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_PostCreateOpenIDConnectProvider_594466, base: "/",
    url: url_PostCreateOpenIDConnectProvider_594467,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOpenIDConnectProvider_594447 = ref object of OpenApiRestCall_593437
proc url_GetCreateOpenIDConnectProvider_594449(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateOpenIDConnectProvider_594448(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: JString (required)
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: JString (required)
  section = newJObject()
  var valid_594450 = query.getOrDefault("ClientIDList")
  valid_594450 = validateParameter(valid_594450, JArray, required = false,
                                 default = nil)
  if valid_594450 != nil:
    section.add "ClientIDList", valid_594450
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_594451 = query.getOrDefault("ThumbprintList")
  valid_594451 = validateParameter(valid_594451, JArray, required = true, default = nil)
  if valid_594451 != nil:
    section.add "ThumbprintList", valid_594451
  var valid_594452 = query.getOrDefault("Action")
  valid_594452 = validateParameter(valid_594452, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_594452 != nil:
    section.add "Action", valid_594452
  var valid_594453 = query.getOrDefault("Url")
  valid_594453 = validateParameter(valid_594453, JString, required = true,
                                 default = nil)
  if valid_594453 != nil:
    section.add "Url", valid_594453
  var valid_594454 = query.getOrDefault("Version")
  valid_594454 = validateParameter(valid_594454, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594454 != nil:
    section.add "Version", valid_594454
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594455 = header.getOrDefault("X-Amz-Date")
  valid_594455 = validateParameter(valid_594455, JString, required = false,
                                 default = nil)
  if valid_594455 != nil:
    section.add "X-Amz-Date", valid_594455
  var valid_594456 = header.getOrDefault("X-Amz-Security-Token")
  valid_594456 = validateParameter(valid_594456, JString, required = false,
                                 default = nil)
  if valid_594456 != nil:
    section.add "X-Amz-Security-Token", valid_594456
  var valid_594457 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594457 = validateParameter(valid_594457, JString, required = false,
                                 default = nil)
  if valid_594457 != nil:
    section.add "X-Amz-Content-Sha256", valid_594457
  var valid_594458 = header.getOrDefault("X-Amz-Algorithm")
  valid_594458 = validateParameter(valid_594458, JString, required = false,
                                 default = nil)
  if valid_594458 != nil:
    section.add "X-Amz-Algorithm", valid_594458
  var valid_594459 = header.getOrDefault("X-Amz-Signature")
  valid_594459 = validateParameter(valid_594459, JString, required = false,
                                 default = nil)
  if valid_594459 != nil:
    section.add "X-Amz-Signature", valid_594459
  var valid_594460 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594460 = validateParameter(valid_594460, JString, required = false,
                                 default = nil)
  if valid_594460 != nil:
    section.add "X-Amz-SignedHeaders", valid_594460
  var valid_594461 = header.getOrDefault("X-Amz-Credential")
  valid_594461 = validateParameter(valid_594461, JString, required = false,
                                 default = nil)
  if valid_594461 != nil:
    section.add "X-Amz-Credential", valid_594461
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594462: Call_GetCreateOpenIDConnectProvider_594447; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_594462.validator(path, query, header, formData, body)
  let scheme = call_594462.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594462.url(scheme.get, call_594462.host, call_594462.base,
                         call_594462.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594462, url, valid)

proc call*(call_594463: Call_GetCreateOpenIDConnectProvider_594447;
          ThumbprintList: JsonNode; Url: string; ClientIDList: JsonNode = nil;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: string (required)
  var query_594464 = newJObject()
  if ClientIDList != nil:
    query_594464.add "ClientIDList", ClientIDList
  if ThumbprintList != nil:
    query_594464.add "ThumbprintList", ThumbprintList
  add(query_594464, "Action", newJString(Action))
  add(query_594464, "Url", newJString(Url))
  add(query_594464, "Version", newJString(Version))
  result = call_594463.call(nil, query_594464, nil, nil, nil)

var getCreateOpenIDConnectProvider* = Call_GetCreateOpenIDConnectProvider_594447(
    name: "getCreateOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_GetCreateOpenIDConnectProvider_594448, base: "/",
    url: url_GetCreateOpenIDConnectProvider_594449,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicy_594503 = ref object of OpenApiRestCall_593437
proc url_PostCreatePolicy_594505(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreatePolicy_594504(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594506 = query.getOrDefault("Action")
  valid_594506 = validateParameter(valid_594506, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_594506 != nil:
    section.add "Action", valid_594506
  var valid_594507 = query.getOrDefault("Version")
  valid_594507 = validateParameter(valid_594507, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594507 != nil:
    section.add "Version", valid_594507
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594508 = header.getOrDefault("X-Amz-Date")
  valid_594508 = validateParameter(valid_594508, JString, required = false,
                                 default = nil)
  if valid_594508 != nil:
    section.add "X-Amz-Date", valid_594508
  var valid_594509 = header.getOrDefault("X-Amz-Security-Token")
  valid_594509 = validateParameter(valid_594509, JString, required = false,
                                 default = nil)
  if valid_594509 != nil:
    section.add "X-Amz-Security-Token", valid_594509
  var valid_594510 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594510 = validateParameter(valid_594510, JString, required = false,
                                 default = nil)
  if valid_594510 != nil:
    section.add "X-Amz-Content-Sha256", valid_594510
  var valid_594511 = header.getOrDefault("X-Amz-Algorithm")
  valid_594511 = validateParameter(valid_594511, JString, required = false,
                                 default = nil)
  if valid_594511 != nil:
    section.add "X-Amz-Algorithm", valid_594511
  var valid_594512 = header.getOrDefault("X-Amz-Signature")
  valid_594512 = validateParameter(valid_594512, JString, required = false,
                                 default = nil)
  if valid_594512 != nil:
    section.add "X-Amz-Signature", valid_594512
  var valid_594513 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594513 = validateParameter(valid_594513, JString, required = false,
                                 default = nil)
  if valid_594513 != nil:
    section.add "X-Amz-SignedHeaders", valid_594513
  var valid_594514 = header.getOrDefault("X-Amz-Credential")
  valid_594514 = validateParameter(valid_594514, JString, required = false,
                                 default = nil)
  if valid_594514 != nil:
    section.add "X-Amz-Credential", valid_594514
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_594515 = formData.getOrDefault("PolicyName")
  valid_594515 = validateParameter(valid_594515, JString, required = true,
                                 default = nil)
  if valid_594515 != nil:
    section.add "PolicyName", valid_594515
  var valid_594516 = formData.getOrDefault("PolicyDocument")
  valid_594516 = validateParameter(valid_594516, JString, required = true,
                                 default = nil)
  if valid_594516 != nil:
    section.add "PolicyDocument", valid_594516
  var valid_594517 = formData.getOrDefault("Description")
  valid_594517 = validateParameter(valid_594517, JString, required = false,
                                 default = nil)
  if valid_594517 != nil:
    section.add "Description", valid_594517
  var valid_594518 = formData.getOrDefault("Path")
  valid_594518 = validateParameter(valid_594518, JString, required = false,
                                 default = nil)
  if valid_594518 != nil:
    section.add "Path", valid_594518
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594519: Call_PostCreatePolicy_594503; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594519.validator(path, query, header, formData, body)
  let scheme = call_594519.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594519.url(scheme.get, call_594519.host, call_594519.base,
                         call_594519.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594519, url, valid)

proc call*(call_594520: Call_PostCreatePolicy_594503; PolicyName: string;
          PolicyDocument: string; Action: string = "CreatePolicy";
          Version: string = "2010-05-08"; Description: string = ""; Path: string = ""): Recallable =
  ## postCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_594521 = newJObject()
  var formData_594522 = newJObject()
  add(formData_594522, "PolicyName", newJString(PolicyName))
  add(formData_594522, "PolicyDocument", newJString(PolicyDocument))
  add(query_594521, "Action", newJString(Action))
  add(query_594521, "Version", newJString(Version))
  add(formData_594522, "Description", newJString(Description))
  add(formData_594522, "Path", newJString(Path))
  result = call_594520.call(nil, query_594521, nil, formData_594522, nil)

var postCreatePolicy* = Call_PostCreatePolicy_594503(name: "postCreatePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_PostCreatePolicy_594504,
    base: "/", url: url_PostCreatePolicy_594505,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicy_594484 = ref object of OpenApiRestCall_593437
proc url_GetCreatePolicy_594486(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreatePolicy_594485(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  section = newJObject()
  var valid_594487 = query.getOrDefault("Description")
  valid_594487 = validateParameter(valid_594487, JString, required = false,
                                 default = nil)
  if valid_594487 != nil:
    section.add "Description", valid_594487
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594488 = query.getOrDefault("Action")
  valid_594488 = validateParameter(valid_594488, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_594488 != nil:
    section.add "Action", valid_594488
  var valid_594489 = query.getOrDefault("PolicyDocument")
  valid_594489 = validateParameter(valid_594489, JString, required = true,
                                 default = nil)
  if valid_594489 != nil:
    section.add "PolicyDocument", valid_594489
  var valid_594490 = query.getOrDefault("Path")
  valid_594490 = validateParameter(valid_594490, JString, required = false,
                                 default = nil)
  if valid_594490 != nil:
    section.add "Path", valid_594490
  var valid_594491 = query.getOrDefault("Version")
  valid_594491 = validateParameter(valid_594491, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594491 != nil:
    section.add "Version", valid_594491
  var valid_594492 = query.getOrDefault("PolicyName")
  valid_594492 = validateParameter(valid_594492, JString, required = true,
                                 default = nil)
  if valid_594492 != nil:
    section.add "PolicyName", valid_594492
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594493 = header.getOrDefault("X-Amz-Date")
  valid_594493 = validateParameter(valid_594493, JString, required = false,
                                 default = nil)
  if valid_594493 != nil:
    section.add "X-Amz-Date", valid_594493
  var valid_594494 = header.getOrDefault("X-Amz-Security-Token")
  valid_594494 = validateParameter(valid_594494, JString, required = false,
                                 default = nil)
  if valid_594494 != nil:
    section.add "X-Amz-Security-Token", valid_594494
  var valid_594495 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594495 = validateParameter(valid_594495, JString, required = false,
                                 default = nil)
  if valid_594495 != nil:
    section.add "X-Amz-Content-Sha256", valid_594495
  var valid_594496 = header.getOrDefault("X-Amz-Algorithm")
  valid_594496 = validateParameter(valid_594496, JString, required = false,
                                 default = nil)
  if valid_594496 != nil:
    section.add "X-Amz-Algorithm", valid_594496
  var valid_594497 = header.getOrDefault("X-Amz-Signature")
  valid_594497 = validateParameter(valid_594497, JString, required = false,
                                 default = nil)
  if valid_594497 != nil:
    section.add "X-Amz-Signature", valid_594497
  var valid_594498 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594498 = validateParameter(valid_594498, JString, required = false,
                                 default = nil)
  if valid_594498 != nil:
    section.add "X-Amz-SignedHeaders", valid_594498
  var valid_594499 = header.getOrDefault("X-Amz-Credential")
  valid_594499 = validateParameter(valid_594499, JString, required = false,
                                 default = nil)
  if valid_594499 != nil:
    section.add "X-Amz-Credential", valid_594499
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594500: Call_GetCreatePolicy_594484; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594500.validator(path, query, header, formData, body)
  let scheme = call_594500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594500.url(scheme.get, call_594500.host, call_594500.base,
                         call_594500.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594500, url, valid)

proc call*(call_594501: Call_GetCreatePolicy_594484; PolicyDocument: string;
          PolicyName: string; Description: string = "";
          Action: string = "CreatePolicy"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  var query_594502 = newJObject()
  add(query_594502, "Description", newJString(Description))
  add(query_594502, "Action", newJString(Action))
  add(query_594502, "PolicyDocument", newJString(PolicyDocument))
  add(query_594502, "Path", newJString(Path))
  add(query_594502, "Version", newJString(Version))
  add(query_594502, "PolicyName", newJString(PolicyName))
  result = call_594501.call(nil, query_594502, nil, nil, nil)

var getCreatePolicy* = Call_GetCreatePolicy_594484(name: "getCreatePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_GetCreatePolicy_594485,
    base: "/", url: url_GetCreatePolicy_594486, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicyVersion_594541 = ref object of OpenApiRestCall_593437
proc url_PostCreatePolicyVersion_594543(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreatePolicyVersion_594542(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594544 = query.getOrDefault("Action")
  valid_594544 = validateParameter(valid_594544, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_594544 != nil:
    section.add "Action", valid_594544
  var valid_594545 = query.getOrDefault("Version")
  valid_594545 = validateParameter(valid_594545, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594545 != nil:
    section.add "Version", valid_594545
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594546 = header.getOrDefault("X-Amz-Date")
  valid_594546 = validateParameter(valid_594546, JString, required = false,
                                 default = nil)
  if valid_594546 != nil:
    section.add "X-Amz-Date", valid_594546
  var valid_594547 = header.getOrDefault("X-Amz-Security-Token")
  valid_594547 = validateParameter(valid_594547, JString, required = false,
                                 default = nil)
  if valid_594547 != nil:
    section.add "X-Amz-Security-Token", valid_594547
  var valid_594548 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594548 = validateParameter(valid_594548, JString, required = false,
                                 default = nil)
  if valid_594548 != nil:
    section.add "X-Amz-Content-Sha256", valid_594548
  var valid_594549 = header.getOrDefault("X-Amz-Algorithm")
  valid_594549 = validateParameter(valid_594549, JString, required = false,
                                 default = nil)
  if valid_594549 != nil:
    section.add "X-Amz-Algorithm", valid_594549
  var valid_594550 = header.getOrDefault("X-Amz-Signature")
  valid_594550 = validateParameter(valid_594550, JString, required = false,
                                 default = nil)
  if valid_594550 != nil:
    section.add "X-Amz-Signature", valid_594550
  var valid_594551 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594551 = validateParameter(valid_594551, JString, required = false,
                                 default = nil)
  if valid_594551 != nil:
    section.add "X-Amz-SignedHeaders", valid_594551
  var valid_594552 = header.getOrDefault("X-Amz-Credential")
  valid_594552 = validateParameter(valid_594552, JString, required = false,
                                 default = nil)
  if valid_594552 != nil:
    section.add "X-Amz-Credential", valid_594552
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_594553 = formData.getOrDefault("PolicyArn")
  valid_594553 = validateParameter(valid_594553, JString, required = true,
                                 default = nil)
  if valid_594553 != nil:
    section.add "PolicyArn", valid_594553
  var valid_594554 = formData.getOrDefault("PolicyDocument")
  valid_594554 = validateParameter(valid_594554, JString, required = true,
                                 default = nil)
  if valid_594554 != nil:
    section.add "PolicyDocument", valid_594554
  var valid_594555 = formData.getOrDefault("SetAsDefault")
  valid_594555 = validateParameter(valid_594555, JBool, required = false, default = nil)
  if valid_594555 != nil:
    section.add "SetAsDefault", valid_594555
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594556: Call_PostCreatePolicyVersion_594541; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594556.validator(path, query, header, formData, body)
  let scheme = call_594556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594556.url(scheme.get, call_594556.host, call_594556.base,
                         call_594556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594556, url, valid)

proc call*(call_594557: Call_PostCreatePolicyVersion_594541; PolicyArn: string;
          PolicyDocument: string; Action: string = "CreatePolicyVersion";
          SetAsDefault: bool = false; Version: string = "2010-05-08"): Recallable =
  ## postCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_594558 = newJObject()
  var formData_594559 = newJObject()
  add(formData_594559, "PolicyArn", newJString(PolicyArn))
  add(formData_594559, "PolicyDocument", newJString(PolicyDocument))
  add(query_594558, "Action", newJString(Action))
  add(formData_594559, "SetAsDefault", newJBool(SetAsDefault))
  add(query_594558, "Version", newJString(Version))
  result = call_594557.call(nil, query_594558, nil, formData_594559, nil)

var postCreatePolicyVersion* = Call_PostCreatePolicyVersion_594541(
    name: "postCreatePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_PostCreatePolicyVersion_594542, base: "/",
    url: url_PostCreatePolicyVersion_594543, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicyVersion_594523 = ref object of OpenApiRestCall_593437
proc url_GetCreatePolicyVersion_594525(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreatePolicyVersion_594524(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_594526 = query.getOrDefault("PolicyArn")
  valid_594526 = validateParameter(valid_594526, JString, required = true,
                                 default = nil)
  if valid_594526 != nil:
    section.add "PolicyArn", valid_594526
  var valid_594527 = query.getOrDefault("SetAsDefault")
  valid_594527 = validateParameter(valid_594527, JBool, required = false, default = nil)
  if valid_594527 != nil:
    section.add "SetAsDefault", valid_594527
  var valid_594528 = query.getOrDefault("Action")
  valid_594528 = validateParameter(valid_594528, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_594528 != nil:
    section.add "Action", valid_594528
  var valid_594529 = query.getOrDefault("PolicyDocument")
  valid_594529 = validateParameter(valid_594529, JString, required = true,
                                 default = nil)
  if valid_594529 != nil:
    section.add "PolicyDocument", valid_594529
  var valid_594530 = query.getOrDefault("Version")
  valid_594530 = validateParameter(valid_594530, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594530 != nil:
    section.add "Version", valid_594530
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594531 = header.getOrDefault("X-Amz-Date")
  valid_594531 = validateParameter(valid_594531, JString, required = false,
                                 default = nil)
  if valid_594531 != nil:
    section.add "X-Amz-Date", valid_594531
  var valid_594532 = header.getOrDefault("X-Amz-Security-Token")
  valid_594532 = validateParameter(valid_594532, JString, required = false,
                                 default = nil)
  if valid_594532 != nil:
    section.add "X-Amz-Security-Token", valid_594532
  var valid_594533 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594533 = validateParameter(valid_594533, JString, required = false,
                                 default = nil)
  if valid_594533 != nil:
    section.add "X-Amz-Content-Sha256", valid_594533
  var valid_594534 = header.getOrDefault("X-Amz-Algorithm")
  valid_594534 = validateParameter(valid_594534, JString, required = false,
                                 default = nil)
  if valid_594534 != nil:
    section.add "X-Amz-Algorithm", valid_594534
  var valid_594535 = header.getOrDefault("X-Amz-Signature")
  valid_594535 = validateParameter(valid_594535, JString, required = false,
                                 default = nil)
  if valid_594535 != nil:
    section.add "X-Amz-Signature", valid_594535
  var valid_594536 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594536 = validateParameter(valid_594536, JString, required = false,
                                 default = nil)
  if valid_594536 != nil:
    section.add "X-Amz-SignedHeaders", valid_594536
  var valid_594537 = header.getOrDefault("X-Amz-Credential")
  valid_594537 = validateParameter(valid_594537, JString, required = false,
                                 default = nil)
  if valid_594537 != nil:
    section.add "X-Amz-Credential", valid_594537
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594538: Call_GetCreatePolicyVersion_594523; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594538.validator(path, query, header, formData, body)
  let scheme = call_594538.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594538.url(scheme.get, call_594538.host, call_594538.base,
                         call_594538.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594538, url, valid)

proc call*(call_594539: Call_GetCreatePolicyVersion_594523; PolicyArn: string;
          PolicyDocument: string; SetAsDefault: bool = false;
          Action: string = "CreatePolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_594540 = newJObject()
  add(query_594540, "PolicyArn", newJString(PolicyArn))
  add(query_594540, "SetAsDefault", newJBool(SetAsDefault))
  add(query_594540, "Action", newJString(Action))
  add(query_594540, "PolicyDocument", newJString(PolicyDocument))
  add(query_594540, "Version", newJString(Version))
  result = call_594539.call(nil, query_594540, nil, nil, nil)

var getCreatePolicyVersion* = Call_GetCreatePolicyVersion_594523(
    name: "getCreatePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_GetCreatePolicyVersion_594524, base: "/",
    url: url_GetCreatePolicyVersion_594525, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateRole_594582 = ref object of OpenApiRestCall_593437
proc url_PostCreateRole_594584(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateRole_594583(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594585 = query.getOrDefault("Action")
  valid_594585 = validateParameter(valid_594585, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_594585 != nil:
    section.add "Action", valid_594585
  var valid_594586 = query.getOrDefault("Version")
  valid_594586 = validateParameter(valid_594586, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594586 != nil:
    section.add "Version", valid_594586
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594587 = header.getOrDefault("X-Amz-Date")
  valid_594587 = validateParameter(valid_594587, JString, required = false,
                                 default = nil)
  if valid_594587 != nil:
    section.add "X-Amz-Date", valid_594587
  var valid_594588 = header.getOrDefault("X-Amz-Security-Token")
  valid_594588 = validateParameter(valid_594588, JString, required = false,
                                 default = nil)
  if valid_594588 != nil:
    section.add "X-Amz-Security-Token", valid_594588
  var valid_594589 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594589 = validateParameter(valid_594589, JString, required = false,
                                 default = nil)
  if valid_594589 != nil:
    section.add "X-Amz-Content-Sha256", valid_594589
  var valid_594590 = header.getOrDefault("X-Amz-Algorithm")
  valid_594590 = validateParameter(valid_594590, JString, required = false,
                                 default = nil)
  if valid_594590 != nil:
    section.add "X-Amz-Algorithm", valid_594590
  var valid_594591 = header.getOrDefault("X-Amz-Signature")
  valid_594591 = validateParameter(valid_594591, JString, required = false,
                                 default = nil)
  if valid_594591 != nil:
    section.add "X-Amz-Signature", valid_594591
  var valid_594592 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594592 = validateParameter(valid_594592, JString, required = false,
                                 default = nil)
  if valid_594592 != nil:
    section.add "X-Amz-SignedHeaders", valid_594592
  var valid_594593 = header.getOrDefault("X-Amz-Credential")
  valid_594593 = validateParameter(valid_594593, JString, required = false,
                                 default = nil)
  if valid_594593 != nil:
    section.add "X-Amz-Credential", valid_594593
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: JString
  ##              : A description of the role.
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_594594 = formData.getOrDefault("RoleName")
  valid_594594 = validateParameter(valid_594594, JString, required = true,
                                 default = nil)
  if valid_594594 != nil:
    section.add "RoleName", valid_594594
  var valid_594595 = formData.getOrDefault("PermissionsBoundary")
  valid_594595 = validateParameter(valid_594595, JString, required = false,
                                 default = nil)
  if valid_594595 != nil:
    section.add "PermissionsBoundary", valid_594595
  var valid_594596 = formData.getOrDefault("Tags")
  valid_594596 = validateParameter(valid_594596, JArray, required = false,
                                 default = nil)
  if valid_594596 != nil:
    section.add "Tags", valid_594596
  var valid_594597 = formData.getOrDefault("AssumeRolePolicyDocument")
  valid_594597 = validateParameter(valid_594597, JString, required = true,
                                 default = nil)
  if valid_594597 != nil:
    section.add "AssumeRolePolicyDocument", valid_594597
  var valid_594598 = formData.getOrDefault("MaxSessionDuration")
  valid_594598 = validateParameter(valid_594598, JInt, required = false, default = nil)
  if valid_594598 != nil:
    section.add "MaxSessionDuration", valid_594598
  var valid_594599 = formData.getOrDefault("Description")
  valid_594599 = validateParameter(valid_594599, JString, required = false,
                                 default = nil)
  if valid_594599 != nil:
    section.add "Description", valid_594599
  var valid_594600 = formData.getOrDefault("Path")
  valid_594600 = validateParameter(valid_594600, JString, required = false,
                                 default = nil)
  if valid_594600 != nil:
    section.add "Path", valid_594600
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594601: Call_PostCreateRole_594582; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_594601.validator(path, query, header, formData, body)
  let scheme = call_594601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594601.url(scheme.get, call_594601.host, call_594601.base,
                         call_594601.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594601, url, valid)

proc call*(call_594602: Call_PostCreateRole_594582; RoleName: string;
          AssumeRolePolicyDocument: string; PermissionsBoundary: string = "";
          Tags: JsonNode = nil; Action: string = "CreateRole";
          MaxSessionDuration: int = 0; Version: string = "2010-05-08";
          Description: string = ""; Path: string = ""): Recallable =
  ## postCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   Action: string (required)
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  ##   Description: string
  ##              : A description of the role.
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_594603 = newJObject()
  var formData_594604 = newJObject()
  add(formData_594604, "RoleName", newJString(RoleName))
  add(formData_594604, "PermissionsBoundary", newJString(PermissionsBoundary))
  if Tags != nil:
    formData_594604.add "Tags", Tags
  add(query_594603, "Action", newJString(Action))
  add(formData_594604, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  add(formData_594604, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_594603, "Version", newJString(Version))
  add(formData_594604, "Description", newJString(Description))
  add(formData_594604, "Path", newJString(Path))
  result = call_594602.call(nil, query_594603, nil, formData_594604, nil)

var postCreateRole* = Call_PostCreateRole_594582(name: "postCreateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_PostCreateRole_594583,
    base: "/", url: url_PostCreateRole_594584, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateRole_594560 = ref object of OpenApiRestCall_593437
proc url_GetCreateRole_594562(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateRole_594561(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   Description: JString
  ##              : A description of the role.
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AssumeRolePolicyDocument` field"
  var valid_594563 = query.getOrDefault("AssumeRolePolicyDocument")
  valid_594563 = validateParameter(valid_594563, JString, required = true,
                                 default = nil)
  if valid_594563 != nil:
    section.add "AssumeRolePolicyDocument", valid_594563
  var valid_594564 = query.getOrDefault("Description")
  valid_594564 = validateParameter(valid_594564, JString, required = false,
                                 default = nil)
  if valid_594564 != nil:
    section.add "Description", valid_594564
  var valid_594565 = query.getOrDefault("Tags")
  valid_594565 = validateParameter(valid_594565, JArray, required = false,
                                 default = nil)
  if valid_594565 != nil:
    section.add "Tags", valid_594565
  var valid_594566 = query.getOrDefault("MaxSessionDuration")
  valid_594566 = validateParameter(valid_594566, JInt, required = false, default = nil)
  if valid_594566 != nil:
    section.add "MaxSessionDuration", valid_594566
  var valid_594567 = query.getOrDefault("Action")
  valid_594567 = validateParameter(valid_594567, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_594567 != nil:
    section.add "Action", valid_594567
  var valid_594568 = query.getOrDefault("Path")
  valid_594568 = validateParameter(valid_594568, JString, required = false,
                                 default = nil)
  if valid_594568 != nil:
    section.add "Path", valid_594568
  var valid_594569 = query.getOrDefault("PermissionsBoundary")
  valid_594569 = validateParameter(valid_594569, JString, required = false,
                                 default = nil)
  if valid_594569 != nil:
    section.add "PermissionsBoundary", valid_594569
  var valid_594570 = query.getOrDefault("RoleName")
  valid_594570 = validateParameter(valid_594570, JString, required = true,
                                 default = nil)
  if valid_594570 != nil:
    section.add "RoleName", valid_594570
  var valid_594571 = query.getOrDefault("Version")
  valid_594571 = validateParameter(valid_594571, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594571 != nil:
    section.add "Version", valid_594571
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594572 = header.getOrDefault("X-Amz-Date")
  valid_594572 = validateParameter(valid_594572, JString, required = false,
                                 default = nil)
  if valid_594572 != nil:
    section.add "X-Amz-Date", valid_594572
  var valid_594573 = header.getOrDefault("X-Amz-Security-Token")
  valid_594573 = validateParameter(valid_594573, JString, required = false,
                                 default = nil)
  if valid_594573 != nil:
    section.add "X-Amz-Security-Token", valid_594573
  var valid_594574 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594574 = validateParameter(valid_594574, JString, required = false,
                                 default = nil)
  if valid_594574 != nil:
    section.add "X-Amz-Content-Sha256", valid_594574
  var valid_594575 = header.getOrDefault("X-Amz-Algorithm")
  valid_594575 = validateParameter(valid_594575, JString, required = false,
                                 default = nil)
  if valid_594575 != nil:
    section.add "X-Amz-Algorithm", valid_594575
  var valid_594576 = header.getOrDefault("X-Amz-Signature")
  valid_594576 = validateParameter(valid_594576, JString, required = false,
                                 default = nil)
  if valid_594576 != nil:
    section.add "X-Amz-Signature", valid_594576
  var valid_594577 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594577 = validateParameter(valid_594577, JString, required = false,
                                 default = nil)
  if valid_594577 != nil:
    section.add "X-Amz-SignedHeaders", valid_594577
  var valid_594578 = header.getOrDefault("X-Amz-Credential")
  valid_594578 = validateParameter(valid_594578, JString, required = false,
                                 default = nil)
  if valid_594578 != nil:
    section.add "X-Amz-Credential", valid_594578
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594579: Call_GetCreateRole_594560; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_594579.validator(path, query, header, formData, body)
  let scheme = call_594579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594579.url(scheme.get, call_594579.host, call_594579.base,
                         call_594579.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594579, url, valid)

proc call*(call_594580: Call_GetCreateRole_594560;
          AssumeRolePolicyDocument: string; RoleName: string;
          Description: string = ""; Tags: JsonNode = nil; MaxSessionDuration: int = 0;
          Action: string = "CreateRole"; Path: string = "";
          PermissionsBoundary: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   Description: string
  ##              : A description of the role.
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: string (required)
  var query_594581 = newJObject()
  add(query_594581, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  add(query_594581, "Description", newJString(Description))
  if Tags != nil:
    query_594581.add "Tags", Tags
  add(query_594581, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_594581, "Action", newJString(Action))
  add(query_594581, "Path", newJString(Path))
  add(query_594581, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_594581, "RoleName", newJString(RoleName))
  add(query_594581, "Version", newJString(Version))
  result = call_594580.call(nil, query_594581, nil, nil, nil)

var getCreateRole* = Call_GetCreateRole_594560(name: "getCreateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_GetCreateRole_594561,
    base: "/", url: url_GetCreateRole_594562, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSAMLProvider_594622 = ref object of OpenApiRestCall_593437
proc url_PostCreateSAMLProvider_594624(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateSAMLProvider_594623(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594625 = query.getOrDefault("Action")
  valid_594625 = validateParameter(valid_594625, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_594625 != nil:
    section.add "Action", valid_594625
  var valid_594626 = query.getOrDefault("Version")
  valid_594626 = validateParameter(valid_594626, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594626 != nil:
    section.add "Version", valid_594626
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594627 = header.getOrDefault("X-Amz-Date")
  valid_594627 = validateParameter(valid_594627, JString, required = false,
                                 default = nil)
  if valid_594627 != nil:
    section.add "X-Amz-Date", valid_594627
  var valid_594628 = header.getOrDefault("X-Amz-Security-Token")
  valid_594628 = validateParameter(valid_594628, JString, required = false,
                                 default = nil)
  if valid_594628 != nil:
    section.add "X-Amz-Security-Token", valid_594628
  var valid_594629 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594629 = validateParameter(valid_594629, JString, required = false,
                                 default = nil)
  if valid_594629 != nil:
    section.add "X-Amz-Content-Sha256", valid_594629
  var valid_594630 = header.getOrDefault("X-Amz-Algorithm")
  valid_594630 = validateParameter(valid_594630, JString, required = false,
                                 default = nil)
  if valid_594630 != nil:
    section.add "X-Amz-Algorithm", valid_594630
  var valid_594631 = header.getOrDefault("X-Amz-Signature")
  valid_594631 = validateParameter(valid_594631, JString, required = false,
                                 default = nil)
  if valid_594631 != nil:
    section.add "X-Amz-Signature", valid_594631
  var valid_594632 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594632 = validateParameter(valid_594632, JString, required = false,
                                 default = nil)
  if valid_594632 != nil:
    section.add "X-Amz-SignedHeaders", valid_594632
  var valid_594633 = header.getOrDefault("X-Amz-Credential")
  valid_594633 = validateParameter(valid_594633, JString, required = false,
                                 default = nil)
  if valid_594633 != nil:
    section.add "X-Amz-Credential", valid_594633
  result.add "header", section
  ## parameters in `formData` object:
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Name` field"
  var valid_594634 = formData.getOrDefault("Name")
  valid_594634 = validateParameter(valid_594634, JString, required = true,
                                 default = nil)
  if valid_594634 != nil:
    section.add "Name", valid_594634
  var valid_594635 = formData.getOrDefault("SAMLMetadataDocument")
  valid_594635 = validateParameter(valid_594635, JString, required = true,
                                 default = nil)
  if valid_594635 != nil:
    section.add "SAMLMetadataDocument", valid_594635
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594636: Call_PostCreateSAMLProvider_594622; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594636.validator(path, query, header, formData, body)
  let scheme = call_594636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594636.url(scheme.get, call_594636.host, call_594636.base,
                         call_594636.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594636, url, valid)

proc call*(call_594637: Call_PostCreateSAMLProvider_594622; Name: string;
          SAMLMetadataDocument: string; Action: string = "CreateSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Version: string (required)
  var query_594638 = newJObject()
  var formData_594639 = newJObject()
  add(formData_594639, "Name", newJString(Name))
  add(query_594638, "Action", newJString(Action))
  add(formData_594639, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_594638, "Version", newJString(Version))
  result = call_594637.call(nil, query_594638, nil, formData_594639, nil)

var postCreateSAMLProvider* = Call_PostCreateSAMLProvider_594622(
    name: "postCreateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_PostCreateSAMLProvider_594623, base: "/",
    url: url_PostCreateSAMLProvider_594624, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSAMLProvider_594605 = ref object of OpenApiRestCall_593437
proc url_GetCreateSAMLProvider_594607(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateSAMLProvider_594606(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Name` field"
  var valid_594608 = query.getOrDefault("Name")
  valid_594608 = validateParameter(valid_594608, JString, required = true,
                                 default = nil)
  if valid_594608 != nil:
    section.add "Name", valid_594608
  var valid_594609 = query.getOrDefault("SAMLMetadataDocument")
  valid_594609 = validateParameter(valid_594609, JString, required = true,
                                 default = nil)
  if valid_594609 != nil:
    section.add "SAMLMetadataDocument", valid_594609
  var valid_594610 = query.getOrDefault("Action")
  valid_594610 = validateParameter(valid_594610, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_594610 != nil:
    section.add "Action", valid_594610
  var valid_594611 = query.getOrDefault("Version")
  valid_594611 = validateParameter(valid_594611, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594611 != nil:
    section.add "Version", valid_594611
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594612 = header.getOrDefault("X-Amz-Date")
  valid_594612 = validateParameter(valid_594612, JString, required = false,
                                 default = nil)
  if valid_594612 != nil:
    section.add "X-Amz-Date", valid_594612
  var valid_594613 = header.getOrDefault("X-Amz-Security-Token")
  valid_594613 = validateParameter(valid_594613, JString, required = false,
                                 default = nil)
  if valid_594613 != nil:
    section.add "X-Amz-Security-Token", valid_594613
  var valid_594614 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594614 = validateParameter(valid_594614, JString, required = false,
                                 default = nil)
  if valid_594614 != nil:
    section.add "X-Amz-Content-Sha256", valid_594614
  var valid_594615 = header.getOrDefault("X-Amz-Algorithm")
  valid_594615 = validateParameter(valid_594615, JString, required = false,
                                 default = nil)
  if valid_594615 != nil:
    section.add "X-Amz-Algorithm", valid_594615
  var valid_594616 = header.getOrDefault("X-Amz-Signature")
  valid_594616 = validateParameter(valid_594616, JString, required = false,
                                 default = nil)
  if valid_594616 != nil:
    section.add "X-Amz-Signature", valid_594616
  var valid_594617 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594617 = validateParameter(valid_594617, JString, required = false,
                                 default = nil)
  if valid_594617 != nil:
    section.add "X-Amz-SignedHeaders", valid_594617
  var valid_594618 = header.getOrDefault("X-Amz-Credential")
  valid_594618 = validateParameter(valid_594618, JString, required = false,
                                 default = nil)
  if valid_594618 != nil:
    section.add "X-Amz-Credential", valid_594618
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594619: Call_GetCreateSAMLProvider_594605; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594619.validator(path, query, header, formData, body)
  let scheme = call_594619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594619.url(scheme.get, call_594619.host, call_594619.base,
                         call_594619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594619, url, valid)

proc call*(call_594620: Call_GetCreateSAMLProvider_594605; Name: string;
          SAMLMetadataDocument: string; Action: string = "CreateSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594621 = newJObject()
  add(query_594621, "Name", newJString(Name))
  add(query_594621, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_594621, "Action", newJString(Action))
  add(query_594621, "Version", newJString(Version))
  result = call_594620.call(nil, query_594621, nil, nil, nil)

var getCreateSAMLProvider* = Call_GetCreateSAMLProvider_594605(
    name: "getCreateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_GetCreateSAMLProvider_594606, base: "/",
    url: url_GetCreateSAMLProvider_594607, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceLinkedRole_594658 = ref object of OpenApiRestCall_593437
proc url_PostCreateServiceLinkedRole_594660(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateServiceLinkedRole_594659(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594661 = query.getOrDefault("Action")
  valid_594661 = validateParameter(valid_594661, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_594661 != nil:
    section.add "Action", valid_594661
  var valid_594662 = query.getOrDefault("Version")
  valid_594662 = validateParameter(valid_594662, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594662 != nil:
    section.add "Version", valid_594662
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594663 = header.getOrDefault("X-Amz-Date")
  valid_594663 = validateParameter(valid_594663, JString, required = false,
                                 default = nil)
  if valid_594663 != nil:
    section.add "X-Amz-Date", valid_594663
  var valid_594664 = header.getOrDefault("X-Amz-Security-Token")
  valid_594664 = validateParameter(valid_594664, JString, required = false,
                                 default = nil)
  if valid_594664 != nil:
    section.add "X-Amz-Security-Token", valid_594664
  var valid_594665 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594665 = validateParameter(valid_594665, JString, required = false,
                                 default = nil)
  if valid_594665 != nil:
    section.add "X-Amz-Content-Sha256", valid_594665
  var valid_594666 = header.getOrDefault("X-Amz-Algorithm")
  valid_594666 = validateParameter(valid_594666, JString, required = false,
                                 default = nil)
  if valid_594666 != nil:
    section.add "X-Amz-Algorithm", valid_594666
  var valid_594667 = header.getOrDefault("X-Amz-Signature")
  valid_594667 = validateParameter(valid_594667, JString, required = false,
                                 default = nil)
  if valid_594667 != nil:
    section.add "X-Amz-Signature", valid_594667
  var valid_594668 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594668 = validateParameter(valid_594668, JString, required = false,
                                 default = nil)
  if valid_594668 != nil:
    section.add "X-Amz-SignedHeaders", valid_594668
  var valid_594669 = header.getOrDefault("X-Amz-Credential")
  valid_594669 = validateParameter(valid_594669, JString, required = false,
                                 default = nil)
  if valid_594669 != nil:
    section.add "X-Amz-Credential", valid_594669
  result.add "header", section
  ## parameters in `formData` object:
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Description: JString
  ##              : The description of the role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AWSServiceName` field"
  var valid_594670 = formData.getOrDefault("AWSServiceName")
  valid_594670 = validateParameter(valid_594670, JString, required = true,
                                 default = nil)
  if valid_594670 != nil:
    section.add "AWSServiceName", valid_594670
  var valid_594671 = formData.getOrDefault("CustomSuffix")
  valid_594671 = validateParameter(valid_594671, JString, required = false,
                                 default = nil)
  if valid_594671 != nil:
    section.add "CustomSuffix", valid_594671
  var valid_594672 = formData.getOrDefault("Description")
  valid_594672 = validateParameter(valid_594672, JString, required = false,
                                 default = nil)
  if valid_594672 != nil:
    section.add "Description", valid_594672
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594673: Call_PostCreateServiceLinkedRole_594658; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_594673.validator(path, query, header, formData, body)
  let scheme = call_594673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594673.url(scheme.get, call_594673.host, call_594673.base,
                         call_594673.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594673, url, valid)

proc call*(call_594674: Call_PostCreateServiceLinkedRole_594658;
          AWSServiceName: string; CustomSuffix: string = "";
          Action: string = "CreateServiceLinkedRole";
          Version: string = "2010-05-08"; Description: string = ""): Recallable =
  ## postCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string
  ##              : The description of the role.
  var query_594675 = newJObject()
  var formData_594676 = newJObject()
  add(formData_594676, "AWSServiceName", newJString(AWSServiceName))
  add(formData_594676, "CustomSuffix", newJString(CustomSuffix))
  add(query_594675, "Action", newJString(Action))
  add(query_594675, "Version", newJString(Version))
  add(formData_594676, "Description", newJString(Description))
  result = call_594674.call(nil, query_594675, nil, formData_594676, nil)

var postCreateServiceLinkedRole* = Call_PostCreateServiceLinkedRole_594658(
    name: "postCreateServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_PostCreateServiceLinkedRole_594659, base: "/",
    url: url_PostCreateServiceLinkedRole_594660,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceLinkedRole_594640 = ref object of OpenApiRestCall_593437
proc url_GetCreateServiceLinkedRole_594642(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateServiceLinkedRole_594641(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : The description of the role.
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  section = newJObject()
  var valid_594643 = query.getOrDefault("Description")
  valid_594643 = validateParameter(valid_594643, JString, required = false,
                                 default = nil)
  if valid_594643 != nil:
    section.add "Description", valid_594643
  assert query != nil,
        "query argument is necessary due to required `AWSServiceName` field"
  var valid_594644 = query.getOrDefault("AWSServiceName")
  valid_594644 = validateParameter(valid_594644, JString, required = true,
                                 default = nil)
  if valid_594644 != nil:
    section.add "AWSServiceName", valid_594644
  var valid_594645 = query.getOrDefault("Action")
  valid_594645 = validateParameter(valid_594645, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_594645 != nil:
    section.add "Action", valid_594645
  var valid_594646 = query.getOrDefault("Version")
  valid_594646 = validateParameter(valid_594646, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594646 != nil:
    section.add "Version", valid_594646
  var valid_594647 = query.getOrDefault("CustomSuffix")
  valid_594647 = validateParameter(valid_594647, JString, required = false,
                                 default = nil)
  if valid_594647 != nil:
    section.add "CustomSuffix", valid_594647
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594648 = header.getOrDefault("X-Amz-Date")
  valid_594648 = validateParameter(valid_594648, JString, required = false,
                                 default = nil)
  if valid_594648 != nil:
    section.add "X-Amz-Date", valid_594648
  var valid_594649 = header.getOrDefault("X-Amz-Security-Token")
  valid_594649 = validateParameter(valid_594649, JString, required = false,
                                 default = nil)
  if valid_594649 != nil:
    section.add "X-Amz-Security-Token", valid_594649
  var valid_594650 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594650 = validateParameter(valid_594650, JString, required = false,
                                 default = nil)
  if valid_594650 != nil:
    section.add "X-Amz-Content-Sha256", valid_594650
  var valid_594651 = header.getOrDefault("X-Amz-Algorithm")
  valid_594651 = validateParameter(valid_594651, JString, required = false,
                                 default = nil)
  if valid_594651 != nil:
    section.add "X-Amz-Algorithm", valid_594651
  var valid_594652 = header.getOrDefault("X-Amz-Signature")
  valid_594652 = validateParameter(valid_594652, JString, required = false,
                                 default = nil)
  if valid_594652 != nil:
    section.add "X-Amz-Signature", valid_594652
  var valid_594653 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594653 = validateParameter(valid_594653, JString, required = false,
                                 default = nil)
  if valid_594653 != nil:
    section.add "X-Amz-SignedHeaders", valid_594653
  var valid_594654 = header.getOrDefault("X-Amz-Credential")
  valid_594654 = validateParameter(valid_594654, JString, required = false,
                                 default = nil)
  if valid_594654 != nil:
    section.add "X-Amz-Credential", valid_594654
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594655: Call_GetCreateServiceLinkedRole_594640; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_594655.validator(path, query, header, formData, body)
  let scheme = call_594655.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594655.url(scheme.get, call_594655.host, call_594655.base,
                         call_594655.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594655, url, valid)

proc call*(call_594656: Call_GetCreateServiceLinkedRole_594640;
          AWSServiceName: string; Description: string = "";
          Action: string = "CreateServiceLinkedRole";
          Version: string = "2010-05-08"; CustomSuffix: string = ""): Recallable =
  ## getCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   Description: string
  ##              : The description of the role.
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  var query_594657 = newJObject()
  add(query_594657, "Description", newJString(Description))
  add(query_594657, "AWSServiceName", newJString(AWSServiceName))
  add(query_594657, "Action", newJString(Action))
  add(query_594657, "Version", newJString(Version))
  add(query_594657, "CustomSuffix", newJString(CustomSuffix))
  result = call_594656.call(nil, query_594657, nil, nil, nil)

var getCreateServiceLinkedRole* = Call_GetCreateServiceLinkedRole_594640(
    name: "getCreateServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_GetCreateServiceLinkedRole_594641, base: "/",
    url: url_GetCreateServiceLinkedRole_594642,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceSpecificCredential_594694 = ref object of OpenApiRestCall_593437
proc url_PostCreateServiceSpecificCredential_594696(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateServiceSpecificCredential_594695(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594697 = query.getOrDefault("Action")
  valid_594697 = validateParameter(valid_594697, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_594697 != nil:
    section.add "Action", valid_594697
  var valid_594698 = query.getOrDefault("Version")
  valid_594698 = validateParameter(valid_594698, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594698 != nil:
    section.add "Version", valid_594698
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594699 = header.getOrDefault("X-Amz-Date")
  valid_594699 = validateParameter(valid_594699, JString, required = false,
                                 default = nil)
  if valid_594699 != nil:
    section.add "X-Amz-Date", valid_594699
  var valid_594700 = header.getOrDefault("X-Amz-Security-Token")
  valid_594700 = validateParameter(valid_594700, JString, required = false,
                                 default = nil)
  if valid_594700 != nil:
    section.add "X-Amz-Security-Token", valid_594700
  var valid_594701 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594701 = validateParameter(valid_594701, JString, required = false,
                                 default = nil)
  if valid_594701 != nil:
    section.add "X-Amz-Content-Sha256", valid_594701
  var valid_594702 = header.getOrDefault("X-Amz-Algorithm")
  valid_594702 = validateParameter(valid_594702, JString, required = false,
                                 default = nil)
  if valid_594702 != nil:
    section.add "X-Amz-Algorithm", valid_594702
  var valid_594703 = header.getOrDefault("X-Amz-Signature")
  valid_594703 = validateParameter(valid_594703, JString, required = false,
                                 default = nil)
  if valid_594703 != nil:
    section.add "X-Amz-Signature", valid_594703
  var valid_594704 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594704 = validateParameter(valid_594704, JString, required = false,
                                 default = nil)
  if valid_594704 != nil:
    section.add "X-Amz-SignedHeaders", valid_594704
  var valid_594705 = header.getOrDefault("X-Amz-Credential")
  valid_594705 = validateParameter(valid_594705, JString, required = false,
                                 default = nil)
  if valid_594705 != nil:
    section.add "X-Amz-Credential", valid_594705
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_594706 = formData.getOrDefault("UserName")
  valid_594706 = validateParameter(valid_594706, JString, required = true,
                                 default = nil)
  if valid_594706 != nil:
    section.add "UserName", valid_594706
  var valid_594707 = formData.getOrDefault("ServiceName")
  valid_594707 = validateParameter(valid_594707, JString, required = true,
                                 default = nil)
  if valid_594707 != nil:
    section.add "ServiceName", valid_594707
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594708: Call_PostCreateServiceSpecificCredential_594694;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594708.validator(path, query, header, formData, body)
  let scheme = call_594708.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594708.url(scheme.get, call_594708.host, call_594708.base,
                         call_594708.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594708, url, valid)

proc call*(call_594709: Call_PostCreateServiceSpecificCredential_594694;
          UserName: string; ServiceName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  var query_594710 = newJObject()
  var formData_594711 = newJObject()
  add(formData_594711, "UserName", newJString(UserName))
  add(query_594710, "Action", newJString(Action))
  add(query_594710, "Version", newJString(Version))
  add(formData_594711, "ServiceName", newJString(ServiceName))
  result = call_594709.call(nil, query_594710, nil, formData_594711, nil)

var postCreateServiceSpecificCredential* = Call_PostCreateServiceSpecificCredential_594694(
    name: "postCreateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_PostCreateServiceSpecificCredential_594695, base: "/",
    url: url_PostCreateServiceSpecificCredential_594696,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceSpecificCredential_594677 = ref object of OpenApiRestCall_593437
proc url_GetCreateServiceSpecificCredential_594679(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateServiceSpecificCredential_594678(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceName` field"
  var valid_594680 = query.getOrDefault("ServiceName")
  valid_594680 = validateParameter(valid_594680, JString, required = true,
                                 default = nil)
  if valid_594680 != nil:
    section.add "ServiceName", valid_594680
  var valid_594681 = query.getOrDefault("UserName")
  valid_594681 = validateParameter(valid_594681, JString, required = true,
                                 default = nil)
  if valid_594681 != nil:
    section.add "UserName", valid_594681
  var valid_594682 = query.getOrDefault("Action")
  valid_594682 = validateParameter(valid_594682, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_594682 != nil:
    section.add "Action", valid_594682
  var valid_594683 = query.getOrDefault("Version")
  valid_594683 = validateParameter(valid_594683, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594683 != nil:
    section.add "Version", valid_594683
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594684 = header.getOrDefault("X-Amz-Date")
  valid_594684 = validateParameter(valid_594684, JString, required = false,
                                 default = nil)
  if valid_594684 != nil:
    section.add "X-Amz-Date", valid_594684
  var valid_594685 = header.getOrDefault("X-Amz-Security-Token")
  valid_594685 = validateParameter(valid_594685, JString, required = false,
                                 default = nil)
  if valid_594685 != nil:
    section.add "X-Amz-Security-Token", valid_594685
  var valid_594686 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594686 = validateParameter(valid_594686, JString, required = false,
                                 default = nil)
  if valid_594686 != nil:
    section.add "X-Amz-Content-Sha256", valid_594686
  var valid_594687 = header.getOrDefault("X-Amz-Algorithm")
  valid_594687 = validateParameter(valid_594687, JString, required = false,
                                 default = nil)
  if valid_594687 != nil:
    section.add "X-Amz-Algorithm", valid_594687
  var valid_594688 = header.getOrDefault("X-Amz-Signature")
  valid_594688 = validateParameter(valid_594688, JString, required = false,
                                 default = nil)
  if valid_594688 != nil:
    section.add "X-Amz-Signature", valid_594688
  var valid_594689 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594689 = validateParameter(valid_594689, JString, required = false,
                                 default = nil)
  if valid_594689 != nil:
    section.add "X-Amz-SignedHeaders", valid_594689
  var valid_594690 = header.getOrDefault("X-Amz-Credential")
  valid_594690 = validateParameter(valid_594690, JString, required = false,
                                 default = nil)
  if valid_594690 != nil:
    section.add "X-Amz-Credential", valid_594690
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594691: Call_GetCreateServiceSpecificCredential_594677;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594691.validator(path, query, header, formData, body)
  let scheme = call_594691.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594691.url(scheme.get, call_594691.host, call_594691.base,
                         call_594691.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594691, url, valid)

proc call*(call_594692: Call_GetCreateServiceSpecificCredential_594677;
          ServiceName: string; UserName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594693 = newJObject()
  add(query_594693, "ServiceName", newJString(ServiceName))
  add(query_594693, "UserName", newJString(UserName))
  add(query_594693, "Action", newJString(Action))
  add(query_594693, "Version", newJString(Version))
  result = call_594692.call(nil, query_594693, nil, nil, nil)

var getCreateServiceSpecificCredential* = Call_GetCreateServiceSpecificCredential_594677(
    name: "getCreateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_GetCreateServiceSpecificCredential_594678, base: "/",
    url: url_GetCreateServiceSpecificCredential_594679,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateUser_594731 = ref object of OpenApiRestCall_593437
proc url_PostCreateUser_594733(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateUser_594732(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594734 = query.getOrDefault("Action")
  valid_594734 = validateParameter(valid_594734, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_594734 != nil:
    section.add "Action", valid_594734
  var valid_594735 = query.getOrDefault("Version")
  valid_594735 = validateParameter(valid_594735, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594735 != nil:
    section.add "Version", valid_594735
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594736 = header.getOrDefault("X-Amz-Date")
  valid_594736 = validateParameter(valid_594736, JString, required = false,
                                 default = nil)
  if valid_594736 != nil:
    section.add "X-Amz-Date", valid_594736
  var valid_594737 = header.getOrDefault("X-Amz-Security-Token")
  valid_594737 = validateParameter(valid_594737, JString, required = false,
                                 default = nil)
  if valid_594737 != nil:
    section.add "X-Amz-Security-Token", valid_594737
  var valid_594738 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594738 = validateParameter(valid_594738, JString, required = false,
                                 default = nil)
  if valid_594738 != nil:
    section.add "X-Amz-Content-Sha256", valid_594738
  var valid_594739 = header.getOrDefault("X-Amz-Algorithm")
  valid_594739 = validateParameter(valid_594739, JString, required = false,
                                 default = nil)
  if valid_594739 != nil:
    section.add "X-Amz-Algorithm", valid_594739
  var valid_594740 = header.getOrDefault("X-Amz-Signature")
  valid_594740 = validateParameter(valid_594740, JString, required = false,
                                 default = nil)
  if valid_594740 != nil:
    section.add "X-Amz-Signature", valid_594740
  var valid_594741 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594741 = validateParameter(valid_594741, JString, required = false,
                                 default = nil)
  if valid_594741 != nil:
    section.add "X-Amz-SignedHeaders", valid_594741
  var valid_594742 = header.getOrDefault("X-Amz-Credential")
  valid_594742 = validateParameter(valid_594742, JString, required = false,
                                 default = nil)
  if valid_594742 != nil:
    section.add "X-Amz-Credential", valid_594742
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_594743 = formData.getOrDefault("UserName")
  valid_594743 = validateParameter(valid_594743, JString, required = true,
                                 default = nil)
  if valid_594743 != nil:
    section.add "UserName", valid_594743
  var valid_594744 = formData.getOrDefault("PermissionsBoundary")
  valid_594744 = validateParameter(valid_594744, JString, required = false,
                                 default = nil)
  if valid_594744 != nil:
    section.add "PermissionsBoundary", valid_594744
  var valid_594745 = formData.getOrDefault("Tags")
  valid_594745 = validateParameter(valid_594745, JArray, required = false,
                                 default = nil)
  if valid_594745 != nil:
    section.add "Tags", valid_594745
  var valid_594746 = formData.getOrDefault("Path")
  valid_594746 = validateParameter(valid_594746, JString, required = false,
                                 default = nil)
  if valid_594746 != nil:
    section.add "Path", valid_594746
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594747: Call_PostCreateUser_594731; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594747.validator(path, query, header, formData, body)
  let scheme = call_594747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594747.url(scheme.get, call_594747.host, call_594747.base,
                         call_594747.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594747, url, valid)

proc call*(call_594748: Call_PostCreateUser_594731; UserName: string;
          PermissionsBoundary: string = ""; Tags: JsonNode = nil;
          Action: string = "CreateUser"; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_594749 = newJObject()
  var formData_594750 = newJObject()
  add(formData_594750, "UserName", newJString(UserName))
  add(formData_594750, "PermissionsBoundary", newJString(PermissionsBoundary))
  if Tags != nil:
    formData_594750.add "Tags", Tags
  add(query_594749, "Action", newJString(Action))
  add(query_594749, "Version", newJString(Version))
  add(formData_594750, "Path", newJString(Path))
  result = call_594748.call(nil, query_594749, nil, formData_594750, nil)

var postCreateUser* = Call_PostCreateUser_594731(name: "postCreateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_PostCreateUser_594732,
    base: "/", url: url_PostCreateUser_594733, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateUser_594712 = ref object of OpenApiRestCall_593437
proc url_GetCreateUser_594714(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateUser_594713(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_594715 = query.getOrDefault("Tags")
  valid_594715 = validateParameter(valid_594715, JArray, required = false,
                                 default = nil)
  if valid_594715 != nil:
    section.add "Tags", valid_594715
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_594716 = query.getOrDefault("UserName")
  valid_594716 = validateParameter(valid_594716, JString, required = true,
                                 default = nil)
  if valid_594716 != nil:
    section.add "UserName", valid_594716
  var valid_594717 = query.getOrDefault("Action")
  valid_594717 = validateParameter(valid_594717, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_594717 != nil:
    section.add "Action", valid_594717
  var valid_594718 = query.getOrDefault("Path")
  valid_594718 = validateParameter(valid_594718, JString, required = false,
                                 default = nil)
  if valid_594718 != nil:
    section.add "Path", valid_594718
  var valid_594719 = query.getOrDefault("PermissionsBoundary")
  valid_594719 = validateParameter(valid_594719, JString, required = false,
                                 default = nil)
  if valid_594719 != nil:
    section.add "PermissionsBoundary", valid_594719
  var valid_594720 = query.getOrDefault("Version")
  valid_594720 = validateParameter(valid_594720, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594720 != nil:
    section.add "Version", valid_594720
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594721 = header.getOrDefault("X-Amz-Date")
  valid_594721 = validateParameter(valid_594721, JString, required = false,
                                 default = nil)
  if valid_594721 != nil:
    section.add "X-Amz-Date", valid_594721
  var valid_594722 = header.getOrDefault("X-Amz-Security-Token")
  valid_594722 = validateParameter(valid_594722, JString, required = false,
                                 default = nil)
  if valid_594722 != nil:
    section.add "X-Amz-Security-Token", valid_594722
  var valid_594723 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594723 = validateParameter(valid_594723, JString, required = false,
                                 default = nil)
  if valid_594723 != nil:
    section.add "X-Amz-Content-Sha256", valid_594723
  var valid_594724 = header.getOrDefault("X-Amz-Algorithm")
  valid_594724 = validateParameter(valid_594724, JString, required = false,
                                 default = nil)
  if valid_594724 != nil:
    section.add "X-Amz-Algorithm", valid_594724
  var valid_594725 = header.getOrDefault("X-Amz-Signature")
  valid_594725 = validateParameter(valid_594725, JString, required = false,
                                 default = nil)
  if valid_594725 != nil:
    section.add "X-Amz-Signature", valid_594725
  var valid_594726 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594726 = validateParameter(valid_594726, JString, required = false,
                                 default = nil)
  if valid_594726 != nil:
    section.add "X-Amz-SignedHeaders", valid_594726
  var valid_594727 = header.getOrDefault("X-Amz-Credential")
  valid_594727 = validateParameter(valid_594727, JString, required = false,
                                 default = nil)
  if valid_594727 != nil:
    section.add "X-Amz-Credential", valid_594727
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594728: Call_GetCreateUser_594712; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594728.validator(path, query, header, formData, body)
  let scheme = call_594728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594728.url(scheme.get, call_594728.host, call_594728.base,
                         call_594728.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594728, url, valid)

proc call*(call_594729: Call_GetCreateUser_594712; UserName: string;
          Tags: JsonNode = nil; Action: string = "CreateUser"; Path: string = "";
          PermissionsBoundary: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_594730 = newJObject()
  if Tags != nil:
    query_594730.add "Tags", Tags
  add(query_594730, "UserName", newJString(UserName))
  add(query_594730, "Action", newJString(Action))
  add(query_594730, "Path", newJString(Path))
  add(query_594730, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_594730, "Version", newJString(Version))
  result = call_594729.call(nil, query_594730, nil, nil, nil)

var getCreateUser* = Call_GetCreateUser_594712(name: "getCreateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_GetCreateUser_594713,
    base: "/", url: url_GetCreateUser_594714, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateVirtualMFADevice_594768 = ref object of OpenApiRestCall_593437
proc url_PostCreateVirtualMFADevice_594770(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateVirtualMFADevice_594769(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594771 = query.getOrDefault("Action")
  valid_594771 = validateParameter(valid_594771, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_594771 != nil:
    section.add "Action", valid_594771
  var valid_594772 = query.getOrDefault("Version")
  valid_594772 = validateParameter(valid_594772, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594772 != nil:
    section.add "Version", valid_594772
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594773 = header.getOrDefault("X-Amz-Date")
  valid_594773 = validateParameter(valid_594773, JString, required = false,
                                 default = nil)
  if valid_594773 != nil:
    section.add "X-Amz-Date", valid_594773
  var valid_594774 = header.getOrDefault("X-Amz-Security-Token")
  valid_594774 = validateParameter(valid_594774, JString, required = false,
                                 default = nil)
  if valid_594774 != nil:
    section.add "X-Amz-Security-Token", valid_594774
  var valid_594775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594775 = validateParameter(valid_594775, JString, required = false,
                                 default = nil)
  if valid_594775 != nil:
    section.add "X-Amz-Content-Sha256", valid_594775
  var valid_594776 = header.getOrDefault("X-Amz-Algorithm")
  valid_594776 = validateParameter(valid_594776, JString, required = false,
                                 default = nil)
  if valid_594776 != nil:
    section.add "X-Amz-Algorithm", valid_594776
  var valid_594777 = header.getOrDefault("X-Amz-Signature")
  valid_594777 = validateParameter(valid_594777, JString, required = false,
                                 default = nil)
  if valid_594777 != nil:
    section.add "X-Amz-Signature", valid_594777
  var valid_594778 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594778 = validateParameter(valid_594778, JString, required = false,
                                 default = nil)
  if valid_594778 != nil:
    section.add "X-Amz-SignedHeaders", valid_594778
  var valid_594779 = header.getOrDefault("X-Amz-Credential")
  valid_594779 = validateParameter(valid_594779, JString, required = false,
                                 default = nil)
  if valid_594779 != nil:
    section.add "X-Amz-Credential", valid_594779
  result.add "header", section
  ## parameters in `formData` object:
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `VirtualMFADeviceName` field"
  var valid_594780 = formData.getOrDefault("VirtualMFADeviceName")
  valid_594780 = validateParameter(valid_594780, JString, required = true,
                                 default = nil)
  if valid_594780 != nil:
    section.add "VirtualMFADeviceName", valid_594780
  var valid_594781 = formData.getOrDefault("Path")
  valid_594781 = validateParameter(valid_594781, JString, required = false,
                                 default = nil)
  if valid_594781 != nil:
    section.add "Path", valid_594781
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594782: Call_PostCreateVirtualMFADevice_594768; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_594782.validator(path, query, header, formData, body)
  let scheme = call_594782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594782.url(scheme.get, call_594782.host, call_594782.base,
                         call_594782.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594782, url, valid)

proc call*(call_594783: Call_PostCreateVirtualMFADevice_594768;
          VirtualMFADeviceName: string; Action: string = "CreateVirtualMFADevice";
          Version: string = "2010-05-08"; Path: string = ""): Recallable =
  ## postCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_594784 = newJObject()
  var formData_594785 = newJObject()
  add(formData_594785, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  add(query_594784, "Action", newJString(Action))
  add(query_594784, "Version", newJString(Version))
  add(formData_594785, "Path", newJString(Path))
  result = call_594783.call(nil, query_594784, nil, formData_594785, nil)

var postCreateVirtualMFADevice* = Call_PostCreateVirtualMFADevice_594768(
    name: "postCreateVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_PostCreateVirtualMFADevice_594769, base: "/",
    url: url_PostCreateVirtualMFADevice_594770,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateVirtualMFADevice_594751 = ref object of OpenApiRestCall_593437
proc url_GetCreateVirtualMFADevice_594753(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateVirtualMFADevice_594752(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `VirtualMFADeviceName` field"
  var valid_594754 = query.getOrDefault("VirtualMFADeviceName")
  valid_594754 = validateParameter(valid_594754, JString, required = true,
                                 default = nil)
  if valid_594754 != nil:
    section.add "VirtualMFADeviceName", valid_594754
  var valid_594755 = query.getOrDefault("Action")
  valid_594755 = validateParameter(valid_594755, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_594755 != nil:
    section.add "Action", valid_594755
  var valid_594756 = query.getOrDefault("Path")
  valid_594756 = validateParameter(valid_594756, JString, required = false,
                                 default = nil)
  if valid_594756 != nil:
    section.add "Path", valid_594756
  var valid_594757 = query.getOrDefault("Version")
  valid_594757 = validateParameter(valid_594757, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594757 != nil:
    section.add "Version", valid_594757
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594758 = header.getOrDefault("X-Amz-Date")
  valid_594758 = validateParameter(valid_594758, JString, required = false,
                                 default = nil)
  if valid_594758 != nil:
    section.add "X-Amz-Date", valid_594758
  var valid_594759 = header.getOrDefault("X-Amz-Security-Token")
  valid_594759 = validateParameter(valid_594759, JString, required = false,
                                 default = nil)
  if valid_594759 != nil:
    section.add "X-Amz-Security-Token", valid_594759
  var valid_594760 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594760 = validateParameter(valid_594760, JString, required = false,
                                 default = nil)
  if valid_594760 != nil:
    section.add "X-Amz-Content-Sha256", valid_594760
  var valid_594761 = header.getOrDefault("X-Amz-Algorithm")
  valid_594761 = validateParameter(valid_594761, JString, required = false,
                                 default = nil)
  if valid_594761 != nil:
    section.add "X-Amz-Algorithm", valid_594761
  var valid_594762 = header.getOrDefault("X-Amz-Signature")
  valid_594762 = validateParameter(valid_594762, JString, required = false,
                                 default = nil)
  if valid_594762 != nil:
    section.add "X-Amz-Signature", valid_594762
  var valid_594763 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594763 = validateParameter(valid_594763, JString, required = false,
                                 default = nil)
  if valid_594763 != nil:
    section.add "X-Amz-SignedHeaders", valid_594763
  var valid_594764 = header.getOrDefault("X-Amz-Credential")
  valid_594764 = validateParameter(valid_594764, JString, required = false,
                                 default = nil)
  if valid_594764 != nil:
    section.add "X-Amz-Credential", valid_594764
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594765: Call_GetCreateVirtualMFADevice_594751; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_594765.validator(path, query, header, formData, body)
  let scheme = call_594765.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594765.url(scheme.get, call_594765.host, call_594765.base,
                         call_594765.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594765, url, valid)

proc call*(call_594766: Call_GetCreateVirtualMFADevice_594751;
          VirtualMFADeviceName: string; Action: string = "CreateVirtualMFADevice";
          Path: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_594767 = newJObject()
  add(query_594767, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  add(query_594767, "Action", newJString(Action))
  add(query_594767, "Path", newJString(Path))
  add(query_594767, "Version", newJString(Version))
  result = call_594766.call(nil, query_594767, nil, nil, nil)

var getCreateVirtualMFADevice* = Call_GetCreateVirtualMFADevice_594751(
    name: "getCreateVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_GetCreateVirtualMFADevice_594752, base: "/",
    url: url_GetCreateVirtualMFADevice_594753,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeactivateMFADevice_594803 = ref object of OpenApiRestCall_593437
proc url_PostDeactivateMFADevice_594805(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeactivateMFADevice_594804(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594806 = query.getOrDefault("Action")
  valid_594806 = validateParameter(valid_594806, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_594806 != nil:
    section.add "Action", valid_594806
  var valid_594807 = query.getOrDefault("Version")
  valid_594807 = validateParameter(valid_594807, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594807 != nil:
    section.add "Version", valid_594807
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594808 = header.getOrDefault("X-Amz-Date")
  valid_594808 = validateParameter(valid_594808, JString, required = false,
                                 default = nil)
  if valid_594808 != nil:
    section.add "X-Amz-Date", valid_594808
  var valid_594809 = header.getOrDefault("X-Amz-Security-Token")
  valid_594809 = validateParameter(valid_594809, JString, required = false,
                                 default = nil)
  if valid_594809 != nil:
    section.add "X-Amz-Security-Token", valid_594809
  var valid_594810 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594810 = validateParameter(valid_594810, JString, required = false,
                                 default = nil)
  if valid_594810 != nil:
    section.add "X-Amz-Content-Sha256", valid_594810
  var valid_594811 = header.getOrDefault("X-Amz-Algorithm")
  valid_594811 = validateParameter(valid_594811, JString, required = false,
                                 default = nil)
  if valid_594811 != nil:
    section.add "X-Amz-Algorithm", valid_594811
  var valid_594812 = header.getOrDefault("X-Amz-Signature")
  valid_594812 = validateParameter(valid_594812, JString, required = false,
                                 default = nil)
  if valid_594812 != nil:
    section.add "X-Amz-Signature", valid_594812
  var valid_594813 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594813 = validateParameter(valid_594813, JString, required = false,
                                 default = nil)
  if valid_594813 != nil:
    section.add "X-Amz-SignedHeaders", valid_594813
  var valid_594814 = header.getOrDefault("X-Amz-Credential")
  valid_594814 = validateParameter(valid_594814, JString, required = false,
                                 default = nil)
  if valid_594814 != nil:
    section.add "X-Amz-Credential", valid_594814
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_594815 = formData.getOrDefault("SerialNumber")
  valid_594815 = validateParameter(valid_594815, JString, required = true,
                                 default = nil)
  if valid_594815 != nil:
    section.add "SerialNumber", valid_594815
  var valid_594816 = formData.getOrDefault("UserName")
  valid_594816 = validateParameter(valid_594816, JString, required = true,
                                 default = nil)
  if valid_594816 != nil:
    section.add "UserName", valid_594816
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594817: Call_PostDeactivateMFADevice_594803; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594817.validator(path, query, header, formData, body)
  let scheme = call_594817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594817.url(scheme.get, call_594817.host, call_594817.base,
                         call_594817.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594817, url, valid)

proc call*(call_594818: Call_PostDeactivateMFADevice_594803; SerialNumber: string;
          UserName: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594819 = newJObject()
  var formData_594820 = newJObject()
  add(formData_594820, "SerialNumber", newJString(SerialNumber))
  add(formData_594820, "UserName", newJString(UserName))
  add(query_594819, "Action", newJString(Action))
  add(query_594819, "Version", newJString(Version))
  result = call_594818.call(nil, query_594819, nil, formData_594820, nil)

var postDeactivateMFADevice* = Call_PostDeactivateMFADevice_594803(
    name: "postDeactivateMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_PostDeactivateMFADevice_594804, base: "/",
    url: url_PostDeactivateMFADevice_594805, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeactivateMFADevice_594786 = ref object of OpenApiRestCall_593437
proc url_GetDeactivateMFADevice_594788(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeactivateMFADevice_594787(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_594789 = query.getOrDefault("SerialNumber")
  valid_594789 = validateParameter(valid_594789, JString, required = true,
                                 default = nil)
  if valid_594789 != nil:
    section.add "SerialNumber", valid_594789
  var valid_594790 = query.getOrDefault("UserName")
  valid_594790 = validateParameter(valid_594790, JString, required = true,
                                 default = nil)
  if valid_594790 != nil:
    section.add "UserName", valid_594790
  var valid_594791 = query.getOrDefault("Action")
  valid_594791 = validateParameter(valid_594791, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_594791 != nil:
    section.add "Action", valid_594791
  var valid_594792 = query.getOrDefault("Version")
  valid_594792 = validateParameter(valid_594792, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594792 != nil:
    section.add "Version", valid_594792
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594793 = header.getOrDefault("X-Amz-Date")
  valid_594793 = validateParameter(valid_594793, JString, required = false,
                                 default = nil)
  if valid_594793 != nil:
    section.add "X-Amz-Date", valid_594793
  var valid_594794 = header.getOrDefault("X-Amz-Security-Token")
  valid_594794 = validateParameter(valid_594794, JString, required = false,
                                 default = nil)
  if valid_594794 != nil:
    section.add "X-Amz-Security-Token", valid_594794
  var valid_594795 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594795 = validateParameter(valid_594795, JString, required = false,
                                 default = nil)
  if valid_594795 != nil:
    section.add "X-Amz-Content-Sha256", valid_594795
  var valid_594796 = header.getOrDefault("X-Amz-Algorithm")
  valid_594796 = validateParameter(valid_594796, JString, required = false,
                                 default = nil)
  if valid_594796 != nil:
    section.add "X-Amz-Algorithm", valid_594796
  var valid_594797 = header.getOrDefault("X-Amz-Signature")
  valid_594797 = validateParameter(valid_594797, JString, required = false,
                                 default = nil)
  if valid_594797 != nil:
    section.add "X-Amz-Signature", valid_594797
  var valid_594798 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594798 = validateParameter(valid_594798, JString, required = false,
                                 default = nil)
  if valid_594798 != nil:
    section.add "X-Amz-SignedHeaders", valid_594798
  var valid_594799 = header.getOrDefault("X-Amz-Credential")
  valid_594799 = validateParameter(valid_594799, JString, required = false,
                                 default = nil)
  if valid_594799 != nil:
    section.add "X-Amz-Credential", valid_594799
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594800: Call_GetDeactivateMFADevice_594786; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594800.validator(path, query, header, formData, body)
  let scheme = call_594800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594800.url(scheme.get, call_594800.host, call_594800.base,
                         call_594800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594800, url, valid)

proc call*(call_594801: Call_GetDeactivateMFADevice_594786; SerialNumber: string;
          UserName: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594802 = newJObject()
  add(query_594802, "SerialNumber", newJString(SerialNumber))
  add(query_594802, "UserName", newJString(UserName))
  add(query_594802, "Action", newJString(Action))
  add(query_594802, "Version", newJString(Version))
  result = call_594801.call(nil, query_594802, nil, nil, nil)

var getDeactivateMFADevice* = Call_GetDeactivateMFADevice_594786(
    name: "getDeactivateMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_GetDeactivateMFADevice_594787, base: "/",
    url: url_GetDeactivateMFADevice_594788, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccessKey_594838 = ref object of OpenApiRestCall_593437
proc url_PostDeleteAccessKey_594840(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteAccessKey_594839(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594841 = query.getOrDefault("Action")
  valid_594841 = validateParameter(valid_594841, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_594841 != nil:
    section.add "Action", valid_594841
  var valid_594842 = query.getOrDefault("Version")
  valid_594842 = validateParameter(valid_594842, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594842 != nil:
    section.add "Version", valid_594842
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594843 = header.getOrDefault("X-Amz-Date")
  valid_594843 = validateParameter(valid_594843, JString, required = false,
                                 default = nil)
  if valid_594843 != nil:
    section.add "X-Amz-Date", valid_594843
  var valid_594844 = header.getOrDefault("X-Amz-Security-Token")
  valid_594844 = validateParameter(valid_594844, JString, required = false,
                                 default = nil)
  if valid_594844 != nil:
    section.add "X-Amz-Security-Token", valid_594844
  var valid_594845 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594845 = validateParameter(valid_594845, JString, required = false,
                                 default = nil)
  if valid_594845 != nil:
    section.add "X-Amz-Content-Sha256", valid_594845
  var valid_594846 = header.getOrDefault("X-Amz-Algorithm")
  valid_594846 = validateParameter(valid_594846, JString, required = false,
                                 default = nil)
  if valid_594846 != nil:
    section.add "X-Amz-Algorithm", valid_594846
  var valid_594847 = header.getOrDefault("X-Amz-Signature")
  valid_594847 = validateParameter(valid_594847, JString, required = false,
                                 default = nil)
  if valid_594847 != nil:
    section.add "X-Amz-Signature", valid_594847
  var valid_594848 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594848 = validateParameter(valid_594848, JString, required = false,
                                 default = nil)
  if valid_594848 != nil:
    section.add "X-Amz-SignedHeaders", valid_594848
  var valid_594849 = header.getOrDefault("X-Amz-Credential")
  valid_594849 = validateParameter(valid_594849, JString, required = false,
                                 default = nil)
  if valid_594849 != nil:
    section.add "X-Amz-Credential", valid_594849
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_594850 = formData.getOrDefault("UserName")
  valid_594850 = validateParameter(valid_594850, JString, required = false,
                                 default = nil)
  if valid_594850 != nil:
    section.add "UserName", valid_594850
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_594851 = formData.getOrDefault("AccessKeyId")
  valid_594851 = validateParameter(valid_594851, JString, required = true,
                                 default = nil)
  if valid_594851 != nil:
    section.add "AccessKeyId", valid_594851
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594852: Call_PostDeleteAccessKey_594838; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_594852.validator(path, query, header, formData, body)
  let scheme = call_594852.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594852.url(scheme.get, call_594852.host, call_594852.base,
                         call_594852.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594852, url, valid)

proc call*(call_594853: Call_PostDeleteAccessKey_594838; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594854 = newJObject()
  var formData_594855 = newJObject()
  add(formData_594855, "UserName", newJString(UserName))
  add(formData_594855, "AccessKeyId", newJString(AccessKeyId))
  add(query_594854, "Action", newJString(Action))
  add(query_594854, "Version", newJString(Version))
  result = call_594853.call(nil, query_594854, nil, formData_594855, nil)

var postDeleteAccessKey* = Call_PostDeleteAccessKey_594838(
    name: "postDeleteAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccessKey",
    validator: validate_PostDeleteAccessKey_594839, base: "/",
    url: url_PostDeleteAccessKey_594840, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccessKey_594821 = ref object of OpenApiRestCall_593437
proc url_GetDeleteAccessKey_594823(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteAccessKey_594822(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccessKeyId` field"
  var valid_594824 = query.getOrDefault("AccessKeyId")
  valid_594824 = validateParameter(valid_594824, JString, required = true,
                                 default = nil)
  if valid_594824 != nil:
    section.add "AccessKeyId", valid_594824
  var valid_594825 = query.getOrDefault("UserName")
  valid_594825 = validateParameter(valid_594825, JString, required = false,
                                 default = nil)
  if valid_594825 != nil:
    section.add "UserName", valid_594825
  var valid_594826 = query.getOrDefault("Action")
  valid_594826 = validateParameter(valid_594826, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_594826 != nil:
    section.add "Action", valid_594826
  var valid_594827 = query.getOrDefault("Version")
  valid_594827 = validateParameter(valid_594827, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594827 != nil:
    section.add "Version", valid_594827
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594828 = header.getOrDefault("X-Amz-Date")
  valid_594828 = validateParameter(valid_594828, JString, required = false,
                                 default = nil)
  if valid_594828 != nil:
    section.add "X-Amz-Date", valid_594828
  var valid_594829 = header.getOrDefault("X-Amz-Security-Token")
  valid_594829 = validateParameter(valid_594829, JString, required = false,
                                 default = nil)
  if valid_594829 != nil:
    section.add "X-Amz-Security-Token", valid_594829
  var valid_594830 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594830 = validateParameter(valid_594830, JString, required = false,
                                 default = nil)
  if valid_594830 != nil:
    section.add "X-Amz-Content-Sha256", valid_594830
  var valid_594831 = header.getOrDefault("X-Amz-Algorithm")
  valid_594831 = validateParameter(valid_594831, JString, required = false,
                                 default = nil)
  if valid_594831 != nil:
    section.add "X-Amz-Algorithm", valid_594831
  var valid_594832 = header.getOrDefault("X-Amz-Signature")
  valid_594832 = validateParameter(valid_594832, JString, required = false,
                                 default = nil)
  if valid_594832 != nil:
    section.add "X-Amz-Signature", valid_594832
  var valid_594833 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594833 = validateParameter(valid_594833, JString, required = false,
                                 default = nil)
  if valid_594833 != nil:
    section.add "X-Amz-SignedHeaders", valid_594833
  var valid_594834 = header.getOrDefault("X-Amz-Credential")
  valid_594834 = validateParameter(valid_594834, JString, required = false,
                                 default = nil)
  if valid_594834 != nil:
    section.add "X-Amz-Credential", valid_594834
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594835: Call_GetDeleteAccessKey_594821; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_594835.validator(path, query, header, formData, body)
  let scheme = call_594835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594835.url(scheme.get, call_594835.host, call_594835.base,
                         call_594835.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594835, url, valid)

proc call*(call_594836: Call_GetDeleteAccessKey_594821; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594837 = newJObject()
  add(query_594837, "AccessKeyId", newJString(AccessKeyId))
  add(query_594837, "UserName", newJString(UserName))
  add(query_594837, "Action", newJString(Action))
  add(query_594837, "Version", newJString(Version))
  result = call_594836.call(nil, query_594837, nil, nil, nil)

var getDeleteAccessKey* = Call_GetDeleteAccessKey_594821(
    name: "getDeleteAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteAccessKey", validator: validate_GetDeleteAccessKey_594822,
    base: "/", url: url_GetDeleteAccessKey_594823,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountAlias_594872 = ref object of OpenApiRestCall_593437
proc url_PostDeleteAccountAlias_594874(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteAccountAlias_594873(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594875 = query.getOrDefault("Action")
  valid_594875 = validateParameter(valid_594875, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_594875 != nil:
    section.add "Action", valid_594875
  var valid_594876 = query.getOrDefault("Version")
  valid_594876 = validateParameter(valid_594876, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594876 != nil:
    section.add "Version", valid_594876
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594877 = header.getOrDefault("X-Amz-Date")
  valid_594877 = validateParameter(valid_594877, JString, required = false,
                                 default = nil)
  if valid_594877 != nil:
    section.add "X-Amz-Date", valid_594877
  var valid_594878 = header.getOrDefault("X-Amz-Security-Token")
  valid_594878 = validateParameter(valid_594878, JString, required = false,
                                 default = nil)
  if valid_594878 != nil:
    section.add "X-Amz-Security-Token", valid_594878
  var valid_594879 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594879 = validateParameter(valid_594879, JString, required = false,
                                 default = nil)
  if valid_594879 != nil:
    section.add "X-Amz-Content-Sha256", valid_594879
  var valid_594880 = header.getOrDefault("X-Amz-Algorithm")
  valid_594880 = validateParameter(valid_594880, JString, required = false,
                                 default = nil)
  if valid_594880 != nil:
    section.add "X-Amz-Algorithm", valid_594880
  var valid_594881 = header.getOrDefault("X-Amz-Signature")
  valid_594881 = validateParameter(valid_594881, JString, required = false,
                                 default = nil)
  if valid_594881 != nil:
    section.add "X-Amz-Signature", valid_594881
  var valid_594882 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594882 = validateParameter(valid_594882, JString, required = false,
                                 default = nil)
  if valid_594882 != nil:
    section.add "X-Amz-SignedHeaders", valid_594882
  var valid_594883 = header.getOrDefault("X-Amz-Credential")
  valid_594883 = validateParameter(valid_594883, JString, required = false,
                                 default = nil)
  if valid_594883 != nil:
    section.add "X-Amz-Credential", valid_594883
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_594884 = formData.getOrDefault("AccountAlias")
  valid_594884 = validateParameter(valid_594884, JString, required = true,
                                 default = nil)
  if valid_594884 != nil:
    section.add "AccountAlias", valid_594884
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594885: Call_PostDeleteAccountAlias_594872; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_594885.validator(path, query, header, formData, body)
  let scheme = call_594885.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594885.url(scheme.get, call_594885.host, call_594885.base,
                         call_594885.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594885, url, valid)

proc call*(call_594886: Call_PostDeleteAccountAlias_594872; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594887 = newJObject()
  var formData_594888 = newJObject()
  add(formData_594888, "AccountAlias", newJString(AccountAlias))
  add(query_594887, "Action", newJString(Action))
  add(query_594887, "Version", newJString(Version))
  result = call_594886.call(nil, query_594887, nil, formData_594888, nil)

var postDeleteAccountAlias* = Call_PostDeleteAccountAlias_594872(
    name: "postDeleteAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_PostDeleteAccountAlias_594873, base: "/",
    url: url_PostDeleteAccountAlias_594874, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountAlias_594856 = ref object of OpenApiRestCall_593437
proc url_GetDeleteAccountAlias_594858(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteAccountAlias_594857(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_594859 = query.getOrDefault("AccountAlias")
  valid_594859 = validateParameter(valid_594859, JString, required = true,
                                 default = nil)
  if valid_594859 != nil:
    section.add "AccountAlias", valid_594859
  var valid_594860 = query.getOrDefault("Action")
  valid_594860 = validateParameter(valid_594860, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_594860 != nil:
    section.add "Action", valid_594860
  var valid_594861 = query.getOrDefault("Version")
  valid_594861 = validateParameter(valid_594861, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594861 != nil:
    section.add "Version", valid_594861
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594862 = header.getOrDefault("X-Amz-Date")
  valid_594862 = validateParameter(valid_594862, JString, required = false,
                                 default = nil)
  if valid_594862 != nil:
    section.add "X-Amz-Date", valid_594862
  var valid_594863 = header.getOrDefault("X-Amz-Security-Token")
  valid_594863 = validateParameter(valid_594863, JString, required = false,
                                 default = nil)
  if valid_594863 != nil:
    section.add "X-Amz-Security-Token", valid_594863
  var valid_594864 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594864 = validateParameter(valid_594864, JString, required = false,
                                 default = nil)
  if valid_594864 != nil:
    section.add "X-Amz-Content-Sha256", valid_594864
  var valid_594865 = header.getOrDefault("X-Amz-Algorithm")
  valid_594865 = validateParameter(valid_594865, JString, required = false,
                                 default = nil)
  if valid_594865 != nil:
    section.add "X-Amz-Algorithm", valid_594865
  var valid_594866 = header.getOrDefault("X-Amz-Signature")
  valid_594866 = validateParameter(valid_594866, JString, required = false,
                                 default = nil)
  if valid_594866 != nil:
    section.add "X-Amz-Signature", valid_594866
  var valid_594867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594867 = validateParameter(valid_594867, JString, required = false,
                                 default = nil)
  if valid_594867 != nil:
    section.add "X-Amz-SignedHeaders", valid_594867
  var valid_594868 = header.getOrDefault("X-Amz-Credential")
  valid_594868 = validateParameter(valid_594868, JString, required = false,
                                 default = nil)
  if valid_594868 != nil:
    section.add "X-Amz-Credential", valid_594868
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594869: Call_GetDeleteAccountAlias_594856; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_594869.validator(path, query, header, formData, body)
  let scheme = call_594869.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594869.url(scheme.get, call_594869.host, call_594869.base,
                         call_594869.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594869, url, valid)

proc call*(call_594870: Call_GetDeleteAccountAlias_594856; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594871 = newJObject()
  add(query_594871, "AccountAlias", newJString(AccountAlias))
  add(query_594871, "Action", newJString(Action))
  add(query_594871, "Version", newJString(Version))
  result = call_594870.call(nil, query_594871, nil, nil, nil)

var getDeleteAccountAlias* = Call_GetDeleteAccountAlias_594856(
    name: "getDeleteAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_GetDeleteAccountAlias_594857, base: "/",
    url: url_GetDeleteAccountAlias_594858, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountPasswordPolicy_594904 = ref object of OpenApiRestCall_593437
proc url_PostDeleteAccountPasswordPolicy_594906(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteAccountPasswordPolicy_594905(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594907 = query.getOrDefault("Action")
  valid_594907 = validateParameter(valid_594907, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_594907 != nil:
    section.add "Action", valid_594907
  var valid_594908 = query.getOrDefault("Version")
  valid_594908 = validateParameter(valid_594908, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594908 != nil:
    section.add "Version", valid_594908
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594909 = header.getOrDefault("X-Amz-Date")
  valid_594909 = validateParameter(valid_594909, JString, required = false,
                                 default = nil)
  if valid_594909 != nil:
    section.add "X-Amz-Date", valid_594909
  var valid_594910 = header.getOrDefault("X-Amz-Security-Token")
  valid_594910 = validateParameter(valid_594910, JString, required = false,
                                 default = nil)
  if valid_594910 != nil:
    section.add "X-Amz-Security-Token", valid_594910
  var valid_594911 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594911 = validateParameter(valid_594911, JString, required = false,
                                 default = nil)
  if valid_594911 != nil:
    section.add "X-Amz-Content-Sha256", valid_594911
  var valid_594912 = header.getOrDefault("X-Amz-Algorithm")
  valid_594912 = validateParameter(valid_594912, JString, required = false,
                                 default = nil)
  if valid_594912 != nil:
    section.add "X-Amz-Algorithm", valid_594912
  var valid_594913 = header.getOrDefault("X-Amz-Signature")
  valid_594913 = validateParameter(valid_594913, JString, required = false,
                                 default = nil)
  if valid_594913 != nil:
    section.add "X-Amz-Signature", valid_594913
  var valid_594914 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594914 = validateParameter(valid_594914, JString, required = false,
                                 default = nil)
  if valid_594914 != nil:
    section.add "X-Amz-SignedHeaders", valid_594914
  var valid_594915 = header.getOrDefault("X-Amz-Credential")
  valid_594915 = validateParameter(valid_594915, JString, required = false,
                                 default = nil)
  if valid_594915 != nil:
    section.add "X-Amz-Credential", valid_594915
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594916: Call_PostDeleteAccountPasswordPolicy_594904;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_594916.validator(path, query, header, formData, body)
  let scheme = call_594916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594916.url(scheme.get, call_594916.host, call_594916.base,
                         call_594916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594916, url, valid)

proc call*(call_594917: Call_PostDeleteAccountPasswordPolicy_594904;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594918 = newJObject()
  add(query_594918, "Action", newJString(Action))
  add(query_594918, "Version", newJString(Version))
  result = call_594917.call(nil, query_594918, nil, nil, nil)

var postDeleteAccountPasswordPolicy* = Call_PostDeleteAccountPasswordPolicy_594904(
    name: "postDeleteAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_PostDeleteAccountPasswordPolicy_594905, base: "/",
    url: url_PostDeleteAccountPasswordPolicy_594906,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountPasswordPolicy_594889 = ref object of OpenApiRestCall_593437
proc url_GetDeleteAccountPasswordPolicy_594891(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteAccountPasswordPolicy_594890(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594892 = query.getOrDefault("Action")
  valid_594892 = validateParameter(valid_594892, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_594892 != nil:
    section.add "Action", valid_594892
  var valid_594893 = query.getOrDefault("Version")
  valid_594893 = validateParameter(valid_594893, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594893 != nil:
    section.add "Version", valid_594893
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594894 = header.getOrDefault("X-Amz-Date")
  valid_594894 = validateParameter(valid_594894, JString, required = false,
                                 default = nil)
  if valid_594894 != nil:
    section.add "X-Amz-Date", valid_594894
  var valid_594895 = header.getOrDefault("X-Amz-Security-Token")
  valid_594895 = validateParameter(valid_594895, JString, required = false,
                                 default = nil)
  if valid_594895 != nil:
    section.add "X-Amz-Security-Token", valid_594895
  var valid_594896 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594896 = validateParameter(valid_594896, JString, required = false,
                                 default = nil)
  if valid_594896 != nil:
    section.add "X-Amz-Content-Sha256", valid_594896
  var valid_594897 = header.getOrDefault("X-Amz-Algorithm")
  valid_594897 = validateParameter(valid_594897, JString, required = false,
                                 default = nil)
  if valid_594897 != nil:
    section.add "X-Amz-Algorithm", valid_594897
  var valid_594898 = header.getOrDefault("X-Amz-Signature")
  valid_594898 = validateParameter(valid_594898, JString, required = false,
                                 default = nil)
  if valid_594898 != nil:
    section.add "X-Amz-Signature", valid_594898
  var valid_594899 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594899 = validateParameter(valid_594899, JString, required = false,
                                 default = nil)
  if valid_594899 != nil:
    section.add "X-Amz-SignedHeaders", valid_594899
  var valid_594900 = header.getOrDefault("X-Amz-Credential")
  valid_594900 = validateParameter(valid_594900, JString, required = false,
                                 default = nil)
  if valid_594900 != nil:
    section.add "X-Amz-Credential", valid_594900
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594901: Call_GetDeleteAccountPasswordPolicy_594889; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_594901.validator(path, query, header, formData, body)
  let scheme = call_594901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594901.url(scheme.get, call_594901.host, call_594901.base,
                         call_594901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594901, url, valid)

proc call*(call_594902: Call_GetDeleteAccountPasswordPolicy_594889;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594903 = newJObject()
  add(query_594903, "Action", newJString(Action))
  add(query_594903, "Version", newJString(Version))
  result = call_594902.call(nil, query_594903, nil, nil, nil)

var getDeleteAccountPasswordPolicy* = Call_GetDeleteAccountPasswordPolicy_594889(
    name: "getDeleteAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_GetDeleteAccountPasswordPolicy_594890, base: "/",
    url: url_GetDeleteAccountPasswordPolicy_594891,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroup_594935 = ref object of OpenApiRestCall_593437
proc url_PostDeleteGroup_594937(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteGroup_594936(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594938 = query.getOrDefault("Action")
  valid_594938 = validateParameter(valid_594938, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_594938 != nil:
    section.add "Action", valid_594938
  var valid_594939 = query.getOrDefault("Version")
  valid_594939 = validateParameter(valid_594939, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594939 != nil:
    section.add "Version", valid_594939
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594940 = header.getOrDefault("X-Amz-Date")
  valid_594940 = validateParameter(valid_594940, JString, required = false,
                                 default = nil)
  if valid_594940 != nil:
    section.add "X-Amz-Date", valid_594940
  var valid_594941 = header.getOrDefault("X-Amz-Security-Token")
  valid_594941 = validateParameter(valid_594941, JString, required = false,
                                 default = nil)
  if valid_594941 != nil:
    section.add "X-Amz-Security-Token", valid_594941
  var valid_594942 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594942 = validateParameter(valid_594942, JString, required = false,
                                 default = nil)
  if valid_594942 != nil:
    section.add "X-Amz-Content-Sha256", valid_594942
  var valid_594943 = header.getOrDefault("X-Amz-Algorithm")
  valid_594943 = validateParameter(valid_594943, JString, required = false,
                                 default = nil)
  if valid_594943 != nil:
    section.add "X-Amz-Algorithm", valid_594943
  var valid_594944 = header.getOrDefault("X-Amz-Signature")
  valid_594944 = validateParameter(valid_594944, JString, required = false,
                                 default = nil)
  if valid_594944 != nil:
    section.add "X-Amz-Signature", valid_594944
  var valid_594945 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594945 = validateParameter(valid_594945, JString, required = false,
                                 default = nil)
  if valid_594945 != nil:
    section.add "X-Amz-SignedHeaders", valid_594945
  var valid_594946 = header.getOrDefault("X-Amz-Credential")
  valid_594946 = validateParameter(valid_594946, JString, required = false,
                                 default = nil)
  if valid_594946 != nil:
    section.add "X-Amz-Credential", valid_594946
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_594947 = formData.getOrDefault("GroupName")
  valid_594947 = validateParameter(valid_594947, JString, required = true,
                                 default = nil)
  if valid_594947 != nil:
    section.add "GroupName", valid_594947
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594948: Call_PostDeleteGroup_594935; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_594948.validator(path, query, header, formData, body)
  let scheme = call_594948.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594948.url(scheme.get, call_594948.host, call_594948.base,
                         call_594948.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594948, url, valid)

proc call*(call_594949: Call_PostDeleteGroup_594935; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594950 = newJObject()
  var formData_594951 = newJObject()
  add(formData_594951, "GroupName", newJString(GroupName))
  add(query_594950, "Action", newJString(Action))
  add(query_594950, "Version", newJString(Version))
  result = call_594949.call(nil, query_594950, nil, formData_594951, nil)

var postDeleteGroup* = Call_PostDeleteGroup_594935(name: "postDeleteGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_PostDeleteGroup_594936,
    base: "/", url: url_PostDeleteGroup_594937, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroup_594919 = ref object of OpenApiRestCall_593437
proc url_GetDeleteGroup_594921(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteGroup_594920(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594922 = query.getOrDefault("Action")
  valid_594922 = validateParameter(valid_594922, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_594922 != nil:
    section.add "Action", valid_594922
  var valid_594923 = query.getOrDefault("GroupName")
  valid_594923 = validateParameter(valid_594923, JString, required = true,
                                 default = nil)
  if valid_594923 != nil:
    section.add "GroupName", valid_594923
  var valid_594924 = query.getOrDefault("Version")
  valid_594924 = validateParameter(valid_594924, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594924 != nil:
    section.add "Version", valid_594924
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594925 = header.getOrDefault("X-Amz-Date")
  valid_594925 = validateParameter(valid_594925, JString, required = false,
                                 default = nil)
  if valid_594925 != nil:
    section.add "X-Amz-Date", valid_594925
  var valid_594926 = header.getOrDefault("X-Amz-Security-Token")
  valid_594926 = validateParameter(valid_594926, JString, required = false,
                                 default = nil)
  if valid_594926 != nil:
    section.add "X-Amz-Security-Token", valid_594926
  var valid_594927 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594927 = validateParameter(valid_594927, JString, required = false,
                                 default = nil)
  if valid_594927 != nil:
    section.add "X-Amz-Content-Sha256", valid_594927
  var valid_594928 = header.getOrDefault("X-Amz-Algorithm")
  valid_594928 = validateParameter(valid_594928, JString, required = false,
                                 default = nil)
  if valid_594928 != nil:
    section.add "X-Amz-Algorithm", valid_594928
  var valid_594929 = header.getOrDefault("X-Amz-Signature")
  valid_594929 = validateParameter(valid_594929, JString, required = false,
                                 default = nil)
  if valid_594929 != nil:
    section.add "X-Amz-Signature", valid_594929
  var valid_594930 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594930 = validateParameter(valid_594930, JString, required = false,
                                 default = nil)
  if valid_594930 != nil:
    section.add "X-Amz-SignedHeaders", valid_594930
  var valid_594931 = header.getOrDefault("X-Amz-Credential")
  valid_594931 = validateParameter(valid_594931, JString, required = false,
                                 default = nil)
  if valid_594931 != nil:
    section.add "X-Amz-Credential", valid_594931
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594932: Call_GetDeleteGroup_594919; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_594932.validator(path, query, header, formData, body)
  let scheme = call_594932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594932.url(scheme.get, call_594932.host, call_594932.base,
                         call_594932.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594932, url, valid)

proc call*(call_594933: Call_GetDeleteGroup_594919; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_594934 = newJObject()
  add(query_594934, "Action", newJString(Action))
  add(query_594934, "GroupName", newJString(GroupName))
  add(query_594934, "Version", newJString(Version))
  result = call_594933.call(nil, query_594934, nil, nil, nil)

var getDeleteGroup* = Call_GetDeleteGroup_594919(name: "getDeleteGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_GetDeleteGroup_594920,
    base: "/", url: url_GetDeleteGroup_594921, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroupPolicy_594969 = ref object of OpenApiRestCall_593437
proc url_PostDeleteGroupPolicy_594971(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteGroupPolicy_594970(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594972 = query.getOrDefault("Action")
  valid_594972 = validateParameter(valid_594972, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_594972 != nil:
    section.add "Action", valid_594972
  var valid_594973 = query.getOrDefault("Version")
  valid_594973 = validateParameter(valid_594973, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594973 != nil:
    section.add "Version", valid_594973
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594974 = header.getOrDefault("X-Amz-Date")
  valid_594974 = validateParameter(valid_594974, JString, required = false,
                                 default = nil)
  if valid_594974 != nil:
    section.add "X-Amz-Date", valid_594974
  var valid_594975 = header.getOrDefault("X-Amz-Security-Token")
  valid_594975 = validateParameter(valid_594975, JString, required = false,
                                 default = nil)
  if valid_594975 != nil:
    section.add "X-Amz-Security-Token", valid_594975
  var valid_594976 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594976 = validateParameter(valid_594976, JString, required = false,
                                 default = nil)
  if valid_594976 != nil:
    section.add "X-Amz-Content-Sha256", valid_594976
  var valid_594977 = header.getOrDefault("X-Amz-Algorithm")
  valid_594977 = validateParameter(valid_594977, JString, required = false,
                                 default = nil)
  if valid_594977 != nil:
    section.add "X-Amz-Algorithm", valid_594977
  var valid_594978 = header.getOrDefault("X-Amz-Signature")
  valid_594978 = validateParameter(valid_594978, JString, required = false,
                                 default = nil)
  if valid_594978 != nil:
    section.add "X-Amz-Signature", valid_594978
  var valid_594979 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594979 = validateParameter(valid_594979, JString, required = false,
                                 default = nil)
  if valid_594979 != nil:
    section.add "X-Amz-SignedHeaders", valid_594979
  var valid_594980 = header.getOrDefault("X-Amz-Credential")
  valid_594980 = validateParameter(valid_594980, JString, required = false,
                                 default = nil)
  if valid_594980 != nil:
    section.add "X-Amz-Credential", valid_594980
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_594981 = formData.getOrDefault("PolicyName")
  valid_594981 = validateParameter(valid_594981, JString, required = true,
                                 default = nil)
  if valid_594981 != nil:
    section.add "PolicyName", valid_594981
  var valid_594982 = formData.getOrDefault("GroupName")
  valid_594982 = validateParameter(valid_594982, JString, required = true,
                                 default = nil)
  if valid_594982 != nil:
    section.add "GroupName", valid_594982
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594983: Call_PostDeleteGroupPolicy_594969; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594983.validator(path, query, header, formData, body)
  let scheme = call_594983.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594983.url(scheme.get, call_594983.host, call_594983.base,
                         call_594983.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594983, url, valid)

proc call*(call_594984: Call_PostDeleteGroupPolicy_594969; PolicyName: string;
          GroupName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594985 = newJObject()
  var formData_594986 = newJObject()
  add(formData_594986, "PolicyName", newJString(PolicyName))
  add(formData_594986, "GroupName", newJString(GroupName))
  add(query_594985, "Action", newJString(Action))
  add(query_594985, "Version", newJString(Version))
  result = call_594984.call(nil, query_594985, nil, formData_594986, nil)

var postDeleteGroupPolicy* = Call_PostDeleteGroupPolicy_594969(
    name: "postDeleteGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_PostDeleteGroupPolicy_594970, base: "/",
    url: url_PostDeleteGroupPolicy_594971, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroupPolicy_594952 = ref object of OpenApiRestCall_593437
proc url_GetDeleteGroupPolicy_594954(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteGroupPolicy_594953(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594955 = query.getOrDefault("Action")
  valid_594955 = validateParameter(valid_594955, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_594955 != nil:
    section.add "Action", valid_594955
  var valid_594956 = query.getOrDefault("GroupName")
  valid_594956 = validateParameter(valid_594956, JString, required = true,
                                 default = nil)
  if valid_594956 != nil:
    section.add "GroupName", valid_594956
  var valid_594957 = query.getOrDefault("Version")
  valid_594957 = validateParameter(valid_594957, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594957 != nil:
    section.add "Version", valid_594957
  var valid_594958 = query.getOrDefault("PolicyName")
  valid_594958 = validateParameter(valid_594958, JString, required = true,
                                 default = nil)
  if valid_594958 != nil:
    section.add "PolicyName", valid_594958
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594959 = header.getOrDefault("X-Amz-Date")
  valid_594959 = validateParameter(valid_594959, JString, required = false,
                                 default = nil)
  if valid_594959 != nil:
    section.add "X-Amz-Date", valid_594959
  var valid_594960 = header.getOrDefault("X-Amz-Security-Token")
  valid_594960 = validateParameter(valid_594960, JString, required = false,
                                 default = nil)
  if valid_594960 != nil:
    section.add "X-Amz-Security-Token", valid_594960
  var valid_594961 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594961 = validateParameter(valid_594961, JString, required = false,
                                 default = nil)
  if valid_594961 != nil:
    section.add "X-Amz-Content-Sha256", valid_594961
  var valid_594962 = header.getOrDefault("X-Amz-Algorithm")
  valid_594962 = validateParameter(valid_594962, JString, required = false,
                                 default = nil)
  if valid_594962 != nil:
    section.add "X-Amz-Algorithm", valid_594962
  var valid_594963 = header.getOrDefault("X-Amz-Signature")
  valid_594963 = validateParameter(valid_594963, JString, required = false,
                                 default = nil)
  if valid_594963 != nil:
    section.add "X-Amz-Signature", valid_594963
  var valid_594964 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594964 = validateParameter(valid_594964, JString, required = false,
                                 default = nil)
  if valid_594964 != nil:
    section.add "X-Amz-SignedHeaders", valid_594964
  var valid_594965 = header.getOrDefault("X-Amz-Credential")
  valid_594965 = validateParameter(valid_594965, JString, required = false,
                                 default = nil)
  if valid_594965 != nil:
    section.add "X-Amz-Credential", valid_594965
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594966: Call_GetDeleteGroupPolicy_594952; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_594966.validator(path, query, header, formData, body)
  let scheme = call_594966.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594966.url(scheme.get, call_594966.host, call_594966.base,
                         call_594966.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594966, url, valid)

proc call*(call_594967: Call_GetDeleteGroupPolicy_594952; GroupName: string;
          PolicyName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_594968 = newJObject()
  add(query_594968, "Action", newJString(Action))
  add(query_594968, "GroupName", newJString(GroupName))
  add(query_594968, "Version", newJString(Version))
  add(query_594968, "PolicyName", newJString(PolicyName))
  result = call_594967.call(nil, query_594968, nil, nil, nil)

var getDeleteGroupPolicy* = Call_GetDeleteGroupPolicy_594952(
    name: "getDeleteGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_GetDeleteGroupPolicy_594953, base: "/",
    url: url_GetDeleteGroupPolicy_594954, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstanceProfile_595003 = ref object of OpenApiRestCall_593437
proc url_PostDeleteInstanceProfile_595005(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteInstanceProfile_595004(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595006 = query.getOrDefault("Action")
  valid_595006 = validateParameter(valid_595006, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_595006 != nil:
    section.add "Action", valid_595006
  var valid_595007 = query.getOrDefault("Version")
  valid_595007 = validateParameter(valid_595007, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595007 != nil:
    section.add "Version", valid_595007
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595008 = header.getOrDefault("X-Amz-Date")
  valid_595008 = validateParameter(valid_595008, JString, required = false,
                                 default = nil)
  if valid_595008 != nil:
    section.add "X-Amz-Date", valid_595008
  var valid_595009 = header.getOrDefault("X-Amz-Security-Token")
  valid_595009 = validateParameter(valid_595009, JString, required = false,
                                 default = nil)
  if valid_595009 != nil:
    section.add "X-Amz-Security-Token", valid_595009
  var valid_595010 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595010 = validateParameter(valid_595010, JString, required = false,
                                 default = nil)
  if valid_595010 != nil:
    section.add "X-Amz-Content-Sha256", valid_595010
  var valid_595011 = header.getOrDefault("X-Amz-Algorithm")
  valid_595011 = validateParameter(valid_595011, JString, required = false,
                                 default = nil)
  if valid_595011 != nil:
    section.add "X-Amz-Algorithm", valid_595011
  var valid_595012 = header.getOrDefault("X-Amz-Signature")
  valid_595012 = validateParameter(valid_595012, JString, required = false,
                                 default = nil)
  if valid_595012 != nil:
    section.add "X-Amz-Signature", valid_595012
  var valid_595013 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595013 = validateParameter(valid_595013, JString, required = false,
                                 default = nil)
  if valid_595013 != nil:
    section.add "X-Amz-SignedHeaders", valid_595013
  var valid_595014 = header.getOrDefault("X-Amz-Credential")
  valid_595014 = validateParameter(valid_595014, JString, required = false,
                                 default = nil)
  if valid_595014 != nil:
    section.add "X-Amz-Credential", valid_595014
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_595015 = formData.getOrDefault("InstanceProfileName")
  valid_595015 = validateParameter(valid_595015, JString, required = true,
                                 default = nil)
  if valid_595015 != nil:
    section.add "InstanceProfileName", valid_595015
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595016: Call_PostDeleteInstanceProfile_595003; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_595016.validator(path, query, header, formData, body)
  let scheme = call_595016.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595016.url(scheme.get, call_595016.host, call_595016.base,
                         call_595016.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595016, url, valid)

proc call*(call_595017: Call_PostDeleteInstanceProfile_595003;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_595018 = newJObject()
  var formData_595019 = newJObject()
  add(query_595018, "Action", newJString(Action))
  add(formData_595019, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_595018, "Version", newJString(Version))
  result = call_595017.call(nil, query_595018, nil, formData_595019, nil)

var postDeleteInstanceProfile* = Call_PostDeleteInstanceProfile_595003(
    name: "postDeleteInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_PostDeleteInstanceProfile_595004, base: "/",
    url: url_PostDeleteInstanceProfile_595005,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstanceProfile_594987 = ref object of OpenApiRestCall_593437
proc url_GetDeleteInstanceProfile_594989(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteInstanceProfile_594988(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_594990 = query.getOrDefault("InstanceProfileName")
  valid_594990 = validateParameter(valid_594990, JString, required = true,
                                 default = nil)
  if valid_594990 != nil:
    section.add "InstanceProfileName", valid_594990
  var valid_594991 = query.getOrDefault("Action")
  valid_594991 = validateParameter(valid_594991, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_594991 != nil:
    section.add "Action", valid_594991
  var valid_594992 = query.getOrDefault("Version")
  valid_594992 = validateParameter(valid_594992, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_594992 != nil:
    section.add "Version", valid_594992
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_594993 = header.getOrDefault("X-Amz-Date")
  valid_594993 = validateParameter(valid_594993, JString, required = false,
                                 default = nil)
  if valid_594993 != nil:
    section.add "X-Amz-Date", valid_594993
  var valid_594994 = header.getOrDefault("X-Amz-Security-Token")
  valid_594994 = validateParameter(valid_594994, JString, required = false,
                                 default = nil)
  if valid_594994 != nil:
    section.add "X-Amz-Security-Token", valid_594994
  var valid_594995 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594995 = validateParameter(valid_594995, JString, required = false,
                                 default = nil)
  if valid_594995 != nil:
    section.add "X-Amz-Content-Sha256", valid_594995
  var valid_594996 = header.getOrDefault("X-Amz-Algorithm")
  valid_594996 = validateParameter(valid_594996, JString, required = false,
                                 default = nil)
  if valid_594996 != nil:
    section.add "X-Amz-Algorithm", valid_594996
  var valid_594997 = header.getOrDefault("X-Amz-Signature")
  valid_594997 = validateParameter(valid_594997, JString, required = false,
                                 default = nil)
  if valid_594997 != nil:
    section.add "X-Amz-Signature", valid_594997
  var valid_594998 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594998 = validateParameter(valid_594998, JString, required = false,
                                 default = nil)
  if valid_594998 != nil:
    section.add "X-Amz-SignedHeaders", valid_594998
  var valid_594999 = header.getOrDefault("X-Amz-Credential")
  valid_594999 = validateParameter(valid_594999, JString, required = false,
                                 default = nil)
  if valid_594999 != nil:
    section.add "X-Amz-Credential", valid_594999
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595000: Call_GetDeleteInstanceProfile_594987; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_595000.validator(path, query, header, formData, body)
  let scheme = call_595000.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595000.url(scheme.get, call_595000.host, call_595000.base,
                         call_595000.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595000, url, valid)

proc call*(call_595001: Call_GetDeleteInstanceProfile_594987;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595002 = newJObject()
  add(query_595002, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_595002, "Action", newJString(Action))
  add(query_595002, "Version", newJString(Version))
  result = call_595001.call(nil, query_595002, nil, nil, nil)

var getDeleteInstanceProfile* = Call_GetDeleteInstanceProfile_594987(
    name: "getDeleteInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_GetDeleteInstanceProfile_594988, base: "/",
    url: url_GetDeleteInstanceProfile_594989, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLoginProfile_595036 = ref object of OpenApiRestCall_593437
proc url_PostDeleteLoginProfile_595038(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteLoginProfile_595037(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595039 = query.getOrDefault("Action")
  valid_595039 = validateParameter(valid_595039, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_595039 != nil:
    section.add "Action", valid_595039
  var valid_595040 = query.getOrDefault("Version")
  valid_595040 = validateParameter(valid_595040, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595040 != nil:
    section.add "Version", valid_595040
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595041 = header.getOrDefault("X-Amz-Date")
  valid_595041 = validateParameter(valid_595041, JString, required = false,
                                 default = nil)
  if valid_595041 != nil:
    section.add "X-Amz-Date", valid_595041
  var valid_595042 = header.getOrDefault("X-Amz-Security-Token")
  valid_595042 = validateParameter(valid_595042, JString, required = false,
                                 default = nil)
  if valid_595042 != nil:
    section.add "X-Amz-Security-Token", valid_595042
  var valid_595043 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595043 = validateParameter(valid_595043, JString, required = false,
                                 default = nil)
  if valid_595043 != nil:
    section.add "X-Amz-Content-Sha256", valid_595043
  var valid_595044 = header.getOrDefault("X-Amz-Algorithm")
  valid_595044 = validateParameter(valid_595044, JString, required = false,
                                 default = nil)
  if valid_595044 != nil:
    section.add "X-Amz-Algorithm", valid_595044
  var valid_595045 = header.getOrDefault("X-Amz-Signature")
  valid_595045 = validateParameter(valid_595045, JString, required = false,
                                 default = nil)
  if valid_595045 != nil:
    section.add "X-Amz-Signature", valid_595045
  var valid_595046 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595046 = validateParameter(valid_595046, JString, required = false,
                                 default = nil)
  if valid_595046 != nil:
    section.add "X-Amz-SignedHeaders", valid_595046
  var valid_595047 = header.getOrDefault("X-Amz-Credential")
  valid_595047 = validateParameter(valid_595047, JString, required = false,
                                 default = nil)
  if valid_595047 != nil:
    section.add "X-Amz-Credential", valid_595047
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_595048 = formData.getOrDefault("UserName")
  valid_595048 = validateParameter(valid_595048, JString, required = true,
                                 default = nil)
  if valid_595048 != nil:
    section.add "UserName", valid_595048
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595049: Call_PostDeleteLoginProfile_595036; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_595049.validator(path, query, header, formData, body)
  let scheme = call_595049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595049.url(scheme.get, call_595049.host, call_595049.base,
                         call_595049.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595049, url, valid)

proc call*(call_595050: Call_PostDeleteLoginProfile_595036; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595051 = newJObject()
  var formData_595052 = newJObject()
  add(formData_595052, "UserName", newJString(UserName))
  add(query_595051, "Action", newJString(Action))
  add(query_595051, "Version", newJString(Version))
  result = call_595050.call(nil, query_595051, nil, formData_595052, nil)

var postDeleteLoginProfile* = Call_PostDeleteLoginProfile_595036(
    name: "postDeleteLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_PostDeleteLoginProfile_595037, base: "/",
    url: url_PostDeleteLoginProfile_595038, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLoginProfile_595020 = ref object of OpenApiRestCall_593437
proc url_GetDeleteLoginProfile_595022(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteLoginProfile_595021(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_595023 = query.getOrDefault("UserName")
  valid_595023 = validateParameter(valid_595023, JString, required = true,
                                 default = nil)
  if valid_595023 != nil:
    section.add "UserName", valid_595023
  var valid_595024 = query.getOrDefault("Action")
  valid_595024 = validateParameter(valid_595024, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_595024 != nil:
    section.add "Action", valid_595024
  var valid_595025 = query.getOrDefault("Version")
  valid_595025 = validateParameter(valid_595025, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595025 != nil:
    section.add "Version", valid_595025
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595026 = header.getOrDefault("X-Amz-Date")
  valid_595026 = validateParameter(valid_595026, JString, required = false,
                                 default = nil)
  if valid_595026 != nil:
    section.add "X-Amz-Date", valid_595026
  var valid_595027 = header.getOrDefault("X-Amz-Security-Token")
  valid_595027 = validateParameter(valid_595027, JString, required = false,
                                 default = nil)
  if valid_595027 != nil:
    section.add "X-Amz-Security-Token", valid_595027
  var valid_595028 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595028 = validateParameter(valid_595028, JString, required = false,
                                 default = nil)
  if valid_595028 != nil:
    section.add "X-Amz-Content-Sha256", valid_595028
  var valid_595029 = header.getOrDefault("X-Amz-Algorithm")
  valid_595029 = validateParameter(valid_595029, JString, required = false,
                                 default = nil)
  if valid_595029 != nil:
    section.add "X-Amz-Algorithm", valid_595029
  var valid_595030 = header.getOrDefault("X-Amz-Signature")
  valid_595030 = validateParameter(valid_595030, JString, required = false,
                                 default = nil)
  if valid_595030 != nil:
    section.add "X-Amz-Signature", valid_595030
  var valid_595031 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595031 = validateParameter(valid_595031, JString, required = false,
                                 default = nil)
  if valid_595031 != nil:
    section.add "X-Amz-SignedHeaders", valid_595031
  var valid_595032 = header.getOrDefault("X-Amz-Credential")
  valid_595032 = validateParameter(valid_595032, JString, required = false,
                                 default = nil)
  if valid_595032 != nil:
    section.add "X-Amz-Credential", valid_595032
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595033: Call_GetDeleteLoginProfile_595020; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_595033.validator(path, query, header, formData, body)
  let scheme = call_595033.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595033.url(scheme.get, call_595033.host, call_595033.base,
                         call_595033.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595033, url, valid)

proc call*(call_595034: Call_GetDeleteLoginProfile_595020; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595035 = newJObject()
  add(query_595035, "UserName", newJString(UserName))
  add(query_595035, "Action", newJString(Action))
  add(query_595035, "Version", newJString(Version))
  result = call_595034.call(nil, query_595035, nil, nil, nil)

var getDeleteLoginProfile* = Call_GetDeleteLoginProfile_595020(
    name: "getDeleteLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_GetDeleteLoginProfile_595021, base: "/",
    url: url_GetDeleteLoginProfile_595022, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOpenIDConnectProvider_595069 = ref object of OpenApiRestCall_593437
proc url_PostDeleteOpenIDConnectProvider_595071(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteOpenIDConnectProvider_595070(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595072 = query.getOrDefault("Action")
  valid_595072 = validateParameter(valid_595072, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_595072 != nil:
    section.add "Action", valid_595072
  var valid_595073 = query.getOrDefault("Version")
  valid_595073 = validateParameter(valid_595073, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595073 != nil:
    section.add "Version", valid_595073
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595074 = header.getOrDefault("X-Amz-Date")
  valid_595074 = validateParameter(valid_595074, JString, required = false,
                                 default = nil)
  if valid_595074 != nil:
    section.add "X-Amz-Date", valid_595074
  var valid_595075 = header.getOrDefault("X-Amz-Security-Token")
  valid_595075 = validateParameter(valid_595075, JString, required = false,
                                 default = nil)
  if valid_595075 != nil:
    section.add "X-Amz-Security-Token", valid_595075
  var valid_595076 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595076 = validateParameter(valid_595076, JString, required = false,
                                 default = nil)
  if valid_595076 != nil:
    section.add "X-Amz-Content-Sha256", valid_595076
  var valid_595077 = header.getOrDefault("X-Amz-Algorithm")
  valid_595077 = validateParameter(valid_595077, JString, required = false,
                                 default = nil)
  if valid_595077 != nil:
    section.add "X-Amz-Algorithm", valid_595077
  var valid_595078 = header.getOrDefault("X-Amz-Signature")
  valid_595078 = validateParameter(valid_595078, JString, required = false,
                                 default = nil)
  if valid_595078 != nil:
    section.add "X-Amz-Signature", valid_595078
  var valid_595079 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595079 = validateParameter(valid_595079, JString, required = false,
                                 default = nil)
  if valid_595079 != nil:
    section.add "X-Amz-SignedHeaders", valid_595079
  var valid_595080 = header.getOrDefault("X-Amz-Credential")
  valid_595080 = validateParameter(valid_595080, JString, required = false,
                                 default = nil)
  if valid_595080 != nil:
    section.add "X-Amz-Credential", valid_595080
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_595081 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_595081 = validateParameter(valid_595081, JString, required = true,
                                 default = nil)
  if valid_595081 != nil:
    section.add "OpenIDConnectProviderArn", valid_595081
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595082: Call_PostDeleteOpenIDConnectProvider_595069;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_595082.validator(path, query, header, formData, body)
  let scheme = call_595082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595082.url(scheme.get, call_595082.host, call_595082.base,
                         call_595082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595082, url, valid)

proc call*(call_595083: Call_PostDeleteOpenIDConnectProvider_595069;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595084 = newJObject()
  var formData_595085 = newJObject()
  add(formData_595085, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_595084, "Action", newJString(Action))
  add(query_595084, "Version", newJString(Version))
  result = call_595083.call(nil, query_595084, nil, formData_595085, nil)

var postDeleteOpenIDConnectProvider* = Call_PostDeleteOpenIDConnectProvider_595069(
    name: "postDeleteOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_PostDeleteOpenIDConnectProvider_595070, base: "/",
    url: url_PostDeleteOpenIDConnectProvider_595071,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOpenIDConnectProvider_595053 = ref object of OpenApiRestCall_593437
proc url_GetDeleteOpenIDConnectProvider_595055(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteOpenIDConnectProvider_595054(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_595056 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_595056 = validateParameter(valid_595056, JString, required = true,
                                 default = nil)
  if valid_595056 != nil:
    section.add "OpenIDConnectProviderArn", valid_595056
  var valid_595057 = query.getOrDefault("Action")
  valid_595057 = validateParameter(valid_595057, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_595057 != nil:
    section.add "Action", valid_595057
  var valid_595058 = query.getOrDefault("Version")
  valid_595058 = validateParameter(valid_595058, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595058 != nil:
    section.add "Version", valid_595058
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595059 = header.getOrDefault("X-Amz-Date")
  valid_595059 = validateParameter(valid_595059, JString, required = false,
                                 default = nil)
  if valid_595059 != nil:
    section.add "X-Amz-Date", valid_595059
  var valid_595060 = header.getOrDefault("X-Amz-Security-Token")
  valid_595060 = validateParameter(valid_595060, JString, required = false,
                                 default = nil)
  if valid_595060 != nil:
    section.add "X-Amz-Security-Token", valid_595060
  var valid_595061 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595061 = validateParameter(valid_595061, JString, required = false,
                                 default = nil)
  if valid_595061 != nil:
    section.add "X-Amz-Content-Sha256", valid_595061
  var valid_595062 = header.getOrDefault("X-Amz-Algorithm")
  valid_595062 = validateParameter(valid_595062, JString, required = false,
                                 default = nil)
  if valid_595062 != nil:
    section.add "X-Amz-Algorithm", valid_595062
  var valid_595063 = header.getOrDefault("X-Amz-Signature")
  valid_595063 = validateParameter(valid_595063, JString, required = false,
                                 default = nil)
  if valid_595063 != nil:
    section.add "X-Amz-Signature", valid_595063
  var valid_595064 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595064 = validateParameter(valid_595064, JString, required = false,
                                 default = nil)
  if valid_595064 != nil:
    section.add "X-Amz-SignedHeaders", valid_595064
  var valid_595065 = header.getOrDefault("X-Amz-Credential")
  valid_595065 = validateParameter(valid_595065, JString, required = false,
                                 default = nil)
  if valid_595065 != nil:
    section.add "X-Amz-Credential", valid_595065
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595066: Call_GetDeleteOpenIDConnectProvider_595053; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_595066.validator(path, query, header, formData, body)
  let scheme = call_595066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595066.url(scheme.get, call_595066.host, call_595066.base,
                         call_595066.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595066, url, valid)

proc call*(call_595067: Call_GetDeleteOpenIDConnectProvider_595053;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595068 = newJObject()
  add(query_595068, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_595068, "Action", newJString(Action))
  add(query_595068, "Version", newJString(Version))
  result = call_595067.call(nil, query_595068, nil, nil, nil)

var getDeleteOpenIDConnectProvider* = Call_GetDeleteOpenIDConnectProvider_595053(
    name: "getDeleteOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_GetDeleteOpenIDConnectProvider_595054, base: "/",
    url: url_GetDeleteOpenIDConnectProvider_595055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_595102 = ref object of OpenApiRestCall_593437
proc url_PostDeletePolicy_595104(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeletePolicy_595103(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595105 = query.getOrDefault("Action")
  valid_595105 = validateParameter(valid_595105, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_595105 != nil:
    section.add "Action", valid_595105
  var valid_595106 = query.getOrDefault("Version")
  valid_595106 = validateParameter(valid_595106, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595106 != nil:
    section.add "Version", valid_595106
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595107 = header.getOrDefault("X-Amz-Date")
  valid_595107 = validateParameter(valid_595107, JString, required = false,
                                 default = nil)
  if valid_595107 != nil:
    section.add "X-Amz-Date", valid_595107
  var valid_595108 = header.getOrDefault("X-Amz-Security-Token")
  valid_595108 = validateParameter(valid_595108, JString, required = false,
                                 default = nil)
  if valid_595108 != nil:
    section.add "X-Amz-Security-Token", valid_595108
  var valid_595109 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595109 = validateParameter(valid_595109, JString, required = false,
                                 default = nil)
  if valid_595109 != nil:
    section.add "X-Amz-Content-Sha256", valid_595109
  var valid_595110 = header.getOrDefault("X-Amz-Algorithm")
  valid_595110 = validateParameter(valid_595110, JString, required = false,
                                 default = nil)
  if valid_595110 != nil:
    section.add "X-Amz-Algorithm", valid_595110
  var valid_595111 = header.getOrDefault("X-Amz-Signature")
  valid_595111 = validateParameter(valid_595111, JString, required = false,
                                 default = nil)
  if valid_595111 != nil:
    section.add "X-Amz-Signature", valid_595111
  var valid_595112 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595112 = validateParameter(valid_595112, JString, required = false,
                                 default = nil)
  if valid_595112 != nil:
    section.add "X-Amz-SignedHeaders", valid_595112
  var valid_595113 = header.getOrDefault("X-Amz-Credential")
  valid_595113 = validateParameter(valid_595113, JString, required = false,
                                 default = nil)
  if valid_595113 != nil:
    section.add "X-Amz-Credential", valid_595113
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_595114 = formData.getOrDefault("PolicyArn")
  valid_595114 = validateParameter(valid_595114, JString, required = true,
                                 default = nil)
  if valid_595114 != nil:
    section.add "PolicyArn", valid_595114
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595115: Call_PostDeletePolicy_595102; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595115.validator(path, query, header, formData, body)
  let scheme = call_595115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595115.url(scheme.get, call_595115.host, call_595115.base,
                         call_595115.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595115, url, valid)

proc call*(call_595116: Call_PostDeletePolicy_595102; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595117 = newJObject()
  var formData_595118 = newJObject()
  add(formData_595118, "PolicyArn", newJString(PolicyArn))
  add(query_595117, "Action", newJString(Action))
  add(query_595117, "Version", newJString(Version))
  result = call_595116.call(nil, query_595117, nil, formData_595118, nil)

var postDeletePolicy* = Call_PostDeletePolicy_595102(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_595103,
    base: "/", url: url_PostDeletePolicy_595104,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_595086 = ref object of OpenApiRestCall_593437
proc url_GetDeletePolicy_595088(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeletePolicy_595087(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_595089 = query.getOrDefault("PolicyArn")
  valid_595089 = validateParameter(valid_595089, JString, required = true,
                                 default = nil)
  if valid_595089 != nil:
    section.add "PolicyArn", valid_595089
  var valid_595090 = query.getOrDefault("Action")
  valid_595090 = validateParameter(valid_595090, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_595090 != nil:
    section.add "Action", valid_595090
  var valid_595091 = query.getOrDefault("Version")
  valid_595091 = validateParameter(valid_595091, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595091 != nil:
    section.add "Version", valid_595091
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595092 = header.getOrDefault("X-Amz-Date")
  valid_595092 = validateParameter(valid_595092, JString, required = false,
                                 default = nil)
  if valid_595092 != nil:
    section.add "X-Amz-Date", valid_595092
  var valid_595093 = header.getOrDefault("X-Amz-Security-Token")
  valid_595093 = validateParameter(valid_595093, JString, required = false,
                                 default = nil)
  if valid_595093 != nil:
    section.add "X-Amz-Security-Token", valid_595093
  var valid_595094 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595094 = validateParameter(valid_595094, JString, required = false,
                                 default = nil)
  if valid_595094 != nil:
    section.add "X-Amz-Content-Sha256", valid_595094
  var valid_595095 = header.getOrDefault("X-Amz-Algorithm")
  valid_595095 = validateParameter(valid_595095, JString, required = false,
                                 default = nil)
  if valid_595095 != nil:
    section.add "X-Amz-Algorithm", valid_595095
  var valid_595096 = header.getOrDefault("X-Amz-Signature")
  valid_595096 = validateParameter(valid_595096, JString, required = false,
                                 default = nil)
  if valid_595096 != nil:
    section.add "X-Amz-Signature", valid_595096
  var valid_595097 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595097 = validateParameter(valid_595097, JString, required = false,
                                 default = nil)
  if valid_595097 != nil:
    section.add "X-Amz-SignedHeaders", valid_595097
  var valid_595098 = header.getOrDefault("X-Amz-Credential")
  valid_595098 = validateParameter(valid_595098, JString, required = false,
                                 default = nil)
  if valid_595098 != nil:
    section.add "X-Amz-Credential", valid_595098
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595099: Call_GetDeletePolicy_595086; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595099.validator(path, query, header, formData, body)
  let scheme = call_595099.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595099.url(scheme.get, call_595099.host, call_595099.base,
                         call_595099.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595099, url, valid)

proc call*(call_595100: Call_GetDeletePolicy_595086; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595101 = newJObject()
  add(query_595101, "PolicyArn", newJString(PolicyArn))
  add(query_595101, "Action", newJString(Action))
  add(query_595101, "Version", newJString(Version))
  result = call_595100.call(nil, query_595101, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_595086(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_595087,
    base: "/", url: url_GetDeletePolicy_595088, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicyVersion_595136 = ref object of OpenApiRestCall_593437
proc url_PostDeletePolicyVersion_595138(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeletePolicyVersion_595137(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595139 = query.getOrDefault("Action")
  valid_595139 = validateParameter(valid_595139, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_595139 != nil:
    section.add "Action", valid_595139
  var valid_595140 = query.getOrDefault("Version")
  valid_595140 = validateParameter(valid_595140, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595140 != nil:
    section.add "Version", valid_595140
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595141 = header.getOrDefault("X-Amz-Date")
  valid_595141 = validateParameter(valid_595141, JString, required = false,
                                 default = nil)
  if valid_595141 != nil:
    section.add "X-Amz-Date", valid_595141
  var valid_595142 = header.getOrDefault("X-Amz-Security-Token")
  valid_595142 = validateParameter(valid_595142, JString, required = false,
                                 default = nil)
  if valid_595142 != nil:
    section.add "X-Amz-Security-Token", valid_595142
  var valid_595143 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595143 = validateParameter(valid_595143, JString, required = false,
                                 default = nil)
  if valid_595143 != nil:
    section.add "X-Amz-Content-Sha256", valid_595143
  var valid_595144 = header.getOrDefault("X-Amz-Algorithm")
  valid_595144 = validateParameter(valid_595144, JString, required = false,
                                 default = nil)
  if valid_595144 != nil:
    section.add "X-Amz-Algorithm", valid_595144
  var valid_595145 = header.getOrDefault("X-Amz-Signature")
  valid_595145 = validateParameter(valid_595145, JString, required = false,
                                 default = nil)
  if valid_595145 != nil:
    section.add "X-Amz-Signature", valid_595145
  var valid_595146 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595146 = validateParameter(valid_595146, JString, required = false,
                                 default = nil)
  if valid_595146 != nil:
    section.add "X-Amz-SignedHeaders", valid_595146
  var valid_595147 = header.getOrDefault("X-Amz-Credential")
  valid_595147 = validateParameter(valid_595147, JString, required = false,
                                 default = nil)
  if valid_595147 != nil:
    section.add "X-Amz-Credential", valid_595147
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_595148 = formData.getOrDefault("PolicyArn")
  valid_595148 = validateParameter(valid_595148, JString, required = true,
                                 default = nil)
  if valid_595148 != nil:
    section.add "PolicyArn", valid_595148
  var valid_595149 = formData.getOrDefault("VersionId")
  valid_595149 = validateParameter(valid_595149, JString, required = true,
                                 default = nil)
  if valid_595149 != nil:
    section.add "VersionId", valid_595149
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595150: Call_PostDeletePolicyVersion_595136; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595150.validator(path, query, header, formData, body)
  let scheme = call_595150.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595150.url(scheme.get, call_595150.host, call_595150.base,
                         call_595150.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595150, url, valid)

proc call*(call_595151: Call_PostDeletePolicyVersion_595136; PolicyArn: string;
          VersionId: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  var query_595152 = newJObject()
  var formData_595153 = newJObject()
  add(formData_595153, "PolicyArn", newJString(PolicyArn))
  add(query_595152, "Action", newJString(Action))
  add(query_595152, "Version", newJString(Version))
  add(formData_595153, "VersionId", newJString(VersionId))
  result = call_595151.call(nil, query_595152, nil, formData_595153, nil)

var postDeletePolicyVersion* = Call_PostDeletePolicyVersion_595136(
    name: "postDeletePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_PostDeletePolicyVersion_595137, base: "/",
    url: url_PostDeletePolicyVersion_595138, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicyVersion_595119 = ref object of OpenApiRestCall_593437
proc url_GetDeletePolicyVersion_595121(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeletePolicyVersion_595120(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_595122 = query.getOrDefault("PolicyArn")
  valid_595122 = validateParameter(valid_595122, JString, required = true,
                                 default = nil)
  if valid_595122 != nil:
    section.add "PolicyArn", valid_595122
  var valid_595123 = query.getOrDefault("VersionId")
  valid_595123 = validateParameter(valid_595123, JString, required = true,
                                 default = nil)
  if valid_595123 != nil:
    section.add "VersionId", valid_595123
  var valid_595124 = query.getOrDefault("Action")
  valid_595124 = validateParameter(valid_595124, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_595124 != nil:
    section.add "Action", valid_595124
  var valid_595125 = query.getOrDefault("Version")
  valid_595125 = validateParameter(valid_595125, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595125 != nil:
    section.add "Version", valid_595125
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595126 = header.getOrDefault("X-Amz-Date")
  valid_595126 = validateParameter(valid_595126, JString, required = false,
                                 default = nil)
  if valid_595126 != nil:
    section.add "X-Amz-Date", valid_595126
  var valid_595127 = header.getOrDefault("X-Amz-Security-Token")
  valid_595127 = validateParameter(valid_595127, JString, required = false,
                                 default = nil)
  if valid_595127 != nil:
    section.add "X-Amz-Security-Token", valid_595127
  var valid_595128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595128 = validateParameter(valid_595128, JString, required = false,
                                 default = nil)
  if valid_595128 != nil:
    section.add "X-Amz-Content-Sha256", valid_595128
  var valid_595129 = header.getOrDefault("X-Amz-Algorithm")
  valid_595129 = validateParameter(valid_595129, JString, required = false,
                                 default = nil)
  if valid_595129 != nil:
    section.add "X-Amz-Algorithm", valid_595129
  var valid_595130 = header.getOrDefault("X-Amz-Signature")
  valid_595130 = validateParameter(valid_595130, JString, required = false,
                                 default = nil)
  if valid_595130 != nil:
    section.add "X-Amz-Signature", valid_595130
  var valid_595131 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595131 = validateParameter(valid_595131, JString, required = false,
                                 default = nil)
  if valid_595131 != nil:
    section.add "X-Amz-SignedHeaders", valid_595131
  var valid_595132 = header.getOrDefault("X-Amz-Credential")
  valid_595132 = validateParameter(valid_595132, JString, required = false,
                                 default = nil)
  if valid_595132 != nil:
    section.add "X-Amz-Credential", valid_595132
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595133: Call_GetDeletePolicyVersion_595119; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595133.validator(path, query, header, formData, body)
  let scheme = call_595133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595133.url(scheme.get, call_595133.host, call_595133.base,
                         call_595133.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595133, url, valid)

proc call*(call_595134: Call_GetDeletePolicyVersion_595119; PolicyArn: string;
          VersionId: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595135 = newJObject()
  add(query_595135, "PolicyArn", newJString(PolicyArn))
  add(query_595135, "VersionId", newJString(VersionId))
  add(query_595135, "Action", newJString(Action))
  add(query_595135, "Version", newJString(Version))
  result = call_595134.call(nil, query_595135, nil, nil, nil)

var getDeletePolicyVersion* = Call_GetDeletePolicyVersion_595119(
    name: "getDeletePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_GetDeletePolicyVersion_595120, base: "/",
    url: url_GetDeletePolicyVersion_595121, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRole_595170 = ref object of OpenApiRestCall_593437
proc url_PostDeleteRole_595172(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteRole_595171(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595173 = query.getOrDefault("Action")
  valid_595173 = validateParameter(valid_595173, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_595173 != nil:
    section.add "Action", valid_595173
  var valid_595174 = query.getOrDefault("Version")
  valid_595174 = validateParameter(valid_595174, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595174 != nil:
    section.add "Version", valid_595174
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595175 = header.getOrDefault("X-Amz-Date")
  valid_595175 = validateParameter(valid_595175, JString, required = false,
                                 default = nil)
  if valid_595175 != nil:
    section.add "X-Amz-Date", valid_595175
  var valid_595176 = header.getOrDefault("X-Amz-Security-Token")
  valid_595176 = validateParameter(valid_595176, JString, required = false,
                                 default = nil)
  if valid_595176 != nil:
    section.add "X-Amz-Security-Token", valid_595176
  var valid_595177 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595177 = validateParameter(valid_595177, JString, required = false,
                                 default = nil)
  if valid_595177 != nil:
    section.add "X-Amz-Content-Sha256", valid_595177
  var valid_595178 = header.getOrDefault("X-Amz-Algorithm")
  valid_595178 = validateParameter(valid_595178, JString, required = false,
                                 default = nil)
  if valid_595178 != nil:
    section.add "X-Amz-Algorithm", valid_595178
  var valid_595179 = header.getOrDefault("X-Amz-Signature")
  valid_595179 = validateParameter(valid_595179, JString, required = false,
                                 default = nil)
  if valid_595179 != nil:
    section.add "X-Amz-Signature", valid_595179
  var valid_595180 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595180 = validateParameter(valid_595180, JString, required = false,
                                 default = nil)
  if valid_595180 != nil:
    section.add "X-Amz-SignedHeaders", valid_595180
  var valid_595181 = header.getOrDefault("X-Amz-Credential")
  valid_595181 = validateParameter(valid_595181, JString, required = false,
                                 default = nil)
  if valid_595181 != nil:
    section.add "X-Amz-Credential", valid_595181
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_595182 = formData.getOrDefault("RoleName")
  valid_595182 = validateParameter(valid_595182, JString, required = true,
                                 default = nil)
  if valid_595182 != nil:
    section.add "RoleName", valid_595182
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595183: Call_PostDeleteRole_595170; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_595183.validator(path, query, header, formData, body)
  let scheme = call_595183.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595183.url(scheme.get, call_595183.host, call_595183.base,
                         call_595183.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595183, url, valid)

proc call*(call_595184: Call_PostDeleteRole_595170; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595185 = newJObject()
  var formData_595186 = newJObject()
  add(formData_595186, "RoleName", newJString(RoleName))
  add(query_595185, "Action", newJString(Action))
  add(query_595185, "Version", newJString(Version))
  result = call_595184.call(nil, query_595185, nil, formData_595186, nil)

var postDeleteRole* = Call_PostDeleteRole_595170(name: "postDeleteRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_PostDeleteRole_595171,
    base: "/", url: url_PostDeleteRole_595172, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRole_595154 = ref object of OpenApiRestCall_593437
proc url_GetDeleteRole_595156(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteRole_595155(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595157 = query.getOrDefault("Action")
  valid_595157 = validateParameter(valid_595157, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_595157 != nil:
    section.add "Action", valid_595157
  var valid_595158 = query.getOrDefault("RoleName")
  valid_595158 = validateParameter(valid_595158, JString, required = true,
                                 default = nil)
  if valid_595158 != nil:
    section.add "RoleName", valid_595158
  var valid_595159 = query.getOrDefault("Version")
  valid_595159 = validateParameter(valid_595159, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595159 != nil:
    section.add "Version", valid_595159
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595160 = header.getOrDefault("X-Amz-Date")
  valid_595160 = validateParameter(valid_595160, JString, required = false,
                                 default = nil)
  if valid_595160 != nil:
    section.add "X-Amz-Date", valid_595160
  var valid_595161 = header.getOrDefault("X-Amz-Security-Token")
  valid_595161 = validateParameter(valid_595161, JString, required = false,
                                 default = nil)
  if valid_595161 != nil:
    section.add "X-Amz-Security-Token", valid_595161
  var valid_595162 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595162 = validateParameter(valid_595162, JString, required = false,
                                 default = nil)
  if valid_595162 != nil:
    section.add "X-Amz-Content-Sha256", valid_595162
  var valid_595163 = header.getOrDefault("X-Amz-Algorithm")
  valid_595163 = validateParameter(valid_595163, JString, required = false,
                                 default = nil)
  if valid_595163 != nil:
    section.add "X-Amz-Algorithm", valid_595163
  var valid_595164 = header.getOrDefault("X-Amz-Signature")
  valid_595164 = validateParameter(valid_595164, JString, required = false,
                                 default = nil)
  if valid_595164 != nil:
    section.add "X-Amz-Signature", valid_595164
  var valid_595165 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595165 = validateParameter(valid_595165, JString, required = false,
                                 default = nil)
  if valid_595165 != nil:
    section.add "X-Amz-SignedHeaders", valid_595165
  var valid_595166 = header.getOrDefault("X-Amz-Credential")
  valid_595166 = validateParameter(valid_595166, JString, required = false,
                                 default = nil)
  if valid_595166 != nil:
    section.add "X-Amz-Credential", valid_595166
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595167: Call_GetDeleteRole_595154; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_595167.validator(path, query, header, formData, body)
  let scheme = call_595167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595167.url(scheme.get, call_595167.host, call_595167.base,
                         call_595167.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595167, url, valid)

proc call*(call_595168: Call_GetDeleteRole_595154; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_595169 = newJObject()
  add(query_595169, "Action", newJString(Action))
  add(query_595169, "RoleName", newJString(RoleName))
  add(query_595169, "Version", newJString(Version))
  result = call_595168.call(nil, query_595169, nil, nil, nil)

var getDeleteRole* = Call_GetDeleteRole_595154(name: "getDeleteRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_GetDeleteRole_595155,
    base: "/", url: url_GetDeleteRole_595156, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePermissionsBoundary_595203 = ref object of OpenApiRestCall_593437
proc url_PostDeleteRolePermissionsBoundary_595205(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteRolePermissionsBoundary_595204(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595206 = query.getOrDefault("Action")
  valid_595206 = validateParameter(valid_595206, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_595206 != nil:
    section.add "Action", valid_595206
  var valid_595207 = query.getOrDefault("Version")
  valid_595207 = validateParameter(valid_595207, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595207 != nil:
    section.add "Version", valid_595207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595208 = header.getOrDefault("X-Amz-Date")
  valid_595208 = validateParameter(valid_595208, JString, required = false,
                                 default = nil)
  if valid_595208 != nil:
    section.add "X-Amz-Date", valid_595208
  var valid_595209 = header.getOrDefault("X-Amz-Security-Token")
  valid_595209 = validateParameter(valid_595209, JString, required = false,
                                 default = nil)
  if valid_595209 != nil:
    section.add "X-Amz-Security-Token", valid_595209
  var valid_595210 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595210 = validateParameter(valid_595210, JString, required = false,
                                 default = nil)
  if valid_595210 != nil:
    section.add "X-Amz-Content-Sha256", valid_595210
  var valid_595211 = header.getOrDefault("X-Amz-Algorithm")
  valid_595211 = validateParameter(valid_595211, JString, required = false,
                                 default = nil)
  if valid_595211 != nil:
    section.add "X-Amz-Algorithm", valid_595211
  var valid_595212 = header.getOrDefault("X-Amz-Signature")
  valid_595212 = validateParameter(valid_595212, JString, required = false,
                                 default = nil)
  if valid_595212 != nil:
    section.add "X-Amz-Signature", valid_595212
  var valid_595213 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595213 = validateParameter(valid_595213, JString, required = false,
                                 default = nil)
  if valid_595213 != nil:
    section.add "X-Amz-SignedHeaders", valid_595213
  var valid_595214 = header.getOrDefault("X-Amz-Credential")
  valid_595214 = validateParameter(valid_595214, JString, required = false,
                                 default = nil)
  if valid_595214 != nil:
    section.add "X-Amz-Credential", valid_595214
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_595215 = formData.getOrDefault("RoleName")
  valid_595215 = validateParameter(valid_595215, JString, required = true,
                                 default = nil)
  if valid_595215 != nil:
    section.add "RoleName", valid_595215
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595216: Call_PostDeleteRolePermissionsBoundary_595203;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_595216.validator(path, query, header, formData, body)
  let scheme = call_595216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595216.url(scheme.get, call_595216.host, call_595216.base,
                         call_595216.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595216, url, valid)

proc call*(call_595217: Call_PostDeleteRolePermissionsBoundary_595203;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595218 = newJObject()
  var formData_595219 = newJObject()
  add(formData_595219, "RoleName", newJString(RoleName))
  add(query_595218, "Action", newJString(Action))
  add(query_595218, "Version", newJString(Version))
  result = call_595217.call(nil, query_595218, nil, formData_595219, nil)

var postDeleteRolePermissionsBoundary* = Call_PostDeleteRolePermissionsBoundary_595203(
    name: "postDeleteRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_PostDeleteRolePermissionsBoundary_595204, base: "/",
    url: url_PostDeleteRolePermissionsBoundary_595205,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePermissionsBoundary_595187 = ref object of OpenApiRestCall_593437
proc url_GetDeleteRolePermissionsBoundary_595189(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteRolePermissionsBoundary_595188(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595190 = query.getOrDefault("Action")
  valid_595190 = validateParameter(valid_595190, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_595190 != nil:
    section.add "Action", valid_595190
  var valid_595191 = query.getOrDefault("RoleName")
  valid_595191 = validateParameter(valid_595191, JString, required = true,
                                 default = nil)
  if valid_595191 != nil:
    section.add "RoleName", valid_595191
  var valid_595192 = query.getOrDefault("Version")
  valid_595192 = validateParameter(valid_595192, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595192 != nil:
    section.add "Version", valid_595192
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595193 = header.getOrDefault("X-Amz-Date")
  valid_595193 = validateParameter(valid_595193, JString, required = false,
                                 default = nil)
  if valid_595193 != nil:
    section.add "X-Amz-Date", valid_595193
  var valid_595194 = header.getOrDefault("X-Amz-Security-Token")
  valid_595194 = validateParameter(valid_595194, JString, required = false,
                                 default = nil)
  if valid_595194 != nil:
    section.add "X-Amz-Security-Token", valid_595194
  var valid_595195 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595195 = validateParameter(valid_595195, JString, required = false,
                                 default = nil)
  if valid_595195 != nil:
    section.add "X-Amz-Content-Sha256", valid_595195
  var valid_595196 = header.getOrDefault("X-Amz-Algorithm")
  valid_595196 = validateParameter(valid_595196, JString, required = false,
                                 default = nil)
  if valid_595196 != nil:
    section.add "X-Amz-Algorithm", valid_595196
  var valid_595197 = header.getOrDefault("X-Amz-Signature")
  valid_595197 = validateParameter(valid_595197, JString, required = false,
                                 default = nil)
  if valid_595197 != nil:
    section.add "X-Amz-Signature", valid_595197
  var valid_595198 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595198 = validateParameter(valid_595198, JString, required = false,
                                 default = nil)
  if valid_595198 != nil:
    section.add "X-Amz-SignedHeaders", valid_595198
  var valid_595199 = header.getOrDefault("X-Amz-Credential")
  valid_595199 = validateParameter(valid_595199, JString, required = false,
                                 default = nil)
  if valid_595199 != nil:
    section.add "X-Amz-Credential", valid_595199
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595200: Call_GetDeleteRolePermissionsBoundary_595187;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_595200.validator(path, query, header, formData, body)
  let scheme = call_595200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595200.url(scheme.get, call_595200.host, call_595200.base,
                         call_595200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595200, url, valid)

proc call*(call_595201: Call_GetDeleteRolePermissionsBoundary_595187;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Version: string (required)
  var query_595202 = newJObject()
  add(query_595202, "Action", newJString(Action))
  add(query_595202, "RoleName", newJString(RoleName))
  add(query_595202, "Version", newJString(Version))
  result = call_595201.call(nil, query_595202, nil, nil, nil)

var getDeleteRolePermissionsBoundary* = Call_GetDeleteRolePermissionsBoundary_595187(
    name: "getDeleteRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_GetDeleteRolePermissionsBoundary_595188, base: "/",
    url: url_GetDeleteRolePermissionsBoundary_595189,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePolicy_595237 = ref object of OpenApiRestCall_593437
proc url_PostDeleteRolePolicy_595239(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteRolePolicy_595238(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595240 = query.getOrDefault("Action")
  valid_595240 = validateParameter(valid_595240, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_595240 != nil:
    section.add "Action", valid_595240
  var valid_595241 = query.getOrDefault("Version")
  valid_595241 = validateParameter(valid_595241, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595241 != nil:
    section.add "Version", valid_595241
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595242 = header.getOrDefault("X-Amz-Date")
  valid_595242 = validateParameter(valid_595242, JString, required = false,
                                 default = nil)
  if valid_595242 != nil:
    section.add "X-Amz-Date", valid_595242
  var valid_595243 = header.getOrDefault("X-Amz-Security-Token")
  valid_595243 = validateParameter(valid_595243, JString, required = false,
                                 default = nil)
  if valid_595243 != nil:
    section.add "X-Amz-Security-Token", valid_595243
  var valid_595244 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595244 = validateParameter(valid_595244, JString, required = false,
                                 default = nil)
  if valid_595244 != nil:
    section.add "X-Amz-Content-Sha256", valid_595244
  var valid_595245 = header.getOrDefault("X-Amz-Algorithm")
  valid_595245 = validateParameter(valid_595245, JString, required = false,
                                 default = nil)
  if valid_595245 != nil:
    section.add "X-Amz-Algorithm", valid_595245
  var valid_595246 = header.getOrDefault("X-Amz-Signature")
  valid_595246 = validateParameter(valid_595246, JString, required = false,
                                 default = nil)
  if valid_595246 != nil:
    section.add "X-Amz-Signature", valid_595246
  var valid_595247 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595247 = validateParameter(valid_595247, JString, required = false,
                                 default = nil)
  if valid_595247 != nil:
    section.add "X-Amz-SignedHeaders", valid_595247
  var valid_595248 = header.getOrDefault("X-Amz-Credential")
  valid_595248 = validateParameter(valid_595248, JString, required = false,
                                 default = nil)
  if valid_595248 != nil:
    section.add "X-Amz-Credential", valid_595248
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_595249 = formData.getOrDefault("PolicyName")
  valid_595249 = validateParameter(valid_595249, JString, required = true,
                                 default = nil)
  if valid_595249 != nil:
    section.add "PolicyName", valid_595249
  var valid_595250 = formData.getOrDefault("RoleName")
  valid_595250 = validateParameter(valid_595250, JString, required = true,
                                 default = nil)
  if valid_595250 != nil:
    section.add "RoleName", valid_595250
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595251: Call_PostDeleteRolePolicy_595237; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595251.validator(path, query, header, formData, body)
  let scheme = call_595251.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595251.url(scheme.get, call_595251.host, call_595251.base,
                         call_595251.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595251, url, valid)

proc call*(call_595252: Call_PostDeleteRolePolicy_595237; PolicyName: string;
          RoleName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595253 = newJObject()
  var formData_595254 = newJObject()
  add(formData_595254, "PolicyName", newJString(PolicyName))
  add(formData_595254, "RoleName", newJString(RoleName))
  add(query_595253, "Action", newJString(Action))
  add(query_595253, "Version", newJString(Version))
  result = call_595252.call(nil, query_595253, nil, formData_595254, nil)

var postDeleteRolePolicy* = Call_PostDeleteRolePolicy_595237(
    name: "postDeleteRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_PostDeleteRolePolicy_595238, base: "/",
    url: url_PostDeleteRolePolicy_595239, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePolicy_595220 = ref object of OpenApiRestCall_593437
proc url_GetDeleteRolePolicy_595222(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteRolePolicy_595221(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595223 = query.getOrDefault("Action")
  valid_595223 = validateParameter(valid_595223, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_595223 != nil:
    section.add "Action", valid_595223
  var valid_595224 = query.getOrDefault("RoleName")
  valid_595224 = validateParameter(valid_595224, JString, required = true,
                                 default = nil)
  if valid_595224 != nil:
    section.add "RoleName", valid_595224
  var valid_595225 = query.getOrDefault("Version")
  valid_595225 = validateParameter(valid_595225, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595225 != nil:
    section.add "Version", valid_595225
  var valid_595226 = query.getOrDefault("PolicyName")
  valid_595226 = validateParameter(valid_595226, JString, required = true,
                                 default = nil)
  if valid_595226 != nil:
    section.add "PolicyName", valid_595226
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595227 = header.getOrDefault("X-Amz-Date")
  valid_595227 = validateParameter(valid_595227, JString, required = false,
                                 default = nil)
  if valid_595227 != nil:
    section.add "X-Amz-Date", valid_595227
  var valid_595228 = header.getOrDefault("X-Amz-Security-Token")
  valid_595228 = validateParameter(valid_595228, JString, required = false,
                                 default = nil)
  if valid_595228 != nil:
    section.add "X-Amz-Security-Token", valid_595228
  var valid_595229 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595229 = validateParameter(valid_595229, JString, required = false,
                                 default = nil)
  if valid_595229 != nil:
    section.add "X-Amz-Content-Sha256", valid_595229
  var valid_595230 = header.getOrDefault("X-Amz-Algorithm")
  valid_595230 = validateParameter(valid_595230, JString, required = false,
                                 default = nil)
  if valid_595230 != nil:
    section.add "X-Amz-Algorithm", valid_595230
  var valid_595231 = header.getOrDefault("X-Amz-Signature")
  valid_595231 = validateParameter(valid_595231, JString, required = false,
                                 default = nil)
  if valid_595231 != nil:
    section.add "X-Amz-Signature", valid_595231
  var valid_595232 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595232 = validateParameter(valid_595232, JString, required = false,
                                 default = nil)
  if valid_595232 != nil:
    section.add "X-Amz-SignedHeaders", valid_595232
  var valid_595233 = header.getOrDefault("X-Amz-Credential")
  valid_595233 = validateParameter(valid_595233, JString, required = false,
                                 default = nil)
  if valid_595233 != nil:
    section.add "X-Amz-Credential", valid_595233
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595234: Call_GetDeleteRolePolicy_595220; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595234.validator(path, query, header, formData, body)
  let scheme = call_595234.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595234.url(scheme.get, call_595234.host, call_595234.base,
                         call_595234.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595234, url, valid)

proc call*(call_595235: Call_GetDeleteRolePolicy_595220; RoleName: string;
          PolicyName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_595236 = newJObject()
  add(query_595236, "Action", newJString(Action))
  add(query_595236, "RoleName", newJString(RoleName))
  add(query_595236, "Version", newJString(Version))
  add(query_595236, "PolicyName", newJString(PolicyName))
  result = call_595235.call(nil, query_595236, nil, nil, nil)

var getDeleteRolePolicy* = Call_GetDeleteRolePolicy_595220(
    name: "getDeleteRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_GetDeleteRolePolicy_595221, base: "/",
    url: url_GetDeleteRolePolicy_595222, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSAMLProvider_595271 = ref object of OpenApiRestCall_593437
proc url_PostDeleteSAMLProvider_595273(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteSAMLProvider_595272(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595274 = query.getOrDefault("Action")
  valid_595274 = validateParameter(valid_595274, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_595274 != nil:
    section.add "Action", valid_595274
  var valid_595275 = query.getOrDefault("Version")
  valid_595275 = validateParameter(valid_595275, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595275 != nil:
    section.add "Version", valid_595275
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595276 = header.getOrDefault("X-Amz-Date")
  valid_595276 = validateParameter(valid_595276, JString, required = false,
                                 default = nil)
  if valid_595276 != nil:
    section.add "X-Amz-Date", valid_595276
  var valid_595277 = header.getOrDefault("X-Amz-Security-Token")
  valid_595277 = validateParameter(valid_595277, JString, required = false,
                                 default = nil)
  if valid_595277 != nil:
    section.add "X-Amz-Security-Token", valid_595277
  var valid_595278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595278 = validateParameter(valid_595278, JString, required = false,
                                 default = nil)
  if valid_595278 != nil:
    section.add "X-Amz-Content-Sha256", valid_595278
  var valid_595279 = header.getOrDefault("X-Amz-Algorithm")
  valid_595279 = validateParameter(valid_595279, JString, required = false,
                                 default = nil)
  if valid_595279 != nil:
    section.add "X-Amz-Algorithm", valid_595279
  var valid_595280 = header.getOrDefault("X-Amz-Signature")
  valid_595280 = validateParameter(valid_595280, JString, required = false,
                                 default = nil)
  if valid_595280 != nil:
    section.add "X-Amz-Signature", valid_595280
  var valid_595281 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595281 = validateParameter(valid_595281, JString, required = false,
                                 default = nil)
  if valid_595281 != nil:
    section.add "X-Amz-SignedHeaders", valid_595281
  var valid_595282 = header.getOrDefault("X-Amz-Credential")
  valid_595282 = validateParameter(valid_595282, JString, required = false,
                                 default = nil)
  if valid_595282 != nil:
    section.add "X-Amz-Credential", valid_595282
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_595283 = formData.getOrDefault("SAMLProviderArn")
  valid_595283 = validateParameter(valid_595283, JString, required = true,
                                 default = nil)
  if valid_595283 != nil:
    section.add "SAMLProviderArn", valid_595283
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595284: Call_PostDeleteSAMLProvider_595271; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_595284.validator(path, query, header, formData, body)
  let scheme = call_595284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595284.url(scheme.get, call_595284.host, call_595284.base,
                         call_595284.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595284, url, valid)

proc call*(call_595285: Call_PostDeleteSAMLProvider_595271;
          SAMLProviderArn: string; Action: string = "DeleteSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595286 = newJObject()
  var formData_595287 = newJObject()
  add(formData_595287, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_595286, "Action", newJString(Action))
  add(query_595286, "Version", newJString(Version))
  result = call_595285.call(nil, query_595286, nil, formData_595287, nil)

var postDeleteSAMLProvider* = Call_PostDeleteSAMLProvider_595271(
    name: "postDeleteSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_PostDeleteSAMLProvider_595272, base: "/",
    url: url_PostDeleteSAMLProvider_595273, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSAMLProvider_595255 = ref object of OpenApiRestCall_593437
proc url_GetDeleteSAMLProvider_595257(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteSAMLProvider_595256(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595258 = query.getOrDefault("Action")
  valid_595258 = validateParameter(valid_595258, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_595258 != nil:
    section.add "Action", valid_595258
  var valid_595259 = query.getOrDefault("SAMLProviderArn")
  valid_595259 = validateParameter(valid_595259, JString, required = true,
                                 default = nil)
  if valid_595259 != nil:
    section.add "SAMLProviderArn", valid_595259
  var valid_595260 = query.getOrDefault("Version")
  valid_595260 = validateParameter(valid_595260, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595260 != nil:
    section.add "Version", valid_595260
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595261 = header.getOrDefault("X-Amz-Date")
  valid_595261 = validateParameter(valid_595261, JString, required = false,
                                 default = nil)
  if valid_595261 != nil:
    section.add "X-Amz-Date", valid_595261
  var valid_595262 = header.getOrDefault("X-Amz-Security-Token")
  valid_595262 = validateParameter(valid_595262, JString, required = false,
                                 default = nil)
  if valid_595262 != nil:
    section.add "X-Amz-Security-Token", valid_595262
  var valid_595263 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595263 = validateParameter(valid_595263, JString, required = false,
                                 default = nil)
  if valid_595263 != nil:
    section.add "X-Amz-Content-Sha256", valid_595263
  var valid_595264 = header.getOrDefault("X-Amz-Algorithm")
  valid_595264 = validateParameter(valid_595264, JString, required = false,
                                 default = nil)
  if valid_595264 != nil:
    section.add "X-Amz-Algorithm", valid_595264
  var valid_595265 = header.getOrDefault("X-Amz-Signature")
  valid_595265 = validateParameter(valid_595265, JString, required = false,
                                 default = nil)
  if valid_595265 != nil:
    section.add "X-Amz-Signature", valid_595265
  var valid_595266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595266 = validateParameter(valid_595266, JString, required = false,
                                 default = nil)
  if valid_595266 != nil:
    section.add "X-Amz-SignedHeaders", valid_595266
  var valid_595267 = header.getOrDefault("X-Amz-Credential")
  valid_595267 = validateParameter(valid_595267, JString, required = false,
                                 default = nil)
  if valid_595267 != nil:
    section.add "X-Amz-Credential", valid_595267
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595268: Call_GetDeleteSAMLProvider_595255; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_595268.validator(path, query, header, formData, body)
  let scheme = call_595268.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595268.url(scheme.get, call_595268.host, call_595268.base,
                         call_595268.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595268, url, valid)

proc call*(call_595269: Call_GetDeleteSAMLProvider_595255; SAMLProviderArn: string;
          Action: string = "DeleteSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_595270 = newJObject()
  add(query_595270, "Action", newJString(Action))
  add(query_595270, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_595270, "Version", newJString(Version))
  result = call_595269.call(nil, query_595270, nil, nil, nil)

var getDeleteSAMLProvider* = Call_GetDeleteSAMLProvider_595255(
    name: "getDeleteSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_GetDeleteSAMLProvider_595256, base: "/",
    url: url_GetDeleteSAMLProvider_595257, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSSHPublicKey_595305 = ref object of OpenApiRestCall_593437
proc url_PostDeleteSSHPublicKey_595307(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteSSHPublicKey_595306(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595308 = query.getOrDefault("Action")
  valid_595308 = validateParameter(valid_595308, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_595308 != nil:
    section.add "Action", valid_595308
  var valid_595309 = query.getOrDefault("Version")
  valid_595309 = validateParameter(valid_595309, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595309 != nil:
    section.add "Version", valid_595309
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595310 = header.getOrDefault("X-Amz-Date")
  valid_595310 = validateParameter(valid_595310, JString, required = false,
                                 default = nil)
  if valid_595310 != nil:
    section.add "X-Amz-Date", valid_595310
  var valid_595311 = header.getOrDefault("X-Amz-Security-Token")
  valid_595311 = validateParameter(valid_595311, JString, required = false,
                                 default = nil)
  if valid_595311 != nil:
    section.add "X-Amz-Security-Token", valid_595311
  var valid_595312 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595312 = validateParameter(valid_595312, JString, required = false,
                                 default = nil)
  if valid_595312 != nil:
    section.add "X-Amz-Content-Sha256", valid_595312
  var valid_595313 = header.getOrDefault("X-Amz-Algorithm")
  valid_595313 = validateParameter(valid_595313, JString, required = false,
                                 default = nil)
  if valid_595313 != nil:
    section.add "X-Amz-Algorithm", valid_595313
  var valid_595314 = header.getOrDefault("X-Amz-Signature")
  valid_595314 = validateParameter(valid_595314, JString, required = false,
                                 default = nil)
  if valid_595314 != nil:
    section.add "X-Amz-Signature", valid_595314
  var valid_595315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595315 = validateParameter(valid_595315, JString, required = false,
                                 default = nil)
  if valid_595315 != nil:
    section.add "X-Amz-SignedHeaders", valid_595315
  var valid_595316 = header.getOrDefault("X-Amz-Credential")
  valid_595316 = validateParameter(valid_595316, JString, required = false,
                                 default = nil)
  if valid_595316 != nil:
    section.add "X-Amz-Credential", valid_595316
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_595317 = formData.getOrDefault("UserName")
  valid_595317 = validateParameter(valid_595317, JString, required = true,
                                 default = nil)
  if valid_595317 != nil:
    section.add "UserName", valid_595317
  var valid_595318 = formData.getOrDefault("SSHPublicKeyId")
  valid_595318 = validateParameter(valid_595318, JString, required = true,
                                 default = nil)
  if valid_595318 != nil:
    section.add "SSHPublicKeyId", valid_595318
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595319: Call_PostDeleteSSHPublicKey_595305; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_595319.validator(path, query, header, formData, body)
  let scheme = call_595319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595319.url(scheme.get, call_595319.host, call_595319.base,
                         call_595319.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595319, url, valid)

proc call*(call_595320: Call_PostDeleteSSHPublicKey_595305; UserName: string;
          SSHPublicKeyId: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595321 = newJObject()
  var formData_595322 = newJObject()
  add(formData_595322, "UserName", newJString(UserName))
  add(formData_595322, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_595321, "Action", newJString(Action))
  add(query_595321, "Version", newJString(Version))
  result = call_595320.call(nil, query_595321, nil, formData_595322, nil)

var postDeleteSSHPublicKey* = Call_PostDeleteSSHPublicKey_595305(
    name: "postDeleteSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_PostDeleteSSHPublicKey_595306, base: "/",
    url: url_PostDeleteSSHPublicKey_595307, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSSHPublicKey_595288 = ref object of OpenApiRestCall_593437
proc url_GetDeleteSSHPublicKey_595290(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteSSHPublicKey_595289(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_595291 = query.getOrDefault("SSHPublicKeyId")
  valid_595291 = validateParameter(valid_595291, JString, required = true,
                                 default = nil)
  if valid_595291 != nil:
    section.add "SSHPublicKeyId", valid_595291
  var valid_595292 = query.getOrDefault("UserName")
  valid_595292 = validateParameter(valid_595292, JString, required = true,
                                 default = nil)
  if valid_595292 != nil:
    section.add "UserName", valid_595292
  var valid_595293 = query.getOrDefault("Action")
  valid_595293 = validateParameter(valid_595293, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_595293 != nil:
    section.add "Action", valid_595293
  var valid_595294 = query.getOrDefault("Version")
  valid_595294 = validateParameter(valid_595294, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595294 != nil:
    section.add "Version", valid_595294
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595295 = header.getOrDefault("X-Amz-Date")
  valid_595295 = validateParameter(valid_595295, JString, required = false,
                                 default = nil)
  if valid_595295 != nil:
    section.add "X-Amz-Date", valid_595295
  var valid_595296 = header.getOrDefault("X-Amz-Security-Token")
  valid_595296 = validateParameter(valid_595296, JString, required = false,
                                 default = nil)
  if valid_595296 != nil:
    section.add "X-Amz-Security-Token", valid_595296
  var valid_595297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595297 = validateParameter(valid_595297, JString, required = false,
                                 default = nil)
  if valid_595297 != nil:
    section.add "X-Amz-Content-Sha256", valid_595297
  var valid_595298 = header.getOrDefault("X-Amz-Algorithm")
  valid_595298 = validateParameter(valid_595298, JString, required = false,
                                 default = nil)
  if valid_595298 != nil:
    section.add "X-Amz-Algorithm", valid_595298
  var valid_595299 = header.getOrDefault("X-Amz-Signature")
  valid_595299 = validateParameter(valid_595299, JString, required = false,
                                 default = nil)
  if valid_595299 != nil:
    section.add "X-Amz-Signature", valid_595299
  var valid_595300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595300 = validateParameter(valid_595300, JString, required = false,
                                 default = nil)
  if valid_595300 != nil:
    section.add "X-Amz-SignedHeaders", valid_595300
  var valid_595301 = header.getOrDefault("X-Amz-Credential")
  valid_595301 = validateParameter(valid_595301, JString, required = false,
                                 default = nil)
  if valid_595301 != nil:
    section.add "X-Amz-Credential", valid_595301
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595302: Call_GetDeleteSSHPublicKey_595288; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_595302.validator(path, query, header, formData, body)
  let scheme = call_595302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595302.url(scheme.get, call_595302.host, call_595302.base,
                         call_595302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595302, url, valid)

proc call*(call_595303: Call_GetDeleteSSHPublicKey_595288; SSHPublicKeyId: string;
          UserName: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595304 = newJObject()
  add(query_595304, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_595304, "UserName", newJString(UserName))
  add(query_595304, "Action", newJString(Action))
  add(query_595304, "Version", newJString(Version))
  result = call_595303.call(nil, query_595304, nil, nil, nil)

var getDeleteSSHPublicKey* = Call_GetDeleteSSHPublicKey_595288(
    name: "getDeleteSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_GetDeleteSSHPublicKey_595289, base: "/",
    url: url_GetDeleteSSHPublicKey_595290, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServerCertificate_595339 = ref object of OpenApiRestCall_593437
proc url_PostDeleteServerCertificate_595341(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteServerCertificate_595340(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595342 = query.getOrDefault("Action")
  valid_595342 = validateParameter(valid_595342, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_595342 != nil:
    section.add "Action", valid_595342
  var valid_595343 = query.getOrDefault("Version")
  valid_595343 = validateParameter(valid_595343, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595343 != nil:
    section.add "Version", valid_595343
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595344 = header.getOrDefault("X-Amz-Date")
  valid_595344 = validateParameter(valid_595344, JString, required = false,
                                 default = nil)
  if valid_595344 != nil:
    section.add "X-Amz-Date", valid_595344
  var valid_595345 = header.getOrDefault("X-Amz-Security-Token")
  valid_595345 = validateParameter(valid_595345, JString, required = false,
                                 default = nil)
  if valid_595345 != nil:
    section.add "X-Amz-Security-Token", valid_595345
  var valid_595346 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595346 = validateParameter(valid_595346, JString, required = false,
                                 default = nil)
  if valid_595346 != nil:
    section.add "X-Amz-Content-Sha256", valid_595346
  var valid_595347 = header.getOrDefault("X-Amz-Algorithm")
  valid_595347 = validateParameter(valid_595347, JString, required = false,
                                 default = nil)
  if valid_595347 != nil:
    section.add "X-Amz-Algorithm", valid_595347
  var valid_595348 = header.getOrDefault("X-Amz-Signature")
  valid_595348 = validateParameter(valid_595348, JString, required = false,
                                 default = nil)
  if valid_595348 != nil:
    section.add "X-Amz-Signature", valid_595348
  var valid_595349 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595349 = validateParameter(valid_595349, JString, required = false,
                                 default = nil)
  if valid_595349 != nil:
    section.add "X-Amz-SignedHeaders", valid_595349
  var valid_595350 = header.getOrDefault("X-Amz-Credential")
  valid_595350 = validateParameter(valid_595350, JString, required = false,
                                 default = nil)
  if valid_595350 != nil:
    section.add "X-Amz-Credential", valid_595350
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_595351 = formData.getOrDefault("ServerCertificateName")
  valid_595351 = validateParameter(valid_595351, JString, required = true,
                                 default = nil)
  if valid_595351 != nil:
    section.add "ServerCertificateName", valid_595351
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595352: Call_PostDeleteServerCertificate_595339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_595352.validator(path, query, header, formData, body)
  let scheme = call_595352.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595352.url(scheme.get, call_595352.host, call_595352.base,
                         call_595352.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595352, url, valid)

proc call*(call_595353: Call_PostDeleteServerCertificate_595339;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595354 = newJObject()
  var formData_595355 = newJObject()
  add(formData_595355, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_595354, "Action", newJString(Action))
  add(query_595354, "Version", newJString(Version))
  result = call_595353.call(nil, query_595354, nil, formData_595355, nil)

var postDeleteServerCertificate* = Call_PostDeleteServerCertificate_595339(
    name: "postDeleteServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_PostDeleteServerCertificate_595340, base: "/",
    url: url_PostDeleteServerCertificate_595341,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServerCertificate_595323 = ref object of OpenApiRestCall_593437
proc url_GetDeleteServerCertificate_595325(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteServerCertificate_595324(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_595326 = query.getOrDefault("ServerCertificateName")
  valid_595326 = validateParameter(valid_595326, JString, required = true,
                                 default = nil)
  if valid_595326 != nil:
    section.add "ServerCertificateName", valid_595326
  var valid_595327 = query.getOrDefault("Action")
  valid_595327 = validateParameter(valid_595327, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_595327 != nil:
    section.add "Action", valid_595327
  var valid_595328 = query.getOrDefault("Version")
  valid_595328 = validateParameter(valid_595328, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595328 != nil:
    section.add "Version", valid_595328
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595329 = header.getOrDefault("X-Amz-Date")
  valid_595329 = validateParameter(valid_595329, JString, required = false,
                                 default = nil)
  if valid_595329 != nil:
    section.add "X-Amz-Date", valid_595329
  var valid_595330 = header.getOrDefault("X-Amz-Security-Token")
  valid_595330 = validateParameter(valid_595330, JString, required = false,
                                 default = nil)
  if valid_595330 != nil:
    section.add "X-Amz-Security-Token", valid_595330
  var valid_595331 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595331 = validateParameter(valid_595331, JString, required = false,
                                 default = nil)
  if valid_595331 != nil:
    section.add "X-Amz-Content-Sha256", valid_595331
  var valid_595332 = header.getOrDefault("X-Amz-Algorithm")
  valid_595332 = validateParameter(valid_595332, JString, required = false,
                                 default = nil)
  if valid_595332 != nil:
    section.add "X-Amz-Algorithm", valid_595332
  var valid_595333 = header.getOrDefault("X-Amz-Signature")
  valid_595333 = validateParameter(valid_595333, JString, required = false,
                                 default = nil)
  if valid_595333 != nil:
    section.add "X-Amz-Signature", valid_595333
  var valid_595334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595334 = validateParameter(valid_595334, JString, required = false,
                                 default = nil)
  if valid_595334 != nil:
    section.add "X-Amz-SignedHeaders", valid_595334
  var valid_595335 = header.getOrDefault("X-Amz-Credential")
  valid_595335 = validateParameter(valid_595335, JString, required = false,
                                 default = nil)
  if valid_595335 != nil:
    section.add "X-Amz-Credential", valid_595335
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595336: Call_GetDeleteServerCertificate_595323; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_595336.validator(path, query, header, formData, body)
  let scheme = call_595336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595336.url(scheme.get, call_595336.host, call_595336.base,
                         call_595336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595336, url, valid)

proc call*(call_595337: Call_GetDeleteServerCertificate_595323;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595338 = newJObject()
  add(query_595338, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_595338, "Action", newJString(Action))
  add(query_595338, "Version", newJString(Version))
  result = call_595337.call(nil, query_595338, nil, nil, nil)

var getDeleteServerCertificate* = Call_GetDeleteServerCertificate_595323(
    name: "getDeleteServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_GetDeleteServerCertificate_595324, base: "/",
    url: url_GetDeleteServerCertificate_595325,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceLinkedRole_595372 = ref object of OpenApiRestCall_593437
proc url_PostDeleteServiceLinkedRole_595374(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteServiceLinkedRole_595373(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595375 = query.getOrDefault("Action")
  valid_595375 = validateParameter(valid_595375, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_595375 != nil:
    section.add "Action", valid_595375
  var valid_595376 = query.getOrDefault("Version")
  valid_595376 = validateParameter(valid_595376, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595376 != nil:
    section.add "Version", valid_595376
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595377 = header.getOrDefault("X-Amz-Date")
  valid_595377 = validateParameter(valid_595377, JString, required = false,
                                 default = nil)
  if valid_595377 != nil:
    section.add "X-Amz-Date", valid_595377
  var valid_595378 = header.getOrDefault("X-Amz-Security-Token")
  valid_595378 = validateParameter(valid_595378, JString, required = false,
                                 default = nil)
  if valid_595378 != nil:
    section.add "X-Amz-Security-Token", valid_595378
  var valid_595379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595379 = validateParameter(valid_595379, JString, required = false,
                                 default = nil)
  if valid_595379 != nil:
    section.add "X-Amz-Content-Sha256", valid_595379
  var valid_595380 = header.getOrDefault("X-Amz-Algorithm")
  valid_595380 = validateParameter(valid_595380, JString, required = false,
                                 default = nil)
  if valid_595380 != nil:
    section.add "X-Amz-Algorithm", valid_595380
  var valid_595381 = header.getOrDefault("X-Amz-Signature")
  valid_595381 = validateParameter(valid_595381, JString, required = false,
                                 default = nil)
  if valid_595381 != nil:
    section.add "X-Amz-Signature", valid_595381
  var valid_595382 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595382 = validateParameter(valid_595382, JString, required = false,
                                 default = nil)
  if valid_595382 != nil:
    section.add "X-Amz-SignedHeaders", valid_595382
  var valid_595383 = header.getOrDefault("X-Amz-Credential")
  valid_595383 = validateParameter(valid_595383, JString, required = false,
                                 default = nil)
  if valid_595383 != nil:
    section.add "X-Amz-Credential", valid_595383
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_595384 = formData.getOrDefault("RoleName")
  valid_595384 = validateParameter(valid_595384, JString, required = true,
                                 default = nil)
  if valid_595384 != nil:
    section.add "RoleName", valid_595384
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595385: Call_PostDeleteServiceLinkedRole_595372; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595385.validator(path, query, header, formData, body)
  let scheme = call_595385.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595385.url(scheme.get, call_595385.host, call_595385.base,
                         call_595385.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595385, url, valid)

proc call*(call_595386: Call_PostDeleteServiceLinkedRole_595372; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595387 = newJObject()
  var formData_595388 = newJObject()
  add(formData_595388, "RoleName", newJString(RoleName))
  add(query_595387, "Action", newJString(Action))
  add(query_595387, "Version", newJString(Version))
  result = call_595386.call(nil, query_595387, nil, formData_595388, nil)

var postDeleteServiceLinkedRole* = Call_PostDeleteServiceLinkedRole_595372(
    name: "postDeleteServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_PostDeleteServiceLinkedRole_595373, base: "/",
    url: url_PostDeleteServiceLinkedRole_595374,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceLinkedRole_595356 = ref object of OpenApiRestCall_593437
proc url_GetDeleteServiceLinkedRole_595358(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteServiceLinkedRole_595357(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595359 = query.getOrDefault("Action")
  valid_595359 = validateParameter(valid_595359, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_595359 != nil:
    section.add "Action", valid_595359
  var valid_595360 = query.getOrDefault("RoleName")
  valid_595360 = validateParameter(valid_595360, JString, required = true,
                                 default = nil)
  if valid_595360 != nil:
    section.add "RoleName", valid_595360
  var valid_595361 = query.getOrDefault("Version")
  valid_595361 = validateParameter(valid_595361, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595361 != nil:
    section.add "Version", valid_595361
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595362 = header.getOrDefault("X-Amz-Date")
  valid_595362 = validateParameter(valid_595362, JString, required = false,
                                 default = nil)
  if valid_595362 != nil:
    section.add "X-Amz-Date", valid_595362
  var valid_595363 = header.getOrDefault("X-Amz-Security-Token")
  valid_595363 = validateParameter(valid_595363, JString, required = false,
                                 default = nil)
  if valid_595363 != nil:
    section.add "X-Amz-Security-Token", valid_595363
  var valid_595364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595364 = validateParameter(valid_595364, JString, required = false,
                                 default = nil)
  if valid_595364 != nil:
    section.add "X-Amz-Content-Sha256", valid_595364
  var valid_595365 = header.getOrDefault("X-Amz-Algorithm")
  valid_595365 = validateParameter(valid_595365, JString, required = false,
                                 default = nil)
  if valid_595365 != nil:
    section.add "X-Amz-Algorithm", valid_595365
  var valid_595366 = header.getOrDefault("X-Amz-Signature")
  valid_595366 = validateParameter(valid_595366, JString, required = false,
                                 default = nil)
  if valid_595366 != nil:
    section.add "X-Amz-Signature", valid_595366
  var valid_595367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595367 = validateParameter(valid_595367, JString, required = false,
                                 default = nil)
  if valid_595367 != nil:
    section.add "X-Amz-SignedHeaders", valid_595367
  var valid_595368 = header.getOrDefault("X-Amz-Credential")
  valid_595368 = validateParameter(valid_595368, JString, required = false,
                                 default = nil)
  if valid_595368 != nil:
    section.add "X-Amz-Credential", valid_595368
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595369: Call_GetDeleteServiceLinkedRole_595356; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595369.validator(path, query, header, formData, body)
  let scheme = call_595369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595369.url(scheme.get, call_595369.host, call_595369.base,
                         call_595369.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595369, url, valid)

proc call*(call_595370: Call_GetDeleteServiceLinkedRole_595356; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Version: string (required)
  var query_595371 = newJObject()
  add(query_595371, "Action", newJString(Action))
  add(query_595371, "RoleName", newJString(RoleName))
  add(query_595371, "Version", newJString(Version))
  result = call_595370.call(nil, query_595371, nil, nil, nil)

var getDeleteServiceLinkedRole* = Call_GetDeleteServiceLinkedRole_595356(
    name: "getDeleteServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_GetDeleteServiceLinkedRole_595357, base: "/",
    url: url_GetDeleteServiceLinkedRole_595358,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceSpecificCredential_595406 = ref object of OpenApiRestCall_593437
proc url_PostDeleteServiceSpecificCredential_595408(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteServiceSpecificCredential_595407(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595409 = query.getOrDefault("Action")
  valid_595409 = validateParameter(valid_595409, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_595409 != nil:
    section.add "Action", valid_595409
  var valid_595410 = query.getOrDefault("Version")
  valid_595410 = validateParameter(valid_595410, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595410 != nil:
    section.add "Version", valid_595410
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595411 = header.getOrDefault("X-Amz-Date")
  valid_595411 = validateParameter(valid_595411, JString, required = false,
                                 default = nil)
  if valid_595411 != nil:
    section.add "X-Amz-Date", valid_595411
  var valid_595412 = header.getOrDefault("X-Amz-Security-Token")
  valid_595412 = validateParameter(valid_595412, JString, required = false,
                                 default = nil)
  if valid_595412 != nil:
    section.add "X-Amz-Security-Token", valid_595412
  var valid_595413 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595413 = validateParameter(valid_595413, JString, required = false,
                                 default = nil)
  if valid_595413 != nil:
    section.add "X-Amz-Content-Sha256", valid_595413
  var valid_595414 = header.getOrDefault("X-Amz-Algorithm")
  valid_595414 = validateParameter(valid_595414, JString, required = false,
                                 default = nil)
  if valid_595414 != nil:
    section.add "X-Amz-Algorithm", valid_595414
  var valid_595415 = header.getOrDefault("X-Amz-Signature")
  valid_595415 = validateParameter(valid_595415, JString, required = false,
                                 default = nil)
  if valid_595415 != nil:
    section.add "X-Amz-Signature", valid_595415
  var valid_595416 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595416 = validateParameter(valid_595416, JString, required = false,
                                 default = nil)
  if valid_595416 != nil:
    section.add "X-Amz-SignedHeaders", valid_595416
  var valid_595417 = header.getOrDefault("X-Amz-Credential")
  valid_595417 = validateParameter(valid_595417, JString, required = false,
                                 default = nil)
  if valid_595417 != nil:
    section.add "X-Amz-Credential", valid_595417
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_595418 = formData.getOrDefault("UserName")
  valid_595418 = validateParameter(valid_595418, JString, required = false,
                                 default = nil)
  if valid_595418 != nil:
    section.add "UserName", valid_595418
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_595419 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_595419 = validateParameter(valid_595419, JString, required = true,
                                 default = nil)
  if valid_595419 != nil:
    section.add "ServiceSpecificCredentialId", valid_595419
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595420: Call_PostDeleteServiceSpecificCredential_595406;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_595420.validator(path, query, header, formData, body)
  let scheme = call_595420.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595420.url(scheme.get, call_595420.host, call_595420.base,
                         call_595420.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595420, url, valid)

proc call*(call_595421: Call_PostDeleteServiceSpecificCredential_595406;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595422 = newJObject()
  var formData_595423 = newJObject()
  add(formData_595423, "UserName", newJString(UserName))
  add(formData_595423, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_595422, "Action", newJString(Action))
  add(query_595422, "Version", newJString(Version))
  result = call_595421.call(nil, query_595422, nil, formData_595423, nil)

var postDeleteServiceSpecificCredential* = Call_PostDeleteServiceSpecificCredential_595406(
    name: "postDeleteServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_PostDeleteServiceSpecificCredential_595407, base: "/",
    url: url_PostDeleteServiceSpecificCredential_595408,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceSpecificCredential_595389 = ref object of OpenApiRestCall_593437
proc url_GetDeleteServiceSpecificCredential_595391(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteServiceSpecificCredential_595390(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_595392 = query.getOrDefault("UserName")
  valid_595392 = validateParameter(valid_595392, JString, required = false,
                                 default = nil)
  if valid_595392 != nil:
    section.add "UserName", valid_595392
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595393 = query.getOrDefault("Action")
  valid_595393 = validateParameter(valid_595393, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_595393 != nil:
    section.add "Action", valid_595393
  var valid_595394 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_595394 = validateParameter(valid_595394, JString, required = true,
                                 default = nil)
  if valid_595394 != nil:
    section.add "ServiceSpecificCredentialId", valid_595394
  var valid_595395 = query.getOrDefault("Version")
  valid_595395 = validateParameter(valid_595395, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595395 != nil:
    section.add "Version", valid_595395
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595396 = header.getOrDefault("X-Amz-Date")
  valid_595396 = validateParameter(valid_595396, JString, required = false,
                                 default = nil)
  if valid_595396 != nil:
    section.add "X-Amz-Date", valid_595396
  var valid_595397 = header.getOrDefault("X-Amz-Security-Token")
  valid_595397 = validateParameter(valid_595397, JString, required = false,
                                 default = nil)
  if valid_595397 != nil:
    section.add "X-Amz-Security-Token", valid_595397
  var valid_595398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595398 = validateParameter(valid_595398, JString, required = false,
                                 default = nil)
  if valid_595398 != nil:
    section.add "X-Amz-Content-Sha256", valid_595398
  var valid_595399 = header.getOrDefault("X-Amz-Algorithm")
  valid_595399 = validateParameter(valid_595399, JString, required = false,
                                 default = nil)
  if valid_595399 != nil:
    section.add "X-Amz-Algorithm", valid_595399
  var valid_595400 = header.getOrDefault("X-Amz-Signature")
  valid_595400 = validateParameter(valid_595400, JString, required = false,
                                 default = nil)
  if valid_595400 != nil:
    section.add "X-Amz-Signature", valid_595400
  var valid_595401 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595401 = validateParameter(valid_595401, JString, required = false,
                                 default = nil)
  if valid_595401 != nil:
    section.add "X-Amz-SignedHeaders", valid_595401
  var valid_595402 = header.getOrDefault("X-Amz-Credential")
  valid_595402 = validateParameter(valid_595402, JString, required = false,
                                 default = nil)
  if valid_595402 != nil:
    section.add "X-Amz-Credential", valid_595402
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595403: Call_GetDeleteServiceSpecificCredential_595389;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_595403.validator(path, query, header, formData, body)
  let scheme = call_595403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595403.url(scheme.get, call_595403.host, call_595403.base,
                         call_595403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595403, url, valid)

proc call*(call_595404: Call_GetDeleteServiceSpecificCredential_595389;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_595405 = newJObject()
  add(query_595405, "UserName", newJString(UserName))
  add(query_595405, "Action", newJString(Action))
  add(query_595405, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_595405, "Version", newJString(Version))
  result = call_595404.call(nil, query_595405, nil, nil, nil)

var getDeleteServiceSpecificCredential* = Call_GetDeleteServiceSpecificCredential_595389(
    name: "getDeleteServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_GetDeleteServiceSpecificCredential_595390, base: "/",
    url: url_GetDeleteServiceSpecificCredential_595391,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSigningCertificate_595441 = ref object of OpenApiRestCall_593437
proc url_PostDeleteSigningCertificate_595443(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteSigningCertificate_595442(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595444 = query.getOrDefault("Action")
  valid_595444 = validateParameter(valid_595444, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_595444 != nil:
    section.add "Action", valid_595444
  var valid_595445 = query.getOrDefault("Version")
  valid_595445 = validateParameter(valid_595445, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595445 != nil:
    section.add "Version", valid_595445
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595446 = header.getOrDefault("X-Amz-Date")
  valid_595446 = validateParameter(valid_595446, JString, required = false,
                                 default = nil)
  if valid_595446 != nil:
    section.add "X-Amz-Date", valid_595446
  var valid_595447 = header.getOrDefault("X-Amz-Security-Token")
  valid_595447 = validateParameter(valid_595447, JString, required = false,
                                 default = nil)
  if valid_595447 != nil:
    section.add "X-Amz-Security-Token", valid_595447
  var valid_595448 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595448 = validateParameter(valid_595448, JString, required = false,
                                 default = nil)
  if valid_595448 != nil:
    section.add "X-Amz-Content-Sha256", valid_595448
  var valid_595449 = header.getOrDefault("X-Amz-Algorithm")
  valid_595449 = validateParameter(valid_595449, JString, required = false,
                                 default = nil)
  if valid_595449 != nil:
    section.add "X-Amz-Algorithm", valid_595449
  var valid_595450 = header.getOrDefault("X-Amz-Signature")
  valid_595450 = validateParameter(valid_595450, JString, required = false,
                                 default = nil)
  if valid_595450 != nil:
    section.add "X-Amz-Signature", valid_595450
  var valid_595451 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595451 = validateParameter(valid_595451, JString, required = false,
                                 default = nil)
  if valid_595451 != nil:
    section.add "X-Amz-SignedHeaders", valid_595451
  var valid_595452 = header.getOrDefault("X-Amz-Credential")
  valid_595452 = validateParameter(valid_595452, JString, required = false,
                                 default = nil)
  if valid_595452 != nil:
    section.add "X-Amz-Credential", valid_595452
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  section = newJObject()
  var valid_595453 = formData.getOrDefault("UserName")
  valid_595453 = validateParameter(valid_595453, JString, required = false,
                                 default = nil)
  if valid_595453 != nil:
    section.add "UserName", valid_595453
  assert formData != nil,
        "formData argument is necessary due to required `CertificateId` field"
  var valid_595454 = formData.getOrDefault("CertificateId")
  valid_595454 = validateParameter(valid_595454, JString, required = true,
                                 default = nil)
  if valid_595454 != nil:
    section.add "CertificateId", valid_595454
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595455: Call_PostDeleteSigningCertificate_595441; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_595455.validator(path, query, header, formData, body)
  let scheme = call_595455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595455.url(scheme.get, call_595455.host, call_595455.base,
                         call_595455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595455, url, valid)

proc call*(call_595456: Call_PostDeleteSigningCertificate_595441;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595457 = newJObject()
  var formData_595458 = newJObject()
  add(formData_595458, "UserName", newJString(UserName))
  add(formData_595458, "CertificateId", newJString(CertificateId))
  add(query_595457, "Action", newJString(Action))
  add(query_595457, "Version", newJString(Version))
  result = call_595456.call(nil, query_595457, nil, formData_595458, nil)

var postDeleteSigningCertificate* = Call_PostDeleteSigningCertificate_595441(
    name: "postDeleteSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_PostDeleteSigningCertificate_595442, base: "/",
    url: url_PostDeleteSigningCertificate_595443,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSigningCertificate_595424 = ref object of OpenApiRestCall_593437
proc url_GetDeleteSigningCertificate_595426(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteSigningCertificate_595425(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CertificateId` field"
  var valid_595427 = query.getOrDefault("CertificateId")
  valid_595427 = validateParameter(valid_595427, JString, required = true,
                                 default = nil)
  if valid_595427 != nil:
    section.add "CertificateId", valid_595427
  var valid_595428 = query.getOrDefault("UserName")
  valid_595428 = validateParameter(valid_595428, JString, required = false,
                                 default = nil)
  if valid_595428 != nil:
    section.add "UserName", valid_595428
  var valid_595429 = query.getOrDefault("Action")
  valid_595429 = validateParameter(valid_595429, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_595429 != nil:
    section.add "Action", valid_595429
  var valid_595430 = query.getOrDefault("Version")
  valid_595430 = validateParameter(valid_595430, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595430 != nil:
    section.add "Version", valid_595430
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595431 = header.getOrDefault("X-Amz-Date")
  valid_595431 = validateParameter(valid_595431, JString, required = false,
                                 default = nil)
  if valid_595431 != nil:
    section.add "X-Amz-Date", valid_595431
  var valid_595432 = header.getOrDefault("X-Amz-Security-Token")
  valid_595432 = validateParameter(valid_595432, JString, required = false,
                                 default = nil)
  if valid_595432 != nil:
    section.add "X-Amz-Security-Token", valid_595432
  var valid_595433 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595433 = validateParameter(valid_595433, JString, required = false,
                                 default = nil)
  if valid_595433 != nil:
    section.add "X-Amz-Content-Sha256", valid_595433
  var valid_595434 = header.getOrDefault("X-Amz-Algorithm")
  valid_595434 = validateParameter(valid_595434, JString, required = false,
                                 default = nil)
  if valid_595434 != nil:
    section.add "X-Amz-Algorithm", valid_595434
  var valid_595435 = header.getOrDefault("X-Amz-Signature")
  valid_595435 = validateParameter(valid_595435, JString, required = false,
                                 default = nil)
  if valid_595435 != nil:
    section.add "X-Amz-Signature", valid_595435
  var valid_595436 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595436 = validateParameter(valid_595436, JString, required = false,
                                 default = nil)
  if valid_595436 != nil:
    section.add "X-Amz-SignedHeaders", valid_595436
  var valid_595437 = header.getOrDefault("X-Amz-Credential")
  valid_595437 = validateParameter(valid_595437, JString, required = false,
                                 default = nil)
  if valid_595437 != nil:
    section.add "X-Amz-Credential", valid_595437
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595438: Call_GetDeleteSigningCertificate_595424; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_595438.validator(path, query, header, formData, body)
  let scheme = call_595438.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595438.url(scheme.get, call_595438.host, call_595438.base,
                         call_595438.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595438, url, valid)

proc call*(call_595439: Call_GetDeleteSigningCertificate_595424;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595440 = newJObject()
  add(query_595440, "CertificateId", newJString(CertificateId))
  add(query_595440, "UserName", newJString(UserName))
  add(query_595440, "Action", newJString(Action))
  add(query_595440, "Version", newJString(Version))
  result = call_595439.call(nil, query_595440, nil, nil, nil)

var getDeleteSigningCertificate* = Call_GetDeleteSigningCertificate_595424(
    name: "getDeleteSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_GetDeleteSigningCertificate_595425, base: "/",
    url: url_GetDeleteSigningCertificate_595426,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUser_595475 = ref object of OpenApiRestCall_593437
proc url_PostDeleteUser_595477(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteUser_595476(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595478 = query.getOrDefault("Action")
  valid_595478 = validateParameter(valid_595478, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_595478 != nil:
    section.add "Action", valid_595478
  var valid_595479 = query.getOrDefault("Version")
  valid_595479 = validateParameter(valid_595479, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595479 != nil:
    section.add "Version", valid_595479
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595480 = header.getOrDefault("X-Amz-Date")
  valid_595480 = validateParameter(valid_595480, JString, required = false,
                                 default = nil)
  if valid_595480 != nil:
    section.add "X-Amz-Date", valid_595480
  var valid_595481 = header.getOrDefault("X-Amz-Security-Token")
  valid_595481 = validateParameter(valid_595481, JString, required = false,
                                 default = nil)
  if valid_595481 != nil:
    section.add "X-Amz-Security-Token", valid_595481
  var valid_595482 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595482 = validateParameter(valid_595482, JString, required = false,
                                 default = nil)
  if valid_595482 != nil:
    section.add "X-Amz-Content-Sha256", valid_595482
  var valid_595483 = header.getOrDefault("X-Amz-Algorithm")
  valid_595483 = validateParameter(valid_595483, JString, required = false,
                                 default = nil)
  if valid_595483 != nil:
    section.add "X-Amz-Algorithm", valid_595483
  var valid_595484 = header.getOrDefault("X-Amz-Signature")
  valid_595484 = validateParameter(valid_595484, JString, required = false,
                                 default = nil)
  if valid_595484 != nil:
    section.add "X-Amz-Signature", valid_595484
  var valid_595485 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595485 = validateParameter(valid_595485, JString, required = false,
                                 default = nil)
  if valid_595485 != nil:
    section.add "X-Amz-SignedHeaders", valid_595485
  var valid_595486 = header.getOrDefault("X-Amz-Credential")
  valid_595486 = validateParameter(valid_595486, JString, required = false,
                                 default = nil)
  if valid_595486 != nil:
    section.add "X-Amz-Credential", valid_595486
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_595487 = formData.getOrDefault("UserName")
  valid_595487 = validateParameter(valid_595487, JString, required = true,
                                 default = nil)
  if valid_595487 != nil:
    section.add "UserName", valid_595487
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595488: Call_PostDeleteUser_595475; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_595488.validator(path, query, header, formData, body)
  let scheme = call_595488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595488.url(scheme.get, call_595488.host, call_595488.base,
                         call_595488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595488, url, valid)

proc call*(call_595489: Call_PostDeleteUser_595475; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595490 = newJObject()
  var formData_595491 = newJObject()
  add(formData_595491, "UserName", newJString(UserName))
  add(query_595490, "Action", newJString(Action))
  add(query_595490, "Version", newJString(Version))
  result = call_595489.call(nil, query_595490, nil, formData_595491, nil)

var postDeleteUser* = Call_PostDeleteUser_595475(name: "postDeleteUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_PostDeleteUser_595476,
    base: "/", url: url_PostDeleteUser_595477, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUser_595459 = ref object of OpenApiRestCall_593437
proc url_GetDeleteUser_595461(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteUser_595460(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_595462 = query.getOrDefault("UserName")
  valid_595462 = validateParameter(valid_595462, JString, required = true,
                                 default = nil)
  if valid_595462 != nil:
    section.add "UserName", valid_595462
  var valid_595463 = query.getOrDefault("Action")
  valid_595463 = validateParameter(valid_595463, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_595463 != nil:
    section.add "Action", valid_595463
  var valid_595464 = query.getOrDefault("Version")
  valid_595464 = validateParameter(valid_595464, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595464 != nil:
    section.add "Version", valid_595464
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595465 = header.getOrDefault("X-Amz-Date")
  valid_595465 = validateParameter(valid_595465, JString, required = false,
                                 default = nil)
  if valid_595465 != nil:
    section.add "X-Amz-Date", valid_595465
  var valid_595466 = header.getOrDefault("X-Amz-Security-Token")
  valid_595466 = validateParameter(valid_595466, JString, required = false,
                                 default = nil)
  if valid_595466 != nil:
    section.add "X-Amz-Security-Token", valid_595466
  var valid_595467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595467 = validateParameter(valid_595467, JString, required = false,
                                 default = nil)
  if valid_595467 != nil:
    section.add "X-Amz-Content-Sha256", valid_595467
  var valid_595468 = header.getOrDefault("X-Amz-Algorithm")
  valid_595468 = validateParameter(valid_595468, JString, required = false,
                                 default = nil)
  if valid_595468 != nil:
    section.add "X-Amz-Algorithm", valid_595468
  var valid_595469 = header.getOrDefault("X-Amz-Signature")
  valid_595469 = validateParameter(valid_595469, JString, required = false,
                                 default = nil)
  if valid_595469 != nil:
    section.add "X-Amz-Signature", valid_595469
  var valid_595470 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595470 = validateParameter(valid_595470, JString, required = false,
                                 default = nil)
  if valid_595470 != nil:
    section.add "X-Amz-SignedHeaders", valid_595470
  var valid_595471 = header.getOrDefault("X-Amz-Credential")
  valid_595471 = validateParameter(valid_595471, JString, required = false,
                                 default = nil)
  if valid_595471 != nil:
    section.add "X-Amz-Credential", valid_595471
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595472: Call_GetDeleteUser_595459; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_595472.validator(path, query, header, formData, body)
  let scheme = call_595472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595472.url(scheme.get, call_595472.host, call_595472.base,
                         call_595472.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595472, url, valid)

proc call*(call_595473: Call_GetDeleteUser_595459; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595474 = newJObject()
  add(query_595474, "UserName", newJString(UserName))
  add(query_595474, "Action", newJString(Action))
  add(query_595474, "Version", newJString(Version))
  result = call_595473.call(nil, query_595474, nil, nil, nil)

var getDeleteUser* = Call_GetDeleteUser_595459(name: "getDeleteUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_GetDeleteUser_595460,
    base: "/", url: url_GetDeleteUser_595461, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPermissionsBoundary_595508 = ref object of OpenApiRestCall_593437
proc url_PostDeleteUserPermissionsBoundary_595510(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteUserPermissionsBoundary_595509(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595511 = query.getOrDefault("Action")
  valid_595511 = validateParameter(valid_595511, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_595511 != nil:
    section.add "Action", valid_595511
  var valid_595512 = query.getOrDefault("Version")
  valid_595512 = validateParameter(valid_595512, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595512 != nil:
    section.add "Version", valid_595512
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595513 = header.getOrDefault("X-Amz-Date")
  valid_595513 = validateParameter(valid_595513, JString, required = false,
                                 default = nil)
  if valid_595513 != nil:
    section.add "X-Amz-Date", valid_595513
  var valid_595514 = header.getOrDefault("X-Amz-Security-Token")
  valid_595514 = validateParameter(valid_595514, JString, required = false,
                                 default = nil)
  if valid_595514 != nil:
    section.add "X-Amz-Security-Token", valid_595514
  var valid_595515 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595515 = validateParameter(valid_595515, JString, required = false,
                                 default = nil)
  if valid_595515 != nil:
    section.add "X-Amz-Content-Sha256", valid_595515
  var valid_595516 = header.getOrDefault("X-Amz-Algorithm")
  valid_595516 = validateParameter(valid_595516, JString, required = false,
                                 default = nil)
  if valid_595516 != nil:
    section.add "X-Amz-Algorithm", valid_595516
  var valid_595517 = header.getOrDefault("X-Amz-Signature")
  valid_595517 = validateParameter(valid_595517, JString, required = false,
                                 default = nil)
  if valid_595517 != nil:
    section.add "X-Amz-Signature", valid_595517
  var valid_595518 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595518 = validateParameter(valid_595518, JString, required = false,
                                 default = nil)
  if valid_595518 != nil:
    section.add "X-Amz-SignedHeaders", valid_595518
  var valid_595519 = header.getOrDefault("X-Amz-Credential")
  valid_595519 = validateParameter(valid_595519, JString, required = false,
                                 default = nil)
  if valid_595519 != nil:
    section.add "X-Amz-Credential", valid_595519
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_595520 = formData.getOrDefault("UserName")
  valid_595520 = validateParameter(valid_595520, JString, required = true,
                                 default = nil)
  if valid_595520 != nil:
    section.add "UserName", valid_595520
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595521: Call_PostDeleteUserPermissionsBoundary_595508;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_595521.validator(path, query, header, formData, body)
  let scheme = call_595521.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595521.url(scheme.get, call_595521.host, call_595521.base,
                         call_595521.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595521, url, valid)

proc call*(call_595522: Call_PostDeleteUserPermissionsBoundary_595508;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595523 = newJObject()
  var formData_595524 = newJObject()
  add(formData_595524, "UserName", newJString(UserName))
  add(query_595523, "Action", newJString(Action))
  add(query_595523, "Version", newJString(Version))
  result = call_595522.call(nil, query_595523, nil, formData_595524, nil)

var postDeleteUserPermissionsBoundary* = Call_PostDeleteUserPermissionsBoundary_595508(
    name: "postDeleteUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_PostDeleteUserPermissionsBoundary_595509, base: "/",
    url: url_PostDeleteUserPermissionsBoundary_595510,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPermissionsBoundary_595492 = ref object of OpenApiRestCall_593437
proc url_GetDeleteUserPermissionsBoundary_595494(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteUserPermissionsBoundary_595493(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_595495 = query.getOrDefault("UserName")
  valid_595495 = validateParameter(valid_595495, JString, required = true,
                                 default = nil)
  if valid_595495 != nil:
    section.add "UserName", valid_595495
  var valid_595496 = query.getOrDefault("Action")
  valid_595496 = validateParameter(valid_595496, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_595496 != nil:
    section.add "Action", valid_595496
  var valid_595497 = query.getOrDefault("Version")
  valid_595497 = validateParameter(valid_595497, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595497 != nil:
    section.add "Version", valid_595497
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595498 = header.getOrDefault("X-Amz-Date")
  valid_595498 = validateParameter(valid_595498, JString, required = false,
                                 default = nil)
  if valid_595498 != nil:
    section.add "X-Amz-Date", valid_595498
  var valid_595499 = header.getOrDefault("X-Amz-Security-Token")
  valid_595499 = validateParameter(valid_595499, JString, required = false,
                                 default = nil)
  if valid_595499 != nil:
    section.add "X-Amz-Security-Token", valid_595499
  var valid_595500 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595500 = validateParameter(valid_595500, JString, required = false,
                                 default = nil)
  if valid_595500 != nil:
    section.add "X-Amz-Content-Sha256", valid_595500
  var valid_595501 = header.getOrDefault("X-Amz-Algorithm")
  valid_595501 = validateParameter(valid_595501, JString, required = false,
                                 default = nil)
  if valid_595501 != nil:
    section.add "X-Amz-Algorithm", valid_595501
  var valid_595502 = header.getOrDefault("X-Amz-Signature")
  valid_595502 = validateParameter(valid_595502, JString, required = false,
                                 default = nil)
  if valid_595502 != nil:
    section.add "X-Amz-Signature", valid_595502
  var valid_595503 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595503 = validateParameter(valid_595503, JString, required = false,
                                 default = nil)
  if valid_595503 != nil:
    section.add "X-Amz-SignedHeaders", valid_595503
  var valid_595504 = header.getOrDefault("X-Amz-Credential")
  valid_595504 = validateParameter(valid_595504, JString, required = false,
                                 default = nil)
  if valid_595504 != nil:
    section.add "X-Amz-Credential", valid_595504
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595505: Call_GetDeleteUserPermissionsBoundary_595492;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_595505.validator(path, query, header, formData, body)
  let scheme = call_595505.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595505.url(scheme.get, call_595505.host, call_595505.base,
                         call_595505.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595505, url, valid)

proc call*(call_595506: Call_GetDeleteUserPermissionsBoundary_595492;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595507 = newJObject()
  add(query_595507, "UserName", newJString(UserName))
  add(query_595507, "Action", newJString(Action))
  add(query_595507, "Version", newJString(Version))
  result = call_595506.call(nil, query_595507, nil, nil, nil)

var getDeleteUserPermissionsBoundary* = Call_GetDeleteUserPermissionsBoundary_595492(
    name: "getDeleteUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_GetDeleteUserPermissionsBoundary_595493, base: "/",
    url: url_GetDeleteUserPermissionsBoundary_595494,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPolicy_595542 = ref object of OpenApiRestCall_593437
proc url_PostDeleteUserPolicy_595544(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteUserPolicy_595543(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595545 = query.getOrDefault("Action")
  valid_595545 = validateParameter(valid_595545, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_595545 != nil:
    section.add "Action", valid_595545
  var valid_595546 = query.getOrDefault("Version")
  valid_595546 = validateParameter(valid_595546, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595546 != nil:
    section.add "Version", valid_595546
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595547 = header.getOrDefault("X-Amz-Date")
  valid_595547 = validateParameter(valid_595547, JString, required = false,
                                 default = nil)
  if valid_595547 != nil:
    section.add "X-Amz-Date", valid_595547
  var valid_595548 = header.getOrDefault("X-Amz-Security-Token")
  valid_595548 = validateParameter(valid_595548, JString, required = false,
                                 default = nil)
  if valid_595548 != nil:
    section.add "X-Amz-Security-Token", valid_595548
  var valid_595549 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595549 = validateParameter(valid_595549, JString, required = false,
                                 default = nil)
  if valid_595549 != nil:
    section.add "X-Amz-Content-Sha256", valid_595549
  var valid_595550 = header.getOrDefault("X-Amz-Algorithm")
  valid_595550 = validateParameter(valid_595550, JString, required = false,
                                 default = nil)
  if valid_595550 != nil:
    section.add "X-Amz-Algorithm", valid_595550
  var valid_595551 = header.getOrDefault("X-Amz-Signature")
  valid_595551 = validateParameter(valid_595551, JString, required = false,
                                 default = nil)
  if valid_595551 != nil:
    section.add "X-Amz-Signature", valid_595551
  var valid_595552 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595552 = validateParameter(valid_595552, JString, required = false,
                                 default = nil)
  if valid_595552 != nil:
    section.add "X-Amz-SignedHeaders", valid_595552
  var valid_595553 = header.getOrDefault("X-Amz-Credential")
  valid_595553 = validateParameter(valid_595553, JString, required = false,
                                 default = nil)
  if valid_595553 != nil:
    section.add "X-Amz-Credential", valid_595553
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_595554 = formData.getOrDefault("PolicyName")
  valid_595554 = validateParameter(valid_595554, JString, required = true,
                                 default = nil)
  if valid_595554 != nil:
    section.add "PolicyName", valid_595554
  var valid_595555 = formData.getOrDefault("UserName")
  valid_595555 = validateParameter(valid_595555, JString, required = true,
                                 default = nil)
  if valid_595555 != nil:
    section.add "UserName", valid_595555
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595556: Call_PostDeleteUserPolicy_595542; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595556.validator(path, query, header, formData, body)
  let scheme = call_595556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595556.url(scheme.get, call_595556.host, call_595556.base,
                         call_595556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595556, url, valid)

proc call*(call_595557: Call_PostDeleteUserPolicy_595542; PolicyName: string;
          UserName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595558 = newJObject()
  var formData_595559 = newJObject()
  add(formData_595559, "PolicyName", newJString(PolicyName))
  add(formData_595559, "UserName", newJString(UserName))
  add(query_595558, "Action", newJString(Action))
  add(query_595558, "Version", newJString(Version))
  result = call_595557.call(nil, query_595558, nil, formData_595559, nil)

var postDeleteUserPolicy* = Call_PostDeleteUserPolicy_595542(
    name: "postDeleteUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_PostDeleteUserPolicy_595543, base: "/",
    url: url_PostDeleteUserPolicy_595544, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPolicy_595525 = ref object of OpenApiRestCall_593437
proc url_GetDeleteUserPolicy_595527(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteUserPolicy_595526(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_595528 = query.getOrDefault("UserName")
  valid_595528 = validateParameter(valid_595528, JString, required = true,
                                 default = nil)
  if valid_595528 != nil:
    section.add "UserName", valid_595528
  var valid_595529 = query.getOrDefault("Action")
  valid_595529 = validateParameter(valid_595529, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_595529 != nil:
    section.add "Action", valid_595529
  var valid_595530 = query.getOrDefault("Version")
  valid_595530 = validateParameter(valid_595530, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595530 != nil:
    section.add "Version", valid_595530
  var valid_595531 = query.getOrDefault("PolicyName")
  valid_595531 = validateParameter(valid_595531, JString, required = true,
                                 default = nil)
  if valid_595531 != nil:
    section.add "PolicyName", valid_595531
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595532 = header.getOrDefault("X-Amz-Date")
  valid_595532 = validateParameter(valid_595532, JString, required = false,
                                 default = nil)
  if valid_595532 != nil:
    section.add "X-Amz-Date", valid_595532
  var valid_595533 = header.getOrDefault("X-Amz-Security-Token")
  valid_595533 = validateParameter(valid_595533, JString, required = false,
                                 default = nil)
  if valid_595533 != nil:
    section.add "X-Amz-Security-Token", valid_595533
  var valid_595534 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595534 = validateParameter(valid_595534, JString, required = false,
                                 default = nil)
  if valid_595534 != nil:
    section.add "X-Amz-Content-Sha256", valid_595534
  var valid_595535 = header.getOrDefault("X-Amz-Algorithm")
  valid_595535 = validateParameter(valid_595535, JString, required = false,
                                 default = nil)
  if valid_595535 != nil:
    section.add "X-Amz-Algorithm", valid_595535
  var valid_595536 = header.getOrDefault("X-Amz-Signature")
  valid_595536 = validateParameter(valid_595536, JString, required = false,
                                 default = nil)
  if valid_595536 != nil:
    section.add "X-Amz-Signature", valid_595536
  var valid_595537 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595537 = validateParameter(valid_595537, JString, required = false,
                                 default = nil)
  if valid_595537 != nil:
    section.add "X-Amz-SignedHeaders", valid_595537
  var valid_595538 = header.getOrDefault("X-Amz-Credential")
  valid_595538 = validateParameter(valid_595538, JString, required = false,
                                 default = nil)
  if valid_595538 != nil:
    section.add "X-Amz-Credential", valid_595538
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595539: Call_GetDeleteUserPolicy_595525; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595539.validator(path, query, header, formData, body)
  let scheme = call_595539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595539.url(scheme.get, call_595539.host, call_595539.base,
                         call_595539.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595539, url, valid)

proc call*(call_595540: Call_GetDeleteUserPolicy_595525; UserName: string;
          PolicyName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_595541 = newJObject()
  add(query_595541, "UserName", newJString(UserName))
  add(query_595541, "Action", newJString(Action))
  add(query_595541, "Version", newJString(Version))
  add(query_595541, "PolicyName", newJString(PolicyName))
  result = call_595540.call(nil, query_595541, nil, nil, nil)

var getDeleteUserPolicy* = Call_GetDeleteUserPolicy_595525(
    name: "getDeleteUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_GetDeleteUserPolicy_595526, base: "/",
    url: url_GetDeleteUserPolicy_595527, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVirtualMFADevice_595576 = ref object of OpenApiRestCall_593437
proc url_PostDeleteVirtualMFADevice_595578(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteVirtualMFADevice_595577(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595579 = query.getOrDefault("Action")
  valid_595579 = validateParameter(valid_595579, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_595579 != nil:
    section.add "Action", valid_595579
  var valid_595580 = query.getOrDefault("Version")
  valid_595580 = validateParameter(valid_595580, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595580 != nil:
    section.add "Version", valid_595580
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595581 = header.getOrDefault("X-Amz-Date")
  valid_595581 = validateParameter(valid_595581, JString, required = false,
                                 default = nil)
  if valid_595581 != nil:
    section.add "X-Amz-Date", valid_595581
  var valid_595582 = header.getOrDefault("X-Amz-Security-Token")
  valid_595582 = validateParameter(valid_595582, JString, required = false,
                                 default = nil)
  if valid_595582 != nil:
    section.add "X-Amz-Security-Token", valid_595582
  var valid_595583 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595583 = validateParameter(valid_595583, JString, required = false,
                                 default = nil)
  if valid_595583 != nil:
    section.add "X-Amz-Content-Sha256", valid_595583
  var valid_595584 = header.getOrDefault("X-Amz-Algorithm")
  valid_595584 = validateParameter(valid_595584, JString, required = false,
                                 default = nil)
  if valid_595584 != nil:
    section.add "X-Amz-Algorithm", valid_595584
  var valid_595585 = header.getOrDefault("X-Amz-Signature")
  valid_595585 = validateParameter(valid_595585, JString, required = false,
                                 default = nil)
  if valid_595585 != nil:
    section.add "X-Amz-Signature", valid_595585
  var valid_595586 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595586 = validateParameter(valid_595586, JString, required = false,
                                 default = nil)
  if valid_595586 != nil:
    section.add "X-Amz-SignedHeaders", valid_595586
  var valid_595587 = header.getOrDefault("X-Amz-Credential")
  valid_595587 = validateParameter(valid_595587, JString, required = false,
                                 default = nil)
  if valid_595587 != nil:
    section.add "X-Amz-Credential", valid_595587
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_595588 = formData.getOrDefault("SerialNumber")
  valid_595588 = validateParameter(valid_595588, JString, required = true,
                                 default = nil)
  if valid_595588 != nil:
    section.add "SerialNumber", valid_595588
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595589: Call_PostDeleteVirtualMFADevice_595576; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_595589.validator(path, query, header, formData, body)
  let scheme = call_595589.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595589.url(scheme.get, call_595589.host, call_595589.base,
                         call_595589.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595589, url, valid)

proc call*(call_595590: Call_PostDeleteVirtualMFADevice_595576;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595591 = newJObject()
  var formData_595592 = newJObject()
  add(formData_595592, "SerialNumber", newJString(SerialNumber))
  add(query_595591, "Action", newJString(Action))
  add(query_595591, "Version", newJString(Version))
  result = call_595590.call(nil, query_595591, nil, formData_595592, nil)

var postDeleteVirtualMFADevice* = Call_PostDeleteVirtualMFADevice_595576(
    name: "postDeleteVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_PostDeleteVirtualMFADevice_595577, base: "/",
    url: url_PostDeleteVirtualMFADevice_595578,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVirtualMFADevice_595560 = ref object of OpenApiRestCall_593437
proc url_GetDeleteVirtualMFADevice_595562(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteVirtualMFADevice_595561(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_595563 = query.getOrDefault("SerialNumber")
  valid_595563 = validateParameter(valid_595563, JString, required = true,
                                 default = nil)
  if valid_595563 != nil:
    section.add "SerialNumber", valid_595563
  var valid_595564 = query.getOrDefault("Action")
  valid_595564 = validateParameter(valid_595564, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_595564 != nil:
    section.add "Action", valid_595564
  var valid_595565 = query.getOrDefault("Version")
  valid_595565 = validateParameter(valid_595565, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595565 != nil:
    section.add "Version", valid_595565
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595566 = header.getOrDefault("X-Amz-Date")
  valid_595566 = validateParameter(valid_595566, JString, required = false,
                                 default = nil)
  if valid_595566 != nil:
    section.add "X-Amz-Date", valid_595566
  var valid_595567 = header.getOrDefault("X-Amz-Security-Token")
  valid_595567 = validateParameter(valid_595567, JString, required = false,
                                 default = nil)
  if valid_595567 != nil:
    section.add "X-Amz-Security-Token", valid_595567
  var valid_595568 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595568 = validateParameter(valid_595568, JString, required = false,
                                 default = nil)
  if valid_595568 != nil:
    section.add "X-Amz-Content-Sha256", valid_595568
  var valid_595569 = header.getOrDefault("X-Amz-Algorithm")
  valid_595569 = validateParameter(valid_595569, JString, required = false,
                                 default = nil)
  if valid_595569 != nil:
    section.add "X-Amz-Algorithm", valid_595569
  var valid_595570 = header.getOrDefault("X-Amz-Signature")
  valid_595570 = validateParameter(valid_595570, JString, required = false,
                                 default = nil)
  if valid_595570 != nil:
    section.add "X-Amz-Signature", valid_595570
  var valid_595571 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595571 = validateParameter(valid_595571, JString, required = false,
                                 default = nil)
  if valid_595571 != nil:
    section.add "X-Amz-SignedHeaders", valid_595571
  var valid_595572 = header.getOrDefault("X-Amz-Credential")
  valid_595572 = validateParameter(valid_595572, JString, required = false,
                                 default = nil)
  if valid_595572 != nil:
    section.add "X-Amz-Credential", valid_595572
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595573: Call_GetDeleteVirtualMFADevice_595560; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_595573.validator(path, query, header, formData, body)
  let scheme = call_595573.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595573.url(scheme.get, call_595573.host, call_595573.base,
                         call_595573.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595573, url, valid)

proc call*(call_595574: Call_GetDeleteVirtualMFADevice_595560;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595575 = newJObject()
  add(query_595575, "SerialNumber", newJString(SerialNumber))
  add(query_595575, "Action", newJString(Action))
  add(query_595575, "Version", newJString(Version))
  result = call_595574.call(nil, query_595575, nil, nil, nil)

var getDeleteVirtualMFADevice* = Call_GetDeleteVirtualMFADevice_595560(
    name: "getDeleteVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_GetDeleteVirtualMFADevice_595561, base: "/",
    url: url_GetDeleteVirtualMFADevice_595562,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachGroupPolicy_595610 = ref object of OpenApiRestCall_593437
proc url_PostDetachGroupPolicy_595612(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDetachGroupPolicy_595611(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595613 = query.getOrDefault("Action")
  valid_595613 = validateParameter(valid_595613, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_595613 != nil:
    section.add "Action", valid_595613
  var valid_595614 = query.getOrDefault("Version")
  valid_595614 = validateParameter(valid_595614, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595614 != nil:
    section.add "Version", valid_595614
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595615 = header.getOrDefault("X-Amz-Date")
  valid_595615 = validateParameter(valid_595615, JString, required = false,
                                 default = nil)
  if valid_595615 != nil:
    section.add "X-Amz-Date", valid_595615
  var valid_595616 = header.getOrDefault("X-Amz-Security-Token")
  valid_595616 = validateParameter(valid_595616, JString, required = false,
                                 default = nil)
  if valid_595616 != nil:
    section.add "X-Amz-Security-Token", valid_595616
  var valid_595617 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595617 = validateParameter(valid_595617, JString, required = false,
                                 default = nil)
  if valid_595617 != nil:
    section.add "X-Amz-Content-Sha256", valid_595617
  var valid_595618 = header.getOrDefault("X-Amz-Algorithm")
  valid_595618 = validateParameter(valid_595618, JString, required = false,
                                 default = nil)
  if valid_595618 != nil:
    section.add "X-Amz-Algorithm", valid_595618
  var valid_595619 = header.getOrDefault("X-Amz-Signature")
  valid_595619 = validateParameter(valid_595619, JString, required = false,
                                 default = nil)
  if valid_595619 != nil:
    section.add "X-Amz-Signature", valid_595619
  var valid_595620 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595620 = validateParameter(valid_595620, JString, required = false,
                                 default = nil)
  if valid_595620 != nil:
    section.add "X-Amz-SignedHeaders", valid_595620
  var valid_595621 = header.getOrDefault("X-Amz-Credential")
  valid_595621 = validateParameter(valid_595621, JString, required = false,
                                 default = nil)
  if valid_595621 != nil:
    section.add "X-Amz-Credential", valid_595621
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_595622 = formData.getOrDefault("PolicyArn")
  valid_595622 = validateParameter(valid_595622, JString, required = true,
                                 default = nil)
  if valid_595622 != nil:
    section.add "PolicyArn", valid_595622
  var valid_595623 = formData.getOrDefault("GroupName")
  valid_595623 = validateParameter(valid_595623, JString, required = true,
                                 default = nil)
  if valid_595623 != nil:
    section.add "GroupName", valid_595623
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595624: Call_PostDetachGroupPolicy_595610; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595624.validator(path, query, header, formData, body)
  let scheme = call_595624.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595624.url(scheme.get, call_595624.host, call_595624.base,
                         call_595624.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595624, url, valid)

proc call*(call_595625: Call_PostDetachGroupPolicy_595610; PolicyArn: string;
          GroupName: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595626 = newJObject()
  var formData_595627 = newJObject()
  add(formData_595627, "PolicyArn", newJString(PolicyArn))
  add(formData_595627, "GroupName", newJString(GroupName))
  add(query_595626, "Action", newJString(Action))
  add(query_595626, "Version", newJString(Version))
  result = call_595625.call(nil, query_595626, nil, formData_595627, nil)

var postDetachGroupPolicy* = Call_PostDetachGroupPolicy_595610(
    name: "postDetachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_PostDetachGroupPolicy_595611, base: "/",
    url: url_PostDetachGroupPolicy_595612, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachGroupPolicy_595593 = ref object of OpenApiRestCall_593437
proc url_GetDetachGroupPolicy_595595(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDetachGroupPolicy_595594(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_595596 = query.getOrDefault("PolicyArn")
  valid_595596 = validateParameter(valid_595596, JString, required = true,
                                 default = nil)
  if valid_595596 != nil:
    section.add "PolicyArn", valid_595596
  var valid_595597 = query.getOrDefault("Action")
  valid_595597 = validateParameter(valid_595597, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_595597 != nil:
    section.add "Action", valid_595597
  var valid_595598 = query.getOrDefault("GroupName")
  valid_595598 = validateParameter(valid_595598, JString, required = true,
                                 default = nil)
  if valid_595598 != nil:
    section.add "GroupName", valid_595598
  var valid_595599 = query.getOrDefault("Version")
  valid_595599 = validateParameter(valid_595599, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595599 != nil:
    section.add "Version", valid_595599
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595600 = header.getOrDefault("X-Amz-Date")
  valid_595600 = validateParameter(valid_595600, JString, required = false,
                                 default = nil)
  if valid_595600 != nil:
    section.add "X-Amz-Date", valid_595600
  var valid_595601 = header.getOrDefault("X-Amz-Security-Token")
  valid_595601 = validateParameter(valid_595601, JString, required = false,
                                 default = nil)
  if valid_595601 != nil:
    section.add "X-Amz-Security-Token", valid_595601
  var valid_595602 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595602 = validateParameter(valid_595602, JString, required = false,
                                 default = nil)
  if valid_595602 != nil:
    section.add "X-Amz-Content-Sha256", valid_595602
  var valid_595603 = header.getOrDefault("X-Amz-Algorithm")
  valid_595603 = validateParameter(valid_595603, JString, required = false,
                                 default = nil)
  if valid_595603 != nil:
    section.add "X-Amz-Algorithm", valid_595603
  var valid_595604 = header.getOrDefault("X-Amz-Signature")
  valid_595604 = validateParameter(valid_595604, JString, required = false,
                                 default = nil)
  if valid_595604 != nil:
    section.add "X-Amz-Signature", valid_595604
  var valid_595605 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595605 = validateParameter(valid_595605, JString, required = false,
                                 default = nil)
  if valid_595605 != nil:
    section.add "X-Amz-SignedHeaders", valid_595605
  var valid_595606 = header.getOrDefault("X-Amz-Credential")
  valid_595606 = validateParameter(valid_595606, JString, required = false,
                                 default = nil)
  if valid_595606 != nil:
    section.add "X-Amz-Credential", valid_595606
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595607: Call_GetDetachGroupPolicy_595593; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595607.validator(path, query, header, formData, body)
  let scheme = call_595607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595607.url(scheme.get, call_595607.host, call_595607.base,
                         call_595607.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595607, url, valid)

proc call*(call_595608: Call_GetDetachGroupPolicy_595593; PolicyArn: string;
          GroupName: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_595609 = newJObject()
  add(query_595609, "PolicyArn", newJString(PolicyArn))
  add(query_595609, "Action", newJString(Action))
  add(query_595609, "GroupName", newJString(GroupName))
  add(query_595609, "Version", newJString(Version))
  result = call_595608.call(nil, query_595609, nil, nil, nil)

var getDetachGroupPolicy* = Call_GetDetachGroupPolicy_595593(
    name: "getDetachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_GetDetachGroupPolicy_595594, base: "/",
    url: url_GetDetachGroupPolicy_595595, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachRolePolicy_595645 = ref object of OpenApiRestCall_593437
proc url_PostDetachRolePolicy_595647(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDetachRolePolicy_595646(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595648 = query.getOrDefault("Action")
  valid_595648 = validateParameter(valid_595648, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_595648 != nil:
    section.add "Action", valid_595648
  var valid_595649 = query.getOrDefault("Version")
  valid_595649 = validateParameter(valid_595649, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595649 != nil:
    section.add "Version", valid_595649
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595650 = header.getOrDefault("X-Amz-Date")
  valid_595650 = validateParameter(valid_595650, JString, required = false,
                                 default = nil)
  if valid_595650 != nil:
    section.add "X-Amz-Date", valid_595650
  var valid_595651 = header.getOrDefault("X-Amz-Security-Token")
  valid_595651 = validateParameter(valid_595651, JString, required = false,
                                 default = nil)
  if valid_595651 != nil:
    section.add "X-Amz-Security-Token", valid_595651
  var valid_595652 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595652 = validateParameter(valid_595652, JString, required = false,
                                 default = nil)
  if valid_595652 != nil:
    section.add "X-Amz-Content-Sha256", valid_595652
  var valid_595653 = header.getOrDefault("X-Amz-Algorithm")
  valid_595653 = validateParameter(valid_595653, JString, required = false,
                                 default = nil)
  if valid_595653 != nil:
    section.add "X-Amz-Algorithm", valid_595653
  var valid_595654 = header.getOrDefault("X-Amz-Signature")
  valid_595654 = validateParameter(valid_595654, JString, required = false,
                                 default = nil)
  if valid_595654 != nil:
    section.add "X-Amz-Signature", valid_595654
  var valid_595655 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595655 = validateParameter(valid_595655, JString, required = false,
                                 default = nil)
  if valid_595655 != nil:
    section.add "X-Amz-SignedHeaders", valid_595655
  var valid_595656 = header.getOrDefault("X-Amz-Credential")
  valid_595656 = validateParameter(valid_595656, JString, required = false,
                                 default = nil)
  if valid_595656 != nil:
    section.add "X-Amz-Credential", valid_595656
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_595657 = formData.getOrDefault("RoleName")
  valid_595657 = validateParameter(valid_595657, JString, required = true,
                                 default = nil)
  if valid_595657 != nil:
    section.add "RoleName", valid_595657
  var valid_595658 = formData.getOrDefault("PolicyArn")
  valid_595658 = validateParameter(valid_595658, JString, required = true,
                                 default = nil)
  if valid_595658 != nil:
    section.add "PolicyArn", valid_595658
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595659: Call_PostDetachRolePolicy_595645; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595659.validator(path, query, header, formData, body)
  let scheme = call_595659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595659.url(scheme.get, call_595659.host, call_595659.base,
                         call_595659.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595659, url, valid)

proc call*(call_595660: Call_PostDetachRolePolicy_595645; RoleName: string;
          PolicyArn: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595661 = newJObject()
  var formData_595662 = newJObject()
  add(formData_595662, "RoleName", newJString(RoleName))
  add(formData_595662, "PolicyArn", newJString(PolicyArn))
  add(query_595661, "Action", newJString(Action))
  add(query_595661, "Version", newJString(Version))
  result = call_595660.call(nil, query_595661, nil, formData_595662, nil)

var postDetachRolePolicy* = Call_PostDetachRolePolicy_595645(
    name: "postDetachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_PostDetachRolePolicy_595646, base: "/",
    url: url_PostDetachRolePolicy_595647, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachRolePolicy_595628 = ref object of OpenApiRestCall_593437
proc url_GetDetachRolePolicy_595630(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDetachRolePolicy_595629(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_595631 = query.getOrDefault("PolicyArn")
  valid_595631 = validateParameter(valid_595631, JString, required = true,
                                 default = nil)
  if valid_595631 != nil:
    section.add "PolicyArn", valid_595631
  var valid_595632 = query.getOrDefault("Action")
  valid_595632 = validateParameter(valid_595632, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_595632 != nil:
    section.add "Action", valid_595632
  var valid_595633 = query.getOrDefault("RoleName")
  valid_595633 = validateParameter(valid_595633, JString, required = true,
                                 default = nil)
  if valid_595633 != nil:
    section.add "RoleName", valid_595633
  var valid_595634 = query.getOrDefault("Version")
  valid_595634 = validateParameter(valid_595634, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595634 != nil:
    section.add "Version", valid_595634
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595635 = header.getOrDefault("X-Amz-Date")
  valid_595635 = validateParameter(valid_595635, JString, required = false,
                                 default = nil)
  if valid_595635 != nil:
    section.add "X-Amz-Date", valid_595635
  var valid_595636 = header.getOrDefault("X-Amz-Security-Token")
  valid_595636 = validateParameter(valid_595636, JString, required = false,
                                 default = nil)
  if valid_595636 != nil:
    section.add "X-Amz-Security-Token", valid_595636
  var valid_595637 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595637 = validateParameter(valid_595637, JString, required = false,
                                 default = nil)
  if valid_595637 != nil:
    section.add "X-Amz-Content-Sha256", valid_595637
  var valid_595638 = header.getOrDefault("X-Amz-Algorithm")
  valid_595638 = validateParameter(valid_595638, JString, required = false,
                                 default = nil)
  if valid_595638 != nil:
    section.add "X-Amz-Algorithm", valid_595638
  var valid_595639 = header.getOrDefault("X-Amz-Signature")
  valid_595639 = validateParameter(valid_595639, JString, required = false,
                                 default = nil)
  if valid_595639 != nil:
    section.add "X-Amz-Signature", valid_595639
  var valid_595640 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595640 = validateParameter(valid_595640, JString, required = false,
                                 default = nil)
  if valid_595640 != nil:
    section.add "X-Amz-SignedHeaders", valid_595640
  var valid_595641 = header.getOrDefault("X-Amz-Credential")
  valid_595641 = validateParameter(valid_595641, JString, required = false,
                                 default = nil)
  if valid_595641 != nil:
    section.add "X-Amz-Credential", valid_595641
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595642: Call_GetDetachRolePolicy_595628; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595642.validator(path, query, header, formData, body)
  let scheme = call_595642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595642.url(scheme.get, call_595642.host, call_595642.base,
                         call_595642.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595642, url, valid)

proc call*(call_595643: Call_GetDetachRolePolicy_595628; PolicyArn: string;
          RoleName: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_595644 = newJObject()
  add(query_595644, "PolicyArn", newJString(PolicyArn))
  add(query_595644, "Action", newJString(Action))
  add(query_595644, "RoleName", newJString(RoleName))
  add(query_595644, "Version", newJString(Version))
  result = call_595643.call(nil, query_595644, nil, nil, nil)

var getDetachRolePolicy* = Call_GetDetachRolePolicy_595628(
    name: "getDetachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_GetDetachRolePolicy_595629, base: "/",
    url: url_GetDetachRolePolicy_595630, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachUserPolicy_595680 = ref object of OpenApiRestCall_593437
proc url_PostDetachUserPolicy_595682(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDetachUserPolicy_595681(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595683 = query.getOrDefault("Action")
  valid_595683 = validateParameter(valid_595683, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_595683 != nil:
    section.add "Action", valid_595683
  var valid_595684 = query.getOrDefault("Version")
  valid_595684 = validateParameter(valid_595684, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595684 != nil:
    section.add "Version", valid_595684
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595685 = header.getOrDefault("X-Amz-Date")
  valid_595685 = validateParameter(valid_595685, JString, required = false,
                                 default = nil)
  if valid_595685 != nil:
    section.add "X-Amz-Date", valid_595685
  var valid_595686 = header.getOrDefault("X-Amz-Security-Token")
  valid_595686 = validateParameter(valid_595686, JString, required = false,
                                 default = nil)
  if valid_595686 != nil:
    section.add "X-Amz-Security-Token", valid_595686
  var valid_595687 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595687 = validateParameter(valid_595687, JString, required = false,
                                 default = nil)
  if valid_595687 != nil:
    section.add "X-Amz-Content-Sha256", valid_595687
  var valid_595688 = header.getOrDefault("X-Amz-Algorithm")
  valid_595688 = validateParameter(valid_595688, JString, required = false,
                                 default = nil)
  if valid_595688 != nil:
    section.add "X-Amz-Algorithm", valid_595688
  var valid_595689 = header.getOrDefault("X-Amz-Signature")
  valid_595689 = validateParameter(valid_595689, JString, required = false,
                                 default = nil)
  if valid_595689 != nil:
    section.add "X-Amz-Signature", valid_595689
  var valid_595690 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595690 = validateParameter(valid_595690, JString, required = false,
                                 default = nil)
  if valid_595690 != nil:
    section.add "X-Amz-SignedHeaders", valid_595690
  var valid_595691 = header.getOrDefault("X-Amz-Credential")
  valid_595691 = validateParameter(valid_595691, JString, required = false,
                                 default = nil)
  if valid_595691 != nil:
    section.add "X-Amz-Credential", valid_595691
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_595692 = formData.getOrDefault("UserName")
  valid_595692 = validateParameter(valid_595692, JString, required = true,
                                 default = nil)
  if valid_595692 != nil:
    section.add "UserName", valid_595692
  var valid_595693 = formData.getOrDefault("PolicyArn")
  valid_595693 = validateParameter(valid_595693, JString, required = true,
                                 default = nil)
  if valid_595693 != nil:
    section.add "PolicyArn", valid_595693
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595694: Call_PostDetachUserPolicy_595680; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595694.validator(path, query, header, formData, body)
  let scheme = call_595694.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595694.url(scheme.get, call_595694.host, call_595694.base,
                         call_595694.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595694, url, valid)

proc call*(call_595695: Call_PostDetachUserPolicy_595680; UserName: string;
          PolicyArn: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595696 = newJObject()
  var formData_595697 = newJObject()
  add(formData_595697, "UserName", newJString(UserName))
  add(formData_595697, "PolicyArn", newJString(PolicyArn))
  add(query_595696, "Action", newJString(Action))
  add(query_595696, "Version", newJString(Version))
  result = call_595695.call(nil, query_595696, nil, formData_595697, nil)

var postDetachUserPolicy* = Call_PostDetachUserPolicy_595680(
    name: "postDetachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_PostDetachUserPolicy_595681, base: "/",
    url: url_PostDetachUserPolicy_595682, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachUserPolicy_595663 = ref object of OpenApiRestCall_593437
proc url_GetDetachUserPolicy_595665(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDetachUserPolicy_595664(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_595666 = query.getOrDefault("PolicyArn")
  valid_595666 = validateParameter(valid_595666, JString, required = true,
                                 default = nil)
  if valid_595666 != nil:
    section.add "PolicyArn", valid_595666
  var valid_595667 = query.getOrDefault("UserName")
  valid_595667 = validateParameter(valid_595667, JString, required = true,
                                 default = nil)
  if valid_595667 != nil:
    section.add "UserName", valid_595667
  var valid_595668 = query.getOrDefault("Action")
  valid_595668 = validateParameter(valid_595668, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_595668 != nil:
    section.add "Action", valid_595668
  var valid_595669 = query.getOrDefault("Version")
  valid_595669 = validateParameter(valid_595669, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595669 != nil:
    section.add "Version", valid_595669
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595670 = header.getOrDefault("X-Amz-Date")
  valid_595670 = validateParameter(valid_595670, JString, required = false,
                                 default = nil)
  if valid_595670 != nil:
    section.add "X-Amz-Date", valid_595670
  var valid_595671 = header.getOrDefault("X-Amz-Security-Token")
  valid_595671 = validateParameter(valid_595671, JString, required = false,
                                 default = nil)
  if valid_595671 != nil:
    section.add "X-Amz-Security-Token", valid_595671
  var valid_595672 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595672 = validateParameter(valid_595672, JString, required = false,
                                 default = nil)
  if valid_595672 != nil:
    section.add "X-Amz-Content-Sha256", valid_595672
  var valid_595673 = header.getOrDefault("X-Amz-Algorithm")
  valid_595673 = validateParameter(valid_595673, JString, required = false,
                                 default = nil)
  if valid_595673 != nil:
    section.add "X-Amz-Algorithm", valid_595673
  var valid_595674 = header.getOrDefault("X-Amz-Signature")
  valid_595674 = validateParameter(valid_595674, JString, required = false,
                                 default = nil)
  if valid_595674 != nil:
    section.add "X-Amz-Signature", valid_595674
  var valid_595675 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595675 = validateParameter(valid_595675, JString, required = false,
                                 default = nil)
  if valid_595675 != nil:
    section.add "X-Amz-SignedHeaders", valid_595675
  var valid_595676 = header.getOrDefault("X-Amz-Credential")
  valid_595676 = validateParameter(valid_595676, JString, required = false,
                                 default = nil)
  if valid_595676 != nil:
    section.add "X-Amz-Credential", valid_595676
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595677: Call_GetDetachUserPolicy_595663; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595677.validator(path, query, header, formData, body)
  let scheme = call_595677.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595677.url(scheme.get, call_595677.host, call_595677.base,
                         call_595677.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595677, url, valid)

proc call*(call_595678: Call_GetDetachUserPolicy_595663; PolicyArn: string;
          UserName: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595679 = newJObject()
  add(query_595679, "PolicyArn", newJString(PolicyArn))
  add(query_595679, "UserName", newJString(UserName))
  add(query_595679, "Action", newJString(Action))
  add(query_595679, "Version", newJString(Version))
  result = call_595678.call(nil, query_595679, nil, nil, nil)

var getDetachUserPolicy* = Call_GetDetachUserPolicy_595663(
    name: "getDetachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_GetDetachUserPolicy_595664, base: "/",
    url: url_GetDetachUserPolicy_595665, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMFADevice_595717 = ref object of OpenApiRestCall_593437
proc url_PostEnableMFADevice_595719(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostEnableMFADevice_595718(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595720 = query.getOrDefault("Action")
  valid_595720 = validateParameter(valid_595720, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_595720 != nil:
    section.add "Action", valid_595720
  var valid_595721 = query.getOrDefault("Version")
  valid_595721 = validateParameter(valid_595721, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595721 != nil:
    section.add "Version", valid_595721
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595722 = header.getOrDefault("X-Amz-Date")
  valid_595722 = validateParameter(valid_595722, JString, required = false,
                                 default = nil)
  if valid_595722 != nil:
    section.add "X-Amz-Date", valid_595722
  var valid_595723 = header.getOrDefault("X-Amz-Security-Token")
  valid_595723 = validateParameter(valid_595723, JString, required = false,
                                 default = nil)
  if valid_595723 != nil:
    section.add "X-Amz-Security-Token", valid_595723
  var valid_595724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595724 = validateParameter(valid_595724, JString, required = false,
                                 default = nil)
  if valid_595724 != nil:
    section.add "X-Amz-Content-Sha256", valid_595724
  var valid_595725 = header.getOrDefault("X-Amz-Algorithm")
  valid_595725 = validateParameter(valid_595725, JString, required = false,
                                 default = nil)
  if valid_595725 != nil:
    section.add "X-Amz-Algorithm", valid_595725
  var valid_595726 = header.getOrDefault("X-Amz-Signature")
  valid_595726 = validateParameter(valid_595726, JString, required = false,
                                 default = nil)
  if valid_595726 != nil:
    section.add "X-Amz-Signature", valid_595726
  var valid_595727 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595727 = validateParameter(valid_595727, JString, required = false,
                                 default = nil)
  if valid_595727 != nil:
    section.add "X-Amz-SignedHeaders", valid_595727
  var valid_595728 = header.getOrDefault("X-Amz-Credential")
  valid_595728 = validateParameter(valid_595728, JString, required = false,
                                 default = nil)
  if valid_595728 != nil:
    section.add "X-Amz-Credential", valid_595728
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_595729 = formData.getOrDefault("SerialNumber")
  valid_595729 = validateParameter(valid_595729, JString, required = true,
                                 default = nil)
  if valid_595729 != nil:
    section.add "SerialNumber", valid_595729
  var valid_595730 = formData.getOrDefault("UserName")
  valid_595730 = validateParameter(valid_595730, JString, required = true,
                                 default = nil)
  if valid_595730 != nil:
    section.add "UserName", valid_595730
  var valid_595731 = formData.getOrDefault("AuthenticationCode2")
  valid_595731 = validateParameter(valid_595731, JString, required = true,
                                 default = nil)
  if valid_595731 != nil:
    section.add "AuthenticationCode2", valid_595731
  var valid_595732 = formData.getOrDefault("AuthenticationCode1")
  valid_595732 = validateParameter(valid_595732, JString, required = true,
                                 default = nil)
  if valid_595732 != nil:
    section.add "AuthenticationCode1", valid_595732
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595733: Call_PostEnableMFADevice_595717; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_595733.validator(path, query, header, formData, body)
  let scheme = call_595733.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595733.url(scheme.get, call_595733.host, call_595733.base,
                         call_595733.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595733, url, valid)

proc call*(call_595734: Call_PostEnableMFADevice_595717; SerialNumber: string;
          UserName: string; AuthenticationCode2: string;
          AuthenticationCode1: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   Version: string (required)
  var query_595735 = newJObject()
  var formData_595736 = newJObject()
  add(formData_595736, "SerialNumber", newJString(SerialNumber))
  add(formData_595736, "UserName", newJString(UserName))
  add(formData_595736, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_595735, "Action", newJString(Action))
  add(formData_595736, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_595735, "Version", newJString(Version))
  result = call_595734.call(nil, query_595735, nil, formData_595736, nil)

var postEnableMFADevice* = Call_PostEnableMFADevice_595717(
    name: "postEnableMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=EnableMFADevice",
    validator: validate_PostEnableMFADevice_595718, base: "/",
    url: url_PostEnableMFADevice_595719, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMFADevice_595698 = ref object of OpenApiRestCall_593437
proc url_GetEnableMFADevice_595700(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetEnableMFADevice_595699(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_595701 = query.getOrDefault("SerialNumber")
  valid_595701 = validateParameter(valid_595701, JString, required = true,
                                 default = nil)
  if valid_595701 != nil:
    section.add "SerialNumber", valid_595701
  var valid_595702 = query.getOrDefault("AuthenticationCode2")
  valid_595702 = validateParameter(valid_595702, JString, required = true,
                                 default = nil)
  if valid_595702 != nil:
    section.add "AuthenticationCode2", valid_595702
  var valid_595703 = query.getOrDefault("AuthenticationCode1")
  valid_595703 = validateParameter(valid_595703, JString, required = true,
                                 default = nil)
  if valid_595703 != nil:
    section.add "AuthenticationCode1", valid_595703
  var valid_595704 = query.getOrDefault("UserName")
  valid_595704 = validateParameter(valid_595704, JString, required = true,
                                 default = nil)
  if valid_595704 != nil:
    section.add "UserName", valid_595704
  var valid_595705 = query.getOrDefault("Action")
  valid_595705 = validateParameter(valid_595705, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_595705 != nil:
    section.add "Action", valid_595705
  var valid_595706 = query.getOrDefault("Version")
  valid_595706 = validateParameter(valid_595706, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595706 != nil:
    section.add "Version", valid_595706
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595707 = header.getOrDefault("X-Amz-Date")
  valid_595707 = validateParameter(valid_595707, JString, required = false,
                                 default = nil)
  if valid_595707 != nil:
    section.add "X-Amz-Date", valid_595707
  var valid_595708 = header.getOrDefault("X-Amz-Security-Token")
  valid_595708 = validateParameter(valid_595708, JString, required = false,
                                 default = nil)
  if valid_595708 != nil:
    section.add "X-Amz-Security-Token", valid_595708
  var valid_595709 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595709 = validateParameter(valid_595709, JString, required = false,
                                 default = nil)
  if valid_595709 != nil:
    section.add "X-Amz-Content-Sha256", valid_595709
  var valid_595710 = header.getOrDefault("X-Amz-Algorithm")
  valid_595710 = validateParameter(valid_595710, JString, required = false,
                                 default = nil)
  if valid_595710 != nil:
    section.add "X-Amz-Algorithm", valid_595710
  var valid_595711 = header.getOrDefault("X-Amz-Signature")
  valid_595711 = validateParameter(valid_595711, JString, required = false,
                                 default = nil)
  if valid_595711 != nil:
    section.add "X-Amz-Signature", valid_595711
  var valid_595712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595712 = validateParameter(valid_595712, JString, required = false,
                                 default = nil)
  if valid_595712 != nil:
    section.add "X-Amz-SignedHeaders", valid_595712
  var valid_595713 = header.getOrDefault("X-Amz-Credential")
  valid_595713 = validateParameter(valid_595713, JString, required = false,
                                 default = nil)
  if valid_595713 != nil:
    section.add "X-Amz-Credential", valid_595713
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595714: Call_GetEnableMFADevice_595698; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_595714.validator(path, query, header, formData, body)
  let scheme = call_595714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595714.url(scheme.get, call_595714.host, call_595714.base,
                         call_595714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595714, url, valid)

proc call*(call_595715: Call_GetEnableMFADevice_595698; SerialNumber: string;
          AuthenticationCode2: string; AuthenticationCode1: string;
          UserName: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595716 = newJObject()
  add(query_595716, "SerialNumber", newJString(SerialNumber))
  add(query_595716, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_595716, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_595716, "UserName", newJString(UserName))
  add(query_595716, "Action", newJString(Action))
  add(query_595716, "Version", newJString(Version))
  result = call_595715.call(nil, query_595716, nil, nil, nil)

var getEnableMFADevice* = Call_GetEnableMFADevice_595698(
    name: "getEnableMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=EnableMFADevice", validator: validate_GetEnableMFADevice_595699,
    base: "/", url: url_GetEnableMFADevice_595700,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateCredentialReport_595752 = ref object of OpenApiRestCall_593437
proc url_PostGenerateCredentialReport_595754(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGenerateCredentialReport_595753(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595755 = query.getOrDefault("Action")
  valid_595755 = validateParameter(valid_595755, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_595755 != nil:
    section.add "Action", valid_595755
  var valid_595756 = query.getOrDefault("Version")
  valid_595756 = validateParameter(valid_595756, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595756 != nil:
    section.add "Version", valid_595756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595757 = header.getOrDefault("X-Amz-Date")
  valid_595757 = validateParameter(valid_595757, JString, required = false,
                                 default = nil)
  if valid_595757 != nil:
    section.add "X-Amz-Date", valid_595757
  var valid_595758 = header.getOrDefault("X-Amz-Security-Token")
  valid_595758 = validateParameter(valid_595758, JString, required = false,
                                 default = nil)
  if valid_595758 != nil:
    section.add "X-Amz-Security-Token", valid_595758
  var valid_595759 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595759 = validateParameter(valid_595759, JString, required = false,
                                 default = nil)
  if valid_595759 != nil:
    section.add "X-Amz-Content-Sha256", valid_595759
  var valid_595760 = header.getOrDefault("X-Amz-Algorithm")
  valid_595760 = validateParameter(valid_595760, JString, required = false,
                                 default = nil)
  if valid_595760 != nil:
    section.add "X-Amz-Algorithm", valid_595760
  var valid_595761 = header.getOrDefault("X-Amz-Signature")
  valid_595761 = validateParameter(valid_595761, JString, required = false,
                                 default = nil)
  if valid_595761 != nil:
    section.add "X-Amz-Signature", valid_595761
  var valid_595762 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595762 = validateParameter(valid_595762, JString, required = false,
                                 default = nil)
  if valid_595762 != nil:
    section.add "X-Amz-SignedHeaders", valid_595762
  var valid_595763 = header.getOrDefault("X-Amz-Credential")
  valid_595763 = validateParameter(valid_595763, JString, required = false,
                                 default = nil)
  if valid_595763 != nil:
    section.add "X-Amz-Credential", valid_595763
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595764: Call_PostGenerateCredentialReport_595752; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_595764.validator(path, query, header, formData, body)
  let scheme = call_595764.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595764.url(scheme.get, call_595764.host, call_595764.base,
                         call_595764.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595764, url, valid)

proc call*(call_595765: Call_PostGenerateCredentialReport_595752;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595766 = newJObject()
  add(query_595766, "Action", newJString(Action))
  add(query_595766, "Version", newJString(Version))
  result = call_595765.call(nil, query_595766, nil, nil, nil)

var postGenerateCredentialReport* = Call_PostGenerateCredentialReport_595752(
    name: "postGenerateCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_PostGenerateCredentialReport_595753, base: "/",
    url: url_PostGenerateCredentialReport_595754,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateCredentialReport_595737 = ref object of OpenApiRestCall_593437
proc url_GetGenerateCredentialReport_595739(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGenerateCredentialReport_595738(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595740 = query.getOrDefault("Action")
  valid_595740 = validateParameter(valid_595740, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_595740 != nil:
    section.add "Action", valid_595740
  var valid_595741 = query.getOrDefault("Version")
  valid_595741 = validateParameter(valid_595741, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595741 != nil:
    section.add "Version", valid_595741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595742 = header.getOrDefault("X-Amz-Date")
  valid_595742 = validateParameter(valid_595742, JString, required = false,
                                 default = nil)
  if valid_595742 != nil:
    section.add "X-Amz-Date", valid_595742
  var valid_595743 = header.getOrDefault("X-Amz-Security-Token")
  valid_595743 = validateParameter(valid_595743, JString, required = false,
                                 default = nil)
  if valid_595743 != nil:
    section.add "X-Amz-Security-Token", valid_595743
  var valid_595744 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595744 = validateParameter(valid_595744, JString, required = false,
                                 default = nil)
  if valid_595744 != nil:
    section.add "X-Amz-Content-Sha256", valid_595744
  var valid_595745 = header.getOrDefault("X-Amz-Algorithm")
  valid_595745 = validateParameter(valid_595745, JString, required = false,
                                 default = nil)
  if valid_595745 != nil:
    section.add "X-Amz-Algorithm", valid_595745
  var valid_595746 = header.getOrDefault("X-Amz-Signature")
  valid_595746 = validateParameter(valid_595746, JString, required = false,
                                 default = nil)
  if valid_595746 != nil:
    section.add "X-Amz-Signature", valid_595746
  var valid_595747 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595747 = validateParameter(valid_595747, JString, required = false,
                                 default = nil)
  if valid_595747 != nil:
    section.add "X-Amz-SignedHeaders", valid_595747
  var valid_595748 = header.getOrDefault("X-Amz-Credential")
  valid_595748 = validateParameter(valid_595748, JString, required = false,
                                 default = nil)
  if valid_595748 != nil:
    section.add "X-Amz-Credential", valid_595748
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595749: Call_GetGenerateCredentialReport_595737; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_595749.validator(path, query, header, formData, body)
  let scheme = call_595749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595749.url(scheme.get, call_595749.host, call_595749.base,
                         call_595749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595749, url, valid)

proc call*(call_595750: Call_GetGenerateCredentialReport_595737;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595751 = newJObject()
  add(query_595751, "Action", newJString(Action))
  add(query_595751, "Version", newJString(Version))
  result = call_595750.call(nil, query_595751, nil, nil, nil)

var getGenerateCredentialReport* = Call_GetGenerateCredentialReport_595737(
    name: "getGenerateCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_GetGenerateCredentialReport_595738, base: "/",
    url: url_GetGenerateCredentialReport_595739,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateOrganizationsAccessReport_595784 = ref object of OpenApiRestCall_593437
proc url_PostGenerateOrganizationsAccessReport_595786(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGenerateOrganizationsAccessReport_595785(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595787 = query.getOrDefault("Action")
  valid_595787 = validateParameter(valid_595787, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_595787 != nil:
    section.add "Action", valid_595787
  var valid_595788 = query.getOrDefault("Version")
  valid_595788 = validateParameter(valid_595788, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595788 != nil:
    section.add "Version", valid_595788
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595789 = header.getOrDefault("X-Amz-Date")
  valid_595789 = validateParameter(valid_595789, JString, required = false,
                                 default = nil)
  if valid_595789 != nil:
    section.add "X-Amz-Date", valid_595789
  var valid_595790 = header.getOrDefault("X-Amz-Security-Token")
  valid_595790 = validateParameter(valid_595790, JString, required = false,
                                 default = nil)
  if valid_595790 != nil:
    section.add "X-Amz-Security-Token", valid_595790
  var valid_595791 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595791 = validateParameter(valid_595791, JString, required = false,
                                 default = nil)
  if valid_595791 != nil:
    section.add "X-Amz-Content-Sha256", valid_595791
  var valid_595792 = header.getOrDefault("X-Amz-Algorithm")
  valid_595792 = validateParameter(valid_595792, JString, required = false,
                                 default = nil)
  if valid_595792 != nil:
    section.add "X-Amz-Algorithm", valid_595792
  var valid_595793 = header.getOrDefault("X-Amz-Signature")
  valid_595793 = validateParameter(valid_595793, JString, required = false,
                                 default = nil)
  if valid_595793 != nil:
    section.add "X-Amz-Signature", valid_595793
  var valid_595794 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595794 = validateParameter(valid_595794, JString, required = false,
                                 default = nil)
  if valid_595794 != nil:
    section.add "X-Amz-SignedHeaders", valid_595794
  var valid_595795 = header.getOrDefault("X-Amz-Credential")
  valid_595795 = validateParameter(valid_595795, JString, required = false,
                                 default = nil)
  if valid_595795 != nil:
    section.add "X-Amz-Credential", valid_595795
  result.add "header", section
  ## parameters in `formData` object:
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  section = newJObject()
  var valid_595796 = formData.getOrDefault("OrganizationsPolicyId")
  valid_595796 = validateParameter(valid_595796, JString, required = false,
                                 default = nil)
  if valid_595796 != nil:
    section.add "OrganizationsPolicyId", valid_595796
  assert formData != nil,
        "formData argument is necessary due to required `EntityPath` field"
  var valid_595797 = formData.getOrDefault("EntityPath")
  valid_595797 = validateParameter(valid_595797, JString, required = true,
                                 default = nil)
  if valid_595797 != nil:
    section.add "EntityPath", valid_595797
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595798: Call_PostGenerateOrganizationsAccessReport_595784;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595798.validator(path, query, header, formData, body)
  let scheme = call_595798.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595798.url(scheme.get, call_595798.host, call_595798.base,
                         call_595798.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595798, url, valid)

proc call*(call_595799: Call_PostGenerateOrganizationsAccessReport_595784;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   Version: string (required)
  var query_595800 = newJObject()
  var formData_595801 = newJObject()
  add(formData_595801, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_595800, "Action", newJString(Action))
  add(formData_595801, "EntityPath", newJString(EntityPath))
  add(query_595800, "Version", newJString(Version))
  result = call_595799.call(nil, query_595800, nil, formData_595801, nil)

var postGenerateOrganizationsAccessReport* = Call_PostGenerateOrganizationsAccessReport_595784(
    name: "postGenerateOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_PostGenerateOrganizationsAccessReport_595785, base: "/",
    url: url_PostGenerateOrganizationsAccessReport_595786,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateOrganizationsAccessReport_595767 = ref object of OpenApiRestCall_593437
proc url_GetGenerateOrganizationsAccessReport_595769(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGenerateOrganizationsAccessReport_595768(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EntityPath` field"
  var valid_595770 = query.getOrDefault("EntityPath")
  valid_595770 = validateParameter(valid_595770, JString, required = true,
                                 default = nil)
  if valid_595770 != nil:
    section.add "EntityPath", valid_595770
  var valid_595771 = query.getOrDefault("OrganizationsPolicyId")
  valid_595771 = validateParameter(valid_595771, JString, required = false,
                                 default = nil)
  if valid_595771 != nil:
    section.add "OrganizationsPolicyId", valid_595771
  var valid_595772 = query.getOrDefault("Action")
  valid_595772 = validateParameter(valid_595772, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_595772 != nil:
    section.add "Action", valid_595772
  var valid_595773 = query.getOrDefault("Version")
  valid_595773 = validateParameter(valid_595773, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595773 != nil:
    section.add "Version", valid_595773
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595774 = header.getOrDefault("X-Amz-Date")
  valid_595774 = validateParameter(valid_595774, JString, required = false,
                                 default = nil)
  if valid_595774 != nil:
    section.add "X-Amz-Date", valid_595774
  var valid_595775 = header.getOrDefault("X-Amz-Security-Token")
  valid_595775 = validateParameter(valid_595775, JString, required = false,
                                 default = nil)
  if valid_595775 != nil:
    section.add "X-Amz-Security-Token", valid_595775
  var valid_595776 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595776 = validateParameter(valid_595776, JString, required = false,
                                 default = nil)
  if valid_595776 != nil:
    section.add "X-Amz-Content-Sha256", valid_595776
  var valid_595777 = header.getOrDefault("X-Amz-Algorithm")
  valid_595777 = validateParameter(valid_595777, JString, required = false,
                                 default = nil)
  if valid_595777 != nil:
    section.add "X-Amz-Algorithm", valid_595777
  var valid_595778 = header.getOrDefault("X-Amz-Signature")
  valid_595778 = validateParameter(valid_595778, JString, required = false,
                                 default = nil)
  if valid_595778 != nil:
    section.add "X-Amz-Signature", valid_595778
  var valid_595779 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595779 = validateParameter(valid_595779, JString, required = false,
                                 default = nil)
  if valid_595779 != nil:
    section.add "X-Amz-SignedHeaders", valid_595779
  var valid_595780 = header.getOrDefault("X-Amz-Credential")
  valid_595780 = validateParameter(valid_595780, JString, required = false,
                                 default = nil)
  if valid_595780 != nil:
    section.add "X-Amz-Credential", valid_595780
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595781: Call_GetGenerateOrganizationsAccessReport_595767;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595781.validator(path, query, header, formData, body)
  let scheme = call_595781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595781.url(scheme.get, call_595781.host, call_595781.base,
                         call_595781.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595781, url, valid)

proc call*(call_595782: Call_GetGenerateOrganizationsAccessReport_595767;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595783 = newJObject()
  add(query_595783, "EntityPath", newJString(EntityPath))
  add(query_595783, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_595783, "Action", newJString(Action))
  add(query_595783, "Version", newJString(Version))
  result = call_595782.call(nil, query_595783, nil, nil, nil)

var getGenerateOrganizationsAccessReport* = Call_GetGenerateOrganizationsAccessReport_595767(
    name: "getGenerateOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_GetGenerateOrganizationsAccessReport_595768, base: "/",
    url: url_GetGenerateOrganizationsAccessReport_595769,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateServiceLastAccessedDetails_595818 = ref object of OpenApiRestCall_593437
proc url_PostGenerateServiceLastAccessedDetails_595820(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGenerateServiceLastAccessedDetails_595819(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595821 = query.getOrDefault("Action")
  valid_595821 = validateParameter(valid_595821, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_595821 != nil:
    section.add "Action", valid_595821
  var valid_595822 = query.getOrDefault("Version")
  valid_595822 = validateParameter(valid_595822, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595822 != nil:
    section.add "Version", valid_595822
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595823 = header.getOrDefault("X-Amz-Date")
  valid_595823 = validateParameter(valid_595823, JString, required = false,
                                 default = nil)
  if valid_595823 != nil:
    section.add "X-Amz-Date", valid_595823
  var valid_595824 = header.getOrDefault("X-Amz-Security-Token")
  valid_595824 = validateParameter(valid_595824, JString, required = false,
                                 default = nil)
  if valid_595824 != nil:
    section.add "X-Amz-Security-Token", valid_595824
  var valid_595825 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595825 = validateParameter(valid_595825, JString, required = false,
                                 default = nil)
  if valid_595825 != nil:
    section.add "X-Amz-Content-Sha256", valid_595825
  var valid_595826 = header.getOrDefault("X-Amz-Algorithm")
  valid_595826 = validateParameter(valid_595826, JString, required = false,
                                 default = nil)
  if valid_595826 != nil:
    section.add "X-Amz-Algorithm", valid_595826
  var valid_595827 = header.getOrDefault("X-Amz-Signature")
  valid_595827 = validateParameter(valid_595827, JString, required = false,
                                 default = nil)
  if valid_595827 != nil:
    section.add "X-Amz-Signature", valid_595827
  var valid_595828 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595828 = validateParameter(valid_595828, JString, required = false,
                                 default = nil)
  if valid_595828 != nil:
    section.add "X-Amz-SignedHeaders", valid_595828
  var valid_595829 = header.getOrDefault("X-Amz-Credential")
  valid_595829 = validateParameter(valid_595829, JString, required = false,
                                 default = nil)
  if valid_595829 != nil:
    section.add "X-Amz-Credential", valid_595829
  result.add "header", section
  ## parameters in `formData` object:
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Arn` field"
  var valid_595830 = formData.getOrDefault("Arn")
  valid_595830 = validateParameter(valid_595830, JString, required = true,
                                 default = nil)
  if valid_595830 != nil:
    section.add "Arn", valid_595830
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595831: Call_PostGenerateServiceLastAccessedDetails_595818;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595831.validator(path, query, header, formData, body)
  let scheme = call_595831.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595831.url(scheme.get, call_595831.host, call_595831.base,
                         call_595831.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595831, url, valid)

proc call*(call_595832: Call_PostGenerateServiceLastAccessedDetails_595818;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595833 = newJObject()
  var formData_595834 = newJObject()
  add(formData_595834, "Arn", newJString(Arn))
  add(query_595833, "Action", newJString(Action))
  add(query_595833, "Version", newJString(Version))
  result = call_595832.call(nil, query_595833, nil, formData_595834, nil)

var postGenerateServiceLastAccessedDetails* = Call_PostGenerateServiceLastAccessedDetails_595818(
    name: "postGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_PostGenerateServiceLastAccessedDetails_595819, base: "/",
    url: url_PostGenerateServiceLastAccessedDetails_595820,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateServiceLastAccessedDetails_595802 = ref object of OpenApiRestCall_593437
proc url_GetGenerateServiceLastAccessedDetails_595804(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGenerateServiceLastAccessedDetails_595803(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595805 = query.getOrDefault("Action")
  valid_595805 = validateParameter(valid_595805, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_595805 != nil:
    section.add "Action", valid_595805
  var valid_595806 = query.getOrDefault("Arn")
  valid_595806 = validateParameter(valid_595806, JString, required = true,
                                 default = nil)
  if valid_595806 != nil:
    section.add "Arn", valid_595806
  var valid_595807 = query.getOrDefault("Version")
  valid_595807 = validateParameter(valid_595807, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595807 != nil:
    section.add "Version", valid_595807
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595808 = header.getOrDefault("X-Amz-Date")
  valid_595808 = validateParameter(valid_595808, JString, required = false,
                                 default = nil)
  if valid_595808 != nil:
    section.add "X-Amz-Date", valid_595808
  var valid_595809 = header.getOrDefault("X-Amz-Security-Token")
  valid_595809 = validateParameter(valid_595809, JString, required = false,
                                 default = nil)
  if valid_595809 != nil:
    section.add "X-Amz-Security-Token", valid_595809
  var valid_595810 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595810 = validateParameter(valid_595810, JString, required = false,
                                 default = nil)
  if valid_595810 != nil:
    section.add "X-Amz-Content-Sha256", valid_595810
  var valid_595811 = header.getOrDefault("X-Amz-Algorithm")
  valid_595811 = validateParameter(valid_595811, JString, required = false,
                                 default = nil)
  if valid_595811 != nil:
    section.add "X-Amz-Algorithm", valid_595811
  var valid_595812 = header.getOrDefault("X-Amz-Signature")
  valid_595812 = validateParameter(valid_595812, JString, required = false,
                                 default = nil)
  if valid_595812 != nil:
    section.add "X-Amz-Signature", valid_595812
  var valid_595813 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595813 = validateParameter(valid_595813, JString, required = false,
                                 default = nil)
  if valid_595813 != nil:
    section.add "X-Amz-SignedHeaders", valid_595813
  var valid_595814 = header.getOrDefault("X-Amz-Credential")
  valid_595814 = validateParameter(valid_595814, JString, required = false,
                                 default = nil)
  if valid_595814 != nil:
    section.add "X-Amz-Credential", valid_595814
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595815: Call_GetGenerateServiceLastAccessedDetails_595802;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595815.validator(path, query, header, formData, body)
  let scheme = call_595815.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595815.url(scheme.get, call_595815.host, call_595815.base,
                         call_595815.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595815, url, valid)

proc call*(call_595816: Call_GetGenerateServiceLastAccessedDetails_595802;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_595817 = newJObject()
  add(query_595817, "Action", newJString(Action))
  add(query_595817, "Arn", newJString(Arn))
  add(query_595817, "Version", newJString(Version))
  result = call_595816.call(nil, query_595817, nil, nil, nil)

var getGenerateServiceLastAccessedDetails* = Call_GetGenerateServiceLastAccessedDetails_595802(
    name: "getGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_GetGenerateServiceLastAccessedDetails_595803, base: "/",
    url: url_GetGenerateServiceLastAccessedDetails_595804,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccessKeyLastUsed_595851 = ref object of OpenApiRestCall_593437
proc url_PostGetAccessKeyLastUsed_595853(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetAccessKeyLastUsed_595852(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595854 = query.getOrDefault("Action")
  valid_595854 = validateParameter(valid_595854, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_595854 != nil:
    section.add "Action", valid_595854
  var valid_595855 = query.getOrDefault("Version")
  valid_595855 = validateParameter(valid_595855, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595855 != nil:
    section.add "Version", valid_595855
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595856 = header.getOrDefault("X-Amz-Date")
  valid_595856 = validateParameter(valid_595856, JString, required = false,
                                 default = nil)
  if valid_595856 != nil:
    section.add "X-Amz-Date", valid_595856
  var valid_595857 = header.getOrDefault("X-Amz-Security-Token")
  valid_595857 = validateParameter(valid_595857, JString, required = false,
                                 default = nil)
  if valid_595857 != nil:
    section.add "X-Amz-Security-Token", valid_595857
  var valid_595858 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595858 = validateParameter(valid_595858, JString, required = false,
                                 default = nil)
  if valid_595858 != nil:
    section.add "X-Amz-Content-Sha256", valid_595858
  var valid_595859 = header.getOrDefault("X-Amz-Algorithm")
  valid_595859 = validateParameter(valid_595859, JString, required = false,
                                 default = nil)
  if valid_595859 != nil:
    section.add "X-Amz-Algorithm", valid_595859
  var valid_595860 = header.getOrDefault("X-Amz-Signature")
  valid_595860 = validateParameter(valid_595860, JString, required = false,
                                 default = nil)
  if valid_595860 != nil:
    section.add "X-Amz-Signature", valid_595860
  var valid_595861 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595861 = validateParameter(valid_595861, JString, required = false,
                                 default = nil)
  if valid_595861 != nil:
    section.add "X-Amz-SignedHeaders", valid_595861
  var valid_595862 = header.getOrDefault("X-Amz-Credential")
  valid_595862 = validateParameter(valid_595862, JString, required = false,
                                 default = nil)
  if valid_595862 != nil:
    section.add "X-Amz-Credential", valid_595862
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_595863 = formData.getOrDefault("AccessKeyId")
  valid_595863 = validateParameter(valid_595863, JString, required = true,
                                 default = nil)
  if valid_595863 != nil:
    section.add "AccessKeyId", valid_595863
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595864: Call_PostGetAccessKeyLastUsed_595851; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_595864.validator(path, query, header, formData, body)
  let scheme = call_595864.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595864.url(scheme.get, call_595864.host, call_595864.base,
                         call_595864.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595864, url, valid)

proc call*(call_595865: Call_PostGetAccessKeyLastUsed_595851; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595866 = newJObject()
  var formData_595867 = newJObject()
  add(formData_595867, "AccessKeyId", newJString(AccessKeyId))
  add(query_595866, "Action", newJString(Action))
  add(query_595866, "Version", newJString(Version))
  result = call_595865.call(nil, query_595866, nil, formData_595867, nil)

var postGetAccessKeyLastUsed* = Call_PostGetAccessKeyLastUsed_595851(
    name: "postGetAccessKeyLastUsed", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_PostGetAccessKeyLastUsed_595852, base: "/",
    url: url_PostGetAccessKeyLastUsed_595853, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccessKeyLastUsed_595835 = ref object of OpenApiRestCall_593437
proc url_GetGetAccessKeyLastUsed_595837(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetAccessKeyLastUsed_595836(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccessKeyId` field"
  var valid_595838 = query.getOrDefault("AccessKeyId")
  valid_595838 = validateParameter(valid_595838, JString, required = true,
                                 default = nil)
  if valid_595838 != nil:
    section.add "AccessKeyId", valid_595838
  var valid_595839 = query.getOrDefault("Action")
  valid_595839 = validateParameter(valid_595839, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_595839 != nil:
    section.add "Action", valid_595839
  var valid_595840 = query.getOrDefault("Version")
  valid_595840 = validateParameter(valid_595840, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595840 != nil:
    section.add "Version", valid_595840
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595841 = header.getOrDefault("X-Amz-Date")
  valid_595841 = validateParameter(valid_595841, JString, required = false,
                                 default = nil)
  if valid_595841 != nil:
    section.add "X-Amz-Date", valid_595841
  var valid_595842 = header.getOrDefault("X-Amz-Security-Token")
  valid_595842 = validateParameter(valid_595842, JString, required = false,
                                 default = nil)
  if valid_595842 != nil:
    section.add "X-Amz-Security-Token", valid_595842
  var valid_595843 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595843 = validateParameter(valid_595843, JString, required = false,
                                 default = nil)
  if valid_595843 != nil:
    section.add "X-Amz-Content-Sha256", valid_595843
  var valid_595844 = header.getOrDefault("X-Amz-Algorithm")
  valid_595844 = validateParameter(valid_595844, JString, required = false,
                                 default = nil)
  if valid_595844 != nil:
    section.add "X-Amz-Algorithm", valid_595844
  var valid_595845 = header.getOrDefault("X-Amz-Signature")
  valid_595845 = validateParameter(valid_595845, JString, required = false,
                                 default = nil)
  if valid_595845 != nil:
    section.add "X-Amz-Signature", valid_595845
  var valid_595846 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595846 = validateParameter(valid_595846, JString, required = false,
                                 default = nil)
  if valid_595846 != nil:
    section.add "X-Amz-SignedHeaders", valid_595846
  var valid_595847 = header.getOrDefault("X-Amz-Credential")
  valid_595847 = validateParameter(valid_595847, JString, required = false,
                                 default = nil)
  if valid_595847 != nil:
    section.add "X-Amz-Credential", valid_595847
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595848: Call_GetGetAccessKeyLastUsed_595835; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_595848.validator(path, query, header, formData, body)
  let scheme = call_595848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595848.url(scheme.get, call_595848.host, call_595848.base,
                         call_595848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595848, url, valid)

proc call*(call_595849: Call_GetGetAccessKeyLastUsed_595835; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595850 = newJObject()
  add(query_595850, "AccessKeyId", newJString(AccessKeyId))
  add(query_595850, "Action", newJString(Action))
  add(query_595850, "Version", newJString(Version))
  result = call_595849.call(nil, query_595850, nil, nil, nil)

var getGetAccessKeyLastUsed* = Call_GetGetAccessKeyLastUsed_595835(
    name: "getGetAccessKeyLastUsed", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_GetGetAccessKeyLastUsed_595836, base: "/",
    url: url_GetGetAccessKeyLastUsed_595837, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountAuthorizationDetails_595886 = ref object of OpenApiRestCall_593437
proc url_PostGetAccountAuthorizationDetails_595888(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetAccountAuthorizationDetails_595887(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595889 = query.getOrDefault("Action")
  valid_595889 = validateParameter(valid_595889, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_595889 != nil:
    section.add "Action", valid_595889
  var valid_595890 = query.getOrDefault("Version")
  valid_595890 = validateParameter(valid_595890, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595890 != nil:
    section.add "Version", valid_595890
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595891 = header.getOrDefault("X-Amz-Date")
  valid_595891 = validateParameter(valid_595891, JString, required = false,
                                 default = nil)
  if valid_595891 != nil:
    section.add "X-Amz-Date", valid_595891
  var valid_595892 = header.getOrDefault("X-Amz-Security-Token")
  valid_595892 = validateParameter(valid_595892, JString, required = false,
                                 default = nil)
  if valid_595892 != nil:
    section.add "X-Amz-Security-Token", valid_595892
  var valid_595893 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595893 = validateParameter(valid_595893, JString, required = false,
                                 default = nil)
  if valid_595893 != nil:
    section.add "X-Amz-Content-Sha256", valid_595893
  var valid_595894 = header.getOrDefault("X-Amz-Algorithm")
  valid_595894 = validateParameter(valid_595894, JString, required = false,
                                 default = nil)
  if valid_595894 != nil:
    section.add "X-Amz-Algorithm", valid_595894
  var valid_595895 = header.getOrDefault("X-Amz-Signature")
  valid_595895 = validateParameter(valid_595895, JString, required = false,
                                 default = nil)
  if valid_595895 != nil:
    section.add "X-Amz-Signature", valid_595895
  var valid_595896 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595896 = validateParameter(valid_595896, JString, required = false,
                                 default = nil)
  if valid_595896 != nil:
    section.add "X-Amz-SignedHeaders", valid_595896
  var valid_595897 = header.getOrDefault("X-Amz-Credential")
  valid_595897 = validateParameter(valid_595897, JString, required = false,
                                 default = nil)
  if valid_595897 != nil:
    section.add "X-Amz-Credential", valid_595897
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_595898 = formData.getOrDefault("Filter")
  valid_595898 = validateParameter(valid_595898, JArray, required = false,
                                 default = nil)
  if valid_595898 != nil:
    section.add "Filter", valid_595898
  var valid_595899 = formData.getOrDefault("Marker")
  valid_595899 = validateParameter(valid_595899, JString, required = false,
                                 default = nil)
  if valid_595899 != nil:
    section.add "Marker", valid_595899
  var valid_595900 = formData.getOrDefault("MaxItems")
  valid_595900 = validateParameter(valid_595900, JInt, required = false, default = nil)
  if valid_595900 != nil:
    section.add "MaxItems", valid_595900
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595901: Call_PostGetAccountAuthorizationDetails_595886;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_595901.validator(path, query, header, formData, body)
  let scheme = call_595901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595901.url(scheme.get, call_595901.host, call_595901.base,
                         call_595901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595901, url, valid)

proc call*(call_595902: Call_PostGetAccountAuthorizationDetails_595886;
          Filter: JsonNode = nil; Marker: string = "";
          Action: string = "GetAccountAuthorizationDetails"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_595903 = newJObject()
  var formData_595904 = newJObject()
  if Filter != nil:
    formData_595904.add "Filter", Filter
  add(formData_595904, "Marker", newJString(Marker))
  add(query_595903, "Action", newJString(Action))
  add(formData_595904, "MaxItems", newJInt(MaxItems))
  add(query_595903, "Version", newJString(Version))
  result = call_595902.call(nil, query_595903, nil, formData_595904, nil)

var postGetAccountAuthorizationDetails* = Call_PostGetAccountAuthorizationDetails_595886(
    name: "postGetAccountAuthorizationDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_PostGetAccountAuthorizationDetails_595887, base: "/",
    url: url_PostGetAccountAuthorizationDetails_595888,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountAuthorizationDetails_595868 = ref object of OpenApiRestCall_593437
proc url_GetGetAccountAuthorizationDetails_595870(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetAccountAuthorizationDetails_595869(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_595871 = query.getOrDefault("Filter")
  valid_595871 = validateParameter(valid_595871, JArray, required = false,
                                 default = nil)
  if valid_595871 != nil:
    section.add "Filter", valid_595871
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595872 = query.getOrDefault("Action")
  valid_595872 = validateParameter(valid_595872, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_595872 != nil:
    section.add "Action", valid_595872
  var valid_595873 = query.getOrDefault("Marker")
  valid_595873 = validateParameter(valid_595873, JString, required = false,
                                 default = nil)
  if valid_595873 != nil:
    section.add "Marker", valid_595873
  var valid_595874 = query.getOrDefault("MaxItems")
  valid_595874 = validateParameter(valid_595874, JInt, required = false, default = nil)
  if valid_595874 != nil:
    section.add "MaxItems", valid_595874
  var valid_595875 = query.getOrDefault("Version")
  valid_595875 = validateParameter(valid_595875, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595875 != nil:
    section.add "Version", valid_595875
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595876 = header.getOrDefault("X-Amz-Date")
  valid_595876 = validateParameter(valid_595876, JString, required = false,
                                 default = nil)
  if valid_595876 != nil:
    section.add "X-Amz-Date", valid_595876
  var valid_595877 = header.getOrDefault("X-Amz-Security-Token")
  valid_595877 = validateParameter(valid_595877, JString, required = false,
                                 default = nil)
  if valid_595877 != nil:
    section.add "X-Amz-Security-Token", valid_595877
  var valid_595878 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595878 = validateParameter(valid_595878, JString, required = false,
                                 default = nil)
  if valid_595878 != nil:
    section.add "X-Amz-Content-Sha256", valid_595878
  var valid_595879 = header.getOrDefault("X-Amz-Algorithm")
  valid_595879 = validateParameter(valid_595879, JString, required = false,
                                 default = nil)
  if valid_595879 != nil:
    section.add "X-Amz-Algorithm", valid_595879
  var valid_595880 = header.getOrDefault("X-Amz-Signature")
  valid_595880 = validateParameter(valid_595880, JString, required = false,
                                 default = nil)
  if valid_595880 != nil:
    section.add "X-Amz-Signature", valid_595880
  var valid_595881 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595881 = validateParameter(valid_595881, JString, required = false,
                                 default = nil)
  if valid_595881 != nil:
    section.add "X-Amz-SignedHeaders", valid_595881
  var valid_595882 = header.getOrDefault("X-Amz-Credential")
  valid_595882 = validateParameter(valid_595882, JString, required = false,
                                 default = nil)
  if valid_595882 != nil:
    section.add "X-Amz-Credential", valid_595882
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595883: Call_GetGetAccountAuthorizationDetails_595868;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_595883.validator(path, query, header, formData, body)
  let scheme = call_595883.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595883.url(scheme.get, call_595883.host, call_595883.base,
                         call_595883.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595883, url, valid)

proc call*(call_595884: Call_GetGetAccountAuthorizationDetails_595868;
          Filter: JsonNode = nil; Action: string = "GetAccountAuthorizationDetails";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_595885 = newJObject()
  if Filter != nil:
    query_595885.add "Filter", Filter
  add(query_595885, "Action", newJString(Action))
  add(query_595885, "Marker", newJString(Marker))
  add(query_595885, "MaxItems", newJInt(MaxItems))
  add(query_595885, "Version", newJString(Version))
  result = call_595884.call(nil, query_595885, nil, nil, nil)

var getGetAccountAuthorizationDetails* = Call_GetGetAccountAuthorizationDetails_595868(
    name: "getGetAccountAuthorizationDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_GetGetAccountAuthorizationDetails_595869, base: "/",
    url: url_GetGetAccountAuthorizationDetails_595870,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountPasswordPolicy_595920 = ref object of OpenApiRestCall_593437
proc url_PostGetAccountPasswordPolicy_595922(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetAccountPasswordPolicy_595921(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595923 = query.getOrDefault("Action")
  valid_595923 = validateParameter(valid_595923, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_595923 != nil:
    section.add "Action", valid_595923
  var valid_595924 = query.getOrDefault("Version")
  valid_595924 = validateParameter(valid_595924, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595924 != nil:
    section.add "Version", valid_595924
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595925 = header.getOrDefault("X-Amz-Date")
  valid_595925 = validateParameter(valid_595925, JString, required = false,
                                 default = nil)
  if valid_595925 != nil:
    section.add "X-Amz-Date", valid_595925
  var valid_595926 = header.getOrDefault("X-Amz-Security-Token")
  valid_595926 = validateParameter(valid_595926, JString, required = false,
                                 default = nil)
  if valid_595926 != nil:
    section.add "X-Amz-Security-Token", valid_595926
  var valid_595927 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595927 = validateParameter(valid_595927, JString, required = false,
                                 default = nil)
  if valid_595927 != nil:
    section.add "X-Amz-Content-Sha256", valid_595927
  var valid_595928 = header.getOrDefault("X-Amz-Algorithm")
  valid_595928 = validateParameter(valid_595928, JString, required = false,
                                 default = nil)
  if valid_595928 != nil:
    section.add "X-Amz-Algorithm", valid_595928
  var valid_595929 = header.getOrDefault("X-Amz-Signature")
  valid_595929 = validateParameter(valid_595929, JString, required = false,
                                 default = nil)
  if valid_595929 != nil:
    section.add "X-Amz-Signature", valid_595929
  var valid_595930 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595930 = validateParameter(valid_595930, JString, required = false,
                                 default = nil)
  if valid_595930 != nil:
    section.add "X-Amz-SignedHeaders", valid_595930
  var valid_595931 = header.getOrDefault("X-Amz-Credential")
  valid_595931 = validateParameter(valid_595931, JString, required = false,
                                 default = nil)
  if valid_595931 != nil:
    section.add "X-Amz-Credential", valid_595931
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595932: Call_PostGetAccountPasswordPolicy_595920; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_595932.validator(path, query, header, formData, body)
  let scheme = call_595932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595932.url(scheme.get, call_595932.host, call_595932.base,
                         call_595932.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595932, url, valid)

proc call*(call_595933: Call_PostGetAccountPasswordPolicy_595920;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595934 = newJObject()
  add(query_595934, "Action", newJString(Action))
  add(query_595934, "Version", newJString(Version))
  result = call_595933.call(nil, query_595934, nil, nil, nil)

var postGetAccountPasswordPolicy* = Call_PostGetAccountPasswordPolicy_595920(
    name: "postGetAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_PostGetAccountPasswordPolicy_595921, base: "/",
    url: url_PostGetAccountPasswordPolicy_595922,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountPasswordPolicy_595905 = ref object of OpenApiRestCall_593437
proc url_GetGetAccountPasswordPolicy_595907(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetAccountPasswordPolicy_595906(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595908 = query.getOrDefault("Action")
  valid_595908 = validateParameter(valid_595908, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_595908 != nil:
    section.add "Action", valid_595908
  var valid_595909 = query.getOrDefault("Version")
  valid_595909 = validateParameter(valid_595909, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595909 != nil:
    section.add "Version", valid_595909
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595910 = header.getOrDefault("X-Amz-Date")
  valid_595910 = validateParameter(valid_595910, JString, required = false,
                                 default = nil)
  if valid_595910 != nil:
    section.add "X-Amz-Date", valid_595910
  var valid_595911 = header.getOrDefault("X-Amz-Security-Token")
  valid_595911 = validateParameter(valid_595911, JString, required = false,
                                 default = nil)
  if valid_595911 != nil:
    section.add "X-Amz-Security-Token", valid_595911
  var valid_595912 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595912 = validateParameter(valid_595912, JString, required = false,
                                 default = nil)
  if valid_595912 != nil:
    section.add "X-Amz-Content-Sha256", valid_595912
  var valid_595913 = header.getOrDefault("X-Amz-Algorithm")
  valid_595913 = validateParameter(valid_595913, JString, required = false,
                                 default = nil)
  if valid_595913 != nil:
    section.add "X-Amz-Algorithm", valid_595913
  var valid_595914 = header.getOrDefault("X-Amz-Signature")
  valid_595914 = validateParameter(valid_595914, JString, required = false,
                                 default = nil)
  if valid_595914 != nil:
    section.add "X-Amz-Signature", valid_595914
  var valid_595915 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595915 = validateParameter(valid_595915, JString, required = false,
                                 default = nil)
  if valid_595915 != nil:
    section.add "X-Amz-SignedHeaders", valid_595915
  var valid_595916 = header.getOrDefault("X-Amz-Credential")
  valid_595916 = validateParameter(valid_595916, JString, required = false,
                                 default = nil)
  if valid_595916 != nil:
    section.add "X-Amz-Credential", valid_595916
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595917: Call_GetGetAccountPasswordPolicy_595905; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_595917.validator(path, query, header, formData, body)
  let scheme = call_595917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595917.url(scheme.get, call_595917.host, call_595917.base,
                         call_595917.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595917, url, valid)

proc call*(call_595918: Call_GetGetAccountPasswordPolicy_595905;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595919 = newJObject()
  add(query_595919, "Action", newJString(Action))
  add(query_595919, "Version", newJString(Version))
  result = call_595918.call(nil, query_595919, nil, nil, nil)

var getGetAccountPasswordPolicy* = Call_GetGetAccountPasswordPolicy_595905(
    name: "getGetAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_GetGetAccountPasswordPolicy_595906, base: "/",
    url: url_GetGetAccountPasswordPolicy_595907,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSummary_595950 = ref object of OpenApiRestCall_593437
proc url_PostGetAccountSummary_595952(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetAccountSummary_595951(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595953 = query.getOrDefault("Action")
  valid_595953 = validateParameter(valid_595953, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_595953 != nil:
    section.add "Action", valid_595953
  var valid_595954 = query.getOrDefault("Version")
  valid_595954 = validateParameter(valid_595954, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595954 != nil:
    section.add "Version", valid_595954
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595955 = header.getOrDefault("X-Amz-Date")
  valid_595955 = validateParameter(valid_595955, JString, required = false,
                                 default = nil)
  if valid_595955 != nil:
    section.add "X-Amz-Date", valid_595955
  var valid_595956 = header.getOrDefault("X-Amz-Security-Token")
  valid_595956 = validateParameter(valid_595956, JString, required = false,
                                 default = nil)
  if valid_595956 != nil:
    section.add "X-Amz-Security-Token", valid_595956
  var valid_595957 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595957 = validateParameter(valid_595957, JString, required = false,
                                 default = nil)
  if valid_595957 != nil:
    section.add "X-Amz-Content-Sha256", valid_595957
  var valid_595958 = header.getOrDefault("X-Amz-Algorithm")
  valid_595958 = validateParameter(valid_595958, JString, required = false,
                                 default = nil)
  if valid_595958 != nil:
    section.add "X-Amz-Algorithm", valid_595958
  var valid_595959 = header.getOrDefault("X-Amz-Signature")
  valid_595959 = validateParameter(valid_595959, JString, required = false,
                                 default = nil)
  if valid_595959 != nil:
    section.add "X-Amz-Signature", valid_595959
  var valid_595960 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595960 = validateParameter(valid_595960, JString, required = false,
                                 default = nil)
  if valid_595960 != nil:
    section.add "X-Amz-SignedHeaders", valid_595960
  var valid_595961 = header.getOrDefault("X-Amz-Credential")
  valid_595961 = validateParameter(valid_595961, JString, required = false,
                                 default = nil)
  if valid_595961 != nil:
    section.add "X-Amz-Credential", valid_595961
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595962: Call_PostGetAccountSummary_595950; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595962.validator(path, query, header, formData, body)
  let scheme = call_595962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595962.url(scheme.get, call_595962.host, call_595962.base,
                         call_595962.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595962, url, valid)

proc call*(call_595963: Call_PostGetAccountSummary_595950;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595964 = newJObject()
  add(query_595964, "Action", newJString(Action))
  add(query_595964, "Version", newJString(Version))
  result = call_595963.call(nil, query_595964, nil, nil, nil)

var postGetAccountSummary* = Call_PostGetAccountSummary_595950(
    name: "postGetAccountSummary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_PostGetAccountSummary_595951, base: "/",
    url: url_PostGetAccountSummary_595952, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSummary_595935 = ref object of OpenApiRestCall_593437
proc url_GetGetAccountSummary_595937(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetAccountSummary_595936(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595938 = query.getOrDefault("Action")
  valid_595938 = validateParameter(valid_595938, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_595938 != nil:
    section.add "Action", valid_595938
  var valid_595939 = query.getOrDefault("Version")
  valid_595939 = validateParameter(valid_595939, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595939 != nil:
    section.add "Version", valid_595939
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595940 = header.getOrDefault("X-Amz-Date")
  valid_595940 = validateParameter(valid_595940, JString, required = false,
                                 default = nil)
  if valid_595940 != nil:
    section.add "X-Amz-Date", valid_595940
  var valid_595941 = header.getOrDefault("X-Amz-Security-Token")
  valid_595941 = validateParameter(valid_595941, JString, required = false,
                                 default = nil)
  if valid_595941 != nil:
    section.add "X-Amz-Security-Token", valid_595941
  var valid_595942 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595942 = validateParameter(valid_595942, JString, required = false,
                                 default = nil)
  if valid_595942 != nil:
    section.add "X-Amz-Content-Sha256", valid_595942
  var valid_595943 = header.getOrDefault("X-Amz-Algorithm")
  valid_595943 = validateParameter(valid_595943, JString, required = false,
                                 default = nil)
  if valid_595943 != nil:
    section.add "X-Amz-Algorithm", valid_595943
  var valid_595944 = header.getOrDefault("X-Amz-Signature")
  valid_595944 = validateParameter(valid_595944, JString, required = false,
                                 default = nil)
  if valid_595944 != nil:
    section.add "X-Amz-Signature", valid_595944
  var valid_595945 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595945 = validateParameter(valid_595945, JString, required = false,
                                 default = nil)
  if valid_595945 != nil:
    section.add "X-Amz-SignedHeaders", valid_595945
  var valid_595946 = header.getOrDefault("X-Amz-Credential")
  valid_595946 = validateParameter(valid_595946, JString, required = false,
                                 default = nil)
  if valid_595946 != nil:
    section.add "X-Amz-Credential", valid_595946
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595947: Call_GetGetAccountSummary_595935; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_595947.validator(path, query, header, formData, body)
  let scheme = call_595947.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595947.url(scheme.get, call_595947.host, call_595947.base,
                         call_595947.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595947, url, valid)

proc call*(call_595948: Call_GetGetAccountSummary_595935;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595949 = newJObject()
  add(query_595949, "Action", newJString(Action))
  add(query_595949, "Version", newJString(Version))
  result = call_595948.call(nil, query_595949, nil, nil, nil)

var getGetAccountSummary* = Call_GetGetAccountSummary_595935(
    name: "getGetAccountSummary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_GetGetAccountSummary_595936, base: "/",
    url: url_GetGetAccountSummary_595937, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForCustomPolicy_595981 = ref object of OpenApiRestCall_593437
proc url_PostGetContextKeysForCustomPolicy_595983(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetContextKeysForCustomPolicy_595982(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595984 = query.getOrDefault("Action")
  valid_595984 = validateParameter(valid_595984, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_595984 != nil:
    section.add "Action", valid_595984
  var valid_595985 = query.getOrDefault("Version")
  valid_595985 = validateParameter(valid_595985, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595985 != nil:
    section.add "Version", valid_595985
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595986 = header.getOrDefault("X-Amz-Date")
  valid_595986 = validateParameter(valid_595986, JString, required = false,
                                 default = nil)
  if valid_595986 != nil:
    section.add "X-Amz-Date", valid_595986
  var valid_595987 = header.getOrDefault("X-Amz-Security-Token")
  valid_595987 = validateParameter(valid_595987, JString, required = false,
                                 default = nil)
  if valid_595987 != nil:
    section.add "X-Amz-Security-Token", valid_595987
  var valid_595988 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595988 = validateParameter(valid_595988, JString, required = false,
                                 default = nil)
  if valid_595988 != nil:
    section.add "X-Amz-Content-Sha256", valid_595988
  var valid_595989 = header.getOrDefault("X-Amz-Algorithm")
  valid_595989 = validateParameter(valid_595989, JString, required = false,
                                 default = nil)
  if valid_595989 != nil:
    section.add "X-Amz-Algorithm", valid_595989
  var valid_595990 = header.getOrDefault("X-Amz-Signature")
  valid_595990 = validateParameter(valid_595990, JString, required = false,
                                 default = nil)
  if valid_595990 != nil:
    section.add "X-Amz-Signature", valid_595990
  var valid_595991 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595991 = validateParameter(valid_595991, JString, required = false,
                                 default = nil)
  if valid_595991 != nil:
    section.add "X-Amz-SignedHeaders", valid_595991
  var valid_595992 = header.getOrDefault("X-Amz-Credential")
  valid_595992 = validateParameter(valid_595992, JString, required = false,
                                 default = nil)
  if valid_595992 != nil:
    section.add "X-Amz-Credential", valid_595992
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `PolicyInputList` field"
  var valid_595993 = formData.getOrDefault("PolicyInputList")
  valid_595993 = validateParameter(valid_595993, JArray, required = true, default = nil)
  if valid_595993 != nil:
    section.add "PolicyInputList", valid_595993
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595994: Call_PostGetContextKeysForCustomPolicy_595981;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_595994.validator(path, query, header, formData, body)
  let scheme = call_595994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595994.url(scheme.get, call_595994.host, call_595994.base,
                         call_595994.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595994, url, valid)

proc call*(call_595995: Call_PostGetContextKeysForCustomPolicy_595981;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   Action: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_595996 = newJObject()
  var formData_595997 = newJObject()
  add(query_595996, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_595997.add "PolicyInputList", PolicyInputList
  add(query_595996, "Version", newJString(Version))
  result = call_595995.call(nil, query_595996, nil, formData_595997, nil)

var postGetContextKeysForCustomPolicy* = Call_PostGetContextKeysForCustomPolicy_595981(
    name: "postGetContextKeysForCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_PostGetContextKeysForCustomPolicy_595982, base: "/",
    url: url_PostGetContextKeysForCustomPolicy_595983,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForCustomPolicy_595965 = ref object of OpenApiRestCall_593437
proc url_GetGetContextKeysForCustomPolicy_595967(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetContextKeysForCustomPolicy_595966(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyInputList` field"
  var valid_595968 = query.getOrDefault("PolicyInputList")
  valid_595968 = validateParameter(valid_595968, JArray, required = true, default = nil)
  if valid_595968 != nil:
    section.add "PolicyInputList", valid_595968
  var valid_595969 = query.getOrDefault("Action")
  valid_595969 = validateParameter(valid_595969, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_595969 != nil:
    section.add "Action", valid_595969
  var valid_595970 = query.getOrDefault("Version")
  valid_595970 = validateParameter(valid_595970, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_595970 != nil:
    section.add "Version", valid_595970
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_595971 = header.getOrDefault("X-Amz-Date")
  valid_595971 = validateParameter(valid_595971, JString, required = false,
                                 default = nil)
  if valid_595971 != nil:
    section.add "X-Amz-Date", valid_595971
  var valid_595972 = header.getOrDefault("X-Amz-Security-Token")
  valid_595972 = validateParameter(valid_595972, JString, required = false,
                                 default = nil)
  if valid_595972 != nil:
    section.add "X-Amz-Security-Token", valid_595972
  var valid_595973 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595973 = validateParameter(valid_595973, JString, required = false,
                                 default = nil)
  if valid_595973 != nil:
    section.add "X-Amz-Content-Sha256", valid_595973
  var valid_595974 = header.getOrDefault("X-Amz-Algorithm")
  valid_595974 = validateParameter(valid_595974, JString, required = false,
                                 default = nil)
  if valid_595974 != nil:
    section.add "X-Amz-Algorithm", valid_595974
  var valid_595975 = header.getOrDefault("X-Amz-Signature")
  valid_595975 = validateParameter(valid_595975, JString, required = false,
                                 default = nil)
  if valid_595975 != nil:
    section.add "X-Amz-Signature", valid_595975
  var valid_595976 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595976 = validateParameter(valid_595976, JString, required = false,
                                 default = nil)
  if valid_595976 != nil:
    section.add "X-Amz-SignedHeaders", valid_595976
  var valid_595977 = header.getOrDefault("X-Amz-Credential")
  valid_595977 = validateParameter(valid_595977, JString, required = false,
                                 default = nil)
  if valid_595977 != nil:
    section.add "X-Amz-Credential", valid_595977
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595978: Call_GetGetContextKeysForCustomPolicy_595965;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_595978.validator(path, query, header, formData, body)
  let scheme = call_595978.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595978.url(scheme.get, call_595978.host, call_595978.base,
                         call_595978.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595978, url, valid)

proc call*(call_595979: Call_GetGetContextKeysForCustomPolicy_595965;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595980 = newJObject()
  if PolicyInputList != nil:
    query_595980.add "PolicyInputList", PolicyInputList
  add(query_595980, "Action", newJString(Action))
  add(query_595980, "Version", newJString(Version))
  result = call_595979.call(nil, query_595980, nil, nil, nil)

var getGetContextKeysForCustomPolicy* = Call_GetGetContextKeysForCustomPolicy_595965(
    name: "getGetContextKeysForCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_GetGetContextKeysForCustomPolicy_595966, base: "/",
    url: url_GetGetContextKeysForCustomPolicy_595967,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForPrincipalPolicy_596015 = ref object of OpenApiRestCall_593437
proc url_PostGetContextKeysForPrincipalPolicy_596017(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetContextKeysForPrincipalPolicy_596016(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596018 = query.getOrDefault("Action")
  valid_596018 = validateParameter(valid_596018, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_596018 != nil:
    section.add "Action", valid_596018
  var valid_596019 = query.getOrDefault("Version")
  valid_596019 = validateParameter(valid_596019, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596019 != nil:
    section.add "Version", valid_596019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596020 = header.getOrDefault("X-Amz-Date")
  valid_596020 = validateParameter(valid_596020, JString, required = false,
                                 default = nil)
  if valid_596020 != nil:
    section.add "X-Amz-Date", valid_596020
  var valid_596021 = header.getOrDefault("X-Amz-Security-Token")
  valid_596021 = validateParameter(valid_596021, JString, required = false,
                                 default = nil)
  if valid_596021 != nil:
    section.add "X-Amz-Security-Token", valid_596021
  var valid_596022 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596022 = validateParameter(valid_596022, JString, required = false,
                                 default = nil)
  if valid_596022 != nil:
    section.add "X-Amz-Content-Sha256", valid_596022
  var valid_596023 = header.getOrDefault("X-Amz-Algorithm")
  valid_596023 = validateParameter(valid_596023, JString, required = false,
                                 default = nil)
  if valid_596023 != nil:
    section.add "X-Amz-Algorithm", valid_596023
  var valid_596024 = header.getOrDefault("X-Amz-Signature")
  valid_596024 = validateParameter(valid_596024, JString, required = false,
                                 default = nil)
  if valid_596024 != nil:
    section.add "X-Amz-Signature", valid_596024
  var valid_596025 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596025 = validateParameter(valid_596025, JString, required = false,
                                 default = nil)
  if valid_596025 != nil:
    section.add "X-Amz-SignedHeaders", valid_596025
  var valid_596026 = header.getOrDefault("X-Amz-Credential")
  valid_596026 = validateParameter(valid_596026, JString, required = false,
                                 default = nil)
  if valid_596026 != nil:
    section.add "X-Amz-Credential", valid_596026
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  var valid_596027 = formData.getOrDefault("PolicyInputList")
  valid_596027 = validateParameter(valid_596027, JArray, required = false,
                                 default = nil)
  if valid_596027 != nil:
    section.add "PolicyInputList", valid_596027
  assert formData != nil, "formData argument is necessary due to required `PolicySourceArn` field"
  var valid_596028 = formData.getOrDefault("PolicySourceArn")
  valid_596028 = validateParameter(valid_596028, JString, required = true,
                                 default = nil)
  if valid_596028 != nil:
    section.add "PolicySourceArn", valid_596028
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596029: Call_PostGetContextKeysForPrincipalPolicy_596015;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_596029.validator(path, query, header, formData, body)
  let scheme = call_596029.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596029.url(scheme.get, call_596029.host, call_596029.base,
                         call_596029.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596029, url, valid)

proc call*(call_596030: Call_PostGetContextKeysForPrincipalPolicy_596015;
          PolicySourceArn: string;
          Action: string = "GetContextKeysForPrincipalPolicy";
          PolicyInputList: JsonNode = nil; Version: string = "2010-05-08"): Recallable =
  ## postGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   Action: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_596031 = newJObject()
  var formData_596032 = newJObject()
  add(query_596031, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_596032.add "PolicyInputList", PolicyInputList
  add(formData_596032, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_596031, "Version", newJString(Version))
  result = call_596030.call(nil, query_596031, nil, formData_596032, nil)

var postGetContextKeysForPrincipalPolicy* = Call_PostGetContextKeysForPrincipalPolicy_596015(
    name: "postGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_PostGetContextKeysForPrincipalPolicy_596016, base: "/",
    url: url_PostGetContextKeysForPrincipalPolicy_596017,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForPrincipalPolicy_595998 = ref object of OpenApiRestCall_593437
proc url_GetGetContextKeysForPrincipalPolicy_596000(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetContextKeysForPrincipalPolicy_595999(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_596001 = query.getOrDefault("PolicyInputList")
  valid_596001 = validateParameter(valid_596001, JArray, required = false,
                                 default = nil)
  if valid_596001 != nil:
    section.add "PolicyInputList", valid_596001
  assert query != nil,
        "query argument is necessary due to required `PolicySourceArn` field"
  var valid_596002 = query.getOrDefault("PolicySourceArn")
  valid_596002 = validateParameter(valid_596002, JString, required = true,
                                 default = nil)
  if valid_596002 != nil:
    section.add "PolicySourceArn", valid_596002
  var valid_596003 = query.getOrDefault("Action")
  valid_596003 = validateParameter(valid_596003, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_596003 != nil:
    section.add "Action", valid_596003
  var valid_596004 = query.getOrDefault("Version")
  valid_596004 = validateParameter(valid_596004, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596004 != nil:
    section.add "Version", valid_596004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596005 = header.getOrDefault("X-Amz-Date")
  valid_596005 = validateParameter(valid_596005, JString, required = false,
                                 default = nil)
  if valid_596005 != nil:
    section.add "X-Amz-Date", valid_596005
  var valid_596006 = header.getOrDefault("X-Amz-Security-Token")
  valid_596006 = validateParameter(valid_596006, JString, required = false,
                                 default = nil)
  if valid_596006 != nil:
    section.add "X-Amz-Security-Token", valid_596006
  var valid_596007 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596007 = validateParameter(valid_596007, JString, required = false,
                                 default = nil)
  if valid_596007 != nil:
    section.add "X-Amz-Content-Sha256", valid_596007
  var valid_596008 = header.getOrDefault("X-Amz-Algorithm")
  valid_596008 = validateParameter(valid_596008, JString, required = false,
                                 default = nil)
  if valid_596008 != nil:
    section.add "X-Amz-Algorithm", valid_596008
  var valid_596009 = header.getOrDefault("X-Amz-Signature")
  valid_596009 = validateParameter(valid_596009, JString, required = false,
                                 default = nil)
  if valid_596009 != nil:
    section.add "X-Amz-Signature", valid_596009
  var valid_596010 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596010 = validateParameter(valid_596010, JString, required = false,
                                 default = nil)
  if valid_596010 != nil:
    section.add "X-Amz-SignedHeaders", valid_596010
  var valid_596011 = header.getOrDefault("X-Amz-Credential")
  valid_596011 = validateParameter(valid_596011, JString, required = false,
                                 default = nil)
  if valid_596011 != nil:
    section.add "X-Amz-Credential", valid_596011
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596012: Call_GetGetContextKeysForPrincipalPolicy_595998;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_596012.validator(path, query, header, formData, body)
  let scheme = call_596012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596012.url(scheme.get, call_596012.host, call_596012.base,
                         call_596012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596012, url, valid)

proc call*(call_596013: Call_GetGetContextKeysForPrincipalPolicy_595998;
          PolicySourceArn: string; PolicyInputList: JsonNode = nil;
          Action: string = "GetContextKeysForPrincipalPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596014 = newJObject()
  if PolicyInputList != nil:
    query_596014.add "PolicyInputList", PolicyInputList
  add(query_596014, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_596014, "Action", newJString(Action))
  add(query_596014, "Version", newJString(Version))
  result = call_596013.call(nil, query_596014, nil, nil, nil)

var getGetContextKeysForPrincipalPolicy* = Call_GetGetContextKeysForPrincipalPolicy_595998(
    name: "getGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_GetGetContextKeysForPrincipalPolicy_595999, base: "/",
    url: url_GetGetContextKeysForPrincipalPolicy_596000,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCredentialReport_596048 = ref object of OpenApiRestCall_593437
proc url_PostGetCredentialReport_596050(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetCredentialReport_596049(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596051 = query.getOrDefault("Action")
  valid_596051 = validateParameter(valid_596051, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_596051 != nil:
    section.add "Action", valid_596051
  var valid_596052 = query.getOrDefault("Version")
  valid_596052 = validateParameter(valid_596052, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596052 != nil:
    section.add "Version", valid_596052
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596053 = header.getOrDefault("X-Amz-Date")
  valid_596053 = validateParameter(valid_596053, JString, required = false,
                                 default = nil)
  if valid_596053 != nil:
    section.add "X-Amz-Date", valid_596053
  var valid_596054 = header.getOrDefault("X-Amz-Security-Token")
  valid_596054 = validateParameter(valid_596054, JString, required = false,
                                 default = nil)
  if valid_596054 != nil:
    section.add "X-Amz-Security-Token", valid_596054
  var valid_596055 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596055 = validateParameter(valid_596055, JString, required = false,
                                 default = nil)
  if valid_596055 != nil:
    section.add "X-Amz-Content-Sha256", valid_596055
  var valid_596056 = header.getOrDefault("X-Amz-Algorithm")
  valid_596056 = validateParameter(valid_596056, JString, required = false,
                                 default = nil)
  if valid_596056 != nil:
    section.add "X-Amz-Algorithm", valid_596056
  var valid_596057 = header.getOrDefault("X-Amz-Signature")
  valid_596057 = validateParameter(valid_596057, JString, required = false,
                                 default = nil)
  if valid_596057 != nil:
    section.add "X-Amz-Signature", valid_596057
  var valid_596058 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596058 = validateParameter(valid_596058, JString, required = false,
                                 default = nil)
  if valid_596058 != nil:
    section.add "X-Amz-SignedHeaders", valid_596058
  var valid_596059 = header.getOrDefault("X-Amz-Credential")
  valid_596059 = validateParameter(valid_596059, JString, required = false,
                                 default = nil)
  if valid_596059 != nil:
    section.add "X-Amz-Credential", valid_596059
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596060: Call_PostGetCredentialReport_596048; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_596060.validator(path, query, header, formData, body)
  let scheme = call_596060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596060.url(scheme.get, call_596060.host, call_596060.base,
                         call_596060.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596060, url, valid)

proc call*(call_596061: Call_PostGetCredentialReport_596048;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## postGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596062 = newJObject()
  add(query_596062, "Action", newJString(Action))
  add(query_596062, "Version", newJString(Version))
  result = call_596061.call(nil, query_596062, nil, nil, nil)

var postGetCredentialReport* = Call_PostGetCredentialReport_596048(
    name: "postGetCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_PostGetCredentialReport_596049, base: "/",
    url: url_PostGetCredentialReport_596050, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCredentialReport_596033 = ref object of OpenApiRestCall_593437
proc url_GetGetCredentialReport_596035(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetCredentialReport_596034(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596036 = query.getOrDefault("Action")
  valid_596036 = validateParameter(valid_596036, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_596036 != nil:
    section.add "Action", valid_596036
  var valid_596037 = query.getOrDefault("Version")
  valid_596037 = validateParameter(valid_596037, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596037 != nil:
    section.add "Version", valid_596037
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596038 = header.getOrDefault("X-Amz-Date")
  valid_596038 = validateParameter(valid_596038, JString, required = false,
                                 default = nil)
  if valid_596038 != nil:
    section.add "X-Amz-Date", valid_596038
  var valid_596039 = header.getOrDefault("X-Amz-Security-Token")
  valid_596039 = validateParameter(valid_596039, JString, required = false,
                                 default = nil)
  if valid_596039 != nil:
    section.add "X-Amz-Security-Token", valid_596039
  var valid_596040 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596040 = validateParameter(valid_596040, JString, required = false,
                                 default = nil)
  if valid_596040 != nil:
    section.add "X-Amz-Content-Sha256", valid_596040
  var valid_596041 = header.getOrDefault("X-Amz-Algorithm")
  valid_596041 = validateParameter(valid_596041, JString, required = false,
                                 default = nil)
  if valid_596041 != nil:
    section.add "X-Amz-Algorithm", valid_596041
  var valid_596042 = header.getOrDefault("X-Amz-Signature")
  valid_596042 = validateParameter(valid_596042, JString, required = false,
                                 default = nil)
  if valid_596042 != nil:
    section.add "X-Amz-Signature", valid_596042
  var valid_596043 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596043 = validateParameter(valid_596043, JString, required = false,
                                 default = nil)
  if valid_596043 != nil:
    section.add "X-Amz-SignedHeaders", valid_596043
  var valid_596044 = header.getOrDefault("X-Amz-Credential")
  valid_596044 = validateParameter(valid_596044, JString, required = false,
                                 default = nil)
  if valid_596044 != nil:
    section.add "X-Amz-Credential", valid_596044
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596045: Call_GetGetCredentialReport_596033; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_596045.validator(path, query, header, formData, body)
  let scheme = call_596045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596045.url(scheme.get, call_596045.host, call_596045.base,
                         call_596045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596045, url, valid)

proc call*(call_596046: Call_GetGetCredentialReport_596033;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## getGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596047 = newJObject()
  add(query_596047, "Action", newJString(Action))
  add(query_596047, "Version", newJString(Version))
  result = call_596046.call(nil, query_596047, nil, nil, nil)

var getGetCredentialReport* = Call_GetGetCredentialReport_596033(
    name: "getGetCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_GetGetCredentialReport_596034, base: "/",
    url: url_GetGetCredentialReport_596035, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroup_596081 = ref object of OpenApiRestCall_593437
proc url_PostGetGroup_596083(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetGroup_596082(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596084 = query.getOrDefault("Action")
  valid_596084 = validateParameter(valid_596084, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_596084 != nil:
    section.add "Action", valid_596084
  var valid_596085 = query.getOrDefault("Version")
  valid_596085 = validateParameter(valid_596085, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596085 != nil:
    section.add "Version", valid_596085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596086 = header.getOrDefault("X-Amz-Date")
  valid_596086 = validateParameter(valid_596086, JString, required = false,
                                 default = nil)
  if valid_596086 != nil:
    section.add "X-Amz-Date", valid_596086
  var valid_596087 = header.getOrDefault("X-Amz-Security-Token")
  valid_596087 = validateParameter(valid_596087, JString, required = false,
                                 default = nil)
  if valid_596087 != nil:
    section.add "X-Amz-Security-Token", valid_596087
  var valid_596088 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596088 = validateParameter(valid_596088, JString, required = false,
                                 default = nil)
  if valid_596088 != nil:
    section.add "X-Amz-Content-Sha256", valid_596088
  var valid_596089 = header.getOrDefault("X-Amz-Algorithm")
  valid_596089 = validateParameter(valid_596089, JString, required = false,
                                 default = nil)
  if valid_596089 != nil:
    section.add "X-Amz-Algorithm", valid_596089
  var valid_596090 = header.getOrDefault("X-Amz-Signature")
  valid_596090 = validateParameter(valid_596090, JString, required = false,
                                 default = nil)
  if valid_596090 != nil:
    section.add "X-Amz-Signature", valid_596090
  var valid_596091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596091 = validateParameter(valid_596091, JString, required = false,
                                 default = nil)
  if valid_596091 != nil:
    section.add "X-Amz-SignedHeaders", valid_596091
  var valid_596092 = header.getOrDefault("X-Amz-Credential")
  valid_596092 = validateParameter(valid_596092, JString, required = false,
                                 default = nil)
  if valid_596092 != nil:
    section.add "X-Amz-Credential", valid_596092
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_596093 = formData.getOrDefault("GroupName")
  valid_596093 = validateParameter(valid_596093, JString, required = true,
                                 default = nil)
  if valid_596093 != nil:
    section.add "GroupName", valid_596093
  var valid_596094 = formData.getOrDefault("Marker")
  valid_596094 = validateParameter(valid_596094, JString, required = false,
                                 default = nil)
  if valid_596094 != nil:
    section.add "Marker", valid_596094
  var valid_596095 = formData.getOrDefault("MaxItems")
  valid_596095 = validateParameter(valid_596095, JInt, required = false, default = nil)
  if valid_596095 != nil:
    section.add "MaxItems", valid_596095
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596096: Call_PostGetGroup_596081; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_596096.validator(path, query, header, formData, body)
  let scheme = call_596096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596096.url(scheme.get, call_596096.host, call_596096.base,
                         call_596096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596096, url, valid)

proc call*(call_596097: Call_PostGetGroup_596081; GroupName: string;
          Marker: string = ""; Action: string = "GetGroup"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596098 = newJObject()
  var formData_596099 = newJObject()
  add(formData_596099, "GroupName", newJString(GroupName))
  add(formData_596099, "Marker", newJString(Marker))
  add(query_596098, "Action", newJString(Action))
  add(formData_596099, "MaxItems", newJInt(MaxItems))
  add(query_596098, "Version", newJString(Version))
  result = call_596097.call(nil, query_596098, nil, formData_596099, nil)

var postGetGroup* = Call_PostGetGroup_596081(name: "postGetGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetGroup", validator: validate_PostGetGroup_596082, base: "/",
    url: url_PostGetGroup_596083, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroup_596063 = ref object of OpenApiRestCall_593437
proc url_GetGetGroup_596065(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetGroup_596064(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596066 = query.getOrDefault("Action")
  valid_596066 = validateParameter(valid_596066, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_596066 != nil:
    section.add "Action", valid_596066
  var valid_596067 = query.getOrDefault("Marker")
  valid_596067 = validateParameter(valid_596067, JString, required = false,
                                 default = nil)
  if valid_596067 != nil:
    section.add "Marker", valid_596067
  var valid_596068 = query.getOrDefault("GroupName")
  valid_596068 = validateParameter(valid_596068, JString, required = true,
                                 default = nil)
  if valid_596068 != nil:
    section.add "GroupName", valid_596068
  var valid_596069 = query.getOrDefault("MaxItems")
  valid_596069 = validateParameter(valid_596069, JInt, required = false, default = nil)
  if valid_596069 != nil:
    section.add "MaxItems", valid_596069
  var valid_596070 = query.getOrDefault("Version")
  valid_596070 = validateParameter(valid_596070, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596070 != nil:
    section.add "Version", valid_596070
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596071 = header.getOrDefault("X-Amz-Date")
  valid_596071 = validateParameter(valid_596071, JString, required = false,
                                 default = nil)
  if valid_596071 != nil:
    section.add "X-Amz-Date", valid_596071
  var valid_596072 = header.getOrDefault("X-Amz-Security-Token")
  valid_596072 = validateParameter(valid_596072, JString, required = false,
                                 default = nil)
  if valid_596072 != nil:
    section.add "X-Amz-Security-Token", valid_596072
  var valid_596073 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596073 = validateParameter(valid_596073, JString, required = false,
                                 default = nil)
  if valid_596073 != nil:
    section.add "X-Amz-Content-Sha256", valid_596073
  var valid_596074 = header.getOrDefault("X-Amz-Algorithm")
  valid_596074 = validateParameter(valid_596074, JString, required = false,
                                 default = nil)
  if valid_596074 != nil:
    section.add "X-Amz-Algorithm", valid_596074
  var valid_596075 = header.getOrDefault("X-Amz-Signature")
  valid_596075 = validateParameter(valid_596075, JString, required = false,
                                 default = nil)
  if valid_596075 != nil:
    section.add "X-Amz-Signature", valid_596075
  var valid_596076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596076 = validateParameter(valid_596076, JString, required = false,
                                 default = nil)
  if valid_596076 != nil:
    section.add "X-Amz-SignedHeaders", valid_596076
  var valid_596077 = header.getOrDefault("X-Amz-Credential")
  valid_596077 = validateParameter(valid_596077, JString, required = false,
                                 default = nil)
  if valid_596077 != nil:
    section.add "X-Amz-Credential", valid_596077
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596078: Call_GetGetGroup_596063; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_596078.validator(path, query, header, formData, body)
  let scheme = call_596078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596078.url(scheme.get, call_596078.host, call_596078.base,
                         call_596078.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596078, url, valid)

proc call*(call_596079: Call_GetGetGroup_596063; GroupName: string;
          Action: string = "GetGroup"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596080 = newJObject()
  add(query_596080, "Action", newJString(Action))
  add(query_596080, "Marker", newJString(Marker))
  add(query_596080, "GroupName", newJString(GroupName))
  add(query_596080, "MaxItems", newJInt(MaxItems))
  add(query_596080, "Version", newJString(Version))
  result = call_596079.call(nil, query_596080, nil, nil, nil)

var getGetGroup* = Call_GetGetGroup_596063(name: "getGetGroup",
                                        meth: HttpMethod.HttpGet,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetGroup",
                                        validator: validate_GetGetGroup_596064,
                                        base: "/", url: url_GetGetGroup_596065,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroupPolicy_596117 = ref object of OpenApiRestCall_593437
proc url_PostGetGroupPolicy_596119(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetGroupPolicy_596118(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596120 = query.getOrDefault("Action")
  valid_596120 = validateParameter(valid_596120, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_596120 != nil:
    section.add "Action", valid_596120
  var valid_596121 = query.getOrDefault("Version")
  valid_596121 = validateParameter(valid_596121, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596121 != nil:
    section.add "Version", valid_596121
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596122 = header.getOrDefault("X-Amz-Date")
  valid_596122 = validateParameter(valid_596122, JString, required = false,
                                 default = nil)
  if valid_596122 != nil:
    section.add "X-Amz-Date", valid_596122
  var valid_596123 = header.getOrDefault("X-Amz-Security-Token")
  valid_596123 = validateParameter(valid_596123, JString, required = false,
                                 default = nil)
  if valid_596123 != nil:
    section.add "X-Amz-Security-Token", valid_596123
  var valid_596124 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596124 = validateParameter(valid_596124, JString, required = false,
                                 default = nil)
  if valid_596124 != nil:
    section.add "X-Amz-Content-Sha256", valid_596124
  var valid_596125 = header.getOrDefault("X-Amz-Algorithm")
  valid_596125 = validateParameter(valid_596125, JString, required = false,
                                 default = nil)
  if valid_596125 != nil:
    section.add "X-Amz-Algorithm", valid_596125
  var valid_596126 = header.getOrDefault("X-Amz-Signature")
  valid_596126 = validateParameter(valid_596126, JString, required = false,
                                 default = nil)
  if valid_596126 != nil:
    section.add "X-Amz-Signature", valid_596126
  var valid_596127 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596127 = validateParameter(valid_596127, JString, required = false,
                                 default = nil)
  if valid_596127 != nil:
    section.add "X-Amz-SignedHeaders", valid_596127
  var valid_596128 = header.getOrDefault("X-Amz-Credential")
  valid_596128 = validateParameter(valid_596128, JString, required = false,
                                 default = nil)
  if valid_596128 != nil:
    section.add "X-Amz-Credential", valid_596128
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_596129 = formData.getOrDefault("PolicyName")
  valid_596129 = validateParameter(valid_596129, JString, required = true,
                                 default = nil)
  if valid_596129 != nil:
    section.add "PolicyName", valid_596129
  var valid_596130 = formData.getOrDefault("GroupName")
  valid_596130 = validateParameter(valid_596130, JString, required = true,
                                 default = nil)
  if valid_596130 != nil:
    section.add "GroupName", valid_596130
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596131: Call_PostGetGroupPolicy_596117; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_596131.validator(path, query, header, formData, body)
  let scheme = call_596131.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596131.url(scheme.get, call_596131.host, call_596131.base,
                         call_596131.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596131, url, valid)

proc call*(call_596132: Call_PostGetGroupPolicy_596117; PolicyName: string;
          GroupName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596133 = newJObject()
  var formData_596134 = newJObject()
  add(formData_596134, "PolicyName", newJString(PolicyName))
  add(formData_596134, "GroupName", newJString(GroupName))
  add(query_596133, "Action", newJString(Action))
  add(query_596133, "Version", newJString(Version))
  result = call_596132.call(nil, query_596133, nil, formData_596134, nil)

var postGetGroupPolicy* = Call_PostGetGroupPolicy_596117(
    name: "postGetGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetGroupPolicy",
    validator: validate_PostGetGroupPolicy_596118, base: "/",
    url: url_PostGetGroupPolicy_596119, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroupPolicy_596100 = ref object of OpenApiRestCall_593437
proc url_GetGetGroupPolicy_596102(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetGroupPolicy_596101(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596103 = query.getOrDefault("Action")
  valid_596103 = validateParameter(valid_596103, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_596103 != nil:
    section.add "Action", valid_596103
  var valid_596104 = query.getOrDefault("GroupName")
  valid_596104 = validateParameter(valid_596104, JString, required = true,
                                 default = nil)
  if valid_596104 != nil:
    section.add "GroupName", valid_596104
  var valid_596105 = query.getOrDefault("Version")
  valid_596105 = validateParameter(valid_596105, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596105 != nil:
    section.add "Version", valid_596105
  var valid_596106 = query.getOrDefault("PolicyName")
  valid_596106 = validateParameter(valid_596106, JString, required = true,
                                 default = nil)
  if valid_596106 != nil:
    section.add "PolicyName", valid_596106
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596107 = header.getOrDefault("X-Amz-Date")
  valid_596107 = validateParameter(valid_596107, JString, required = false,
                                 default = nil)
  if valid_596107 != nil:
    section.add "X-Amz-Date", valid_596107
  var valid_596108 = header.getOrDefault("X-Amz-Security-Token")
  valid_596108 = validateParameter(valid_596108, JString, required = false,
                                 default = nil)
  if valid_596108 != nil:
    section.add "X-Amz-Security-Token", valid_596108
  var valid_596109 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596109 = validateParameter(valid_596109, JString, required = false,
                                 default = nil)
  if valid_596109 != nil:
    section.add "X-Amz-Content-Sha256", valid_596109
  var valid_596110 = header.getOrDefault("X-Amz-Algorithm")
  valid_596110 = validateParameter(valid_596110, JString, required = false,
                                 default = nil)
  if valid_596110 != nil:
    section.add "X-Amz-Algorithm", valid_596110
  var valid_596111 = header.getOrDefault("X-Amz-Signature")
  valid_596111 = validateParameter(valid_596111, JString, required = false,
                                 default = nil)
  if valid_596111 != nil:
    section.add "X-Amz-Signature", valid_596111
  var valid_596112 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596112 = validateParameter(valid_596112, JString, required = false,
                                 default = nil)
  if valid_596112 != nil:
    section.add "X-Amz-SignedHeaders", valid_596112
  var valid_596113 = header.getOrDefault("X-Amz-Credential")
  valid_596113 = validateParameter(valid_596113, JString, required = false,
                                 default = nil)
  if valid_596113 != nil:
    section.add "X-Amz-Credential", valid_596113
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596114: Call_GetGetGroupPolicy_596100; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_596114.validator(path, query, header, formData, body)
  let scheme = call_596114.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596114.url(scheme.get, call_596114.host, call_596114.base,
                         call_596114.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596114, url, valid)

proc call*(call_596115: Call_GetGetGroupPolicy_596100; GroupName: string;
          PolicyName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_596116 = newJObject()
  add(query_596116, "Action", newJString(Action))
  add(query_596116, "GroupName", newJString(GroupName))
  add(query_596116, "Version", newJString(Version))
  add(query_596116, "PolicyName", newJString(PolicyName))
  result = call_596115.call(nil, query_596116, nil, nil, nil)

var getGetGroupPolicy* = Call_GetGetGroupPolicy_596100(name: "getGetGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetGroupPolicy", validator: validate_GetGetGroupPolicy_596101,
    base: "/", url: url_GetGetGroupPolicy_596102,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetInstanceProfile_596151 = ref object of OpenApiRestCall_593437
proc url_PostGetInstanceProfile_596153(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetInstanceProfile_596152(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596154 = query.getOrDefault("Action")
  valid_596154 = validateParameter(valid_596154, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_596154 != nil:
    section.add "Action", valid_596154
  var valid_596155 = query.getOrDefault("Version")
  valid_596155 = validateParameter(valid_596155, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596155 != nil:
    section.add "Version", valid_596155
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596156 = header.getOrDefault("X-Amz-Date")
  valid_596156 = validateParameter(valid_596156, JString, required = false,
                                 default = nil)
  if valid_596156 != nil:
    section.add "X-Amz-Date", valid_596156
  var valid_596157 = header.getOrDefault("X-Amz-Security-Token")
  valid_596157 = validateParameter(valid_596157, JString, required = false,
                                 default = nil)
  if valid_596157 != nil:
    section.add "X-Amz-Security-Token", valid_596157
  var valid_596158 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596158 = validateParameter(valid_596158, JString, required = false,
                                 default = nil)
  if valid_596158 != nil:
    section.add "X-Amz-Content-Sha256", valid_596158
  var valid_596159 = header.getOrDefault("X-Amz-Algorithm")
  valid_596159 = validateParameter(valid_596159, JString, required = false,
                                 default = nil)
  if valid_596159 != nil:
    section.add "X-Amz-Algorithm", valid_596159
  var valid_596160 = header.getOrDefault("X-Amz-Signature")
  valid_596160 = validateParameter(valid_596160, JString, required = false,
                                 default = nil)
  if valid_596160 != nil:
    section.add "X-Amz-Signature", valid_596160
  var valid_596161 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596161 = validateParameter(valid_596161, JString, required = false,
                                 default = nil)
  if valid_596161 != nil:
    section.add "X-Amz-SignedHeaders", valid_596161
  var valid_596162 = header.getOrDefault("X-Amz-Credential")
  valid_596162 = validateParameter(valid_596162, JString, required = false,
                                 default = nil)
  if valid_596162 != nil:
    section.add "X-Amz-Credential", valid_596162
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_596163 = formData.getOrDefault("InstanceProfileName")
  valid_596163 = validateParameter(valid_596163, JString, required = true,
                                 default = nil)
  if valid_596163 != nil:
    section.add "InstanceProfileName", valid_596163
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596164: Call_PostGetInstanceProfile_596151; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_596164.validator(path, query, header, formData, body)
  let scheme = call_596164.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596164.url(scheme.get, call_596164.host, call_596164.base,
                         call_596164.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596164, url, valid)

proc call*(call_596165: Call_PostGetInstanceProfile_596151;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_596166 = newJObject()
  var formData_596167 = newJObject()
  add(query_596166, "Action", newJString(Action))
  add(formData_596167, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_596166, "Version", newJString(Version))
  result = call_596165.call(nil, query_596166, nil, formData_596167, nil)

var postGetInstanceProfile* = Call_PostGetInstanceProfile_596151(
    name: "postGetInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_PostGetInstanceProfile_596152, base: "/",
    url: url_PostGetInstanceProfile_596153, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetInstanceProfile_596135 = ref object of OpenApiRestCall_593437
proc url_GetGetInstanceProfile_596137(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetInstanceProfile_596136(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_596138 = query.getOrDefault("InstanceProfileName")
  valid_596138 = validateParameter(valid_596138, JString, required = true,
                                 default = nil)
  if valid_596138 != nil:
    section.add "InstanceProfileName", valid_596138
  var valid_596139 = query.getOrDefault("Action")
  valid_596139 = validateParameter(valid_596139, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_596139 != nil:
    section.add "Action", valid_596139
  var valid_596140 = query.getOrDefault("Version")
  valid_596140 = validateParameter(valid_596140, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596140 != nil:
    section.add "Version", valid_596140
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596141 = header.getOrDefault("X-Amz-Date")
  valid_596141 = validateParameter(valid_596141, JString, required = false,
                                 default = nil)
  if valid_596141 != nil:
    section.add "X-Amz-Date", valid_596141
  var valid_596142 = header.getOrDefault("X-Amz-Security-Token")
  valid_596142 = validateParameter(valid_596142, JString, required = false,
                                 default = nil)
  if valid_596142 != nil:
    section.add "X-Amz-Security-Token", valid_596142
  var valid_596143 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596143 = validateParameter(valid_596143, JString, required = false,
                                 default = nil)
  if valid_596143 != nil:
    section.add "X-Amz-Content-Sha256", valid_596143
  var valid_596144 = header.getOrDefault("X-Amz-Algorithm")
  valid_596144 = validateParameter(valid_596144, JString, required = false,
                                 default = nil)
  if valid_596144 != nil:
    section.add "X-Amz-Algorithm", valid_596144
  var valid_596145 = header.getOrDefault("X-Amz-Signature")
  valid_596145 = validateParameter(valid_596145, JString, required = false,
                                 default = nil)
  if valid_596145 != nil:
    section.add "X-Amz-Signature", valid_596145
  var valid_596146 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596146 = validateParameter(valid_596146, JString, required = false,
                                 default = nil)
  if valid_596146 != nil:
    section.add "X-Amz-SignedHeaders", valid_596146
  var valid_596147 = header.getOrDefault("X-Amz-Credential")
  valid_596147 = validateParameter(valid_596147, JString, required = false,
                                 default = nil)
  if valid_596147 != nil:
    section.add "X-Amz-Credential", valid_596147
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596148: Call_GetGetInstanceProfile_596135; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_596148.validator(path, query, header, formData, body)
  let scheme = call_596148.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596148.url(scheme.get, call_596148.host, call_596148.base,
                         call_596148.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596148, url, valid)

proc call*(call_596149: Call_GetGetInstanceProfile_596135;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596150 = newJObject()
  add(query_596150, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_596150, "Action", newJString(Action))
  add(query_596150, "Version", newJString(Version))
  result = call_596149.call(nil, query_596150, nil, nil, nil)

var getGetInstanceProfile* = Call_GetGetInstanceProfile_596135(
    name: "getGetInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_GetGetInstanceProfile_596136, base: "/",
    url: url_GetGetInstanceProfile_596137, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetLoginProfile_596184 = ref object of OpenApiRestCall_593437
proc url_PostGetLoginProfile_596186(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetLoginProfile_596185(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596187 = query.getOrDefault("Action")
  valid_596187 = validateParameter(valid_596187, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_596187 != nil:
    section.add "Action", valid_596187
  var valid_596188 = query.getOrDefault("Version")
  valid_596188 = validateParameter(valid_596188, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596188 != nil:
    section.add "Version", valid_596188
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596189 = header.getOrDefault("X-Amz-Date")
  valid_596189 = validateParameter(valid_596189, JString, required = false,
                                 default = nil)
  if valid_596189 != nil:
    section.add "X-Amz-Date", valid_596189
  var valid_596190 = header.getOrDefault("X-Amz-Security-Token")
  valid_596190 = validateParameter(valid_596190, JString, required = false,
                                 default = nil)
  if valid_596190 != nil:
    section.add "X-Amz-Security-Token", valid_596190
  var valid_596191 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596191 = validateParameter(valid_596191, JString, required = false,
                                 default = nil)
  if valid_596191 != nil:
    section.add "X-Amz-Content-Sha256", valid_596191
  var valid_596192 = header.getOrDefault("X-Amz-Algorithm")
  valid_596192 = validateParameter(valid_596192, JString, required = false,
                                 default = nil)
  if valid_596192 != nil:
    section.add "X-Amz-Algorithm", valid_596192
  var valid_596193 = header.getOrDefault("X-Amz-Signature")
  valid_596193 = validateParameter(valid_596193, JString, required = false,
                                 default = nil)
  if valid_596193 != nil:
    section.add "X-Amz-Signature", valid_596193
  var valid_596194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596194 = validateParameter(valid_596194, JString, required = false,
                                 default = nil)
  if valid_596194 != nil:
    section.add "X-Amz-SignedHeaders", valid_596194
  var valid_596195 = header.getOrDefault("X-Amz-Credential")
  valid_596195 = validateParameter(valid_596195, JString, required = false,
                                 default = nil)
  if valid_596195 != nil:
    section.add "X-Amz-Credential", valid_596195
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_596196 = formData.getOrDefault("UserName")
  valid_596196 = validateParameter(valid_596196, JString, required = true,
                                 default = nil)
  if valid_596196 != nil:
    section.add "UserName", valid_596196
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596197: Call_PostGetLoginProfile_596184; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_596197.validator(path, query, header, formData, body)
  let scheme = call_596197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596197.url(scheme.get, call_596197.host, call_596197.base,
                         call_596197.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596197, url, valid)

proc call*(call_596198: Call_PostGetLoginProfile_596184; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596199 = newJObject()
  var formData_596200 = newJObject()
  add(formData_596200, "UserName", newJString(UserName))
  add(query_596199, "Action", newJString(Action))
  add(query_596199, "Version", newJString(Version))
  result = call_596198.call(nil, query_596199, nil, formData_596200, nil)

var postGetLoginProfile* = Call_PostGetLoginProfile_596184(
    name: "postGetLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetLoginProfile",
    validator: validate_PostGetLoginProfile_596185, base: "/",
    url: url_PostGetLoginProfile_596186, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetLoginProfile_596168 = ref object of OpenApiRestCall_593437
proc url_GetGetLoginProfile_596170(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetLoginProfile_596169(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_596171 = query.getOrDefault("UserName")
  valid_596171 = validateParameter(valid_596171, JString, required = true,
                                 default = nil)
  if valid_596171 != nil:
    section.add "UserName", valid_596171
  var valid_596172 = query.getOrDefault("Action")
  valid_596172 = validateParameter(valid_596172, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_596172 != nil:
    section.add "Action", valid_596172
  var valid_596173 = query.getOrDefault("Version")
  valid_596173 = validateParameter(valid_596173, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596173 != nil:
    section.add "Version", valid_596173
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596174 = header.getOrDefault("X-Amz-Date")
  valid_596174 = validateParameter(valid_596174, JString, required = false,
                                 default = nil)
  if valid_596174 != nil:
    section.add "X-Amz-Date", valid_596174
  var valid_596175 = header.getOrDefault("X-Amz-Security-Token")
  valid_596175 = validateParameter(valid_596175, JString, required = false,
                                 default = nil)
  if valid_596175 != nil:
    section.add "X-Amz-Security-Token", valid_596175
  var valid_596176 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596176 = validateParameter(valid_596176, JString, required = false,
                                 default = nil)
  if valid_596176 != nil:
    section.add "X-Amz-Content-Sha256", valid_596176
  var valid_596177 = header.getOrDefault("X-Amz-Algorithm")
  valid_596177 = validateParameter(valid_596177, JString, required = false,
                                 default = nil)
  if valid_596177 != nil:
    section.add "X-Amz-Algorithm", valid_596177
  var valid_596178 = header.getOrDefault("X-Amz-Signature")
  valid_596178 = validateParameter(valid_596178, JString, required = false,
                                 default = nil)
  if valid_596178 != nil:
    section.add "X-Amz-Signature", valid_596178
  var valid_596179 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596179 = validateParameter(valid_596179, JString, required = false,
                                 default = nil)
  if valid_596179 != nil:
    section.add "X-Amz-SignedHeaders", valid_596179
  var valid_596180 = header.getOrDefault("X-Amz-Credential")
  valid_596180 = validateParameter(valid_596180, JString, required = false,
                                 default = nil)
  if valid_596180 != nil:
    section.add "X-Amz-Credential", valid_596180
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596181: Call_GetGetLoginProfile_596168; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_596181.validator(path, query, header, formData, body)
  let scheme = call_596181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596181.url(scheme.get, call_596181.host, call_596181.base,
                         call_596181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596181, url, valid)

proc call*(call_596182: Call_GetGetLoginProfile_596168; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596183 = newJObject()
  add(query_596183, "UserName", newJString(UserName))
  add(query_596183, "Action", newJString(Action))
  add(query_596183, "Version", newJString(Version))
  result = call_596182.call(nil, query_596183, nil, nil, nil)

var getGetLoginProfile* = Call_GetGetLoginProfile_596168(
    name: "getGetLoginProfile", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetLoginProfile", validator: validate_GetGetLoginProfile_596169,
    base: "/", url: url_GetGetLoginProfile_596170,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOpenIDConnectProvider_596217 = ref object of OpenApiRestCall_593437
proc url_PostGetOpenIDConnectProvider_596219(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetOpenIDConnectProvider_596218(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596220 = query.getOrDefault("Action")
  valid_596220 = validateParameter(valid_596220, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_596220 != nil:
    section.add "Action", valid_596220
  var valid_596221 = query.getOrDefault("Version")
  valid_596221 = validateParameter(valid_596221, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596221 != nil:
    section.add "Version", valid_596221
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596222 = header.getOrDefault("X-Amz-Date")
  valid_596222 = validateParameter(valid_596222, JString, required = false,
                                 default = nil)
  if valid_596222 != nil:
    section.add "X-Amz-Date", valid_596222
  var valid_596223 = header.getOrDefault("X-Amz-Security-Token")
  valid_596223 = validateParameter(valid_596223, JString, required = false,
                                 default = nil)
  if valid_596223 != nil:
    section.add "X-Amz-Security-Token", valid_596223
  var valid_596224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596224 = validateParameter(valid_596224, JString, required = false,
                                 default = nil)
  if valid_596224 != nil:
    section.add "X-Amz-Content-Sha256", valid_596224
  var valid_596225 = header.getOrDefault("X-Amz-Algorithm")
  valid_596225 = validateParameter(valid_596225, JString, required = false,
                                 default = nil)
  if valid_596225 != nil:
    section.add "X-Amz-Algorithm", valid_596225
  var valid_596226 = header.getOrDefault("X-Amz-Signature")
  valid_596226 = validateParameter(valid_596226, JString, required = false,
                                 default = nil)
  if valid_596226 != nil:
    section.add "X-Amz-Signature", valid_596226
  var valid_596227 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596227 = validateParameter(valid_596227, JString, required = false,
                                 default = nil)
  if valid_596227 != nil:
    section.add "X-Amz-SignedHeaders", valid_596227
  var valid_596228 = header.getOrDefault("X-Amz-Credential")
  valid_596228 = validateParameter(valid_596228, JString, required = false,
                                 default = nil)
  if valid_596228 != nil:
    section.add "X-Amz-Credential", valid_596228
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_596229 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_596229 = validateParameter(valid_596229, JString, required = true,
                                 default = nil)
  if valid_596229 != nil:
    section.add "OpenIDConnectProviderArn", valid_596229
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596230: Call_PostGetOpenIDConnectProvider_596217; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_596230.validator(path, query, header, formData, body)
  let scheme = call_596230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596230.url(scheme.get, call_596230.host, call_596230.base,
                         call_596230.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596230, url, valid)

proc call*(call_596231: Call_PostGetOpenIDConnectProvider_596217;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596232 = newJObject()
  var formData_596233 = newJObject()
  add(formData_596233, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_596232, "Action", newJString(Action))
  add(query_596232, "Version", newJString(Version))
  result = call_596231.call(nil, query_596232, nil, formData_596233, nil)

var postGetOpenIDConnectProvider* = Call_PostGetOpenIDConnectProvider_596217(
    name: "postGetOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_PostGetOpenIDConnectProvider_596218, base: "/",
    url: url_PostGetOpenIDConnectProvider_596219,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOpenIDConnectProvider_596201 = ref object of OpenApiRestCall_593437
proc url_GetGetOpenIDConnectProvider_596203(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetOpenIDConnectProvider_596202(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_596204 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_596204 = validateParameter(valid_596204, JString, required = true,
                                 default = nil)
  if valid_596204 != nil:
    section.add "OpenIDConnectProviderArn", valid_596204
  var valid_596205 = query.getOrDefault("Action")
  valid_596205 = validateParameter(valid_596205, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_596205 != nil:
    section.add "Action", valid_596205
  var valid_596206 = query.getOrDefault("Version")
  valid_596206 = validateParameter(valid_596206, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596206 != nil:
    section.add "Version", valid_596206
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596207 = header.getOrDefault("X-Amz-Date")
  valid_596207 = validateParameter(valid_596207, JString, required = false,
                                 default = nil)
  if valid_596207 != nil:
    section.add "X-Amz-Date", valid_596207
  var valid_596208 = header.getOrDefault("X-Amz-Security-Token")
  valid_596208 = validateParameter(valid_596208, JString, required = false,
                                 default = nil)
  if valid_596208 != nil:
    section.add "X-Amz-Security-Token", valid_596208
  var valid_596209 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596209 = validateParameter(valid_596209, JString, required = false,
                                 default = nil)
  if valid_596209 != nil:
    section.add "X-Amz-Content-Sha256", valid_596209
  var valid_596210 = header.getOrDefault("X-Amz-Algorithm")
  valid_596210 = validateParameter(valid_596210, JString, required = false,
                                 default = nil)
  if valid_596210 != nil:
    section.add "X-Amz-Algorithm", valid_596210
  var valid_596211 = header.getOrDefault("X-Amz-Signature")
  valid_596211 = validateParameter(valid_596211, JString, required = false,
                                 default = nil)
  if valid_596211 != nil:
    section.add "X-Amz-Signature", valid_596211
  var valid_596212 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596212 = validateParameter(valid_596212, JString, required = false,
                                 default = nil)
  if valid_596212 != nil:
    section.add "X-Amz-SignedHeaders", valid_596212
  var valid_596213 = header.getOrDefault("X-Amz-Credential")
  valid_596213 = validateParameter(valid_596213, JString, required = false,
                                 default = nil)
  if valid_596213 != nil:
    section.add "X-Amz-Credential", valid_596213
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596214: Call_GetGetOpenIDConnectProvider_596201; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_596214.validator(path, query, header, formData, body)
  let scheme = call_596214.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596214.url(scheme.get, call_596214.host, call_596214.base,
                         call_596214.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596214, url, valid)

proc call*(call_596215: Call_GetGetOpenIDConnectProvider_596201;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596216 = newJObject()
  add(query_596216, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_596216, "Action", newJString(Action))
  add(query_596216, "Version", newJString(Version))
  result = call_596215.call(nil, query_596216, nil, nil, nil)

var getGetOpenIDConnectProvider* = Call_GetGetOpenIDConnectProvider_596201(
    name: "getGetOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_GetGetOpenIDConnectProvider_596202, base: "/",
    url: url_GetGetOpenIDConnectProvider_596203,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOrganizationsAccessReport_596253 = ref object of OpenApiRestCall_593437
proc url_PostGetOrganizationsAccessReport_596255(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetOrganizationsAccessReport_596254(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596256 = query.getOrDefault("Action")
  valid_596256 = validateParameter(valid_596256, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_596256 != nil:
    section.add "Action", valid_596256
  var valid_596257 = query.getOrDefault("Version")
  valid_596257 = validateParameter(valid_596257, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596257 != nil:
    section.add "Version", valid_596257
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596258 = header.getOrDefault("X-Amz-Date")
  valid_596258 = validateParameter(valid_596258, JString, required = false,
                                 default = nil)
  if valid_596258 != nil:
    section.add "X-Amz-Date", valid_596258
  var valid_596259 = header.getOrDefault("X-Amz-Security-Token")
  valid_596259 = validateParameter(valid_596259, JString, required = false,
                                 default = nil)
  if valid_596259 != nil:
    section.add "X-Amz-Security-Token", valid_596259
  var valid_596260 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596260 = validateParameter(valid_596260, JString, required = false,
                                 default = nil)
  if valid_596260 != nil:
    section.add "X-Amz-Content-Sha256", valid_596260
  var valid_596261 = header.getOrDefault("X-Amz-Algorithm")
  valid_596261 = validateParameter(valid_596261, JString, required = false,
                                 default = nil)
  if valid_596261 != nil:
    section.add "X-Amz-Algorithm", valid_596261
  var valid_596262 = header.getOrDefault("X-Amz-Signature")
  valid_596262 = validateParameter(valid_596262, JString, required = false,
                                 default = nil)
  if valid_596262 != nil:
    section.add "X-Amz-Signature", valid_596262
  var valid_596263 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596263 = validateParameter(valid_596263, JString, required = false,
                                 default = nil)
  if valid_596263 != nil:
    section.add "X-Amz-SignedHeaders", valid_596263
  var valid_596264 = header.getOrDefault("X-Amz-Credential")
  valid_596264 = validateParameter(valid_596264, JString, required = false,
                                 default = nil)
  if valid_596264 != nil:
    section.add "X-Amz-Credential", valid_596264
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_596265 = formData.getOrDefault("Marker")
  valid_596265 = validateParameter(valid_596265, JString, required = false,
                                 default = nil)
  if valid_596265 != nil:
    section.add "Marker", valid_596265
  var valid_596266 = formData.getOrDefault("SortKey")
  valid_596266 = validateParameter(valid_596266, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_596266 != nil:
    section.add "SortKey", valid_596266
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_596267 = formData.getOrDefault("JobId")
  valid_596267 = validateParameter(valid_596267, JString, required = true,
                                 default = nil)
  if valid_596267 != nil:
    section.add "JobId", valid_596267
  var valid_596268 = formData.getOrDefault("MaxItems")
  valid_596268 = validateParameter(valid_596268, JInt, required = false, default = nil)
  if valid_596268 != nil:
    section.add "MaxItems", valid_596268
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596269: Call_PostGetOrganizationsAccessReport_596253;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_596269.validator(path, query, header, formData, body)
  let scheme = call_596269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596269.url(scheme.get, call_596269.host, call_596269.base,
                         call_596269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596269, url, valid)

proc call*(call_596270: Call_PostGetOrganizationsAccessReport_596253;
          JobId: string; Marker: string = "";
          SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          Action: string = "GetOrganizationsAccessReport"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596271 = newJObject()
  var formData_596272 = newJObject()
  add(formData_596272, "Marker", newJString(Marker))
  add(formData_596272, "SortKey", newJString(SortKey))
  add(query_596271, "Action", newJString(Action))
  add(formData_596272, "JobId", newJString(JobId))
  add(formData_596272, "MaxItems", newJInt(MaxItems))
  add(query_596271, "Version", newJString(Version))
  result = call_596270.call(nil, query_596271, nil, formData_596272, nil)

var postGetOrganizationsAccessReport* = Call_PostGetOrganizationsAccessReport_596253(
    name: "postGetOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_PostGetOrganizationsAccessReport_596254, base: "/",
    url: url_PostGetOrganizationsAccessReport_596255,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOrganizationsAccessReport_596234 = ref object of OpenApiRestCall_593437
proc url_GetGetOrganizationsAccessReport_596236(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetOrganizationsAccessReport_596235(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596237 = query.getOrDefault("SortKey")
  valid_596237 = validateParameter(valid_596237, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_596237 != nil:
    section.add "SortKey", valid_596237
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_596238 = query.getOrDefault("JobId")
  valid_596238 = validateParameter(valid_596238, JString, required = true,
                                 default = nil)
  if valid_596238 != nil:
    section.add "JobId", valid_596238
  var valid_596239 = query.getOrDefault("Action")
  valid_596239 = validateParameter(valid_596239, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_596239 != nil:
    section.add "Action", valid_596239
  var valid_596240 = query.getOrDefault("Marker")
  valid_596240 = validateParameter(valid_596240, JString, required = false,
                                 default = nil)
  if valid_596240 != nil:
    section.add "Marker", valid_596240
  var valid_596241 = query.getOrDefault("MaxItems")
  valid_596241 = validateParameter(valid_596241, JInt, required = false, default = nil)
  if valid_596241 != nil:
    section.add "MaxItems", valid_596241
  var valid_596242 = query.getOrDefault("Version")
  valid_596242 = validateParameter(valid_596242, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596242 != nil:
    section.add "Version", valid_596242
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596243 = header.getOrDefault("X-Amz-Date")
  valid_596243 = validateParameter(valid_596243, JString, required = false,
                                 default = nil)
  if valid_596243 != nil:
    section.add "X-Amz-Date", valid_596243
  var valid_596244 = header.getOrDefault("X-Amz-Security-Token")
  valid_596244 = validateParameter(valid_596244, JString, required = false,
                                 default = nil)
  if valid_596244 != nil:
    section.add "X-Amz-Security-Token", valid_596244
  var valid_596245 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596245 = validateParameter(valid_596245, JString, required = false,
                                 default = nil)
  if valid_596245 != nil:
    section.add "X-Amz-Content-Sha256", valid_596245
  var valid_596246 = header.getOrDefault("X-Amz-Algorithm")
  valid_596246 = validateParameter(valid_596246, JString, required = false,
                                 default = nil)
  if valid_596246 != nil:
    section.add "X-Amz-Algorithm", valid_596246
  var valid_596247 = header.getOrDefault("X-Amz-Signature")
  valid_596247 = validateParameter(valid_596247, JString, required = false,
                                 default = nil)
  if valid_596247 != nil:
    section.add "X-Amz-Signature", valid_596247
  var valid_596248 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596248 = validateParameter(valid_596248, JString, required = false,
                                 default = nil)
  if valid_596248 != nil:
    section.add "X-Amz-SignedHeaders", valid_596248
  var valid_596249 = header.getOrDefault("X-Amz-Credential")
  valid_596249 = validateParameter(valid_596249, JString, required = false,
                                 default = nil)
  if valid_596249 != nil:
    section.add "X-Amz-Credential", valid_596249
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596250: Call_GetGetOrganizationsAccessReport_596234;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_596250.validator(path, query, header, formData, body)
  let scheme = call_596250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596250.url(scheme.get, call_596250.host, call_596250.base,
                         call_596250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596250, url, valid)

proc call*(call_596251: Call_GetGetOrganizationsAccessReport_596234; JobId: string;
          SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          Action: string = "GetOrganizationsAccessReport"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596252 = newJObject()
  add(query_596252, "SortKey", newJString(SortKey))
  add(query_596252, "JobId", newJString(JobId))
  add(query_596252, "Action", newJString(Action))
  add(query_596252, "Marker", newJString(Marker))
  add(query_596252, "MaxItems", newJInt(MaxItems))
  add(query_596252, "Version", newJString(Version))
  result = call_596251.call(nil, query_596252, nil, nil, nil)

var getGetOrganizationsAccessReport* = Call_GetGetOrganizationsAccessReport_596234(
    name: "getGetOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_GetGetOrganizationsAccessReport_596235, base: "/",
    url: url_GetGetOrganizationsAccessReport_596236,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicy_596289 = ref object of OpenApiRestCall_593437
proc url_PostGetPolicy_596291(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetPolicy_596290(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596292 = query.getOrDefault("Action")
  valid_596292 = validateParameter(valid_596292, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_596292 != nil:
    section.add "Action", valid_596292
  var valid_596293 = query.getOrDefault("Version")
  valid_596293 = validateParameter(valid_596293, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596293 != nil:
    section.add "Version", valid_596293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596294 = header.getOrDefault("X-Amz-Date")
  valid_596294 = validateParameter(valid_596294, JString, required = false,
                                 default = nil)
  if valid_596294 != nil:
    section.add "X-Amz-Date", valid_596294
  var valid_596295 = header.getOrDefault("X-Amz-Security-Token")
  valid_596295 = validateParameter(valid_596295, JString, required = false,
                                 default = nil)
  if valid_596295 != nil:
    section.add "X-Amz-Security-Token", valid_596295
  var valid_596296 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596296 = validateParameter(valid_596296, JString, required = false,
                                 default = nil)
  if valid_596296 != nil:
    section.add "X-Amz-Content-Sha256", valid_596296
  var valid_596297 = header.getOrDefault("X-Amz-Algorithm")
  valid_596297 = validateParameter(valid_596297, JString, required = false,
                                 default = nil)
  if valid_596297 != nil:
    section.add "X-Amz-Algorithm", valid_596297
  var valid_596298 = header.getOrDefault("X-Amz-Signature")
  valid_596298 = validateParameter(valid_596298, JString, required = false,
                                 default = nil)
  if valid_596298 != nil:
    section.add "X-Amz-Signature", valid_596298
  var valid_596299 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596299 = validateParameter(valid_596299, JString, required = false,
                                 default = nil)
  if valid_596299 != nil:
    section.add "X-Amz-SignedHeaders", valid_596299
  var valid_596300 = header.getOrDefault("X-Amz-Credential")
  valid_596300 = validateParameter(valid_596300, JString, required = false,
                                 default = nil)
  if valid_596300 != nil:
    section.add "X-Amz-Credential", valid_596300
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_596301 = formData.getOrDefault("PolicyArn")
  valid_596301 = validateParameter(valid_596301, JString, required = true,
                                 default = nil)
  if valid_596301 != nil:
    section.add "PolicyArn", valid_596301
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596302: Call_PostGetPolicy_596289; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_596302.validator(path, query, header, formData, body)
  let scheme = call_596302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596302.url(scheme.get, call_596302.host, call_596302.base,
                         call_596302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596302, url, valid)

proc call*(call_596303: Call_PostGetPolicy_596289; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596304 = newJObject()
  var formData_596305 = newJObject()
  add(formData_596305, "PolicyArn", newJString(PolicyArn))
  add(query_596304, "Action", newJString(Action))
  add(query_596304, "Version", newJString(Version))
  result = call_596303.call(nil, query_596304, nil, formData_596305, nil)

var postGetPolicy* = Call_PostGetPolicy_596289(name: "postGetPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_PostGetPolicy_596290,
    base: "/", url: url_PostGetPolicy_596291, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicy_596273 = ref object of OpenApiRestCall_593437
proc url_GetGetPolicy_596275(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetPolicy_596274(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_596276 = query.getOrDefault("PolicyArn")
  valid_596276 = validateParameter(valid_596276, JString, required = true,
                                 default = nil)
  if valid_596276 != nil:
    section.add "PolicyArn", valid_596276
  var valid_596277 = query.getOrDefault("Action")
  valid_596277 = validateParameter(valid_596277, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_596277 != nil:
    section.add "Action", valid_596277
  var valid_596278 = query.getOrDefault("Version")
  valid_596278 = validateParameter(valid_596278, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596278 != nil:
    section.add "Version", valid_596278
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596279 = header.getOrDefault("X-Amz-Date")
  valid_596279 = validateParameter(valid_596279, JString, required = false,
                                 default = nil)
  if valid_596279 != nil:
    section.add "X-Amz-Date", valid_596279
  var valid_596280 = header.getOrDefault("X-Amz-Security-Token")
  valid_596280 = validateParameter(valid_596280, JString, required = false,
                                 default = nil)
  if valid_596280 != nil:
    section.add "X-Amz-Security-Token", valid_596280
  var valid_596281 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596281 = validateParameter(valid_596281, JString, required = false,
                                 default = nil)
  if valid_596281 != nil:
    section.add "X-Amz-Content-Sha256", valid_596281
  var valid_596282 = header.getOrDefault("X-Amz-Algorithm")
  valid_596282 = validateParameter(valid_596282, JString, required = false,
                                 default = nil)
  if valid_596282 != nil:
    section.add "X-Amz-Algorithm", valid_596282
  var valid_596283 = header.getOrDefault("X-Amz-Signature")
  valid_596283 = validateParameter(valid_596283, JString, required = false,
                                 default = nil)
  if valid_596283 != nil:
    section.add "X-Amz-Signature", valid_596283
  var valid_596284 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596284 = validateParameter(valid_596284, JString, required = false,
                                 default = nil)
  if valid_596284 != nil:
    section.add "X-Amz-SignedHeaders", valid_596284
  var valid_596285 = header.getOrDefault("X-Amz-Credential")
  valid_596285 = validateParameter(valid_596285, JString, required = false,
                                 default = nil)
  if valid_596285 != nil:
    section.add "X-Amz-Credential", valid_596285
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596286: Call_GetGetPolicy_596273; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_596286.validator(path, query, header, formData, body)
  let scheme = call_596286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596286.url(scheme.get, call_596286.host, call_596286.base,
                         call_596286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596286, url, valid)

proc call*(call_596287: Call_GetGetPolicy_596273; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596288 = newJObject()
  add(query_596288, "PolicyArn", newJString(PolicyArn))
  add(query_596288, "Action", newJString(Action))
  add(query_596288, "Version", newJString(Version))
  result = call_596287.call(nil, query_596288, nil, nil, nil)

var getGetPolicy* = Call_GetGetPolicy_596273(name: "getGetPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_GetGetPolicy_596274, base: "/",
    url: url_GetGetPolicy_596275, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicyVersion_596323 = ref object of OpenApiRestCall_593437
proc url_PostGetPolicyVersion_596325(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetPolicyVersion_596324(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596326 = query.getOrDefault("Action")
  valid_596326 = validateParameter(valid_596326, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_596326 != nil:
    section.add "Action", valid_596326
  var valid_596327 = query.getOrDefault("Version")
  valid_596327 = validateParameter(valid_596327, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596327 != nil:
    section.add "Version", valid_596327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596328 = header.getOrDefault("X-Amz-Date")
  valid_596328 = validateParameter(valid_596328, JString, required = false,
                                 default = nil)
  if valid_596328 != nil:
    section.add "X-Amz-Date", valid_596328
  var valid_596329 = header.getOrDefault("X-Amz-Security-Token")
  valid_596329 = validateParameter(valid_596329, JString, required = false,
                                 default = nil)
  if valid_596329 != nil:
    section.add "X-Amz-Security-Token", valid_596329
  var valid_596330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596330 = validateParameter(valid_596330, JString, required = false,
                                 default = nil)
  if valid_596330 != nil:
    section.add "X-Amz-Content-Sha256", valid_596330
  var valid_596331 = header.getOrDefault("X-Amz-Algorithm")
  valid_596331 = validateParameter(valid_596331, JString, required = false,
                                 default = nil)
  if valid_596331 != nil:
    section.add "X-Amz-Algorithm", valid_596331
  var valid_596332 = header.getOrDefault("X-Amz-Signature")
  valid_596332 = validateParameter(valid_596332, JString, required = false,
                                 default = nil)
  if valid_596332 != nil:
    section.add "X-Amz-Signature", valid_596332
  var valid_596333 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596333 = validateParameter(valid_596333, JString, required = false,
                                 default = nil)
  if valid_596333 != nil:
    section.add "X-Amz-SignedHeaders", valid_596333
  var valid_596334 = header.getOrDefault("X-Amz-Credential")
  valid_596334 = validateParameter(valid_596334, JString, required = false,
                                 default = nil)
  if valid_596334 != nil:
    section.add "X-Amz-Credential", valid_596334
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_596335 = formData.getOrDefault("PolicyArn")
  valid_596335 = validateParameter(valid_596335, JString, required = true,
                                 default = nil)
  if valid_596335 != nil:
    section.add "PolicyArn", valid_596335
  var valid_596336 = formData.getOrDefault("VersionId")
  valid_596336 = validateParameter(valid_596336, JString, required = true,
                                 default = nil)
  if valid_596336 != nil:
    section.add "VersionId", valid_596336
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596337: Call_PostGetPolicyVersion_596323; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_596337.validator(path, query, header, formData, body)
  let scheme = call_596337.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596337.url(scheme.get, call_596337.host, call_596337.base,
                         call_596337.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596337, url, valid)

proc call*(call_596338: Call_PostGetPolicyVersion_596323; PolicyArn: string;
          VersionId: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  var query_596339 = newJObject()
  var formData_596340 = newJObject()
  add(formData_596340, "PolicyArn", newJString(PolicyArn))
  add(query_596339, "Action", newJString(Action))
  add(query_596339, "Version", newJString(Version))
  add(formData_596340, "VersionId", newJString(VersionId))
  result = call_596338.call(nil, query_596339, nil, formData_596340, nil)

var postGetPolicyVersion* = Call_PostGetPolicyVersion_596323(
    name: "postGetPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_PostGetPolicyVersion_596324, base: "/",
    url: url_PostGetPolicyVersion_596325, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicyVersion_596306 = ref object of OpenApiRestCall_593437
proc url_GetGetPolicyVersion_596308(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetPolicyVersion_596307(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_596309 = query.getOrDefault("PolicyArn")
  valid_596309 = validateParameter(valid_596309, JString, required = true,
                                 default = nil)
  if valid_596309 != nil:
    section.add "PolicyArn", valid_596309
  var valid_596310 = query.getOrDefault("VersionId")
  valid_596310 = validateParameter(valid_596310, JString, required = true,
                                 default = nil)
  if valid_596310 != nil:
    section.add "VersionId", valid_596310
  var valid_596311 = query.getOrDefault("Action")
  valid_596311 = validateParameter(valid_596311, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_596311 != nil:
    section.add "Action", valid_596311
  var valid_596312 = query.getOrDefault("Version")
  valid_596312 = validateParameter(valid_596312, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596312 != nil:
    section.add "Version", valid_596312
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596313 = header.getOrDefault("X-Amz-Date")
  valid_596313 = validateParameter(valid_596313, JString, required = false,
                                 default = nil)
  if valid_596313 != nil:
    section.add "X-Amz-Date", valid_596313
  var valid_596314 = header.getOrDefault("X-Amz-Security-Token")
  valid_596314 = validateParameter(valid_596314, JString, required = false,
                                 default = nil)
  if valid_596314 != nil:
    section.add "X-Amz-Security-Token", valid_596314
  var valid_596315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596315 = validateParameter(valid_596315, JString, required = false,
                                 default = nil)
  if valid_596315 != nil:
    section.add "X-Amz-Content-Sha256", valid_596315
  var valid_596316 = header.getOrDefault("X-Amz-Algorithm")
  valid_596316 = validateParameter(valid_596316, JString, required = false,
                                 default = nil)
  if valid_596316 != nil:
    section.add "X-Amz-Algorithm", valid_596316
  var valid_596317 = header.getOrDefault("X-Amz-Signature")
  valid_596317 = validateParameter(valid_596317, JString, required = false,
                                 default = nil)
  if valid_596317 != nil:
    section.add "X-Amz-Signature", valid_596317
  var valid_596318 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596318 = validateParameter(valid_596318, JString, required = false,
                                 default = nil)
  if valid_596318 != nil:
    section.add "X-Amz-SignedHeaders", valid_596318
  var valid_596319 = header.getOrDefault("X-Amz-Credential")
  valid_596319 = validateParameter(valid_596319, JString, required = false,
                                 default = nil)
  if valid_596319 != nil:
    section.add "X-Amz-Credential", valid_596319
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596320: Call_GetGetPolicyVersion_596306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_596320.validator(path, query, header, formData, body)
  let scheme = call_596320.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596320.url(scheme.get, call_596320.host, call_596320.base,
                         call_596320.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596320, url, valid)

proc call*(call_596321: Call_GetGetPolicyVersion_596306; PolicyArn: string;
          VersionId: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596322 = newJObject()
  add(query_596322, "PolicyArn", newJString(PolicyArn))
  add(query_596322, "VersionId", newJString(VersionId))
  add(query_596322, "Action", newJString(Action))
  add(query_596322, "Version", newJString(Version))
  result = call_596321.call(nil, query_596322, nil, nil, nil)

var getGetPolicyVersion* = Call_GetGetPolicyVersion_596306(
    name: "getGetPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_GetGetPolicyVersion_596307, base: "/",
    url: url_GetGetPolicyVersion_596308, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRole_596357 = ref object of OpenApiRestCall_593437
proc url_PostGetRole_596359(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetRole_596358(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596360 = query.getOrDefault("Action")
  valid_596360 = validateParameter(valid_596360, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_596360 != nil:
    section.add "Action", valid_596360
  var valid_596361 = query.getOrDefault("Version")
  valid_596361 = validateParameter(valid_596361, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596361 != nil:
    section.add "Version", valid_596361
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596362 = header.getOrDefault("X-Amz-Date")
  valid_596362 = validateParameter(valid_596362, JString, required = false,
                                 default = nil)
  if valid_596362 != nil:
    section.add "X-Amz-Date", valid_596362
  var valid_596363 = header.getOrDefault("X-Amz-Security-Token")
  valid_596363 = validateParameter(valid_596363, JString, required = false,
                                 default = nil)
  if valid_596363 != nil:
    section.add "X-Amz-Security-Token", valid_596363
  var valid_596364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596364 = validateParameter(valid_596364, JString, required = false,
                                 default = nil)
  if valid_596364 != nil:
    section.add "X-Amz-Content-Sha256", valid_596364
  var valid_596365 = header.getOrDefault("X-Amz-Algorithm")
  valid_596365 = validateParameter(valid_596365, JString, required = false,
                                 default = nil)
  if valid_596365 != nil:
    section.add "X-Amz-Algorithm", valid_596365
  var valid_596366 = header.getOrDefault("X-Amz-Signature")
  valid_596366 = validateParameter(valid_596366, JString, required = false,
                                 default = nil)
  if valid_596366 != nil:
    section.add "X-Amz-Signature", valid_596366
  var valid_596367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596367 = validateParameter(valid_596367, JString, required = false,
                                 default = nil)
  if valid_596367 != nil:
    section.add "X-Amz-SignedHeaders", valid_596367
  var valid_596368 = header.getOrDefault("X-Amz-Credential")
  valid_596368 = validateParameter(valid_596368, JString, required = false,
                                 default = nil)
  if valid_596368 != nil:
    section.add "X-Amz-Credential", valid_596368
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_596369 = formData.getOrDefault("RoleName")
  valid_596369 = validateParameter(valid_596369, JString, required = true,
                                 default = nil)
  if valid_596369 != nil:
    section.add "RoleName", valid_596369
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596370: Call_PostGetRole_596357; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_596370.validator(path, query, header, formData, body)
  let scheme = call_596370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596370.url(scheme.get, call_596370.host, call_596370.base,
                         call_596370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596370, url, valid)

proc call*(call_596371: Call_PostGetRole_596357; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## postGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596372 = newJObject()
  var formData_596373 = newJObject()
  add(formData_596373, "RoleName", newJString(RoleName))
  add(query_596372, "Action", newJString(Action))
  add(query_596372, "Version", newJString(Version))
  result = call_596371.call(nil, query_596372, nil, formData_596373, nil)

var postGetRole* = Call_PostGetRole_596357(name: "postGetRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetRole",
                                        validator: validate_PostGetRole_596358,
                                        base: "/", url: url_PostGetRole_596359,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRole_596341 = ref object of OpenApiRestCall_593437
proc url_GetGetRole_596343(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetRole_596342(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596344 = query.getOrDefault("Action")
  valid_596344 = validateParameter(valid_596344, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_596344 != nil:
    section.add "Action", valid_596344
  var valid_596345 = query.getOrDefault("RoleName")
  valid_596345 = validateParameter(valid_596345, JString, required = true,
                                 default = nil)
  if valid_596345 != nil:
    section.add "RoleName", valid_596345
  var valid_596346 = query.getOrDefault("Version")
  valid_596346 = validateParameter(valid_596346, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596346 != nil:
    section.add "Version", valid_596346
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596347 = header.getOrDefault("X-Amz-Date")
  valid_596347 = validateParameter(valid_596347, JString, required = false,
                                 default = nil)
  if valid_596347 != nil:
    section.add "X-Amz-Date", valid_596347
  var valid_596348 = header.getOrDefault("X-Amz-Security-Token")
  valid_596348 = validateParameter(valid_596348, JString, required = false,
                                 default = nil)
  if valid_596348 != nil:
    section.add "X-Amz-Security-Token", valid_596348
  var valid_596349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596349 = validateParameter(valid_596349, JString, required = false,
                                 default = nil)
  if valid_596349 != nil:
    section.add "X-Amz-Content-Sha256", valid_596349
  var valid_596350 = header.getOrDefault("X-Amz-Algorithm")
  valid_596350 = validateParameter(valid_596350, JString, required = false,
                                 default = nil)
  if valid_596350 != nil:
    section.add "X-Amz-Algorithm", valid_596350
  var valid_596351 = header.getOrDefault("X-Amz-Signature")
  valid_596351 = validateParameter(valid_596351, JString, required = false,
                                 default = nil)
  if valid_596351 != nil:
    section.add "X-Amz-Signature", valid_596351
  var valid_596352 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596352 = validateParameter(valid_596352, JString, required = false,
                                 default = nil)
  if valid_596352 != nil:
    section.add "X-Amz-SignedHeaders", valid_596352
  var valid_596353 = header.getOrDefault("X-Amz-Credential")
  valid_596353 = validateParameter(valid_596353, JString, required = false,
                                 default = nil)
  if valid_596353 != nil:
    section.add "X-Amz-Credential", valid_596353
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596354: Call_GetGetRole_596341; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_596354.validator(path, query, header, formData, body)
  let scheme = call_596354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596354.url(scheme.get, call_596354.host, call_596354.base,
                         call_596354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596354, url, valid)

proc call*(call_596355: Call_GetGetRole_596341; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## getGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_596356 = newJObject()
  add(query_596356, "Action", newJString(Action))
  add(query_596356, "RoleName", newJString(RoleName))
  add(query_596356, "Version", newJString(Version))
  result = call_596355.call(nil, query_596356, nil, nil, nil)

var getGetRole* = Call_GetGetRole_596341(name: "getGetRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetRole",
                                      validator: validate_GetGetRole_596342,
                                      base: "/", url: url_GetGetRole_596343,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRolePolicy_596391 = ref object of OpenApiRestCall_593437
proc url_PostGetRolePolicy_596393(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetRolePolicy_596392(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596394 = query.getOrDefault("Action")
  valid_596394 = validateParameter(valid_596394, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_596394 != nil:
    section.add "Action", valid_596394
  var valid_596395 = query.getOrDefault("Version")
  valid_596395 = validateParameter(valid_596395, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596395 != nil:
    section.add "Version", valid_596395
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596396 = header.getOrDefault("X-Amz-Date")
  valid_596396 = validateParameter(valid_596396, JString, required = false,
                                 default = nil)
  if valid_596396 != nil:
    section.add "X-Amz-Date", valid_596396
  var valid_596397 = header.getOrDefault("X-Amz-Security-Token")
  valid_596397 = validateParameter(valid_596397, JString, required = false,
                                 default = nil)
  if valid_596397 != nil:
    section.add "X-Amz-Security-Token", valid_596397
  var valid_596398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596398 = validateParameter(valid_596398, JString, required = false,
                                 default = nil)
  if valid_596398 != nil:
    section.add "X-Amz-Content-Sha256", valid_596398
  var valid_596399 = header.getOrDefault("X-Amz-Algorithm")
  valid_596399 = validateParameter(valid_596399, JString, required = false,
                                 default = nil)
  if valid_596399 != nil:
    section.add "X-Amz-Algorithm", valid_596399
  var valid_596400 = header.getOrDefault("X-Amz-Signature")
  valid_596400 = validateParameter(valid_596400, JString, required = false,
                                 default = nil)
  if valid_596400 != nil:
    section.add "X-Amz-Signature", valid_596400
  var valid_596401 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596401 = validateParameter(valid_596401, JString, required = false,
                                 default = nil)
  if valid_596401 != nil:
    section.add "X-Amz-SignedHeaders", valid_596401
  var valid_596402 = header.getOrDefault("X-Amz-Credential")
  valid_596402 = validateParameter(valid_596402, JString, required = false,
                                 default = nil)
  if valid_596402 != nil:
    section.add "X-Amz-Credential", valid_596402
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_596403 = formData.getOrDefault("PolicyName")
  valid_596403 = validateParameter(valid_596403, JString, required = true,
                                 default = nil)
  if valid_596403 != nil:
    section.add "PolicyName", valid_596403
  var valid_596404 = formData.getOrDefault("RoleName")
  valid_596404 = validateParameter(valid_596404, JString, required = true,
                                 default = nil)
  if valid_596404 != nil:
    section.add "RoleName", valid_596404
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596405: Call_PostGetRolePolicy_596391; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_596405.validator(path, query, header, formData, body)
  let scheme = call_596405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596405.url(scheme.get, call_596405.host, call_596405.base,
                         call_596405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596405, url, valid)

proc call*(call_596406: Call_PostGetRolePolicy_596391; PolicyName: string;
          RoleName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596407 = newJObject()
  var formData_596408 = newJObject()
  add(formData_596408, "PolicyName", newJString(PolicyName))
  add(formData_596408, "RoleName", newJString(RoleName))
  add(query_596407, "Action", newJString(Action))
  add(query_596407, "Version", newJString(Version))
  result = call_596406.call(nil, query_596407, nil, formData_596408, nil)

var postGetRolePolicy* = Call_PostGetRolePolicy_596391(name: "postGetRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_PostGetRolePolicy_596392,
    base: "/", url: url_PostGetRolePolicy_596393,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRolePolicy_596374 = ref object of OpenApiRestCall_593437
proc url_GetGetRolePolicy_596376(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetRolePolicy_596375(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596377 = query.getOrDefault("Action")
  valid_596377 = validateParameter(valid_596377, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_596377 != nil:
    section.add "Action", valid_596377
  var valid_596378 = query.getOrDefault("RoleName")
  valid_596378 = validateParameter(valid_596378, JString, required = true,
                                 default = nil)
  if valid_596378 != nil:
    section.add "RoleName", valid_596378
  var valid_596379 = query.getOrDefault("Version")
  valid_596379 = validateParameter(valid_596379, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596379 != nil:
    section.add "Version", valid_596379
  var valid_596380 = query.getOrDefault("PolicyName")
  valid_596380 = validateParameter(valid_596380, JString, required = true,
                                 default = nil)
  if valid_596380 != nil:
    section.add "PolicyName", valid_596380
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596381 = header.getOrDefault("X-Amz-Date")
  valid_596381 = validateParameter(valid_596381, JString, required = false,
                                 default = nil)
  if valid_596381 != nil:
    section.add "X-Amz-Date", valid_596381
  var valid_596382 = header.getOrDefault("X-Amz-Security-Token")
  valid_596382 = validateParameter(valid_596382, JString, required = false,
                                 default = nil)
  if valid_596382 != nil:
    section.add "X-Amz-Security-Token", valid_596382
  var valid_596383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596383 = validateParameter(valid_596383, JString, required = false,
                                 default = nil)
  if valid_596383 != nil:
    section.add "X-Amz-Content-Sha256", valid_596383
  var valid_596384 = header.getOrDefault("X-Amz-Algorithm")
  valid_596384 = validateParameter(valid_596384, JString, required = false,
                                 default = nil)
  if valid_596384 != nil:
    section.add "X-Amz-Algorithm", valid_596384
  var valid_596385 = header.getOrDefault("X-Amz-Signature")
  valid_596385 = validateParameter(valid_596385, JString, required = false,
                                 default = nil)
  if valid_596385 != nil:
    section.add "X-Amz-Signature", valid_596385
  var valid_596386 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596386 = validateParameter(valid_596386, JString, required = false,
                                 default = nil)
  if valid_596386 != nil:
    section.add "X-Amz-SignedHeaders", valid_596386
  var valid_596387 = header.getOrDefault("X-Amz-Credential")
  valid_596387 = validateParameter(valid_596387, JString, required = false,
                                 default = nil)
  if valid_596387 != nil:
    section.add "X-Amz-Credential", valid_596387
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596388: Call_GetGetRolePolicy_596374; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_596388.validator(path, query, header, formData, body)
  let scheme = call_596388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596388.url(scheme.get, call_596388.host, call_596388.base,
                         call_596388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596388, url, valid)

proc call*(call_596389: Call_GetGetRolePolicy_596374; RoleName: string;
          PolicyName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_596390 = newJObject()
  add(query_596390, "Action", newJString(Action))
  add(query_596390, "RoleName", newJString(RoleName))
  add(query_596390, "Version", newJString(Version))
  add(query_596390, "PolicyName", newJString(PolicyName))
  result = call_596389.call(nil, query_596390, nil, nil, nil)

var getGetRolePolicy* = Call_GetGetRolePolicy_596374(name: "getGetRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_GetGetRolePolicy_596375,
    base: "/", url: url_GetGetRolePolicy_596376,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSAMLProvider_596425 = ref object of OpenApiRestCall_593437
proc url_PostGetSAMLProvider_596427(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetSAMLProvider_596426(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596428 = query.getOrDefault("Action")
  valid_596428 = validateParameter(valid_596428, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_596428 != nil:
    section.add "Action", valid_596428
  var valid_596429 = query.getOrDefault("Version")
  valid_596429 = validateParameter(valid_596429, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596429 != nil:
    section.add "Version", valid_596429
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596430 = header.getOrDefault("X-Amz-Date")
  valid_596430 = validateParameter(valid_596430, JString, required = false,
                                 default = nil)
  if valid_596430 != nil:
    section.add "X-Amz-Date", valid_596430
  var valid_596431 = header.getOrDefault("X-Amz-Security-Token")
  valid_596431 = validateParameter(valid_596431, JString, required = false,
                                 default = nil)
  if valid_596431 != nil:
    section.add "X-Amz-Security-Token", valid_596431
  var valid_596432 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596432 = validateParameter(valid_596432, JString, required = false,
                                 default = nil)
  if valid_596432 != nil:
    section.add "X-Amz-Content-Sha256", valid_596432
  var valid_596433 = header.getOrDefault("X-Amz-Algorithm")
  valid_596433 = validateParameter(valid_596433, JString, required = false,
                                 default = nil)
  if valid_596433 != nil:
    section.add "X-Amz-Algorithm", valid_596433
  var valid_596434 = header.getOrDefault("X-Amz-Signature")
  valid_596434 = validateParameter(valid_596434, JString, required = false,
                                 default = nil)
  if valid_596434 != nil:
    section.add "X-Amz-Signature", valid_596434
  var valid_596435 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596435 = validateParameter(valid_596435, JString, required = false,
                                 default = nil)
  if valid_596435 != nil:
    section.add "X-Amz-SignedHeaders", valid_596435
  var valid_596436 = header.getOrDefault("X-Amz-Credential")
  valid_596436 = validateParameter(valid_596436, JString, required = false,
                                 default = nil)
  if valid_596436 != nil:
    section.add "X-Amz-Credential", valid_596436
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_596437 = formData.getOrDefault("SAMLProviderArn")
  valid_596437 = validateParameter(valid_596437, JString, required = true,
                                 default = nil)
  if valid_596437 != nil:
    section.add "SAMLProviderArn", valid_596437
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596438: Call_PostGetSAMLProvider_596425; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_596438.validator(path, query, header, formData, body)
  let scheme = call_596438.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596438.url(scheme.get, call_596438.host, call_596438.base,
                         call_596438.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596438, url, valid)

proc call*(call_596439: Call_PostGetSAMLProvider_596425; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596440 = newJObject()
  var formData_596441 = newJObject()
  add(formData_596441, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_596440, "Action", newJString(Action))
  add(query_596440, "Version", newJString(Version))
  result = call_596439.call(nil, query_596440, nil, formData_596441, nil)

var postGetSAMLProvider* = Call_PostGetSAMLProvider_596425(
    name: "postGetSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSAMLProvider",
    validator: validate_PostGetSAMLProvider_596426, base: "/",
    url: url_PostGetSAMLProvider_596427, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSAMLProvider_596409 = ref object of OpenApiRestCall_593437
proc url_GetGetSAMLProvider_596411(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetSAMLProvider_596410(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596412 = query.getOrDefault("Action")
  valid_596412 = validateParameter(valid_596412, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_596412 != nil:
    section.add "Action", valid_596412
  var valid_596413 = query.getOrDefault("SAMLProviderArn")
  valid_596413 = validateParameter(valid_596413, JString, required = true,
                                 default = nil)
  if valid_596413 != nil:
    section.add "SAMLProviderArn", valid_596413
  var valid_596414 = query.getOrDefault("Version")
  valid_596414 = validateParameter(valid_596414, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596414 != nil:
    section.add "Version", valid_596414
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596415 = header.getOrDefault("X-Amz-Date")
  valid_596415 = validateParameter(valid_596415, JString, required = false,
                                 default = nil)
  if valid_596415 != nil:
    section.add "X-Amz-Date", valid_596415
  var valid_596416 = header.getOrDefault("X-Amz-Security-Token")
  valid_596416 = validateParameter(valid_596416, JString, required = false,
                                 default = nil)
  if valid_596416 != nil:
    section.add "X-Amz-Security-Token", valid_596416
  var valid_596417 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596417 = validateParameter(valid_596417, JString, required = false,
                                 default = nil)
  if valid_596417 != nil:
    section.add "X-Amz-Content-Sha256", valid_596417
  var valid_596418 = header.getOrDefault("X-Amz-Algorithm")
  valid_596418 = validateParameter(valid_596418, JString, required = false,
                                 default = nil)
  if valid_596418 != nil:
    section.add "X-Amz-Algorithm", valid_596418
  var valid_596419 = header.getOrDefault("X-Amz-Signature")
  valid_596419 = validateParameter(valid_596419, JString, required = false,
                                 default = nil)
  if valid_596419 != nil:
    section.add "X-Amz-Signature", valid_596419
  var valid_596420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596420 = validateParameter(valid_596420, JString, required = false,
                                 default = nil)
  if valid_596420 != nil:
    section.add "X-Amz-SignedHeaders", valid_596420
  var valid_596421 = header.getOrDefault("X-Amz-Credential")
  valid_596421 = validateParameter(valid_596421, JString, required = false,
                                 default = nil)
  if valid_596421 != nil:
    section.add "X-Amz-Credential", valid_596421
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596422: Call_GetGetSAMLProvider_596409; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_596422.validator(path, query, header, formData, body)
  let scheme = call_596422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596422.url(scheme.get, call_596422.host, call_596422.base,
                         call_596422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596422, url, valid)

proc call*(call_596423: Call_GetGetSAMLProvider_596409; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_596424 = newJObject()
  add(query_596424, "Action", newJString(Action))
  add(query_596424, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_596424, "Version", newJString(Version))
  result = call_596423.call(nil, query_596424, nil, nil, nil)

var getGetSAMLProvider* = Call_GetGetSAMLProvider_596409(
    name: "getGetSAMLProvider", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSAMLProvider", validator: validate_GetGetSAMLProvider_596410,
    base: "/", url: url_GetGetSAMLProvider_596411,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSSHPublicKey_596460 = ref object of OpenApiRestCall_593437
proc url_PostGetSSHPublicKey_596462(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetSSHPublicKey_596461(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596463 = query.getOrDefault("Action")
  valid_596463 = validateParameter(valid_596463, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_596463 != nil:
    section.add "Action", valid_596463
  var valid_596464 = query.getOrDefault("Version")
  valid_596464 = validateParameter(valid_596464, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596464 != nil:
    section.add "Version", valid_596464
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596465 = header.getOrDefault("X-Amz-Date")
  valid_596465 = validateParameter(valid_596465, JString, required = false,
                                 default = nil)
  if valid_596465 != nil:
    section.add "X-Amz-Date", valid_596465
  var valid_596466 = header.getOrDefault("X-Amz-Security-Token")
  valid_596466 = validateParameter(valid_596466, JString, required = false,
                                 default = nil)
  if valid_596466 != nil:
    section.add "X-Amz-Security-Token", valid_596466
  var valid_596467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596467 = validateParameter(valid_596467, JString, required = false,
                                 default = nil)
  if valid_596467 != nil:
    section.add "X-Amz-Content-Sha256", valid_596467
  var valid_596468 = header.getOrDefault("X-Amz-Algorithm")
  valid_596468 = validateParameter(valid_596468, JString, required = false,
                                 default = nil)
  if valid_596468 != nil:
    section.add "X-Amz-Algorithm", valid_596468
  var valid_596469 = header.getOrDefault("X-Amz-Signature")
  valid_596469 = validateParameter(valid_596469, JString, required = false,
                                 default = nil)
  if valid_596469 != nil:
    section.add "X-Amz-Signature", valid_596469
  var valid_596470 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596470 = validateParameter(valid_596470, JString, required = false,
                                 default = nil)
  if valid_596470 != nil:
    section.add "X-Amz-SignedHeaders", valid_596470
  var valid_596471 = header.getOrDefault("X-Amz-Credential")
  valid_596471 = validateParameter(valid_596471, JString, required = false,
                                 default = nil)
  if valid_596471 != nil:
    section.add "X-Amz-Credential", valid_596471
  result.add "header", section
  ## parameters in `formData` object:
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Encoding` field"
  var valid_596472 = formData.getOrDefault("Encoding")
  valid_596472 = validateParameter(valid_596472, JString, required = true,
                                 default = newJString("SSH"))
  if valid_596472 != nil:
    section.add "Encoding", valid_596472
  var valid_596473 = formData.getOrDefault("UserName")
  valid_596473 = validateParameter(valid_596473, JString, required = true,
                                 default = nil)
  if valid_596473 != nil:
    section.add "UserName", valid_596473
  var valid_596474 = formData.getOrDefault("SSHPublicKeyId")
  valid_596474 = validateParameter(valid_596474, JString, required = true,
                                 default = nil)
  if valid_596474 != nil:
    section.add "SSHPublicKeyId", valid_596474
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596475: Call_PostGetSSHPublicKey_596460; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_596475.validator(path, query, header, formData, body)
  let scheme = call_596475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596475.url(scheme.get, call_596475.host, call_596475.base,
                         call_596475.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596475, url, valid)

proc call*(call_596476: Call_PostGetSSHPublicKey_596460; UserName: string;
          SSHPublicKeyId: string; Encoding: string = "SSH";
          Action: string = "GetSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596477 = newJObject()
  var formData_596478 = newJObject()
  add(formData_596478, "Encoding", newJString(Encoding))
  add(formData_596478, "UserName", newJString(UserName))
  add(formData_596478, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_596477, "Action", newJString(Action))
  add(query_596477, "Version", newJString(Version))
  result = call_596476.call(nil, query_596477, nil, formData_596478, nil)

var postGetSSHPublicKey* = Call_PostGetSSHPublicKey_596460(
    name: "postGetSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSSHPublicKey",
    validator: validate_PostGetSSHPublicKey_596461, base: "/",
    url: url_PostGetSSHPublicKey_596462, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSSHPublicKey_596442 = ref object of OpenApiRestCall_593437
proc url_GetGetSSHPublicKey_596444(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetSSHPublicKey_596443(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_596445 = query.getOrDefault("SSHPublicKeyId")
  valid_596445 = validateParameter(valid_596445, JString, required = true,
                                 default = nil)
  if valid_596445 != nil:
    section.add "SSHPublicKeyId", valid_596445
  var valid_596446 = query.getOrDefault("UserName")
  valid_596446 = validateParameter(valid_596446, JString, required = true,
                                 default = nil)
  if valid_596446 != nil:
    section.add "UserName", valid_596446
  var valid_596447 = query.getOrDefault("Action")
  valid_596447 = validateParameter(valid_596447, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_596447 != nil:
    section.add "Action", valid_596447
  var valid_596448 = query.getOrDefault("Encoding")
  valid_596448 = validateParameter(valid_596448, JString, required = true,
                                 default = newJString("SSH"))
  if valid_596448 != nil:
    section.add "Encoding", valid_596448
  var valid_596449 = query.getOrDefault("Version")
  valid_596449 = validateParameter(valid_596449, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596449 != nil:
    section.add "Version", valid_596449
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596450 = header.getOrDefault("X-Amz-Date")
  valid_596450 = validateParameter(valid_596450, JString, required = false,
                                 default = nil)
  if valid_596450 != nil:
    section.add "X-Amz-Date", valid_596450
  var valid_596451 = header.getOrDefault("X-Amz-Security-Token")
  valid_596451 = validateParameter(valid_596451, JString, required = false,
                                 default = nil)
  if valid_596451 != nil:
    section.add "X-Amz-Security-Token", valid_596451
  var valid_596452 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596452 = validateParameter(valid_596452, JString, required = false,
                                 default = nil)
  if valid_596452 != nil:
    section.add "X-Amz-Content-Sha256", valid_596452
  var valid_596453 = header.getOrDefault("X-Amz-Algorithm")
  valid_596453 = validateParameter(valid_596453, JString, required = false,
                                 default = nil)
  if valid_596453 != nil:
    section.add "X-Amz-Algorithm", valid_596453
  var valid_596454 = header.getOrDefault("X-Amz-Signature")
  valid_596454 = validateParameter(valid_596454, JString, required = false,
                                 default = nil)
  if valid_596454 != nil:
    section.add "X-Amz-Signature", valid_596454
  var valid_596455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596455 = validateParameter(valid_596455, JString, required = false,
                                 default = nil)
  if valid_596455 != nil:
    section.add "X-Amz-SignedHeaders", valid_596455
  var valid_596456 = header.getOrDefault("X-Amz-Credential")
  valid_596456 = validateParameter(valid_596456, JString, required = false,
                                 default = nil)
  if valid_596456 != nil:
    section.add "X-Amz-Credential", valid_596456
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596457: Call_GetGetSSHPublicKey_596442; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_596457.validator(path, query, header, formData, body)
  let scheme = call_596457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596457.url(scheme.get, call_596457.host, call_596457.base,
                         call_596457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596457, url, valid)

proc call*(call_596458: Call_GetGetSSHPublicKey_596442; SSHPublicKeyId: string;
          UserName: string; Action: string = "GetSSHPublicKey";
          Encoding: string = "SSH"; Version: string = "2010-05-08"): Recallable =
  ## getGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Version: string (required)
  var query_596459 = newJObject()
  add(query_596459, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_596459, "UserName", newJString(UserName))
  add(query_596459, "Action", newJString(Action))
  add(query_596459, "Encoding", newJString(Encoding))
  add(query_596459, "Version", newJString(Version))
  result = call_596458.call(nil, query_596459, nil, nil, nil)

var getGetSSHPublicKey* = Call_GetGetSSHPublicKey_596442(
    name: "getGetSSHPublicKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSSHPublicKey", validator: validate_GetGetSSHPublicKey_596443,
    base: "/", url: url_GetGetSSHPublicKey_596444,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServerCertificate_596495 = ref object of OpenApiRestCall_593437
proc url_PostGetServerCertificate_596497(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetServerCertificate_596496(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596498 = query.getOrDefault("Action")
  valid_596498 = validateParameter(valid_596498, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_596498 != nil:
    section.add "Action", valid_596498
  var valid_596499 = query.getOrDefault("Version")
  valid_596499 = validateParameter(valid_596499, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596499 != nil:
    section.add "Version", valid_596499
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596500 = header.getOrDefault("X-Amz-Date")
  valid_596500 = validateParameter(valid_596500, JString, required = false,
                                 default = nil)
  if valid_596500 != nil:
    section.add "X-Amz-Date", valid_596500
  var valid_596501 = header.getOrDefault("X-Amz-Security-Token")
  valid_596501 = validateParameter(valid_596501, JString, required = false,
                                 default = nil)
  if valid_596501 != nil:
    section.add "X-Amz-Security-Token", valid_596501
  var valid_596502 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596502 = validateParameter(valid_596502, JString, required = false,
                                 default = nil)
  if valid_596502 != nil:
    section.add "X-Amz-Content-Sha256", valid_596502
  var valid_596503 = header.getOrDefault("X-Amz-Algorithm")
  valid_596503 = validateParameter(valid_596503, JString, required = false,
                                 default = nil)
  if valid_596503 != nil:
    section.add "X-Amz-Algorithm", valid_596503
  var valid_596504 = header.getOrDefault("X-Amz-Signature")
  valid_596504 = validateParameter(valid_596504, JString, required = false,
                                 default = nil)
  if valid_596504 != nil:
    section.add "X-Amz-Signature", valid_596504
  var valid_596505 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596505 = validateParameter(valid_596505, JString, required = false,
                                 default = nil)
  if valid_596505 != nil:
    section.add "X-Amz-SignedHeaders", valid_596505
  var valid_596506 = header.getOrDefault("X-Amz-Credential")
  valid_596506 = validateParameter(valid_596506, JString, required = false,
                                 default = nil)
  if valid_596506 != nil:
    section.add "X-Amz-Credential", valid_596506
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_596507 = formData.getOrDefault("ServerCertificateName")
  valid_596507 = validateParameter(valid_596507, JString, required = true,
                                 default = nil)
  if valid_596507 != nil:
    section.add "ServerCertificateName", valid_596507
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596508: Call_PostGetServerCertificate_596495; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_596508.validator(path, query, header, formData, body)
  let scheme = call_596508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596508.url(scheme.get, call_596508.host, call_596508.base,
                         call_596508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596508, url, valid)

proc call*(call_596509: Call_PostGetServerCertificate_596495;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596510 = newJObject()
  var formData_596511 = newJObject()
  add(formData_596511, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_596510, "Action", newJString(Action))
  add(query_596510, "Version", newJString(Version))
  result = call_596509.call(nil, query_596510, nil, formData_596511, nil)

var postGetServerCertificate* = Call_PostGetServerCertificate_596495(
    name: "postGetServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_PostGetServerCertificate_596496, base: "/",
    url: url_PostGetServerCertificate_596497, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServerCertificate_596479 = ref object of OpenApiRestCall_593437
proc url_GetGetServerCertificate_596481(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetServerCertificate_596480(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_596482 = query.getOrDefault("ServerCertificateName")
  valid_596482 = validateParameter(valid_596482, JString, required = true,
                                 default = nil)
  if valid_596482 != nil:
    section.add "ServerCertificateName", valid_596482
  var valid_596483 = query.getOrDefault("Action")
  valid_596483 = validateParameter(valid_596483, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_596483 != nil:
    section.add "Action", valid_596483
  var valid_596484 = query.getOrDefault("Version")
  valid_596484 = validateParameter(valid_596484, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596484 != nil:
    section.add "Version", valid_596484
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596485 = header.getOrDefault("X-Amz-Date")
  valid_596485 = validateParameter(valid_596485, JString, required = false,
                                 default = nil)
  if valid_596485 != nil:
    section.add "X-Amz-Date", valid_596485
  var valid_596486 = header.getOrDefault("X-Amz-Security-Token")
  valid_596486 = validateParameter(valid_596486, JString, required = false,
                                 default = nil)
  if valid_596486 != nil:
    section.add "X-Amz-Security-Token", valid_596486
  var valid_596487 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596487 = validateParameter(valid_596487, JString, required = false,
                                 default = nil)
  if valid_596487 != nil:
    section.add "X-Amz-Content-Sha256", valid_596487
  var valid_596488 = header.getOrDefault("X-Amz-Algorithm")
  valid_596488 = validateParameter(valid_596488, JString, required = false,
                                 default = nil)
  if valid_596488 != nil:
    section.add "X-Amz-Algorithm", valid_596488
  var valid_596489 = header.getOrDefault("X-Amz-Signature")
  valid_596489 = validateParameter(valid_596489, JString, required = false,
                                 default = nil)
  if valid_596489 != nil:
    section.add "X-Amz-Signature", valid_596489
  var valid_596490 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596490 = validateParameter(valid_596490, JString, required = false,
                                 default = nil)
  if valid_596490 != nil:
    section.add "X-Amz-SignedHeaders", valid_596490
  var valid_596491 = header.getOrDefault("X-Amz-Credential")
  valid_596491 = validateParameter(valid_596491, JString, required = false,
                                 default = nil)
  if valid_596491 != nil:
    section.add "X-Amz-Credential", valid_596491
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596492: Call_GetGetServerCertificate_596479; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_596492.validator(path, query, header, formData, body)
  let scheme = call_596492.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596492.url(scheme.get, call_596492.host, call_596492.base,
                         call_596492.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596492, url, valid)

proc call*(call_596493: Call_GetGetServerCertificate_596479;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596494 = newJObject()
  add(query_596494, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_596494, "Action", newJString(Action))
  add(query_596494, "Version", newJString(Version))
  result = call_596493.call(nil, query_596494, nil, nil, nil)

var getGetServerCertificate* = Call_GetGetServerCertificate_596479(
    name: "getGetServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_GetGetServerCertificate_596480, base: "/",
    url: url_GetGetServerCertificate_596481, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetails_596530 = ref object of OpenApiRestCall_593437
proc url_PostGetServiceLastAccessedDetails_596532(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetServiceLastAccessedDetails_596531(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596533 = query.getOrDefault("Action")
  valid_596533 = validateParameter(valid_596533, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_596533 != nil:
    section.add "Action", valid_596533
  var valid_596534 = query.getOrDefault("Version")
  valid_596534 = validateParameter(valid_596534, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596534 != nil:
    section.add "Version", valid_596534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596535 = header.getOrDefault("X-Amz-Date")
  valid_596535 = validateParameter(valid_596535, JString, required = false,
                                 default = nil)
  if valid_596535 != nil:
    section.add "X-Amz-Date", valid_596535
  var valid_596536 = header.getOrDefault("X-Amz-Security-Token")
  valid_596536 = validateParameter(valid_596536, JString, required = false,
                                 default = nil)
  if valid_596536 != nil:
    section.add "X-Amz-Security-Token", valid_596536
  var valid_596537 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596537 = validateParameter(valid_596537, JString, required = false,
                                 default = nil)
  if valid_596537 != nil:
    section.add "X-Amz-Content-Sha256", valid_596537
  var valid_596538 = header.getOrDefault("X-Amz-Algorithm")
  valid_596538 = validateParameter(valid_596538, JString, required = false,
                                 default = nil)
  if valid_596538 != nil:
    section.add "X-Amz-Algorithm", valid_596538
  var valid_596539 = header.getOrDefault("X-Amz-Signature")
  valid_596539 = validateParameter(valid_596539, JString, required = false,
                                 default = nil)
  if valid_596539 != nil:
    section.add "X-Amz-Signature", valid_596539
  var valid_596540 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596540 = validateParameter(valid_596540, JString, required = false,
                                 default = nil)
  if valid_596540 != nil:
    section.add "X-Amz-SignedHeaders", valid_596540
  var valid_596541 = header.getOrDefault("X-Amz-Credential")
  valid_596541 = validateParameter(valid_596541, JString, required = false,
                                 default = nil)
  if valid_596541 != nil:
    section.add "X-Amz-Credential", valid_596541
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_596542 = formData.getOrDefault("Marker")
  valid_596542 = validateParameter(valid_596542, JString, required = false,
                                 default = nil)
  if valid_596542 != nil:
    section.add "Marker", valid_596542
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_596543 = formData.getOrDefault("JobId")
  valid_596543 = validateParameter(valid_596543, JString, required = true,
                                 default = nil)
  if valid_596543 != nil:
    section.add "JobId", valid_596543
  var valid_596544 = formData.getOrDefault("MaxItems")
  valid_596544 = validateParameter(valid_596544, JInt, required = false, default = nil)
  if valid_596544 != nil:
    section.add "MaxItems", valid_596544
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596545: Call_PostGetServiceLastAccessedDetails_596530;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_596545.validator(path, query, header, formData, body)
  let scheme = call_596545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596545.url(scheme.get, call_596545.host, call_596545.base,
                         call_596545.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596545, url, valid)

proc call*(call_596546: Call_PostGetServiceLastAccessedDetails_596530;
          JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetails"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596547 = newJObject()
  var formData_596548 = newJObject()
  add(formData_596548, "Marker", newJString(Marker))
  add(query_596547, "Action", newJString(Action))
  add(formData_596548, "JobId", newJString(JobId))
  add(formData_596548, "MaxItems", newJInt(MaxItems))
  add(query_596547, "Version", newJString(Version))
  result = call_596546.call(nil, query_596547, nil, formData_596548, nil)

var postGetServiceLastAccessedDetails* = Call_PostGetServiceLastAccessedDetails_596530(
    name: "postGetServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_PostGetServiceLastAccessedDetails_596531, base: "/",
    url: url_PostGetServiceLastAccessedDetails_596532,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetails_596512 = ref object of OpenApiRestCall_593437
proc url_GetGetServiceLastAccessedDetails_596514(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetServiceLastAccessedDetails_596513(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_596515 = query.getOrDefault("JobId")
  valid_596515 = validateParameter(valid_596515, JString, required = true,
                                 default = nil)
  if valid_596515 != nil:
    section.add "JobId", valid_596515
  var valid_596516 = query.getOrDefault("Action")
  valid_596516 = validateParameter(valid_596516, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_596516 != nil:
    section.add "Action", valid_596516
  var valid_596517 = query.getOrDefault("Marker")
  valid_596517 = validateParameter(valid_596517, JString, required = false,
                                 default = nil)
  if valid_596517 != nil:
    section.add "Marker", valid_596517
  var valid_596518 = query.getOrDefault("MaxItems")
  valid_596518 = validateParameter(valid_596518, JInt, required = false, default = nil)
  if valid_596518 != nil:
    section.add "MaxItems", valid_596518
  var valid_596519 = query.getOrDefault("Version")
  valid_596519 = validateParameter(valid_596519, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596519 != nil:
    section.add "Version", valid_596519
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596520 = header.getOrDefault("X-Amz-Date")
  valid_596520 = validateParameter(valid_596520, JString, required = false,
                                 default = nil)
  if valid_596520 != nil:
    section.add "X-Amz-Date", valid_596520
  var valid_596521 = header.getOrDefault("X-Amz-Security-Token")
  valid_596521 = validateParameter(valid_596521, JString, required = false,
                                 default = nil)
  if valid_596521 != nil:
    section.add "X-Amz-Security-Token", valid_596521
  var valid_596522 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596522 = validateParameter(valid_596522, JString, required = false,
                                 default = nil)
  if valid_596522 != nil:
    section.add "X-Amz-Content-Sha256", valid_596522
  var valid_596523 = header.getOrDefault("X-Amz-Algorithm")
  valid_596523 = validateParameter(valid_596523, JString, required = false,
                                 default = nil)
  if valid_596523 != nil:
    section.add "X-Amz-Algorithm", valid_596523
  var valid_596524 = header.getOrDefault("X-Amz-Signature")
  valid_596524 = validateParameter(valid_596524, JString, required = false,
                                 default = nil)
  if valid_596524 != nil:
    section.add "X-Amz-Signature", valid_596524
  var valid_596525 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596525 = validateParameter(valid_596525, JString, required = false,
                                 default = nil)
  if valid_596525 != nil:
    section.add "X-Amz-SignedHeaders", valid_596525
  var valid_596526 = header.getOrDefault("X-Amz-Credential")
  valid_596526 = validateParameter(valid_596526, JString, required = false,
                                 default = nil)
  if valid_596526 != nil:
    section.add "X-Amz-Credential", valid_596526
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596527: Call_GetGetServiceLastAccessedDetails_596512;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_596527.validator(path, query, header, formData, body)
  let scheme = call_596527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596527.url(scheme.get, call_596527.host, call_596527.base,
                         call_596527.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596527, url, valid)

proc call*(call_596528: Call_GetGetServiceLastAccessedDetails_596512;
          JobId: string; Action: string = "GetServiceLastAccessedDetails";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596529 = newJObject()
  add(query_596529, "JobId", newJString(JobId))
  add(query_596529, "Action", newJString(Action))
  add(query_596529, "Marker", newJString(Marker))
  add(query_596529, "MaxItems", newJInt(MaxItems))
  add(query_596529, "Version", newJString(Version))
  result = call_596528.call(nil, query_596529, nil, nil, nil)

var getGetServiceLastAccessedDetails* = Call_GetGetServiceLastAccessedDetails_596512(
    name: "getGetServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_GetGetServiceLastAccessedDetails_596513, base: "/",
    url: url_GetGetServiceLastAccessedDetails_596514,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetailsWithEntities_596568 = ref object of OpenApiRestCall_593437
proc url_PostGetServiceLastAccessedDetailsWithEntities_596570(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetServiceLastAccessedDetailsWithEntities_596569(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596571 = query.getOrDefault("Action")
  valid_596571 = validateParameter(valid_596571, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_596571 != nil:
    section.add "Action", valid_596571
  var valid_596572 = query.getOrDefault("Version")
  valid_596572 = validateParameter(valid_596572, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596572 != nil:
    section.add "Version", valid_596572
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596573 = header.getOrDefault("X-Amz-Date")
  valid_596573 = validateParameter(valid_596573, JString, required = false,
                                 default = nil)
  if valid_596573 != nil:
    section.add "X-Amz-Date", valid_596573
  var valid_596574 = header.getOrDefault("X-Amz-Security-Token")
  valid_596574 = validateParameter(valid_596574, JString, required = false,
                                 default = nil)
  if valid_596574 != nil:
    section.add "X-Amz-Security-Token", valid_596574
  var valid_596575 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596575 = validateParameter(valid_596575, JString, required = false,
                                 default = nil)
  if valid_596575 != nil:
    section.add "X-Amz-Content-Sha256", valid_596575
  var valid_596576 = header.getOrDefault("X-Amz-Algorithm")
  valid_596576 = validateParameter(valid_596576, JString, required = false,
                                 default = nil)
  if valid_596576 != nil:
    section.add "X-Amz-Algorithm", valid_596576
  var valid_596577 = header.getOrDefault("X-Amz-Signature")
  valid_596577 = validateParameter(valid_596577, JString, required = false,
                                 default = nil)
  if valid_596577 != nil:
    section.add "X-Amz-Signature", valid_596577
  var valid_596578 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596578 = validateParameter(valid_596578, JString, required = false,
                                 default = nil)
  if valid_596578 != nil:
    section.add "X-Amz-SignedHeaders", valid_596578
  var valid_596579 = header.getOrDefault("X-Amz-Credential")
  valid_596579 = validateParameter(valid_596579, JString, required = false,
                                 default = nil)
  if valid_596579 != nil:
    section.add "X-Amz-Credential", valid_596579
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceNamespace` field"
  var valid_596580 = formData.getOrDefault("ServiceNamespace")
  valid_596580 = validateParameter(valid_596580, JString, required = true,
                                 default = nil)
  if valid_596580 != nil:
    section.add "ServiceNamespace", valid_596580
  var valid_596581 = formData.getOrDefault("Marker")
  valid_596581 = validateParameter(valid_596581, JString, required = false,
                                 default = nil)
  if valid_596581 != nil:
    section.add "Marker", valid_596581
  var valid_596582 = formData.getOrDefault("JobId")
  valid_596582 = validateParameter(valid_596582, JString, required = true,
                                 default = nil)
  if valid_596582 != nil:
    section.add "JobId", valid_596582
  var valid_596583 = formData.getOrDefault("MaxItems")
  valid_596583 = validateParameter(valid_596583, JInt, required = false, default = nil)
  if valid_596583 != nil:
    section.add "MaxItems", valid_596583
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596584: Call_PostGetServiceLastAccessedDetailsWithEntities_596568;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_596584.validator(path, query, header, formData, body)
  let scheme = call_596584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596584.url(scheme.get, call_596584.host, call_596584.base,
                         call_596584.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596584, url, valid)

proc call*(call_596585: Call_PostGetServiceLastAccessedDetailsWithEntities_596568;
          ServiceNamespace: string; JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596586 = newJObject()
  var formData_596587 = newJObject()
  add(formData_596587, "ServiceNamespace", newJString(ServiceNamespace))
  add(formData_596587, "Marker", newJString(Marker))
  add(query_596586, "Action", newJString(Action))
  add(formData_596587, "JobId", newJString(JobId))
  add(formData_596587, "MaxItems", newJInt(MaxItems))
  add(query_596586, "Version", newJString(Version))
  result = call_596585.call(nil, query_596586, nil, formData_596587, nil)

var postGetServiceLastAccessedDetailsWithEntities* = Call_PostGetServiceLastAccessedDetailsWithEntities_596568(
    name: "postGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_PostGetServiceLastAccessedDetailsWithEntities_596569,
    base: "/", url: url_PostGetServiceLastAccessedDetailsWithEntities_596570,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetailsWithEntities_596549 = ref object of OpenApiRestCall_593437
proc url_GetGetServiceLastAccessedDetailsWithEntities_596551(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetServiceLastAccessedDetailsWithEntities_596550(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_596552 = query.getOrDefault("JobId")
  valid_596552 = validateParameter(valid_596552, JString, required = true,
                                 default = nil)
  if valid_596552 != nil:
    section.add "JobId", valid_596552
  var valid_596553 = query.getOrDefault("Action")
  valid_596553 = validateParameter(valid_596553, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_596553 != nil:
    section.add "Action", valid_596553
  var valid_596554 = query.getOrDefault("Marker")
  valid_596554 = validateParameter(valid_596554, JString, required = false,
                                 default = nil)
  if valid_596554 != nil:
    section.add "Marker", valid_596554
  var valid_596555 = query.getOrDefault("MaxItems")
  valid_596555 = validateParameter(valid_596555, JInt, required = false, default = nil)
  if valid_596555 != nil:
    section.add "MaxItems", valid_596555
  var valid_596556 = query.getOrDefault("Version")
  valid_596556 = validateParameter(valid_596556, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596556 != nil:
    section.add "Version", valid_596556
  var valid_596557 = query.getOrDefault("ServiceNamespace")
  valid_596557 = validateParameter(valid_596557, JString, required = true,
                                 default = nil)
  if valid_596557 != nil:
    section.add "ServiceNamespace", valid_596557
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596558 = header.getOrDefault("X-Amz-Date")
  valid_596558 = validateParameter(valid_596558, JString, required = false,
                                 default = nil)
  if valid_596558 != nil:
    section.add "X-Amz-Date", valid_596558
  var valid_596559 = header.getOrDefault("X-Amz-Security-Token")
  valid_596559 = validateParameter(valid_596559, JString, required = false,
                                 default = nil)
  if valid_596559 != nil:
    section.add "X-Amz-Security-Token", valid_596559
  var valid_596560 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596560 = validateParameter(valid_596560, JString, required = false,
                                 default = nil)
  if valid_596560 != nil:
    section.add "X-Amz-Content-Sha256", valid_596560
  var valid_596561 = header.getOrDefault("X-Amz-Algorithm")
  valid_596561 = validateParameter(valid_596561, JString, required = false,
                                 default = nil)
  if valid_596561 != nil:
    section.add "X-Amz-Algorithm", valid_596561
  var valid_596562 = header.getOrDefault("X-Amz-Signature")
  valid_596562 = validateParameter(valid_596562, JString, required = false,
                                 default = nil)
  if valid_596562 != nil:
    section.add "X-Amz-Signature", valid_596562
  var valid_596563 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596563 = validateParameter(valid_596563, JString, required = false,
                                 default = nil)
  if valid_596563 != nil:
    section.add "X-Amz-SignedHeaders", valid_596563
  var valid_596564 = header.getOrDefault("X-Amz-Credential")
  valid_596564 = validateParameter(valid_596564, JString, required = false,
                                 default = nil)
  if valid_596564 != nil:
    section.add "X-Amz-Credential", valid_596564
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596565: Call_GetGetServiceLastAccessedDetailsWithEntities_596549;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_596565.validator(path, query, header, formData, body)
  let scheme = call_596565.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596565.url(scheme.get, call_596565.host, call_596565.base,
                         call_596565.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596565, url, valid)

proc call*(call_596566: Call_GetGetServiceLastAccessedDetailsWithEntities_596549;
          JobId: string; ServiceNamespace: string;
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  var query_596567 = newJObject()
  add(query_596567, "JobId", newJString(JobId))
  add(query_596567, "Action", newJString(Action))
  add(query_596567, "Marker", newJString(Marker))
  add(query_596567, "MaxItems", newJInt(MaxItems))
  add(query_596567, "Version", newJString(Version))
  add(query_596567, "ServiceNamespace", newJString(ServiceNamespace))
  result = call_596566.call(nil, query_596567, nil, nil, nil)

var getGetServiceLastAccessedDetailsWithEntities* = Call_GetGetServiceLastAccessedDetailsWithEntities_596549(
    name: "getGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_GetGetServiceLastAccessedDetailsWithEntities_596550,
    base: "/", url: url_GetGetServiceLastAccessedDetailsWithEntities_596551,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLinkedRoleDeletionStatus_596604 = ref object of OpenApiRestCall_593437
proc url_PostGetServiceLinkedRoleDeletionStatus_596606(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetServiceLinkedRoleDeletionStatus_596605(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596607 = query.getOrDefault("Action")
  valid_596607 = validateParameter(valid_596607, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_596607 != nil:
    section.add "Action", valid_596607
  var valid_596608 = query.getOrDefault("Version")
  valid_596608 = validateParameter(valid_596608, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596608 != nil:
    section.add "Version", valid_596608
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596609 = header.getOrDefault("X-Amz-Date")
  valid_596609 = validateParameter(valid_596609, JString, required = false,
                                 default = nil)
  if valid_596609 != nil:
    section.add "X-Amz-Date", valid_596609
  var valid_596610 = header.getOrDefault("X-Amz-Security-Token")
  valid_596610 = validateParameter(valid_596610, JString, required = false,
                                 default = nil)
  if valid_596610 != nil:
    section.add "X-Amz-Security-Token", valid_596610
  var valid_596611 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596611 = validateParameter(valid_596611, JString, required = false,
                                 default = nil)
  if valid_596611 != nil:
    section.add "X-Amz-Content-Sha256", valid_596611
  var valid_596612 = header.getOrDefault("X-Amz-Algorithm")
  valid_596612 = validateParameter(valid_596612, JString, required = false,
                                 default = nil)
  if valid_596612 != nil:
    section.add "X-Amz-Algorithm", valid_596612
  var valid_596613 = header.getOrDefault("X-Amz-Signature")
  valid_596613 = validateParameter(valid_596613, JString, required = false,
                                 default = nil)
  if valid_596613 != nil:
    section.add "X-Amz-Signature", valid_596613
  var valid_596614 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596614 = validateParameter(valid_596614, JString, required = false,
                                 default = nil)
  if valid_596614 != nil:
    section.add "X-Amz-SignedHeaders", valid_596614
  var valid_596615 = header.getOrDefault("X-Amz-Credential")
  valid_596615 = validateParameter(valid_596615, JString, required = false,
                                 default = nil)
  if valid_596615 != nil:
    section.add "X-Amz-Credential", valid_596615
  result.add "header", section
  ## parameters in `formData` object:
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DeletionTaskId` field"
  var valid_596616 = formData.getOrDefault("DeletionTaskId")
  valid_596616 = validateParameter(valid_596616, JString, required = true,
                                 default = nil)
  if valid_596616 != nil:
    section.add "DeletionTaskId", valid_596616
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596617: Call_PostGetServiceLinkedRoleDeletionStatus_596604;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_596617.validator(path, query, header, formData, body)
  let scheme = call_596617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596617.url(scheme.get, call_596617.host, call_596617.base,
                         call_596617.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596617, url, valid)

proc call*(call_596618: Call_PostGetServiceLinkedRoleDeletionStatus_596604;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   Action: string (required)
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: string (required)
  var query_596619 = newJObject()
  var formData_596620 = newJObject()
  add(query_596619, "Action", newJString(Action))
  add(formData_596620, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_596619, "Version", newJString(Version))
  result = call_596618.call(nil, query_596619, nil, formData_596620, nil)

var postGetServiceLinkedRoleDeletionStatus* = Call_PostGetServiceLinkedRoleDeletionStatus_596604(
    name: "postGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_PostGetServiceLinkedRoleDeletionStatus_596605, base: "/",
    url: url_PostGetServiceLinkedRoleDeletionStatus_596606,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLinkedRoleDeletionStatus_596588 = ref object of OpenApiRestCall_593437
proc url_GetGetServiceLinkedRoleDeletionStatus_596590(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetServiceLinkedRoleDeletionStatus_596589(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596591 = query.getOrDefault("Action")
  valid_596591 = validateParameter(valid_596591, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_596591 != nil:
    section.add "Action", valid_596591
  var valid_596592 = query.getOrDefault("DeletionTaskId")
  valid_596592 = validateParameter(valid_596592, JString, required = true,
                                 default = nil)
  if valid_596592 != nil:
    section.add "DeletionTaskId", valid_596592
  var valid_596593 = query.getOrDefault("Version")
  valid_596593 = validateParameter(valid_596593, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596593 != nil:
    section.add "Version", valid_596593
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596594 = header.getOrDefault("X-Amz-Date")
  valid_596594 = validateParameter(valid_596594, JString, required = false,
                                 default = nil)
  if valid_596594 != nil:
    section.add "X-Amz-Date", valid_596594
  var valid_596595 = header.getOrDefault("X-Amz-Security-Token")
  valid_596595 = validateParameter(valid_596595, JString, required = false,
                                 default = nil)
  if valid_596595 != nil:
    section.add "X-Amz-Security-Token", valid_596595
  var valid_596596 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596596 = validateParameter(valid_596596, JString, required = false,
                                 default = nil)
  if valid_596596 != nil:
    section.add "X-Amz-Content-Sha256", valid_596596
  var valid_596597 = header.getOrDefault("X-Amz-Algorithm")
  valid_596597 = validateParameter(valid_596597, JString, required = false,
                                 default = nil)
  if valid_596597 != nil:
    section.add "X-Amz-Algorithm", valid_596597
  var valid_596598 = header.getOrDefault("X-Amz-Signature")
  valid_596598 = validateParameter(valid_596598, JString, required = false,
                                 default = nil)
  if valid_596598 != nil:
    section.add "X-Amz-Signature", valid_596598
  var valid_596599 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596599 = validateParameter(valid_596599, JString, required = false,
                                 default = nil)
  if valid_596599 != nil:
    section.add "X-Amz-SignedHeaders", valid_596599
  var valid_596600 = header.getOrDefault("X-Amz-Credential")
  valid_596600 = validateParameter(valid_596600, JString, required = false,
                                 default = nil)
  if valid_596600 != nil:
    section.add "X-Amz-Credential", valid_596600
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596601: Call_GetGetServiceLinkedRoleDeletionStatus_596588;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_596601.validator(path, query, header, formData, body)
  let scheme = call_596601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596601.url(scheme.get, call_596601.host, call_596601.base,
                         call_596601.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596601, url, valid)

proc call*(call_596602: Call_GetGetServiceLinkedRoleDeletionStatus_596588;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   Action: string (required)
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: string (required)
  var query_596603 = newJObject()
  add(query_596603, "Action", newJString(Action))
  add(query_596603, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_596603, "Version", newJString(Version))
  result = call_596602.call(nil, query_596603, nil, nil, nil)

var getGetServiceLinkedRoleDeletionStatus* = Call_GetGetServiceLinkedRoleDeletionStatus_596588(
    name: "getGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_GetGetServiceLinkedRoleDeletionStatus_596589, base: "/",
    url: url_GetGetServiceLinkedRoleDeletionStatus_596590,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUser_596637 = ref object of OpenApiRestCall_593437
proc url_PostGetUser_596639(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetUser_596638(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596640 = query.getOrDefault("Action")
  valid_596640 = validateParameter(valid_596640, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_596640 != nil:
    section.add "Action", valid_596640
  var valid_596641 = query.getOrDefault("Version")
  valid_596641 = validateParameter(valid_596641, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596641 != nil:
    section.add "Version", valid_596641
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596642 = header.getOrDefault("X-Amz-Date")
  valid_596642 = validateParameter(valid_596642, JString, required = false,
                                 default = nil)
  if valid_596642 != nil:
    section.add "X-Amz-Date", valid_596642
  var valid_596643 = header.getOrDefault("X-Amz-Security-Token")
  valid_596643 = validateParameter(valid_596643, JString, required = false,
                                 default = nil)
  if valid_596643 != nil:
    section.add "X-Amz-Security-Token", valid_596643
  var valid_596644 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596644 = validateParameter(valid_596644, JString, required = false,
                                 default = nil)
  if valid_596644 != nil:
    section.add "X-Amz-Content-Sha256", valid_596644
  var valid_596645 = header.getOrDefault("X-Amz-Algorithm")
  valid_596645 = validateParameter(valid_596645, JString, required = false,
                                 default = nil)
  if valid_596645 != nil:
    section.add "X-Amz-Algorithm", valid_596645
  var valid_596646 = header.getOrDefault("X-Amz-Signature")
  valid_596646 = validateParameter(valid_596646, JString, required = false,
                                 default = nil)
  if valid_596646 != nil:
    section.add "X-Amz-Signature", valid_596646
  var valid_596647 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596647 = validateParameter(valid_596647, JString, required = false,
                                 default = nil)
  if valid_596647 != nil:
    section.add "X-Amz-SignedHeaders", valid_596647
  var valid_596648 = header.getOrDefault("X-Amz-Credential")
  valid_596648 = validateParameter(valid_596648, JString, required = false,
                                 default = nil)
  if valid_596648 != nil:
    section.add "X-Amz-Credential", valid_596648
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_596649 = formData.getOrDefault("UserName")
  valid_596649 = validateParameter(valid_596649, JString, required = false,
                                 default = nil)
  if valid_596649 != nil:
    section.add "UserName", valid_596649
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596650: Call_PostGetUser_596637; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_596650.validator(path, query, header, formData, body)
  let scheme = call_596650.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596650.url(scheme.get, call_596650.host, call_596650.base,
                         call_596650.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596650, url, valid)

proc call*(call_596651: Call_PostGetUser_596637; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## postGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596652 = newJObject()
  var formData_596653 = newJObject()
  add(formData_596653, "UserName", newJString(UserName))
  add(query_596652, "Action", newJString(Action))
  add(query_596652, "Version", newJString(Version))
  result = call_596651.call(nil, query_596652, nil, formData_596653, nil)

var postGetUser* = Call_PostGetUser_596637(name: "postGetUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetUser",
                                        validator: validate_PostGetUser_596638,
                                        base: "/", url: url_PostGetUser_596639,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUser_596621 = ref object of OpenApiRestCall_593437
proc url_GetGetUser_596623(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetUser_596622(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_596624 = query.getOrDefault("UserName")
  valid_596624 = validateParameter(valid_596624, JString, required = false,
                                 default = nil)
  if valid_596624 != nil:
    section.add "UserName", valid_596624
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596625 = query.getOrDefault("Action")
  valid_596625 = validateParameter(valid_596625, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_596625 != nil:
    section.add "Action", valid_596625
  var valid_596626 = query.getOrDefault("Version")
  valid_596626 = validateParameter(valid_596626, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596626 != nil:
    section.add "Version", valid_596626
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596627 = header.getOrDefault("X-Amz-Date")
  valid_596627 = validateParameter(valid_596627, JString, required = false,
                                 default = nil)
  if valid_596627 != nil:
    section.add "X-Amz-Date", valid_596627
  var valid_596628 = header.getOrDefault("X-Amz-Security-Token")
  valid_596628 = validateParameter(valid_596628, JString, required = false,
                                 default = nil)
  if valid_596628 != nil:
    section.add "X-Amz-Security-Token", valid_596628
  var valid_596629 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596629 = validateParameter(valid_596629, JString, required = false,
                                 default = nil)
  if valid_596629 != nil:
    section.add "X-Amz-Content-Sha256", valid_596629
  var valid_596630 = header.getOrDefault("X-Amz-Algorithm")
  valid_596630 = validateParameter(valid_596630, JString, required = false,
                                 default = nil)
  if valid_596630 != nil:
    section.add "X-Amz-Algorithm", valid_596630
  var valid_596631 = header.getOrDefault("X-Amz-Signature")
  valid_596631 = validateParameter(valid_596631, JString, required = false,
                                 default = nil)
  if valid_596631 != nil:
    section.add "X-Amz-Signature", valid_596631
  var valid_596632 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596632 = validateParameter(valid_596632, JString, required = false,
                                 default = nil)
  if valid_596632 != nil:
    section.add "X-Amz-SignedHeaders", valid_596632
  var valid_596633 = header.getOrDefault("X-Amz-Credential")
  valid_596633 = validateParameter(valid_596633, JString, required = false,
                                 default = nil)
  if valid_596633 != nil:
    section.add "X-Amz-Credential", valid_596633
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596634: Call_GetGetUser_596621; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_596634.validator(path, query, header, formData, body)
  let scheme = call_596634.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596634.url(scheme.get, call_596634.host, call_596634.base,
                         call_596634.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596634, url, valid)

proc call*(call_596635: Call_GetGetUser_596621; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## getGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596636 = newJObject()
  add(query_596636, "UserName", newJString(UserName))
  add(query_596636, "Action", newJString(Action))
  add(query_596636, "Version", newJString(Version))
  result = call_596635.call(nil, query_596636, nil, nil, nil)

var getGetUser* = Call_GetGetUser_596621(name: "getGetUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetUser",
                                      validator: validate_GetGetUser_596622,
                                      base: "/", url: url_GetGetUser_596623,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUserPolicy_596671 = ref object of OpenApiRestCall_593437
proc url_PostGetUserPolicy_596673(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostGetUserPolicy_596672(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596674 = query.getOrDefault("Action")
  valid_596674 = validateParameter(valid_596674, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_596674 != nil:
    section.add "Action", valid_596674
  var valid_596675 = query.getOrDefault("Version")
  valid_596675 = validateParameter(valid_596675, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596675 != nil:
    section.add "Version", valid_596675
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596676 = header.getOrDefault("X-Amz-Date")
  valid_596676 = validateParameter(valid_596676, JString, required = false,
                                 default = nil)
  if valid_596676 != nil:
    section.add "X-Amz-Date", valid_596676
  var valid_596677 = header.getOrDefault("X-Amz-Security-Token")
  valid_596677 = validateParameter(valid_596677, JString, required = false,
                                 default = nil)
  if valid_596677 != nil:
    section.add "X-Amz-Security-Token", valid_596677
  var valid_596678 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596678 = validateParameter(valid_596678, JString, required = false,
                                 default = nil)
  if valid_596678 != nil:
    section.add "X-Amz-Content-Sha256", valid_596678
  var valid_596679 = header.getOrDefault("X-Amz-Algorithm")
  valid_596679 = validateParameter(valid_596679, JString, required = false,
                                 default = nil)
  if valid_596679 != nil:
    section.add "X-Amz-Algorithm", valid_596679
  var valid_596680 = header.getOrDefault("X-Amz-Signature")
  valid_596680 = validateParameter(valid_596680, JString, required = false,
                                 default = nil)
  if valid_596680 != nil:
    section.add "X-Amz-Signature", valid_596680
  var valid_596681 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596681 = validateParameter(valid_596681, JString, required = false,
                                 default = nil)
  if valid_596681 != nil:
    section.add "X-Amz-SignedHeaders", valid_596681
  var valid_596682 = header.getOrDefault("X-Amz-Credential")
  valid_596682 = validateParameter(valid_596682, JString, required = false,
                                 default = nil)
  if valid_596682 != nil:
    section.add "X-Amz-Credential", valid_596682
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_596683 = formData.getOrDefault("PolicyName")
  valid_596683 = validateParameter(valid_596683, JString, required = true,
                                 default = nil)
  if valid_596683 != nil:
    section.add "PolicyName", valid_596683
  var valid_596684 = formData.getOrDefault("UserName")
  valid_596684 = validateParameter(valid_596684, JString, required = true,
                                 default = nil)
  if valid_596684 != nil:
    section.add "UserName", valid_596684
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596685: Call_PostGetUserPolicy_596671; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_596685.validator(path, query, header, formData, body)
  let scheme = call_596685.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596685.url(scheme.get, call_596685.host, call_596685.base,
                         call_596685.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596685, url, valid)

proc call*(call_596686: Call_PostGetUserPolicy_596671; PolicyName: string;
          UserName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596687 = newJObject()
  var formData_596688 = newJObject()
  add(formData_596688, "PolicyName", newJString(PolicyName))
  add(formData_596688, "UserName", newJString(UserName))
  add(query_596687, "Action", newJString(Action))
  add(query_596687, "Version", newJString(Version))
  result = call_596686.call(nil, query_596687, nil, formData_596688, nil)

var postGetUserPolicy* = Call_PostGetUserPolicy_596671(name: "postGetUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_PostGetUserPolicy_596672,
    base: "/", url: url_PostGetUserPolicy_596673,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUserPolicy_596654 = ref object of OpenApiRestCall_593437
proc url_GetGetUserPolicy_596656(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetGetUserPolicy_596655(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_596657 = query.getOrDefault("UserName")
  valid_596657 = validateParameter(valid_596657, JString, required = true,
                                 default = nil)
  if valid_596657 != nil:
    section.add "UserName", valid_596657
  var valid_596658 = query.getOrDefault("Action")
  valid_596658 = validateParameter(valid_596658, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_596658 != nil:
    section.add "Action", valid_596658
  var valid_596659 = query.getOrDefault("Version")
  valid_596659 = validateParameter(valid_596659, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596659 != nil:
    section.add "Version", valid_596659
  var valid_596660 = query.getOrDefault("PolicyName")
  valid_596660 = validateParameter(valid_596660, JString, required = true,
                                 default = nil)
  if valid_596660 != nil:
    section.add "PolicyName", valid_596660
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596661 = header.getOrDefault("X-Amz-Date")
  valid_596661 = validateParameter(valid_596661, JString, required = false,
                                 default = nil)
  if valid_596661 != nil:
    section.add "X-Amz-Date", valid_596661
  var valid_596662 = header.getOrDefault("X-Amz-Security-Token")
  valid_596662 = validateParameter(valid_596662, JString, required = false,
                                 default = nil)
  if valid_596662 != nil:
    section.add "X-Amz-Security-Token", valid_596662
  var valid_596663 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596663 = validateParameter(valid_596663, JString, required = false,
                                 default = nil)
  if valid_596663 != nil:
    section.add "X-Amz-Content-Sha256", valid_596663
  var valid_596664 = header.getOrDefault("X-Amz-Algorithm")
  valid_596664 = validateParameter(valid_596664, JString, required = false,
                                 default = nil)
  if valid_596664 != nil:
    section.add "X-Amz-Algorithm", valid_596664
  var valid_596665 = header.getOrDefault("X-Amz-Signature")
  valid_596665 = validateParameter(valid_596665, JString, required = false,
                                 default = nil)
  if valid_596665 != nil:
    section.add "X-Amz-Signature", valid_596665
  var valid_596666 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596666 = validateParameter(valid_596666, JString, required = false,
                                 default = nil)
  if valid_596666 != nil:
    section.add "X-Amz-SignedHeaders", valid_596666
  var valid_596667 = header.getOrDefault("X-Amz-Credential")
  valid_596667 = validateParameter(valid_596667, JString, required = false,
                                 default = nil)
  if valid_596667 != nil:
    section.add "X-Amz-Credential", valid_596667
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596668: Call_GetGetUserPolicy_596654; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_596668.validator(path, query, header, formData, body)
  let scheme = call_596668.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596668.url(scheme.get, call_596668.host, call_596668.base,
                         call_596668.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596668, url, valid)

proc call*(call_596669: Call_GetGetUserPolicy_596654; UserName: string;
          PolicyName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_596670 = newJObject()
  add(query_596670, "UserName", newJString(UserName))
  add(query_596670, "Action", newJString(Action))
  add(query_596670, "Version", newJString(Version))
  add(query_596670, "PolicyName", newJString(PolicyName))
  result = call_596669.call(nil, query_596670, nil, nil, nil)

var getGetUserPolicy* = Call_GetGetUserPolicy_596654(name: "getGetUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_GetGetUserPolicy_596655,
    base: "/", url: url_GetGetUserPolicy_596656,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccessKeys_596707 = ref object of OpenApiRestCall_593437
proc url_PostListAccessKeys_596709(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListAccessKeys_596708(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596710 = query.getOrDefault("Action")
  valid_596710 = validateParameter(valid_596710, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_596710 != nil:
    section.add "Action", valid_596710
  var valid_596711 = query.getOrDefault("Version")
  valid_596711 = validateParameter(valid_596711, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596711 != nil:
    section.add "Version", valid_596711
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596712 = header.getOrDefault("X-Amz-Date")
  valid_596712 = validateParameter(valid_596712, JString, required = false,
                                 default = nil)
  if valid_596712 != nil:
    section.add "X-Amz-Date", valid_596712
  var valid_596713 = header.getOrDefault("X-Amz-Security-Token")
  valid_596713 = validateParameter(valid_596713, JString, required = false,
                                 default = nil)
  if valid_596713 != nil:
    section.add "X-Amz-Security-Token", valid_596713
  var valid_596714 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596714 = validateParameter(valid_596714, JString, required = false,
                                 default = nil)
  if valid_596714 != nil:
    section.add "X-Amz-Content-Sha256", valid_596714
  var valid_596715 = header.getOrDefault("X-Amz-Algorithm")
  valid_596715 = validateParameter(valid_596715, JString, required = false,
                                 default = nil)
  if valid_596715 != nil:
    section.add "X-Amz-Algorithm", valid_596715
  var valid_596716 = header.getOrDefault("X-Amz-Signature")
  valid_596716 = validateParameter(valid_596716, JString, required = false,
                                 default = nil)
  if valid_596716 != nil:
    section.add "X-Amz-Signature", valid_596716
  var valid_596717 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596717 = validateParameter(valid_596717, JString, required = false,
                                 default = nil)
  if valid_596717 != nil:
    section.add "X-Amz-SignedHeaders", valid_596717
  var valid_596718 = header.getOrDefault("X-Amz-Credential")
  valid_596718 = validateParameter(valid_596718, JString, required = false,
                                 default = nil)
  if valid_596718 != nil:
    section.add "X-Amz-Credential", valid_596718
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_596719 = formData.getOrDefault("UserName")
  valid_596719 = validateParameter(valid_596719, JString, required = false,
                                 default = nil)
  if valid_596719 != nil:
    section.add "UserName", valid_596719
  var valid_596720 = formData.getOrDefault("Marker")
  valid_596720 = validateParameter(valid_596720, JString, required = false,
                                 default = nil)
  if valid_596720 != nil:
    section.add "Marker", valid_596720
  var valid_596721 = formData.getOrDefault("MaxItems")
  valid_596721 = validateParameter(valid_596721, JInt, required = false, default = nil)
  if valid_596721 != nil:
    section.add "MaxItems", valid_596721
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596722: Call_PostListAccessKeys_596707; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_596722.validator(path, query, header, formData, body)
  let scheme = call_596722.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596722.url(scheme.get, call_596722.host, call_596722.base,
                         call_596722.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596722, url, valid)

proc call*(call_596723: Call_PostListAccessKeys_596707; UserName: string = "";
          Marker: string = ""; Action: string = "ListAccessKeys"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596724 = newJObject()
  var formData_596725 = newJObject()
  add(formData_596725, "UserName", newJString(UserName))
  add(formData_596725, "Marker", newJString(Marker))
  add(query_596724, "Action", newJString(Action))
  add(formData_596725, "MaxItems", newJInt(MaxItems))
  add(query_596724, "Version", newJString(Version))
  result = call_596723.call(nil, query_596724, nil, formData_596725, nil)

var postListAccessKeys* = Call_PostListAccessKeys_596707(
    name: "postListAccessKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccessKeys",
    validator: validate_PostListAccessKeys_596708, base: "/",
    url: url_PostListAccessKeys_596709, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccessKeys_596689 = ref object of OpenApiRestCall_593437
proc url_GetListAccessKeys_596691(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListAccessKeys_596690(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596692 = query.getOrDefault("UserName")
  valid_596692 = validateParameter(valid_596692, JString, required = false,
                                 default = nil)
  if valid_596692 != nil:
    section.add "UserName", valid_596692
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596693 = query.getOrDefault("Action")
  valid_596693 = validateParameter(valid_596693, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_596693 != nil:
    section.add "Action", valid_596693
  var valid_596694 = query.getOrDefault("Marker")
  valid_596694 = validateParameter(valid_596694, JString, required = false,
                                 default = nil)
  if valid_596694 != nil:
    section.add "Marker", valid_596694
  var valid_596695 = query.getOrDefault("MaxItems")
  valid_596695 = validateParameter(valid_596695, JInt, required = false, default = nil)
  if valid_596695 != nil:
    section.add "MaxItems", valid_596695
  var valid_596696 = query.getOrDefault("Version")
  valid_596696 = validateParameter(valid_596696, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596696 != nil:
    section.add "Version", valid_596696
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596697 = header.getOrDefault("X-Amz-Date")
  valid_596697 = validateParameter(valid_596697, JString, required = false,
                                 default = nil)
  if valid_596697 != nil:
    section.add "X-Amz-Date", valid_596697
  var valid_596698 = header.getOrDefault("X-Amz-Security-Token")
  valid_596698 = validateParameter(valid_596698, JString, required = false,
                                 default = nil)
  if valid_596698 != nil:
    section.add "X-Amz-Security-Token", valid_596698
  var valid_596699 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596699 = validateParameter(valid_596699, JString, required = false,
                                 default = nil)
  if valid_596699 != nil:
    section.add "X-Amz-Content-Sha256", valid_596699
  var valid_596700 = header.getOrDefault("X-Amz-Algorithm")
  valid_596700 = validateParameter(valid_596700, JString, required = false,
                                 default = nil)
  if valid_596700 != nil:
    section.add "X-Amz-Algorithm", valid_596700
  var valid_596701 = header.getOrDefault("X-Amz-Signature")
  valid_596701 = validateParameter(valid_596701, JString, required = false,
                                 default = nil)
  if valid_596701 != nil:
    section.add "X-Amz-Signature", valid_596701
  var valid_596702 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596702 = validateParameter(valid_596702, JString, required = false,
                                 default = nil)
  if valid_596702 != nil:
    section.add "X-Amz-SignedHeaders", valid_596702
  var valid_596703 = header.getOrDefault("X-Amz-Credential")
  valid_596703 = validateParameter(valid_596703, JString, required = false,
                                 default = nil)
  if valid_596703 != nil:
    section.add "X-Amz-Credential", valid_596703
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596704: Call_GetListAccessKeys_596689; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_596704.validator(path, query, header, formData, body)
  let scheme = call_596704.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596704.url(scheme.get, call_596704.host, call_596704.base,
                         call_596704.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596704, url, valid)

proc call*(call_596705: Call_GetListAccessKeys_596689; UserName: string = "";
          Action: string = "ListAccessKeys"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596706 = newJObject()
  add(query_596706, "UserName", newJString(UserName))
  add(query_596706, "Action", newJString(Action))
  add(query_596706, "Marker", newJString(Marker))
  add(query_596706, "MaxItems", newJInt(MaxItems))
  add(query_596706, "Version", newJString(Version))
  result = call_596705.call(nil, query_596706, nil, nil, nil)

var getListAccessKeys* = Call_GetListAccessKeys_596689(name: "getListAccessKeys",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListAccessKeys", validator: validate_GetListAccessKeys_596690,
    base: "/", url: url_GetListAccessKeys_596691,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccountAliases_596743 = ref object of OpenApiRestCall_593437
proc url_PostListAccountAliases_596745(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListAccountAliases_596744(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596746 = query.getOrDefault("Action")
  valid_596746 = validateParameter(valid_596746, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_596746 != nil:
    section.add "Action", valid_596746
  var valid_596747 = query.getOrDefault("Version")
  valid_596747 = validateParameter(valid_596747, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596747 != nil:
    section.add "Version", valid_596747
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596748 = header.getOrDefault("X-Amz-Date")
  valid_596748 = validateParameter(valid_596748, JString, required = false,
                                 default = nil)
  if valid_596748 != nil:
    section.add "X-Amz-Date", valid_596748
  var valid_596749 = header.getOrDefault("X-Amz-Security-Token")
  valid_596749 = validateParameter(valid_596749, JString, required = false,
                                 default = nil)
  if valid_596749 != nil:
    section.add "X-Amz-Security-Token", valid_596749
  var valid_596750 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596750 = validateParameter(valid_596750, JString, required = false,
                                 default = nil)
  if valid_596750 != nil:
    section.add "X-Amz-Content-Sha256", valid_596750
  var valid_596751 = header.getOrDefault("X-Amz-Algorithm")
  valid_596751 = validateParameter(valid_596751, JString, required = false,
                                 default = nil)
  if valid_596751 != nil:
    section.add "X-Amz-Algorithm", valid_596751
  var valid_596752 = header.getOrDefault("X-Amz-Signature")
  valid_596752 = validateParameter(valid_596752, JString, required = false,
                                 default = nil)
  if valid_596752 != nil:
    section.add "X-Amz-Signature", valid_596752
  var valid_596753 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596753 = validateParameter(valid_596753, JString, required = false,
                                 default = nil)
  if valid_596753 != nil:
    section.add "X-Amz-SignedHeaders", valid_596753
  var valid_596754 = header.getOrDefault("X-Amz-Credential")
  valid_596754 = validateParameter(valid_596754, JString, required = false,
                                 default = nil)
  if valid_596754 != nil:
    section.add "X-Amz-Credential", valid_596754
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_596755 = formData.getOrDefault("Marker")
  valid_596755 = validateParameter(valid_596755, JString, required = false,
                                 default = nil)
  if valid_596755 != nil:
    section.add "Marker", valid_596755
  var valid_596756 = formData.getOrDefault("MaxItems")
  valid_596756 = validateParameter(valid_596756, JInt, required = false, default = nil)
  if valid_596756 != nil:
    section.add "MaxItems", valid_596756
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596757: Call_PostListAccountAliases_596743; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_596757.validator(path, query, header, formData, body)
  let scheme = call_596757.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596757.url(scheme.get, call_596757.host, call_596757.base,
                         call_596757.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596757, url, valid)

proc call*(call_596758: Call_PostListAccountAliases_596743; Marker: string = "";
          Action: string = "ListAccountAliases"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596759 = newJObject()
  var formData_596760 = newJObject()
  add(formData_596760, "Marker", newJString(Marker))
  add(query_596759, "Action", newJString(Action))
  add(formData_596760, "MaxItems", newJInt(MaxItems))
  add(query_596759, "Version", newJString(Version))
  result = call_596758.call(nil, query_596759, nil, formData_596760, nil)

var postListAccountAliases* = Call_PostListAccountAliases_596743(
    name: "postListAccountAliases", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_PostListAccountAliases_596744, base: "/",
    url: url_PostListAccountAliases_596745, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccountAliases_596726 = ref object of OpenApiRestCall_593437
proc url_GetListAccountAliases_596728(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListAccountAliases_596727(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596729 = query.getOrDefault("Action")
  valid_596729 = validateParameter(valid_596729, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_596729 != nil:
    section.add "Action", valid_596729
  var valid_596730 = query.getOrDefault("Marker")
  valid_596730 = validateParameter(valid_596730, JString, required = false,
                                 default = nil)
  if valid_596730 != nil:
    section.add "Marker", valid_596730
  var valid_596731 = query.getOrDefault("MaxItems")
  valid_596731 = validateParameter(valid_596731, JInt, required = false, default = nil)
  if valid_596731 != nil:
    section.add "MaxItems", valid_596731
  var valid_596732 = query.getOrDefault("Version")
  valid_596732 = validateParameter(valid_596732, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596732 != nil:
    section.add "Version", valid_596732
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596733 = header.getOrDefault("X-Amz-Date")
  valid_596733 = validateParameter(valid_596733, JString, required = false,
                                 default = nil)
  if valid_596733 != nil:
    section.add "X-Amz-Date", valid_596733
  var valid_596734 = header.getOrDefault("X-Amz-Security-Token")
  valid_596734 = validateParameter(valid_596734, JString, required = false,
                                 default = nil)
  if valid_596734 != nil:
    section.add "X-Amz-Security-Token", valid_596734
  var valid_596735 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596735 = validateParameter(valid_596735, JString, required = false,
                                 default = nil)
  if valid_596735 != nil:
    section.add "X-Amz-Content-Sha256", valid_596735
  var valid_596736 = header.getOrDefault("X-Amz-Algorithm")
  valid_596736 = validateParameter(valid_596736, JString, required = false,
                                 default = nil)
  if valid_596736 != nil:
    section.add "X-Amz-Algorithm", valid_596736
  var valid_596737 = header.getOrDefault("X-Amz-Signature")
  valid_596737 = validateParameter(valid_596737, JString, required = false,
                                 default = nil)
  if valid_596737 != nil:
    section.add "X-Amz-Signature", valid_596737
  var valid_596738 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596738 = validateParameter(valid_596738, JString, required = false,
                                 default = nil)
  if valid_596738 != nil:
    section.add "X-Amz-SignedHeaders", valid_596738
  var valid_596739 = header.getOrDefault("X-Amz-Credential")
  valid_596739 = validateParameter(valid_596739, JString, required = false,
                                 default = nil)
  if valid_596739 != nil:
    section.add "X-Amz-Credential", valid_596739
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596740: Call_GetListAccountAliases_596726; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_596740.validator(path, query, header, formData, body)
  let scheme = call_596740.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596740.url(scheme.get, call_596740.host, call_596740.base,
                         call_596740.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596740, url, valid)

proc call*(call_596741: Call_GetListAccountAliases_596726;
          Action: string = "ListAccountAliases"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596742 = newJObject()
  add(query_596742, "Action", newJString(Action))
  add(query_596742, "Marker", newJString(Marker))
  add(query_596742, "MaxItems", newJInt(MaxItems))
  add(query_596742, "Version", newJString(Version))
  result = call_596741.call(nil, query_596742, nil, nil, nil)

var getListAccountAliases* = Call_GetListAccountAliases_596726(
    name: "getListAccountAliases", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_GetListAccountAliases_596727, base: "/",
    url: url_GetListAccountAliases_596728, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedGroupPolicies_596780 = ref object of OpenApiRestCall_593437
proc url_PostListAttachedGroupPolicies_596782(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListAttachedGroupPolicies_596781(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596783 = query.getOrDefault("Action")
  valid_596783 = validateParameter(valid_596783, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_596783 != nil:
    section.add "Action", valid_596783
  var valid_596784 = query.getOrDefault("Version")
  valid_596784 = validateParameter(valid_596784, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596784 != nil:
    section.add "Version", valid_596784
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596785 = header.getOrDefault("X-Amz-Date")
  valid_596785 = validateParameter(valid_596785, JString, required = false,
                                 default = nil)
  if valid_596785 != nil:
    section.add "X-Amz-Date", valid_596785
  var valid_596786 = header.getOrDefault("X-Amz-Security-Token")
  valid_596786 = validateParameter(valid_596786, JString, required = false,
                                 default = nil)
  if valid_596786 != nil:
    section.add "X-Amz-Security-Token", valid_596786
  var valid_596787 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596787 = validateParameter(valid_596787, JString, required = false,
                                 default = nil)
  if valid_596787 != nil:
    section.add "X-Amz-Content-Sha256", valid_596787
  var valid_596788 = header.getOrDefault("X-Amz-Algorithm")
  valid_596788 = validateParameter(valid_596788, JString, required = false,
                                 default = nil)
  if valid_596788 != nil:
    section.add "X-Amz-Algorithm", valid_596788
  var valid_596789 = header.getOrDefault("X-Amz-Signature")
  valid_596789 = validateParameter(valid_596789, JString, required = false,
                                 default = nil)
  if valid_596789 != nil:
    section.add "X-Amz-Signature", valid_596789
  var valid_596790 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596790 = validateParameter(valid_596790, JString, required = false,
                                 default = nil)
  if valid_596790 != nil:
    section.add "X-Amz-SignedHeaders", valid_596790
  var valid_596791 = header.getOrDefault("X-Amz-Credential")
  valid_596791 = validateParameter(valid_596791, JString, required = false,
                                 default = nil)
  if valid_596791 != nil:
    section.add "X-Amz-Credential", valid_596791
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_596792 = formData.getOrDefault("PathPrefix")
  valid_596792 = validateParameter(valid_596792, JString, required = false,
                                 default = nil)
  if valid_596792 != nil:
    section.add "PathPrefix", valid_596792
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_596793 = formData.getOrDefault("GroupName")
  valid_596793 = validateParameter(valid_596793, JString, required = true,
                                 default = nil)
  if valid_596793 != nil:
    section.add "GroupName", valid_596793
  var valid_596794 = formData.getOrDefault("Marker")
  valid_596794 = validateParameter(valid_596794, JString, required = false,
                                 default = nil)
  if valid_596794 != nil:
    section.add "Marker", valid_596794
  var valid_596795 = formData.getOrDefault("MaxItems")
  valid_596795 = validateParameter(valid_596795, JInt, required = false, default = nil)
  if valid_596795 != nil:
    section.add "MaxItems", valid_596795
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596796: Call_PostListAttachedGroupPolicies_596780; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_596796.validator(path, query, header, formData, body)
  let scheme = call_596796.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596796.url(scheme.get, call_596796.host, call_596796.base,
                         call_596796.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596796, url, valid)

proc call*(call_596797: Call_PostListAttachedGroupPolicies_596780;
          GroupName: string; PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedGroupPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596798 = newJObject()
  var formData_596799 = newJObject()
  add(formData_596799, "PathPrefix", newJString(PathPrefix))
  add(formData_596799, "GroupName", newJString(GroupName))
  add(formData_596799, "Marker", newJString(Marker))
  add(query_596798, "Action", newJString(Action))
  add(formData_596799, "MaxItems", newJInt(MaxItems))
  add(query_596798, "Version", newJString(Version))
  result = call_596797.call(nil, query_596798, nil, formData_596799, nil)

var postListAttachedGroupPolicies* = Call_PostListAttachedGroupPolicies_596780(
    name: "postListAttachedGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_PostListAttachedGroupPolicies_596781, base: "/",
    url: url_PostListAttachedGroupPolicies_596782,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedGroupPolicies_596761 = ref object of OpenApiRestCall_593437
proc url_GetListAttachedGroupPolicies_596763(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListAttachedGroupPolicies_596762(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596764 = query.getOrDefault("PathPrefix")
  valid_596764 = validateParameter(valid_596764, JString, required = false,
                                 default = nil)
  if valid_596764 != nil:
    section.add "PathPrefix", valid_596764
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596765 = query.getOrDefault("Action")
  valid_596765 = validateParameter(valid_596765, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_596765 != nil:
    section.add "Action", valid_596765
  var valid_596766 = query.getOrDefault("Marker")
  valid_596766 = validateParameter(valid_596766, JString, required = false,
                                 default = nil)
  if valid_596766 != nil:
    section.add "Marker", valid_596766
  var valid_596767 = query.getOrDefault("GroupName")
  valid_596767 = validateParameter(valid_596767, JString, required = true,
                                 default = nil)
  if valid_596767 != nil:
    section.add "GroupName", valid_596767
  var valid_596768 = query.getOrDefault("MaxItems")
  valid_596768 = validateParameter(valid_596768, JInt, required = false, default = nil)
  if valid_596768 != nil:
    section.add "MaxItems", valid_596768
  var valid_596769 = query.getOrDefault("Version")
  valid_596769 = validateParameter(valid_596769, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596769 != nil:
    section.add "Version", valid_596769
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596770 = header.getOrDefault("X-Amz-Date")
  valid_596770 = validateParameter(valid_596770, JString, required = false,
                                 default = nil)
  if valid_596770 != nil:
    section.add "X-Amz-Date", valid_596770
  var valid_596771 = header.getOrDefault("X-Amz-Security-Token")
  valid_596771 = validateParameter(valid_596771, JString, required = false,
                                 default = nil)
  if valid_596771 != nil:
    section.add "X-Amz-Security-Token", valid_596771
  var valid_596772 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596772 = validateParameter(valid_596772, JString, required = false,
                                 default = nil)
  if valid_596772 != nil:
    section.add "X-Amz-Content-Sha256", valid_596772
  var valid_596773 = header.getOrDefault("X-Amz-Algorithm")
  valid_596773 = validateParameter(valid_596773, JString, required = false,
                                 default = nil)
  if valid_596773 != nil:
    section.add "X-Amz-Algorithm", valid_596773
  var valid_596774 = header.getOrDefault("X-Amz-Signature")
  valid_596774 = validateParameter(valid_596774, JString, required = false,
                                 default = nil)
  if valid_596774 != nil:
    section.add "X-Amz-Signature", valid_596774
  var valid_596775 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596775 = validateParameter(valid_596775, JString, required = false,
                                 default = nil)
  if valid_596775 != nil:
    section.add "X-Amz-SignedHeaders", valid_596775
  var valid_596776 = header.getOrDefault("X-Amz-Credential")
  valid_596776 = validateParameter(valid_596776, JString, required = false,
                                 default = nil)
  if valid_596776 != nil:
    section.add "X-Amz-Credential", valid_596776
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596777: Call_GetListAttachedGroupPolicies_596761; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_596777.validator(path, query, header, formData, body)
  let scheme = call_596777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596777.url(scheme.get, call_596777.host, call_596777.base,
                         call_596777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596777, url, valid)

proc call*(call_596778: Call_GetListAttachedGroupPolicies_596761;
          GroupName: string; PathPrefix: string = "";
          Action: string = "ListAttachedGroupPolicies"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596779 = newJObject()
  add(query_596779, "PathPrefix", newJString(PathPrefix))
  add(query_596779, "Action", newJString(Action))
  add(query_596779, "Marker", newJString(Marker))
  add(query_596779, "GroupName", newJString(GroupName))
  add(query_596779, "MaxItems", newJInt(MaxItems))
  add(query_596779, "Version", newJString(Version))
  result = call_596778.call(nil, query_596779, nil, nil, nil)

var getListAttachedGroupPolicies* = Call_GetListAttachedGroupPolicies_596761(
    name: "getListAttachedGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_GetListAttachedGroupPolicies_596762, base: "/",
    url: url_GetListAttachedGroupPolicies_596763,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedRolePolicies_596819 = ref object of OpenApiRestCall_593437
proc url_PostListAttachedRolePolicies_596821(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListAttachedRolePolicies_596820(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596822 = query.getOrDefault("Action")
  valid_596822 = validateParameter(valid_596822, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_596822 != nil:
    section.add "Action", valid_596822
  var valid_596823 = query.getOrDefault("Version")
  valid_596823 = validateParameter(valid_596823, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596823 != nil:
    section.add "Version", valid_596823
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596824 = header.getOrDefault("X-Amz-Date")
  valid_596824 = validateParameter(valid_596824, JString, required = false,
                                 default = nil)
  if valid_596824 != nil:
    section.add "X-Amz-Date", valid_596824
  var valid_596825 = header.getOrDefault("X-Amz-Security-Token")
  valid_596825 = validateParameter(valid_596825, JString, required = false,
                                 default = nil)
  if valid_596825 != nil:
    section.add "X-Amz-Security-Token", valid_596825
  var valid_596826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596826 = validateParameter(valid_596826, JString, required = false,
                                 default = nil)
  if valid_596826 != nil:
    section.add "X-Amz-Content-Sha256", valid_596826
  var valid_596827 = header.getOrDefault("X-Amz-Algorithm")
  valid_596827 = validateParameter(valid_596827, JString, required = false,
                                 default = nil)
  if valid_596827 != nil:
    section.add "X-Amz-Algorithm", valid_596827
  var valid_596828 = header.getOrDefault("X-Amz-Signature")
  valid_596828 = validateParameter(valid_596828, JString, required = false,
                                 default = nil)
  if valid_596828 != nil:
    section.add "X-Amz-Signature", valid_596828
  var valid_596829 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596829 = validateParameter(valid_596829, JString, required = false,
                                 default = nil)
  if valid_596829 != nil:
    section.add "X-Amz-SignedHeaders", valid_596829
  var valid_596830 = header.getOrDefault("X-Amz-Credential")
  valid_596830 = validateParameter(valid_596830, JString, required = false,
                                 default = nil)
  if valid_596830 != nil:
    section.add "X-Amz-Credential", valid_596830
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_596831 = formData.getOrDefault("PathPrefix")
  valid_596831 = validateParameter(valid_596831, JString, required = false,
                                 default = nil)
  if valid_596831 != nil:
    section.add "PathPrefix", valid_596831
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_596832 = formData.getOrDefault("RoleName")
  valid_596832 = validateParameter(valid_596832, JString, required = true,
                                 default = nil)
  if valid_596832 != nil:
    section.add "RoleName", valid_596832
  var valid_596833 = formData.getOrDefault("Marker")
  valid_596833 = validateParameter(valid_596833, JString, required = false,
                                 default = nil)
  if valid_596833 != nil:
    section.add "Marker", valid_596833
  var valid_596834 = formData.getOrDefault("MaxItems")
  valid_596834 = validateParameter(valid_596834, JInt, required = false, default = nil)
  if valid_596834 != nil:
    section.add "MaxItems", valid_596834
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596835: Call_PostListAttachedRolePolicies_596819; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_596835.validator(path, query, header, formData, body)
  let scheme = call_596835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596835.url(scheme.get, call_596835.host, call_596835.base,
                         call_596835.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596835, url, valid)

proc call*(call_596836: Call_PostListAttachedRolePolicies_596819; RoleName: string;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedRolePolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596837 = newJObject()
  var formData_596838 = newJObject()
  add(formData_596838, "PathPrefix", newJString(PathPrefix))
  add(formData_596838, "RoleName", newJString(RoleName))
  add(formData_596838, "Marker", newJString(Marker))
  add(query_596837, "Action", newJString(Action))
  add(formData_596838, "MaxItems", newJInt(MaxItems))
  add(query_596837, "Version", newJString(Version))
  result = call_596836.call(nil, query_596837, nil, formData_596838, nil)

var postListAttachedRolePolicies* = Call_PostListAttachedRolePolicies_596819(
    name: "postListAttachedRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_PostListAttachedRolePolicies_596820, base: "/",
    url: url_PostListAttachedRolePolicies_596821,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedRolePolicies_596800 = ref object of OpenApiRestCall_593437
proc url_GetListAttachedRolePolicies_596802(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListAttachedRolePolicies_596801(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596803 = query.getOrDefault("PathPrefix")
  valid_596803 = validateParameter(valid_596803, JString, required = false,
                                 default = nil)
  if valid_596803 != nil:
    section.add "PathPrefix", valid_596803
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596804 = query.getOrDefault("Action")
  valid_596804 = validateParameter(valid_596804, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_596804 != nil:
    section.add "Action", valid_596804
  var valid_596805 = query.getOrDefault("Marker")
  valid_596805 = validateParameter(valid_596805, JString, required = false,
                                 default = nil)
  if valid_596805 != nil:
    section.add "Marker", valid_596805
  var valid_596806 = query.getOrDefault("MaxItems")
  valid_596806 = validateParameter(valid_596806, JInt, required = false, default = nil)
  if valid_596806 != nil:
    section.add "MaxItems", valid_596806
  var valid_596807 = query.getOrDefault("RoleName")
  valid_596807 = validateParameter(valid_596807, JString, required = true,
                                 default = nil)
  if valid_596807 != nil:
    section.add "RoleName", valid_596807
  var valid_596808 = query.getOrDefault("Version")
  valid_596808 = validateParameter(valid_596808, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596808 != nil:
    section.add "Version", valid_596808
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596809 = header.getOrDefault("X-Amz-Date")
  valid_596809 = validateParameter(valid_596809, JString, required = false,
                                 default = nil)
  if valid_596809 != nil:
    section.add "X-Amz-Date", valid_596809
  var valid_596810 = header.getOrDefault("X-Amz-Security-Token")
  valid_596810 = validateParameter(valid_596810, JString, required = false,
                                 default = nil)
  if valid_596810 != nil:
    section.add "X-Amz-Security-Token", valid_596810
  var valid_596811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596811 = validateParameter(valid_596811, JString, required = false,
                                 default = nil)
  if valid_596811 != nil:
    section.add "X-Amz-Content-Sha256", valid_596811
  var valid_596812 = header.getOrDefault("X-Amz-Algorithm")
  valid_596812 = validateParameter(valid_596812, JString, required = false,
                                 default = nil)
  if valid_596812 != nil:
    section.add "X-Amz-Algorithm", valid_596812
  var valid_596813 = header.getOrDefault("X-Amz-Signature")
  valid_596813 = validateParameter(valid_596813, JString, required = false,
                                 default = nil)
  if valid_596813 != nil:
    section.add "X-Amz-Signature", valid_596813
  var valid_596814 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596814 = validateParameter(valid_596814, JString, required = false,
                                 default = nil)
  if valid_596814 != nil:
    section.add "X-Amz-SignedHeaders", valid_596814
  var valid_596815 = header.getOrDefault("X-Amz-Credential")
  valid_596815 = validateParameter(valid_596815, JString, required = false,
                                 default = nil)
  if valid_596815 != nil:
    section.add "X-Amz-Credential", valid_596815
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596816: Call_GetListAttachedRolePolicies_596800; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_596816.validator(path, query, header, formData, body)
  let scheme = call_596816.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596816.url(scheme.get, call_596816.host, call_596816.base,
                         call_596816.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596816, url, valid)

proc call*(call_596817: Call_GetListAttachedRolePolicies_596800; RoleName: string;
          PathPrefix: string = ""; Action: string = "ListAttachedRolePolicies";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_596818 = newJObject()
  add(query_596818, "PathPrefix", newJString(PathPrefix))
  add(query_596818, "Action", newJString(Action))
  add(query_596818, "Marker", newJString(Marker))
  add(query_596818, "MaxItems", newJInt(MaxItems))
  add(query_596818, "RoleName", newJString(RoleName))
  add(query_596818, "Version", newJString(Version))
  result = call_596817.call(nil, query_596818, nil, nil, nil)

var getListAttachedRolePolicies* = Call_GetListAttachedRolePolicies_596800(
    name: "getListAttachedRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_GetListAttachedRolePolicies_596801, base: "/",
    url: url_GetListAttachedRolePolicies_596802,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedUserPolicies_596858 = ref object of OpenApiRestCall_593437
proc url_PostListAttachedUserPolicies_596860(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListAttachedUserPolicies_596859(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596861 = query.getOrDefault("Action")
  valid_596861 = validateParameter(valid_596861, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_596861 != nil:
    section.add "Action", valid_596861
  var valid_596862 = query.getOrDefault("Version")
  valid_596862 = validateParameter(valid_596862, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596862 != nil:
    section.add "Version", valid_596862
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596863 = header.getOrDefault("X-Amz-Date")
  valid_596863 = validateParameter(valid_596863, JString, required = false,
                                 default = nil)
  if valid_596863 != nil:
    section.add "X-Amz-Date", valid_596863
  var valid_596864 = header.getOrDefault("X-Amz-Security-Token")
  valid_596864 = validateParameter(valid_596864, JString, required = false,
                                 default = nil)
  if valid_596864 != nil:
    section.add "X-Amz-Security-Token", valid_596864
  var valid_596865 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596865 = validateParameter(valid_596865, JString, required = false,
                                 default = nil)
  if valid_596865 != nil:
    section.add "X-Amz-Content-Sha256", valid_596865
  var valid_596866 = header.getOrDefault("X-Amz-Algorithm")
  valid_596866 = validateParameter(valid_596866, JString, required = false,
                                 default = nil)
  if valid_596866 != nil:
    section.add "X-Amz-Algorithm", valid_596866
  var valid_596867 = header.getOrDefault("X-Amz-Signature")
  valid_596867 = validateParameter(valid_596867, JString, required = false,
                                 default = nil)
  if valid_596867 != nil:
    section.add "X-Amz-Signature", valid_596867
  var valid_596868 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596868 = validateParameter(valid_596868, JString, required = false,
                                 default = nil)
  if valid_596868 != nil:
    section.add "X-Amz-SignedHeaders", valid_596868
  var valid_596869 = header.getOrDefault("X-Amz-Credential")
  valid_596869 = validateParameter(valid_596869, JString, required = false,
                                 default = nil)
  if valid_596869 != nil:
    section.add "X-Amz-Credential", valid_596869
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_596870 = formData.getOrDefault("PathPrefix")
  valid_596870 = validateParameter(valid_596870, JString, required = false,
                                 default = nil)
  if valid_596870 != nil:
    section.add "PathPrefix", valid_596870
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_596871 = formData.getOrDefault("UserName")
  valid_596871 = validateParameter(valid_596871, JString, required = true,
                                 default = nil)
  if valid_596871 != nil:
    section.add "UserName", valid_596871
  var valid_596872 = formData.getOrDefault("Marker")
  valid_596872 = validateParameter(valid_596872, JString, required = false,
                                 default = nil)
  if valid_596872 != nil:
    section.add "Marker", valid_596872
  var valid_596873 = formData.getOrDefault("MaxItems")
  valid_596873 = validateParameter(valid_596873, JInt, required = false, default = nil)
  if valid_596873 != nil:
    section.add "MaxItems", valid_596873
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596874: Call_PostListAttachedUserPolicies_596858; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_596874.validator(path, query, header, formData, body)
  let scheme = call_596874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596874.url(scheme.get, call_596874.host, call_596874.base,
                         call_596874.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596874, url, valid)

proc call*(call_596875: Call_PostListAttachedUserPolicies_596858; UserName: string;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedUserPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596876 = newJObject()
  var formData_596877 = newJObject()
  add(formData_596877, "PathPrefix", newJString(PathPrefix))
  add(formData_596877, "UserName", newJString(UserName))
  add(formData_596877, "Marker", newJString(Marker))
  add(query_596876, "Action", newJString(Action))
  add(formData_596877, "MaxItems", newJInt(MaxItems))
  add(query_596876, "Version", newJString(Version))
  result = call_596875.call(nil, query_596876, nil, formData_596877, nil)

var postListAttachedUserPolicies* = Call_PostListAttachedUserPolicies_596858(
    name: "postListAttachedUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_PostListAttachedUserPolicies_596859, base: "/",
    url: url_PostListAttachedUserPolicies_596860,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedUserPolicies_596839 = ref object of OpenApiRestCall_593437
proc url_GetListAttachedUserPolicies_596841(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListAttachedUserPolicies_596840(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596842 = query.getOrDefault("PathPrefix")
  valid_596842 = validateParameter(valid_596842, JString, required = false,
                                 default = nil)
  if valid_596842 != nil:
    section.add "PathPrefix", valid_596842
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_596843 = query.getOrDefault("UserName")
  valid_596843 = validateParameter(valid_596843, JString, required = true,
                                 default = nil)
  if valid_596843 != nil:
    section.add "UserName", valid_596843
  var valid_596844 = query.getOrDefault("Action")
  valid_596844 = validateParameter(valid_596844, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_596844 != nil:
    section.add "Action", valid_596844
  var valid_596845 = query.getOrDefault("Marker")
  valid_596845 = validateParameter(valid_596845, JString, required = false,
                                 default = nil)
  if valid_596845 != nil:
    section.add "Marker", valid_596845
  var valid_596846 = query.getOrDefault("MaxItems")
  valid_596846 = validateParameter(valid_596846, JInt, required = false, default = nil)
  if valid_596846 != nil:
    section.add "MaxItems", valid_596846
  var valid_596847 = query.getOrDefault("Version")
  valid_596847 = validateParameter(valid_596847, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596847 != nil:
    section.add "Version", valid_596847
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596848 = header.getOrDefault("X-Amz-Date")
  valid_596848 = validateParameter(valid_596848, JString, required = false,
                                 default = nil)
  if valid_596848 != nil:
    section.add "X-Amz-Date", valid_596848
  var valid_596849 = header.getOrDefault("X-Amz-Security-Token")
  valid_596849 = validateParameter(valid_596849, JString, required = false,
                                 default = nil)
  if valid_596849 != nil:
    section.add "X-Amz-Security-Token", valid_596849
  var valid_596850 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596850 = validateParameter(valid_596850, JString, required = false,
                                 default = nil)
  if valid_596850 != nil:
    section.add "X-Amz-Content-Sha256", valid_596850
  var valid_596851 = header.getOrDefault("X-Amz-Algorithm")
  valid_596851 = validateParameter(valid_596851, JString, required = false,
                                 default = nil)
  if valid_596851 != nil:
    section.add "X-Amz-Algorithm", valid_596851
  var valid_596852 = header.getOrDefault("X-Amz-Signature")
  valid_596852 = validateParameter(valid_596852, JString, required = false,
                                 default = nil)
  if valid_596852 != nil:
    section.add "X-Amz-Signature", valid_596852
  var valid_596853 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596853 = validateParameter(valid_596853, JString, required = false,
                                 default = nil)
  if valid_596853 != nil:
    section.add "X-Amz-SignedHeaders", valid_596853
  var valid_596854 = header.getOrDefault("X-Amz-Credential")
  valid_596854 = validateParameter(valid_596854, JString, required = false,
                                 default = nil)
  if valid_596854 != nil:
    section.add "X-Amz-Credential", valid_596854
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596855: Call_GetListAttachedUserPolicies_596839; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_596855.validator(path, query, header, formData, body)
  let scheme = call_596855.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596855.url(scheme.get, call_596855.host, call_596855.base,
                         call_596855.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596855, url, valid)

proc call*(call_596856: Call_GetListAttachedUserPolicies_596839; UserName: string;
          PathPrefix: string = ""; Action: string = "ListAttachedUserPolicies";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596857 = newJObject()
  add(query_596857, "PathPrefix", newJString(PathPrefix))
  add(query_596857, "UserName", newJString(UserName))
  add(query_596857, "Action", newJString(Action))
  add(query_596857, "Marker", newJString(Marker))
  add(query_596857, "MaxItems", newJInt(MaxItems))
  add(query_596857, "Version", newJString(Version))
  result = call_596856.call(nil, query_596857, nil, nil, nil)

var getListAttachedUserPolicies* = Call_GetListAttachedUserPolicies_596839(
    name: "getListAttachedUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_GetListAttachedUserPolicies_596840, base: "/",
    url: url_GetListAttachedUserPolicies_596841,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListEntitiesForPolicy_596899 = ref object of OpenApiRestCall_593437
proc url_PostListEntitiesForPolicy_596901(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListEntitiesForPolicy_596900(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596902 = query.getOrDefault("Action")
  valid_596902 = validateParameter(valid_596902, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_596902 != nil:
    section.add "Action", valid_596902
  var valid_596903 = query.getOrDefault("Version")
  valid_596903 = validateParameter(valid_596903, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596903 != nil:
    section.add "Version", valid_596903
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596904 = header.getOrDefault("X-Amz-Date")
  valid_596904 = validateParameter(valid_596904, JString, required = false,
                                 default = nil)
  if valid_596904 != nil:
    section.add "X-Amz-Date", valid_596904
  var valid_596905 = header.getOrDefault("X-Amz-Security-Token")
  valid_596905 = validateParameter(valid_596905, JString, required = false,
                                 default = nil)
  if valid_596905 != nil:
    section.add "X-Amz-Security-Token", valid_596905
  var valid_596906 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596906 = validateParameter(valid_596906, JString, required = false,
                                 default = nil)
  if valid_596906 != nil:
    section.add "X-Amz-Content-Sha256", valid_596906
  var valid_596907 = header.getOrDefault("X-Amz-Algorithm")
  valid_596907 = validateParameter(valid_596907, JString, required = false,
                                 default = nil)
  if valid_596907 != nil:
    section.add "X-Amz-Algorithm", valid_596907
  var valid_596908 = header.getOrDefault("X-Amz-Signature")
  valid_596908 = validateParameter(valid_596908, JString, required = false,
                                 default = nil)
  if valid_596908 != nil:
    section.add "X-Amz-Signature", valid_596908
  var valid_596909 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596909 = validateParameter(valid_596909, JString, required = false,
                                 default = nil)
  if valid_596909 != nil:
    section.add "X-Amz-SignedHeaders", valid_596909
  var valid_596910 = header.getOrDefault("X-Amz-Credential")
  valid_596910 = validateParameter(valid_596910, JString, required = false,
                                 default = nil)
  if valid_596910 != nil:
    section.add "X-Amz-Credential", valid_596910
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_596911 = formData.getOrDefault("PathPrefix")
  valid_596911 = validateParameter(valid_596911, JString, required = false,
                                 default = nil)
  if valid_596911 != nil:
    section.add "PathPrefix", valid_596911
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_596912 = formData.getOrDefault("PolicyArn")
  valid_596912 = validateParameter(valid_596912, JString, required = true,
                                 default = nil)
  if valid_596912 != nil:
    section.add "PolicyArn", valid_596912
  var valid_596913 = formData.getOrDefault("EntityFilter")
  valid_596913 = validateParameter(valid_596913, JString, required = false,
                                 default = newJString("User"))
  if valid_596913 != nil:
    section.add "EntityFilter", valid_596913
  var valid_596914 = formData.getOrDefault("Marker")
  valid_596914 = validateParameter(valid_596914, JString, required = false,
                                 default = nil)
  if valid_596914 != nil:
    section.add "Marker", valid_596914
  var valid_596915 = formData.getOrDefault("PolicyUsageFilter")
  valid_596915 = validateParameter(valid_596915, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_596915 != nil:
    section.add "PolicyUsageFilter", valid_596915
  var valid_596916 = formData.getOrDefault("MaxItems")
  valid_596916 = validateParameter(valid_596916, JInt, required = false, default = nil)
  if valid_596916 != nil:
    section.add "MaxItems", valid_596916
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596917: Call_PostListEntitiesForPolicy_596899; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_596917.validator(path, query, header, formData, body)
  let scheme = call_596917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596917.url(scheme.get, call_596917.host, call_596917.base,
                         call_596917.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596917, url, valid)

proc call*(call_596918: Call_PostListEntitiesForPolicy_596899; PolicyArn: string;
          PathPrefix: string = ""; EntityFilter: string = "User"; Marker: string = "";
          PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListEntitiesForPolicy"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596919 = newJObject()
  var formData_596920 = newJObject()
  add(formData_596920, "PathPrefix", newJString(PathPrefix))
  add(formData_596920, "PolicyArn", newJString(PolicyArn))
  add(formData_596920, "EntityFilter", newJString(EntityFilter))
  add(formData_596920, "Marker", newJString(Marker))
  add(formData_596920, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_596919, "Action", newJString(Action))
  add(formData_596920, "MaxItems", newJInt(MaxItems))
  add(query_596919, "Version", newJString(Version))
  result = call_596918.call(nil, query_596919, nil, formData_596920, nil)

var postListEntitiesForPolicy* = Call_PostListEntitiesForPolicy_596899(
    name: "postListEntitiesForPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_PostListEntitiesForPolicy_596900, base: "/",
    url: url_PostListEntitiesForPolicy_596901,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListEntitiesForPolicy_596878 = ref object of OpenApiRestCall_593437
proc url_GetListEntitiesForPolicy_596880(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListEntitiesForPolicy_596879(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596881 = query.getOrDefault("PathPrefix")
  valid_596881 = validateParameter(valid_596881, JString, required = false,
                                 default = nil)
  if valid_596881 != nil:
    section.add "PathPrefix", valid_596881
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_596882 = query.getOrDefault("PolicyArn")
  valid_596882 = validateParameter(valid_596882, JString, required = true,
                                 default = nil)
  if valid_596882 != nil:
    section.add "PolicyArn", valid_596882
  var valid_596883 = query.getOrDefault("PolicyUsageFilter")
  valid_596883 = validateParameter(valid_596883, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_596883 != nil:
    section.add "PolicyUsageFilter", valid_596883
  var valid_596884 = query.getOrDefault("Action")
  valid_596884 = validateParameter(valid_596884, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_596884 != nil:
    section.add "Action", valid_596884
  var valid_596885 = query.getOrDefault("Marker")
  valid_596885 = validateParameter(valid_596885, JString, required = false,
                                 default = nil)
  if valid_596885 != nil:
    section.add "Marker", valid_596885
  var valid_596886 = query.getOrDefault("EntityFilter")
  valid_596886 = validateParameter(valid_596886, JString, required = false,
                                 default = newJString("User"))
  if valid_596886 != nil:
    section.add "EntityFilter", valid_596886
  var valid_596887 = query.getOrDefault("MaxItems")
  valid_596887 = validateParameter(valid_596887, JInt, required = false, default = nil)
  if valid_596887 != nil:
    section.add "MaxItems", valid_596887
  var valid_596888 = query.getOrDefault("Version")
  valid_596888 = validateParameter(valid_596888, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596888 != nil:
    section.add "Version", valid_596888
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596889 = header.getOrDefault("X-Amz-Date")
  valid_596889 = validateParameter(valid_596889, JString, required = false,
                                 default = nil)
  if valid_596889 != nil:
    section.add "X-Amz-Date", valid_596889
  var valid_596890 = header.getOrDefault("X-Amz-Security-Token")
  valid_596890 = validateParameter(valid_596890, JString, required = false,
                                 default = nil)
  if valid_596890 != nil:
    section.add "X-Amz-Security-Token", valid_596890
  var valid_596891 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596891 = validateParameter(valid_596891, JString, required = false,
                                 default = nil)
  if valid_596891 != nil:
    section.add "X-Amz-Content-Sha256", valid_596891
  var valid_596892 = header.getOrDefault("X-Amz-Algorithm")
  valid_596892 = validateParameter(valid_596892, JString, required = false,
                                 default = nil)
  if valid_596892 != nil:
    section.add "X-Amz-Algorithm", valid_596892
  var valid_596893 = header.getOrDefault("X-Amz-Signature")
  valid_596893 = validateParameter(valid_596893, JString, required = false,
                                 default = nil)
  if valid_596893 != nil:
    section.add "X-Amz-Signature", valid_596893
  var valid_596894 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596894 = validateParameter(valid_596894, JString, required = false,
                                 default = nil)
  if valid_596894 != nil:
    section.add "X-Amz-SignedHeaders", valid_596894
  var valid_596895 = header.getOrDefault("X-Amz-Credential")
  valid_596895 = validateParameter(valid_596895, JString, required = false,
                                 default = nil)
  if valid_596895 != nil:
    section.add "X-Amz-Credential", valid_596895
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596896: Call_GetListEntitiesForPolicy_596878; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_596896.validator(path, query, header, formData, body)
  let scheme = call_596896.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596896.url(scheme.get, call_596896.host, call_596896.base,
                         call_596896.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596896, url, valid)

proc call*(call_596897: Call_GetListEntitiesForPolicy_596878; PolicyArn: string;
          PathPrefix: string = ""; PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListEntitiesForPolicy"; Marker: string = "";
          EntityFilter: string = "User"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596898 = newJObject()
  add(query_596898, "PathPrefix", newJString(PathPrefix))
  add(query_596898, "PolicyArn", newJString(PolicyArn))
  add(query_596898, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_596898, "Action", newJString(Action))
  add(query_596898, "Marker", newJString(Marker))
  add(query_596898, "EntityFilter", newJString(EntityFilter))
  add(query_596898, "MaxItems", newJInt(MaxItems))
  add(query_596898, "Version", newJString(Version))
  result = call_596897.call(nil, query_596898, nil, nil, nil)

var getListEntitiesForPolicy* = Call_GetListEntitiesForPolicy_596878(
    name: "getListEntitiesForPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_GetListEntitiesForPolicy_596879, base: "/",
    url: url_GetListEntitiesForPolicy_596880, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupPolicies_596939 = ref object of OpenApiRestCall_593437
proc url_PostListGroupPolicies_596941(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListGroupPolicies_596940(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596942 = query.getOrDefault("Action")
  valid_596942 = validateParameter(valid_596942, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_596942 != nil:
    section.add "Action", valid_596942
  var valid_596943 = query.getOrDefault("Version")
  valid_596943 = validateParameter(valid_596943, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596943 != nil:
    section.add "Version", valid_596943
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596944 = header.getOrDefault("X-Amz-Date")
  valid_596944 = validateParameter(valid_596944, JString, required = false,
                                 default = nil)
  if valid_596944 != nil:
    section.add "X-Amz-Date", valid_596944
  var valid_596945 = header.getOrDefault("X-Amz-Security-Token")
  valid_596945 = validateParameter(valid_596945, JString, required = false,
                                 default = nil)
  if valid_596945 != nil:
    section.add "X-Amz-Security-Token", valid_596945
  var valid_596946 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596946 = validateParameter(valid_596946, JString, required = false,
                                 default = nil)
  if valid_596946 != nil:
    section.add "X-Amz-Content-Sha256", valid_596946
  var valid_596947 = header.getOrDefault("X-Amz-Algorithm")
  valid_596947 = validateParameter(valid_596947, JString, required = false,
                                 default = nil)
  if valid_596947 != nil:
    section.add "X-Amz-Algorithm", valid_596947
  var valid_596948 = header.getOrDefault("X-Amz-Signature")
  valid_596948 = validateParameter(valid_596948, JString, required = false,
                                 default = nil)
  if valid_596948 != nil:
    section.add "X-Amz-Signature", valid_596948
  var valid_596949 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596949 = validateParameter(valid_596949, JString, required = false,
                                 default = nil)
  if valid_596949 != nil:
    section.add "X-Amz-SignedHeaders", valid_596949
  var valid_596950 = header.getOrDefault("X-Amz-Credential")
  valid_596950 = validateParameter(valid_596950, JString, required = false,
                                 default = nil)
  if valid_596950 != nil:
    section.add "X-Amz-Credential", valid_596950
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_596951 = formData.getOrDefault("GroupName")
  valid_596951 = validateParameter(valid_596951, JString, required = true,
                                 default = nil)
  if valid_596951 != nil:
    section.add "GroupName", valid_596951
  var valid_596952 = formData.getOrDefault("Marker")
  valid_596952 = validateParameter(valid_596952, JString, required = false,
                                 default = nil)
  if valid_596952 != nil:
    section.add "Marker", valid_596952
  var valid_596953 = formData.getOrDefault("MaxItems")
  valid_596953 = validateParameter(valid_596953, JInt, required = false, default = nil)
  if valid_596953 != nil:
    section.add "MaxItems", valid_596953
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596954: Call_PostListGroupPolicies_596939; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_596954.validator(path, query, header, formData, body)
  let scheme = call_596954.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596954.url(scheme.get, call_596954.host, call_596954.base,
                         call_596954.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596954, url, valid)

proc call*(call_596955: Call_PostListGroupPolicies_596939; GroupName: string;
          Marker: string = ""; Action: string = "ListGroupPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596956 = newJObject()
  var formData_596957 = newJObject()
  add(formData_596957, "GroupName", newJString(GroupName))
  add(formData_596957, "Marker", newJString(Marker))
  add(query_596956, "Action", newJString(Action))
  add(formData_596957, "MaxItems", newJInt(MaxItems))
  add(query_596956, "Version", newJString(Version))
  result = call_596955.call(nil, query_596956, nil, formData_596957, nil)

var postListGroupPolicies* = Call_PostListGroupPolicies_596939(
    name: "postListGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_PostListGroupPolicies_596940, base: "/",
    url: url_PostListGroupPolicies_596941, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupPolicies_596921 = ref object of OpenApiRestCall_593437
proc url_GetListGroupPolicies_596923(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListGroupPolicies_596922(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596924 = query.getOrDefault("Action")
  valid_596924 = validateParameter(valid_596924, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_596924 != nil:
    section.add "Action", valid_596924
  var valid_596925 = query.getOrDefault("Marker")
  valid_596925 = validateParameter(valid_596925, JString, required = false,
                                 default = nil)
  if valid_596925 != nil:
    section.add "Marker", valid_596925
  var valid_596926 = query.getOrDefault("GroupName")
  valid_596926 = validateParameter(valid_596926, JString, required = true,
                                 default = nil)
  if valid_596926 != nil:
    section.add "GroupName", valid_596926
  var valid_596927 = query.getOrDefault("MaxItems")
  valid_596927 = validateParameter(valid_596927, JInt, required = false, default = nil)
  if valid_596927 != nil:
    section.add "MaxItems", valid_596927
  var valid_596928 = query.getOrDefault("Version")
  valid_596928 = validateParameter(valid_596928, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596928 != nil:
    section.add "Version", valid_596928
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596929 = header.getOrDefault("X-Amz-Date")
  valid_596929 = validateParameter(valid_596929, JString, required = false,
                                 default = nil)
  if valid_596929 != nil:
    section.add "X-Amz-Date", valid_596929
  var valid_596930 = header.getOrDefault("X-Amz-Security-Token")
  valid_596930 = validateParameter(valid_596930, JString, required = false,
                                 default = nil)
  if valid_596930 != nil:
    section.add "X-Amz-Security-Token", valid_596930
  var valid_596931 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596931 = validateParameter(valid_596931, JString, required = false,
                                 default = nil)
  if valid_596931 != nil:
    section.add "X-Amz-Content-Sha256", valid_596931
  var valid_596932 = header.getOrDefault("X-Amz-Algorithm")
  valid_596932 = validateParameter(valid_596932, JString, required = false,
                                 default = nil)
  if valid_596932 != nil:
    section.add "X-Amz-Algorithm", valid_596932
  var valid_596933 = header.getOrDefault("X-Amz-Signature")
  valid_596933 = validateParameter(valid_596933, JString, required = false,
                                 default = nil)
  if valid_596933 != nil:
    section.add "X-Amz-Signature", valid_596933
  var valid_596934 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596934 = validateParameter(valid_596934, JString, required = false,
                                 default = nil)
  if valid_596934 != nil:
    section.add "X-Amz-SignedHeaders", valid_596934
  var valid_596935 = header.getOrDefault("X-Amz-Credential")
  valid_596935 = validateParameter(valid_596935, JString, required = false,
                                 default = nil)
  if valid_596935 != nil:
    section.add "X-Amz-Credential", valid_596935
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596936: Call_GetListGroupPolicies_596921; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_596936.validator(path, query, header, formData, body)
  let scheme = call_596936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596936.url(scheme.get, call_596936.host, call_596936.base,
                         call_596936.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596936, url, valid)

proc call*(call_596937: Call_GetListGroupPolicies_596921; GroupName: string;
          Action: string = "ListGroupPolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596938 = newJObject()
  add(query_596938, "Action", newJString(Action))
  add(query_596938, "Marker", newJString(Marker))
  add(query_596938, "GroupName", newJString(GroupName))
  add(query_596938, "MaxItems", newJInt(MaxItems))
  add(query_596938, "Version", newJString(Version))
  result = call_596937.call(nil, query_596938, nil, nil, nil)

var getListGroupPolicies* = Call_GetListGroupPolicies_596921(
    name: "getListGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_GetListGroupPolicies_596922, base: "/",
    url: url_GetListGroupPolicies_596923, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroups_596976 = ref object of OpenApiRestCall_593437
proc url_PostListGroups_596978(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListGroups_596977(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596979 = query.getOrDefault("Action")
  valid_596979 = validateParameter(valid_596979, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_596979 != nil:
    section.add "Action", valid_596979
  var valid_596980 = query.getOrDefault("Version")
  valid_596980 = validateParameter(valid_596980, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596980 != nil:
    section.add "Version", valid_596980
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596981 = header.getOrDefault("X-Amz-Date")
  valid_596981 = validateParameter(valid_596981, JString, required = false,
                                 default = nil)
  if valid_596981 != nil:
    section.add "X-Amz-Date", valid_596981
  var valid_596982 = header.getOrDefault("X-Amz-Security-Token")
  valid_596982 = validateParameter(valid_596982, JString, required = false,
                                 default = nil)
  if valid_596982 != nil:
    section.add "X-Amz-Security-Token", valid_596982
  var valid_596983 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596983 = validateParameter(valid_596983, JString, required = false,
                                 default = nil)
  if valid_596983 != nil:
    section.add "X-Amz-Content-Sha256", valid_596983
  var valid_596984 = header.getOrDefault("X-Amz-Algorithm")
  valid_596984 = validateParameter(valid_596984, JString, required = false,
                                 default = nil)
  if valid_596984 != nil:
    section.add "X-Amz-Algorithm", valid_596984
  var valid_596985 = header.getOrDefault("X-Amz-Signature")
  valid_596985 = validateParameter(valid_596985, JString, required = false,
                                 default = nil)
  if valid_596985 != nil:
    section.add "X-Amz-Signature", valid_596985
  var valid_596986 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596986 = validateParameter(valid_596986, JString, required = false,
                                 default = nil)
  if valid_596986 != nil:
    section.add "X-Amz-SignedHeaders", valid_596986
  var valid_596987 = header.getOrDefault("X-Amz-Credential")
  valid_596987 = validateParameter(valid_596987, JString, required = false,
                                 default = nil)
  if valid_596987 != nil:
    section.add "X-Amz-Credential", valid_596987
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_596988 = formData.getOrDefault("PathPrefix")
  valid_596988 = validateParameter(valid_596988, JString, required = false,
                                 default = nil)
  if valid_596988 != nil:
    section.add "PathPrefix", valid_596988
  var valid_596989 = formData.getOrDefault("Marker")
  valid_596989 = validateParameter(valid_596989, JString, required = false,
                                 default = nil)
  if valid_596989 != nil:
    section.add "Marker", valid_596989
  var valid_596990 = formData.getOrDefault("MaxItems")
  valid_596990 = validateParameter(valid_596990, JInt, required = false, default = nil)
  if valid_596990 != nil:
    section.add "MaxItems", valid_596990
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596991: Call_PostListGroups_596976; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_596991.validator(path, query, header, formData, body)
  let scheme = call_596991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596991.url(scheme.get, call_596991.host, call_596991.base,
                         call_596991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596991, url, valid)

proc call*(call_596992: Call_PostListGroups_596976; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListGroups"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596993 = newJObject()
  var formData_596994 = newJObject()
  add(formData_596994, "PathPrefix", newJString(PathPrefix))
  add(formData_596994, "Marker", newJString(Marker))
  add(query_596993, "Action", newJString(Action))
  add(formData_596994, "MaxItems", newJInt(MaxItems))
  add(query_596993, "Version", newJString(Version))
  result = call_596992.call(nil, query_596993, nil, formData_596994, nil)

var postListGroups* = Call_PostListGroups_596976(name: "postListGroups",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_PostListGroups_596977,
    base: "/", url: url_PostListGroups_596978, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroups_596958 = ref object of OpenApiRestCall_593437
proc url_GetListGroups_596960(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListGroups_596959(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_596961 = query.getOrDefault("PathPrefix")
  valid_596961 = validateParameter(valid_596961, JString, required = false,
                                 default = nil)
  if valid_596961 != nil:
    section.add "PathPrefix", valid_596961
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596962 = query.getOrDefault("Action")
  valid_596962 = validateParameter(valid_596962, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_596962 != nil:
    section.add "Action", valid_596962
  var valid_596963 = query.getOrDefault("Marker")
  valid_596963 = validateParameter(valid_596963, JString, required = false,
                                 default = nil)
  if valid_596963 != nil:
    section.add "Marker", valid_596963
  var valid_596964 = query.getOrDefault("MaxItems")
  valid_596964 = validateParameter(valid_596964, JInt, required = false, default = nil)
  if valid_596964 != nil:
    section.add "MaxItems", valid_596964
  var valid_596965 = query.getOrDefault("Version")
  valid_596965 = validateParameter(valid_596965, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_596965 != nil:
    section.add "Version", valid_596965
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_596966 = header.getOrDefault("X-Amz-Date")
  valid_596966 = validateParameter(valid_596966, JString, required = false,
                                 default = nil)
  if valid_596966 != nil:
    section.add "X-Amz-Date", valid_596966
  var valid_596967 = header.getOrDefault("X-Amz-Security-Token")
  valid_596967 = validateParameter(valid_596967, JString, required = false,
                                 default = nil)
  if valid_596967 != nil:
    section.add "X-Amz-Security-Token", valid_596967
  var valid_596968 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596968 = validateParameter(valid_596968, JString, required = false,
                                 default = nil)
  if valid_596968 != nil:
    section.add "X-Amz-Content-Sha256", valid_596968
  var valid_596969 = header.getOrDefault("X-Amz-Algorithm")
  valid_596969 = validateParameter(valid_596969, JString, required = false,
                                 default = nil)
  if valid_596969 != nil:
    section.add "X-Amz-Algorithm", valid_596969
  var valid_596970 = header.getOrDefault("X-Amz-Signature")
  valid_596970 = validateParameter(valid_596970, JString, required = false,
                                 default = nil)
  if valid_596970 != nil:
    section.add "X-Amz-Signature", valid_596970
  var valid_596971 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596971 = validateParameter(valid_596971, JString, required = false,
                                 default = nil)
  if valid_596971 != nil:
    section.add "X-Amz-SignedHeaders", valid_596971
  var valid_596972 = header.getOrDefault("X-Amz-Credential")
  valid_596972 = validateParameter(valid_596972, JString, required = false,
                                 default = nil)
  if valid_596972 != nil:
    section.add "X-Amz-Credential", valid_596972
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596973: Call_GetListGroups_596958; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_596973.validator(path, query, header, formData, body)
  let scheme = call_596973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596973.url(scheme.get, call_596973.host, call_596973.base,
                         call_596973.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596973, url, valid)

proc call*(call_596974: Call_GetListGroups_596958; PathPrefix: string = "";
          Action: string = "ListGroups"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_596975 = newJObject()
  add(query_596975, "PathPrefix", newJString(PathPrefix))
  add(query_596975, "Action", newJString(Action))
  add(query_596975, "Marker", newJString(Marker))
  add(query_596975, "MaxItems", newJInt(MaxItems))
  add(query_596975, "Version", newJString(Version))
  result = call_596974.call(nil, query_596975, nil, nil, nil)

var getListGroups* = Call_GetListGroups_596958(name: "getListGroups",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_GetListGroups_596959,
    base: "/", url: url_GetListGroups_596960, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupsForUser_597013 = ref object of OpenApiRestCall_593437
proc url_PostListGroupsForUser_597015(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListGroupsForUser_597014(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597016 = query.getOrDefault("Action")
  valid_597016 = validateParameter(valid_597016, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_597016 != nil:
    section.add "Action", valid_597016
  var valid_597017 = query.getOrDefault("Version")
  valid_597017 = validateParameter(valid_597017, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597017 != nil:
    section.add "Version", valid_597017
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597018 = header.getOrDefault("X-Amz-Date")
  valid_597018 = validateParameter(valid_597018, JString, required = false,
                                 default = nil)
  if valid_597018 != nil:
    section.add "X-Amz-Date", valid_597018
  var valid_597019 = header.getOrDefault("X-Amz-Security-Token")
  valid_597019 = validateParameter(valid_597019, JString, required = false,
                                 default = nil)
  if valid_597019 != nil:
    section.add "X-Amz-Security-Token", valid_597019
  var valid_597020 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597020 = validateParameter(valid_597020, JString, required = false,
                                 default = nil)
  if valid_597020 != nil:
    section.add "X-Amz-Content-Sha256", valid_597020
  var valid_597021 = header.getOrDefault("X-Amz-Algorithm")
  valid_597021 = validateParameter(valid_597021, JString, required = false,
                                 default = nil)
  if valid_597021 != nil:
    section.add "X-Amz-Algorithm", valid_597021
  var valid_597022 = header.getOrDefault("X-Amz-Signature")
  valid_597022 = validateParameter(valid_597022, JString, required = false,
                                 default = nil)
  if valid_597022 != nil:
    section.add "X-Amz-Signature", valid_597022
  var valid_597023 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597023 = validateParameter(valid_597023, JString, required = false,
                                 default = nil)
  if valid_597023 != nil:
    section.add "X-Amz-SignedHeaders", valid_597023
  var valid_597024 = header.getOrDefault("X-Amz-Credential")
  valid_597024 = validateParameter(valid_597024, JString, required = false,
                                 default = nil)
  if valid_597024 != nil:
    section.add "X-Amz-Credential", valid_597024
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_597025 = formData.getOrDefault("UserName")
  valid_597025 = validateParameter(valid_597025, JString, required = true,
                                 default = nil)
  if valid_597025 != nil:
    section.add "UserName", valid_597025
  var valid_597026 = formData.getOrDefault("Marker")
  valid_597026 = validateParameter(valid_597026, JString, required = false,
                                 default = nil)
  if valid_597026 != nil:
    section.add "Marker", valid_597026
  var valid_597027 = formData.getOrDefault("MaxItems")
  valid_597027 = validateParameter(valid_597027, JInt, required = false, default = nil)
  if valid_597027 != nil:
    section.add "MaxItems", valid_597027
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597028: Call_PostListGroupsForUser_597013; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597028.validator(path, query, header, formData, body)
  let scheme = call_597028.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597028.url(scheme.get, call_597028.host, call_597028.base,
                         call_597028.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597028, url, valid)

proc call*(call_597029: Call_PostListGroupsForUser_597013; UserName: string;
          Marker: string = ""; Action: string = "ListGroupsForUser"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597030 = newJObject()
  var formData_597031 = newJObject()
  add(formData_597031, "UserName", newJString(UserName))
  add(formData_597031, "Marker", newJString(Marker))
  add(query_597030, "Action", newJString(Action))
  add(formData_597031, "MaxItems", newJInt(MaxItems))
  add(query_597030, "Version", newJString(Version))
  result = call_597029.call(nil, query_597030, nil, formData_597031, nil)

var postListGroupsForUser* = Call_PostListGroupsForUser_597013(
    name: "postListGroupsForUser", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_PostListGroupsForUser_597014, base: "/",
    url: url_PostListGroupsForUser_597015, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupsForUser_596995 = ref object of OpenApiRestCall_593437
proc url_GetListGroupsForUser_596997(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListGroupsForUser_596996(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_596998 = query.getOrDefault("UserName")
  valid_596998 = validateParameter(valid_596998, JString, required = true,
                                 default = nil)
  if valid_596998 != nil:
    section.add "UserName", valid_596998
  var valid_596999 = query.getOrDefault("Action")
  valid_596999 = validateParameter(valid_596999, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_596999 != nil:
    section.add "Action", valid_596999
  var valid_597000 = query.getOrDefault("Marker")
  valid_597000 = validateParameter(valid_597000, JString, required = false,
                                 default = nil)
  if valid_597000 != nil:
    section.add "Marker", valid_597000
  var valid_597001 = query.getOrDefault("MaxItems")
  valid_597001 = validateParameter(valid_597001, JInt, required = false, default = nil)
  if valid_597001 != nil:
    section.add "MaxItems", valid_597001
  var valid_597002 = query.getOrDefault("Version")
  valid_597002 = validateParameter(valid_597002, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597002 != nil:
    section.add "Version", valid_597002
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597003 = header.getOrDefault("X-Amz-Date")
  valid_597003 = validateParameter(valid_597003, JString, required = false,
                                 default = nil)
  if valid_597003 != nil:
    section.add "X-Amz-Date", valid_597003
  var valid_597004 = header.getOrDefault("X-Amz-Security-Token")
  valid_597004 = validateParameter(valid_597004, JString, required = false,
                                 default = nil)
  if valid_597004 != nil:
    section.add "X-Amz-Security-Token", valid_597004
  var valid_597005 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597005 = validateParameter(valid_597005, JString, required = false,
                                 default = nil)
  if valid_597005 != nil:
    section.add "X-Amz-Content-Sha256", valid_597005
  var valid_597006 = header.getOrDefault("X-Amz-Algorithm")
  valid_597006 = validateParameter(valid_597006, JString, required = false,
                                 default = nil)
  if valid_597006 != nil:
    section.add "X-Amz-Algorithm", valid_597006
  var valid_597007 = header.getOrDefault("X-Amz-Signature")
  valid_597007 = validateParameter(valid_597007, JString, required = false,
                                 default = nil)
  if valid_597007 != nil:
    section.add "X-Amz-Signature", valid_597007
  var valid_597008 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597008 = validateParameter(valid_597008, JString, required = false,
                                 default = nil)
  if valid_597008 != nil:
    section.add "X-Amz-SignedHeaders", valid_597008
  var valid_597009 = header.getOrDefault("X-Amz-Credential")
  valid_597009 = validateParameter(valid_597009, JString, required = false,
                                 default = nil)
  if valid_597009 != nil:
    section.add "X-Amz-Credential", valid_597009
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597010: Call_GetListGroupsForUser_596995; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597010.validator(path, query, header, formData, body)
  let scheme = call_597010.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597010.url(scheme.get, call_597010.host, call_597010.base,
                         call_597010.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597010, url, valid)

proc call*(call_597011: Call_GetListGroupsForUser_596995; UserName: string;
          Action: string = "ListGroupsForUser"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597012 = newJObject()
  add(query_597012, "UserName", newJString(UserName))
  add(query_597012, "Action", newJString(Action))
  add(query_597012, "Marker", newJString(Marker))
  add(query_597012, "MaxItems", newJInt(MaxItems))
  add(query_597012, "Version", newJString(Version))
  result = call_597011.call(nil, query_597012, nil, nil, nil)

var getListGroupsForUser* = Call_GetListGroupsForUser_596995(
    name: "getListGroupsForUser", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_GetListGroupsForUser_596996, base: "/",
    url: url_GetListGroupsForUser_596997, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfiles_597050 = ref object of OpenApiRestCall_593437
proc url_PostListInstanceProfiles_597052(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListInstanceProfiles_597051(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597053 = query.getOrDefault("Action")
  valid_597053 = validateParameter(valid_597053, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_597053 != nil:
    section.add "Action", valid_597053
  var valid_597054 = query.getOrDefault("Version")
  valid_597054 = validateParameter(valid_597054, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597054 != nil:
    section.add "Version", valid_597054
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597055 = header.getOrDefault("X-Amz-Date")
  valid_597055 = validateParameter(valid_597055, JString, required = false,
                                 default = nil)
  if valid_597055 != nil:
    section.add "X-Amz-Date", valid_597055
  var valid_597056 = header.getOrDefault("X-Amz-Security-Token")
  valid_597056 = validateParameter(valid_597056, JString, required = false,
                                 default = nil)
  if valid_597056 != nil:
    section.add "X-Amz-Security-Token", valid_597056
  var valid_597057 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597057 = validateParameter(valid_597057, JString, required = false,
                                 default = nil)
  if valid_597057 != nil:
    section.add "X-Amz-Content-Sha256", valid_597057
  var valid_597058 = header.getOrDefault("X-Amz-Algorithm")
  valid_597058 = validateParameter(valid_597058, JString, required = false,
                                 default = nil)
  if valid_597058 != nil:
    section.add "X-Amz-Algorithm", valid_597058
  var valid_597059 = header.getOrDefault("X-Amz-Signature")
  valid_597059 = validateParameter(valid_597059, JString, required = false,
                                 default = nil)
  if valid_597059 != nil:
    section.add "X-Amz-Signature", valid_597059
  var valid_597060 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597060 = validateParameter(valid_597060, JString, required = false,
                                 default = nil)
  if valid_597060 != nil:
    section.add "X-Amz-SignedHeaders", valid_597060
  var valid_597061 = header.getOrDefault("X-Amz-Credential")
  valid_597061 = validateParameter(valid_597061, JString, required = false,
                                 default = nil)
  if valid_597061 != nil:
    section.add "X-Amz-Credential", valid_597061
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_597062 = formData.getOrDefault("PathPrefix")
  valid_597062 = validateParameter(valid_597062, JString, required = false,
                                 default = nil)
  if valid_597062 != nil:
    section.add "PathPrefix", valid_597062
  var valid_597063 = formData.getOrDefault("Marker")
  valid_597063 = validateParameter(valid_597063, JString, required = false,
                                 default = nil)
  if valid_597063 != nil:
    section.add "Marker", valid_597063
  var valid_597064 = formData.getOrDefault("MaxItems")
  valid_597064 = validateParameter(valid_597064, JInt, required = false, default = nil)
  if valid_597064 != nil:
    section.add "MaxItems", valid_597064
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597065: Call_PostListInstanceProfiles_597050; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597065.validator(path, query, header, formData, body)
  let scheme = call_597065.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597065.url(scheme.get, call_597065.host, call_597065.base,
                         call_597065.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597065, url, valid)

proc call*(call_597066: Call_PostListInstanceProfiles_597050;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListInstanceProfiles"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597067 = newJObject()
  var formData_597068 = newJObject()
  add(formData_597068, "PathPrefix", newJString(PathPrefix))
  add(formData_597068, "Marker", newJString(Marker))
  add(query_597067, "Action", newJString(Action))
  add(formData_597068, "MaxItems", newJInt(MaxItems))
  add(query_597067, "Version", newJString(Version))
  result = call_597066.call(nil, query_597067, nil, formData_597068, nil)

var postListInstanceProfiles* = Call_PostListInstanceProfiles_597050(
    name: "postListInstanceProfiles", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_PostListInstanceProfiles_597051, base: "/",
    url: url_PostListInstanceProfiles_597052, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfiles_597032 = ref object of OpenApiRestCall_593437
proc url_GetListInstanceProfiles_597034(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListInstanceProfiles_597033(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_597035 = query.getOrDefault("PathPrefix")
  valid_597035 = validateParameter(valid_597035, JString, required = false,
                                 default = nil)
  if valid_597035 != nil:
    section.add "PathPrefix", valid_597035
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597036 = query.getOrDefault("Action")
  valid_597036 = validateParameter(valid_597036, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_597036 != nil:
    section.add "Action", valid_597036
  var valid_597037 = query.getOrDefault("Marker")
  valid_597037 = validateParameter(valid_597037, JString, required = false,
                                 default = nil)
  if valid_597037 != nil:
    section.add "Marker", valid_597037
  var valid_597038 = query.getOrDefault("MaxItems")
  valid_597038 = validateParameter(valid_597038, JInt, required = false, default = nil)
  if valid_597038 != nil:
    section.add "MaxItems", valid_597038
  var valid_597039 = query.getOrDefault("Version")
  valid_597039 = validateParameter(valid_597039, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597039 != nil:
    section.add "Version", valid_597039
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597040 = header.getOrDefault("X-Amz-Date")
  valid_597040 = validateParameter(valid_597040, JString, required = false,
                                 default = nil)
  if valid_597040 != nil:
    section.add "X-Amz-Date", valid_597040
  var valid_597041 = header.getOrDefault("X-Amz-Security-Token")
  valid_597041 = validateParameter(valid_597041, JString, required = false,
                                 default = nil)
  if valid_597041 != nil:
    section.add "X-Amz-Security-Token", valid_597041
  var valid_597042 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597042 = validateParameter(valid_597042, JString, required = false,
                                 default = nil)
  if valid_597042 != nil:
    section.add "X-Amz-Content-Sha256", valid_597042
  var valid_597043 = header.getOrDefault("X-Amz-Algorithm")
  valid_597043 = validateParameter(valid_597043, JString, required = false,
                                 default = nil)
  if valid_597043 != nil:
    section.add "X-Amz-Algorithm", valid_597043
  var valid_597044 = header.getOrDefault("X-Amz-Signature")
  valid_597044 = validateParameter(valid_597044, JString, required = false,
                                 default = nil)
  if valid_597044 != nil:
    section.add "X-Amz-Signature", valid_597044
  var valid_597045 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597045 = validateParameter(valid_597045, JString, required = false,
                                 default = nil)
  if valid_597045 != nil:
    section.add "X-Amz-SignedHeaders", valid_597045
  var valid_597046 = header.getOrDefault("X-Amz-Credential")
  valid_597046 = validateParameter(valid_597046, JString, required = false,
                                 default = nil)
  if valid_597046 != nil:
    section.add "X-Amz-Credential", valid_597046
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597047: Call_GetListInstanceProfiles_597032; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597047.validator(path, query, header, formData, body)
  let scheme = call_597047.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597047.url(scheme.get, call_597047.host, call_597047.base,
                         call_597047.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597047, url, valid)

proc call*(call_597048: Call_GetListInstanceProfiles_597032;
          PathPrefix: string = ""; Action: string = "ListInstanceProfiles";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597049 = newJObject()
  add(query_597049, "PathPrefix", newJString(PathPrefix))
  add(query_597049, "Action", newJString(Action))
  add(query_597049, "Marker", newJString(Marker))
  add(query_597049, "MaxItems", newJInt(MaxItems))
  add(query_597049, "Version", newJString(Version))
  result = call_597048.call(nil, query_597049, nil, nil, nil)

var getListInstanceProfiles* = Call_GetListInstanceProfiles_597032(
    name: "getListInstanceProfiles", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_GetListInstanceProfiles_597033, base: "/",
    url: url_GetListInstanceProfiles_597034, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfilesForRole_597087 = ref object of OpenApiRestCall_593437
proc url_PostListInstanceProfilesForRole_597089(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListInstanceProfilesForRole_597088(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597090 = query.getOrDefault("Action")
  valid_597090 = validateParameter(valid_597090, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_597090 != nil:
    section.add "Action", valid_597090
  var valid_597091 = query.getOrDefault("Version")
  valid_597091 = validateParameter(valid_597091, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597091 != nil:
    section.add "Version", valid_597091
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597092 = header.getOrDefault("X-Amz-Date")
  valid_597092 = validateParameter(valid_597092, JString, required = false,
                                 default = nil)
  if valid_597092 != nil:
    section.add "X-Amz-Date", valid_597092
  var valid_597093 = header.getOrDefault("X-Amz-Security-Token")
  valid_597093 = validateParameter(valid_597093, JString, required = false,
                                 default = nil)
  if valid_597093 != nil:
    section.add "X-Amz-Security-Token", valid_597093
  var valid_597094 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597094 = validateParameter(valid_597094, JString, required = false,
                                 default = nil)
  if valid_597094 != nil:
    section.add "X-Amz-Content-Sha256", valid_597094
  var valid_597095 = header.getOrDefault("X-Amz-Algorithm")
  valid_597095 = validateParameter(valid_597095, JString, required = false,
                                 default = nil)
  if valid_597095 != nil:
    section.add "X-Amz-Algorithm", valid_597095
  var valid_597096 = header.getOrDefault("X-Amz-Signature")
  valid_597096 = validateParameter(valid_597096, JString, required = false,
                                 default = nil)
  if valid_597096 != nil:
    section.add "X-Amz-Signature", valid_597096
  var valid_597097 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597097 = validateParameter(valid_597097, JString, required = false,
                                 default = nil)
  if valid_597097 != nil:
    section.add "X-Amz-SignedHeaders", valid_597097
  var valid_597098 = header.getOrDefault("X-Amz-Credential")
  valid_597098 = validateParameter(valid_597098, JString, required = false,
                                 default = nil)
  if valid_597098 != nil:
    section.add "X-Amz-Credential", valid_597098
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_597099 = formData.getOrDefault("RoleName")
  valid_597099 = validateParameter(valid_597099, JString, required = true,
                                 default = nil)
  if valid_597099 != nil:
    section.add "RoleName", valid_597099
  var valid_597100 = formData.getOrDefault("Marker")
  valid_597100 = validateParameter(valid_597100, JString, required = false,
                                 default = nil)
  if valid_597100 != nil:
    section.add "Marker", valid_597100
  var valid_597101 = formData.getOrDefault("MaxItems")
  valid_597101 = validateParameter(valid_597101, JInt, required = false, default = nil)
  if valid_597101 != nil:
    section.add "MaxItems", valid_597101
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597102: Call_PostListInstanceProfilesForRole_597087;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597102.validator(path, query, header, formData, body)
  let scheme = call_597102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597102.url(scheme.get, call_597102.host, call_597102.base,
                         call_597102.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597102, url, valid)

proc call*(call_597103: Call_PostListInstanceProfilesForRole_597087;
          RoleName: string; Marker: string = "";
          Action: string = "ListInstanceProfilesForRole"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597104 = newJObject()
  var formData_597105 = newJObject()
  add(formData_597105, "RoleName", newJString(RoleName))
  add(formData_597105, "Marker", newJString(Marker))
  add(query_597104, "Action", newJString(Action))
  add(formData_597105, "MaxItems", newJInt(MaxItems))
  add(query_597104, "Version", newJString(Version))
  result = call_597103.call(nil, query_597104, nil, formData_597105, nil)

var postListInstanceProfilesForRole* = Call_PostListInstanceProfilesForRole_597087(
    name: "postListInstanceProfilesForRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_PostListInstanceProfilesForRole_597088, base: "/",
    url: url_PostListInstanceProfilesForRole_597089,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfilesForRole_597069 = ref object of OpenApiRestCall_593437
proc url_GetListInstanceProfilesForRole_597071(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListInstanceProfilesForRole_597070(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597072 = query.getOrDefault("Action")
  valid_597072 = validateParameter(valid_597072, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_597072 != nil:
    section.add "Action", valid_597072
  var valid_597073 = query.getOrDefault("Marker")
  valid_597073 = validateParameter(valid_597073, JString, required = false,
                                 default = nil)
  if valid_597073 != nil:
    section.add "Marker", valid_597073
  var valid_597074 = query.getOrDefault("MaxItems")
  valid_597074 = validateParameter(valid_597074, JInt, required = false, default = nil)
  if valid_597074 != nil:
    section.add "MaxItems", valid_597074
  var valid_597075 = query.getOrDefault("RoleName")
  valid_597075 = validateParameter(valid_597075, JString, required = true,
                                 default = nil)
  if valid_597075 != nil:
    section.add "RoleName", valid_597075
  var valid_597076 = query.getOrDefault("Version")
  valid_597076 = validateParameter(valid_597076, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597076 != nil:
    section.add "Version", valid_597076
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597077 = header.getOrDefault("X-Amz-Date")
  valid_597077 = validateParameter(valid_597077, JString, required = false,
                                 default = nil)
  if valid_597077 != nil:
    section.add "X-Amz-Date", valid_597077
  var valid_597078 = header.getOrDefault("X-Amz-Security-Token")
  valid_597078 = validateParameter(valid_597078, JString, required = false,
                                 default = nil)
  if valid_597078 != nil:
    section.add "X-Amz-Security-Token", valid_597078
  var valid_597079 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597079 = validateParameter(valid_597079, JString, required = false,
                                 default = nil)
  if valid_597079 != nil:
    section.add "X-Amz-Content-Sha256", valid_597079
  var valid_597080 = header.getOrDefault("X-Amz-Algorithm")
  valid_597080 = validateParameter(valid_597080, JString, required = false,
                                 default = nil)
  if valid_597080 != nil:
    section.add "X-Amz-Algorithm", valid_597080
  var valid_597081 = header.getOrDefault("X-Amz-Signature")
  valid_597081 = validateParameter(valid_597081, JString, required = false,
                                 default = nil)
  if valid_597081 != nil:
    section.add "X-Amz-Signature", valid_597081
  var valid_597082 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597082 = validateParameter(valid_597082, JString, required = false,
                                 default = nil)
  if valid_597082 != nil:
    section.add "X-Amz-SignedHeaders", valid_597082
  var valid_597083 = header.getOrDefault("X-Amz-Credential")
  valid_597083 = validateParameter(valid_597083, JString, required = false,
                                 default = nil)
  if valid_597083 != nil:
    section.add "X-Amz-Credential", valid_597083
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597084: Call_GetListInstanceProfilesForRole_597069; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597084.validator(path, query, header, formData, body)
  let scheme = call_597084.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597084.url(scheme.get, call_597084.host, call_597084.base,
                         call_597084.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597084, url, valid)

proc call*(call_597085: Call_GetListInstanceProfilesForRole_597069;
          RoleName: string; Action: string = "ListInstanceProfilesForRole";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_597086 = newJObject()
  add(query_597086, "Action", newJString(Action))
  add(query_597086, "Marker", newJString(Marker))
  add(query_597086, "MaxItems", newJInt(MaxItems))
  add(query_597086, "RoleName", newJString(RoleName))
  add(query_597086, "Version", newJString(Version))
  result = call_597085.call(nil, query_597086, nil, nil, nil)

var getListInstanceProfilesForRole* = Call_GetListInstanceProfilesForRole_597069(
    name: "getListInstanceProfilesForRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_GetListInstanceProfilesForRole_597070, base: "/",
    url: url_GetListInstanceProfilesForRole_597071,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListMFADevices_597124 = ref object of OpenApiRestCall_593437
proc url_PostListMFADevices_597126(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListMFADevices_597125(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597127 = query.getOrDefault("Action")
  valid_597127 = validateParameter(valid_597127, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_597127 != nil:
    section.add "Action", valid_597127
  var valid_597128 = query.getOrDefault("Version")
  valid_597128 = validateParameter(valid_597128, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597128 != nil:
    section.add "Version", valid_597128
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597129 = header.getOrDefault("X-Amz-Date")
  valid_597129 = validateParameter(valid_597129, JString, required = false,
                                 default = nil)
  if valid_597129 != nil:
    section.add "X-Amz-Date", valid_597129
  var valid_597130 = header.getOrDefault("X-Amz-Security-Token")
  valid_597130 = validateParameter(valid_597130, JString, required = false,
                                 default = nil)
  if valid_597130 != nil:
    section.add "X-Amz-Security-Token", valid_597130
  var valid_597131 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597131 = validateParameter(valid_597131, JString, required = false,
                                 default = nil)
  if valid_597131 != nil:
    section.add "X-Amz-Content-Sha256", valid_597131
  var valid_597132 = header.getOrDefault("X-Amz-Algorithm")
  valid_597132 = validateParameter(valid_597132, JString, required = false,
                                 default = nil)
  if valid_597132 != nil:
    section.add "X-Amz-Algorithm", valid_597132
  var valid_597133 = header.getOrDefault("X-Amz-Signature")
  valid_597133 = validateParameter(valid_597133, JString, required = false,
                                 default = nil)
  if valid_597133 != nil:
    section.add "X-Amz-Signature", valid_597133
  var valid_597134 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597134 = validateParameter(valid_597134, JString, required = false,
                                 default = nil)
  if valid_597134 != nil:
    section.add "X-Amz-SignedHeaders", valid_597134
  var valid_597135 = header.getOrDefault("X-Amz-Credential")
  valid_597135 = validateParameter(valid_597135, JString, required = false,
                                 default = nil)
  if valid_597135 != nil:
    section.add "X-Amz-Credential", valid_597135
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_597136 = formData.getOrDefault("UserName")
  valid_597136 = validateParameter(valid_597136, JString, required = false,
                                 default = nil)
  if valid_597136 != nil:
    section.add "UserName", valid_597136
  var valid_597137 = formData.getOrDefault("Marker")
  valid_597137 = validateParameter(valid_597137, JString, required = false,
                                 default = nil)
  if valid_597137 != nil:
    section.add "Marker", valid_597137
  var valid_597138 = formData.getOrDefault("MaxItems")
  valid_597138 = validateParameter(valid_597138, JInt, required = false, default = nil)
  if valid_597138 != nil:
    section.add "MaxItems", valid_597138
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597139: Call_PostListMFADevices_597124; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597139.validator(path, query, header, formData, body)
  let scheme = call_597139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597139.url(scheme.get, call_597139.host, call_597139.base,
                         call_597139.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597139, url, valid)

proc call*(call_597140: Call_PostListMFADevices_597124; UserName: string = "";
          Marker: string = ""; Action: string = "ListMFADevices"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597141 = newJObject()
  var formData_597142 = newJObject()
  add(formData_597142, "UserName", newJString(UserName))
  add(formData_597142, "Marker", newJString(Marker))
  add(query_597141, "Action", newJString(Action))
  add(formData_597142, "MaxItems", newJInt(MaxItems))
  add(query_597141, "Version", newJString(Version))
  result = call_597140.call(nil, query_597141, nil, formData_597142, nil)

var postListMFADevices* = Call_PostListMFADevices_597124(
    name: "postListMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListMFADevices",
    validator: validate_PostListMFADevices_597125, base: "/",
    url: url_PostListMFADevices_597126, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListMFADevices_597106 = ref object of OpenApiRestCall_593437
proc url_GetListMFADevices_597108(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListMFADevices_597107(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_597109 = query.getOrDefault("UserName")
  valid_597109 = validateParameter(valid_597109, JString, required = false,
                                 default = nil)
  if valid_597109 != nil:
    section.add "UserName", valid_597109
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597110 = query.getOrDefault("Action")
  valid_597110 = validateParameter(valid_597110, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_597110 != nil:
    section.add "Action", valid_597110
  var valid_597111 = query.getOrDefault("Marker")
  valid_597111 = validateParameter(valid_597111, JString, required = false,
                                 default = nil)
  if valid_597111 != nil:
    section.add "Marker", valid_597111
  var valid_597112 = query.getOrDefault("MaxItems")
  valid_597112 = validateParameter(valid_597112, JInt, required = false, default = nil)
  if valid_597112 != nil:
    section.add "MaxItems", valid_597112
  var valid_597113 = query.getOrDefault("Version")
  valid_597113 = validateParameter(valid_597113, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597113 != nil:
    section.add "Version", valid_597113
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597114 = header.getOrDefault("X-Amz-Date")
  valid_597114 = validateParameter(valid_597114, JString, required = false,
                                 default = nil)
  if valid_597114 != nil:
    section.add "X-Amz-Date", valid_597114
  var valid_597115 = header.getOrDefault("X-Amz-Security-Token")
  valid_597115 = validateParameter(valid_597115, JString, required = false,
                                 default = nil)
  if valid_597115 != nil:
    section.add "X-Amz-Security-Token", valid_597115
  var valid_597116 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597116 = validateParameter(valid_597116, JString, required = false,
                                 default = nil)
  if valid_597116 != nil:
    section.add "X-Amz-Content-Sha256", valid_597116
  var valid_597117 = header.getOrDefault("X-Amz-Algorithm")
  valid_597117 = validateParameter(valid_597117, JString, required = false,
                                 default = nil)
  if valid_597117 != nil:
    section.add "X-Amz-Algorithm", valid_597117
  var valid_597118 = header.getOrDefault("X-Amz-Signature")
  valid_597118 = validateParameter(valid_597118, JString, required = false,
                                 default = nil)
  if valid_597118 != nil:
    section.add "X-Amz-Signature", valid_597118
  var valid_597119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597119 = validateParameter(valid_597119, JString, required = false,
                                 default = nil)
  if valid_597119 != nil:
    section.add "X-Amz-SignedHeaders", valid_597119
  var valid_597120 = header.getOrDefault("X-Amz-Credential")
  valid_597120 = validateParameter(valid_597120, JString, required = false,
                                 default = nil)
  if valid_597120 != nil:
    section.add "X-Amz-Credential", valid_597120
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597121: Call_GetListMFADevices_597106; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597121.validator(path, query, header, formData, body)
  let scheme = call_597121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597121.url(scheme.get, call_597121.host, call_597121.base,
                         call_597121.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597121, url, valid)

proc call*(call_597122: Call_GetListMFADevices_597106; UserName: string = "";
          Action: string = "ListMFADevices"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597123 = newJObject()
  add(query_597123, "UserName", newJString(UserName))
  add(query_597123, "Action", newJString(Action))
  add(query_597123, "Marker", newJString(Marker))
  add(query_597123, "MaxItems", newJInt(MaxItems))
  add(query_597123, "Version", newJString(Version))
  result = call_597122.call(nil, query_597123, nil, nil, nil)

var getListMFADevices* = Call_GetListMFADevices_597106(name: "getListMFADevices",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListMFADevices", validator: validate_GetListMFADevices_597107,
    base: "/", url: url_GetListMFADevices_597108,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListOpenIDConnectProviders_597158 = ref object of OpenApiRestCall_593437
proc url_PostListOpenIDConnectProviders_597160(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListOpenIDConnectProviders_597159(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597161 = query.getOrDefault("Action")
  valid_597161 = validateParameter(valid_597161, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_597161 != nil:
    section.add "Action", valid_597161
  var valid_597162 = query.getOrDefault("Version")
  valid_597162 = validateParameter(valid_597162, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597162 != nil:
    section.add "Version", valid_597162
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597163 = header.getOrDefault("X-Amz-Date")
  valid_597163 = validateParameter(valid_597163, JString, required = false,
                                 default = nil)
  if valid_597163 != nil:
    section.add "X-Amz-Date", valid_597163
  var valid_597164 = header.getOrDefault("X-Amz-Security-Token")
  valid_597164 = validateParameter(valid_597164, JString, required = false,
                                 default = nil)
  if valid_597164 != nil:
    section.add "X-Amz-Security-Token", valid_597164
  var valid_597165 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597165 = validateParameter(valid_597165, JString, required = false,
                                 default = nil)
  if valid_597165 != nil:
    section.add "X-Amz-Content-Sha256", valid_597165
  var valid_597166 = header.getOrDefault("X-Amz-Algorithm")
  valid_597166 = validateParameter(valid_597166, JString, required = false,
                                 default = nil)
  if valid_597166 != nil:
    section.add "X-Amz-Algorithm", valid_597166
  var valid_597167 = header.getOrDefault("X-Amz-Signature")
  valid_597167 = validateParameter(valid_597167, JString, required = false,
                                 default = nil)
  if valid_597167 != nil:
    section.add "X-Amz-Signature", valid_597167
  var valid_597168 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597168 = validateParameter(valid_597168, JString, required = false,
                                 default = nil)
  if valid_597168 != nil:
    section.add "X-Amz-SignedHeaders", valid_597168
  var valid_597169 = header.getOrDefault("X-Amz-Credential")
  valid_597169 = validateParameter(valid_597169, JString, required = false,
                                 default = nil)
  if valid_597169 != nil:
    section.add "X-Amz-Credential", valid_597169
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597170: Call_PostListOpenIDConnectProviders_597158; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_597170.validator(path, query, header, formData, body)
  let scheme = call_597170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597170.url(scheme.get, call_597170.host, call_597170.base,
                         call_597170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597170, url, valid)

proc call*(call_597171: Call_PostListOpenIDConnectProviders_597158;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## postListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597172 = newJObject()
  add(query_597172, "Action", newJString(Action))
  add(query_597172, "Version", newJString(Version))
  result = call_597171.call(nil, query_597172, nil, nil, nil)

var postListOpenIDConnectProviders* = Call_PostListOpenIDConnectProviders_597158(
    name: "postListOpenIDConnectProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_PostListOpenIDConnectProviders_597159, base: "/",
    url: url_PostListOpenIDConnectProviders_597160,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListOpenIDConnectProviders_597143 = ref object of OpenApiRestCall_593437
proc url_GetListOpenIDConnectProviders_597145(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListOpenIDConnectProviders_597144(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597146 = query.getOrDefault("Action")
  valid_597146 = validateParameter(valid_597146, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_597146 != nil:
    section.add "Action", valid_597146
  var valid_597147 = query.getOrDefault("Version")
  valid_597147 = validateParameter(valid_597147, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597147 != nil:
    section.add "Version", valid_597147
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597148 = header.getOrDefault("X-Amz-Date")
  valid_597148 = validateParameter(valid_597148, JString, required = false,
                                 default = nil)
  if valid_597148 != nil:
    section.add "X-Amz-Date", valid_597148
  var valid_597149 = header.getOrDefault("X-Amz-Security-Token")
  valid_597149 = validateParameter(valid_597149, JString, required = false,
                                 default = nil)
  if valid_597149 != nil:
    section.add "X-Amz-Security-Token", valid_597149
  var valid_597150 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597150 = validateParameter(valid_597150, JString, required = false,
                                 default = nil)
  if valid_597150 != nil:
    section.add "X-Amz-Content-Sha256", valid_597150
  var valid_597151 = header.getOrDefault("X-Amz-Algorithm")
  valid_597151 = validateParameter(valid_597151, JString, required = false,
                                 default = nil)
  if valid_597151 != nil:
    section.add "X-Amz-Algorithm", valid_597151
  var valid_597152 = header.getOrDefault("X-Amz-Signature")
  valid_597152 = validateParameter(valid_597152, JString, required = false,
                                 default = nil)
  if valid_597152 != nil:
    section.add "X-Amz-Signature", valid_597152
  var valid_597153 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597153 = validateParameter(valid_597153, JString, required = false,
                                 default = nil)
  if valid_597153 != nil:
    section.add "X-Amz-SignedHeaders", valid_597153
  var valid_597154 = header.getOrDefault("X-Amz-Credential")
  valid_597154 = validateParameter(valid_597154, JString, required = false,
                                 default = nil)
  if valid_597154 != nil:
    section.add "X-Amz-Credential", valid_597154
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597155: Call_GetListOpenIDConnectProviders_597143; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_597155.validator(path, query, header, formData, body)
  let scheme = call_597155.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597155.url(scheme.get, call_597155.host, call_597155.base,
                         call_597155.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597155, url, valid)

proc call*(call_597156: Call_GetListOpenIDConnectProviders_597143;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## getListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597157 = newJObject()
  add(query_597157, "Action", newJString(Action))
  add(query_597157, "Version", newJString(Version))
  result = call_597156.call(nil, query_597157, nil, nil, nil)

var getListOpenIDConnectProviders* = Call_GetListOpenIDConnectProviders_597143(
    name: "getListOpenIDConnectProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_GetListOpenIDConnectProviders_597144, base: "/",
    url: url_GetListOpenIDConnectProviders_597145,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicies_597194 = ref object of OpenApiRestCall_593437
proc url_PostListPolicies_597196(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListPolicies_597195(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597197 = query.getOrDefault("Action")
  valid_597197 = validateParameter(valid_597197, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_597197 != nil:
    section.add "Action", valid_597197
  var valid_597198 = query.getOrDefault("Version")
  valid_597198 = validateParameter(valid_597198, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597198 != nil:
    section.add "Version", valid_597198
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597199 = header.getOrDefault("X-Amz-Date")
  valid_597199 = validateParameter(valid_597199, JString, required = false,
                                 default = nil)
  if valid_597199 != nil:
    section.add "X-Amz-Date", valid_597199
  var valid_597200 = header.getOrDefault("X-Amz-Security-Token")
  valid_597200 = validateParameter(valid_597200, JString, required = false,
                                 default = nil)
  if valid_597200 != nil:
    section.add "X-Amz-Security-Token", valid_597200
  var valid_597201 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597201 = validateParameter(valid_597201, JString, required = false,
                                 default = nil)
  if valid_597201 != nil:
    section.add "X-Amz-Content-Sha256", valid_597201
  var valid_597202 = header.getOrDefault("X-Amz-Algorithm")
  valid_597202 = validateParameter(valid_597202, JString, required = false,
                                 default = nil)
  if valid_597202 != nil:
    section.add "X-Amz-Algorithm", valid_597202
  var valid_597203 = header.getOrDefault("X-Amz-Signature")
  valid_597203 = validateParameter(valid_597203, JString, required = false,
                                 default = nil)
  if valid_597203 != nil:
    section.add "X-Amz-Signature", valid_597203
  var valid_597204 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597204 = validateParameter(valid_597204, JString, required = false,
                                 default = nil)
  if valid_597204 != nil:
    section.add "X-Amz-SignedHeaders", valid_597204
  var valid_597205 = header.getOrDefault("X-Amz-Credential")
  valid_597205 = validateParameter(valid_597205, JString, required = false,
                                 default = nil)
  if valid_597205 != nil:
    section.add "X-Amz-Credential", valid_597205
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_597206 = formData.getOrDefault("PathPrefix")
  valid_597206 = validateParameter(valid_597206, JString, required = false,
                                 default = nil)
  if valid_597206 != nil:
    section.add "PathPrefix", valid_597206
  var valid_597207 = formData.getOrDefault("Marker")
  valid_597207 = validateParameter(valid_597207, JString, required = false,
                                 default = nil)
  if valid_597207 != nil:
    section.add "Marker", valid_597207
  var valid_597208 = formData.getOrDefault("PolicyUsageFilter")
  valid_597208 = validateParameter(valid_597208, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_597208 != nil:
    section.add "PolicyUsageFilter", valid_597208
  var valid_597209 = formData.getOrDefault("Scope")
  valid_597209 = validateParameter(valid_597209, JString, required = false,
                                 default = newJString("All"))
  if valid_597209 != nil:
    section.add "Scope", valid_597209
  var valid_597210 = formData.getOrDefault("OnlyAttached")
  valid_597210 = validateParameter(valid_597210, JBool, required = false, default = nil)
  if valid_597210 != nil:
    section.add "OnlyAttached", valid_597210
  var valid_597211 = formData.getOrDefault("MaxItems")
  valid_597211 = validateParameter(valid_597211, JInt, required = false, default = nil)
  if valid_597211 != nil:
    section.add "MaxItems", valid_597211
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597212: Call_PostListPolicies_597194; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_597212.validator(path, query, header, formData, body)
  let scheme = call_597212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597212.url(scheme.get, call_597212.host, call_597212.base,
                         call_597212.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597212, url, valid)

proc call*(call_597213: Call_PostListPolicies_597194; PathPrefix: string = "";
          Marker: string = ""; PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListPolicies"; Scope: string = "All";
          OnlyAttached: bool = false; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597214 = newJObject()
  var formData_597215 = newJObject()
  add(formData_597215, "PathPrefix", newJString(PathPrefix))
  add(formData_597215, "Marker", newJString(Marker))
  add(formData_597215, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_597214, "Action", newJString(Action))
  add(formData_597215, "Scope", newJString(Scope))
  add(formData_597215, "OnlyAttached", newJBool(OnlyAttached))
  add(formData_597215, "MaxItems", newJInt(MaxItems))
  add(query_597214, "Version", newJString(Version))
  result = call_597213.call(nil, query_597214, nil, formData_597215, nil)

var postListPolicies* = Call_PostListPolicies_597194(name: "postListPolicies",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_PostListPolicies_597195,
    base: "/", url: url_PostListPolicies_597196,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicies_597173 = ref object of OpenApiRestCall_593437
proc url_GetListPolicies_597175(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListPolicies_597174(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_597176 = query.getOrDefault("PathPrefix")
  valid_597176 = validateParameter(valid_597176, JString, required = false,
                                 default = nil)
  if valid_597176 != nil:
    section.add "PathPrefix", valid_597176
  var valid_597177 = query.getOrDefault("PolicyUsageFilter")
  valid_597177 = validateParameter(valid_597177, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_597177 != nil:
    section.add "PolicyUsageFilter", valid_597177
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597178 = query.getOrDefault("Action")
  valid_597178 = validateParameter(valid_597178, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_597178 != nil:
    section.add "Action", valid_597178
  var valid_597179 = query.getOrDefault("Marker")
  valid_597179 = validateParameter(valid_597179, JString, required = false,
                                 default = nil)
  if valid_597179 != nil:
    section.add "Marker", valid_597179
  var valid_597180 = query.getOrDefault("Scope")
  valid_597180 = validateParameter(valid_597180, JString, required = false,
                                 default = newJString("All"))
  if valid_597180 != nil:
    section.add "Scope", valid_597180
  var valid_597181 = query.getOrDefault("MaxItems")
  valid_597181 = validateParameter(valid_597181, JInt, required = false, default = nil)
  if valid_597181 != nil:
    section.add "MaxItems", valid_597181
  var valid_597182 = query.getOrDefault("OnlyAttached")
  valid_597182 = validateParameter(valid_597182, JBool, required = false, default = nil)
  if valid_597182 != nil:
    section.add "OnlyAttached", valid_597182
  var valid_597183 = query.getOrDefault("Version")
  valid_597183 = validateParameter(valid_597183, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597183 != nil:
    section.add "Version", valid_597183
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597184 = header.getOrDefault("X-Amz-Date")
  valid_597184 = validateParameter(valid_597184, JString, required = false,
                                 default = nil)
  if valid_597184 != nil:
    section.add "X-Amz-Date", valid_597184
  var valid_597185 = header.getOrDefault("X-Amz-Security-Token")
  valid_597185 = validateParameter(valid_597185, JString, required = false,
                                 default = nil)
  if valid_597185 != nil:
    section.add "X-Amz-Security-Token", valid_597185
  var valid_597186 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597186 = validateParameter(valid_597186, JString, required = false,
                                 default = nil)
  if valid_597186 != nil:
    section.add "X-Amz-Content-Sha256", valid_597186
  var valid_597187 = header.getOrDefault("X-Amz-Algorithm")
  valid_597187 = validateParameter(valid_597187, JString, required = false,
                                 default = nil)
  if valid_597187 != nil:
    section.add "X-Amz-Algorithm", valid_597187
  var valid_597188 = header.getOrDefault("X-Amz-Signature")
  valid_597188 = validateParameter(valid_597188, JString, required = false,
                                 default = nil)
  if valid_597188 != nil:
    section.add "X-Amz-Signature", valid_597188
  var valid_597189 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597189 = validateParameter(valid_597189, JString, required = false,
                                 default = nil)
  if valid_597189 != nil:
    section.add "X-Amz-SignedHeaders", valid_597189
  var valid_597190 = header.getOrDefault("X-Amz-Credential")
  valid_597190 = validateParameter(valid_597190, JString, required = false,
                                 default = nil)
  if valid_597190 != nil:
    section.add "X-Amz-Credential", valid_597190
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597191: Call_GetListPolicies_597173; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_597191.validator(path, query, header, formData, body)
  let scheme = call_597191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597191.url(scheme.get, call_597191.host, call_597191.base,
                         call_597191.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597191, url, valid)

proc call*(call_597192: Call_GetListPolicies_597173; PathPrefix: string = "";
          PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListPolicies"; Marker: string = ""; Scope: string = "All";
          MaxItems: int = 0; OnlyAttached: bool = false; Version: string = "2010-05-08"): Recallable =
  ## getListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   Version: string (required)
  var query_597193 = newJObject()
  add(query_597193, "PathPrefix", newJString(PathPrefix))
  add(query_597193, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_597193, "Action", newJString(Action))
  add(query_597193, "Marker", newJString(Marker))
  add(query_597193, "Scope", newJString(Scope))
  add(query_597193, "MaxItems", newJInt(MaxItems))
  add(query_597193, "OnlyAttached", newJBool(OnlyAttached))
  add(query_597193, "Version", newJString(Version))
  result = call_597192.call(nil, query_597193, nil, nil, nil)

var getListPolicies* = Call_GetListPolicies_597173(name: "getListPolicies",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_GetListPolicies_597174,
    base: "/", url: url_GetListPolicies_597175, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPoliciesGrantingServiceAccess_597234 = ref object of OpenApiRestCall_593437
proc url_PostListPoliciesGrantingServiceAccess_597236(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListPoliciesGrantingServiceAccess_597235(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597237 = query.getOrDefault("Action")
  valid_597237 = validateParameter(valid_597237, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_597237 != nil:
    section.add "Action", valid_597237
  var valid_597238 = query.getOrDefault("Version")
  valid_597238 = validateParameter(valid_597238, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597238 != nil:
    section.add "Version", valid_597238
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597239 = header.getOrDefault("X-Amz-Date")
  valid_597239 = validateParameter(valid_597239, JString, required = false,
                                 default = nil)
  if valid_597239 != nil:
    section.add "X-Amz-Date", valid_597239
  var valid_597240 = header.getOrDefault("X-Amz-Security-Token")
  valid_597240 = validateParameter(valid_597240, JString, required = false,
                                 default = nil)
  if valid_597240 != nil:
    section.add "X-Amz-Security-Token", valid_597240
  var valid_597241 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597241 = validateParameter(valid_597241, JString, required = false,
                                 default = nil)
  if valid_597241 != nil:
    section.add "X-Amz-Content-Sha256", valid_597241
  var valid_597242 = header.getOrDefault("X-Amz-Algorithm")
  valid_597242 = validateParameter(valid_597242, JString, required = false,
                                 default = nil)
  if valid_597242 != nil:
    section.add "X-Amz-Algorithm", valid_597242
  var valid_597243 = header.getOrDefault("X-Amz-Signature")
  valid_597243 = validateParameter(valid_597243, JString, required = false,
                                 default = nil)
  if valid_597243 != nil:
    section.add "X-Amz-Signature", valid_597243
  var valid_597244 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597244 = validateParameter(valid_597244, JString, required = false,
                                 default = nil)
  if valid_597244 != nil:
    section.add "X-Amz-SignedHeaders", valid_597244
  var valid_597245 = header.getOrDefault("X-Amz-Credential")
  valid_597245 = validateParameter(valid_597245, JString, required = false,
                                 default = nil)
  if valid_597245 != nil:
    section.add "X-Amz-Credential", valid_597245
  result.add "header", section
  ## parameters in `formData` object:
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Arn` field"
  var valid_597246 = formData.getOrDefault("Arn")
  valid_597246 = validateParameter(valid_597246, JString, required = true,
                                 default = nil)
  if valid_597246 != nil:
    section.add "Arn", valid_597246
  var valid_597247 = formData.getOrDefault("Marker")
  valid_597247 = validateParameter(valid_597247, JString, required = false,
                                 default = nil)
  if valid_597247 != nil:
    section.add "Marker", valid_597247
  var valid_597248 = formData.getOrDefault("ServiceNamespaces")
  valid_597248 = validateParameter(valid_597248, JArray, required = true, default = nil)
  if valid_597248 != nil:
    section.add "ServiceNamespaces", valid_597248
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597249: Call_PostListPoliciesGrantingServiceAccess_597234;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_597249.validator(path, query, header, formData, body)
  let scheme = call_597249.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597249.url(scheme.get, call_597249.host, call_597249.base,
                         call_597249.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597249, url, valid)

proc call*(call_597250: Call_PostListPoliciesGrantingServiceAccess_597234;
          Arn: string; ServiceNamespaces: JsonNode; Marker: string = "";
          Action: string = "ListPoliciesGrantingServiceAccess";
          Version: string = "2010-05-08"): Recallable =
  ## postListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597251 = newJObject()
  var formData_597252 = newJObject()
  add(formData_597252, "Arn", newJString(Arn))
  add(formData_597252, "Marker", newJString(Marker))
  if ServiceNamespaces != nil:
    formData_597252.add "ServiceNamespaces", ServiceNamespaces
  add(query_597251, "Action", newJString(Action))
  add(query_597251, "Version", newJString(Version))
  result = call_597250.call(nil, query_597251, nil, formData_597252, nil)

var postListPoliciesGrantingServiceAccess* = Call_PostListPoliciesGrantingServiceAccess_597234(
    name: "postListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_PostListPoliciesGrantingServiceAccess_597235, base: "/",
    url: url_PostListPoliciesGrantingServiceAccess_597236,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPoliciesGrantingServiceAccess_597216 = ref object of OpenApiRestCall_593437
proc url_GetListPoliciesGrantingServiceAccess_597218(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListPoliciesGrantingServiceAccess_597217(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceNamespaces` field"
  var valid_597219 = query.getOrDefault("ServiceNamespaces")
  valid_597219 = validateParameter(valid_597219, JArray, required = true, default = nil)
  if valid_597219 != nil:
    section.add "ServiceNamespaces", valid_597219
  var valid_597220 = query.getOrDefault("Action")
  valid_597220 = validateParameter(valid_597220, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_597220 != nil:
    section.add "Action", valid_597220
  var valid_597221 = query.getOrDefault("Marker")
  valid_597221 = validateParameter(valid_597221, JString, required = false,
                                 default = nil)
  if valid_597221 != nil:
    section.add "Marker", valid_597221
  var valid_597222 = query.getOrDefault("Arn")
  valid_597222 = validateParameter(valid_597222, JString, required = true,
                                 default = nil)
  if valid_597222 != nil:
    section.add "Arn", valid_597222
  var valid_597223 = query.getOrDefault("Version")
  valid_597223 = validateParameter(valid_597223, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597223 != nil:
    section.add "Version", valid_597223
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597224 = header.getOrDefault("X-Amz-Date")
  valid_597224 = validateParameter(valid_597224, JString, required = false,
                                 default = nil)
  if valid_597224 != nil:
    section.add "X-Amz-Date", valid_597224
  var valid_597225 = header.getOrDefault("X-Amz-Security-Token")
  valid_597225 = validateParameter(valid_597225, JString, required = false,
                                 default = nil)
  if valid_597225 != nil:
    section.add "X-Amz-Security-Token", valid_597225
  var valid_597226 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597226 = validateParameter(valid_597226, JString, required = false,
                                 default = nil)
  if valid_597226 != nil:
    section.add "X-Amz-Content-Sha256", valid_597226
  var valid_597227 = header.getOrDefault("X-Amz-Algorithm")
  valid_597227 = validateParameter(valid_597227, JString, required = false,
                                 default = nil)
  if valid_597227 != nil:
    section.add "X-Amz-Algorithm", valid_597227
  var valid_597228 = header.getOrDefault("X-Amz-Signature")
  valid_597228 = validateParameter(valid_597228, JString, required = false,
                                 default = nil)
  if valid_597228 != nil:
    section.add "X-Amz-Signature", valid_597228
  var valid_597229 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597229 = validateParameter(valid_597229, JString, required = false,
                                 default = nil)
  if valid_597229 != nil:
    section.add "X-Amz-SignedHeaders", valid_597229
  var valid_597230 = header.getOrDefault("X-Amz-Credential")
  valid_597230 = validateParameter(valid_597230, JString, required = false,
                                 default = nil)
  if valid_597230 != nil:
    section.add "X-Amz-Credential", valid_597230
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597231: Call_GetListPoliciesGrantingServiceAccess_597216;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_597231.validator(path, query, header, formData, body)
  let scheme = call_597231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597231.url(scheme.get, call_597231.host, call_597231.base,
                         call_597231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597231, url, valid)

proc call*(call_597232: Call_GetListPoliciesGrantingServiceAccess_597216;
          ServiceNamespaces: JsonNode; Arn: string;
          Action: string = "ListPoliciesGrantingServiceAccess"; Marker: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_597233 = newJObject()
  if ServiceNamespaces != nil:
    query_597233.add "ServiceNamespaces", ServiceNamespaces
  add(query_597233, "Action", newJString(Action))
  add(query_597233, "Marker", newJString(Marker))
  add(query_597233, "Arn", newJString(Arn))
  add(query_597233, "Version", newJString(Version))
  result = call_597232.call(nil, query_597233, nil, nil, nil)

var getListPoliciesGrantingServiceAccess* = Call_GetListPoliciesGrantingServiceAccess_597216(
    name: "getListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_GetListPoliciesGrantingServiceAccess_597217, base: "/",
    url: url_GetListPoliciesGrantingServiceAccess_597218,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicyVersions_597271 = ref object of OpenApiRestCall_593437
proc url_PostListPolicyVersions_597273(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListPolicyVersions_597272(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597274 = query.getOrDefault("Action")
  valid_597274 = validateParameter(valid_597274, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_597274 != nil:
    section.add "Action", valid_597274
  var valid_597275 = query.getOrDefault("Version")
  valid_597275 = validateParameter(valid_597275, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597275 != nil:
    section.add "Version", valid_597275
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597276 = header.getOrDefault("X-Amz-Date")
  valid_597276 = validateParameter(valid_597276, JString, required = false,
                                 default = nil)
  if valid_597276 != nil:
    section.add "X-Amz-Date", valid_597276
  var valid_597277 = header.getOrDefault("X-Amz-Security-Token")
  valid_597277 = validateParameter(valid_597277, JString, required = false,
                                 default = nil)
  if valid_597277 != nil:
    section.add "X-Amz-Security-Token", valid_597277
  var valid_597278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597278 = validateParameter(valid_597278, JString, required = false,
                                 default = nil)
  if valid_597278 != nil:
    section.add "X-Amz-Content-Sha256", valid_597278
  var valid_597279 = header.getOrDefault("X-Amz-Algorithm")
  valid_597279 = validateParameter(valid_597279, JString, required = false,
                                 default = nil)
  if valid_597279 != nil:
    section.add "X-Amz-Algorithm", valid_597279
  var valid_597280 = header.getOrDefault("X-Amz-Signature")
  valid_597280 = validateParameter(valid_597280, JString, required = false,
                                 default = nil)
  if valid_597280 != nil:
    section.add "X-Amz-Signature", valid_597280
  var valid_597281 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597281 = validateParameter(valid_597281, JString, required = false,
                                 default = nil)
  if valid_597281 != nil:
    section.add "X-Amz-SignedHeaders", valid_597281
  var valid_597282 = header.getOrDefault("X-Amz-Credential")
  valid_597282 = validateParameter(valid_597282, JString, required = false,
                                 default = nil)
  if valid_597282 != nil:
    section.add "X-Amz-Credential", valid_597282
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_597283 = formData.getOrDefault("PolicyArn")
  valid_597283 = validateParameter(valid_597283, JString, required = true,
                                 default = nil)
  if valid_597283 != nil:
    section.add "PolicyArn", valid_597283
  var valid_597284 = formData.getOrDefault("Marker")
  valid_597284 = validateParameter(valid_597284, JString, required = false,
                                 default = nil)
  if valid_597284 != nil:
    section.add "Marker", valid_597284
  var valid_597285 = formData.getOrDefault("MaxItems")
  valid_597285 = validateParameter(valid_597285, JInt, required = false, default = nil)
  if valid_597285 != nil:
    section.add "MaxItems", valid_597285
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597286: Call_PostListPolicyVersions_597271; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_597286.validator(path, query, header, formData, body)
  let scheme = call_597286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597286.url(scheme.get, call_597286.host, call_597286.base,
                         call_597286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597286, url, valid)

proc call*(call_597287: Call_PostListPolicyVersions_597271; PolicyArn: string;
          Marker: string = ""; Action: string = "ListPolicyVersions"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597288 = newJObject()
  var formData_597289 = newJObject()
  add(formData_597289, "PolicyArn", newJString(PolicyArn))
  add(formData_597289, "Marker", newJString(Marker))
  add(query_597288, "Action", newJString(Action))
  add(formData_597289, "MaxItems", newJInt(MaxItems))
  add(query_597288, "Version", newJString(Version))
  result = call_597287.call(nil, query_597288, nil, formData_597289, nil)

var postListPolicyVersions* = Call_PostListPolicyVersions_597271(
    name: "postListPolicyVersions", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_PostListPolicyVersions_597272, base: "/",
    url: url_PostListPolicyVersions_597273, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicyVersions_597253 = ref object of OpenApiRestCall_593437
proc url_GetListPolicyVersions_597255(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListPolicyVersions_597254(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_597256 = query.getOrDefault("PolicyArn")
  valid_597256 = validateParameter(valid_597256, JString, required = true,
                                 default = nil)
  if valid_597256 != nil:
    section.add "PolicyArn", valid_597256
  var valid_597257 = query.getOrDefault("Action")
  valid_597257 = validateParameter(valid_597257, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_597257 != nil:
    section.add "Action", valid_597257
  var valid_597258 = query.getOrDefault("Marker")
  valid_597258 = validateParameter(valid_597258, JString, required = false,
                                 default = nil)
  if valid_597258 != nil:
    section.add "Marker", valid_597258
  var valid_597259 = query.getOrDefault("MaxItems")
  valid_597259 = validateParameter(valid_597259, JInt, required = false, default = nil)
  if valid_597259 != nil:
    section.add "MaxItems", valid_597259
  var valid_597260 = query.getOrDefault("Version")
  valid_597260 = validateParameter(valid_597260, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597260 != nil:
    section.add "Version", valid_597260
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597261 = header.getOrDefault("X-Amz-Date")
  valid_597261 = validateParameter(valid_597261, JString, required = false,
                                 default = nil)
  if valid_597261 != nil:
    section.add "X-Amz-Date", valid_597261
  var valid_597262 = header.getOrDefault("X-Amz-Security-Token")
  valid_597262 = validateParameter(valid_597262, JString, required = false,
                                 default = nil)
  if valid_597262 != nil:
    section.add "X-Amz-Security-Token", valid_597262
  var valid_597263 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597263 = validateParameter(valid_597263, JString, required = false,
                                 default = nil)
  if valid_597263 != nil:
    section.add "X-Amz-Content-Sha256", valid_597263
  var valid_597264 = header.getOrDefault("X-Amz-Algorithm")
  valid_597264 = validateParameter(valid_597264, JString, required = false,
                                 default = nil)
  if valid_597264 != nil:
    section.add "X-Amz-Algorithm", valid_597264
  var valid_597265 = header.getOrDefault("X-Amz-Signature")
  valid_597265 = validateParameter(valid_597265, JString, required = false,
                                 default = nil)
  if valid_597265 != nil:
    section.add "X-Amz-Signature", valid_597265
  var valid_597266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597266 = validateParameter(valid_597266, JString, required = false,
                                 default = nil)
  if valid_597266 != nil:
    section.add "X-Amz-SignedHeaders", valid_597266
  var valid_597267 = header.getOrDefault("X-Amz-Credential")
  valid_597267 = validateParameter(valid_597267, JString, required = false,
                                 default = nil)
  if valid_597267 != nil:
    section.add "X-Amz-Credential", valid_597267
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597268: Call_GetListPolicyVersions_597253; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_597268.validator(path, query, header, formData, body)
  let scheme = call_597268.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597268.url(scheme.get, call_597268.host, call_597268.base,
                         call_597268.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597268, url, valid)

proc call*(call_597269: Call_GetListPolicyVersions_597253; PolicyArn: string;
          Action: string = "ListPolicyVersions"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597270 = newJObject()
  add(query_597270, "PolicyArn", newJString(PolicyArn))
  add(query_597270, "Action", newJString(Action))
  add(query_597270, "Marker", newJString(Marker))
  add(query_597270, "MaxItems", newJInt(MaxItems))
  add(query_597270, "Version", newJString(Version))
  result = call_597269.call(nil, query_597270, nil, nil, nil)

var getListPolicyVersions* = Call_GetListPolicyVersions_597253(
    name: "getListPolicyVersions", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_GetListPolicyVersions_597254, base: "/",
    url: url_GetListPolicyVersions_597255, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRolePolicies_597308 = ref object of OpenApiRestCall_593437
proc url_PostListRolePolicies_597310(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListRolePolicies_597309(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597311 = query.getOrDefault("Action")
  valid_597311 = validateParameter(valid_597311, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_597311 != nil:
    section.add "Action", valid_597311
  var valid_597312 = query.getOrDefault("Version")
  valid_597312 = validateParameter(valid_597312, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597312 != nil:
    section.add "Version", valid_597312
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597313 = header.getOrDefault("X-Amz-Date")
  valid_597313 = validateParameter(valid_597313, JString, required = false,
                                 default = nil)
  if valid_597313 != nil:
    section.add "X-Amz-Date", valid_597313
  var valid_597314 = header.getOrDefault("X-Amz-Security-Token")
  valid_597314 = validateParameter(valid_597314, JString, required = false,
                                 default = nil)
  if valid_597314 != nil:
    section.add "X-Amz-Security-Token", valid_597314
  var valid_597315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597315 = validateParameter(valid_597315, JString, required = false,
                                 default = nil)
  if valid_597315 != nil:
    section.add "X-Amz-Content-Sha256", valid_597315
  var valid_597316 = header.getOrDefault("X-Amz-Algorithm")
  valid_597316 = validateParameter(valid_597316, JString, required = false,
                                 default = nil)
  if valid_597316 != nil:
    section.add "X-Amz-Algorithm", valid_597316
  var valid_597317 = header.getOrDefault("X-Amz-Signature")
  valid_597317 = validateParameter(valid_597317, JString, required = false,
                                 default = nil)
  if valid_597317 != nil:
    section.add "X-Amz-Signature", valid_597317
  var valid_597318 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597318 = validateParameter(valid_597318, JString, required = false,
                                 default = nil)
  if valid_597318 != nil:
    section.add "X-Amz-SignedHeaders", valid_597318
  var valid_597319 = header.getOrDefault("X-Amz-Credential")
  valid_597319 = validateParameter(valid_597319, JString, required = false,
                                 default = nil)
  if valid_597319 != nil:
    section.add "X-Amz-Credential", valid_597319
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_597320 = formData.getOrDefault("RoleName")
  valid_597320 = validateParameter(valid_597320, JString, required = true,
                                 default = nil)
  if valid_597320 != nil:
    section.add "RoleName", valid_597320
  var valid_597321 = formData.getOrDefault("Marker")
  valid_597321 = validateParameter(valid_597321, JString, required = false,
                                 default = nil)
  if valid_597321 != nil:
    section.add "Marker", valid_597321
  var valid_597322 = formData.getOrDefault("MaxItems")
  valid_597322 = validateParameter(valid_597322, JInt, required = false, default = nil)
  if valid_597322 != nil:
    section.add "MaxItems", valid_597322
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597323: Call_PostListRolePolicies_597308; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_597323.validator(path, query, header, formData, body)
  let scheme = call_597323.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597323.url(scheme.get, call_597323.host, call_597323.base,
                         call_597323.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597323, url, valid)

proc call*(call_597324: Call_PostListRolePolicies_597308; RoleName: string;
          Marker: string = ""; Action: string = "ListRolePolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597325 = newJObject()
  var formData_597326 = newJObject()
  add(formData_597326, "RoleName", newJString(RoleName))
  add(formData_597326, "Marker", newJString(Marker))
  add(query_597325, "Action", newJString(Action))
  add(formData_597326, "MaxItems", newJInt(MaxItems))
  add(query_597325, "Version", newJString(Version))
  result = call_597324.call(nil, query_597325, nil, formData_597326, nil)

var postListRolePolicies* = Call_PostListRolePolicies_597308(
    name: "postListRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_PostListRolePolicies_597309, base: "/",
    url: url_PostListRolePolicies_597310, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRolePolicies_597290 = ref object of OpenApiRestCall_593437
proc url_GetListRolePolicies_597292(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListRolePolicies_597291(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597293 = query.getOrDefault("Action")
  valid_597293 = validateParameter(valid_597293, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_597293 != nil:
    section.add "Action", valid_597293
  var valid_597294 = query.getOrDefault("Marker")
  valid_597294 = validateParameter(valid_597294, JString, required = false,
                                 default = nil)
  if valid_597294 != nil:
    section.add "Marker", valid_597294
  var valid_597295 = query.getOrDefault("MaxItems")
  valid_597295 = validateParameter(valid_597295, JInt, required = false, default = nil)
  if valid_597295 != nil:
    section.add "MaxItems", valid_597295
  var valid_597296 = query.getOrDefault("RoleName")
  valid_597296 = validateParameter(valid_597296, JString, required = true,
                                 default = nil)
  if valid_597296 != nil:
    section.add "RoleName", valid_597296
  var valid_597297 = query.getOrDefault("Version")
  valid_597297 = validateParameter(valid_597297, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597297 != nil:
    section.add "Version", valid_597297
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597298 = header.getOrDefault("X-Amz-Date")
  valid_597298 = validateParameter(valid_597298, JString, required = false,
                                 default = nil)
  if valid_597298 != nil:
    section.add "X-Amz-Date", valid_597298
  var valid_597299 = header.getOrDefault("X-Amz-Security-Token")
  valid_597299 = validateParameter(valid_597299, JString, required = false,
                                 default = nil)
  if valid_597299 != nil:
    section.add "X-Amz-Security-Token", valid_597299
  var valid_597300 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597300 = validateParameter(valid_597300, JString, required = false,
                                 default = nil)
  if valid_597300 != nil:
    section.add "X-Amz-Content-Sha256", valid_597300
  var valid_597301 = header.getOrDefault("X-Amz-Algorithm")
  valid_597301 = validateParameter(valid_597301, JString, required = false,
                                 default = nil)
  if valid_597301 != nil:
    section.add "X-Amz-Algorithm", valid_597301
  var valid_597302 = header.getOrDefault("X-Amz-Signature")
  valid_597302 = validateParameter(valid_597302, JString, required = false,
                                 default = nil)
  if valid_597302 != nil:
    section.add "X-Amz-Signature", valid_597302
  var valid_597303 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597303 = validateParameter(valid_597303, JString, required = false,
                                 default = nil)
  if valid_597303 != nil:
    section.add "X-Amz-SignedHeaders", valid_597303
  var valid_597304 = header.getOrDefault("X-Amz-Credential")
  valid_597304 = validateParameter(valid_597304, JString, required = false,
                                 default = nil)
  if valid_597304 != nil:
    section.add "X-Amz-Credential", valid_597304
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597305: Call_GetListRolePolicies_597290; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_597305.validator(path, query, header, formData, body)
  let scheme = call_597305.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597305.url(scheme.get, call_597305.host, call_597305.base,
                         call_597305.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597305, url, valid)

proc call*(call_597306: Call_GetListRolePolicies_597290; RoleName: string;
          Action: string = "ListRolePolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_597307 = newJObject()
  add(query_597307, "Action", newJString(Action))
  add(query_597307, "Marker", newJString(Marker))
  add(query_597307, "MaxItems", newJInt(MaxItems))
  add(query_597307, "RoleName", newJString(RoleName))
  add(query_597307, "Version", newJString(Version))
  result = call_597306.call(nil, query_597307, nil, nil, nil)

var getListRolePolicies* = Call_GetListRolePolicies_597290(
    name: "getListRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_GetListRolePolicies_597291, base: "/",
    url: url_GetListRolePolicies_597292, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoleTags_597345 = ref object of OpenApiRestCall_593437
proc url_PostListRoleTags_597347(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListRoleTags_597346(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597348 = query.getOrDefault("Action")
  valid_597348 = validateParameter(valid_597348, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_597348 != nil:
    section.add "Action", valid_597348
  var valid_597349 = query.getOrDefault("Version")
  valid_597349 = validateParameter(valid_597349, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597349 != nil:
    section.add "Version", valid_597349
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597350 = header.getOrDefault("X-Amz-Date")
  valid_597350 = validateParameter(valid_597350, JString, required = false,
                                 default = nil)
  if valid_597350 != nil:
    section.add "X-Amz-Date", valid_597350
  var valid_597351 = header.getOrDefault("X-Amz-Security-Token")
  valid_597351 = validateParameter(valid_597351, JString, required = false,
                                 default = nil)
  if valid_597351 != nil:
    section.add "X-Amz-Security-Token", valid_597351
  var valid_597352 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597352 = validateParameter(valid_597352, JString, required = false,
                                 default = nil)
  if valid_597352 != nil:
    section.add "X-Amz-Content-Sha256", valid_597352
  var valid_597353 = header.getOrDefault("X-Amz-Algorithm")
  valid_597353 = validateParameter(valid_597353, JString, required = false,
                                 default = nil)
  if valid_597353 != nil:
    section.add "X-Amz-Algorithm", valid_597353
  var valid_597354 = header.getOrDefault("X-Amz-Signature")
  valid_597354 = validateParameter(valid_597354, JString, required = false,
                                 default = nil)
  if valid_597354 != nil:
    section.add "X-Amz-Signature", valid_597354
  var valid_597355 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597355 = validateParameter(valid_597355, JString, required = false,
                                 default = nil)
  if valid_597355 != nil:
    section.add "X-Amz-SignedHeaders", valid_597355
  var valid_597356 = header.getOrDefault("X-Amz-Credential")
  valid_597356 = validateParameter(valid_597356, JString, required = false,
                                 default = nil)
  if valid_597356 != nil:
    section.add "X-Amz-Credential", valid_597356
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_597357 = formData.getOrDefault("RoleName")
  valid_597357 = validateParameter(valid_597357, JString, required = true,
                                 default = nil)
  if valid_597357 != nil:
    section.add "RoleName", valid_597357
  var valid_597358 = formData.getOrDefault("Marker")
  valid_597358 = validateParameter(valid_597358, JString, required = false,
                                 default = nil)
  if valid_597358 != nil:
    section.add "Marker", valid_597358
  var valid_597359 = formData.getOrDefault("MaxItems")
  valid_597359 = validateParameter(valid_597359, JInt, required = false, default = nil)
  if valid_597359 != nil:
    section.add "MaxItems", valid_597359
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597360: Call_PostListRoleTags_597345; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_597360.validator(path, query, header, formData, body)
  let scheme = call_597360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597360.url(scheme.get, call_597360.host, call_597360.base,
                         call_597360.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597360, url, valid)

proc call*(call_597361: Call_PostListRoleTags_597345; RoleName: string;
          Marker: string = ""; Action: string = "ListRoleTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597362 = newJObject()
  var formData_597363 = newJObject()
  add(formData_597363, "RoleName", newJString(RoleName))
  add(formData_597363, "Marker", newJString(Marker))
  add(query_597362, "Action", newJString(Action))
  add(formData_597363, "MaxItems", newJInt(MaxItems))
  add(query_597362, "Version", newJString(Version))
  result = call_597361.call(nil, query_597362, nil, formData_597363, nil)

var postListRoleTags* = Call_PostListRoleTags_597345(name: "postListRoleTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_PostListRoleTags_597346,
    base: "/", url: url_PostListRoleTags_597347,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoleTags_597327 = ref object of OpenApiRestCall_593437
proc url_GetListRoleTags_597329(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListRoleTags_597328(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597330 = query.getOrDefault("Action")
  valid_597330 = validateParameter(valid_597330, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_597330 != nil:
    section.add "Action", valid_597330
  var valid_597331 = query.getOrDefault("Marker")
  valid_597331 = validateParameter(valid_597331, JString, required = false,
                                 default = nil)
  if valid_597331 != nil:
    section.add "Marker", valid_597331
  var valid_597332 = query.getOrDefault("MaxItems")
  valid_597332 = validateParameter(valid_597332, JInt, required = false, default = nil)
  if valid_597332 != nil:
    section.add "MaxItems", valid_597332
  var valid_597333 = query.getOrDefault("RoleName")
  valid_597333 = validateParameter(valid_597333, JString, required = true,
                                 default = nil)
  if valid_597333 != nil:
    section.add "RoleName", valid_597333
  var valid_597334 = query.getOrDefault("Version")
  valid_597334 = validateParameter(valid_597334, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597334 != nil:
    section.add "Version", valid_597334
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597335 = header.getOrDefault("X-Amz-Date")
  valid_597335 = validateParameter(valid_597335, JString, required = false,
                                 default = nil)
  if valid_597335 != nil:
    section.add "X-Amz-Date", valid_597335
  var valid_597336 = header.getOrDefault("X-Amz-Security-Token")
  valid_597336 = validateParameter(valid_597336, JString, required = false,
                                 default = nil)
  if valid_597336 != nil:
    section.add "X-Amz-Security-Token", valid_597336
  var valid_597337 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597337 = validateParameter(valid_597337, JString, required = false,
                                 default = nil)
  if valid_597337 != nil:
    section.add "X-Amz-Content-Sha256", valid_597337
  var valid_597338 = header.getOrDefault("X-Amz-Algorithm")
  valid_597338 = validateParameter(valid_597338, JString, required = false,
                                 default = nil)
  if valid_597338 != nil:
    section.add "X-Amz-Algorithm", valid_597338
  var valid_597339 = header.getOrDefault("X-Amz-Signature")
  valid_597339 = validateParameter(valid_597339, JString, required = false,
                                 default = nil)
  if valid_597339 != nil:
    section.add "X-Amz-Signature", valid_597339
  var valid_597340 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597340 = validateParameter(valid_597340, JString, required = false,
                                 default = nil)
  if valid_597340 != nil:
    section.add "X-Amz-SignedHeaders", valid_597340
  var valid_597341 = header.getOrDefault("X-Amz-Credential")
  valid_597341 = validateParameter(valid_597341, JString, required = false,
                                 default = nil)
  if valid_597341 != nil:
    section.add "X-Amz-Credential", valid_597341
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597342: Call_GetListRoleTags_597327; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_597342.validator(path, query, header, formData, body)
  let scheme = call_597342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597342.url(scheme.get, call_597342.host, call_597342.base,
                         call_597342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597342, url, valid)

proc call*(call_597343: Call_GetListRoleTags_597327; RoleName: string;
          Action: string = "ListRoleTags"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_597344 = newJObject()
  add(query_597344, "Action", newJString(Action))
  add(query_597344, "Marker", newJString(Marker))
  add(query_597344, "MaxItems", newJInt(MaxItems))
  add(query_597344, "RoleName", newJString(RoleName))
  add(query_597344, "Version", newJString(Version))
  result = call_597343.call(nil, query_597344, nil, nil, nil)

var getListRoleTags* = Call_GetListRoleTags_597327(name: "getListRoleTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_GetListRoleTags_597328,
    base: "/", url: url_GetListRoleTags_597329, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoles_597382 = ref object of OpenApiRestCall_593437
proc url_PostListRoles_597384(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListRoles_597383(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597385 = query.getOrDefault("Action")
  valid_597385 = validateParameter(valid_597385, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_597385 != nil:
    section.add "Action", valid_597385
  var valid_597386 = query.getOrDefault("Version")
  valid_597386 = validateParameter(valid_597386, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597386 != nil:
    section.add "Version", valid_597386
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597387 = header.getOrDefault("X-Amz-Date")
  valid_597387 = validateParameter(valid_597387, JString, required = false,
                                 default = nil)
  if valid_597387 != nil:
    section.add "X-Amz-Date", valid_597387
  var valid_597388 = header.getOrDefault("X-Amz-Security-Token")
  valid_597388 = validateParameter(valid_597388, JString, required = false,
                                 default = nil)
  if valid_597388 != nil:
    section.add "X-Amz-Security-Token", valid_597388
  var valid_597389 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597389 = validateParameter(valid_597389, JString, required = false,
                                 default = nil)
  if valid_597389 != nil:
    section.add "X-Amz-Content-Sha256", valid_597389
  var valid_597390 = header.getOrDefault("X-Amz-Algorithm")
  valid_597390 = validateParameter(valid_597390, JString, required = false,
                                 default = nil)
  if valid_597390 != nil:
    section.add "X-Amz-Algorithm", valid_597390
  var valid_597391 = header.getOrDefault("X-Amz-Signature")
  valid_597391 = validateParameter(valid_597391, JString, required = false,
                                 default = nil)
  if valid_597391 != nil:
    section.add "X-Amz-Signature", valid_597391
  var valid_597392 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597392 = validateParameter(valid_597392, JString, required = false,
                                 default = nil)
  if valid_597392 != nil:
    section.add "X-Amz-SignedHeaders", valid_597392
  var valid_597393 = header.getOrDefault("X-Amz-Credential")
  valid_597393 = validateParameter(valid_597393, JString, required = false,
                                 default = nil)
  if valid_597393 != nil:
    section.add "X-Amz-Credential", valid_597393
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_597394 = formData.getOrDefault("PathPrefix")
  valid_597394 = validateParameter(valid_597394, JString, required = false,
                                 default = nil)
  if valid_597394 != nil:
    section.add "PathPrefix", valid_597394
  var valid_597395 = formData.getOrDefault("Marker")
  valid_597395 = validateParameter(valid_597395, JString, required = false,
                                 default = nil)
  if valid_597395 != nil:
    section.add "Marker", valid_597395
  var valid_597396 = formData.getOrDefault("MaxItems")
  valid_597396 = validateParameter(valid_597396, JInt, required = false, default = nil)
  if valid_597396 != nil:
    section.add "MaxItems", valid_597396
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597397: Call_PostListRoles_597382; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597397.validator(path, query, header, formData, body)
  let scheme = call_597397.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597397.url(scheme.get, call_597397.host, call_597397.base,
                         call_597397.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597397, url, valid)

proc call*(call_597398: Call_PostListRoles_597382; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListRoles"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597399 = newJObject()
  var formData_597400 = newJObject()
  add(formData_597400, "PathPrefix", newJString(PathPrefix))
  add(formData_597400, "Marker", newJString(Marker))
  add(query_597399, "Action", newJString(Action))
  add(formData_597400, "MaxItems", newJInt(MaxItems))
  add(query_597399, "Version", newJString(Version))
  result = call_597398.call(nil, query_597399, nil, formData_597400, nil)

var postListRoles* = Call_PostListRoles_597382(name: "postListRoles",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_PostListRoles_597383,
    base: "/", url: url_PostListRoles_597384, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoles_597364 = ref object of OpenApiRestCall_593437
proc url_GetListRoles_597366(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListRoles_597365(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_597367 = query.getOrDefault("PathPrefix")
  valid_597367 = validateParameter(valid_597367, JString, required = false,
                                 default = nil)
  if valid_597367 != nil:
    section.add "PathPrefix", valid_597367
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597368 = query.getOrDefault("Action")
  valid_597368 = validateParameter(valid_597368, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_597368 != nil:
    section.add "Action", valid_597368
  var valid_597369 = query.getOrDefault("Marker")
  valid_597369 = validateParameter(valid_597369, JString, required = false,
                                 default = nil)
  if valid_597369 != nil:
    section.add "Marker", valid_597369
  var valid_597370 = query.getOrDefault("MaxItems")
  valid_597370 = validateParameter(valid_597370, JInt, required = false, default = nil)
  if valid_597370 != nil:
    section.add "MaxItems", valid_597370
  var valid_597371 = query.getOrDefault("Version")
  valid_597371 = validateParameter(valid_597371, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597371 != nil:
    section.add "Version", valid_597371
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597372 = header.getOrDefault("X-Amz-Date")
  valid_597372 = validateParameter(valid_597372, JString, required = false,
                                 default = nil)
  if valid_597372 != nil:
    section.add "X-Amz-Date", valid_597372
  var valid_597373 = header.getOrDefault("X-Amz-Security-Token")
  valid_597373 = validateParameter(valid_597373, JString, required = false,
                                 default = nil)
  if valid_597373 != nil:
    section.add "X-Amz-Security-Token", valid_597373
  var valid_597374 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597374 = validateParameter(valid_597374, JString, required = false,
                                 default = nil)
  if valid_597374 != nil:
    section.add "X-Amz-Content-Sha256", valid_597374
  var valid_597375 = header.getOrDefault("X-Amz-Algorithm")
  valid_597375 = validateParameter(valid_597375, JString, required = false,
                                 default = nil)
  if valid_597375 != nil:
    section.add "X-Amz-Algorithm", valid_597375
  var valid_597376 = header.getOrDefault("X-Amz-Signature")
  valid_597376 = validateParameter(valid_597376, JString, required = false,
                                 default = nil)
  if valid_597376 != nil:
    section.add "X-Amz-Signature", valid_597376
  var valid_597377 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597377 = validateParameter(valid_597377, JString, required = false,
                                 default = nil)
  if valid_597377 != nil:
    section.add "X-Amz-SignedHeaders", valid_597377
  var valid_597378 = header.getOrDefault("X-Amz-Credential")
  valid_597378 = validateParameter(valid_597378, JString, required = false,
                                 default = nil)
  if valid_597378 != nil:
    section.add "X-Amz-Credential", valid_597378
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597379: Call_GetListRoles_597364; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597379.validator(path, query, header, formData, body)
  let scheme = call_597379.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597379.url(scheme.get, call_597379.host, call_597379.base,
                         call_597379.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597379, url, valid)

proc call*(call_597380: Call_GetListRoles_597364; PathPrefix: string = "";
          Action: string = "ListRoles"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597381 = newJObject()
  add(query_597381, "PathPrefix", newJString(PathPrefix))
  add(query_597381, "Action", newJString(Action))
  add(query_597381, "Marker", newJString(Marker))
  add(query_597381, "MaxItems", newJInt(MaxItems))
  add(query_597381, "Version", newJString(Version))
  result = call_597380.call(nil, query_597381, nil, nil, nil)

var getListRoles* = Call_GetListRoles_597364(name: "getListRoles",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_GetListRoles_597365, base: "/",
    url: url_GetListRoles_597366, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSAMLProviders_597416 = ref object of OpenApiRestCall_593437
proc url_PostListSAMLProviders_597418(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListSAMLProviders_597417(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597419 = query.getOrDefault("Action")
  valid_597419 = validateParameter(valid_597419, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_597419 != nil:
    section.add "Action", valid_597419
  var valid_597420 = query.getOrDefault("Version")
  valid_597420 = validateParameter(valid_597420, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597420 != nil:
    section.add "Version", valid_597420
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597421 = header.getOrDefault("X-Amz-Date")
  valid_597421 = validateParameter(valid_597421, JString, required = false,
                                 default = nil)
  if valid_597421 != nil:
    section.add "X-Amz-Date", valid_597421
  var valid_597422 = header.getOrDefault("X-Amz-Security-Token")
  valid_597422 = validateParameter(valid_597422, JString, required = false,
                                 default = nil)
  if valid_597422 != nil:
    section.add "X-Amz-Security-Token", valid_597422
  var valid_597423 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597423 = validateParameter(valid_597423, JString, required = false,
                                 default = nil)
  if valid_597423 != nil:
    section.add "X-Amz-Content-Sha256", valid_597423
  var valid_597424 = header.getOrDefault("X-Amz-Algorithm")
  valid_597424 = validateParameter(valid_597424, JString, required = false,
                                 default = nil)
  if valid_597424 != nil:
    section.add "X-Amz-Algorithm", valid_597424
  var valid_597425 = header.getOrDefault("X-Amz-Signature")
  valid_597425 = validateParameter(valid_597425, JString, required = false,
                                 default = nil)
  if valid_597425 != nil:
    section.add "X-Amz-Signature", valid_597425
  var valid_597426 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597426 = validateParameter(valid_597426, JString, required = false,
                                 default = nil)
  if valid_597426 != nil:
    section.add "X-Amz-SignedHeaders", valid_597426
  var valid_597427 = header.getOrDefault("X-Amz-Credential")
  valid_597427 = validateParameter(valid_597427, JString, required = false,
                                 default = nil)
  if valid_597427 != nil:
    section.add "X-Amz-Credential", valid_597427
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597428: Call_PostListSAMLProviders_597416; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_597428.validator(path, query, header, formData, body)
  let scheme = call_597428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597428.url(scheme.get, call_597428.host, call_597428.base,
                         call_597428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597428, url, valid)

proc call*(call_597429: Call_PostListSAMLProviders_597416;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## postListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597430 = newJObject()
  add(query_597430, "Action", newJString(Action))
  add(query_597430, "Version", newJString(Version))
  result = call_597429.call(nil, query_597430, nil, nil, nil)

var postListSAMLProviders* = Call_PostListSAMLProviders_597416(
    name: "postListSAMLProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_PostListSAMLProviders_597417, base: "/",
    url: url_PostListSAMLProviders_597418, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSAMLProviders_597401 = ref object of OpenApiRestCall_593437
proc url_GetListSAMLProviders_597403(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListSAMLProviders_597402(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597404 = query.getOrDefault("Action")
  valid_597404 = validateParameter(valid_597404, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_597404 != nil:
    section.add "Action", valid_597404
  var valid_597405 = query.getOrDefault("Version")
  valid_597405 = validateParameter(valid_597405, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597405 != nil:
    section.add "Version", valid_597405
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597406 = header.getOrDefault("X-Amz-Date")
  valid_597406 = validateParameter(valid_597406, JString, required = false,
                                 default = nil)
  if valid_597406 != nil:
    section.add "X-Amz-Date", valid_597406
  var valid_597407 = header.getOrDefault("X-Amz-Security-Token")
  valid_597407 = validateParameter(valid_597407, JString, required = false,
                                 default = nil)
  if valid_597407 != nil:
    section.add "X-Amz-Security-Token", valid_597407
  var valid_597408 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597408 = validateParameter(valid_597408, JString, required = false,
                                 default = nil)
  if valid_597408 != nil:
    section.add "X-Amz-Content-Sha256", valid_597408
  var valid_597409 = header.getOrDefault("X-Amz-Algorithm")
  valid_597409 = validateParameter(valid_597409, JString, required = false,
                                 default = nil)
  if valid_597409 != nil:
    section.add "X-Amz-Algorithm", valid_597409
  var valid_597410 = header.getOrDefault("X-Amz-Signature")
  valid_597410 = validateParameter(valid_597410, JString, required = false,
                                 default = nil)
  if valid_597410 != nil:
    section.add "X-Amz-Signature", valid_597410
  var valid_597411 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597411 = validateParameter(valid_597411, JString, required = false,
                                 default = nil)
  if valid_597411 != nil:
    section.add "X-Amz-SignedHeaders", valid_597411
  var valid_597412 = header.getOrDefault("X-Amz-Credential")
  valid_597412 = validateParameter(valid_597412, JString, required = false,
                                 default = nil)
  if valid_597412 != nil:
    section.add "X-Amz-Credential", valid_597412
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597413: Call_GetListSAMLProviders_597401; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_597413.validator(path, query, header, formData, body)
  let scheme = call_597413.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597413.url(scheme.get, call_597413.host, call_597413.base,
                         call_597413.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597413, url, valid)

proc call*(call_597414: Call_GetListSAMLProviders_597401;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## getListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597415 = newJObject()
  add(query_597415, "Action", newJString(Action))
  add(query_597415, "Version", newJString(Version))
  result = call_597414.call(nil, query_597415, nil, nil, nil)

var getListSAMLProviders* = Call_GetListSAMLProviders_597401(
    name: "getListSAMLProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_GetListSAMLProviders_597402, base: "/",
    url: url_GetListSAMLProviders_597403, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSSHPublicKeys_597449 = ref object of OpenApiRestCall_593437
proc url_PostListSSHPublicKeys_597451(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListSSHPublicKeys_597450(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597452 = query.getOrDefault("Action")
  valid_597452 = validateParameter(valid_597452, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_597452 != nil:
    section.add "Action", valid_597452
  var valid_597453 = query.getOrDefault("Version")
  valid_597453 = validateParameter(valid_597453, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597453 != nil:
    section.add "Version", valid_597453
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597454 = header.getOrDefault("X-Amz-Date")
  valid_597454 = validateParameter(valid_597454, JString, required = false,
                                 default = nil)
  if valid_597454 != nil:
    section.add "X-Amz-Date", valid_597454
  var valid_597455 = header.getOrDefault("X-Amz-Security-Token")
  valid_597455 = validateParameter(valid_597455, JString, required = false,
                                 default = nil)
  if valid_597455 != nil:
    section.add "X-Amz-Security-Token", valid_597455
  var valid_597456 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597456 = validateParameter(valid_597456, JString, required = false,
                                 default = nil)
  if valid_597456 != nil:
    section.add "X-Amz-Content-Sha256", valid_597456
  var valid_597457 = header.getOrDefault("X-Amz-Algorithm")
  valid_597457 = validateParameter(valid_597457, JString, required = false,
                                 default = nil)
  if valid_597457 != nil:
    section.add "X-Amz-Algorithm", valid_597457
  var valid_597458 = header.getOrDefault("X-Amz-Signature")
  valid_597458 = validateParameter(valid_597458, JString, required = false,
                                 default = nil)
  if valid_597458 != nil:
    section.add "X-Amz-Signature", valid_597458
  var valid_597459 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597459 = validateParameter(valid_597459, JString, required = false,
                                 default = nil)
  if valid_597459 != nil:
    section.add "X-Amz-SignedHeaders", valid_597459
  var valid_597460 = header.getOrDefault("X-Amz-Credential")
  valid_597460 = validateParameter(valid_597460, JString, required = false,
                                 default = nil)
  if valid_597460 != nil:
    section.add "X-Amz-Credential", valid_597460
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_597461 = formData.getOrDefault("UserName")
  valid_597461 = validateParameter(valid_597461, JString, required = false,
                                 default = nil)
  if valid_597461 != nil:
    section.add "UserName", valid_597461
  var valid_597462 = formData.getOrDefault("Marker")
  valid_597462 = validateParameter(valid_597462, JString, required = false,
                                 default = nil)
  if valid_597462 != nil:
    section.add "Marker", valid_597462
  var valid_597463 = formData.getOrDefault("MaxItems")
  valid_597463 = validateParameter(valid_597463, JInt, required = false, default = nil)
  if valid_597463 != nil:
    section.add "MaxItems", valid_597463
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597464: Call_PostListSSHPublicKeys_597449; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597464.validator(path, query, header, formData, body)
  let scheme = call_597464.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597464.url(scheme.get, call_597464.host, call_597464.base,
                         call_597464.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597464, url, valid)

proc call*(call_597465: Call_PostListSSHPublicKeys_597449; UserName: string = "";
          Marker: string = ""; Action: string = "ListSSHPublicKeys"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597466 = newJObject()
  var formData_597467 = newJObject()
  add(formData_597467, "UserName", newJString(UserName))
  add(formData_597467, "Marker", newJString(Marker))
  add(query_597466, "Action", newJString(Action))
  add(formData_597467, "MaxItems", newJInt(MaxItems))
  add(query_597466, "Version", newJString(Version))
  result = call_597465.call(nil, query_597466, nil, formData_597467, nil)

var postListSSHPublicKeys* = Call_PostListSSHPublicKeys_597449(
    name: "postListSSHPublicKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_PostListSSHPublicKeys_597450, base: "/",
    url: url_PostListSSHPublicKeys_597451, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSSHPublicKeys_597431 = ref object of OpenApiRestCall_593437
proc url_GetListSSHPublicKeys_597433(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListSSHPublicKeys_597432(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_597434 = query.getOrDefault("UserName")
  valid_597434 = validateParameter(valid_597434, JString, required = false,
                                 default = nil)
  if valid_597434 != nil:
    section.add "UserName", valid_597434
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597435 = query.getOrDefault("Action")
  valid_597435 = validateParameter(valid_597435, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_597435 != nil:
    section.add "Action", valid_597435
  var valid_597436 = query.getOrDefault("Marker")
  valid_597436 = validateParameter(valid_597436, JString, required = false,
                                 default = nil)
  if valid_597436 != nil:
    section.add "Marker", valid_597436
  var valid_597437 = query.getOrDefault("MaxItems")
  valid_597437 = validateParameter(valid_597437, JInt, required = false, default = nil)
  if valid_597437 != nil:
    section.add "MaxItems", valid_597437
  var valid_597438 = query.getOrDefault("Version")
  valid_597438 = validateParameter(valid_597438, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597438 != nil:
    section.add "Version", valid_597438
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597439 = header.getOrDefault("X-Amz-Date")
  valid_597439 = validateParameter(valid_597439, JString, required = false,
                                 default = nil)
  if valid_597439 != nil:
    section.add "X-Amz-Date", valid_597439
  var valid_597440 = header.getOrDefault("X-Amz-Security-Token")
  valid_597440 = validateParameter(valid_597440, JString, required = false,
                                 default = nil)
  if valid_597440 != nil:
    section.add "X-Amz-Security-Token", valid_597440
  var valid_597441 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597441 = validateParameter(valid_597441, JString, required = false,
                                 default = nil)
  if valid_597441 != nil:
    section.add "X-Amz-Content-Sha256", valid_597441
  var valid_597442 = header.getOrDefault("X-Amz-Algorithm")
  valid_597442 = validateParameter(valid_597442, JString, required = false,
                                 default = nil)
  if valid_597442 != nil:
    section.add "X-Amz-Algorithm", valid_597442
  var valid_597443 = header.getOrDefault("X-Amz-Signature")
  valid_597443 = validateParameter(valid_597443, JString, required = false,
                                 default = nil)
  if valid_597443 != nil:
    section.add "X-Amz-Signature", valid_597443
  var valid_597444 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597444 = validateParameter(valid_597444, JString, required = false,
                                 default = nil)
  if valid_597444 != nil:
    section.add "X-Amz-SignedHeaders", valid_597444
  var valid_597445 = header.getOrDefault("X-Amz-Credential")
  valid_597445 = validateParameter(valid_597445, JString, required = false,
                                 default = nil)
  if valid_597445 != nil:
    section.add "X-Amz-Credential", valid_597445
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597446: Call_GetListSSHPublicKeys_597431; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597446.validator(path, query, header, formData, body)
  let scheme = call_597446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597446.url(scheme.get, call_597446.host, call_597446.base,
                         call_597446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597446, url, valid)

proc call*(call_597447: Call_GetListSSHPublicKeys_597431; UserName: string = "";
          Action: string = "ListSSHPublicKeys"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597448 = newJObject()
  add(query_597448, "UserName", newJString(UserName))
  add(query_597448, "Action", newJString(Action))
  add(query_597448, "Marker", newJString(Marker))
  add(query_597448, "MaxItems", newJInt(MaxItems))
  add(query_597448, "Version", newJString(Version))
  result = call_597447.call(nil, query_597448, nil, nil, nil)

var getListSSHPublicKeys* = Call_GetListSSHPublicKeys_597431(
    name: "getListSSHPublicKeys", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_GetListSSHPublicKeys_597432, base: "/",
    url: url_GetListSSHPublicKeys_597433, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServerCertificates_597486 = ref object of OpenApiRestCall_593437
proc url_PostListServerCertificates_597488(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListServerCertificates_597487(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597489 = query.getOrDefault("Action")
  valid_597489 = validateParameter(valid_597489, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_597489 != nil:
    section.add "Action", valid_597489
  var valid_597490 = query.getOrDefault("Version")
  valid_597490 = validateParameter(valid_597490, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597490 != nil:
    section.add "Version", valid_597490
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597491 = header.getOrDefault("X-Amz-Date")
  valid_597491 = validateParameter(valid_597491, JString, required = false,
                                 default = nil)
  if valid_597491 != nil:
    section.add "X-Amz-Date", valid_597491
  var valid_597492 = header.getOrDefault("X-Amz-Security-Token")
  valid_597492 = validateParameter(valid_597492, JString, required = false,
                                 default = nil)
  if valid_597492 != nil:
    section.add "X-Amz-Security-Token", valid_597492
  var valid_597493 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597493 = validateParameter(valid_597493, JString, required = false,
                                 default = nil)
  if valid_597493 != nil:
    section.add "X-Amz-Content-Sha256", valid_597493
  var valid_597494 = header.getOrDefault("X-Amz-Algorithm")
  valid_597494 = validateParameter(valid_597494, JString, required = false,
                                 default = nil)
  if valid_597494 != nil:
    section.add "X-Amz-Algorithm", valid_597494
  var valid_597495 = header.getOrDefault("X-Amz-Signature")
  valid_597495 = validateParameter(valid_597495, JString, required = false,
                                 default = nil)
  if valid_597495 != nil:
    section.add "X-Amz-Signature", valid_597495
  var valid_597496 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597496 = validateParameter(valid_597496, JString, required = false,
                                 default = nil)
  if valid_597496 != nil:
    section.add "X-Amz-SignedHeaders", valid_597496
  var valid_597497 = header.getOrDefault("X-Amz-Credential")
  valid_597497 = validateParameter(valid_597497, JString, required = false,
                                 default = nil)
  if valid_597497 != nil:
    section.add "X-Amz-Credential", valid_597497
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_597498 = formData.getOrDefault("PathPrefix")
  valid_597498 = validateParameter(valid_597498, JString, required = false,
                                 default = nil)
  if valid_597498 != nil:
    section.add "PathPrefix", valid_597498
  var valid_597499 = formData.getOrDefault("Marker")
  valid_597499 = validateParameter(valid_597499, JString, required = false,
                                 default = nil)
  if valid_597499 != nil:
    section.add "Marker", valid_597499
  var valid_597500 = formData.getOrDefault("MaxItems")
  valid_597500 = validateParameter(valid_597500, JInt, required = false, default = nil)
  if valid_597500 != nil:
    section.add "MaxItems", valid_597500
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597501: Call_PostListServerCertificates_597486; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_597501.validator(path, query, header, formData, body)
  let scheme = call_597501.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597501.url(scheme.get, call_597501.host, call_597501.base,
                         call_597501.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597501, url, valid)

proc call*(call_597502: Call_PostListServerCertificates_597486;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListServerCertificates"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597503 = newJObject()
  var formData_597504 = newJObject()
  add(formData_597504, "PathPrefix", newJString(PathPrefix))
  add(formData_597504, "Marker", newJString(Marker))
  add(query_597503, "Action", newJString(Action))
  add(formData_597504, "MaxItems", newJInt(MaxItems))
  add(query_597503, "Version", newJString(Version))
  result = call_597502.call(nil, query_597503, nil, formData_597504, nil)

var postListServerCertificates* = Call_PostListServerCertificates_597486(
    name: "postListServerCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_PostListServerCertificates_597487, base: "/",
    url: url_PostListServerCertificates_597488,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServerCertificates_597468 = ref object of OpenApiRestCall_593437
proc url_GetListServerCertificates_597470(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListServerCertificates_597469(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_597471 = query.getOrDefault("PathPrefix")
  valid_597471 = validateParameter(valid_597471, JString, required = false,
                                 default = nil)
  if valid_597471 != nil:
    section.add "PathPrefix", valid_597471
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597472 = query.getOrDefault("Action")
  valid_597472 = validateParameter(valid_597472, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_597472 != nil:
    section.add "Action", valid_597472
  var valid_597473 = query.getOrDefault("Marker")
  valid_597473 = validateParameter(valid_597473, JString, required = false,
                                 default = nil)
  if valid_597473 != nil:
    section.add "Marker", valid_597473
  var valid_597474 = query.getOrDefault("MaxItems")
  valid_597474 = validateParameter(valid_597474, JInt, required = false, default = nil)
  if valid_597474 != nil:
    section.add "MaxItems", valid_597474
  var valid_597475 = query.getOrDefault("Version")
  valid_597475 = validateParameter(valid_597475, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597475 != nil:
    section.add "Version", valid_597475
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597476 = header.getOrDefault("X-Amz-Date")
  valid_597476 = validateParameter(valid_597476, JString, required = false,
                                 default = nil)
  if valid_597476 != nil:
    section.add "X-Amz-Date", valid_597476
  var valid_597477 = header.getOrDefault("X-Amz-Security-Token")
  valid_597477 = validateParameter(valid_597477, JString, required = false,
                                 default = nil)
  if valid_597477 != nil:
    section.add "X-Amz-Security-Token", valid_597477
  var valid_597478 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597478 = validateParameter(valid_597478, JString, required = false,
                                 default = nil)
  if valid_597478 != nil:
    section.add "X-Amz-Content-Sha256", valid_597478
  var valid_597479 = header.getOrDefault("X-Amz-Algorithm")
  valid_597479 = validateParameter(valid_597479, JString, required = false,
                                 default = nil)
  if valid_597479 != nil:
    section.add "X-Amz-Algorithm", valid_597479
  var valid_597480 = header.getOrDefault("X-Amz-Signature")
  valid_597480 = validateParameter(valid_597480, JString, required = false,
                                 default = nil)
  if valid_597480 != nil:
    section.add "X-Amz-Signature", valid_597480
  var valid_597481 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597481 = validateParameter(valid_597481, JString, required = false,
                                 default = nil)
  if valid_597481 != nil:
    section.add "X-Amz-SignedHeaders", valid_597481
  var valid_597482 = header.getOrDefault("X-Amz-Credential")
  valid_597482 = validateParameter(valid_597482, JString, required = false,
                                 default = nil)
  if valid_597482 != nil:
    section.add "X-Amz-Credential", valid_597482
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597483: Call_GetListServerCertificates_597468; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_597483.validator(path, query, header, formData, body)
  let scheme = call_597483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597483.url(scheme.get, call_597483.host, call_597483.base,
                         call_597483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597483, url, valid)

proc call*(call_597484: Call_GetListServerCertificates_597468;
          PathPrefix: string = ""; Action: string = "ListServerCertificates";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597485 = newJObject()
  add(query_597485, "PathPrefix", newJString(PathPrefix))
  add(query_597485, "Action", newJString(Action))
  add(query_597485, "Marker", newJString(Marker))
  add(query_597485, "MaxItems", newJInt(MaxItems))
  add(query_597485, "Version", newJString(Version))
  result = call_597484.call(nil, query_597485, nil, nil, nil)

var getListServerCertificates* = Call_GetListServerCertificates_597468(
    name: "getListServerCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_GetListServerCertificates_597469, base: "/",
    url: url_GetListServerCertificates_597470,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServiceSpecificCredentials_597522 = ref object of OpenApiRestCall_593437
proc url_PostListServiceSpecificCredentials_597524(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListServiceSpecificCredentials_597523(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597525 = query.getOrDefault("Action")
  valid_597525 = validateParameter(valid_597525, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_597525 != nil:
    section.add "Action", valid_597525
  var valid_597526 = query.getOrDefault("Version")
  valid_597526 = validateParameter(valid_597526, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597526 != nil:
    section.add "Version", valid_597526
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597527 = header.getOrDefault("X-Amz-Date")
  valid_597527 = validateParameter(valid_597527, JString, required = false,
                                 default = nil)
  if valid_597527 != nil:
    section.add "X-Amz-Date", valid_597527
  var valid_597528 = header.getOrDefault("X-Amz-Security-Token")
  valid_597528 = validateParameter(valid_597528, JString, required = false,
                                 default = nil)
  if valid_597528 != nil:
    section.add "X-Amz-Security-Token", valid_597528
  var valid_597529 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597529 = validateParameter(valid_597529, JString, required = false,
                                 default = nil)
  if valid_597529 != nil:
    section.add "X-Amz-Content-Sha256", valid_597529
  var valid_597530 = header.getOrDefault("X-Amz-Algorithm")
  valid_597530 = validateParameter(valid_597530, JString, required = false,
                                 default = nil)
  if valid_597530 != nil:
    section.add "X-Amz-Algorithm", valid_597530
  var valid_597531 = header.getOrDefault("X-Amz-Signature")
  valid_597531 = validateParameter(valid_597531, JString, required = false,
                                 default = nil)
  if valid_597531 != nil:
    section.add "X-Amz-Signature", valid_597531
  var valid_597532 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597532 = validateParameter(valid_597532, JString, required = false,
                                 default = nil)
  if valid_597532 != nil:
    section.add "X-Amz-SignedHeaders", valid_597532
  var valid_597533 = header.getOrDefault("X-Amz-Credential")
  valid_597533 = validateParameter(valid_597533, JString, required = false,
                                 default = nil)
  if valid_597533 != nil:
    section.add "X-Amz-Credential", valid_597533
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  section = newJObject()
  var valid_597534 = formData.getOrDefault("UserName")
  valid_597534 = validateParameter(valid_597534, JString, required = false,
                                 default = nil)
  if valid_597534 != nil:
    section.add "UserName", valid_597534
  var valid_597535 = formData.getOrDefault("ServiceName")
  valid_597535 = validateParameter(valid_597535, JString, required = false,
                                 default = nil)
  if valid_597535 != nil:
    section.add "ServiceName", valid_597535
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597536: Call_PostListServiceSpecificCredentials_597522;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_597536.validator(path, query, header, formData, body)
  let scheme = call_597536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597536.url(scheme.get, call_597536.host, call_597536.base,
                         call_597536.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597536, url, valid)

proc call*(call_597537: Call_PostListServiceSpecificCredentials_597522;
          UserName: string = ""; Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"; ServiceName: string = ""): Recallable =
  ## postListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  var query_597538 = newJObject()
  var formData_597539 = newJObject()
  add(formData_597539, "UserName", newJString(UserName))
  add(query_597538, "Action", newJString(Action))
  add(query_597538, "Version", newJString(Version))
  add(formData_597539, "ServiceName", newJString(ServiceName))
  result = call_597537.call(nil, query_597538, nil, formData_597539, nil)

var postListServiceSpecificCredentials* = Call_PostListServiceSpecificCredentials_597522(
    name: "postListServiceSpecificCredentials", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_PostListServiceSpecificCredentials_597523, base: "/",
    url: url_PostListServiceSpecificCredentials_597524,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServiceSpecificCredentials_597505 = ref object of OpenApiRestCall_593437
proc url_GetListServiceSpecificCredentials_597507(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListServiceSpecificCredentials_597506(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_597508 = query.getOrDefault("ServiceName")
  valid_597508 = validateParameter(valid_597508, JString, required = false,
                                 default = nil)
  if valid_597508 != nil:
    section.add "ServiceName", valid_597508
  var valid_597509 = query.getOrDefault("UserName")
  valid_597509 = validateParameter(valid_597509, JString, required = false,
                                 default = nil)
  if valid_597509 != nil:
    section.add "UserName", valid_597509
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597510 = query.getOrDefault("Action")
  valid_597510 = validateParameter(valid_597510, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_597510 != nil:
    section.add "Action", valid_597510
  var valid_597511 = query.getOrDefault("Version")
  valid_597511 = validateParameter(valid_597511, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597511 != nil:
    section.add "Version", valid_597511
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597512 = header.getOrDefault("X-Amz-Date")
  valid_597512 = validateParameter(valid_597512, JString, required = false,
                                 default = nil)
  if valid_597512 != nil:
    section.add "X-Amz-Date", valid_597512
  var valid_597513 = header.getOrDefault("X-Amz-Security-Token")
  valid_597513 = validateParameter(valid_597513, JString, required = false,
                                 default = nil)
  if valid_597513 != nil:
    section.add "X-Amz-Security-Token", valid_597513
  var valid_597514 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597514 = validateParameter(valid_597514, JString, required = false,
                                 default = nil)
  if valid_597514 != nil:
    section.add "X-Amz-Content-Sha256", valid_597514
  var valid_597515 = header.getOrDefault("X-Amz-Algorithm")
  valid_597515 = validateParameter(valid_597515, JString, required = false,
                                 default = nil)
  if valid_597515 != nil:
    section.add "X-Amz-Algorithm", valid_597515
  var valid_597516 = header.getOrDefault("X-Amz-Signature")
  valid_597516 = validateParameter(valid_597516, JString, required = false,
                                 default = nil)
  if valid_597516 != nil:
    section.add "X-Amz-Signature", valid_597516
  var valid_597517 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597517 = validateParameter(valid_597517, JString, required = false,
                                 default = nil)
  if valid_597517 != nil:
    section.add "X-Amz-SignedHeaders", valid_597517
  var valid_597518 = header.getOrDefault("X-Amz-Credential")
  valid_597518 = validateParameter(valid_597518, JString, required = false,
                                 default = nil)
  if valid_597518 != nil:
    section.add "X-Amz-Credential", valid_597518
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597519: Call_GetListServiceSpecificCredentials_597505;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_597519.validator(path, query, header, formData, body)
  let scheme = call_597519.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597519.url(scheme.get, call_597519.host, call_597519.base,
                         call_597519.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597519, url, valid)

proc call*(call_597520: Call_GetListServiceSpecificCredentials_597505;
          ServiceName: string = ""; UserName: string = "";
          Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"): Recallable =
  ## getListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597521 = newJObject()
  add(query_597521, "ServiceName", newJString(ServiceName))
  add(query_597521, "UserName", newJString(UserName))
  add(query_597521, "Action", newJString(Action))
  add(query_597521, "Version", newJString(Version))
  result = call_597520.call(nil, query_597521, nil, nil, nil)

var getListServiceSpecificCredentials* = Call_GetListServiceSpecificCredentials_597505(
    name: "getListServiceSpecificCredentials", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_GetListServiceSpecificCredentials_597506, base: "/",
    url: url_GetListServiceSpecificCredentials_597507,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSigningCertificates_597558 = ref object of OpenApiRestCall_593437
proc url_PostListSigningCertificates_597560(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListSigningCertificates_597559(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597561 = query.getOrDefault("Action")
  valid_597561 = validateParameter(valid_597561, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_597561 != nil:
    section.add "Action", valid_597561
  var valid_597562 = query.getOrDefault("Version")
  valid_597562 = validateParameter(valid_597562, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597562 != nil:
    section.add "Version", valid_597562
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597563 = header.getOrDefault("X-Amz-Date")
  valid_597563 = validateParameter(valid_597563, JString, required = false,
                                 default = nil)
  if valid_597563 != nil:
    section.add "X-Amz-Date", valid_597563
  var valid_597564 = header.getOrDefault("X-Amz-Security-Token")
  valid_597564 = validateParameter(valid_597564, JString, required = false,
                                 default = nil)
  if valid_597564 != nil:
    section.add "X-Amz-Security-Token", valid_597564
  var valid_597565 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597565 = validateParameter(valid_597565, JString, required = false,
                                 default = nil)
  if valid_597565 != nil:
    section.add "X-Amz-Content-Sha256", valid_597565
  var valid_597566 = header.getOrDefault("X-Amz-Algorithm")
  valid_597566 = validateParameter(valid_597566, JString, required = false,
                                 default = nil)
  if valid_597566 != nil:
    section.add "X-Amz-Algorithm", valid_597566
  var valid_597567 = header.getOrDefault("X-Amz-Signature")
  valid_597567 = validateParameter(valid_597567, JString, required = false,
                                 default = nil)
  if valid_597567 != nil:
    section.add "X-Amz-Signature", valid_597567
  var valid_597568 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597568 = validateParameter(valid_597568, JString, required = false,
                                 default = nil)
  if valid_597568 != nil:
    section.add "X-Amz-SignedHeaders", valid_597568
  var valid_597569 = header.getOrDefault("X-Amz-Credential")
  valid_597569 = validateParameter(valid_597569, JString, required = false,
                                 default = nil)
  if valid_597569 != nil:
    section.add "X-Amz-Credential", valid_597569
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_597570 = formData.getOrDefault("UserName")
  valid_597570 = validateParameter(valid_597570, JString, required = false,
                                 default = nil)
  if valid_597570 != nil:
    section.add "UserName", valid_597570
  var valid_597571 = formData.getOrDefault("Marker")
  valid_597571 = validateParameter(valid_597571, JString, required = false,
                                 default = nil)
  if valid_597571 != nil:
    section.add "Marker", valid_597571
  var valid_597572 = formData.getOrDefault("MaxItems")
  valid_597572 = validateParameter(valid_597572, JInt, required = false, default = nil)
  if valid_597572 != nil:
    section.add "MaxItems", valid_597572
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597573: Call_PostListSigningCertificates_597558; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_597573.validator(path, query, header, formData, body)
  let scheme = call_597573.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597573.url(scheme.get, call_597573.host, call_597573.base,
                         call_597573.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597573, url, valid)

proc call*(call_597574: Call_PostListSigningCertificates_597558;
          UserName: string = ""; Marker: string = "";
          Action: string = "ListSigningCertificates"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597575 = newJObject()
  var formData_597576 = newJObject()
  add(formData_597576, "UserName", newJString(UserName))
  add(formData_597576, "Marker", newJString(Marker))
  add(query_597575, "Action", newJString(Action))
  add(formData_597576, "MaxItems", newJInt(MaxItems))
  add(query_597575, "Version", newJString(Version))
  result = call_597574.call(nil, query_597575, nil, formData_597576, nil)

var postListSigningCertificates* = Call_PostListSigningCertificates_597558(
    name: "postListSigningCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_PostListSigningCertificates_597559, base: "/",
    url: url_PostListSigningCertificates_597560,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSigningCertificates_597540 = ref object of OpenApiRestCall_593437
proc url_GetListSigningCertificates_597542(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListSigningCertificates_597541(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_597543 = query.getOrDefault("UserName")
  valid_597543 = validateParameter(valid_597543, JString, required = false,
                                 default = nil)
  if valid_597543 != nil:
    section.add "UserName", valid_597543
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597544 = query.getOrDefault("Action")
  valid_597544 = validateParameter(valid_597544, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_597544 != nil:
    section.add "Action", valid_597544
  var valid_597545 = query.getOrDefault("Marker")
  valid_597545 = validateParameter(valid_597545, JString, required = false,
                                 default = nil)
  if valid_597545 != nil:
    section.add "Marker", valid_597545
  var valid_597546 = query.getOrDefault("MaxItems")
  valid_597546 = validateParameter(valid_597546, JInt, required = false, default = nil)
  if valid_597546 != nil:
    section.add "MaxItems", valid_597546
  var valid_597547 = query.getOrDefault("Version")
  valid_597547 = validateParameter(valid_597547, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597547 != nil:
    section.add "Version", valid_597547
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597548 = header.getOrDefault("X-Amz-Date")
  valid_597548 = validateParameter(valid_597548, JString, required = false,
                                 default = nil)
  if valid_597548 != nil:
    section.add "X-Amz-Date", valid_597548
  var valid_597549 = header.getOrDefault("X-Amz-Security-Token")
  valid_597549 = validateParameter(valid_597549, JString, required = false,
                                 default = nil)
  if valid_597549 != nil:
    section.add "X-Amz-Security-Token", valid_597549
  var valid_597550 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597550 = validateParameter(valid_597550, JString, required = false,
                                 default = nil)
  if valid_597550 != nil:
    section.add "X-Amz-Content-Sha256", valid_597550
  var valid_597551 = header.getOrDefault("X-Amz-Algorithm")
  valid_597551 = validateParameter(valid_597551, JString, required = false,
                                 default = nil)
  if valid_597551 != nil:
    section.add "X-Amz-Algorithm", valid_597551
  var valid_597552 = header.getOrDefault("X-Amz-Signature")
  valid_597552 = validateParameter(valid_597552, JString, required = false,
                                 default = nil)
  if valid_597552 != nil:
    section.add "X-Amz-Signature", valid_597552
  var valid_597553 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597553 = validateParameter(valid_597553, JString, required = false,
                                 default = nil)
  if valid_597553 != nil:
    section.add "X-Amz-SignedHeaders", valid_597553
  var valid_597554 = header.getOrDefault("X-Amz-Credential")
  valid_597554 = validateParameter(valid_597554, JString, required = false,
                                 default = nil)
  if valid_597554 != nil:
    section.add "X-Amz-Credential", valid_597554
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597555: Call_GetListSigningCertificates_597540; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_597555.validator(path, query, header, formData, body)
  let scheme = call_597555.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597555.url(scheme.get, call_597555.host, call_597555.base,
                         call_597555.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597555, url, valid)

proc call*(call_597556: Call_GetListSigningCertificates_597540;
          UserName: string = ""; Action: string = "ListSigningCertificates";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597557 = newJObject()
  add(query_597557, "UserName", newJString(UserName))
  add(query_597557, "Action", newJString(Action))
  add(query_597557, "Marker", newJString(Marker))
  add(query_597557, "MaxItems", newJInt(MaxItems))
  add(query_597557, "Version", newJString(Version))
  result = call_597556.call(nil, query_597557, nil, nil, nil)

var getListSigningCertificates* = Call_GetListSigningCertificates_597540(
    name: "getListSigningCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_GetListSigningCertificates_597541, base: "/",
    url: url_GetListSigningCertificates_597542,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserPolicies_597595 = ref object of OpenApiRestCall_593437
proc url_PostListUserPolicies_597597(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListUserPolicies_597596(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597598 = query.getOrDefault("Action")
  valid_597598 = validateParameter(valid_597598, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_597598 != nil:
    section.add "Action", valid_597598
  var valid_597599 = query.getOrDefault("Version")
  valid_597599 = validateParameter(valid_597599, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597599 != nil:
    section.add "Version", valid_597599
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597600 = header.getOrDefault("X-Amz-Date")
  valid_597600 = validateParameter(valid_597600, JString, required = false,
                                 default = nil)
  if valid_597600 != nil:
    section.add "X-Amz-Date", valid_597600
  var valid_597601 = header.getOrDefault("X-Amz-Security-Token")
  valid_597601 = validateParameter(valid_597601, JString, required = false,
                                 default = nil)
  if valid_597601 != nil:
    section.add "X-Amz-Security-Token", valid_597601
  var valid_597602 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597602 = validateParameter(valid_597602, JString, required = false,
                                 default = nil)
  if valid_597602 != nil:
    section.add "X-Amz-Content-Sha256", valid_597602
  var valid_597603 = header.getOrDefault("X-Amz-Algorithm")
  valid_597603 = validateParameter(valid_597603, JString, required = false,
                                 default = nil)
  if valid_597603 != nil:
    section.add "X-Amz-Algorithm", valid_597603
  var valid_597604 = header.getOrDefault("X-Amz-Signature")
  valid_597604 = validateParameter(valid_597604, JString, required = false,
                                 default = nil)
  if valid_597604 != nil:
    section.add "X-Amz-Signature", valid_597604
  var valid_597605 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597605 = validateParameter(valid_597605, JString, required = false,
                                 default = nil)
  if valid_597605 != nil:
    section.add "X-Amz-SignedHeaders", valid_597605
  var valid_597606 = header.getOrDefault("X-Amz-Credential")
  valid_597606 = validateParameter(valid_597606, JString, required = false,
                                 default = nil)
  if valid_597606 != nil:
    section.add "X-Amz-Credential", valid_597606
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_597607 = formData.getOrDefault("UserName")
  valid_597607 = validateParameter(valid_597607, JString, required = true,
                                 default = nil)
  if valid_597607 != nil:
    section.add "UserName", valid_597607
  var valid_597608 = formData.getOrDefault("Marker")
  valid_597608 = validateParameter(valid_597608, JString, required = false,
                                 default = nil)
  if valid_597608 != nil:
    section.add "Marker", valid_597608
  var valid_597609 = formData.getOrDefault("MaxItems")
  valid_597609 = validateParameter(valid_597609, JInt, required = false, default = nil)
  if valid_597609 != nil:
    section.add "MaxItems", valid_597609
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597610: Call_PostListUserPolicies_597595; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_597610.validator(path, query, header, formData, body)
  let scheme = call_597610.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597610.url(scheme.get, call_597610.host, call_597610.base,
                         call_597610.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597610, url, valid)

proc call*(call_597611: Call_PostListUserPolicies_597595; UserName: string;
          Marker: string = ""; Action: string = "ListUserPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597612 = newJObject()
  var formData_597613 = newJObject()
  add(formData_597613, "UserName", newJString(UserName))
  add(formData_597613, "Marker", newJString(Marker))
  add(query_597612, "Action", newJString(Action))
  add(formData_597613, "MaxItems", newJInt(MaxItems))
  add(query_597612, "Version", newJString(Version))
  result = call_597611.call(nil, query_597612, nil, formData_597613, nil)

var postListUserPolicies* = Call_PostListUserPolicies_597595(
    name: "postListUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_PostListUserPolicies_597596, base: "/",
    url: url_PostListUserPolicies_597597, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserPolicies_597577 = ref object of OpenApiRestCall_593437
proc url_GetListUserPolicies_597579(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListUserPolicies_597578(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_597580 = query.getOrDefault("UserName")
  valid_597580 = validateParameter(valid_597580, JString, required = true,
                                 default = nil)
  if valid_597580 != nil:
    section.add "UserName", valid_597580
  var valid_597581 = query.getOrDefault("Action")
  valid_597581 = validateParameter(valid_597581, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_597581 != nil:
    section.add "Action", valid_597581
  var valid_597582 = query.getOrDefault("Marker")
  valid_597582 = validateParameter(valid_597582, JString, required = false,
                                 default = nil)
  if valid_597582 != nil:
    section.add "Marker", valid_597582
  var valid_597583 = query.getOrDefault("MaxItems")
  valid_597583 = validateParameter(valid_597583, JInt, required = false, default = nil)
  if valid_597583 != nil:
    section.add "MaxItems", valid_597583
  var valid_597584 = query.getOrDefault("Version")
  valid_597584 = validateParameter(valid_597584, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597584 != nil:
    section.add "Version", valid_597584
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597585 = header.getOrDefault("X-Amz-Date")
  valid_597585 = validateParameter(valid_597585, JString, required = false,
                                 default = nil)
  if valid_597585 != nil:
    section.add "X-Amz-Date", valid_597585
  var valid_597586 = header.getOrDefault("X-Amz-Security-Token")
  valid_597586 = validateParameter(valid_597586, JString, required = false,
                                 default = nil)
  if valid_597586 != nil:
    section.add "X-Amz-Security-Token", valid_597586
  var valid_597587 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597587 = validateParameter(valid_597587, JString, required = false,
                                 default = nil)
  if valid_597587 != nil:
    section.add "X-Amz-Content-Sha256", valid_597587
  var valid_597588 = header.getOrDefault("X-Amz-Algorithm")
  valid_597588 = validateParameter(valid_597588, JString, required = false,
                                 default = nil)
  if valid_597588 != nil:
    section.add "X-Amz-Algorithm", valid_597588
  var valid_597589 = header.getOrDefault("X-Amz-Signature")
  valid_597589 = validateParameter(valid_597589, JString, required = false,
                                 default = nil)
  if valid_597589 != nil:
    section.add "X-Amz-Signature", valid_597589
  var valid_597590 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597590 = validateParameter(valid_597590, JString, required = false,
                                 default = nil)
  if valid_597590 != nil:
    section.add "X-Amz-SignedHeaders", valid_597590
  var valid_597591 = header.getOrDefault("X-Amz-Credential")
  valid_597591 = validateParameter(valid_597591, JString, required = false,
                                 default = nil)
  if valid_597591 != nil:
    section.add "X-Amz-Credential", valid_597591
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597592: Call_GetListUserPolicies_597577; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_597592.validator(path, query, header, formData, body)
  let scheme = call_597592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597592.url(scheme.get, call_597592.host, call_597592.base,
                         call_597592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597592, url, valid)

proc call*(call_597593: Call_GetListUserPolicies_597577; UserName: string;
          Action: string = "ListUserPolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597594 = newJObject()
  add(query_597594, "UserName", newJString(UserName))
  add(query_597594, "Action", newJString(Action))
  add(query_597594, "Marker", newJString(Marker))
  add(query_597594, "MaxItems", newJInt(MaxItems))
  add(query_597594, "Version", newJString(Version))
  result = call_597593.call(nil, query_597594, nil, nil, nil)

var getListUserPolicies* = Call_GetListUserPolicies_597577(
    name: "getListUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_GetListUserPolicies_597578, base: "/",
    url: url_GetListUserPolicies_597579, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserTags_597632 = ref object of OpenApiRestCall_593437
proc url_PostListUserTags_597634(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListUserTags_597633(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597635 = query.getOrDefault("Action")
  valid_597635 = validateParameter(valid_597635, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_597635 != nil:
    section.add "Action", valid_597635
  var valid_597636 = query.getOrDefault("Version")
  valid_597636 = validateParameter(valid_597636, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597636 != nil:
    section.add "Version", valid_597636
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597637 = header.getOrDefault("X-Amz-Date")
  valid_597637 = validateParameter(valid_597637, JString, required = false,
                                 default = nil)
  if valid_597637 != nil:
    section.add "X-Amz-Date", valid_597637
  var valid_597638 = header.getOrDefault("X-Amz-Security-Token")
  valid_597638 = validateParameter(valid_597638, JString, required = false,
                                 default = nil)
  if valid_597638 != nil:
    section.add "X-Amz-Security-Token", valid_597638
  var valid_597639 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597639 = validateParameter(valid_597639, JString, required = false,
                                 default = nil)
  if valid_597639 != nil:
    section.add "X-Amz-Content-Sha256", valid_597639
  var valid_597640 = header.getOrDefault("X-Amz-Algorithm")
  valid_597640 = validateParameter(valid_597640, JString, required = false,
                                 default = nil)
  if valid_597640 != nil:
    section.add "X-Amz-Algorithm", valid_597640
  var valid_597641 = header.getOrDefault("X-Amz-Signature")
  valid_597641 = validateParameter(valid_597641, JString, required = false,
                                 default = nil)
  if valid_597641 != nil:
    section.add "X-Amz-Signature", valid_597641
  var valid_597642 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597642 = validateParameter(valid_597642, JString, required = false,
                                 default = nil)
  if valid_597642 != nil:
    section.add "X-Amz-SignedHeaders", valid_597642
  var valid_597643 = header.getOrDefault("X-Amz-Credential")
  valid_597643 = validateParameter(valid_597643, JString, required = false,
                                 default = nil)
  if valid_597643 != nil:
    section.add "X-Amz-Credential", valid_597643
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_597644 = formData.getOrDefault("UserName")
  valid_597644 = validateParameter(valid_597644, JString, required = true,
                                 default = nil)
  if valid_597644 != nil:
    section.add "UserName", valid_597644
  var valid_597645 = formData.getOrDefault("Marker")
  valid_597645 = validateParameter(valid_597645, JString, required = false,
                                 default = nil)
  if valid_597645 != nil:
    section.add "Marker", valid_597645
  var valid_597646 = formData.getOrDefault("MaxItems")
  valid_597646 = validateParameter(valid_597646, JInt, required = false, default = nil)
  if valid_597646 != nil:
    section.add "MaxItems", valid_597646
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597647: Call_PostListUserTags_597632; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_597647.validator(path, query, header, formData, body)
  let scheme = call_597647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597647.url(scheme.get, call_597647.host, call_597647.base,
                         call_597647.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597647, url, valid)

proc call*(call_597648: Call_PostListUserTags_597632; UserName: string;
          Marker: string = ""; Action: string = "ListUserTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597649 = newJObject()
  var formData_597650 = newJObject()
  add(formData_597650, "UserName", newJString(UserName))
  add(formData_597650, "Marker", newJString(Marker))
  add(query_597649, "Action", newJString(Action))
  add(formData_597650, "MaxItems", newJInt(MaxItems))
  add(query_597649, "Version", newJString(Version))
  result = call_597648.call(nil, query_597649, nil, formData_597650, nil)

var postListUserTags* = Call_PostListUserTags_597632(name: "postListUserTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_PostListUserTags_597633,
    base: "/", url: url_PostListUserTags_597634,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserTags_597614 = ref object of OpenApiRestCall_593437
proc url_GetListUserTags_597616(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListUserTags_597615(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_597617 = query.getOrDefault("UserName")
  valid_597617 = validateParameter(valid_597617, JString, required = true,
                                 default = nil)
  if valid_597617 != nil:
    section.add "UserName", valid_597617
  var valid_597618 = query.getOrDefault("Action")
  valid_597618 = validateParameter(valid_597618, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_597618 != nil:
    section.add "Action", valid_597618
  var valid_597619 = query.getOrDefault("Marker")
  valid_597619 = validateParameter(valid_597619, JString, required = false,
                                 default = nil)
  if valid_597619 != nil:
    section.add "Marker", valid_597619
  var valid_597620 = query.getOrDefault("MaxItems")
  valid_597620 = validateParameter(valid_597620, JInt, required = false, default = nil)
  if valid_597620 != nil:
    section.add "MaxItems", valid_597620
  var valid_597621 = query.getOrDefault("Version")
  valid_597621 = validateParameter(valid_597621, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597621 != nil:
    section.add "Version", valid_597621
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597622 = header.getOrDefault("X-Amz-Date")
  valid_597622 = validateParameter(valid_597622, JString, required = false,
                                 default = nil)
  if valid_597622 != nil:
    section.add "X-Amz-Date", valid_597622
  var valid_597623 = header.getOrDefault("X-Amz-Security-Token")
  valid_597623 = validateParameter(valid_597623, JString, required = false,
                                 default = nil)
  if valid_597623 != nil:
    section.add "X-Amz-Security-Token", valid_597623
  var valid_597624 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597624 = validateParameter(valid_597624, JString, required = false,
                                 default = nil)
  if valid_597624 != nil:
    section.add "X-Amz-Content-Sha256", valid_597624
  var valid_597625 = header.getOrDefault("X-Amz-Algorithm")
  valid_597625 = validateParameter(valid_597625, JString, required = false,
                                 default = nil)
  if valid_597625 != nil:
    section.add "X-Amz-Algorithm", valid_597625
  var valid_597626 = header.getOrDefault("X-Amz-Signature")
  valid_597626 = validateParameter(valid_597626, JString, required = false,
                                 default = nil)
  if valid_597626 != nil:
    section.add "X-Amz-Signature", valid_597626
  var valid_597627 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597627 = validateParameter(valid_597627, JString, required = false,
                                 default = nil)
  if valid_597627 != nil:
    section.add "X-Amz-SignedHeaders", valid_597627
  var valid_597628 = header.getOrDefault("X-Amz-Credential")
  valid_597628 = validateParameter(valid_597628, JString, required = false,
                                 default = nil)
  if valid_597628 != nil:
    section.add "X-Amz-Credential", valid_597628
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597629: Call_GetListUserTags_597614; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_597629.validator(path, query, header, formData, body)
  let scheme = call_597629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597629.url(scheme.get, call_597629.host, call_597629.base,
                         call_597629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597629, url, valid)

proc call*(call_597630: Call_GetListUserTags_597614; UserName: string;
          Action: string = "ListUserTags"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597631 = newJObject()
  add(query_597631, "UserName", newJString(UserName))
  add(query_597631, "Action", newJString(Action))
  add(query_597631, "Marker", newJString(Marker))
  add(query_597631, "MaxItems", newJInt(MaxItems))
  add(query_597631, "Version", newJString(Version))
  result = call_597630.call(nil, query_597631, nil, nil, nil)

var getListUserTags* = Call_GetListUserTags_597614(name: "getListUserTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_GetListUserTags_597615,
    base: "/", url: url_GetListUserTags_597616, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUsers_597669 = ref object of OpenApiRestCall_593437
proc url_PostListUsers_597671(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListUsers_597670(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597672 = query.getOrDefault("Action")
  valid_597672 = validateParameter(valid_597672, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_597672 != nil:
    section.add "Action", valid_597672
  var valid_597673 = query.getOrDefault("Version")
  valid_597673 = validateParameter(valid_597673, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597673 != nil:
    section.add "Version", valid_597673
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597674 = header.getOrDefault("X-Amz-Date")
  valid_597674 = validateParameter(valid_597674, JString, required = false,
                                 default = nil)
  if valid_597674 != nil:
    section.add "X-Amz-Date", valid_597674
  var valid_597675 = header.getOrDefault("X-Amz-Security-Token")
  valid_597675 = validateParameter(valid_597675, JString, required = false,
                                 default = nil)
  if valid_597675 != nil:
    section.add "X-Amz-Security-Token", valid_597675
  var valid_597676 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597676 = validateParameter(valid_597676, JString, required = false,
                                 default = nil)
  if valid_597676 != nil:
    section.add "X-Amz-Content-Sha256", valid_597676
  var valid_597677 = header.getOrDefault("X-Amz-Algorithm")
  valid_597677 = validateParameter(valid_597677, JString, required = false,
                                 default = nil)
  if valid_597677 != nil:
    section.add "X-Amz-Algorithm", valid_597677
  var valid_597678 = header.getOrDefault("X-Amz-Signature")
  valid_597678 = validateParameter(valid_597678, JString, required = false,
                                 default = nil)
  if valid_597678 != nil:
    section.add "X-Amz-Signature", valid_597678
  var valid_597679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597679 = validateParameter(valid_597679, JString, required = false,
                                 default = nil)
  if valid_597679 != nil:
    section.add "X-Amz-SignedHeaders", valid_597679
  var valid_597680 = header.getOrDefault("X-Amz-Credential")
  valid_597680 = validateParameter(valid_597680, JString, required = false,
                                 default = nil)
  if valid_597680 != nil:
    section.add "X-Amz-Credential", valid_597680
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_597681 = formData.getOrDefault("PathPrefix")
  valid_597681 = validateParameter(valid_597681, JString, required = false,
                                 default = nil)
  if valid_597681 != nil:
    section.add "PathPrefix", valid_597681
  var valid_597682 = formData.getOrDefault("Marker")
  valid_597682 = validateParameter(valid_597682, JString, required = false,
                                 default = nil)
  if valid_597682 != nil:
    section.add "Marker", valid_597682
  var valid_597683 = formData.getOrDefault("MaxItems")
  valid_597683 = validateParameter(valid_597683, JInt, required = false, default = nil)
  if valid_597683 != nil:
    section.add "MaxItems", valid_597683
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597684: Call_PostListUsers_597669; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597684.validator(path, query, header, formData, body)
  let scheme = call_597684.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597684.url(scheme.get, call_597684.host, call_597684.base,
                         call_597684.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597684, url, valid)

proc call*(call_597685: Call_PostListUsers_597669; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListUsers"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597686 = newJObject()
  var formData_597687 = newJObject()
  add(formData_597687, "PathPrefix", newJString(PathPrefix))
  add(formData_597687, "Marker", newJString(Marker))
  add(query_597686, "Action", newJString(Action))
  add(formData_597687, "MaxItems", newJInt(MaxItems))
  add(query_597686, "Version", newJString(Version))
  result = call_597685.call(nil, query_597686, nil, formData_597687, nil)

var postListUsers* = Call_PostListUsers_597669(name: "postListUsers",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_PostListUsers_597670,
    base: "/", url: url_PostListUsers_597671, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUsers_597651 = ref object of OpenApiRestCall_593437
proc url_GetListUsers_597653(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListUsers_597652(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_597654 = query.getOrDefault("PathPrefix")
  valid_597654 = validateParameter(valid_597654, JString, required = false,
                                 default = nil)
  if valid_597654 != nil:
    section.add "PathPrefix", valid_597654
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597655 = query.getOrDefault("Action")
  valid_597655 = validateParameter(valid_597655, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_597655 != nil:
    section.add "Action", valid_597655
  var valid_597656 = query.getOrDefault("Marker")
  valid_597656 = validateParameter(valid_597656, JString, required = false,
                                 default = nil)
  if valid_597656 != nil:
    section.add "Marker", valid_597656
  var valid_597657 = query.getOrDefault("MaxItems")
  valid_597657 = validateParameter(valid_597657, JInt, required = false, default = nil)
  if valid_597657 != nil:
    section.add "MaxItems", valid_597657
  var valid_597658 = query.getOrDefault("Version")
  valid_597658 = validateParameter(valid_597658, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597658 != nil:
    section.add "Version", valid_597658
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597659 = header.getOrDefault("X-Amz-Date")
  valid_597659 = validateParameter(valid_597659, JString, required = false,
                                 default = nil)
  if valid_597659 != nil:
    section.add "X-Amz-Date", valid_597659
  var valid_597660 = header.getOrDefault("X-Amz-Security-Token")
  valid_597660 = validateParameter(valid_597660, JString, required = false,
                                 default = nil)
  if valid_597660 != nil:
    section.add "X-Amz-Security-Token", valid_597660
  var valid_597661 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597661 = validateParameter(valid_597661, JString, required = false,
                                 default = nil)
  if valid_597661 != nil:
    section.add "X-Amz-Content-Sha256", valid_597661
  var valid_597662 = header.getOrDefault("X-Amz-Algorithm")
  valid_597662 = validateParameter(valid_597662, JString, required = false,
                                 default = nil)
  if valid_597662 != nil:
    section.add "X-Amz-Algorithm", valid_597662
  var valid_597663 = header.getOrDefault("X-Amz-Signature")
  valid_597663 = validateParameter(valid_597663, JString, required = false,
                                 default = nil)
  if valid_597663 != nil:
    section.add "X-Amz-Signature", valid_597663
  var valid_597664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597664 = validateParameter(valid_597664, JString, required = false,
                                 default = nil)
  if valid_597664 != nil:
    section.add "X-Amz-SignedHeaders", valid_597664
  var valid_597665 = header.getOrDefault("X-Amz-Credential")
  valid_597665 = validateParameter(valid_597665, JString, required = false,
                                 default = nil)
  if valid_597665 != nil:
    section.add "X-Amz-Credential", valid_597665
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597666: Call_GetListUsers_597651; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597666.validator(path, query, header, formData, body)
  let scheme = call_597666.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597666.url(scheme.get, call_597666.host, call_597666.base,
                         call_597666.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597666, url, valid)

proc call*(call_597667: Call_GetListUsers_597651; PathPrefix: string = "";
          Action: string = "ListUsers"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597668 = newJObject()
  add(query_597668, "PathPrefix", newJString(PathPrefix))
  add(query_597668, "Action", newJString(Action))
  add(query_597668, "Marker", newJString(Marker))
  add(query_597668, "MaxItems", newJInt(MaxItems))
  add(query_597668, "Version", newJString(Version))
  result = call_597667.call(nil, query_597668, nil, nil, nil)

var getListUsers* = Call_GetListUsers_597651(name: "getListUsers",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_GetListUsers_597652, base: "/",
    url: url_GetListUsers_597653, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVirtualMFADevices_597706 = ref object of OpenApiRestCall_593437
proc url_PostListVirtualMFADevices_597708(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListVirtualMFADevices_597707(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597709 = query.getOrDefault("Action")
  valid_597709 = validateParameter(valid_597709, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_597709 != nil:
    section.add "Action", valid_597709
  var valid_597710 = query.getOrDefault("Version")
  valid_597710 = validateParameter(valid_597710, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597710 != nil:
    section.add "Version", valid_597710
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597711 = header.getOrDefault("X-Amz-Date")
  valid_597711 = validateParameter(valid_597711, JString, required = false,
                                 default = nil)
  if valid_597711 != nil:
    section.add "X-Amz-Date", valid_597711
  var valid_597712 = header.getOrDefault("X-Amz-Security-Token")
  valid_597712 = validateParameter(valid_597712, JString, required = false,
                                 default = nil)
  if valid_597712 != nil:
    section.add "X-Amz-Security-Token", valid_597712
  var valid_597713 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597713 = validateParameter(valid_597713, JString, required = false,
                                 default = nil)
  if valid_597713 != nil:
    section.add "X-Amz-Content-Sha256", valid_597713
  var valid_597714 = header.getOrDefault("X-Amz-Algorithm")
  valid_597714 = validateParameter(valid_597714, JString, required = false,
                                 default = nil)
  if valid_597714 != nil:
    section.add "X-Amz-Algorithm", valid_597714
  var valid_597715 = header.getOrDefault("X-Amz-Signature")
  valid_597715 = validateParameter(valid_597715, JString, required = false,
                                 default = nil)
  if valid_597715 != nil:
    section.add "X-Amz-Signature", valid_597715
  var valid_597716 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597716 = validateParameter(valid_597716, JString, required = false,
                                 default = nil)
  if valid_597716 != nil:
    section.add "X-Amz-SignedHeaders", valid_597716
  var valid_597717 = header.getOrDefault("X-Amz-Credential")
  valid_597717 = validateParameter(valid_597717, JString, required = false,
                                 default = nil)
  if valid_597717 != nil:
    section.add "X-Amz-Credential", valid_597717
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_597718 = formData.getOrDefault("Marker")
  valid_597718 = validateParameter(valid_597718, JString, required = false,
                                 default = nil)
  if valid_597718 != nil:
    section.add "Marker", valid_597718
  var valid_597719 = formData.getOrDefault("AssignmentStatus")
  valid_597719 = validateParameter(valid_597719, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_597719 != nil:
    section.add "AssignmentStatus", valid_597719
  var valid_597720 = formData.getOrDefault("MaxItems")
  valid_597720 = validateParameter(valid_597720, JInt, required = false, default = nil)
  if valid_597720 != nil:
    section.add "MaxItems", valid_597720
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597721: Call_PostListVirtualMFADevices_597706; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597721.validator(path, query, header, formData, body)
  let scheme = call_597721.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597721.url(scheme.get, call_597721.host, call_597721.base,
                         call_597721.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597721, url, valid)

proc call*(call_597722: Call_PostListVirtualMFADevices_597706; Marker: string = "";
          Action: string = "ListVirtualMFADevices";
          AssignmentStatus: string = "Assigned"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_597723 = newJObject()
  var formData_597724 = newJObject()
  add(formData_597724, "Marker", newJString(Marker))
  add(query_597723, "Action", newJString(Action))
  add(formData_597724, "AssignmentStatus", newJString(AssignmentStatus))
  add(formData_597724, "MaxItems", newJInt(MaxItems))
  add(query_597723, "Version", newJString(Version))
  result = call_597722.call(nil, query_597723, nil, formData_597724, nil)

var postListVirtualMFADevices* = Call_PostListVirtualMFADevices_597706(
    name: "postListVirtualMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_PostListVirtualMFADevices_597707, base: "/",
    url: url_PostListVirtualMFADevices_597708,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVirtualMFADevices_597688 = ref object of OpenApiRestCall_593437
proc url_GetListVirtualMFADevices_597690(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListVirtualMFADevices_597689(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597691 = query.getOrDefault("Action")
  valid_597691 = validateParameter(valid_597691, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_597691 != nil:
    section.add "Action", valid_597691
  var valid_597692 = query.getOrDefault("Marker")
  valid_597692 = validateParameter(valid_597692, JString, required = false,
                                 default = nil)
  if valid_597692 != nil:
    section.add "Marker", valid_597692
  var valid_597693 = query.getOrDefault("MaxItems")
  valid_597693 = validateParameter(valid_597693, JInt, required = false, default = nil)
  if valid_597693 != nil:
    section.add "MaxItems", valid_597693
  var valid_597694 = query.getOrDefault("Version")
  valid_597694 = validateParameter(valid_597694, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597694 != nil:
    section.add "Version", valid_597694
  var valid_597695 = query.getOrDefault("AssignmentStatus")
  valid_597695 = validateParameter(valid_597695, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_597695 != nil:
    section.add "AssignmentStatus", valid_597695
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597696 = header.getOrDefault("X-Amz-Date")
  valid_597696 = validateParameter(valid_597696, JString, required = false,
                                 default = nil)
  if valid_597696 != nil:
    section.add "X-Amz-Date", valid_597696
  var valid_597697 = header.getOrDefault("X-Amz-Security-Token")
  valid_597697 = validateParameter(valid_597697, JString, required = false,
                                 default = nil)
  if valid_597697 != nil:
    section.add "X-Amz-Security-Token", valid_597697
  var valid_597698 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597698 = validateParameter(valid_597698, JString, required = false,
                                 default = nil)
  if valid_597698 != nil:
    section.add "X-Amz-Content-Sha256", valid_597698
  var valid_597699 = header.getOrDefault("X-Amz-Algorithm")
  valid_597699 = validateParameter(valid_597699, JString, required = false,
                                 default = nil)
  if valid_597699 != nil:
    section.add "X-Amz-Algorithm", valid_597699
  var valid_597700 = header.getOrDefault("X-Amz-Signature")
  valid_597700 = validateParameter(valid_597700, JString, required = false,
                                 default = nil)
  if valid_597700 != nil:
    section.add "X-Amz-Signature", valid_597700
  var valid_597701 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597701 = validateParameter(valid_597701, JString, required = false,
                                 default = nil)
  if valid_597701 != nil:
    section.add "X-Amz-SignedHeaders", valid_597701
  var valid_597702 = header.getOrDefault("X-Amz-Credential")
  valid_597702 = validateParameter(valid_597702, JString, required = false,
                                 default = nil)
  if valid_597702 != nil:
    section.add "X-Amz-Credential", valid_597702
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597703: Call_GetListVirtualMFADevices_597688; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_597703.validator(path, query, header, formData, body)
  let scheme = call_597703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597703.url(scheme.get, call_597703.host, call_597703.base,
                         call_597703.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597703, url, valid)

proc call*(call_597704: Call_GetListVirtualMFADevices_597688;
          Action: string = "ListVirtualMFADevices"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08";
          AssignmentStatus: string = "Assigned"): Recallable =
  ## getListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  var query_597705 = newJObject()
  add(query_597705, "Action", newJString(Action))
  add(query_597705, "Marker", newJString(Marker))
  add(query_597705, "MaxItems", newJInt(MaxItems))
  add(query_597705, "Version", newJString(Version))
  add(query_597705, "AssignmentStatus", newJString(AssignmentStatus))
  result = call_597704.call(nil, query_597705, nil, nil, nil)

var getListVirtualMFADevices* = Call_GetListVirtualMFADevices_597688(
    name: "getListVirtualMFADevices", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_GetListVirtualMFADevices_597689, base: "/",
    url: url_GetListVirtualMFADevices_597690, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutGroupPolicy_597743 = ref object of OpenApiRestCall_593437
proc url_PostPutGroupPolicy_597745(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutGroupPolicy_597744(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597746 = query.getOrDefault("Action")
  valid_597746 = validateParameter(valid_597746, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_597746 != nil:
    section.add "Action", valid_597746
  var valid_597747 = query.getOrDefault("Version")
  valid_597747 = validateParameter(valid_597747, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597747 != nil:
    section.add "Version", valid_597747
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597748 = header.getOrDefault("X-Amz-Date")
  valid_597748 = validateParameter(valid_597748, JString, required = false,
                                 default = nil)
  if valid_597748 != nil:
    section.add "X-Amz-Date", valid_597748
  var valid_597749 = header.getOrDefault("X-Amz-Security-Token")
  valid_597749 = validateParameter(valid_597749, JString, required = false,
                                 default = nil)
  if valid_597749 != nil:
    section.add "X-Amz-Security-Token", valid_597749
  var valid_597750 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597750 = validateParameter(valid_597750, JString, required = false,
                                 default = nil)
  if valid_597750 != nil:
    section.add "X-Amz-Content-Sha256", valid_597750
  var valid_597751 = header.getOrDefault("X-Amz-Algorithm")
  valid_597751 = validateParameter(valid_597751, JString, required = false,
                                 default = nil)
  if valid_597751 != nil:
    section.add "X-Amz-Algorithm", valid_597751
  var valid_597752 = header.getOrDefault("X-Amz-Signature")
  valid_597752 = validateParameter(valid_597752, JString, required = false,
                                 default = nil)
  if valid_597752 != nil:
    section.add "X-Amz-Signature", valid_597752
  var valid_597753 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597753 = validateParameter(valid_597753, JString, required = false,
                                 default = nil)
  if valid_597753 != nil:
    section.add "X-Amz-SignedHeaders", valid_597753
  var valid_597754 = header.getOrDefault("X-Amz-Credential")
  valid_597754 = validateParameter(valid_597754, JString, required = false,
                                 default = nil)
  if valid_597754 != nil:
    section.add "X-Amz-Credential", valid_597754
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_597755 = formData.getOrDefault("PolicyName")
  valid_597755 = validateParameter(valid_597755, JString, required = true,
                                 default = nil)
  if valid_597755 != nil:
    section.add "PolicyName", valid_597755
  var valid_597756 = formData.getOrDefault("GroupName")
  valid_597756 = validateParameter(valid_597756, JString, required = true,
                                 default = nil)
  if valid_597756 != nil:
    section.add "GroupName", valid_597756
  var valid_597757 = formData.getOrDefault("PolicyDocument")
  valid_597757 = validateParameter(valid_597757, JString, required = true,
                                 default = nil)
  if valid_597757 != nil:
    section.add "PolicyDocument", valid_597757
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597758: Call_PostPutGroupPolicy_597743; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_597758.validator(path, query, header, formData, body)
  let scheme = call_597758.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597758.url(scheme.get, call_597758.host, call_597758.base,
                         call_597758.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597758, url, valid)

proc call*(call_597759: Call_PostPutGroupPolicy_597743; PolicyName: string;
          GroupName: string; PolicyDocument: string;
          Action: string = "PutGroupPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597760 = newJObject()
  var formData_597761 = newJObject()
  add(formData_597761, "PolicyName", newJString(PolicyName))
  add(formData_597761, "GroupName", newJString(GroupName))
  add(formData_597761, "PolicyDocument", newJString(PolicyDocument))
  add(query_597760, "Action", newJString(Action))
  add(query_597760, "Version", newJString(Version))
  result = call_597759.call(nil, query_597760, nil, formData_597761, nil)

var postPutGroupPolicy* = Call_PostPutGroupPolicy_597743(
    name: "postPutGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutGroupPolicy",
    validator: validate_PostPutGroupPolicy_597744, base: "/",
    url: url_PostPutGroupPolicy_597745, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutGroupPolicy_597725 = ref object of OpenApiRestCall_593437
proc url_GetPutGroupPolicy_597727(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutGroupPolicy_597726(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597728 = query.getOrDefault("Action")
  valid_597728 = validateParameter(valid_597728, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_597728 != nil:
    section.add "Action", valid_597728
  var valid_597729 = query.getOrDefault("PolicyDocument")
  valid_597729 = validateParameter(valid_597729, JString, required = true,
                                 default = nil)
  if valid_597729 != nil:
    section.add "PolicyDocument", valid_597729
  var valid_597730 = query.getOrDefault("GroupName")
  valid_597730 = validateParameter(valid_597730, JString, required = true,
                                 default = nil)
  if valid_597730 != nil:
    section.add "GroupName", valid_597730
  var valid_597731 = query.getOrDefault("Version")
  valid_597731 = validateParameter(valid_597731, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597731 != nil:
    section.add "Version", valid_597731
  var valid_597732 = query.getOrDefault("PolicyName")
  valid_597732 = validateParameter(valid_597732, JString, required = true,
                                 default = nil)
  if valid_597732 != nil:
    section.add "PolicyName", valid_597732
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597733 = header.getOrDefault("X-Amz-Date")
  valid_597733 = validateParameter(valid_597733, JString, required = false,
                                 default = nil)
  if valid_597733 != nil:
    section.add "X-Amz-Date", valid_597733
  var valid_597734 = header.getOrDefault("X-Amz-Security-Token")
  valid_597734 = validateParameter(valid_597734, JString, required = false,
                                 default = nil)
  if valid_597734 != nil:
    section.add "X-Amz-Security-Token", valid_597734
  var valid_597735 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597735 = validateParameter(valid_597735, JString, required = false,
                                 default = nil)
  if valid_597735 != nil:
    section.add "X-Amz-Content-Sha256", valid_597735
  var valid_597736 = header.getOrDefault("X-Amz-Algorithm")
  valid_597736 = validateParameter(valid_597736, JString, required = false,
                                 default = nil)
  if valid_597736 != nil:
    section.add "X-Amz-Algorithm", valid_597736
  var valid_597737 = header.getOrDefault("X-Amz-Signature")
  valid_597737 = validateParameter(valid_597737, JString, required = false,
                                 default = nil)
  if valid_597737 != nil:
    section.add "X-Amz-Signature", valid_597737
  var valid_597738 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597738 = validateParameter(valid_597738, JString, required = false,
                                 default = nil)
  if valid_597738 != nil:
    section.add "X-Amz-SignedHeaders", valid_597738
  var valid_597739 = header.getOrDefault("X-Amz-Credential")
  valid_597739 = validateParameter(valid_597739, JString, required = false,
                                 default = nil)
  if valid_597739 != nil:
    section.add "X-Amz-Credential", valid_597739
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597740: Call_GetPutGroupPolicy_597725; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_597740.validator(path, query, header, formData, body)
  let scheme = call_597740.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597740.url(scheme.get, call_597740.host, call_597740.base,
                         call_597740.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597740, url, valid)

proc call*(call_597741: Call_GetPutGroupPolicy_597725; PolicyDocument: string;
          GroupName: string; PolicyName: string; Action: string = "PutGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_597742 = newJObject()
  add(query_597742, "Action", newJString(Action))
  add(query_597742, "PolicyDocument", newJString(PolicyDocument))
  add(query_597742, "GroupName", newJString(GroupName))
  add(query_597742, "Version", newJString(Version))
  add(query_597742, "PolicyName", newJString(PolicyName))
  result = call_597741.call(nil, query_597742, nil, nil, nil)

var getPutGroupPolicy* = Call_GetPutGroupPolicy_597725(name: "getPutGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutGroupPolicy", validator: validate_GetPutGroupPolicy_597726,
    base: "/", url: url_GetPutGroupPolicy_597727,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePermissionsBoundary_597779 = ref object of OpenApiRestCall_593437
proc url_PostPutRolePermissionsBoundary_597781(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutRolePermissionsBoundary_597780(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597782 = query.getOrDefault("Action")
  valid_597782 = validateParameter(valid_597782, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_597782 != nil:
    section.add "Action", valid_597782
  var valid_597783 = query.getOrDefault("Version")
  valid_597783 = validateParameter(valid_597783, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597783 != nil:
    section.add "Version", valid_597783
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597784 = header.getOrDefault("X-Amz-Date")
  valid_597784 = validateParameter(valid_597784, JString, required = false,
                                 default = nil)
  if valid_597784 != nil:
    section.add "X-Amz-Date", valid_597784
  var valid_597785 = header.getOrDefault("X-Amz-Security-Token")
  valid_597785 = validateParameter(valid_597785, JString, required = false,
                                 default = nil)
  if valid_597785 != nil:
    section.add "X-Amz-Security-Token", valid_597785
  var valid_597786 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597786 = validateParameter(valid_597786, JString, required = false,
                                 default = nil)
  if valid_597786 != nil:
    section.add "X-Amz-Content-Sha256", valid_597786
  var valid_597787 = header.getOrDefault("X-Amz-Algorithm")
  valid_597787 = validateParameter(valid_597787, JString, required = false,
                                 default = nil)
  if valid_597787 != nil:
    section.add "X-Amz-Algorithm", valid_597787
  var valid_597788 = header.getOrDefault("X-Amz-Signature")
  valid_597788 = validateParameter(valid_597788, JString, required = false,
                                 default = nil)
  if valid_597788 != nil:
    section.add "X-Amz-Signature", valid_597788
  var valid_597789 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597789 = validateParameter(valid_597789, JString, required = false,
                                 default = nil)
  if valid_597789 != nil:
    section.add "X-Amz-SignedHeaders", valid_597789
  var valid_597790 = header.getOrDefault("X-Amz-Credential")
  valid_597790 = validateParameter(valid_597790, JString, required = false,
                                 default = nil)
  if valid_597790 != nil:
    section.add "X-Amz-Credential", valid_597790
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_597791 = formData.getOrDefault("RoleName")
  valid_597791 = validateParameter(valid_597791, JString, required = true,
                                 default = nil)
  if valid_597791 != nil:
    section.add "RoleName", valid_597791
  var valid_597792 = formData.getOrDefault("PermissionsBoundary")
  valid_597792 = validateParameter(valid_597792, JString, required = true,
                                 default = nil)
  if valid_597792 != nil:
    section.add "PermissionsBoundary", valid_597792
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597793: Call_PostPutRolePermissionsBoundary_597779; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_597793.validator(path, query, header, formData, body)
  let scheme = call_597793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597793.url(scheme.get, call_597793.host, call_597793.base,
                         call_597793.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597793, url, valid)

proc call*(call_597794: Call_PostPutRolePermissionsBoundary_597779;
          RoleName: string; PermissionsBoundary: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597795 = newJObject()
  var formData_597796 = newJObject()
  add(formData_597796, "RoleName", newJString(RoleName))
  add(formData_597796, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_597795, "Action", newJString(Action))
  add(query_597795, "Version", newJString(Version))
  result = call_597794.call(nil, query_597795, nil, formData_597796, nil)

var postPutRolePermissionsBoundary* = Call_PostPutRolePermissionsBoundary_597779(
    name: "postPutRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_PostPutRolePermissionsBoundary_597780, base: "/",
    url: url_PostPutRolePermissionsBoundary_597781,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePermissionsBoundary_597762 = ref object of OpenApiRestCall_593437
proc url_GetPutRolePermissionsBoundary_597764(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutRolePermissionsBoundary_597763(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597765 = query.getOrDefault("Action")
  valid_597765 = validateParameter(valid_597765, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_597765 != nil:
    section.add "Action", valid_597765
  var valid_597766 = query.getOrDefault("PermissionsBoundary")
  valid_597766 = validateParameter(valid_597766, JString, required = true,
                                 default = nil)
  if valid_597766 != nil:
    section.add "PermissionsBoundary", valid_597766
  var valid_597767 = query.getOrDefault("RoleName")
  valid_597767 = validateParameter(valid_597767, JString, required = true,
                                 default = nil)
  if valid_597767 != nil:
    section.add "RoleName", valid_597767
  var valid_597768 = query.getOrDefault("Version")
  valid_597768 = validateParameter(valid_597768, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597768 != nil:
    section.add "Version", valid_597768
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597769 = header.getOrDefault("X-Amz-Date")
  valid_597769 = validateParameter(valid_597769, JString, required = false,
                                 default = nil)
  if valid_597769 != nil:
    section.add "X-Amz-Date", valid_597769
  var valid_597770 = header.getOrDefault("X-Amz-Security-Token")
  valid_597770 = validateParameter(valid_597770, JString, required = false,
                                 default = nil)
  if valid_597770 != nil:
    section.add "X-Amz-Security-Token", valid_597770
  var valid_597771 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597771 = validateParameter(valid_597771, JString, required = false,
                                 default = nil)
  if valid_597771 != nil:
    section.add "X-Amz-Content-Sha256", valid_597771
  var valid_597772 = header.getOrDefault("X-Amz-Algorithm")
  valid_597772 = validateParameter(valid_597772, JString, required = false,
                                 default = nil)
  if valid_597772 != nil:
    section.add "X-Amz-Algorithm", valid_597772
  var valid_597773 = header.getOrDefault("X-Amz-Signature")
  valid_597773 = validateParameter(valid_597773, JString, required = false,
                                 default = nil)
  if valid_597773 != nil:
    section.add "X-Amz-Signature", valid_597773
  var valid_597774 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597774 = validateParameter(valid_597774, JString, required = false,
                                 default = nil)
  if valid_597774 != nil:
    section.add "X-Amz-SignedHeaders", valid_597774
  var valid_597775 = header.getOrDefault("X-Amz-Credential")
  valid_597775 = validateParameter(valid_597775, JString, required = false,
                                 default = nil)
  if valid_597775 != nil:
    section.add "X-Amz-Credential", valid_597775
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597776: Call_GetPutRolePermissionsBoundary_597762; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_597776.validator(path, query, header, formData, body)
  let scheme = call_597776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597776.url(scheme.get, call_597776.host, call_597776.base,
                         call_597776.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597776, url, valid)

proc call*(call_597777: Call_GetPutRolePermissionsBoundary_597762;
          PermissionsBoundary: string; RoleName: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Version: string (required)
  var query_597778 = newJObject()
  add(query_597778, "Action", newJString(Action))
  add(query_597778, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_597778, "RoleName", newJString(RoleName))
  add(query_597778, "Version", newJString(Version))
  result = call_597777.call(nil, query_597778, nil, nil, nil)

var getPutRolePermissionsBoundary* = Call_GetPutRolePermissionsBoundary_597762(
    name: "getPutRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_GetPutRolePermissionsBoundary_597763, base: "/",
    url: url_GetPutRolePermissionsBoundary_597764,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePolicy_597815 = ref object of OpenApiRestCall_593437
proc url_PostPutRolePolicy_597817(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutRolePolicy_597816(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597818 = query.getOrDefault("Action")
  valid_597818 = validateParameter(valid_597818, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_597818 != nil:
    section.add "Action", valid_597818
  var valid_597819 = query.getOrDefault("Version")
  valid_597819 = validateParameter(valid_597819, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597819 != nil:
    section.add "Version", valid_597819
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597820 = header.getOrDefault("X-Amz-Date")
  valid_597820 = validateParameter(valid_597820, JString, required = false,
                                 default = nil)
  if valid_597820 != nil:
    section.add "X-Amz-Date", valid_597820
  var valid_597821 = header.getOrDefault("X-Amz-Security-Token")
  valid_597821 = validateParameter(valid_597821, JString, required = false,
                                 default = nil)
  if valid_597821 != nil:
    section.add "X-Amz-Security-Token", valid_597821
  var valid_597822 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597822 = validateParameter(valid_597822, JString, required = false,
                                 default = nil)
  if valid_597822 != nil:
    section.add "X-Amz-Content-Sha256", valid_597822
  var valid_597823 = header.getOrDefault("X-Amz-Algorithm")
  valid_597823 = validateParameter(valid_597823, JString, required = false,
                                 default = nil)
  if valid_597823 != nil:
    section.add "X-Amz-Algorithm", valid_597823
  var valid_597824 = header.getOrDefault("X-Amz-Signature")
  valid_597824 = validateParameter(valid_597824, JString, required = false,
                                 default = nil)
  if valid_597824 != nil:
    section.add "X-Amz-Signature", valid_597824
  var valid_597825 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597825 = validateParameter(valid_597825, JString, required = false,
                                 default = nil)
  if valid_597825 != nil:
    section.add "X-Amz-SignedHeaders", valid_597825
  var valid_597826 = header.getOrDefault("X-Amz-Credential")
  valid_597826 = validateParameter(valid_597826, JString, required = false,
                                 default = nil)
  if valid_597826 != nil:
    section.add "X-Amz-Credential", valid_597826
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_597827 = formData.getOrDefault("PolicyName")
  valid_597827 = validateParameter(valid_597827, JString, required = true,
                                 default = nil)
  if valid_597827 != nil:
    section.add "PolicyName", valid_597827
  var valid_597828 = formData.getOrDefault("RoleName")
  valid_597828 = validateParameter(valid_597828, JString, required = true,
                                 default = nil)
  if valid_597828 != nil:
    section.add "RoleName", valid_597828
  var valid_597829 = formData.getOrDefault("PolicyDocument")
  valid_597829 = validateParameter(valid_597829, JString, required = true,
                                 default = nil)
  if valid_597829 != nil:
    section.add "PolicyDocument", valid_597829
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597830: Call_PostPutRolePolicy_597815; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_597830.validator(path, query, header, formData, body)
  let scheme = call_597830.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597830.url(scheme.get, call_597830.host, call_597830.base,
                         call_597830.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597830, url, valid)

proc call*(call_597831: Call_PostPutRolePolicy_597815; PolicyName: string;
          RoleName: string; PolicyDocument: string;
          Action: string = "PutRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597832 = newJObject()
  var formData_597833 = newJObject()
  add(formData_597833, "PolicyName", newJString(PolicyName))
  add(formData_597833, "RoleName", newJString(RoleName))
  add(formData_597833, "PolicyDocument", newJString(PolicyDocument))
  add(query_597832, "Action", newJString(Action))
  add(query_597832, "Version", newJString(Version))
  result = call_597831.call(nil, query_597832, nil, formData_597833, nil)

var postPutRolePolicy* = Call_PostPutRolePolicy_597815(name: "postPutRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_PostPutRolePolicy_597816,
    base: "/", url: url_PostPutRolePolicy_597817,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePolicy_597797 = ref object of OpenApiRestCall_593437
proc url_GetPutRolePolicy_597799(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutRolePolicy_597798(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597800 = query.getOrDefault("Action")
  valid_597800 = validateParameter(valid_597800, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_597800 != nil:
    section.add "Action", valid_597800
  var valid_597801 = query.getOrDefault("PolicyDocument")
  valid_597801 = validateParameter(valid_597801, JString, required = true,
                                 default = nil)
  if valid_597801 != nil:
    section.add "PolicyDocument", valid_597801
  var valid_597802 = query.getOrDefault("RoleName")
  valid_597802 = validateParameter(valid_597802, JString, required = true,
                                 default = nil)
  if valid_597802 != nil:
    section.add "RoleName", valid_597802
  var valid_597803 = query.getOrDefault("Version")
  valid_597803 = validateParameter(valid_597803, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597803 != nil:
    section.add "Version", valid_597803
  var valid_597804 = query.getOrDefault("PolicyName")
  valid_597804 = validateParameter(valid_597804, JString, required = true,
                                 default = nil)
  if valid_597804 != nil:
    section.add "PolicyName", valid_597804
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597805 = header.getOrDefault("X-Amz-Date")
  valid_597805 = validateParameter(valid_597805, JString, required = false,
                                 default = nil)
  if valid_597805 != nil:
    section.add "X-Amz-Date", valid_597805
  var valid_597806 = header.getOrDefault("X-Amz-Security-Token")
  valid_597806 = validateParameter(valid_597806, JString, required = false,
                                 default = nil)
  if valid_597806 != nil:
    section.add "X-Amz-Security-Token", valid_597806
  var valid_597807 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597807 = validateParameter(valid_597807, JString, required = false,
                                 default = nil)
  if valid_597807 != nil:
    section.add "X-Amz-Content-Sha256", valid_597807
  var valid_597808 = header.getOrDefault("X-Amz-Algorithm")
  valid_597808 = validateParameter(valid_597808, JString, required = false,
                                 default = nil)
  if valid_597808 != nil:
    section.add "X-Amz-Algorithm", valid_597808
  var valid_597809 = header.getOrDefault("X-Amz-Signature")
  valid_597809 = validateParameter(valid_597809, JString, required = false,
                                 default = nil)
  if valid_597809 != nil:
    section.add "X-Amz-Signature", valid_597809
  var valid_597810 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597810 = validateParameter(valid_597810, JString, required = false,
                                 default = nil)
  if valid_597810 != nil:
    section.add "X-Amz-SignedHeaders", valid_597810
  var valid_597811 = header.getOrDefault("X-Amz-Credential")
  valid_597811 = validateParameter(valid_597811, JString, required = false,
                                 default = nil)
  if valid_597811 != nil:
    section.add "X-Amz-Credential", valid_597811
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597812: Call_GetPutRolePolicy_597797; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_597812.validator(path, query, header, formData, body)
  let scheme = call_597812.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597812.url(scheme.get, call_597812.host, call_597812.base,
                         call_597812.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597812, url, valid)

proc call*(call_597813: Call_GetPutRolePolicy_597797; PolicyDocument: string;
          RoleName: string; PolicyName: string; Action: string = "PutRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_597814 = newJObject()
  add(query_597814, "Action", newJString(Action))
  add(query_597814, "PolicyDocument", newJString(PolicyDocument))
  add(query_597814, "RoleName", newJString(RoleName))
  add(query_597814, "Version", newJString(Version))
  add(query_597814, "PolicyName", newJString(PolicyName))
  result = call_597813.call(nil, query_597814, nil, nil, nil)

var getPutRolePolicy* = Call_GetPutRolePolicy_597797(name: "getPutRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_GetPutRolePolicy_597798,
    base: "/", url: url_GetPutRolePolicy_597799,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPermissionsBoundary_597851 = ref object of OpenApiRestCall_593437
proc url_PostPutUserPermissionsBoundary_597853(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutUserPermissionsBoundary_597852(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597854 = query.getOrDefault("Action")
  valid_597854 = validateParameter(valid_597854, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_597854 != nil:
    section.add "Action", valid_597854
  var valid_597855 = query.getOrDefault("Version")
  valid_597855 = validateParameter(valid_597855, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597855 != nil:
    section.add "Version", valid_597855
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597856 = header.getOrDefault("X-Amz-Date")
  valid_597856 = validateParameter(valid_597856, JString, required = false,
                                 default = nil)
  if valid_597856 != nil:
    section.add "X-Amz-Date", valid_597856
  var valid_597857 = header.getOrDefault("X-Amz-Security-Token")
  valid_597857 = validateParameter(valid_597857, JString, required = false,
                                 default = nil)
  if valid_597857 != nil:
    section.add "X-Amz-Security-Token", valid_597857
  var valid_597858 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597858 = validateParameter(valid_597858, JString, required = false,
                                 default = nil)
  if valid_597858 != nil:
    section.add "X-Amz-Content-Sha256", valid_597858
  var valid_597859 = header.getOrDefault("X-Amz-Algorithm")
  valid_597859 = validateParameter(valid_597859, JString, required = false,
                                 default = nil)
  if valid_597859 != nil:
    section.add "X-Amz-Algorithm", valid_597859
  var valid_597860 = header.getOrDefault("X-Amz-Signature")
  valid_597860 = validateParameter(valid_597860, JString, required = false,
                                 default = nil)
  if valid_597860 != nil:
    section.add "X-Amz-Signature", valid_597860
  var valid_597861 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597861 = validateParameter(valid_597861, JString, required = false,
                                 default = nil)
  if valid_597861 != nil:
    section.add "X-Amz-SignedHeaders", valid_597861
  var valid_597862 = header.getOrDefault("X-Amz-Credential")
  valid_597862 = validateParameter(valid_597862, JString, required = false,
                                 default = nil)
  if valid_597862 != nil:
    section.add "X-Amz-Credential", valid_597862
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_597863 = formData.getOrDefault("UserName")
  valid_597863 = validateParameter(valid_597863, JString, required = true,
                                 default = nil)
  if valid_597863 != nil:
    section.add "UserName", valid_597863
  var valid_597864 = formData.getOrDefault("PermissionsBoundary")
  valid_597864 = validateParameter(valid_597864, JString, required = true,
                                 default = nil)
  if valid_597864 != nil:
    section.add "PermissionsBoundary", valid_597864
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597865: Call_PostPutUserPermissionsBoundary_597851; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_597865.validator(path, query, header, formData, body)
  let scheme = call_597865.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597865.url(scheme.get, call_597865.host, call_597865.base,
                         call_597865.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597865, url, valid)

proc call*(call_597866: Call_PostPutUserPermissionsBoundary_597851;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597867 = newJObject()
  var formData_597868 = newJObject()
  add(formData_597868, "UserName", newJString(UserName))
  add(formData_597868, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_597867, "Action", newJString(Action))
  add(query_597867, "Version", newJString(Version))
  result = call_597866.call(nil, query_597867, nil, formData_597868, nil)

var postPutUserPermissionsBoundary* = Call_PostPutUserPermissionsBoundary_597851(
    name: "postPutUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_PostPutUserPermissionsBoundary_597852, base: "/",
    url: url_PostPutUserPermissionsBoundary_597853,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPermissionsBoundary_597834 = ref object of OpenApiRestCall_593437
proc url_GetPutUserPermissionsBoundary_597836(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutUserPermissionsBoundary_597835(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   Action: JString (required)
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_597837 = query.getOrDefault("UserName")
  valid_597837 = validateParameter(valid_597837, JString, required = true,
                                 default = nil)
  if valid_597837 != nil:
    section.add "UserName", valid_597837
  var valid_597838 = query.getOrDefault("Action")
  valid_597838 = validateParameter(valid_597838, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_597838 != nil:
    section.add "Action", valid_597838
  var valid_597839 = query.getOrDefault("PermissionsBoundary")
  valid_597839 = validateParameter(valid_597839, JString, required = true,
                                 default = nil)
  if valid_597839 != nil:
    section.add "PermissionsBoundary", valid_597839
  var valid_597840 = query.getOrDefault("Version")
  valid_597840 = validateParameter(valid_597840, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597840 != nil:
    section.add "Version", valid_597840
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597841 = header.getOrDefault("X-Amz-Date")
  valid_597841 = validateParameter(valid_597841, JString, required = false,
                                 default = nil)
  if valid_597841 != nil:
    section.add "X-Amz-Date", valid_597841
  var valid_597842 = header.getOrDefault("X-Amz-Security-Token")
  valid_597842 = validateParameter(valid_597842, JString, required = false,
                                 default = nil)
  if valid_597842 != nil:
    section.add "X-Amz-Security-Token", valid_597842
  var valid_597843 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597843 = validateParameter(valid_597843, JString, required = false,
                                 default = nil)
  if valid_597843 != nil:
    section.add "X-Amz-Content-Sha256", valid_597843
  var valid_597844 = header.getOrDefault("X-Amz-Algorithm")
  valid_597844 = validateParameter(valid_597844, JString, required = false,
                                 default = nil)
  if valid_597844 != nil:
    section.add "X-Amz-Algorithm", valid_597844
  var valid_597845 = header.getOrDefault("X-Amz-Signature")
  valid_597845 = validateParameter(valid_597845, JString, required = false,
                                 default = nil)
  if valid_597845 != nil:
    section.add "X-Amz-Signature", valid_597845
  var valid_597846 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597846 = validateParameter(valid_597846, JString, required = false,
                                 default = nil)
  if valid_597846 != nil:
    section.add "X-Amz-SignedHeaders", valid_597846
  var valid_597847 = header.getOrDefault("X-Amz-Credential")
  valid_597847 = validateParameter(valid_597847, JString, required = false,
                                 default = nil)
  if valid_597847 != nil:
    section.add "X-Amz-Credential", valid_597847
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597848: Call_GetPutUserPermissionsBoundary_597834; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_597848.validator(path, query, header, formData, body)
  let scheme = call_597848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597848.url(scheme.get, call_597848.host, call_597848.base,
                         call_597848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597848, url, valid)

proc call*(call_597849: Call_GetPutUserPermissionsBoundary_597834;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_597850 = newJObject()
  add(query_597850, "UserName", newJString(UserName))
  add(query_597850, "Action", newJString(Action))
  add(query_597850, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_597850, "Version", newJString(Version))
  result = call_597849.call(nil, query_597850, nil, nil, nil)

var getPutUserPermissionsBoundary* = Call_GetPutUserPermissionsBoundary_597834(
    name: "getPutUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_GetPutUserPermissionsBoundary_597835, base: "/",
    url: url_GetPutUserPermissionsBoundary_597836,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPolicy_597887 = ref object of OpenApiRestCall_593437
proc url_PostPutUserPolicy_597889(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPutUserPolicy_597888(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597890 = query.getOrDefault("Action")
  valid_597890 = validateParameter(valid_597890, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_597890 != nil:
    section.add "Action", valid_597890
  var valid_597891 = query.getOrDefault("Version")
  valid_597891 = validateParameter(valid_597891, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597891 != nil:
    section.add "Version", valid_597891
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597892 = header.getOrDefault("X-Amz-Date")
  valid_597892 = validateParameter(valid_597892, JString, required = false,
                                 default = nil)
  if valid_597892 != nil:
    section.add "X-Amz-Date", valid_597892
  var valid_597893 = header.getOrDefault("X-Amz-Security-Token")
  valid_597893 = validateParameter(valid_597893, JString, required = false,
                                 default = nil)
  if valid_597893 != nil:
    section.add "X-Amz-Security-Token", valid_597893
  var valid_597894 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597894 = validateParameter(valid_597894, JString, required = false,
                                 default = nil)
  if valid_597894 != nil:
    section.add "X-Amz-Content-Sha256", valid_597894
  var valid_597895 = header.getOrDefault("X-Amz-Algorithm")
  valid_597895 = validateParameter(valid_597895, JString, required = false,
                                 default = nil)
  if valid_597895 != nil:
    section.add "X-Amz-Algorithm", valid_597895
  var valid_597896 = header.getOrDefault("X-Amz-Signature")
  valid_597896 = validateParameter(valid_597896, JString, required = false,
                                 default = nil)
  if valid_597896 != nil:
    section.add "X-Amz-Signature", valid_597896
  var valid_597897 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597897 = validateParameter(valid_597897, JString, required = false,
                                 default = nil)
  if valid_597897 != nil:
    section.add "X-Amz-SignedHeaders", valid_597897
  var valid_597898 = header.getOrDefault("X-Amz-Credential")
  valid_597898 = validateParameter(valid_597898, JString, required = false,
                                 default = nil)
  if valid_597898 != nil:
    section.add "X-Amz-Credential", valid_597898
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_597899 = formData.getOrDefault("PolicyName")
  valid_597899 = validateParameter(valid_597899, JString, required = true,
                                 default = nil)
  if valid_597899 != nil:
    section.add "PolicyName", valid_597899
  var valid_597900 = formData.getOrDefault("UserName")
  valid_597900 = validateParameter(valid_597900, JString, required = true,
                                 default = nil)
  if valid_597900 != nil:
    section.add "UserName", valid_597900
  var valid_597901 = formData.getOrDefault("PolicyDocument")
  valid_597901 = validateParameter(valid_597901, JString, required = true,
                                 default = nil)
  if valid_597901 != nil:
    section.add "PolicyDocument", valid_597901
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597902: Call_PostPutUserPolicy_597887; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_597902.validator(path, query, header, formData, body)
  let scheme = call_597902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597902.url(scheme.get, call_597902.host, call_597902.base,
                         call_597902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597902, url, valid)

proc call*(call_597903: Call_PostPutUserPolicy_597887; PolicyName: string;
          UserName: string; PolicyDocument: string;
          Action: string = "PutUserPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_597904 = newJObject()
  var formData_597905 = newJObject()
  add(formData_597905, "PolicyName", newJString(PolicyName))
  add(formData_597905, "UserName", newJString(UserName))
  add(formData_597905, "PolicyDocument", newJString(PolicyDocument))
  add(query_597904, "Action", newJString(Action))
  add(query_597904, "Version", newJString(Version))
  result = call_597903.call(nil, query_597904, nil, formData_597905, nil)

var postPutUserPolicy* = Call_PostPutUserPolicy_597887(name: "postPutUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_PostPutUserPolicy_597888,
    base: "/", url: url_PostPutUserPolicy_597889,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPolicy_597869 = ref object of OpenApiRestCall_593437
proc url_GetPutUserPolicy_597871(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPutUserPolicy_597870(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_597872 = query.getOrDefault("UserName")
  valid_597872 = validateParameter(valid_597872, JString, required = true,
                                 default = nil)
  if valid_597872 != nil:
    section.add "UserName", valid_597872
  var valid_597873 = query.getOrDefault("Action")
  valid_597873 = validateParameter(valid_597873, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_597873 != nil:
    section.add "Action", valid_597873
  var valid_597874 = query.getOrDefault("PolicyDocument")
  valid_597874 = validateParameter(valid_597874, JString, required = true,
                                 default = nil)
  if valid_597874 != nil:
    section.add "PolicyDocument", valid_597874
  var valid_597875 = query.getOrDefault("Version")
  valid_597875 = validateParameter(valid_597875, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597875 != nil:
    section.add "Version", valid_597875
  var valid_597876 = query.getOrDefault("PolicyName")
  valid_597876 = validateParameter(valid_597876, JString, required = true,
                                 default = nil)
  if valid_597876 != nil:
    section.add "PolicyName", valid_597876
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597877 = header.getOrDefault("X-Amz-Date")
  valid_597877 = validateParameter(valid_597877, JString, required = false,
                                 default = nil)
  if valid_597877 != nil:
    section.add "X-Amz-Date", valid_597877
  var valid_597878 = header.getOrDefault("X-Amz-Security-Token")
  valid_597878 = validateParameter(valid_597878, JString, required = false,
                                 default = nil)
  if valid_597878 != nil:
    section.add "X-Amz-Security-Token", valid_597878
  var valid_597879 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597879 = validateParameter(valid_597879, JString, required = false,
                                 default = nil)
  if valid_597879 != nil:
    section.add "X-Amz-Content-Sha256", valid_597879
  var valid_597880 = header.getOrDefault("X-Amz-Algorithm")
  valid_597880 = validateParameter(valid_597880, JString, required = false,
                                 default = nil)
  if valid_597880 != nil:
    section.add "X-Amz-Algorithm", valid_597880
  var valid_597881 = header.getOrDefault("X-Amz-Signature")
  valid_597881 = validateParameter(valid_597881, JString, required = false,
                                 default = nil)
  if valid_597881 != nil:
    section.add "X-Amz-Signature", valid_597881
  var valid_597882 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597882 = validateParameter(valid_597882, JString, required = false,
                                 default = nil)
  if valid_597882 != nil:
    section.add "X-Amz-SignedHeaders", valid_597882
  var valid_597883 = header.getOrDefault("X-Amz-Credential")
  valid_597883 = validateParameter(valid_597883, JString, required = false,
                                 default = nil)
  if valid_597883 != nil:
    section.add "X-Amz-Credential", valid_597883
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597884: Call_GetPutUserPolicy_597869; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_597884.validator(path, query, header, formData, body)
  let scheme = call_597884.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597884.url(scheme.get, call_597884.host, call_597884.base,
                         call_597884.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597884, url, valid)

proc call*(call_597885: Call_GetPutUserPolicy_597869; UserName: string;
          PolicyDocument: string; PolicyName: string;
          Action: string = "PutUserPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_597886 = newJObject()
  add(query_597886, "UserName", newJString(UserName))
  add(query_597886, "Action", newJString(Action))
  add(query_597886, "PolicyDocument", newJString(PolicyDocument))
  add(query_597886, "Version", newJString(Version))
  add(query_597886, "PolicyName", newJString(PolicyName))
  result = call_597885.call(nil, query_597886, nil, nil, nil)

var getPutUserPolicy* = Call_GetPutUserPolicy_597869(name: "getPutUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_GetPutUserPolicy_597870,
    base: "/", url: url_GetPutUserPolicy_597871,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveClientIDFromOpenIDConnectProvider_597923 = ref object of OpenApiRestCall_593437
proc url_PostRemoveClientIDFromOpenIDConnectProvider_597925(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveClientIDFromOpenIDConnectProvider_597924(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597926 = query.getOrDefault("Action")
  valid_597926 = validateParameter(valid_597926, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_597926 != nil:
    section.add "Action", valid_597926
  var valid_597927 = query.getOrDefault("Version")
  valid_597927 = validateParameter(valid_597927, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597927 != nil:
    section.add "Version", valid_597927
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597928 = header.getOrDefault("X-Amz-Date")
  valid_597928 = validateParameter(valid_597928, JString, required = false,
                                 default = nil)
  if valid_597928 != nil:
    section.add "X-Amz-Date", valid_597928
  var valid_597929 = header.getOrDefault("X-Amz-Security-Token")
  valid_597929 = validateParameter(valid_597929, JString, required = false,
                                 default = nil)
  if valid_597929 != nil:
    section.add "X-Amz-Security-Token", valid_597929
  var valid_597930 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597930 = validateParameter(valid_597930, JString, required = false,
                                 default = nil)
  if valid_597930 != nil:
    section.add "X-Amz-Content-Sha256", valid_597930
  var valid_597931 = header.getOrDefault("X-Amz-Algorithm")
  valid_597931 = validateParameter(valid_597931, JString, required = false,
                                 default = nil)
  if valid_597931 != nil:
    section.add "X-Amz-Algorithm", valid_597931
  var valid_597932 = header.getOrDefault("X-Amz-Signature")
  valid_597932 = validateParameter(valid_597932, JString, required = false,
                                 default = nil)
  if valid_597932 != nil:
    section.add "X-Amz-Signature", valid_597932
  var valid_597933 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597933 = validateParameter(valid_597933, JString, required = false,
                                 default = nil)
  if valid_597933 != nil:
    section.add "X-Amz-SignedHeaders", valid_597933
  var valid_597934 = header.getOrDefault("X-Amz-Credential")
  valid_597934 = validateParameter(valid_597934, JString, required = false,
                                 default = nil)
  if valid_597934 != nil:
    section.add "X-Amz-Credential", valid_597934
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_597935 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_597935 = validateParameter(valid_597935, JString, required = true,
                                 default = nil)
  if valid_597935 != nil:
    section.add "OpenIDConnectProviderArn", valid_597935
  var valid_597936 = formData.getOrDefault("ClientID")
  valid_597936 = validateParameter(valid_597936, JString, required = true,
                                 default = nil)
  if valid_597936 != nil:
    section.add "ClientID", valid_597936
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597937: Call_PostRemoveClientIDFromOpenIDConnectProvider_597923;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_597937.validator(path, query, header, formData, body)
  let scheme = call_597937.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597937.url(scheme.get, call_597937.host, call_597937.base,
                         call_597937.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597937, url, valid)

proc call*(call_597938: Call_PostRemoveClientIDFromOpenIDConnectProvider_597923;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  var query_597939 = newJObject()
  var formData_597940 = newJObject()
  add(formData_597940, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_597939, "Action", newJString(Action))
  add(query_597939, "Version", newJString(Version))
  add(formData_597940, "ClientID", newJString(ClientID))
  result = call_597938.call(nil, query_597939, nil, formData_597940, nil)

var postRemoveClientIDFromOpenIDConnectProvider* = Call_PostRemoveClientIDFromOpenIDConnectProvider_597923(
    name: "postRemoveClientIDFromOpenIDConnectProvider",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_PostRemoveClientIDFromOpenIDConnectProvider_597924,
    base: "/", url: url_PostRemoveClientIDFromOpenIDConnectProvider_597925,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveClientIDFromOpenIDConnectProvider_597906 = ref object of OpenApiRestCall_593437
proc url_GetRemoveClientIDFromOpenIDConnectProvider_597908(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveClientIDFromOpenIDConnectProvider_597907(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_597909 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_597909 = validateParameter(valid_597909, JString, required = true,
                                 default = nil)
  if valid_597909 != nil:
    section.add "OpenIDConnectProviderArn", valid_597909
  var valid_597910 = query.getOrDefault("Action")
  valid_597910 = validateParameter(valid_597910, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_597910 != nil:
    section.add "Action", valid_597910
  var valid_597911 = query.getOrDefault("ClientID")
  valid_597911 = validateParameter(valid_597911, JString, required = true,
                                 default = nil)
  if valid_597911 != nil:
    section.add "ClientID", valid_597911
  var valid_597912 = query.getOrDefault("Version")
  valid_597912 = validateParameter(valid_597912, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597912 != nil:
    section.add "Version", valid_597912
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597913 = header.getOrDefault("X-Amz-Date")
  valid_597913 = validateParameter(valid_597913, JString, required = false,
                                 default = nil)
  if valid_597913 != nil:
    section.add "X-Amz-Date", valid_597913
  var valid_597914 = header.getOrDefault("X-Amz-Security-Token")
  valid_597914 = validateParameter(valid_597914, JString, required = false,
                                 default = nil)
  if valid_597914 != nil:
    section.add "X-Amz-Security-Token", valid_597914
  var valid_597915 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597915 = validateParameter(valid_597915, JString, required = false,
                                 default = nil)
  if valid_597915 != nil:
    section.add "X-Amz-Content-Sha256", valid_597915
  var valid_597916 = header.getOrDefault("X-Amz-Algorithm")
  valid_597916 = validateParameter(valid_597916, JString, required = false,
                                 default = nil)
  if valid_597916 != nil:
    section.add "X-Amz-Algorithm", valid_597916
  var valid_597917 = header.getOrDefault("X-Amz-Signature")
  valid_597917 = validateParameter(valid_597917, JString, required = false,
                                 default = nil)
  if valid_597917 != nil:
    section.add "X-Amz-Signature", valid_597917
  var valid_597918 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597918 = validateParameter(valid_597918, JString, required = false,
                                 default = nil)
  if valid_597918 != nil:
    section.add "X-Amz-SignedHeaders", valid_597918
  var valid_597919 = header.getOrDefault("X-Amz-Credential")
  valid_597919 = validateParameter(valid_597919, JString, required = false,
                                 default = nil)
  if valid_597919 != nil:
    section.add "X-Amz-Credential", valid_597919
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597920: Call_GetRemoveClientIDFromOpenIDConnectProvider_597906;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_597920.validator(path, query, header, formData, body)
  let scheme = call_597920.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597920.url(scheme.get, call_597920.host, call_597920.base,
                         call_597920.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597920, url, valid)

proc call*(call_597921: Call_GetRemoveClientIDFromOpenIDConnectProvider_597906;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   Version: string (required)
  var query_597922 = newJObject()
  add(query_597922, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_597922, "Action", newJString(Action))
  add(query_597922, "ClientID", newJString(ClientID))
  add(query_597922, "Version", newJString(Version))
  result = call_597921.call(nil, query_597922, nil, nil, nil)

var getRemoveClientIDFromOpenIDConnectProvider* = Call_GetRemoveClientIDFromOpenIDConnectProvider_597906(
    name: "getRemoveClientIDFromOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_GetRemoveClientIDFromOpenIDConnectProvider_597907,
    base: "/", url: url_GetRemoveClientIDFromOpenIDConnectProvider_597908,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromInstanceProfile_597958 = ref object of OpenApiRestCall_593437
proc url_PostRemoveRoleFromInstanceProfile_597960(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveRoleFromInstanceProfile_597959(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597961 = query.getOrDefault("Action")
  valid_597961 = validateParameter(valid_597961, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_597961 != nil:
    section.add "Action", valid_597961
  var valid_597962 = query.getOrDefault("Version")
  valid_597962 = validateParameter(valid_597962, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597962 != nil:
    section.add "Version", valid_597962
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597963 = header.getOrDefault("X-Amz-Date")
  valid_597963 = validateParameter(valid_597963, JString, required = false,
                                 default = nil)
  if valid_597963 != nil:
    section.add "X-Amz-Date", valid_597963
  var valid_597964 = header.getOrDefault("X-Amz-Security-Token")
  valid_597964 = validateParameter(valid_597964, JString, required = false,
                                 default = nil)
  if valid_597964 != nil:
    section.add "X-Amz-Security-Token", valid_597964
  var valid_597965 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597965 = validateParameter(valid_597965, JString, required = false,
                                 default = nil)
  if valid_597965 != nil:
    section.add "X-Amz-Content-Sha256", valid_597965
  var valid_597966 = header.getOrDefault("X-Amz-Algorithm")
  valid_597966 = validateParameter(valid_597966, JString, required = false,
                                 default = nil)
  if valid_597966 != nil:
    section.add "X-Amz-Algorithm", valid_597966
  var valid_597967 = header.getOrDefault("X-Amz-Signature")
  valid_597967 = validateParameter(valid_597967, JString, required = false,
                                 default = nil)
  if valid_597967 != nil:
    section.add "X-Amz-Signature", valid_597967
  var valid_597968 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597968 = validateParameter(valid_597968, JString, required = false,
                                 default = nil)
  if valid_597968 != nil:
    section.add "X-Amz-SignedHeaders", valid_597968
  var valid_597969 = header.getOrDefault("X-Amz-Credential")
  valid_597969 = validateParameter(valid_597969, JString, required = false,
                                 default = nil)
  if valid_597969 != nil:
    section.add "X-Amz-Credential", valid_597969
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_597970 = formData.getOrDefault("RoleName")
  valid_597970 = validateParameter(valid_597970, JString, required = true,
                                 default = nil)
  if valid_597970 != nil:
    section.add "RoleName", valid_597970
  var valid_597971 = formData.getOrDefault("InstanceProfileName")
  valid_597971 = validateParameter(valid_597971, JString, required = true,
                                 default = nil)
  if valid_597971 != nil:
    section.add "InstanceProfileName", valid_597971
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597972: Call_PostRemoveRoleFromInstanceProfile_597958;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_597972.validator(path, query, header, formData, body)
  let scheme = call_597972.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597972.url(scheme.get, call_597972.host, call_597972.base,
                         call_597972.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597972, url, valid)

proc call*(call_597973: Call_PostRemoveRoleFromInstanceProfile_597958;
          RoleName: string; InstanceProfileName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_597974 = newJObject()
  var formData_597975 = newJObject()
  add(formData_597975, "RoleName", newJString(RoleName))
  add(query_597974, "Action", newJString(Action))
  add(formData_597975, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_597974, "Version", newJString(Version))
  result = call_597973.call(nil, query_597974, nil, formData_597975, nil)

var postRemoveRoleFromInstanceProfile* = Call_PostRemoveRoleFromInstanceProfile_597958(
    name: "postRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_PostRemoveRoleFromInstanceProfile_597959, base: "/",
    url: url_PostRemoveRoleFromInstanceProfile_597960,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromInstanceProfile_597941 = ref object of OpenApiRestCall_593437
proc url_GetRemoveRoleFromInstanceProfile_597943(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveRoleFromInstanceProfile_597942(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_597944 = query.getOrDefault("InstanceProfileName")
  valid_597944 = validateParameter(valid_597944, JString, required = true,
                                 default = nil)
  if valid_597944 != nil:
    section.add "InstanceProfileName", valid_597944
  var valid_597945 = query.getOrDefault("Action")
  valid_597945 = validateParameter(valid_597945, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_597945 != nil:
    section.add "Action", valid_597945
  var valid_597946 = query.getOrDefault("RoleName")
  valid_597946 = validateParameter(valid_597946, JString, required = true,
                                 default = nil)
  if valid_597946 != nil:
    section.add "RoleName", valid_597946
  var valid_597947 = query.getOrDefault("Version")
  valid_597947 = validateParameter(valid_597947, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597947 != nil:
    section.add "Version", valid_597947
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597948 = header.getOrDefault("X-Amz-Date")
  valid_597948 = validateParameter(valid_597948, JString, required = false,
                                 default = nil)
  if valid_597948 != nil:
    section.add "X-Amz-Date", valid_597948
  var valid_597949 = header.getOrDefault("X-Amz-Security-Token")
  valid_597949 = validateParameter(valid_597949, JString, required = false,
                                 default = nil)
  if valid_597949 != nil:
    section.add "X-Amz-Security-Token", valid_597949
  var valid_597950 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597950 = validateParameter(valid_597950, JString, required = false,
                                 default = nil)
  if valid_597950 != nil:
    section.add "X-Amz-Content-Sha256", valid_597950
  var valid_597951 = header.getOrDefault("X-Amz-Algorithm")
  valid_597951 = validateParameter(valid_597951, JString, required = false,
                                 default = nil)
  if valid_597951 != nil:
    section.add "X-Amz-Algorithm", valid_597951
  var valid_597952 = header.getOrDefault("X-Amz-Signature")
  valid_597952 = validateParameter(valid_597952, JString, required = false,
                                 default = nil)
  if valid_597952 != nil:
    section.add "X-Amz-Signature", valid_597952
  var valid_597953 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597953 = validateParameter(valid_597953, JString, required = false,
                                 default = nil)
  if valid_597953 != nil:
    section.add "X-Amz-SignedHeaders", valid_597953
  var valid_597954 = header.getOrDefault("X-Amz-Credential")
  valid_597954 = validateParameter(valid_597954, JString, required = false,
                                 default = nil)
  if valid_597954 != nil:
    section.add "X-Amz-Credential", valid_597954
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597955: Call_GetRemoveRoleFromInstanceProfile_597941;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_597955.validator(path, query, header, formData, body)
  let scheme = call_597955.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597955.url(scheme.get, call_597955.host, call_597955.base,
                         call_597955.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597955, url, valid)

proc call*(call_597956: Call_GetRemoveRoleFromInstanceProfile_597941;
          InstanceProfileName: string; RoleName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_597957 = newJObject()
  add(query_597957, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_597957, "Action", newJString(Action))
  add(query_597957, "RoleName", newJString(RoleName))
  add(query_597957, "Version", newJString(Version))
  result = call_597956.call(nil, query_597957, nil, nil, nil)

var getRemoveRoleFromInstanceProfile* = Call_GetRemoveRoleFromInstanceProfile_597941(
    name: "getRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_GetRemoveRoleFromInstanceProfile_597942, base: "/",
    url: url_GetRemoveRoleFromInstanceProfile_597943,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveUserFromGroup_597993 = ref object of OpenApiRestCall_593437
proc url_PostRemoveUserFromGroup_597995(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveUserFromGroup_597994(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_597996 = query.getOrDefault("Action")
  valid_597996 = validateParameter(valid_597996, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_597996 != nil:
    section.add "Action", valid_597996
  var valid_597997 = query.getOrDefault("Version")
  valid_597997 = validateParameter(valid_597997, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597997 != nil:
    section.add "Version", valid_597997
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597998 = header.getOrDefault("X-Amz-Date")
  valid_597998 = validateParameter(valid_597998, JString, required = false,
                                 default = nil)
  if valid_597998 != nil:
    section.add "X-Amz-Date", valid_597998
  var valid_597999 = header.getOrDefault("X-Amz-Security-Token")
  valid_597999 = validateParameter(valid_597999, JString, required = false,
                                 default = nil)
  if valid_597999 != nil:
    section.add "X-Amz-Security-Token", valid_597999
  var valid_598000 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598000 = validateParameter(valid_598000, JString, required = false,
                                 default = nil)
  if valid_598000 != nil:
    section.add "X-Amz-Content-Sha256", valid_598000
  var valid_598001 = header.getOrDefault("X-Amz-Algorithm")
  valid_598001 = validateParameter(valid_598001, JString, required = false,
                                 default = nil)
  if valid_598001 != nil:
    section.add "X-Amz-Algorithm", valid_598001
  var valid_598002 = header.getOrDefault("X-Amz-Signature")
  valid_598002 = validateParameter(valid_598002, JString, required = false,
                                 default = nil)
  if valid_598002 != nil:
    section.add "X-Amz-Signature", valid_598002
  var valid_598003 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598003 = validateParameter(valid_598003, JString, required = false,
                                 default = nil)
  if valid_598003 != nil:
    section.add "X-Amz-SignedHeaders", valid_598003
  var valid_598004 = header.getOrDefault("X-Amz-Credential")
  valid_598004 = validateParameter(valid_598004, JString, required = false,
                                 default = nil)
  if valid_598004 != nil:
    section.add "X-Amz-Credential", valid_598004
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_598005 = formData.getOrDefault("UserName")
  valid_598005 = validateParameter(valid_598005, JString, required = true,
                                 default = nil)
  if valid_598005 != nil:
    section.add "UserName", valid_598005
  var valid_598006 = formData.getOrDefault("GroupName")
  valid_598006 = validateParameter(valid_598006, JString, required = true,
                                 default = nil)
  if valid_598006 != nil:
    section.add "GroupName", valid_598006
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598007: Call_PostRemoveUserFromGroup_597993; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_598007.validator(path, query, header, formData, body)
  let scheme = call_598007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598007.url(scheme.get, call_598007.host, call_598007.base,
                         call_598007.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598007, url, valid)

proc call*(call_598008: Call_PostRemoveUserFromGroup_597993; UserName: string;
          GroupName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598009 = newJObject()
  var formData_598010 = newJObject()
  add(formData_598010, "UserName", newJString(UserName))
  add(formData_598010, "GroupName", newJString(GroupName))
  add(query_598009, "Action", newJString(Action))
  add(query_598009, "Version", newJString(Version))
  result = call_598008.call(nil, query_598009, nil, formData_598010, nil)

var postRemoveUserFromGroup* = Call_PostRemoveUserFromGroup_597993(
    name: "postRemoveUserFromGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_PostRemoveUserFromGroup_597994, base: "/",
    url: url_PostRemoveUserFromGroup_597995, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveUserFromGroup_597976 = ref object of OpenApiRestCall_593437
proc url_GetRemoveUserFromGroup_597978(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveUserFromGroup_597977(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_597979 = query.getOrDefault("UserName")
  valid_597979 = validateParameter(valid_597979, JString, required = true,
                                 default = nil)
  if valid_597979 != nil:
    section.add "UserName", valid_597979
  var valid_597980 = query.getOrDefault("Action")
  valid_597980 = validateParameter(valid_597980, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_597980 != nil:
    section.add "Action", valid_597980
  var valid_597981 = query.getOrDefault("GroupName")
  valid_597981 = validateParameter(valid_597981, JString, required = true,
                                 default = nil)
  if valid_597981 != nil:
    section.add "GroupName", valid_597981
  var valid_597982 = query.getOrDefault("Version")
  valid_597982 = validateParameter(valid_597982, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_597982 != nil:
    section.add "Version", valid_597982
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_597983 = header.getOrDefault("X-Amz-Date")
  valid_597983 = validateParameter(valid_597983, JString, required = false,
                                 default = nil)
  if valid_597983 != nil:
    section.add "X-Amz-Date", valid_597983
  var valid_597984 = header.getOrDefault("X-Amz-Security-Token")
  valid_597984 = validateParameter(valid_597984, JString, required = false,
                                 default = nil)
  if valid_597984 != nil:
    section.add "X-Amz-Security-Token", valid_597984
  var valid_597985 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_597985 = validateParameter(valid_597985, JString, required = false,
                                 default = nil)
  if valid_597985 != nil:
    section.add "X-Amz-Content-Sha256", valid_597985
  var valid_597986 = header.getOrDefault("X-Amz-Algorithm")
  valid_597986 = validateParameter(valid_597986, JString, required = false,
                                 default = nil)
  if valid_597986 != nil:
    section.add "X-Amz-Algorithm", valid_597986
  var valid_597987 = header.getOrDefault("X-Amz-Signature")
  valid_597987 = validateParameter(valid_597987, JString, required = false,
                                 default = nil)
  if valid_597987 != nil:
    section.add "X-Amz-Signature", valid_597987
  var valid_597988 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_597988 = validateParameter(valid_597988, JString, required = false,
                                 default = nil)
  if valid_597988 != nil:
    section.add "X-Amz-SignedHeaders", valid_597988
  var valid_597989 = header.getOrDefault("X-Amz-Credential")
  valid_597989 = validateParameter(valid_597989, JString, required = false,
                                 default = nil)
  if valid_597989 != nil:
    section.add "X-Amz-Credential", valid_597989
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597990: Call_GetRemoveUserFromGroup_597976; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_597990.validator(path, query, header, formData, body)
  let scheme = call_597990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597990.url(scheme.get, call_597990.host, call_597990.base,
                         call_597990.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597990, url, valid)

proc call*(call_597991: Call_GetRemoveUserFromGroup_597976; UserName: string;
          GroupName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_597992 = newJObject()
  add(query_597992, "UserName", newJString(UserName))
  add(query_597992, "Action", newJString(Action))
  add(query_597992, "GroupName", newJString(GroupName))
  add(query_597992, "Version", newJString(Version))
  result = call_597991.call(nil, query_597992, nil, nil, nil)

var getRemoveUserFromGroup* = Call_GetRemoveUserFromGroup_597976(
    name: "getRemoveUserFromGroup", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_GetRemoveUserFromGroup_597977, base: "/",
    url: url_GetRemoveUserFromGroup_597978, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetServiceSpecificCredential_598028 = ref object of OpenApiRestCall_593437
proc url_PostResetServiceSpecificCredential_598030(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResetServiceSpecificCredential_598029(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598031 = query.getOrDefault("Action")
  valid_598031 = validateParameter(valid_598031, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_598031 != nil:
    section.add "Action", valid_598031
  var valid_598032 = query.getOrDefault("Version")
  valid_598032 = validateParameter(valid_598032, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598032 != nil:
    section.add "Version", valid_598032
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598033 = header.getOrDefault("X-Amz-Date")
  valid_598033 = validateParameter(valid_598033, JString, required = false,
                                 default = nil)
  if valid_598033 != nil:
    section.add "X-Amz-Date", valid_598033
  var valid_598034 = header.getOrDefault("X-Amz-Security-Token")
  valid_598034 = validateParameter(valid_598034, JString, required = false,
                                 default = nil)
  if valid_598034 != nil:
    section.add "X-Amz-Security-Token", valid_598034
  var valid_598035 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598035 = validateParameter(valid_598035, JString, required = false,
                                 default = nil)
  if valid_598035 != nil:
    section.add "X-Amz-Content-Sha256", valid_598035
  var valid_598036 = header.getOrDefault("X-Amz-Algorithm")
  valid_598036 = validateParameter(valid_598036, JString, required = false,
                                 default = nil)
  if valid_598036 != nil:
    section.add "X-Amz-Algorithm", valid_598036
  var valid_598037 = header.getOrDefault("X-Amz-Signature")
  valid_598037 = validateParameter(valid_598037, JString, required = false,
                                 default = nil)
  if valid_598037 != nil:
    section.add "X-Amz-Signature", valid_598037
  var valid_598038 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598038 = validateParameter(valid_598038, JString, required = false,
                                 default = nil)
  if valid_598038 != nil:
    section.add "X-Amz-SignedHeaders", valid_598038
  var valid_598039 = header.getOrDefault("X-Amz-Credential")
  valid_598039 = validateParameter(valid_598039, JString, required = false,
                                 default = nil)
  if valid_598039 != nil:
    section.add "X-Amz-Credential", valid_598039
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_598040 = formData.getOrDefault("UserName")
  valid_598040 = validateParameter(valid_598040, JString, required = false,
                                 default = nil)
  if valid_598040 != nil:
    section.add "UserName", valid_598040
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_598041 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_598041 = validateParameter(valid_598041, JString, required = true,
                                 default = nil)
  if valid_598041 != nil:
    section.add "ServiceSpecificCredentialId", valid_598041
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598042: Call_PostResetServiceSpecificCredential_598028;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_598042.validator(path, query, header, formData, body)
  let scheme = call_598042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598042.url(scheme.get, call_598042.host, call_598042.base,
                         call_598042.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598042, url, valid)

proc call*(call_598043: Call_PostResetServiceSpecificCredential_598028;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598044 = newJObject()
  var formData_598045 = newJObject()
  add(formData_598045, "UserName", newJString(UserName))
  add(formData_598045, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_598044, "Action", newJString(Action))
  add(query_598044, "Version", newJString(Version))
  result = call_598043.call(nil, query_598044, nil, formData_598045, nil)

var postResetServiceSpecificCredential* = Call_PostResetServiceSpecificCredential_598028(
    name: "postResetServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_PostResetServiceSpecificCredential_598029, base: "/",
    url: url_PostResetServiceSpecificCredential_598030,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetServiceSpecificCredential_598011 = ref object of OpenApiRestCall_593437
proc url_GetResetServiceSpecificCredential_598013(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResetServiceSpecificCredential_598012(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_598014 = query.getOrDefault("UserName")
  valid_598014 = validateParameter(valid_598014, JString, required = false,
                                 default = nil)
  if valid_598014 != nil:
    section.add "UserName", valid_598014
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598015 = query.getOrDefault("Action")
  valid_598015 = validateParameter(valid_598015, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_598015 != nil:
    section.add "Action", valid_598015
  var valid_598016 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_598016 = validateParameter(valid_598016, JString, required = true,
                                 default = nil)
  if valid_598016 != nil:
    section.add "ServiceSpecificCredentialId", valid_598016
  var valid_598017 = query.getOrDefault("Version")
  valid_598017 = validateParameter(valid_598017, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598017 != nil:
    section.add "Version", valid_598017
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598018 = header.getOrDefault("X-Amz-Date")
  valid_598018 = validateParameter(valid_598018, JString, required = false,
                                 default = nil)
  if valid_598018 != nil:
    section.add "X-Amz-Date", valid_598018
  var valid_598019 = header.getOrDefault("X-Amz-Security-Token")
  valid_598019 = validateParameter(valid_598019, JString, required = false,
                                 default = nil)
  if valid_598019 != nil:
    section.add "X-Amz-Security-Token", valid_598019
  var valid_598020 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598020 = validateParameter(valid_598020, JString, required = false,
                                 default = nil)
  if valid_598020 != nil:
    section.add "X-Amz-Content-Sha256", valid_598020
  var valid_598021 = header.getOrDefault("X-Amz-Algorithm")
  valid_598021 = validateParameter(valid_598021, JString, required = false,
                                 default = nil)
  if valid_598021 != nil:
    section.add "X-Amz-Algorithm", valid_598021
  var valid_598022 = header.getOrDefault("X-Amz-Signature")
  valid_598022 = validateParameter(valid_598022, JString, required = false,
                                 default = nil)
  if valid_598022 != nil:
    section.add "X-Amz-Signature", valid_598022
  var valid_598023 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598023 = validateParameter(valid_598023, JString, required = false,
                                 default = nil)
  if valid_598023 != nil:
    section.add "X-Amz-SignedHeaders", valid_598023
  var valid_598024 = header.getOrDefault("X-Amz-Credential")
  valid_598024 = validateParameter(valid_598024, JString, required = false,
                                 default = nil)
  if valid_598024 != nil:
    section.add "X-Amz-Credential", valid_598024
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598025: Call_GetResetServiceSpecificCredential_598011;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_598025.validator(path, query, header, formData, body)
  let scheme = call_598025.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598025.url(scheme.get, call_598025.host, call_598025.base,
                         call_598025.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598025, url, valid)

proc call*(call_598026: Call_GetResetServiceSpecificCredential_598011;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_598027 = newJObject()
  add(query_598027, "UserName", newJString(UserName))
  add(query_598027, "Action", newJString(Action))
  add(query_598027, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_598027, "Version", newJString(Version))
  result = call_598026.call(nil, query_598027, nil, nil, nil)

var getResetServiceSpecificCredential* = Call_GetResetServiceSpecificCredential_598011(
    name: "getResetServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_GetResetServiceSpecificCredential_598012, base: "/",
    url: url_GetResetServiceSpecificCredential_598013,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResyncMFADevice_598065 = ref object of OpenApiRestCall_593437
proc url_PostResyncMFADevice_598067(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResyncMFADevice_598066(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598068 = query.getOrDefault("Action")
  valid_598068 = validateParameter(valid_598068, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_598068 != nil:
    section.add "Action", valid_598068
  var valid_598069 = query.getOrDefault("Version")
  valid_598069 = validateParameter(valid_598069, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598069 != nil:
    section.add "Version", valid_598069
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598070 = header.getOrDefault("X-Amz-Date")
  valid_598070 = validateParameter(valid_598070, JString, required = false,
                                 default = nil)
  if valid_598070 != nil:
    section.add "X-Amz-Date", valid_598070
  var valid_598071 = header.getOrDefault("X-Amz-Security-Token")
  valid_598071 = validateParameter(valid_598071, JString, required = false,
                                 default = nil)
  if valid_598071 != nil:
    section.add "X-Amz-Security-Token", valid_598071
  var valid_598072 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598072 = validateParameter(valid_598072, JString, required = false,
                                 default = nil)
  if valid_598072 != nil:
    section.add "X-Amz-Content-Sha256", valid_598072
  var valid_598073 = header.getOrDefault("X-Amz-Algorithm")
  valid_598073 = validateParameter(valid_598073, JString, required = false,
                                 default = nil)
  if valid_598073 != nil:
    section.add "X-Amz-Algorithm", valid_598073
  var valid_598074 = header.getOrDefault("X-Amz-Signature")
  valid_598074 = validateParameter(valid_598074, JString, required = false,
                                 default = nil)
  if valid_598074 != nil:
    section.add "X-Amz-Signature", valid_598074
  var valid_598075 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598075 = validateParameter(valid_598075, JString, required = false,
                                 default = nil)
  if valid_598075 != nil:
    section.add "X-Amz-SignedHeaders", valid_598075
  var valid_598076 = header.getOrDefault("X-Amz-Credential")
  valid_598076 = validateParameter(valid_598076, JString, required = false,
                                 default = nil)
  if valid_598076 != nil:
    section.add "X-Amz-Credential", valid_598076
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_598077 = formData.getOrDefault("SerialNumber")
  valid_598077 = validateParameter(valid_598077, JString, required = true,
                                 default = nil)
  if valid_598077 != nil:
    section.add "SerialNumber", valid_598077
  var valid_598078 = formData.getOrDefault("UserName")
  valid_598078 = validateParameter(valid_598078, JString, required = true,
                                 default = nil)
  if valid_598078 != nil:
    section.add "UserName", valid_598078
  var valid_598079 = formData.getOrDefault("AuthenticationCode2")
  valid_598079 = validateParameter(valid_598079, JString, required = true,
                                 default = nil)
  if valid_598079 != nil:
    section.add "AuthenticationCode2", valid_598079
  var valid_598080 = formData.getOrDefault("AuthenticationCode1")
  valid_598080 = validateParameter(valid_598080, JString, required = true,
                                 default = nil)
  if valid_598080 != nil:
    section.add "AuthenticationCode1", valid_598080
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598081: Call_PostResyncMFADevice_598065; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_598081.validator(path, query, header, formData, body)
  let scheme = call_598081.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598081.url(scheme.get, call_598081.host, call_598081.base,
                         call_598081.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598081, url, valid)

proc call*(call_598082: Call_PostResyncMFADevice_598065; SerialNumber: string;
          UserName: string; AuthenticationCode2: string;
          AuthenticationCode1: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   Version: string (required)
  var query_598083 = newJObject()
  var formData_598084 = newJObject()
  add(formData_598084, "SerialNumber", newJString(SerialNumber))
  add(formData_598084, "UserName", newJString(UserName))
  add(formData_598084, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_598083, "Action", newJString(Action))
  add(formData_598084, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_598083, "Version", newJString(Version))
  result = call_598082.call(nil, query_598083, nil, formData_598084, nil)

var postResyncMFADevice* = Call_PostResyncMFADevice_598065(
    name: "postResyncMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResyncMFADevice",
    validator: validate_PostResyncMFADevice_598066, base: "/",
    url: url_PostResyncMFADevice_598067, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResyncMFADevice_598046 = ref object of OpenApiRestCall_593437
proc url_GetResyncMFADevice_598048(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResyncMFADevice_598047(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_598049 = query.getOrDefault("SerialNumber")
  valid_598049 = validateParameter(valid_598049, JString, required = true,
                                 default = nil)
  if valid_598049 != nil:
    section.add "SerialNumber", valid_598049
  var valid_598050 = query.getOrDefault("AuthenticationCode2")
  valid_598050 = validateParameter(valid_598050, JString, required = true,
                                 default = nil)
  if valid_598050 != nil:
    section.add "AuthenticationCode2", valid_598050
  var valid_598051 = query.getOrDefault("AuthenticationCode1")
  valid_598051 = validateParameter(valid_598051, JString, required = true,
                                 default = nil)
  if valid_598051 != nil:
    section.add "AuthenticationCode1", valid_598051
  var valid_598052 = query.getOrDefault("UserName")
  valid_598052 = validateParameter(valid_598052, JString, required = true,
                                 default = nil)
  if valid_598052 != nil:
    section.add "UserName", valid_598052
  var valid_598053 = query.getOrDefault("Action")
  valid_598053 = validateParameter(valid_598053, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_598053 != nil:
    section.add "Action", valid_598053
  var valid_598054 = query.getOrDefault("Version")
  valid_598054 = validateParameter(valid_598054, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598054 != nil:
    section.add "Version", valid_598054
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598055 = header.getOrDefault("X-Amz-Date")
  valid_598055 = validateParameter(valid_598055, JString, required = false,
                                 default = nil)
  if valid_598055 != nil:
    section.add "X-Amz-Date", valid_598055
  var valid_598056 = header.getOrDefault("X-Amz-Security-Token")
  valid_598056 = validateParameter(valid_598056, JString, required = false,
                                 default = nil)
  if valid_598056 != nil:
    section.add "X-Amz-Security-Token", valid_598056
  var valid_598057 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598057 = validateParameter(valid_598057, JString, required = false,
                                 default = nil)
  if valid_598057 != nil:
    section.add "X-Amz-Content-Sha256", valid_598057
  var valid_598058 = header.getOrDefault("X-Amz-Algorithm")
  valid_598058 = validateParameter(valid_598058, JString, required = false,
                                 default = nil)
  if valid_598058 != nil:
    section.add "X-Amz-Algorithm", valid_598058
  var valid_598059 = header.getOrDefault("X-Amz-Signature")
  valid_598059 = validateParameter(valid_598059, JString, required = false,
                                 default = nil)
  if valid_598059 != nil:
    section.add "X-Amz-Signature", valid_598059
  var valid_598060 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598060 = validateParameter(valid_598060, JString, required = false,
                                 default = nil)
  if valid_598060 != nil:
    section.add "X-Amz-SignedHeaders", valid_598060
  var valid_598061 = header.getOrDefault("X-Amz-Credential")
  valid_598061 = validateParameter(valid_598061, JString, required = false,
                                 default = nil)
  if valid_598061 != nil:
    section.add "X-Amz-Credential", valid_598061
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598062: Call_GetResyncMFADevice_598046; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_598062.validator(path, query, header, formData, body)
  let scheme = call_598062.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598062.url(scheme.get, call_598062.host, call_598062.base,
                         call_598062.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598062, url, valid)

proc call*(call_598063: Call_GetResyncMFADevice_598046; SerialNumber: string;
          AuthenticationCode2: string; AuthenticationCode1: string;
          UserName: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598064 = newJObject()
  add(query_598064, "SerialNumber", newJString(SerialNumber))
  add(query_598064, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_598064, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_598064, "UserName", newJString(UserName))
  add(query_598064, "Action", newJString(Action))
  add(query_598064, "Version", newJString(Version))
  result = call_598063.call(nil, query_598064, nil, nil, nil)

var getResyncMFADevice* = Call_GetResyncMFADevice_598046(
    name: "getResyncMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ResyncMFADevice", validator: validate_GetResyncMFADevice_598047,
    base: "/", url: url_GetResyncMFADevice_598048,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDefaultPolicyVersion_598102 = ref object of OpenApiRestCall_593437
proc url_PostSetDefaultPolicyVersion_598104(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetDefaultPolicyVersion_598103(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598105 = query.getOrDefault("Action")
  valid_598105 = validateParameter(valid_598105, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_598105 != nil:
    section.add "Action", valid_598105
  var valid_598106 = query.getOrDefault("Version")
  valid_598106 = validateParameter(valid_598106, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598106 != nil:
    section.add "Version", valid_598106
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598107 = header.getOrDefault("X-Amz-Date")
  valid_598107 = validateParameter(valid_598107, JString, required = false,
                                 default = nil)
  if valid_598107 != nil:
    section.add "X-Amz-Date", valid_598107
  var valid_598108 = header.getOrDefault("X-Amz-Security-Token")
  valid_598108 = validateParameter(valid_598108, JString, required = false,
                                 default = nil)
  if valid_598108 != nil:
    section.add "X-Amz-Security-Token", valid_598108
  var valid_598109 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598109 = validateParameter(valid_598109, JString, required = false,
                                 default = nil)
  if valid_598109 != nil:
    section.add "X-Amz-Content-Sha256", valid_598109
  var valid_598110 = header.getOrDefault("X-Amz-Algorithm")
  valid_598110 = validateParameter(valid_598110, JString, required = false,
                                 default = nil)
  if valid_598110 != nil:
    section.add "X-Amz-Algorithm", valid_598110
  var valid_598111 = header.getOrDefault("X-Amz-Signature")
  valid_598111 = validateParameter(valid_598111, JString, required = false,
                                 default = nil)
  if valid_598111 != nil:
    section.add "X-Amz-Signature", valid_598111
  var valid_598112 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598112 = validateParameter(valid_598112, JString, required = false,
                                 default = nil)
  if valid_598112 != nil:
    section.add "X-Amz-SignedHeaders", valid_598112
  var valid_598113 = header.getOrDefault("X-Amz-Credential")
  valid_598113 = validateParameter(valid_598113, JString, required = false,
                                 default = nil)
  if valid_598113 != nil:
    section.add "X-Amz-Credential", valid_598113
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_598114 = formData.getOrDefault("PolicyArn")
  valid_598114 = validateParameter(valid_598114, JString, required = true,
                                 default = nil)
  if valid_598114 != nil:
    section.add "PolicyArn", valid_598114
  var valid_598115 = formData.getOrDefault("VersionId")
  valid_598115 = validateParameter(valid_598115, JString, required = true,
                                 default = nil)
  if valid_598115 != nil:
    section.add "VersionId", valid_598115
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598116: Call_PostSetDefaultPolicyVersion_598102; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_598116.validator(path, query, header, formData, body)
  let scheme = call_598116.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598116.url(scheme.get, call_598116.host, call_598116.base,
                         call_598116.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598116, url, valid)

proc call*(call_598117: Call_PostSetDefaultPolicyVersion_598102; PolicyArn: string;
          VersionId: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  var query_598118 = newJObject()
  var formData_598119 = newJObject()
  add(formData_598119, "PolicyArn", newJString(PolicyArn))
  add(query_598118, "Action", newJString(Action))
  add(query_598118, "Version", newJString(Version))
  add(formData_598119, "VersionId", newJString(VersionId))
  result = call_598117.call(nil, query_598118, nil, formData_598119, nil)

var postSetDefaultPolicyVersion* = Call_PostSetDefaultPolicyVersion_598102(
    name: "postSetDefaultPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_PostSetDefaultPolicyVersion_598103, base: "/",
    url: url_PostSetDefaultPolicyVersion_598104,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDefaultPolicyVersion_598085 = ref object of OpenApiRestCall_593437
proc url_GetSetDefaultPolicyVersion_598087(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetDefaultPolicyVersion_598086(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_598088 = query.getOrDefault("PolicyArn")
  valid_598088 = validateParameter(valid_598088, JString, required = true,
                                 default = nil)
  if valid_598088 != nil:
    section.add "PolicyArn", valid_598088
  var valid_598089 = query.getOrDefault("VersionId")
  valid_598089 = validateParameter(valid_598089, JString, required = true,
                                 default = nil)
  if valid_598089 != nil:
    section.add "VersionId", valid_598089
  var valid_598090 = query.getOrDefault("Action")
  valid_598090 = validateParameter(valid_598090, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_598090 != nil:
    section.add "Action", valid_598090
  var valid_598091 = query.getOrDefault("Version")
  valid_598091 = validateParameter(valid_598091, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598091 != nil:
    section.add "Version", valid_598091
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598092 = header.getOrDefault("X-Amz-Date")
  valid_598092 = validateParameter(valid_598092, JString, required = false,
                                 default = nil)
  if valid_598092 != nil:
    section.add "X-Amz-Date", valid_598092
  var valid_598093 = header.getOrDefault("X-Amz-Security-Token")
  valid_598093 = validateParameter(valid_598093, JString, required = false,
                                 default = nil)
  if valid_598093 != nil:
    section.add "X-Amz-Security-Token", valid_598093
  var valid_598094 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598094 = validateParameter(valid_598094, JString, required = false,
                                 default = nil)
  if valid_598094 != nil:
    section.add "X-Amz-Content-Sha256", valid_598094
  var valid_598095 = header.getOrDefault("X-Amz-Algorithm")
  valid_598095 = validateParameter(valid_598095, JString, required = false,
                                 default = nil)
  if valid_598095 != nil:
    section.add "X-Amz-Algorithm", valid_598095
  var valid_598096 = header.getOrDefault("X-Amz-Signature")
  valid_598096 = validateParameter(valid_598096, JString, required = false,
                                 default = nil)
  if valid_598096 != nil:
    section.add "X-Amz-Signature", valid_598096
  var valid_598097 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598097 = validateParameter(valid_598097, JString, required = false,
                                 default = nil)
  if valid_598097 != nil:
    section.add "X-Amz-SignedHeaders", valid_598097
  var valid_598098 = header.getOrDefault("X-Amz-Credential")
  valid_598098 = validateParameter(valid_598098, JString, required = false,
                                 default = nil)
  if valid_598098 != nil:
    section.add "X-Amz-Credential", valid_598098
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598099: Call_GetSetDefaultPolicyVersion_598085; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_598099.validator(path, query, header, formData, body)
  let scheme = call_598099.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598099.url(scheme.get, call_598099.host, call_598099.base,
                         call_598099.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598099, url, valid)

proc call*(call_598100: Call_GetSetDefaultPolicyVersion_598085; PolicyArn: string;
          VersionId: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598101 = newJObject()
  add(query_598101, "PolicyArn", newJString(PolicyArn))
  add(query_598101, "VersionId", newJString(VersionId))
  add(query_598101, "Action", newJString(Action))
  add(query_598101, "Version", newJString(Version))
  result = call_598100.call(nil, query_598101, nil, nil, nil)

var getSetDefaultPolicyVersion* = Call_GetSetDefaultPolicyVersion_598085(
    name: "getSetDefaultPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_GetSetDefaultPolicyVersion_598086, base: "/",
    url: url_GetSetDefaultPolicyVersion_598087,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetSecurityTokenServicePreferences_598136 = ref object of OpenApiRestCall_593437
proc url_PostSetSecurityTokenServicePreferences_598138(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSetSecurityTokenServicePreferences_598137(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598139 = query.getOrDefault("Action")
  valid_598139 = validateParameter(valid_598139, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_598139 != nil:
    section.add "Action", valid_598139
  var valid_598140 = query.getOrDefault("Version")
  valid_598140 = validateParameter(valid_598140, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598140 != nil:
    section.add "Version", valid_598140
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598141 = header.getOrDefault("X-Amz-Date")
  valid_598141 = validateParameter(valid_598141, JString, required = false,
                                 default = nil)
  if valid_598141 != nil:
    section.add "X-Amz-Date", valid_598141
  var valid_598142 = header.getOrDefault("X-Amz-Security-Token")
  valid_598142 = validateParameter(valid_598142, JString, required = false,
                                 default = nil)
  if valid_598142 != nil:
    section.add "X-Amz-Security-Token", valid_598142
  var valid_598143 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598143 = validateParameter(valid_598143, JString, required = false,
                                 default = nil)
  if valid_598143 != nil:
    section.add "X-Amz-Content-Sha256", valid_598143
  var valid_598144 = header.getOrDefault("X-Amz-Algorithm")
  valid_598144 = validateParameter(valid_598144, JString, required = false,
                                 default = nil)
  if valid_598144 != nil:
    section.add "X-Amz-Algorithm", valid_598144
  var valid_598145 = header.getOrDefault("X-Amz-Signature")
  valid_598145 = validateParameter(valid_598145, JString, required = false,
                                 default = nil)
  if valid_598145 != nil:
    section.add "X-Amz-Signature", valid_598145
  var valid_598146 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598146 = validateParameter(valid_598146, JString, required = false,
                                 default = nil)
  if valid_598146 != nil:
    section.add "X-Amz-SignedHeaders", valid_598146
  var valid_598147 = header.getOrDefault("X-Amz-Credential")
  valid_598147 = validateParameter(valid_598147, JString, required = false,
                                 default = nil)
  if valid_598147 != nil:
    section.add "X-Amz-Credential", valid_598147
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalEndpointTokenVersion` field"
  var valid_598148 = formData.getOrDefault("GlobalEndpointTokenVersion")
  valid_598148 = validateParameter(valid_598148, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_598148 != nil:
    section.add "GlobalEndpointTokenVersion", valid_598148
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598149: Call_PostSetSecurityTokenServicePreferences_598136;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_598149.validator(path, query, header, formData, body)
  let scheme = call_598149.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598149.url(scheme.get, call_598149.host, call_598149.base,
                         call_598149.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598149, url, valid)

proc call*(call_598150: Call_PostSetSecurityTokenServicePreferences_598136;
          Action: string = "SetSecurityTokenServicePreferences";
          GlobalEndpointTokenVersion: string = "v1Token";
          Version: string = "2010-05-08"): Recallable =
  ## postSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   Action: string (required)
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_598151 = newJObject()
  var formData_598152 = newJObject()
  add(query_598151, "Action", newJString(Action))
  add(formData_598152, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_598151, "Version", newJString(Version))
  result = call_598150.call(nil, query_598151, nil, formData_598152, nil)

var postSetSecurityTokenServicePreferences* = Call_PostSetSecurityTokenServicePreferences_598136(
    name: "postSetSecurityTokenServicePreferences", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_PostSetSecurityTokenServicePreferences_598137, base: "/",
    url: url_PostSetSecurityTokenServicePreferences_598138,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetSecurityTokenServicePreferences_598120 = ref object of OpenApiRestCall_593437
proc url_GetSetSecurityTokenServicePreferences_598122(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSetSecurityTokenServicePreferences_598121(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598123 = query.getOrDefault("Action")
  valid_598123 = validateParameter(valid_598123, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_598123 != nil:
    section.add "Action", valid_598123
  var valid_598124 = query.getOrDefault("GlobalEndpointTokenVersion")
  valid_598124 = validateParameter(valid_598124, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_598124 != nil:
    section.add "GlobalEndpointTokenVersion", valid_598124
  var valid_598125 = query.getOrDefault("Version")
  valid_598125 = validateParameter(valid_598125, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598125 != nil:
    section.add "Version", valid_598125
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598126 = header.getOrDefault("X-Amz-Date")
  valid_598126 = validateParameter(valid_598126, JString, required = false,
                                 default = nil)
  if valid_598126 != nil:
    section.add "X-Amz-Date", valid_598126
  var valid_598127 = header.getOrDefault("X-Amz-Security-Token")
  valid_598127 = validateParameter(valid_598127, JString, required = false,
                                 default = nil)
  if valid_598127 != nil:
    section.add "X-Amz-Security-Token", valid_598127
  var valid_598128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598128 = validateParameter(valid_598128, JString, required = false,
                                 default = nil)
  if valid_598128 != nil:
    section.add "X-Amz-Content-Sha256", valid_598128
  var valid_598129 = header.getOrDefault("X-Amz-Algorithm")
  valid_598129 = validateParameter(valid_598129, JString, required = false,
                                 default = nil)
  if valid_598129 != nil:
    section.add "X-Amz-Algorithm", valid_598129
  var valid_598130 = header.getOrDefault("X-Amz-Signature")
  valid_598130 = validateParameter(valid_598130, JString, required = false,
                                 default = nil)
  if valid_598130 != nil:
    section.add "X-Amz-Signature", valid_598130
  var valid_598131 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598131 = validateParameter(valid_598131, JString, required = false,
                                 default = nil)
  if valid_598131 != nil:
    section.add "X-Amz-SignedHeaders", valid_598131
  var valid_598132 = header.getOrDefault("X-Amz-Credential")
  valid_598132 = validateParameter(valid_598132, JString, required = false,
                                 default = nil)
  if valid_598132 != nil:
    section.add "X-Amz-Credential", valid_598132
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598133: Call_GetSetSecurityTokenServicePreferences_598120;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_598133.validator(path, query, header, formData, body)
  let scheme = call_598133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598133.url(scheme.get, call_598133.host, call_598133.base,
                         call_598133.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598133, url, valid)

proc call*(call_598134: Call_GetSetSecurityTokenServicePreferences_598120;
          Action: string = "SetSecurityTokenServicePreferences";
          GlobalEndpointTokenVersion: string = "v1Token";
          Version: string = "2010-05-08"): Recallable =
  ## getSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   Action: string (required)
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_598135 = newJObject()
  add(query_598135, "Action", newJString(Action))
  add(query_598135, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_598135, "Version", newJString(Version))
  result = call_598134.call(nil, query_598135, nil, nil, nil)

var getSetSecurityTokenServicePreferences* = Call_GetSetSecurityTokenServicePreferences_598120(
    name: "getSetSecurityTokenServicePreferences", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_GetSetSecurityTokenServicePreferences_598121, base: "/",
    url: url_GetSetSecurityTokenServicePreferences_598122,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulateCustomPolicy_598178 = ref object of OpenApiRestCall_593437
proc url_PostSimulateCustomPolicy_598180(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSimulateCustomPolicy_598179(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598181 = query.getOrDefault("Action")
  valid_598181 = validateParameter(valid_598181, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_598181 != nil:
    section.add "Action", valid_598181
  var valid_598182 = query.getOrDefault("Version")
  valid_598182 = validateParameter(valid_598182, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598182 != nil:
    section.add "Version", valid_598182
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598183 = header.getOrDefault("X-Amz-Date")
  valid_598183 = validateParameter(valid_598183, JString, required = false,
                                 default = nil)
  if valid_598183 != nil:
    section.add "X-Amz-Date", valid_598183
  var valid_598184 = header.getOrDefault("X-Amz-Security-Token")
  valid_598184 = validateParameter(valid_598184, JString, required = false,
                                 default = nil)
  if valid_598184 != nil:
    section.add "X-Amz-Security-Token", valid_598184
  var valid_598185 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598185 = validateParameter(valid_598185, JString, required = false,
                                 default = nil)
  if valid_598185 != nil:
    section.add "X-Amz-Content-Sha256", valid_598185
  var valid_598186 = header.getOrDefault("X-Amz-Algorithm")
  valid_598186 = validateParameter(valid_598186, JString, required = false,
                                 default = nil)
  if valid_598186 != nil:
    section.add "X-Amz-Algorithm", valid_598186
  var valid_598187 = header.getOrDefault("X-Amz-Signature")
  valid_598187 = validateParameter(valid_598187, JString, required = false,
                                 default = nil)
  if valid_598187 != nil:
    section.add "X-Amz-Signature", valid_598187
  var valid_598188 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598188 = validateParameter(valid_598188, JString, required = false,
                                 default = nil)
  if valid_598188 != nil:
    section.add "X-Amz-SignedHeaders", valid_598188
  var valid_598189 = header.getOrDefault("X-Amz-Credential")
  valid_598189 = validateParameter(valid_598189, JString, required = false,
                                 default = nil)
  if valid_598189 != nil:
    section.add "X-Amz-Credential", valid_598189
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  var valid_598190 = formData.getOrDefault("ResourceArns")
  valid_598190 = validateParameter(valid_598190, JArray, required = false,
                                 default = nil)
  if valid_598190 != nil:
    section.add "ResourceArns", valid_598190
  var valid_598191 = formData.getOrDefault("ContextEntries")
  valid_598191 = validateParameter(valid_598191, JArray, required = false,
                                 default = nil)
  if valid_598191 != nil:
    section.add "ContextEntries", valid_598191
  var valid_598192 = formData.getOrDefault("CallerArn")
  valid_598192 = validateParameter(valid_598192, JString, required = false,
                                 default = nil)
  if valid_598192 != nil:
    section.add "CallerArn", valid_598192
  var valid_598193 = formData.getOrDefault("ResourceOwner")
  valid_598193 = validateParameter(valid_598193, JString, required = false,
                                 default = nil)
  if valid_598193 != nil:
    section.add "ResourceOwner", valid_598193
  assert formData != nil,
        "formData argument is necessary due to required `ActionNames` field"
  var valid_598194 = formData.getOrDefault("ActionNames")
  valid_598194 = validateParameter(valid_598194, JArray, required = true, default = nil)
  if valid_598194 != nil:
    section.add "ActionNames", valid_598194
  var valid_598195 = formData.getOrDefault("Marker")
  valid_598195 = validateParameter(valid_598195, JString, required = false,
                                 default = nil)
  if valid_598195 != nil:
    section.add "Marker", valid_598195
  var valid_598196 = formData.getOrDefault("PolicyInputList")
  valid_598196 = validateParameter(valid_598196, JArray, required = true, default = nil)
  if valid_598196 != nil:
    section.add "PolicyInputList", valid_598196
  var valid_598197 = formData.getOrDefault("ResourceHandlingOption")
  valid_598197 = validateParameter(valid_598197, JString, required = false,
                                 default = nil)
  if valid_598197 != nil:
    section.add "ResourceHandlingOption", valid_598197
  var valid_598198 = formData.getOrDefault("MaxItems")
  valid_598198 = validateParameter(valid_598198, JInt, required = false, default = nil)
  if valid_598198 != nil:
    section.add "MaxItems", valid_598198
  var valid_598199 = formData.getOrDefault("ResourcePolicy")
  valid_598199 = validateParameter(valid_598199, JString, required = false,
                                 default = nil)
  if valid_598199 != nil:
    section.add "ResourcePolicy", valid_598199
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598200: Call_PostSimulateCustomPolicy_598178; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_598200.validator(path, query, header, formData, body)
  let scheme = call_598200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598200.url(scheme.get, call_598200.host, call_598200.base,
                         call_598200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598200, url, valid)

proc call*(call_598201: Call_PostSimulateCustomPolicy_598178;
          ActionNames: JsonNode; PolicyInputList: JsonNode;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceOwner: string = ""; Marker: string = "";
          Action: string = "SimulateCustomPolicy";
          ResourceHandlingOption: string = ""; MaxItems: int = 0;
          ResourcePolicy: string = ""; Version: string = "2010-05-08"): Recallable =
  ## postSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_598202 = newJObject()
  var formData_598203 = newJObject()
  if ResourceArns != nil:
    formData_598203.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_598203.add "ContextEntries", ContextEntries
  add(formData_598203, "CallerArn", newJString(CallerArn))
  add(formData_598203, "ResourceOwner", newJString(ResourceOwner))
  if ActionNames != nil:
    formData_598203.add "ActionNames", ActionNames
  add(formData_598203, "Marker", newJString(Marker))
  add(query_598202, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_598203.add "PolicyInputList", PolicyInputList
  add(formData_598203, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  add(formData_598203, "MaxItems", newJInt(MaxItems))
  add(formData_598203, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_598202, "Version", newJString(Version))
  result = call_598201.call(nil, query_598202, nil, formData_598203, nil)

var postSimulateCustomPolicy* = Call_PostSimulateCustomPolicy_598178(
    name: "postSimulateCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_PostSimulateCustomPolicy_598179, base: "/",
    url: url_PostSimulateCustomPolicy_598180, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulateCustomPolicy_598153 = ref object of OpenApiRestCall_593437
proc url_GetSimulateCustomPolicy_598155(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSimulateCustomPolicy_598154(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_598156 = query.getOrDefault("ContextEntries")
  valid_598156 = validateParameter(valid_598156, JArray, required = false,
                                 default = nil)
  if valid_598156 != nil:
    section.add "ContextEntries", valid_598156
  var valid_598157 = query.getOrDefault("ResourcePolicy")
  valid_598157 = validateParameter(valid_598157, JString, required = false,
                                 default = nil)
  if valid_598157 != nil:
    section.add "ResourcePolicy", valid_598157
  assert query != nil,
        "query argument is necessary due to required `ActionNames` field"
  var valid_598158 = query.getOrDefault("ActionNames")
  valid_598158 = validateParameter(valid_598158, JArray, required = true, default = nil)
  if valid_598158 != nil:
    section.add "ActionNames", valid_598158
  var valid_598159 = query.getOrDefault("PolicyInputList")
  valid_598159 = validateParameter(valid_598159, JArray, required = true, default = nil)
  if valid_598159 != nil:
    section.add "PolicyInputList", valid_598159
  var valid_598160 = query.getOrDefault("Action")
  valid_598160 = validateParameter(valid_598160, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_598160 != nil:
    section.add "Action", valid_598160
  var valid_598161 = query.getOrDefault("ResourceArns")
  valid_598161 = validateParameter(valid_598161, JArray, required = false,
                                 default = nil)
  if valid_598161 != nil:
    section.add "ResourceArns", valid_598161
  var valid_598162 = query.getOrDefault("Marker")
  valid_598162 = validateParameter(valid_598162, JString, required = false,
                                 default = nil)
  if valid_598162 != nil:
    section.add "Marker", valid_598162
  var valid_598163 = query.getOrDefault("ResourceOwner")
  valid_598163 = validateParameter(valid_598163, JString, required = false,
                                 default = nil)
  if valid_598163 != nil:
    section.add "ResourceOwner", valid_598163
  var valid_598164 = query.getOrDefault("CallerArn")
  valid_598164 = validateParameter(valid_598164, JString, required = false,
                                 default = nil)
  if valid_598164 != nil:
    section.add "CallerArn", valid_598164
  var valid_598165 = query.getOrDefault("ResourceHandlingOption")
  valid_598165 = validateParameter(valid_598165, JString, required = false,
                                 default = nil)
  if valid_598165 != nil:
    section.add "ResourceHandlingOption", valid_598165
  var valid_598166 = query.getOrDefault("MaxItems")
  valid_598166 = validateParameter(valid_598166, JInt, required = false, default = nil)
  if valid_598166 != nil:
    section.add "MaxItems", valid_598166
  var valid_598167 = query.getOrDefault("Version")
  valid_598167 = validateParameter(valid_598167, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598167 != nil:
    section.add "Version", valid_598167
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598168 = header.getOrDefault("X-Amz-Date")
  valid_598168 = validateParameter(valid_598168, JString, required = false,
                                 default = nil)
  if valid_598168 != nil:
    section.add "X-Amz-Date", valid_598168
  var valid_598169 = header.getOrDefault("X-Amz-Security-Token")
  valid_598169 = validateParameter(valid_598169, JString, required = false,
                                 default = nil)
  if valid_598169 != nil:
    section.add "X-Amz-Security-Token", valid_598169
  var valid_598170 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598170 = validateParameter(valid_598170, JString, required = false,
                                 default = nil)
  if valid_598170 != nil:
    section.add "X-Amz-Content-Sha256", valid_598170
  var valid_598171 = header.getOrDefault("X-Amz-Algorithm")
  valid_598171 = validateParameter(valid_598171, JString, required = false,
                                 default = nil)
  if valid_598171 != nil:
    section.add "X-Amz-Algorithm", valid_598171
  var valid_598172 = header.getOrDefault("X-Amz-Signature")
  valid_598172 = validateParameter(valid_598172, JString, required = false,
                                 default = nil)
  if valid_598172 != nil:
    section.add "X-Amz-Signature", valid_598172
  var valid_598173 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598173 = validateParameter(valid_598173, JString, required = false,
                                 default = nil)
  if valid_598173 != nil:
    section.add "X-Amz-SignedHeaders", valid_598173
  var valid_598174 = header.getOrDefault("X-Amz-Credential")
  valid_598174 = validateParameter(valid_598174, JString, required = false,
                                 default = nil)
  if valid_598174 != nil:
    section.add "X-Amz-Credential", valid_598174
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598175: Call_GetSimulateCustomPolicy_598153; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_598175.validator(path, query, header, formData, body)
  let scheme = call_598175.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598175.url(scheme.get, call_598175.host, call_598175.base,
                         call_598175.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598175, url, valid)

proc call*(call_598176: Call_GetSimulateCustomPolicy_598153; ActionNames: JsonNode;
          PolicyInputList: JsonNode; ContextEntries: JsonNode = nil;
          ResourcePolicy: string = ""; Action: string = "SimulateCustomPolicy";
          ResourceArns: JsonNode = nil; Marker: string = ""; ResourceOwner: string = "";
          CallerArn: string = ""; ResourceHandlingOption: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_598177 = newJObject()
  if ContextEntries != nil:
    query_598177.add "ContextEntries", ContextEntries
  add(query_598177, "ResourcePolicy", newJString(ResourcePolicy))
  if ActionNames != nil:
    query_598177.add "ActionNames", ActionNames
  if PolicyInputList != nil:
    query_598177.add "PolicyInputList", PolicyInputList
  add(query_598177, "Action", newJString(Action))
  if ResourceArns != nil:
    query_598177.add "ResourceArns", ResourceArns
  add(query_598177, "Marker", newJString(Marker))
  add(query_598177, "ResourceOwner", newJString(ResourceOwner))
  add(query_598177, "CallerArn", newJString(CallerArn))
  add(query_598177, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_598177, "MaxItems", newJInt(MaxItems))
  add(query_598177, "Version", newJString(Version))
  result = call_598176.call(nil, query_598177, nil, nil, nil)

var getSimulateCustomPolicy* = Call_GetSimulateCustomPolicy_598153(
    name: "getSimulateCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_GetSimulateCustomPolicy_598154, base: "/",
    url: url_GetSimulateCustomPolicy_598155, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulatePrincipalPolicy_598230 = ref object of OpenApiRestCall_593437
proc url_PostSimulatePrincipalPolicy_598232(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostSimulatePrincipalPolicy_598231(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598233 = query.getOrDefault("Action")
  valid_598233 = validateParameter(valid_598233, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_598233 != nil:
    section.add "Action", valid_598233
  var valid_598234 = query.getOrDefault("Version")
  valid_598234 = validateParameter(valid_598234, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598234 != nil:
    section.add "Version", valid_598234
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598235 = header.getOrDefault("X-Amz-Date")
  valid_598235 = validateParameter(valid_598235, JString, required = false,
                                 default = nil)
  if valid_598235 != nil:
    section.add "X-Amz-Date", valid_598235
  var valid_598236 = header.getOrDefault("X-Amz-Security-Token")
  valid_598236 = validateParameter(valid_598236, JString, required = false,
                                 default = nil)
  if valid_598236 != nil:
    section.add "X-Amz-Security-Token", valid_598236
  var valid_598237 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598237 = validateParameter(valid_598237, JString, required = false,
                                 default = nil)
  if valid_598237 != nil:
    section.add "X-Amz-Content-Sha256", valid_598237
  var valid_598238 = header.getOrDefault("X-Amz-Algorithm")
  valid_598238 = validateParameter(valid_598238, JString, required = false,
                                 default = nil)
  if valid_598238 != nil:
    section.add "X-Amz-Algorithm", valid_598238
  var valid_598239 = header.getOrDefault("X-Amz-Signature")
  valid_598239 = validateParameter(valid_598239, JString, required = false,
                                 default = nil)
  if valid_598239 != nil:
    section.add "X-Amz-Signature", valid_598239
  var valid_598240 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598240 = validateParameter(valid_598240, JString, required = false,
                                 default = nil)
  if valid_598240 != nil:
    section.add "X-Amz-SignedHeaders", valid_598240
  var valid_598241 = header.getOrDefault("X-Amz-Credential")
  valid_598241 = validateParameter(valid_598241, JString, required = false,
                                 default = nil)
  if valid_598241 != nil:
    section.add "X-Amz-Credential", valid_598241
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  var valid_598242 = formData.getOrDefault("ResourceArns")
  valid_598242 = validateParameter(valid_598242, JArray, required = false,
                                 default = nil)
  if valid_598242 != nil:
    section.add "ResourceArns", valid_598242
  var valid_598243 = formData.getOrDefault("ContextEntries")
  valid_598243 = validateParameter(valid_598243, JArray, required = false,
                                 default = nil)
  if valid_598243 != nil:
    section.add "ContextEntries", valid_598243
  var valid_598244 = formData.getOrDefault("CallerArn")
  valid_598244 = validateParameter(valid_598244, JString, required = false,
                                 default = nil)
  if valid_598244 != nil:
    section.add "CallerArn", valid_598244
  var valid_598245 = formData.getOrDefault("ResourceOwner")
  valid_598245 = validateParameter(valid_598245, JString, required = false,
                                 default = nil)
  if valid_598245 != nil:
    section.add "ResourceOwner", valid_598245
  assert formData != nil,
        "formData argument is necessary due to required `ActionNames` field"
  var valid_598246 = formData.getOrDefault("ActionNames")
  valid_598246 = validateParameter(valid_598246, JArray, required = true, default = nil)
  if valid_598246 != nil:
    section.add "ActionNames", valid_598246
  var valid_598247 = formData.getOrDefault("Marker")
  valid_598247 = validateParameter(valid_598247, JString, required = false,
                                 default = nil)
  if valid_598247 != nil:
    section.add "Marker", valid_598247
  var valid_598248 = formData.getOrDefault("PolicyInputList")
  valid_598248 = validateParameter(valid_598248, JArray, required = false,
                                 default = nil)
  if valid_598248 != nil:
    section.add "PolicyInputList", valid_598248
  var valid_598249 = formData.getOrDefault("ResourceHandlingOption")
  valid_598249 = validateParameter(valid_598249, JString, required = false,
                                 default = nil)
  if valid_598249 != nil:
    section.add "ResourceHandlingOption", valid_598249
  var valid_598250 = formData.getOrDefault("PolicySourceArn")
  valid_598250 = validateParameter(valid_598250, JString, required = true,
                                 default = nil)
  if valid_598250 != nil:
    section.add "PolicySourceArn", valid_598250
  var valid_598251 = formData.getOrDefault("MaxItems")
  valid_598251 = validateParameter(valid_598251, JInt, required = false, default = nil)
  if valid_598251 != nil:
    section.add "MaxItems", valid_598251
  var valid_598252 = formData.getOrDefault("ResourcePolicy")
  valid_598252 = validateParameter(valid_598252, JString, required = false,
                                 default = nil)
  if valid_598252 != nil:
    section.add "ResourcePolicy", valid_598252
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598253: Call_PostSimulatePrincipalPolicy_598230; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_598253.validator(path, query, header, formData, body)
  let scheme = call_598253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598253.url(scheme.get, call_598253.host, call_598253.base,
                         call_598253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598253, url, valid)

proc call*(call_598254: Call_PostSimulatePrincipalPolicy_598230;
          ActionNames: JsonNode; PolicySourceArn: string;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceOwner: string = ""; Marker: string = "";
          Action: string = "SimulatePrincipalPolicy";
          PolicyInputList: JsonNode = nil; ResourceHandlingOption: string = "";
          MaxItems: int = 0; ResourcePolicy: string = ""; Version: string = "2010-05-08"): Recallable =
  ## postSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_598255 = newJObject()
  var formData_598256 = newJObject()
  if ResourceArns != nil:
    formData_598256.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_598256.add "ContextEntries", ContextEntries
  add(formData_598256, "CallerArn", newJString(CallerArn))
  add(formData_598256, "ResourceOwner", newJString(ResourceOwner))
  if ActionNames != nil:
    formData_598256.add "ActionNames", ActionNames
  add(formData_598256, "Marker", newJString(Marker))
  add(query_598255, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_598256.add "PolicyInputList", PolicyInputList
  add(formData_598256, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  add(formData_598256, "PolicySourceArn", newJString(PolicySourceArn))
  add(formData_598256, "MaxItems", newJInt(MaxItems))
  add(formData_598256, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_598255, "Version", newJString(Version))
  result = call_598254.call(nil, query_598255, nil, formData_598256, nil)

var postSimulatePrincipalPolicy* = Call_PostSimulatePrincipalPolicy_598230(
    name: "postSimulatePrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_PostSimulatePrincipalPolicy_598231, base: "/",
    url: url_PostSimulatePrincipalPolicy_598232,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulatePrincipalPolicy_598204 = ref object of OpenApiRestCall_593437
proc url_GetSimulatePrincipalPolicy_598206(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetSimulatePrincipalPolicy_598205(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_598207 = query.getOrDefault("ContextEntries")
  valid_598207 = validateParameter(valid_598207, JArray, required = false,
                                 default = nil)
  if valid_598207 != nil:
    section.add "ContextEntries", valid_598207
  var valid_598208 = query.getOrDefault("ResourcePolicy")
  valid_598208 = validateParameter(valid_598208, JString, required = false,
                                 default = nil)
  if valid_598208 != nil:
    section.add "ResourcePolicy", valid_598208
  assert query != nil,
        "query argument is necessary due to required `ActionNames` field"
  var valid_598209 = query.getOrDefault("ActionNames")
  valid_598209 = validateParameter(valid_598209, JArray, required = true, default = nil)
  if valid_598209 != nil:
    section.add "ActionNames", valid_598209
  var valid_598210 = query.getOrDefault("PolicyInputList")
  valid_598210 = validateParameter(valid_598210, JArray, required = false,
                                 default = nil)
  if valid_598210 != nil:
    section.add "PolicyInputList", valid_598210
  var valid_598211 = query.getOrDefault("PolicySourceArn")
  valid_598211 = validateParameter(valid_598211, JString, required = true,
                                 default = nil)
  if valid_598211 != nil:
    section.add "PolicySourceArn", valid_598211
  var valid_598212 = query.getOrDefault("Action")
  valid_598212 = validateParameter(valid_598212, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_598212 != nil:
    section.add "Action", valid_598212
  var valid_598213 = query.getOrDefault("ResourceArns")
  valid_598213 = validateParameter(valid_598213, JArray, required = false,
                                 default = nil)
  if valid_598213 != nil:
    section.add "ResourceArns", valid_598213
  var valid_598214 = query.getOrDefault("Marker")
  valid_598214 = validateParameter(valid_598214, JString, required = false,
                                 default = nil)
  if valid_598214 != nil:
    section.add "Marker", valid_598214
  var valid_598215 = query.getOrDefault("ResourceOwner")
  valid_598215 = validateParameter(valid_598215, JString, required = false,
                                 default = nil)
  if valid_598215 != nil:
    section.add "ResourceOwner", valid_598215
  var valid_598216 = query.getOrDefault("CallerArn")
  valid_598216 = validateParameter(valid_598216, JString, required = false,
                                 default = nil)
  if valid_598216 != nil:
    section.add "CallerArn", valid_598216
  var valid_598217 = query.getOrDefault("ResourceHandlingOption")
  valid_598217 = validateParameter(valid_598217, JString, required = false,
                                 default = nil)
  if valid_598217 != nil:
    section.add "ResourceHandlingOption", valid_598217
  var valid_598218 = query.getOrDefault("MaxItems")
  valid_598218 = validateParameter(valid_598218, JInt, required = false, default = nil)
  if valid_598218 != nil:
    section.add "MaxItems", valid_598218
  var valid_598219 = query.getOrDefault("Version")
  valid_598219 = validateParameter(valid_598219, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598219 != nil:
    section.add "Version", valid_598219
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598220 = header.getOrDefault("X-Amz-Date")
  valid_598220 = validateParameter(valid_598220, JString, required = false,
                                 default = nil)
  if valid_598220 != nil:
    section.add "X-Amz-Date", valid_598220
  var valid_598221 = header.getOrDefault("X-Amz-Security-Token")
  valid_598221 = validateParameter(valid_598221, JString, required = false,
                                 default = nil)
  if valid_598221 != nil:
    section.add "X-Amz-Security-Token", valid_598221
  var valid_598222 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598222 = validateParameter(valid_598222, JString, required = false,
                                 default = nil)
  if valid_598222 != nil:
    section.add "X-Amz-Content-Sha256", valid_598222
  var valid_598223 = header.getOrDefault("X-Amz-Algorithm")
  valid_598223 = validateParameter(valid_598223, JString, required = false,
                                 default = nil)
  if valid_598223 != nil:
    section.add "X-Amz-Algorithm", valid_598223
  var valid_598224 = header.getOrDefault("X-Amz-Signature")
  valid_598224 = validateParameter(valid_598224, JString, required = false,
                                 default = nil)
  if valid_598224 != nil:
    section.add "X-Amz-Signature", valid_598224
  var valid_598225 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598225 = validateParameter(valid_598225, JString, required = false,
                                 default = nil)
  if valid_598225 != nil:
    section.add "X-Amz-SignedHeaders", valid_598225
  var valid_598226 = header.getOrDefault("X-Amz-Credential")
  valid_598226 = validateParameter(valid_598226, JString, required = false,
                                 default = nil)
  if valid_598226 != nil:
    section.add "X-Amz-Credential", valid_598226
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598227: Call_GetSimulatePrincipalPolicy_598204; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_598227.validator(path, query, header, formData, body)
  let scheme = call_598227.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598227.url(scheme.get, call_598227.host, call_598227.base,
                         call_598227.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598227, url, valid)

proc call*(call_598228: Call_GetSimulatePrincipalPolicy_598204;
          ActionNames: JsonNode; PolicySourceArn: string;
          ContextEntries: JsonNode = nil; ResourcePolicy: string = "";
          PolicyInputList: JsonNode = nil;
          Action: string = "SimulatePrincipalPolicy"; ResourceArns: JsonNode = nil;
          Marker: string = ""; ResourceOwner: string = ""; CallerArn: string = "";
          ResourceHandlingOption: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_598229 = newJObject()
  if ContextEntries != nil:
    query_598229.add "ContextEntries", ContextEntries
  add(query_598229, "ResourcePolicy", newJString(ResourcePolicy))
  if ActionNames != nil:
    query_598229.add "ActionNames", ActionNames
  if PolicyInputList != nil:
    query_598229.add "PolicyInputList", PolicyInputList
  add(query_598229, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_598229, "Action", newJString(Action))
  if ResourceArns != nil:
    query_598229.add "ResourceArns", ResourceArns
  add(query_598229, "Marker", newJString(Marker))
  add(query_598229, "ResourceOwner", newJString(ResourceOwner))
  add(query_598229, "CallerArn", newJString(CallerArn))
  add(query_598229, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_598229, "MaxItems", newJInt(MaxItems))
  add(query_598229, "Version", newJString(Version))
  result = call_598228.call(nil, query_598229, nil, nil, nil)

var getSimulatePrincipalPolicy* = Call_GetSimulatePrincipalPolicy_598204(
    name: "getSimulatePrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_GetSimulatePrincipalPolicy_598205, base: "/",
    url: url_GetSimulatePrincipalPolicy_598206,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagRole_598274 = ref object of OpenApiRestCall_593437
proc url_PostTagRole_598276(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostTagRole_598275(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598277 = query.getOrDefault("Action")
  valid_598277 = validateParameter(valid_598277, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_598277 != nil:
    section.add "Action", valid_598277
  var valid_598278 = query.getOrDefault("Version")
  valid_598278 = validateParameter(valid_598278, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598278 != nil:
    section.add "Version", valid_598278
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598279 = header.getOrDefault("X-Amz-Date")
  valid_598279 = validateParameter(valid_598279, JString, required = false,
                                 default = nil)
  if valid_598279 != nil:
    section.add "X-Amz-Date", valid_598279
  var valid_598280 = header.getOrDefault("X-Amz-Security-Token")
  valid_598280 = validateParameter(valid_598280, JString, required = false,
                                 default = nil)
  if valid_598280 != nil:
    section.add "X-Amz-Security-Token", valid_598280
  var valid_598281 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598281 = validateParameter(valid_598281, JString, required = false,
                                 default = nil)
  if valid_598281 != nil:
    section.add "X-Amz-Content-Sha256", valid_598281
  var valid_598282 = header.getOrDefault("X-Amz-Algorithm")
  valid_598282 = validateParameter(valid_598282, JString, required = false,
                                 default = nil)
  if valid_598282 != nil:
    section.add "X-Amz-Algorithm", valid_598282
  var valid_598283 = header.getOrDefault("X-Amz-Signature")
  valid_598283 = validateParameter(valid_598283, JString, required = false,
                                 default = nil)
  if valid_598283 != nil:
    section.add "X-Amz-Signature", valid_598283
  var valid_598284 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598284 = validateParameter(valid_598284, JString, required = false,
                                 default = nil)
  if valid_598284 != nil:
    section.add "X-Amz-SignedHeaders", valid_598284
  var valid_598285 = header.getOrDefault("X-Amz-Credential")
  valid_598285 = validateParameter(valid_598285, JString, required = false,
                                 default = nil)
  if valid_598285 != nil:
    section.add "X-Amz-Credential", valid_598285
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_598286 = formData.getOrDefault("RoleName")
  valid_598286 = validateParameter(valid_598286, JString, required = true,
                                 default = nil)
  if valid_598286 != nil:
    section.add "RoleName", valid_598286
  var valid_598287 = formData.getOrDefault("Tags")
  valid_598287 = validateParameter(valid_598287, JArray, required = true, default = nil)
  if valid_598287 != nil:
    section.add "Tags", valid_598287
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598288: Call_PostTagRole_598274; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_598288.validator(path, query, header, formData, body)
  let scheme = call_598288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598288.url(scheme.get, call_598288.host, call_598288.base,
                         call_598288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598288, url, valid)

proc call*(call_598289: Call_PostTagRole_598274; RoleName: string; Tags: JsonNode;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## postTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598290 = newJObject()
  var formData_598291 = newJObject()
  add(formData_598291, "RoleName", newJString(RoleName))
  if Tags != nil:
    formData_598291.add "Tags", Tags
  add(query_598290, "Action", newJString(Action))
  add(query_598290, "Version", newJString(Version))
  result = call_598289.call(nil, query_598290, nil, formData_598291, nil)

var postTagRole* = Call_PostTagRole_598274(name: "postTagRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagRole",
                                        validator: validate_PostTagRole_598275,
                                        base: "/", url: url_PostTagRole_598276,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagRole_598257 = ref object of OpenApiRestCall_593437
proc url_GetTagRole_598259(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetTagRole_598258(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_598260 = query.getOrDefault("Tags")
  valid_598260 = validateParameter(valid_598260, JArray, required = true, default = nil)
  if valid_598260 != nil:
    section.add "Tags", valid_598260
  var valid_598261 = query.getOrDefault("Action")
  valid_598261 = validateParameter(valid_598261, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_598261 != nil:
    section.add "Action", valid_598261
  var valid_598262 = query.getOrDefault("RoleName")
  valid_598262 = validateParameter(valid_598262, JString, required = true,
                                 default = nil)
  if valid_598262 != nil:
    section.add "RoleName", valid_598262
  var valid_598263 = query.getOrDefault("Version")
  valid_598263 = validateParameter(valid_598263, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598263 != nil:
    section.add "Version", valid_598263
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598264 = header.getOrDefault("X-Amz-Date")
  valid_598264 = validateParameter(valid_598264, JString, required = false,
                                 default = nil)
  if valid_598264 != nil:
    section.add "X-Amz-Date", valid_598264
  var valid_598265 = header.getOrDefault("X-Amz-Security-Token")
  valid_598265 = validateParameter(valid_598265, JString, required = false,
                                 default = nil)
  if valid_598265 != nil:
    section.add "X-Amz-Security-Token", valid_598265
  var valid_598266 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598266 = validateParameter(valid_598266, JString, required = false,
                                 default = nil)
  if valid_598266 != nil:
    section.add "X-Amz-Content-Sha256", valid_598266
  var valid_598267 = header.getOrDefault("X-Amz-Algorithm")
  valid_598267 = validateParameter(valid_598267, JString, required = false,
                                 default = nil)
  if valid_598267 != nil:
    section.add "X-Amz-Algorithm", valid_598267
  var valid_598268 = header.getOrDefault("X-Amz-Signature")
  valid_598268 = validateParameter(valid_598268, JString, required = false,
                                 default = nil)
  if valid_598268 != nil:
    section.add "X-Amz-Signature", valid_598268
  var valid_598269 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598269 = validateParameter(valid_598269, JString, required = false,
                                 default = nil)
  if valid_598269 != nil:
    section.add "X-Amz-SignedHeaders", valid_598269
  var valid_598270 = header.getOrDefault("X-Amz-Credential")
  valid_598270 = validateParameter(valid_598270, JString, required = false,
                                 default = nil)
  if valid_598270 != nil:
    section.add "X-Amz-Credential", valid_598270
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598271: Call_GetTagRole_598257; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_598271.validator(path, query, header, formData, body)
  let scheme = call_598271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598271.url(scheme.get, call_598271.host, call_598271.base,
                         call_598271.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598271, url, valid)

proc call*(call_598272: Call_GetTagRole_598257; Tags: JsonNode; RoleName: string;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## getTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_598273 = newJObject()
  if Tags != nil:
    query_598273.add "Tags", Tags
  add(query_598273, "Action", newJString(Action))
  add(query_598273, "RoleName", newJString(RoleName))
  add(query_598273, "Version", newJString(Version))
  result = call_598272.call(nil, query_598273, nil, nil, nil)

var getTagRole* = Call_GetTagRole_598257(name: "getTagRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagRole",
                                      validator: validate_GetTagRole_598258,
                                      base: "/", url: url_GetTagRole_598259,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagUser_598309 = ref object of OpenApiRestCall_593437
proc url_PostTagUser_598311(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostTagUser_598310(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598312 = query.getOrDefault("Action")
  valid_598312 = validateParameter(valid_598312, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_598312 != nil:
    section.add "Action", valid_598312
  var valid_598313 = query.getOrDefault("Version")
  valid_598313 = validateParameter(valid_598313, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598313 != nil:
    section.add "Version", valid_598313
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598314 = header.getOrDefault("X-Amz-Date")
  valid_598314 = validateParameter(valid_598314, JString, required = false,
                                 default = nil)
  if valid_598314 != nil:
    section.add "X-Amz-Date", valid_598314
  var valid_598315 = header.getOrDefault("X-Amz-Security-Token")
  valid_598315 = validateParameter(valid_598315, JString, required = false,
                                 default = nil)
  if valid_598315 != nil:
    section.add "X-Amz-Security-Token", valid_598315
  var valid_598316 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598316 = validateParameter(valid_598316, JString, required = false,
                                 default = nil)
  if valid_598316 != nil:
    section.add "X-Amz-Content-Sha256", valid_598316
  var valid_598317 = header.getOrDefault("X-Amz-Algorithm")
  valid_598317 = validateParameter(valid_598317, JString, required = false,
                                 default = nil)
  if valid_598317 != nil:
    section.add "X-Amz-Algorithm", valid_598317
  var valid_598318 = header.getOrDefault("X-Amz-Signature")
  valid_598318 = validateParameter(valid_598318, JString, required = false,
                                 default = nil)
  if valid_598318 != nil:
    section.add "X-Amz-Signature", valid_598318
  var valid_598319 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598319 = validateParameter(valid_598319, JString, required = false,
                                 default = nil)
  if valid_598319 != nil:
    section.add "X-Amz-SignedHeaders", valid_598319
  var valid_598320 = header.getOrDefault("X-Amz-Credential")
  valid_598320 = validateParameter(valid_598320, JString, required = false,
                                 default = nil)
  if valid_598320 != nil:
    section.add "X-Amz-Credential", valid_598320
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_598321 = formData.getOrDefault("UserName")
  valid_598321 = validateParameter(valid_598321, JString, required = true,
                                 default = nil)
  if valid_598321 != nil:
    section.add "UserName", valid_598321
  var valid_598322 = formData.getOrDefault("Tags")
  valid_598322 = validateParameter(valid_598322, JArray, required = true, default = nil)
  if valid_598322 != nil:
    section.add "Tags", valid_598322
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598323: Call_PostTagUser_598309; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_598323.validator(path, query, header, formData, body)
  let scheme = call_598323.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598323.url(scheme.get, call_598323.host, call_598323.base,
                         call_598323.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598323, url, valid)

proc call*(call_598324: Call_PostTagUser_598309; UserName: string; Tags: JsonNode;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## postTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598325 = newJObject()
  var formData_598326 = newJObject()
  add(formData_598326, "UserName", newJString(UserName))
  if Tags != nil:
    formData_598326.add "Tags", Tags
  add(query_598325, "Action", newJString(Action))
  add(query_598325, "Version", newJString(Version))
  result = call_598324.call(nil, query_598325, nil, formData_598326, nil)

var postTagUser* = Call_PostTagUser_598309(name: "postTagUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagUser",
                                        validator: validate_PostTagUser_598310,
                                        base: "/", url: url_PostTagUser_598311,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagUser_598292 = ref object of OpenApiRestCall_593437
proc url_GetTagUser_598294(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetTagUser_598293(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_598295 = query.getOrDefault("Tags")
  valid_598295 = validateParameter(valid_598295, JArray, required = true, default = nil)
  if valid_598295 != nil:
    section.add "Tags", valid_598295
  var valid_598296 = query.getOrDefault("UserName")
  valid_598296 = validateParameter(valid_598296, JString, required = true,
                                 default = nil)
  if valid_598296 != nil:
    section.add "UserName", valid_598296
  var valid_598297 = query.getOrDefault("Action")
  valid_598297 = validateParameter(valid_598297, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_598297 != nil:
    section.add "Action", valid_598297
  var valid_598298 = query.getOrDefault("Version")
  valid_598298 = validateParameter(valid_598298, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598298 != nil:
    section.add "Version", valid_598298
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598299 = header.getOrDefault("X-Amz-Date")
  valid_598299 = validateParameter(valid_598299, JString, required = false,
                                 default = nil)
  if valid_598299 != nil:
    section.add "X-Amz-Date", valid_598299
  var valid_598300 = header.getOrDefault("X-Amz-Security-Token")
  valid_598300 = validateParameter(valid_598300, JString, required = false,
                                 default = nil)
  if valid_598300 != nil:
    section.add "X-Amz-Security-Token", valid_598300
  var valid_598301 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598301 = validateParameter(valid_598301, JString, required = false,
                                 default = nil)
  if valid_598301 != nil:
    section.add "X-Amz-Content-Sha256", valid_598301
  var valid_598302 = header.getOrDefault("X-Amz-Algorithm")
  valid_598302 = validateParameter(valid_598302, JString, required = false,
                                 default = nil)
  if valid_598302 != nil:
    section.add "X-Amz-Algorithm", valid_598302
  var valid_598303 = header.getOrDefault("X-Amz-Signature")
  valid_598303 = validateParameter(valid_598303, JString, required = false,
                                 default = nil)
  if valid_598303 != nil:
    section.add "X-Amz-Signature", valid_598303
  var valid_598304 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598304 = validateParameter(valid_598304, JString, required = false,
                                 default = nil)
  if valid_598304 != nil:
    section.add "X-Amz-SignedHeaders", valid_598304
  var valid_598305 = header.getOrDefault("X-Amz-Credential")
  valid_598305 = validateParameter(valid_598305, JString, required = false,
                                 default = nil)
  if valid_598305 != nil:
    section.add "X-Amz-Credential", valid_598305
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598306: Call_GetTagUser_598292; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_598306.validator(path, query, header, formData, body)
  let scheme = call_598306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598306.url(scheme.get, call_598306.host, call_598306.base,
                         call_598306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598306, url, valid)

proc call*(call_598307: Call_GetTagUser_598292; Tags: JsonNode; UserName: string;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## getTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598308 = newJObject()
  if Tags != nil:
    query_598308.add "Tags", Tags
  add(query_598308, "UserName", newJString(UserName))
  add(query_598308, "Action", newJString(Action))
  add(query_598308, "Version", newJString(Version))
  result = call_598307.call(nil, query_598308, nil, nil, nil)

var getTagUser* = Call_GetTagUser_598292(name: "getTagUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagUser",
                                      validator: validate_GetTagUser_598293,
                                      base: "/", url: url_GetTagUser_598294,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagRole_598344 = ref object of OpenApiRestCall_593437
proc url_PostUntagRole_598346(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUntagRole_598345(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598347 = query.getOrDefault("Action")
  valid_598347 = validateParameter(valid_598347, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_598347 != nil:
    section.add "Action", valid_598347
  var valid_598348 = query.getOrDefault("Version")
  valid_598348 = validateParameter(valid_598348, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598348 != nil:
    section.add "Version", valid_598348
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598349 = header.getOrDefault("X-Amz-Date")
  valid_598349 = validateParameter(valid_598349, JString, required = false,
                                 default = nil)
  if valid_598349 != nil:
    section.add "X-Amz-Date", valid_598349
  var valid_598350 = header.getOrDefault("X-Amz-Security-Token")
  valid_598350 = validateParameter(valid_598350, JString, required = false,
                                 default = nil)
  if valid_598350 != nil:
    section.add "X-Amz-Security-Token", valid_598350
  var valid_598351 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598351 = validateParameter(valid_598351, JString, required = false,
                                 default = nil)
  if valid_598351 != nil:
    section.add "X-Amz-Content-Sha256", valid_598351
  var valid_598352 = header.getOrDefault("X-Amz-Algorithm")
  valid_598352 = validateParameter(valid_598352, JString, required = false,
                                 default = nil)
  if valid_598352 != nil:
    section.add "X-Amz-Algorithm", valid_598352
  var valid_598353 = header.getOrDefault("X-Amz-Signature")
  valid_598353 = validateParameter(valid_598353, JString, required = false,
                                 default = nil)
  if valid_598353 != nil:
    section.add "X-Amz-Signature", valid_598353
  var valid_598354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598354 = validateParameter(valid_598354, JString, required = false,
                                 default = nil)
  if valid_598354 != nil:
    section.add "X-Amz-SignedHeaders", valid_598354
  var valid_598355 = header.getOrDefault("X-Amz-Credential")
  valid_598355 = validateParameter(valid_598355, JString, required = false,
                                 default = nil)
  if valid_598355 != nil:
    section.add "X-Amz-Credential", valid_598355
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_598356 = formData.getOrDefault("RoleName")
  valid_598356 = validateParameter(valid_598356, JString, required = true,
                                 default = nil)
  if valid_598356 != nil:
    section.add "RoleName", valid_598356
  var valid_598357 = formData.getOrDefault("TagKeys")
  valid_598357 = validateParameter(valid_598357, JArray, required = true, default = nil)
  if valid_598357 != nil:
    section.add "TagKeys", valid_598357
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598358: Call_PostUntagRole_598344; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_598358.validator(path, query, header, formData, body)
  let scheme = call_598358.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598358.url(scheme.get, call_598358.host, call_598358.base,
                         call_598358.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598358, url, valid)

proc call*(call_598359: Call_PostUntagRole_598344; RoleName: string;
          TagKeys: JsonNode; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   Version: string (required)
  var query_598360 = newJObject()
  var formData_598361 = newJObject()
  add(formData_598361, "RoleName", newJString(RoleName))
  add(query_598360, "Action", newJString(Action))
  if TagKeys != nil:
    formData_598361.add "TagKeys", TagKeys
  add(query_598360, "Version", newJString(Version))
  result = call_598359.call(nil, query_598360, nil, formData_598361, nil)

var postUntagRole* = Call_PostUntagRole_598344(name: "postUntagRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_PostUntagRole_598345,
    base: "/", url: url_PostUntagRole_598346, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagRole_598327 = ref object of OpenApiRestCall_593437
proc url_GetUntagRole_598329(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUntagRole_598328(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598330 = query.getOrDefault("Action")
  valid_598330 = validateParameter(valid_598330, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_598330 != nil:
    section.add "Action", valid_598330
  var valid_598331 = query.getOrDefault("TagKeys")
  valid_598331 = validateParameter(valid_598331, JArray, required = true, default = nil)
  if valid_598331 != nil:
    section.add "TagKeys", valid_598331
  var valid_598332 = query.getOrDefault("RoleName")
  valid_598332 = validateParameter(valid_598332, JString, required = true,
                                 default = nil)
  if valid_598332 != nil:
    section.add "RoleName", valid_598332
  var valid_598333 = query.getOrDefault("Version")
  valid_598333 = validateParameter(valid_598333, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598333 != nil:
    section.add "Version", valid_598333
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598334 = header.getOrDefault("X-Amz-Date")
  valid_598334 = validateParameter(valid_598334, JString, required = false,
                                 default = nil)
  if valid_598334 != nil:
    section.add "X-Amz-Date", valid_598334
  var valid_598335 = header.getOrDefault("X-Amz-Security-Token")
  valid_598335 = validateParameter(valid_598335, JString, required = false,
                                 default = nil)
  if valid_598335 != nil:
    section.add "X-Amz-Security-Token", valid_598335
  var valid_598336 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598336 = validateParameter(valid_598336, JString, required = false,
                                 default = nil)
  if valid_598336 != nil:
    section.add "X-Amz-Content-Sha256", valid_598336
  var valid_598337 = header.getOrDefault("X-Amz-Algorithm")
  valid_598337 = validateParameter(valid_598337, JString, required = false,
                                 default = nil)
  if valid_598337 != nil:
    section.add "X-Amz-Algorithm", valid_598337
  var valid_598338 = header.getOrDefault("X-Amz-Signature")
  valid_598338 = validateParameter(valid_598338, JString, required = false,
                                 default = nil)
  if valid_598338 != nil:
    section.add "X-Amz-Signature", valid_598338
  var valid_598339 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598339 = validateParameter(valid_598339, JString, required = false,
                                 default = nil)
  if valid_598339 != nil:
    section.add "X-Amz-SignedHeaders", valid_598339
  var valid_598340 = header.getOrDefault("X-Amz-Credential")
  valid_598340 = validateParameter(valid_598340, JString, required = false,
                                 default = nil)
  if valid_598340 != nil:
    section.add "X-Amz-Credential", valid_598340
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598341: Call_GetUntagRole_598327; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_598341.validator(path, query, header, formData, body)
  let scheme = call_598341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598341.url(scheme.get, call_598341.host, call_598341.base,
                         call_598341.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598341, url, valid)

proc call*(call_598342: Call_GetUntagRole_598327; TagKeys: JsonNode;
          RoleName: string; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_598343 = newJObject()
  add(query_598343, "Action", newJString(Action))
  if TagKeys != nil:
    query_598343.add "TagKeys", TagKeys
  add(query_598343, "RoleName", newJString(RoleName))
  add(query_598343, "Version", newJString(Version))
  result = call_598342.call(nil, query_598343, nil, nil, nil)

var getUntagRole* = Call_GetUntagRole_598327(name: "getUntagRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_GetUntagRole_598328, base: "/",
    url: url_GetUntagRole_598329, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagUser_598379 = ref object of OpenApiRestCall_593437
proc url_PostUntagUser_598381(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUntagUser_598380(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598382 = query.getOrDefault("Action")
  valid_598382 = validateParameter(valid_598382, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_598382 != nil:
    section.add "Action", valid_598382
  var valid_598383 = query.getOrDefault("Version")
  valid_598383 = validateParameter(valid_598383, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598383 != nil:
    section.add "Version", valid_598383
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598384 = header.getOrDefault("X-Amz-Date")
  valid_598384 = validateParameter(valid_598384, JString, required = false,
                                 default = nil)
  if valid_598384 != nil:
    section.add "X-Amz-Date", valid_598384
  var valid_598385 = header.getOrDefault("X-Amz-Security-Token")
  valid_598385 = validateParameter(valid_598385, JString, required = false,
                                 default = nil)
  if valid_598385 != nil:
    section.add "X-Amz-Security-Token", valid_598385
  var valid_598386 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598386 = validateParameter(valid_598386, JString, required = false,
                                 default = nil)
  if valid_598386 != nil:
    section.add "X-Amz-Content-Sha256", valid_598386
  var valid_598387 = header.getOrDefault("X-Amz-Algorithm")
  valid_598387 = validateParameter(valid_598387, JString, required = false,
                                 default = nil)
  if valid_598387 != nil:
    section.add "X-Amz-Algorithm", valid_598387
  var valid_598388 = header.getOrDefault("X-Amz-Signature")
  valid_598388 = validateParameter(valid_598388, JString, required = false,
                                 default = nil)
  if valid_598388 != nil:
    section.add "X-Amz-Signature", valid_598388
  var valid_598389 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598389 = validateParameter(valid_598389, JString, required = false,
                                 default = nil)
  if valid_598389 != nil:
    section.add "X-Amz-SignedHeaders", valid_598389
  var valid_598390 = header.getOrDefault("X-Amz-Credential")
  valid_598390 = validateParameter(valid_598390, JString, required = false,
                                 default = nil)
  if valid_598390 != nil:
    section.add "X-Amz-Credential", valid_598390
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_598391 = formData.getOrDefault("UserName")
  valid_598391 = validateParameter(valid_598391, JString, required = true,
                                 default = nil)
  if valid_598391 != nil:
    section.add "UserName", valid_598391
  var valid_598392 = formData.getOrDefault("TagKeys")
  valid_598392 = validateParameter(valid_598392, JArray, required = true, default = nil)
  if valid_598392 != nil:
    section.add "TagKeys", valid_598392
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598393: Call_PostUntagUser_598379; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_598393.validator(path, query, header, formData, body)
  let scheme = call_598393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598393.url(scheme.get, call_598393.host, call_598393.base,
                         call_598393.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598393, url, valid)

proc call*(call_598394: Call_PostUntagUser_598379; UserName: string;
          TagKeys: JsonNode; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: string (required)
  var query_598395 = newJObject()
  var formData_598396 = newJObject()
  add(formData_598396, "UserName", newJString(UserName))
  add(query_598395, "Action", newJString(Action))
  if TagKeys != nil:
    formData_598396.add "TagKeys", TagKeys
  add(query_598395, "Version", newJString(Version))
  result = call_598394.call(nil, query_598395, nil, formData_598396, nil)

var postUntagUser* = Call_PostUntagUser_598379(name: "postUntagUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_PostUntagUser_598380,
    base: "/", url: url_PostUntagUser_598381, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagUser_598362 = ref object of OpenApiRestCall_593437
proc url_GetUntagUser_598364(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUntagUser_598363(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_598365 = query.getOrDefault("UserName")
  valid_598365 = validateParameter(valid_598365, JString, required = true,
                                 default = nil)
  if valid_598365 != nil:
    section.add "UserName", valid_598365
  var valid_598366 = query.getOrDefault("Action")
  valid_598366 = validateParameter(valid_598366, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_598366 != nil:
    section.add "Action", valid_598366
  var valid_598367 = query.getOrDefault("TagKeys")
  valid_598367 = validateParameter(valid_598367, JArray, required = true, default = nil)
  if valid_598367 != nil:
    section.add "TagKeys", valid_598367
  var valid_598368 = query.getOrDefault("Version")
  valid_598368 = validateParameter(valid_598368, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598368 != nil:
    section.add "Version", valid_598368
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598369 = header.getOrDefault("X-Amz-Date")
  valid_598369 = validateParameter(valid_598369, JString, required = false,
                                 default = nil)
  if valid_598369 != nil:
    section.add "X-Amz-Date", valid_598369
  var valid_598370 = header.getOrDefault("X-Amz-Security-Token")
  valid_598370 = validateParameter(valid_598370, JString, required = false,
                                 default = nil)
  if valid_598370 != nil:
    section.add "X-Amz-Security-Token", valid_598370
  var valid_598371 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598371 = validateParameter(valid_598371, JString, required = false,
                                 default = nil)
  if valid_598371 != nil:
    section.add "X-Amz-Content-Sha256", valid_598371
  var valid_598372 = header.getOrDefault("X-Amz-Algorithm")
  valid_598372 = validateParameter(valid_598372, JString, required = false,
                                 default = nil)
  if valid_598372 != nil:
    section.add "X-Amz-Algorithm", valid_598372
  var valid_598373 = header.getOrDefault("X-Amz-Signature")
  valid_598373 = validateParameter(valid_598373, JString, required = false,
                                 default = nil)
  if valid_598373 != nil:
    section.add "X-Amz-Signature", valid_598373
  var valid_598374 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598374 = validateParameter(valid_598374, JString, required = false,
                                 default = nil)
  if valid_598374 != nil:
    section.add "X-Amz-SignedHeaders", valid_598374
  var valid_598375 = header.getOrDefault("X-Amz-Credential")
  valid_598375 = validateParameter(valid_598375, JString, required = false,
                                 default = nil)
  if valid_598375 != nil:
    section.add "X-Amz-Credential", valid_598375
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598376: Call_GetUntagUser_598362; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_598376.validator(path, query, header, formData, body)
  let scheme = call_598376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598376.url(scheme.get, call_598376.host, call_598376.base,
                         call_598376.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598376, url, valid)

proc call*(call_598377: Call_GetUntagUser_598362; UserName: string;
          TagKeys: JsonNode; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: string (required)
  var query_598378 = newJObject()
  add(query_598378, "UserName", newJString(UserName))
  add(query_598378, "Action", newJString(Action))
  if TagKeys != nil:
    query_598378.add "TagKeys", TagKeys
  add(query_598378, "Version", newJString(Version))
  result = call_598377.call(nil, query_598378, nil, nil, nil)

var getUntagUser* = Call_GetUntagUser_598362(name: "getUntagUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_GetUntagUser_598363, base: "/",
    url: url_GetUntagUser_598364, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccessKey_598415 = ref object of OpenApiRestCall_593437
proc url_PostUpdateAccessKey_598417(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateAccessKey_598416(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598418 = query.getOrDefault("Action")
  valid_598418 = validateParameter(valid_598418, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_598418 != nil:
    section.add "Action", valid_598418
  var valid_598419 = query.getOrDefault("Version")
  valid_598419 = validateParameter(valid_598419, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598419 != nil:
    section.add "Version", valid_598419
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598420 = header.getOrDefault("X-Amz-Date")
  valid_598420 = validateParameter(valid_598420, JString, required = false,
                                 default = nil)
  if valid_598420 != nil:
    section.add "X-Amz-Date", valid_598420
  var valid_598421 = header.getOrDefault("X-Amz-Security-Token")
  valid_598421 = validateParameter(valid_598421, JString, required = false,
                                 default = nil)
  if valid_598421 != nil:
    section.add "X-Amz-Security-Token", valid_598421
  var valid_598422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598422 = validateParameter(valid_598422, JString, required = false,
                                 default = nil)
  if valid_598422 != nil:
    section.add "X-Amz-Content-Sha256", valid_598422
  var valid_598423 = header.getOrDefault("X-Amz-Algorithm")
  valid_598423 = validateParameter(valid_598423, JString, required = false,
                                 default = nil)
  if valid_598423 != nil:
    section.add "X-Amz-Algorithm", valid_598423
  var valid_598424 = header.getOrDefault("X-Amz-Signature")
  valid_598424 = validateParameter(valid_598424, JString, required = false,
                                 default = nil)
  if valid_598424 != nil:
    section.add "X-Amz-Signature", valid_598424
  var valid_598425 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598425 = validateParameter(valid_598425, JString, required = false,
                                 default = nil)
  if valid_598425 != nil:
    section.add "X-Amz-SignedHeaders", valid_598425
  var valid_598426 = header.getOrDefault("X-Amz-Credential")
  valid_598426 = validateParameter(valid_598426, JString, required = false,
                                 default = nil)
  if valid_598426 != nil:
    section.add "X-Amz-Credential", valid_598426
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  var valid_598427 = formData.getOrDefault("UserName")
  valid_598427 = validateParameter(valid_598427, JString, required = false,
                                 default = nil)
  if valid_598427 != nil:
    section.add "UserName", valid_598427
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_598428 = formData.getOrDefault("AccessKeyId")
  valid_598428 = validateParameter(valid_598428, JString, required = true,
                                 default = nil)
  if valid_598428 != nil:
    section.add "AccessKeyId", valid_598428
  var valid_598429 = formData.getOrDefault("Status")
  valid_598429 = validateParameter(valid_598429, JString, required = true,
                                 default = newJString("Active"))
  if valid_598429 != nil:
    section.add "Status", valid_598429
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598430: Call_PostUpdateAccessKey_598415; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_598430.validator(path, query, header, formData, body)
  let scheme = call_598430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598430.url(scheme.get, call_598430.host, call_598430.base,
                         call_598430.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598430, url, valid)

proc call*(call_598431: Call_PostUpdateAccessKey_598415; AccessKeyId: string;
          UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598432 = newJObject()
  var formData_598433 = newJObject()
  add(formData_598433, "UserName", newJString(UserName))
  add(formData_598433, "AccessKeyId", newJString(AccessKeyId))
  add(formData_598433, "Status", newJString(Status))
  add(query_598432, "Action", newJString(Action))
  add(query_598432, "Version", newJString(Version))
  result = call_598431.call(nil, query_598432, nil, formData_598433, nil)

var postUpdateAccessKey* = Call_PostUpdateAccessKey_598415(
    name: "postUpdateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccessKey",
    validator: validate_PostUpdateAccessKey_598416, base: "/",
    url: url_PostUpdateAccessKey_598417, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccessKey_598397 = ref object of OpenApiRestCall_593437
proc url_GetUpdateAccessKey_598399(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateAccessKey_598398(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_598400 = query.getOrDefault("Status")
  valid_598400 = validateParameter(valid_598400, JString, required = true,
                                 default = newJString("Active"))
  if valid_598400 != nil:
    section.add "Status", valid_598400
  var valid_598401 = query.getOrDefault("AccessKeyId")
  valid_598401 = validateParameter(valid_598401, JString, required = true,
                                 default = nil)
  if valid_598401 != nil:
    section.add "AccessKeyId", valid_598401
  var valid_598402 = query.getOrDefault("UserName")
  valid_598402 = validateParameter(valid_598402, JString, required = false,
                                 default = nil)
  if valid_598402 != nil:
    section.add "UserName", valid_598402
  var valid_598403 = query.getOrDefault("Action")
  valid_598403 = validateParameter(valid_598403, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_598403 != nil:
    section.add "Action", valid_598403
  var valid_598404 = query.getOrDefault("Version")
  valid_598404 = validateParameter(valid_598404, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598404 != nil:
    section.add "Version", valid_598404
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598405 = header.getOrDefault("X-Amz-Date")
  valid_598405 = validateParameter(valid_598405, JString, required = false,
                                 default = nil)
  if valid_598405 != nil:
    section.add "X-Amz-Date", valid_598405
  var valid_598406 = header.getOrDefault("X-Amz-Security-Token")
  valid_598406 = validateParameter(valid_598406, JString, required = false,
                                 default = nil)
  if valid_598406 != nil:
    section.add "X-Amz-Security-Token", valid_598406
  var valid_598407 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598407 = validateParameter(valid_598407, JString, required = false,
                                 default = nil)
  if valid_598407 != nil:
    section.add "X-Amz-Content-Sha256", valid_598407
  var valid_598408 = header.getOrDefault("X-Amz-Algorithm")
  valid_598408 = validateParameter(valid_598408, JString, required = false,
                                 default = nil)
  if valid_598408 != nil:
    section.add "X-Amz-Algorithm", valid_598408
  var valid_598409 = header.getOrDefault("X-Amz-Signature")
  valid_598409 = validateParameter(valid_598409, JString, required = false,
                                 default = nil)
  if valid_598409 != nil:
    section.add "X-Amz-Signature", valid_598409
  var valid_598410 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598410 = validateParameter(valid_598410, JString, required = false,
                                 default = nil)
  if valid_598410 != nil:
    section.add "X-Amz-SignedHeaders", valid_598410
  var valid_598411 = header.getOrDefault("X-Amz-Credential")
  valid_598411 = validateParameter(valid_598411, JString, required = false,
                                 default = nil)
  if valid_598411 != nil:
    section.add "X-Amz-Credential", valid_598411
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598412: Call_GetUpdateAccessKey_598397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_598412.validator(path, query, header, formData, body)
  let scheme = call_598412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598412.url(scheme.get, call_598412.host, call_598412.base,
                         call_598412.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598412, url, valid)

proc call*(call_598413: Call_GetUpdateAccessKey_598397; AccessKeyId: string;
          Status: string = "Active"; UserName: string = "";
          Action: string = "UpdateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598414 = newJObject()
  add(query_598414, "Status", newJString(Status))
  add(query_598414, "AccessKeyId", newJString(AccessKeyId))
  add(query_598414, "UserName", newJString(UserName))
  add(query_598414, "Action", newJString(Action))
  add(query_598414, "Version", newJString(Version))
  result = call_598413.call(nil, query_598414, nil, nil, nil)

var getUpdateAccessKey* = Call_GetUpdateAccessKey_598397(
    name: "getUpdateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateAccessKey", validator: validate_GetUpdateAccessKey_598398,
    base: "/", url: url_GetUpdateAccessKey_598399,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountPasswordPolicy_598458 = ref object of OpenApiRestCall_593437
proc url_PostUpdateAccountPasswordPolicy_598460(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateAccountPasswordPolicy_598459(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598461 = query.getOrDefault("Action")
  valid_598461 = validateParameter(valid_598461, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_598461 != nil:
    section.add "Action", valid_598461
  var valid_598462 = query.getOrDefault("Version")
  valid_598462 = validateParameter(valid_598462, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598462 != nil:
    section.add "Version", valid_598462
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598463 = header.getOrDefault("X-Amz-Date")
  valid_598463 = validateParameter(valid_598463, JString, required = false,
                                 default = nil)
  if valid_598463 != nil:
    section.add "X-Amz-Date", valid_598463
  var valid_598464 = header.getOrDefault("X-Amz-Security-Token")
  valid_598464 = validateParameter(valid_598464, JString, required = false,
                                 default = nil)
  if valid_598464 != nil:
    section.add "X-Amz-Security-Token", valid_598464
  var valid_598465 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598465 = validateParameter(valid_598465, JString, required = false,
                                 default = nil)
  if valid_598465 != nil:
    section.add "X-Amz-Content-Sha256", valid_598465
  var valid_598466 = header.getOrDefault("X-Amz-Algorithm")
  valid_598466 = validateParameter(valid_598466, JString, required = false,
                                 default = nil)
  if valid_598466 != nil:
    section.add "X-Amz-Algorithm", valid_598466
  var valid_598467 = header.getOrDefault("X-Amz-Signature")
  valid_598467 = validateParameter(valid_598467, JString, required = false,
                                 default = nil)
  if valid_598467 != nil:
    section.add "X-Amz-Signature", valid_598467
  var valid_598468 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598468 = validateParameter(valid_598468, JString, required = false,
                                 default = nil)
  if valid_598468 != nil:
    section.add "X-Amz-SignedHeaders", valid_598468
  var valid_598469 = header.getOrDefault("X-Amz-Credential")
  valid_598469 = validateParameter(valid_598469, JString, required = false,
                                 default = nil)
  if valid_598469 != nil:
    section.add "X-Amz-Credential", valid_598469
  result.add "header", section
  ## parameters in `formData` object:
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  section = newJObject()
  var valid_598470 = formData.getOrDefault("RequireNumbers")
  valid_598470 = validateParameter(valid_598470, JBool, required = false, default = nil)
  if valid_598470 != nil:
    section.add "RequireNumbers", valid_598470
  var valid_598471 = formData.getOrDefault("RequireSymbols")
  valid_598471 = validateParameter(valid_598471, JBool, required = false, default = nil)
  if valid_598471 != nil:
    section.add "RequireSymbols", valid_598471
  var valid_598472 = formData.getOrDefault("RequireUppercaseCharacters")
  valid_598472 = validateParameter(valid_598472, JBool, required = false, default = nil)
  if valid_598472 != nil:
    section.add "RequireUppercaseCharacters", valid_598472
  var valid_598473 = formData.getOrDefault("MinimumPasswordLength")
  valid_598473 = validateParameter(valid_598473, JInt, required = false, default = nil)
  if valid_598473 != nil:
    section.add "MinimumPasswordLength", valid_598473
  var valid_598474 = formData.getOrDefault("RequireLowercaseCharacters")
  valid_598474 = validateParameter(valid_598474, JBool, required = false, default = nil)
  if valid_598474 != nil:
    section.add "RequireLowercaseCharacters", valid_598474
  var valid_598475 = formData.getOrDefault("PasswordReusePrevention")
  valid_598475 = validateParameter(valid_598475, JInt, required = false, default = nil)
  if valid_598475 != nil:
    section.add "PasswordReusePrevention", valid_598475
  var valid_598476 = formData.getOrDefault("HardExpiry")
  valid_598476 = validateParameter(valid_598476, JBool, required = false, default = nil)
  if valid_598476 != nil:
    section.add "HardExpiry", valid_598476
  var valid_598477 = formData.getOrDefault("AllowUsersToChangePassword")
  valid_598477 = validateParameter(valid_598477, JBool, required = false, default = nil)
  if valid_598477 != nil:
    section.add "AllowUsersToChangePassword", valid_598477
  var valid_598478 = formData.getOrDefault("MaxPasswordAge")
  valid_598478 = validateParameter(valid_598478, JInt, required = false, default = nil)
  if valid_598478 != nil:
    section.add "MaxPasswordAge", valid_598478
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598479: Call_PostUpdateAccountPasswordPolicy_598458;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_598479.validator(path, query, header, formData, body)
  let scheme = call_598479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598479.url(scheme.get, call_598479.host, call_598479.base,
                         call_598479.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598479, url, valid)

proc call*(call_598480: Call_PostUpdateAccountPasswordPolicy_598458;
          RequireNumbers: bool = false; RequireSymbols: bool = false;
          RequireUppercaseCharacters: bool = false; MinimumPasswordLength: int = 0;
          RequireLowercaseCharacters: bool = false;
          PasswordReusePrevention: int = 0;
          Action: string = "UpdateAccountPasswordPolicy"; HardExpiry: bool = false;
          AllowUsersToChangePassword: bool = false; MaxPasswordAge: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   Action: string (required)
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: string (required)
  var query_598481 = newJObject()
  var formData_598482 = newJObject()
  add(formData_598482, "RequireNumbers", newJBool(RequireNumbers))
  add(formData_598482, "RequireSymbols", newJBool(RequireSymbols))
  add(formData_598482, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(formData_598482, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  add(formData_598482, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(formData_598482, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_598481, "Action", newJString(Action))
  add(formData_598482, "HardExpiry", newJBool(HardExpiry))
  add(formData_598482, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(formData_598482, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_598481, "Version", newJString(Version))
  result = call_598480.call(nil, query_598481, nil, formData_598482, nil)

var postUpdateAccountPasswordPolicy* = Call_PostUpdateAccountPasswordPolicy_598458(
    name: "postUpdateAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_PostUpdateAccountPasswordPolicy_598459, base: "/",
    url: url_PostUpdateAccountPasswordPolicy_598460,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountPasswordPolicy_598434 = ref object of OpenApiRestCall_593437
proc url_GetUpdateAccountPasswordPolicy_598436(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateAccountPasswordPolicy_598435(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Action: JString (required)
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: JString (required)
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  section = newJObject()
  var valid_598437 = query.getOrDefault("RequireLowercaseCharacters")
  valid_598437 = validateParameter(valid_598437, JBool, required = false, default = nil)
  if valid_598437 != nil:
    section.add "RequireLowercaseCharacters", valid_598437
  var valid_598438 = query.getOrDefault("RequireSymbols")
  valid_598438 = validateParameter(valid_598438, JBool, required = false, default = nil)
  if valid_598438 != nil:
    section.add "RequireSymbols", valid_598438
  var valid_598439 = query.getOrDefault("RequireNumbers")
  valid_598439 = validateParameter(valid_598439, JBool, required = false, default = nil)
  if valid_598439 != nil:
    section.add "RequireNumbers", valid_598439
  var valid_598440 = query.getOrDefault("HardExpiry")
  valid_598440 = validateParameter(valid_598440, JBool, required = false, default = nil)
  if valid_598440 != nil:
    section.add "HardExpiry", valid_598440
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598441 = query.getOrDefault("Action")
  valid_598441 = validateParameter(valid_598441, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_598441 != nil:
    section.add "Action", valid_598441
  var valid_598442 = query.getOrDefault("PasswordReusePrevention")
  valid_598442 = validateParameter(valid_598442, JInt, required = false, default = nil)
  if valid_598442 != nil:
    section.add "PasswordReusePrevention", valid_598442
  var valid_598443 = query.getOrDefault("RequireUppercaseCharacters")
  valid_598443 = validateParameter(valid_598443, JBool, required = false, default = nil)
  if valid_598443 != nil:
    section.add "RequireUppercaseCharacters", valid_598443
  var valid_598444 = query.getOrDefault("AllowUsersToChangePassword")
  valid_598444 = validateParameter(valid_598444, JBool, required = false, default = nil)
  if valid_598444 != nil:
    section.add "AllowUsersToChangePassword", valid_598444
  var valid_598445 = query.getOrDefault("MaxPasswordAge")
  valid_598445 = validateParameter(valid_598445, JInt, required = false, default = nil)
  if valid_598445 != nil:
    section.add "MaxPasswordAge", valid_598445
  var valid_598446 = query.getOrDefault("Version")
  valid_598446 = validateParameter(valid_598446, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598446 != nil:
    section.add "Version", valid_598446
  var valid_598447 = query.getOrDefault("MinimumPasswordLength")
  valid_598447 = validateParameter(valid_598447, JInt, required = false, default = nil)
  if valid_598447 != nil:
    section.add "MinimumPasswordLength", valid_598447
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598448 = header.getOrDefault("X-Amz-Date")
  valid_598448 = validateParameter(valid_598448, JString, required = false,
                                 default = nil)
  if valid_598448 != nil:
    section.add "X-Amz-Date", valid_598448
  var valid_598449 = header.getOrDefault("X-Amz-Security-Token")
  valid_598449 = validateParameter(valid_598449, JString, required = false,
                                 default = nil)
  if valid_598449 != nil:
    section.add "X-Amz-Security-Token", valid_598449
  var valid_598450 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598450 = validateParameter(valid_598450, JString, required = false,
                                 default = nil)
  if valid_598450 != nil:
    section.add "X-Amz-Content-Sha256", valid_598450
  var valid_598451 = header.getOrDefault("X-Amz-Algorithm")
  valid_598451 = validateParameter(valid_598451, JString, required = false,
                                 default = nil)
  if valid_598451 != nil:
    section.add "X-Amz-Algorithm", valid_598451
  var valid_598452 = header.getOrDefault("X-Amz-Signature")
  valid_598452 = validateParameter(valid_598452, JString, required = false,
                                 default = nil)
  if valid_598452 != nil:
    section.add "X-Amz-Signature", valid_598452
  var valid_598453 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598453 = validateParameter(valid_598453, JString, required = false,
                                 default = nil)
  if valid_598453 != nil:
    section.add "X-Amz-SignedHeaders", valid_598453
  var valid_598454 = header.getOrDefault("X-Amz-Credential")
  valid_598454 = validateParameter(valid_598454, JString, required = false,
                                 default = nil)
  if valid_598454 != nil:
    section.add "X-Amz-Credential", valid_598454
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598455: Call_GetUpdateAccountPasswordPolicy_598434; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_598455.validator(path, query, header, formData, body)
  let scheme = call_598455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598455.url(scheme.get, call_598455.host, call_598455.base,
                         call_598455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598455, url, valid)

proc call*(call_598456: Call_GetUpdateAccountPasswordPolicy_598434;
          RequireLowercaseCharacters: bool = false; RequireSymbols: bool = false;
          RequireNumbers: bool = false; HardExpiry: bool = false;
          Action: string = "UpdateAccountPasswordPolicy";
          PasswordReusePrevention: int = 0;
          RequireUppercaseCharacters: bool = false;
          AllowUsersToChangePassword: bool = false; MaxPasswordAge: int = 0;
          Version: string = "2010-05-08"; MinimumPasswordLength: int = 0): Recallable =
  ## getUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Action: string (required)
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: string (required)
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  var query_598457 = newJObject()
  add(query_598457, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(query_598457, "RequireSymbols", newJBool(RequireSymbols))
  add(query_598457, "RequireNumbers", newJBool(RequireNumbers))
  add(query_598457, "HardExpiry", newJBool(HardExpiry))
  add(query_598457, "Action", newJString(Action))
  add(query_598457, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_598457, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(query_598457, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(query_598457, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_598457, "Version", newJString(Version))
  add(query_598457, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  result = call_598456.call(nil, query_598457, nil, nil, nil)

var getUpdateAccountPasswordPolicy* = Call_GetUpdateAccountPasswordPolicy_598434(
    name: "getUpdateAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_GetUpdateAccountPasswordPolicy_598435, base: "/",
    url: url_GetUpdateAccountPasswordPolicy_598436,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAssumeRolePolicy_598500 = ref object of OpenApiRestCall_593437
proc url_PostUpdateAssumeRolePolicy_598502(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateAssumeRolePolicy_598501(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598503 = query.getOrDefault("Action")
  valid_598503 = validateParameter(valid_598503, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_598503 != nil:
    section.add "Action", valid_598503
  var valid_598504 = query.getOrDefault("Version")
  valid_598504 = validateParameter(valid_598504, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598504 != nil:
    section.add "Version", valid_598504
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598505 = header.getOrDefault("X-Amz-Date")
  valid_598505 = validateParameter(valid_598505, JString, required = false,
                                 default = nil)
  if valid_598505 != nil:
    section.add "X-Amz-Date", valid_598505
  var valid_598506 = header.getOrDefault("X-Amz-Security-Token")
  valid_598506 = validateParameter(valid_598506, JString, required = false,
                                 default = nil)
  if valid_598506 != nil:
    section.add "X-Amz-Security-Token", valid_598506
  var valid_598507 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598507 = validateParameter(valid_598507, JString, required = false,
                                 default = nil)
  if valid_598507 != nil:
    section.add "X-Amz-Content-Sha256", valid_598507
  var valid_598508 = header.getOrDefault("X-Amz-Algorithm")
  valid_598508 = validateParameter(valid_598508, JString, required = false,
                                 default = nil)
  if valid_598508 != nil:
    section.add "X-Amz-Algorithm", valid_598508
  var valid_598509 = header.getOrDefault("X-Amz-Signature")
  valid_598509 = validateParameter(valid_598509, JString, required = false,
                                 default = nil)
  if valid_598509 != nil:
    section.add "X-Amz-Signature", valid_598509
  var valid_598510 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598510 = validateParameter(valid_598510, JString, required = false,
                                 default = nil)
  if valid_598510 != nil:
    section.add "X-Amz-SignedHeaders", valid_598510
  var valid_598511 = header.getOrDefault("X-Amz-Credential")
  valid_598511 = validateParameter(valid_598511, JString, required = false,
                                 default = nil)
  if valid_598511 != nil:
    section.add "X-Amz-Credential", valid_598511
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_598512 = formData.getOrDefault("RoleName")
  valid_598512 = validateParameter(valid_598512, JString, required = true,
                                 default = nil)
  if valid_598512 != nil:
    section.add "RoleName", valid_598512
  var valid_598513 = formData.getOrDefault("PolicyDocument")
  valid_598513 = validateParameter(valid_598513, JString, required = true,
                                 default = nil)
  if valid_598513 != nil:
    section.add "PolicyDocument", valid_598513
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598514: Call_PostUpdateAssumeRolePolicy_598500; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_598514.validator(path, query, header, formData, body)
  let scheme = call_598514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598514.url(scheme.get, call_598514.host, call_598514.base,
                         call_598514.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598514, url, valid)

proc call*(call_598515: Call_PostUpdateAssumeRolePolicy_598500; RoleName: string;
          PolicyDocument: string; Action: string = "UpdateAssumeRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598516 = newJObject()
  var formData_598517 = newJObject()
  add(formData_598517, "RoleName", newJString(RoleName))
  add(formData_598517, "PolicyDocument", newJString(PolicyDocument))
  add(query_598516, "Action", newJString(Action))
  add(query_598516, "Version", newJString(Version))
  result = call_598515.call(nil, query_598516, nil, formData_598517, nil)

var postUpdateAssumeRolePolicy* = Call_PostUpdateAssumeRolePolicy_598500(
    name: "postUpdateAssumeRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_PostUpdateAssumeRolePolicy_598501, base: "/",
    url: url_PostUpdateAssumeRolePolicy_598502,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAssumeRolePolicy_598483 = ref object of OpenApiRestCall_593437
proc url_GetUpdateAssumeRolePolicy_598485(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateAssumeRolePolicy_598484(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598486 = query.getOrDefault("Action")
  valid_598486 = validateParameter(valid_598486, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_598486 != nil:
    section.add "Action", valid_598486
  var valid_598487 = query.getOrDefault("PolicyDocument")
  valid_598487 = validateParameter(valid_598487, JString, required = true,
                                 default = nil)
  if valid_598487 != nil:
    section.add "PolicyDocument", valid_598487
  var valid_598488 = query.getOrDefault("RoleName")
  valid_598488 = validateParameter(valid_598488, JString, required = true,
                                 default = nil)
  if valid_598488 != nil:
    section.add "RoleName", valid_598488
  var valid_598489 = query.getOrDefault("Version")
  valid_598489 = validateParameter(valid_598489, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598489 != nil:
    section.add "Version", valid_598489
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598490 = header.getOrDefault("X-Amz-Date")
  valid_598490 = validateParameter(valid_598490, JString, required = false,
                                 default = nil)
  if valid_598490 != nil:
    section.add "X-Amz-Date", valid_598490
  var valid_598491 = header.getOrDefault("X-Amz-Security-Token")
  valid_598491 = validateParameter(valid_598491, JString, required = false,
                                 default = nil)
  if valid_598491 != nil:
    section.add "X-Amz-Security-Token", valid_598491
  var valid_598492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598492 = validateParameter(valid_598492, JString, required = false,
                                 default = nil)
  if valid_598492 != nil:
    section.add "X-Amz-Content-Sha256", valid_598492
  var valid_598493 = header.getOrDefault("X-Amz-Algorithm")
  valid_598493 = validateParameter(valid_598493, JString, required = false,
                                 default = nil)
  if valid_598493 != nil:
    section.add "X-Amz-Algorithm", valid_598493
  var valid_598494 = header.getOrDefault("X-Amz-Signature")
  valid_598494 = validateParameter(valid_598494, JString, required = false,
                                 default = nil)
  if valid_598494 != nil:
    section.add "X-Amz-Signature", valid_598494
  var valid_598495 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598495 = validateParameter(valid_598495, JString, required = false,
                                 default = nil)
  if valid_598495 != nil:
    section.add "X-Amz-SignedHeaders", valid_598495
  var valid_598496 = header.getOrDefault("X-Amz-Credential")
  valid_598496 = validateParameter(valid_598496, JString, required = false,
                                 default = nil)
  if valid_598496 != nil:
    section.add "X-Amz-Credential", valid_598496
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598497: Call_GetUpdateAssumeRolePolicy_598483; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_598497.validator(path, query, header, formData, body)
  let scheme = call_598497.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598497.url(scheme.get, call_598497.host, call_598497.base,
                         call_598497.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598497, url, valid)

proc call*(call_598498: Call_GetUpdateAssumeRolePolicy_598483;
          PolicyDocument: string; RoleName: string;
          Action: string = "UpdateAssumeRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_598499 = newJObject()
  add(query_598499, "Action", newJString(Action))
  add(query_598499, "PolicyDocument", newJString(PolicyDocument))
  add(query_598499, "RoleName", newJString(RoleName))
  add(query_598499, "Version", newJString(Version))
  result = call_598498.call(nil, query_598499, nil, nil, nil)

var getUpdateAssumeRolePolicy* = Call_GetUpdateAssumeRolePolicy_598483(
    name: "getUpdateAssumeRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_GetUpdateAssumeRolePolicy_598484, base: "/",
    url: url_GetUpdateAssumeRolePolicy_598485,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateGroup_598536 = ref object of OpenApiRestCall_593437
proc url_PostUpdateGroup_598538(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateGroup_598537(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598539 = query.getOrDefault("Action")
  valid_598539 = validateParameter(valid_598539, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_598539 != nil:
    section.add "Action", valid_598539
  var valid_598540 = query.getOrDefault("Version")
  valid_598540 = validateParameter(valid_598540, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598540 != nil:
    section.add "Version", valid_598540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598541 = header.getOrDefault("X-Amz-Date")
  valid_598541 = validateParameter(valid_598541, JString, required = false,
                                 default = nil)
  if valid_598541 != nil:
    section.add "X-Amz-Date", valid_598541
  var valid_598542 = header.getOrDefault("X-Amz-Security-Token")
  valid_598542 = validateParameter(valid_598542, JString, required = false,
                                 default = nil)
  if valid_598542 != nil:
    section.add "X-Amz-Security-Token", valid_598542
  var valid_598543 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598543 = validateParameter(valid_598543, JString, required = false,
                                 default = nil)
  if valid_598543 != nil:
    section.add "X-Amz-Content-Sha256", valid_598543
  var valid_598544 = header.getOrDefault("X-Amz-Algorithm")
  valid_598544 = validateParameter(valid_598544, JString, required = false,
                                 default = nil)
  if valid_598544 != nil:
    section.add "X-Amz-Algorithm", valid_598544
  var valid_598545 = header.getOrDefault("X-Amz-Signature")
  valid_598545 = validateParameter(valid_598545, JString, required = false,
                                 default = nil)
  if valid_598545 != nil:
    section.add "X-Amz-Signature", valid_598545
  var valid_598546 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598546 = validateParameter(valid_598546, JString, required = false,
                                 default = nil)
  if valid_598546 != nil:
    section.add "X-Amz-SignedHeaders", valid_598546
  var valid_598547 = header.getOrDefault("X-Amz-Credential")
  valid_598547 = validateParameter(valid_598547, JString, required = false,
                                 default = nil)
  if valid_598547 != nil:
    section.add "X-Amz-Credential", valid_598547
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  var valid_598548 = formData.getOrDefault("NewGroupName")
  valid_598548 = validateParameter(valid_598548, JString, required = false,
                                 default = nil)
  if valid_598548 != nil:
    section.add "NewGroupName", valid_598548
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_598549 = formData.getOrDefault("GroupName")
  valid_598549 = validateParameter(valid_598549, JString, required = true,
                                 default = nil)
  if valid_598549 != nil:
    section.add "GroupName", valid_598549
  var valid_598550 = formData.getOrDefault("NewPath")
  valid_598550 = validateParameter(valid_598550, JString, required = false,
                                 default = nil)
  if valid_598550 != nil:
    section.add "NewPath", valid_598550
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598551: Call_PostUpdateGroup_598536; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_598551.validator(path, query, header, formData, body)
  let scheme = call_598551.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598551.url(scheme.get, call_598551.host, call_598551.base,
                         call_598551.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598551, url, valid)

proc call*(call_598552: Call_PostUpdateGroup_598536; GroupName: string;
          NewGroupName: string = ""; Action: string = "UpdateGroup";
          Version: string = "2010-05-08"; NewPath: string = ""): Recallable =
  ## postUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_598553 = newJObject()
  var formData_598554 = newJObject()
  add(formData_598554, "NewGroupName", newJString(NewGroupName))
  add(formData_598554, "GroupName", newJString(GroupName))
  add(query_598553, "Action", newJString(Action))
  add(query_598553, "Version", newJString(Version))
  add(formData_598554, "NewPath", newJString(NewPath))
  result = call_598552.call(nil, query_598553, nil, formData_598554, nil)

var postUpdateGroup* = Call_PostUpdateGroup_598536(name: "postUpdateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_PostUpdateGroup_598537,
    base: "/", url: url_PostUpdateGroup_598538, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateGroup_598518 = ref object of OpenApiRestCall_593437
proc url_GetUpdateGroup_598520(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateGroup_598519(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598521 = query.getOrDefault("Action")
  valid_598521 = validateParameter(valid_598521, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_598521 != nil:
    section.add "Action", valid_598521
  var valid_598522 = query.getOrDefault("GroupName")
  valid_598522 = validateParameter(valid_598522, JString, required = true,
                                 default = nil)
  if valid_598522 != nil:
    section.add "GroupName", valid_598522
  var valid_598523 = query.getOrDefault("NewGroupName")
  valid_598523 = validateParameter(valid_598523, JString, required = false,
                                 default = nil)
  if valid_598523 != nil:
    section.add "NewGroupName", valid_598523
  var valid_598524 = query.getOrDefault("NewPath")
  valid_598524 = validateParameter(valid_598524, JString, required = false,
                                 default = nil)
  if valid_598524 != nil:
    section.add "NewPath", valid_598524
  var valid_598525 = query.getOrDefault("Version")
  valid_598525 = validateParameter(valid_598525, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598525 != nil:
    section.add "Version", valid_598525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598526 = header.getOrDefault("X-Amz-Date")
  valid_598526 = validateParameter(valid_598526, JString, required = false,
                                 default = nil)
  if valid_598526 != nil:
    section.add "X-Amz-Date", valid_598526
  var valid_598527 = header.getOrDefault("X-Amz-Security-Token")
  valid_598527 = validateParameter(valid_598527, JString, required = false,
                                 default = nil)
  if valid_598527 != nil:
    section.add "X-Amz-Security-Token", valid_598527
  var valid_598528 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598528 = validateParameter(valid_598528, JString, required = false,
                                 default = nil)
  if valid_598528 != nil:
    section.add "X-Amz-Content-Sha256", valid_598528
  var valid_598529 = header.getOrDefault("X-Amz-Algorithm")
  valid_598529 = validateParameter(valid_598529, JString, required = false,
                                 default = nil)
  if valid_598529 != nil:
    section.add "X-Amz-Algorithm", valid_598529
  var valid_598530 = header.getOrDefault("X-Amz-Signature")
  valid_598530 = validateParameter(valid_598530, JString, required = false,
                                 default = nil)
  if valid_598530 != nil:
    section.add "X-Amz-Signature", valid_598530
  var valid_598531 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598531 = validateParameter(valid_598531, JString, required = false,
                                 default = nil)
  if valid_598531 != nil:
    section.add "X-Amz-SignedHeaders", valid_598531
  var valid_598532 = header.getOrDefault("X-Amz-Credential")
  valid_598532 = validateParameter(valid_598532, JString, required = false,
                                 default = nil)
  if valid_598532 != nil:
    section.add "X-Amz-Credential", valid_598532
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598533: Call_GetUpdateGroup_598518; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_598533.validator(path, query, header, formData, body)
  let scheme = call_598533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598533.url(scheme.get, call_598533.host, call_598533.base,
                         call_598533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598533, url, valid)

proc call*(call_598534: Call_GetUpdateGroup_598518; GroupName: string;
          Action: string = "UpdateGroup"; NewGroupName: string = "";
          NewPath: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_598535 = newJObject()
  add(query_598535, "Action", newJString(Action))
  add(query_598535, "GroupName", newJString(GroupName))
  add(query_598535, "NewGroupName", newJString(NewGroupName))
  add(query_598535, "NewPath", newJString(NewPath))
  add(query_598535, "Version", newJString(Version))
  result = call_598534.call(nil, query_598535, nil, nil, nil)

var getUpdateGroup* = Call_GetUpdateGroup_598518(name: "getUpdateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_GetUpdateGroup_598519,
    base: "/", url: url_GetUpdateGroup_598520, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateLoginProfile_598573 = ref object of OpenApiRestCall_593437
proc url_PostUpdateLoginProfile_598575(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateLoginProfile_598574(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598576 = query.getOrDefault("Action")
  valid_598576 = validateParameter(valid_598576, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_598576 != nil:
    section.add "Action", valid_598576
  var valid_598577 = query.getOrDefault("Version")
  valid_598577 = validateParameter(valid_598577, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598577 != nil:
    section.add "Version", valid_598577
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598578 = header.getOrDefault("X-Amz-Date")
  valid_598578 = validateParameter(valid_598578, JString, required = false,
                                 default = nil)
  if valid_598578 != nil:
    section.add "X-Amz-Date", valid_598578
  var valid_598579 = header.getOrDefault("X-Amz-Security-Token")
  valid_598579 = validateParameter(valid_598579, JString, required = false,
                                 default = nil)
  if valid_598579 != nil:
    section.add "X-Amz-Security-Token", valid_598579
  var valid_598580 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598580 = validateParameter(valid_598580, JString, required = false,
                                 default = nil)
  if valid_598580 != nil:
    section.add "X-Amz-Content-Sha256", valid_598580
  var valid_598581 = header.getOrDefault("X-Amz-Algorithm")
  valid_598581 = validateParameter(valid_598581, JString, required = false,
                                 default = nil)
  if valid_598581 != nil:
    section.add "X-Amz-Algorithm", valid_598581
  var valid_598582 = header.getOrDefault("X-Amz-Signature")
  valid_598582 = validateParameter(valid_598582, JString, required = false,
                                 default = nil)
  if valid_598582 != nil:
    section.add "X-Amz-Signature", valid_598582
  var valid_598583 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598583 = validateParameter(valid_598583, JString, required = false,
                                 default = nil)
  if valid_598583 != nil:
    section.add "X-Amz-SignedHeaders", valid_598583
  var valid_598584 = header.getOrDefault("X-Amz-Credential")
  valid_598584 = validateParameter(valid_598584, JString, required = false,
                                 default = nil)
  if valid_598584 != nil:
    section.add "X-Amz-Credential", valid_598584
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_598585 = formData.getOrDefault("UserName")
  valid_598585 = validateParameter(valid_598585, JString, required = true,
                                 default = nil)
  if valid_598585 != nil:
    section.add "UserName", valid_598585
  var valid_598586 = formData.getOrDefault("Password")
  valid_598586 = validateParameter(valid_598586, JString, required = false,
                                 default = nil)
  if valid_598586 != nil:
    section.add "Password", valid_598586
  var valid_598587 = formData.getOrDefault("PasswordResetRequired")
  valid_598587 = validateParameter(valid_598587, JBool, required = false, default = nil)
  if valid_598587 != nil:
    section.add "PasswordResetRequired", valid_598587
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598588: Call_PostUpdateLoginProfile_598573; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_598588.validator(path, query, header, formData, body)
  let scheme = call_598588.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598588.url(scheme.get, call_598588.host, call_598588.base,
                         call_598588.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598588, url, valid)

proc call*(call_598589: Call_PostUpdateLoginProfile_598573; UserName: string;
          Password: string = ""; PasswordResetRequired: bool = false;
          Action: string = "UpdateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598590 = newJObject()
  var formData_598591 = newJObject()
  add(formData_598591, "UserName", newJString(UserName))
  add(formData_598591, "Password", newJString(Password))
  add(formData_598591, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_598590, "Action", newJString(Action))
  add(query_598590, "Version", newJString(Version))
  result = call_598589.call(nil, query_598590, nil, formData_598591, nil)

var postUpdateLoginProfile* = Call_PostUpdateLoginProfile_598573(
    name: "postUpdateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_PostUpdateLoginProfile_598574, base: "/",
    url: url_PostUpdateLoginProfile_598575, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateLoginProfile_598555 = ref object of OpenApiRestCall_593437
proc url_GetUpdateLoginProfile_598557(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateLoginProfile_598556(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_598558 = query.getOrDefault("UserName")
  valid_598558 = validateParameter(valid_598558, JString, required = true,
                                 default = nil)
  if valid_598558 != nil:
    section.add "UserName", valid_598558
  var valid_598559 = query.getOrDefault("PasswordResetRequired")
  valid_598559 = validateParameter(valid_598559, JBool, required = false, default = nil)
  if valid_598559 != nil:
    section.add "PasswordResetRequired", valid_598559
  var valid_598560 = query.getOrDefault("Action")
  valid_598560 = validateParameter(valid_598560, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_598560 != nil:
    section.add "Action", valid_598560
  var valid_598561 = query.getOrDefault("Password")
  valid_598561 = validateParameter(valid_598561, JString, required = false,
                                 default = nil)
  if valid_598561 != nil:
    section.add "Password", valid_598561
  var valid_598562 = query.getOrDefault("Version")
  valid_598562 = validateParameter(valid_598562, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598562 != nil:
    section.add "Version", valid_598562
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598563 = header.getOrDefault("X-Amz-Date")
  valid_598563 = validateParameter(valid_598563, JString, required = false,
                                 default = nil)
  if valid_598563 != nil:
    section.add "X-Amz-Date", valid_598563
  var valid_598564 = header.getOrDefault("X-Amz-Security-Token")
  valid_598564 = validateParameter(valid_598564, JString, required = false,
                                 default = nil)
  if valid_598564 != nil:
    section.add "X-Amz-Security-Token", valid_598564
  var valid_598565 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598565 = validateParameter(valid_598565, JString, required = false,
                                 default = nil)
  if valid_598565 != nil:
    section.add "X-Amz-Content-Sha256", valid_598565
  var valid_598566 = header.getOrDefault("X-Amz-Algorithm")
  valid_598566 = validateParameter(valid_598566, JString, required = false,
                                 default = nil)
  if valid_598566 != nil:
    section.add "X-Amz-Algorithm", valid_598566
  var valid_598567 = header.getOrDefault("X-Amz-Signature")
  valid_598567 = validateParameter(valid_598567, JString, required = false,
                                 default = nil)
  if valid_598567 != nil:
    section.add "X-Amz-Signature", valid_598567
  var valid_598568 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598568 = validateParameter(valid_598568, JString, required = false,
                                 default = nil)
  if valid_598568 != nil:
    section.add "X-Amz-SignedHeaders", valid_598568
  var valid_598569 = header.getOrDefault("X-Amz-Credential")
  valid_598569 = validateParameter(valid_598569, JString, required = false,
                                 default = nil)
  if valid_598569 != nil:
    section.add "X-Amz-Credential", valid_598569
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598570: Call_GetUpdateLoginProfile_598555; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_598570.validator(path, query, header, formData, body)
  let scheme = call_598570.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598570.url(scheme.get, call_598570.host, call_598570.base,
                         call_598570.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598570, url, valid)

proc call*(call_598571: Call_GetUpdateLoginProfile_598555; UserName: string;
          PasswordResetRequired: bool = false;
          Action: string = "UpdateLoginProfile"; Password: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   Version: string (required)
  var query_598572 = newJObject()
  add(query_598572, "UserName", newJString(UserName))
  add(query_598572, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_598572, "Action", newJString(Action))
  add(query_598572, "Password", newJString(Password))
  add(query_598572, "Version", newJString(Version))
  result = call_598571.call(nil, query_598572, nil, nil, nil)

var getUpdateLoginProfile* = Call_GetUpdateLoginProfile_598555(
    name: "getUpdateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_GetUpdateLoginProfile_598556, base: "/",
    url: url_GetUpdateLoginProfile_598557, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateOpenIDConnectProviderThumbprint_598609 = ref object of OpenApiRestCall_593437
proc url_PostUpdateOpenIDConnectProviderThumbprint_598611(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateOpenIDConnectProviderThumbprint_598610(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598612 = query.getOrDefault("Action")
  valid_598612 = validateParameter(valid_598612, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_598612 != nil:
    section.add "Action", valid_598612
  var valid_598613 = query.getOrDefault("Version")
  valid_598613 = validateParameter(valid_598613, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598613 != nil:
    section.add "Version", valid_598613
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598614 = header.getOrDefault("X-Amz-Date")
  valid_598614 = validateParameter(valid_598614, JString, required = false,
                                 default = nil)
  if valid_598614 != nil:
    section.add "X-Amz-Date", valid_598614
  var valid_598615 = header.getOrDefault("X-Amz-Security-Token")
  valid_598615 = validateParameter(valid_598615, JString, required = false,
                                 default = nil)
  if valid_598615 != nil:
    section.add "X-Amz-Security-Token", valid_598615
  var valid_598616 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598616 = validateParameter(valid_598616, JString, required = false,
                                 default = nil)
  if valid_598616 != nil:
    section.add "X-Amz-Content-Sha256", valid_598616
  var valid_598617 = header.getOrDefault("X-Amz-Algorithm")
  valid_598617 = validateParameter(valid_598617, JString, required = false,
                                 default = nil)
  if valid_598617 != nil:
    section.add "X-Amz-Algorithm", valid_598617
  var valid_598618 = header.getOrDefault("X-Amz-Signature")
  valid_598618 = validateParameter(valid_598618, JString, required = false,
                                 default = nil)
  if valid_598618 != nil:
    section.add "X-Amz-Signature", valid_598618
  var valid_598619 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598619 = validateParameter(valid_598619, JString, required = false,
                                 default = nil)
  if valid_598619 != nil:
    section.add "X-Amz-SignedHeaders", valid_598619
  var valid_598620 = header.getOrDefault("X-Amz-Credential")
  valid_598620 = validateParameter(valid_598620, JString, required = false,
                                 default = nil)
  if valid_598620 != nil:
    section.add "X-Amz-Credential", valid_598620
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_598621 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_598621 = validateParameter(valid_598621, JString, required = true,
                                 default = nil)
  if valid_598621 != nil:
    section.add "OpenIDConnectProviderArn", valid_598621
  var valid_598622 = formData.getOrDefault("ThumbprintList")
  valid_598622 = validateParameter(valid_598622, JArray, required = true, default = nil)
  if valid_598622 != nil:
    section.add "ThumbprintList", valid_598622
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598623: Call_PostUpdateOpenIDConnectProviderThumbprint_598609;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_598623.validator(path, query, header, formData, body)
  let scheme = call_598623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598623.url(scheme.get, call_598623.host, call_598623.base,
                         call_598623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598623, url, valid)

proc call*(call_598624: Call_PostUpdateOpenIDConnectProviderThumbprint_598609;
          OpenIDConnectProviderArn: string; ThumbprintList: JsonNode;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598625 = newJObject()
  var formData_598626 = newJObject()
  add(formData_598626, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  if ThumbprintList != nil:
    formData_598626.add "ThumbprintList", ThumbprintList
  add(query_598625, "Action", newJString(Action))
  add(query_598625, "Version", newJString(Version))
  result = call_598624.call(nil, query_598625, nil, formData_598626, nil)

var postUpdateOpenIDConnectProviderThumbprint* = Call_PostUpdateOpenIDConnectProviderThumbprint_598609(
    name: "postUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_PostUpdateOpenIDConnectProviderThumbprint_598610,
    base: "/", url: url_PostUpdateOpenIDConnectProviderThumbprint_598611,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateOpenIDConnectProviderThumbprint_598592 = ref object of OpenApiRestCall_593437
proc url_GetUpdateOpenIDConnectProviderThumbprint_598594(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateOpenIDConnectProviderThumbprint_598593(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_598595 = query.getOrDefault("ThumbprintList")
  valid_598595 = validateParameter(valid_598595, JArray, required = true, default = nil)
  if valid_598595 != nil:
    section.add "ThumbprintList", valid_598595
  var valid_598596 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_598596 = validateParameter(valid_598596, JString, required = true,
                                 default = nil)
  if valid_598596 != nil:
    section.add "OpenIDConnectProviderArn", valid_598596
  var valid_598597 = query.getOrDefault("Action")
  valid_598597 = validateParameter(valid_598597, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_598597 != nil:
    section.add "Action", valid_598597
  var valid_598598 = query.getOrDefault("Version")
  valid_598598 = validateParameter(valid_598598, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598598 != nil:
    section.add "Version", valid_598598
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598599 = header.getOrDefault("X-Amz-Date")
  valid_598599 = validateParameter(valid_598599, JString, required = false,
                                 default = nil)
  if valid_598599 != nil:
    section.add "X-Amz-Date", valid_598599
  var valid_598600 = header.getOrDefault("X-Amz-Security-Token")
  valid_598600 = validateParameter(valid_598600, JString, required = false,
                                 default = nil)
  if valid_598600 != nil:
    section.add "X-Amz-Security-Token", valid_598600
  var valid_598601 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598601 = validateParameter(valid_598601, JString, required = false,
                                 default = nil)
  if valid_598601 != nil:
    section.add "X-Amz-Content-Sha256", valid_598601
  var valid_598602 = header.getOrDefault("X-Amz-Algorithm")
  valid_598602 = validateParameter(valid_598602, JString, required = false,
                                 default = nil)
  if valid_598602 != nil:
    section.add "X-Amz-Algorithm", valid_598602
  var valid_598603 = header.getOrDefault("X-Amz-Signature")
  valid_598603 = validateParameter(valid_598603, JString, required = false,
                                 default = nil)
  if valid_598603 != nil:
    section.add "X-Amz-Signature", valid_598603
  var valid_598604 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598604 = validateParameter(valid_598604, JString, required = false,
                                 default = nil)
  if valid_598604 != nil:
    section.add "X-Amz-SignedHeaders", valid_598604
  var valid_598605 = header.getOrDefault("X-Amz-Credential")
  valid_598605 = validateParameter(valid_598605, JString, required = false,
                                 default = nil)
  if valid_598605 != nil:
    section.add "X-Amz-Credential", valid_598605
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598606: Call_GetUpdateOpenIDConnectProviderThumbprint_598592;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_598606.validator(path, query, header, formData, body)
  let scheme = call_598606.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598606.url(scheme.get, call_598606.host, call_598606.base,
                         call_598606.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598606, url, valid)

proc call*(call_598607: Call_GetUpdateOpenIDConnectProviderThumbprint_598592;
          ThumbprintList: JsonNode; OpenIDConnectProviderArn: string;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598608 = newJObject()
  if ThumbprintList != nil:
    query_598608.add "ThumbprintList", ThumbprintList
  add(query_598608, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_598608, "Action", newJString(Action))
  add(query_598608, "Version", newJString(Version))
  result = call_598607.call(nil, query_598608, nil, nil, nil)

var getUpdateOpenIDConnectProviderThumbprint* = Call_GetUpdateOpenIDConnectProviderThumbprint_598592(
    name: "getUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_GetUpdateOpenIDConnectProviderThumbprint_598593,
    base: "/", url: url_GetUpdateOpenIDConnectProviderThumbprint_598594,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRole_598645 = ref object of OpenApiRestCall_593437
proc url_PostUpdateRole_598647(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateRole_598646(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598648 = query.getOrDefault("Action")
  valid_598648 = validateParameter(valid_598648, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_598648 != nil:
    section.add "Action", valid_598648
  var valid_598649 = query.getOrDefault("Version")
  valid_598649 = validateParameter(valid_598649, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598649 != nil:
    section.add "Version", valid_598649
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598650 = header.getOrDefault("X-Amz-Date")
  valid_598650 = validateParameter(valid_598650, JString, required = false,
                                 default = nil)
  if valid_598650 != nil:
    section.add "X-Amz-Date", valid_598650
  var valid_598651 = header.getOrDefault("X-Amz-Security-Token")
  valid_598651 = validateParameter(valid_598651, JString, required = false,
                                 default = nil)
  if valid_598651 != nil:
    section.add "X-Amz-Security-Token", valid_598651
  var valid_598652 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598652 = validateParameter(valid_598652, JString, required = false,
                                 default = nil)
  if valid_598652 != nil:
    section.add "X-Amz-Content-Sha256", valid_598652
  var valid_598653 = header.getOrDefault("X-Amz-Algorithm")
  valid_598653 = validateParameter(valid_598653, JString, required = false,
                                 default = nil)
  if valid_598653 != nil:
    section.add "X-Amz-Algorithm", valid_598653
  var valid_598654 = header.getOrDefault("X-Amz-Signature")
  valid_598654 = validateParameter(valid_598654, JString, required = false,
                                 default = nil)
  if valid_598654 != nil:
    section.add "X-Amz-Signature", valid_598654
  var valid_598655 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598655 = validateParameter(valid_598655, JString, required = false,
                                 default = nil)
  if valid_598655 != nil:
    section.add "X-Amz-SignedHeaders", valid_598655
  var valid_598656 = header.getOrDefault("X-Amz-Credential")
  valid_598656 = validateParameter(valid_598656, JString, required = false,
                                 default = nil)
  if valid_598656 != nil:
    section.add "X-Amz-Credential", valid_598656
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_598657 = formData.getOrDefault("RoleName")
  valid_598657 = validateParameter(valid_598657, JString, required = true,
                                 default = nil)
  if valid_598657 != nil:
    section.add "RoleName", valid_598657
  var valid_598658 = formData.getOrDefault("MaxSessionDuration")
  valid_598658 = validateParameter(valid_598658, JInt, required = false, default = nil)
  if valid_598658 != nil:
    section.add "MaxSessionDuration", valid_598658
  var valid_598659 = formData.getOrDefault("Description")
  valid_598659 = validateParameter(valid_598659, JString, required = false,
                                 default = nil)
  if valid_598659 != nil:
    section.add "Description", valid_598659
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598660: Call_PostUpdateRole_598645; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_598660.validator(path, query, header, formData, body)
  let scheme = call_598660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598660.url(scheme.get, call_598660.host, call_598660.base,
                         call_598660.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598660, url, valid)

proc call*(call_598661: Call_PostUpdateRole_598645; RoleName: string;
          Action: string = "UpdateRole"; MaxSessionDuration: int = 0;
          Version: string = "2010-05-08"; Description: string = ""): Recallable =
  ## postUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  var query_598662 = newJObject()
  var formData_598663 = newJObject()
  add(formData_598663, "RoleName", newJString(RoleName))
  add(query_598662, "Action", newJString(Action))
  add(formData_598663, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_598662, "Version", newJString(Version))
  add(formData_598663, "Description", newJString(Description))
  result = call_598661.call(nil, query_598662, nil, formData_598663, nil)

var postUpdateRole* = Call_PostUpdateRole_598645(name: "postUpdateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_PostUpdateRole_598646,
    base: "/", url: url_PostUpdateRole_598647, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRole_598627 = ref object of OpenApiRestCall_593437
proc url_GetUpdateRole_598629(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateRole_598628(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Version: JString (required)
  section = newJObject()
  var valid_598630 = query.getOrDefault("Description")
  valid_598630 = validateParameter(valid_598630, JString, required = false,
                                 default = nil)
  if valid_598630 != nil:
    section.add "Description", valid_598630
  var valid_598631 = query.getOrDefault("MaxSessionDuration")
  valid_598631 = validateParameter(valid_598631, JInt, required = false, default = nil)
  if valid_598631 != nil:
    section.add "MaxSessionDuration", valid_598631
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598632 = query.getOrDefault("Action")
  valid_598632 = validateParameter(valid_598632, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_598632 != nil:
    section.add "Action", valid_598632
  var valid_598633 = query.getOrDefault("RoleName")
  valid_598633 = validateParameter(valid_598633, JString, required = true,
                                 default = nil)
  if valid_598633 != nil:
    section.add "RoleName", valid_598633
  var valid_598634 = query.getOrDefault("Version")
  valid_598634 = validateParameter(valid_598634, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598634 != nil:
    section.add "Version", valid_598634
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598635 = header.getOrDefault("X-Amz-Date")
  valid_598635 = validateParameter(valid_598635, JString, required = false,
                                 default = nil)
  if valid_598635 != nil:
    section.add "X-Amz-Date", valid_598635
  var valid_598636 = header.getOrDefault("X-Amz-Security-Token")
  valid_598636 = validateParameter(valid_598636, JString, required = false,
                                 default = nil)
  if valid_598636 != nil:
    section.add "X-Amz-Security-Token", valid_598636
  var valid_598637 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598637 = validateParameter(valid_598637, JString, required = false,
                                 default = nil)
  if valid_598637 != nil:
    section.add "X-Amz-Content-Sha256", valid_598637
  var valid_598638 = header.getOrDefault("X-Amz-Algorithm")
  valid_598638 = validateParameter(valid_598638, JString, required = false,
                                 default = nil)
  if valid_598638 != nil:
    section.add "X-Amz-Algorithm", valid_598638
  var valid_598639 = header.getOrDefault("X-Amz-Signature")
  valid_598639 = validateParameter(valid_598639, JString, required = false,
                                 default = nil)
  if valid_598639 != nil:
    section.add "X-Amz-Signature", valid_598639
  var valid_598640 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598640 = validateParameter(valid_598640, JString, required = false,
                                 default = nil)
  if valid_598640 != nil:
    section.add "X-Amz-SignedHeaders", valid_598640
  var valid_598641 = header.getOrDefault("X-Amz-Credential")
  valid_598641 = validateParameter(valid_598641, JString, required = false,
                                 default = nil)
  if valid_598641 != nil:
    section.add "X-Amz-Credential", valid_598641
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598642: Call_GetUpdateRole_598627; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_598642.validator(path, query, header, formData, body)
  let scheme = call_598642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598642.url(scheme.get, call_598642.host, call_598642.base,
                         call_598642.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598642, url, valid)

proc call*(call_598643: Call_GetUpdateRole_598627; RoleName: string;
          Description: string = ""; MaxSessionDuration: int = 0;
          Action: string = "UpdateRole"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Version: string (required)
  var query_598644 = newJObject()
  add(query_598644, "Description", newJString(Description))
  add(query_598644, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_598644, "Action", newJString(Action))
  add(query_598644, "RoleName", newJString(RoleName))
  add(query_598644, "Version", newJString(Version))
  result = call_598643.call(nil, query_598644, nil, nil, nil)

var getUpdateRole* = Call_GetUpdateRole_598627(name: "getUpdateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_GetUpdateRole_598628,
    base: "/", url: url_GetUpdateRole_598629, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRoleDescription_598681 = ref object of OpenApiRestCall_593437
proc url_PostUpdateRoleDescription_598683(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateRoleDescription_598682(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598684 = query.getOrDefault("Action")
  valid_598684 = validateParameter(valid_598684, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_598684 != nil:
    section.add "Action", valid_598684
  var valid_598685 = query.getOrDefault("Version")
  valid_598685 = validateParameter(valid_598685, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598685 != nil:
    section.add "Version", valid_598685
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598686 = header.getOrDefault("X-Amz-Date")
  valid_598686 = validateParameter(valid_598686, JString, required = false,
                                 default = nil)
  if valid_598686 != nil:
    section.add "X-Amz-Date", valid_598686
  var valid_598687 = header.getOrDefault("X-Amz-Security-Token")
  valid_598687 = validateParameter(valid_598687, JString, required = false,
                                 default = nil)
  if valid_598687 != nil:
    section.add "X-Amz-Security-Token", valid_598687
  var valid_598688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598688 = validateParameter(valid_598688, JString, required = false,
                                 default = nil)
  if valid_598688 != nil:
    section.add "X-Amz-Content-Sha256", valid_598688
  var valid_598689 = header.getOrDefault("X-Amz-Algorithm")
  valid_598689 = validateParameter(valid_598689, JString, required = false,
                                 default = nil)
  if valid_598689 != nil:
    section.add "X-Amz-Algorithm", valid_598689
  var valid_598690 = header.getOrDefault("X-Amz-Signature")
  valid_598690 = validateParameter(valid_598690, JString, required = false,
                                 default = nil)
  if valid_598690 != nil:
    section.add "X-Amz-Signature", valid_598690
  var valid_598691 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598691 = validateParameter(valid_598691, JString, required = false,
                                 default = nil)
  if valid_598691 != nil:
    section.add "X-Amz-SignedHeaders", valid_598691
  var valid_598692 = header.getOrDefault("X-Amz-Credential")
  valid_598692 = validateParameter(valid_598692, JString, required = false,
                                 default = nil)
  if valid_598692 != nil:
    section.add "X-Amz-Credential", valid_598692
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_598693 = formData.getOrDefault("RoleName")
  valid_598693 = validateParameter(valid_598693, JString, required = true,
                                 default = nil)
  if valid_598693 != nil:
    section.add "RoleName", valid_598693
  var valid_598694 = formData.getOrDefault("Description")
  valid_598694 = validateParameter(valid_598694, JString, required = true,
                                 default = nil)
  if valid_598694 != nil:
    section.add "Description", valid_598694
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598695: Call_PostUpdateRoleDescription_598681; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_598695.validator(path, query, header, formData, body)
  let scheme = call_598695.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598695.url(scheme.get, call_598695.host, call_598695.base,
                         call_598695.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598695, url, valid)

proc call*(call_598696: Call_PostUpdateRoleDescription_598681; RoleName: string;
          Description: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  var query_598697 = newJObject()
  var formData_598698 = newJObject()
  add(formData_598698, "RoleName", newJString(RoleName))
  add(query_598697, "Action", newJString(Action))
  add(query_598697, "Version", newJString(Version))
  add(formData_598698, "Description", newJString(Description))
  result = call_598696.call(nil, query_598697, nil, formData_598698, nil)

var postUpdateRoleDescription* = Call_PostUpdateRoleDescription_598681(
    name: "postUpdateRoleDescription", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_PostUpdateRoleDescription_598682, base: "/",
    url: url_PostUpdateRoleDescription_598683,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRoleDescription_598664 = ref object of OpenApiRestCall_593437
proc url_GetUpdateRoleDescription_598666(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateRoleDescription_598665(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Description` field"
  var valid_598667 = query.getOrDefault("Description")
  valid_598667 = validateParameter(valid_598667, JString, required = true,
                                 default = nil)
  if valid_598667 != nil:
    section.add "Description", valid_598667
  var valid_598668 = query.getOrDefault("Action")
  valid_598668 = validateParameter(valid_598668, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_598668 != nil:
    section.add "Action", valid_598668
  var valid_598669 = query.getOrDefault("RoleName")
  valid_598669 = validateParameter(valid_598669, JString, required = true,
                                 default = nil)
  if valid_598669 != nil:
    section.add "RoleName", valid_598669
  var valid_598670 = query.getOrDefault("Version")
  valid_598670 = validateParameter(valid_598670, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598670 != nil:
    section.add "Version", valid_598670
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598671 = header.getOrDefault("X-Amz-Date")
  valid_598671 = validateParameter(valid_598671, JString, required = false,
                                 default = nil)
  if valid_598671 != nil:
    section.add "X-Amz-Date", valid_598671
  var valid_598672 = header.getOrDefault("X-Amz-Security-Token")
  valid_598672 = validateParameter(valid_598672, JString, required = false,
                                 default = nil)
  if valid_598672 != nil:
    section.add "X-Amz-Security-Token", valid_598672
  var valid_598673 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598673 = validateParameter(valid_598673, JString, required = false,
                                 default = nil)
  if valid_598673 != nil:
    section.add "X-Amz-Content-Sha256", valid_598673
  var valid_598674 = header.getOrDefault("X-Amz-Algorithm")
  valid_598674 = validateParameter(valid_598674, JString, required = false,
                                 default = nil)
  if valid_598674 != nil:
    section.add "X-Amz-Algorithm", valid_598674
  var valid_598675 = header.getOrDefault("X-Amz-Signature")
  valid_598675 = validateParameter(valid_598675, JString, required = false,
                                 default = nil)
  if valid_598675 != nil:
    section.add "X-Amz-Signature", valid_598675
  var valid_598676 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598676 = validateParameter(valid_598676, JString, required = false,
                                 default = nil)
  if valid_598676 != nil:
    section.add "X-Amz-SignedHeaders", valid_598676
  var valid_598677 = header.getOrDefault("X-Amz-Credential")
  valid_598677 = validateParameter(valid_598677, JString, required = false,
                                 default = nil)
  if valid_598677 != nil:
    section.add "X-Amz-Credential", valid_598677
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598678: Call_GetUpdateRoleDescription_598664; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_598678.validator(path, query, header, formData, body)
  let scheme = call_598678.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598678.url(scheme.get, call_598678.host, call_598678.base,
                         call_598678.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598678, url, valid)

proc call*(call_598679: Call_GetUpdateRoleDescription_598664; Description: string;
          RoleName: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Version: string (required)
  var query_598680 = newJObject()
  add(query_598680, "Description", newJString(Description))
  add(query_598680, "Action", newJString(Action))
  add(query_598680, "RoleName", newJString(RoleName))
  add(query_598680, "Version", newJString(Version))
  result = call_598679.call(nil, query_598680, nil, nil, nil)

var getUpdateRoleDescription* = Call_GetUpdateRoleDescription_598664(
    name: "getUpdateRoleDescription", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_GetUpdateRoleDescription_598665, base: "/",
    url: url_GetUpdateRoleDescription_598666, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSAMLProvider_598716 = ref object of OpenApiRestCall_593437
proc url_PostUpdateSAMLProvider_598718(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateSAMLProvider_598717(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598719 = query.getOrDefault("Action")
  valid_598719 = validateParameter(valid_598719, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_598719 != nil:
    section.add "Action", valid_598719
  var valid_598720 = query.getOrDefault("Version")
  valid_598720 = validateParameter(valid_598720, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598720 != nil:
    section.add "Version", valid_598720
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598721 = header.getOrDefault("X-Amz-Date")
  valid_598721 = validateParameter(valid_598721, JString, required = false,
                                 default = nil)
  if valid_598721 != nil:
    section.add "X-Amz-Date", valid_598721
  var valid_598722 = header.getOrDefault("X-Amz-Security-Token")
  valid_598722 = validateParameter(valid_598722, JString, required = false,
                                 default = nil)
  if valid_598722 != nil:
    section.add "X-Amz-Security-Token", valid_598722
  var valid_598723 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598723 = validateParameter(valid_598723, JString, required = false,
                                 default = nil)
  if valid_598723 != nil:
    section.add "X-Amz-Content-Sha256", valid_598723
  var valid_598724 = header.getOrDefault("X-Amz-Algorithm")
  valid_598724 = validateParameter(valid_598724, JString, required = false,
                                 default = nil)
  if valid_598724 != nil:
    section.add "X-Amz-Algorithm", valid_598724
  var valid_598725 = header.getOrDefault("X-Amz-Signature")
  valid_598725 = validateParameter(valid_598725, JString, required = false,
                                 default = nil)
  if valid_598725 != nil:
    section.add "X-Amz-Signature", valid_598725
  var valid_598726 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598726 = validateParameter(valid_598726, JString, required = false,
                                 default = nil)
  if valid_598726 != nil:
    section.add "X-Amz-SignedHeaders", valid_598726
  var valid_598727 = header.getOrDefault("X-Amz-Credential")
  valid_598727 = validateParameter(valid_598727, JString, required = false,
                                 default = nil)
  if valid_598727 != nil:
    section.add "X-Amz-Credential", valid_598727
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_598728 = formData.getOrDefault("SAMLProviderArn")
  valid_598728 = validateParameter(valid_598728, JString, required = true,
                                 default = nil)
  if valid_598728 != nil:
    section.add "SAMLProviderArn", valid_598728
  var valid_598729 = formData.getOrDefault("SAMLMetadataDocument")
  valid_598729 = validateParameter(valid_598729, JString, required = true,
                                 default = nil)
  if valid_598729 != nil:
    section.add "SAMLMetadataDocument", valid_598729
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598730: Call_PostUpdateSAMLProvider_598716; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_598730.validator(path, query, header, formData, body)
  let scheme = call_598730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598730.url(scheme.get, call_598730.host, call_598730.base,
                         call_598730.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598730, url, valid)

proc call*(call_598731: Call_PostUpdateSAMLProvider_598716;
          SAMLProviderArn: string; SAMLMetadataDocument: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Version: string (required)
  var query_598732 = newJObject()
  var formData_598733 = newJObject()
  add(formData_598733, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_598732, "Action", newJString(Action))
  add(formData_598733, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_598732, "Version", newJString(Version))
  result = call_598731.call(nil, query_598732, nil, formData_598733, nil)

var postUpdateSAMLProvider* = Call_PostUpdateSAMLProvider_598716(
    name: "postUpdateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_PostUpdateSAMLProvider_598717, base: "/",
    url: url_PostUpdateSAMLProvider_598718, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSAMLProvider_598699 = ref object of OpenApiRestCall_593437
proc url_GetUpdateSAMLProvider_598701(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateSAMLProvider_598700(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SAMLMetadataDocument` field"
  var valid_598702 = query.getOrDefault("SAMLMetadataDocument")
  valid_598702 = validateParameter(valid_598702, JString, required = true,
                                 default = nil)
  if valid_598702 != nil:
    section.add "SAMLMetadataDocument", valid_598702
  var valid_598703 = query.getOrDefault("Action")
  valid_598703 = validateParameter(valid_598703, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_598703 != nil:
    section.add "Action", valid_598703
  var valid_598704 = query.getOrDefault("SAMLProviderArn")
  valid_598704 = validateParameter(valid_598704, JString, required = true,
                                 default = nil)
  if valid_598704 != nil:
    section.add "SAMLProviderArn", valid_598704
  var valid_598705 = query.getOrDefault("Version")
  valid_598705 = validateParameter(valid_598705, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598705 != nil:
    section.add "Version", valid_598705
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598706 = header.getOrDefault("X-Amz-Date")
  valid_598706 = validateParameter(valid_598706, JString, required = false,
                                 default = nil)
  if valid_598706 != nil:
    section.add "X-Amz-Date", valid_598706
  var valid_598707 = header.getOrDefault("X-Amz-Security-Token")
  valid_598707 = validateParameter(valid_598707, JString, required = false,
                                 default = nil)
  if valid_598707 != nil:
    section.add "X-Amz-Security-Token", valid_598707
  var valid_598708 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598708 = validateParameter(valid_598708, JString, required = false,
                                 default = nil)
  if valid_598708 != nil:
    section.add "X-Amz-Content-Sha256", valid_598708
  var valid_598709 = header.getOrDefault("X-Amz-Algorithm")
  valid_598709 = validateParameter(valid_598709, JString, required = false,
                                 default = nil)
  if valid_598709 != nil:
    section.add "X-Amz-Algorithm", valid_598709
  var valid_598710 = header.getOrDefault("X-Amz-Signature")
  valid_598710 = validateParameter(valid_598710, JString, required = false,
                                 default = nil)
  if valid_598710 != nil:
    section.add "X-Amz-Signature", valid_598710
  var valid_598711 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598711 = validateParameter(valid_598711, JString, required = false,
                                 default = nil)
  if valid_598711 != nil:
    section.add "X-Amz-SignedHeaders", valid_598711
  var valid_598712 = header.getOrDefault("X-Amz-Credential")
  valid_598712 = validateParameter(valid_598712, JString, required = false,
                                 default = nil)
  if valid_598712 != nil:
    section.add "X-Amz-Credential", valid_598712
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598713: Call_GetUpdateSAMLProvider_598699; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_598713.validator(path, query, header, formData, body)
  let scheme = call_598713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598713.url(scheme.get, call_598713.host, call_598713.base,
                         call_598713.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598713, url, valid)

proc call*(call_598714: Call_GetUpdateSAMLProvider_598699;
          SAMLMetadataDocument: string; SAMLProviderArn: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_598715 = newJObject()
  add(query_598715, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_598715, "Action", newJString(Action))
  add(query_598715, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_598715, "Version", newJString(Version))
  result = call_598714.call(nil, query_598715, nil, nil, nil)

var getUpdateSAMLProvider* = Call_GetUpdateSAMLProvider_598699(
    name: "getUpdateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_GetUpdateSAMLProvider_598700, base: "/",
    url: url_GetUpdateSAMLProvider_598701, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSSHPublicKey_598752 = ref object of OpenApiRestCall_593437
proc url_PostUpdateSSHPublicKey_598754(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateSSHPublicKey_598753(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598755 = query.getOrDefault("Action")
  valid_598755 = validateParameter(valid_598755, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_598755 != nil:
    section.add "Action", valid_598755
  var valid_598756 = query.getOrDefault("Version")
  valid_598756 = validateParameter(valid_598756, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598756 != nil:
    section.add "Version", valid_598756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598757 = header.getOrDefault("X-Amz-Date")
  valid_598757 = validateParameter(valid_598757, JString, required = false,
                                 default = nil)
  if valid_598757 != nil:
    section.add "X-Amz-Date", valid_598757
  var valid_598758 = header.getOrDefault("X-Amz-Security-Token")
  valid_598758 = validateParameter(valid_598758, JString, required = false,
                                 default = nil)
  if valid_598758 != nil:
    section.add "X-Amz-Security-Token", valid_598758
  var valid_598759 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598759 = validateParameter(valid_598759, JString, required = false,
                                 default = nil)
  if valid_598759 != nil:
    section.add "X-Amz-Content-Sha256", valid_598759
  var valid_598760 = header.getOrDefault("X-Amz-Algorithm")
  valid_598760 = validateParameter(valid_598760, JString, required = false,
                                 default = nil)
  if valid_598760 != nil:
    section.add "X-Amz-Algorithm", valid_598760
  var valid_598761 = header.getOrDefault("X-Amz-Signature")
  valid_598761 = validateParameter(valid_598761, JString, required = false,
                                 default = nil)
  if valid_598761 != nil:
    section.add "X-Amz-Signature", valid_598761
  var valid_598762 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598762 = validateParameter(valid_598762, JString, required = false,
                                 default = nil)
  if valid_598762 != nil:
    section.add "X-Amz-SignedHeaders", valid_598762
  var valid_598763 = header.getOrDefault("X-Amz-Credential")
  valid_598763 = validateParameter(valid_598763, JString, required = false,
                                 default = nil)
  if valid_598763 != nil:
    section.add "X-Amz-Credential", valid_598763
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_598764 = formData.getOrDefault("UserName")
  valid_598764 = validateParameter(valid_598764, JString, required = true,
                                 default = nil)
  if valid_598764 != nil:
    section.add "UserName", valid_598764
  var valid_598765 = formData.getOrDefault("SSHPublicKeyId")
  valid_598765 = validateParameter(valid_598765, JString, required = true,
                                 default = nil)
  if valid_598765 != nil:
    section.add "SSHPublicKeyId", valid_598765
  var valid_598766 = formData.getOrDefault("Status")
  valid_598766 = validateParameter(valid_598766, JString, required = true,
                                 default = newJString("Active"))
  if valid_598766 != nil:
    section.add "Status", valid_598766
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598767: Call_PostUpdateSSHPublicKey_598752; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_598767.validator(path, query, header, formData, body)
  let scheme = call_598767.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598767.url(scheme.get, call_598767.host, call_598767.base,
                         call_598767.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598767, url, valid)

proc call*(call_598768: Call_PostUpdateSSHPublicKey_598752; UserName: string;
          SSHPublicKeyId: string; Status: string = "Active";
          Action: string = "UpdateSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598769 = newJObject()
  var formData_598770 = newJObject()
  add(formData_598770, "UserName", newJString(UserName))
  add(formData_598770, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_598770, "Status", newJString(Status))
  add(query_598769, "Action", newJString(Action))
  add(query_598769, "Version", newJString(Version))
  result = call_598768.call(nil, query_598769, nil, formData_598770, nil)

var postUpdateSSHPublicKey* = Call_PostUpdateSSHPublicKey_598752(
    name: "postUpdateSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_PostUpdateSSHPublicKey_598753, base: "/",
    url: url_PostUpdateSSHPublicKey_598754, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSSHPublicKey_598734 = ref object of OpenApiRestCall_593437
proc url_GetUpdateSSHPublicKey_598736(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateSSHPublicKey_598735(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_598737 = query.getOrDefault("Status")
  valid_598737 = validateParameter(valid_598737, JString, required = true,
                                 default = newJString("Active"))
  if valid_598737 != nil:
    section.add "Status", valid_598737
  var valid_598738 = query.getOrDefault("SSHPublicKeyId")
  valid_598738 = validateParameter(valid_598738, JString, required = true,
                                 default = nil)
  if valid_598738 != nil:
    section.add "SSHPublicKeyId", valid_598738
  var valid_598739 = query.getOrDefault("UserName")
  valid_598739 = validateParameter(valid_598739, JString, required = true,
                                 default = nil)
  if valid_598739 != nil:
    section.add "UserName", valid_598739
  var valid_598740 = query.getOrDefault("Action")
  valid_598740 = validateParameter(valid_598740, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_598740 != nil:
    section.add "Action", valid_598740
  var valid_598741 = query.getOrDefault("Version")
  valid_598741 = validateParameter(valid_598741, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598741 != nil:
    section.add "Version", valid_598741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598742 = header.getOrDefault("X-Amz-Date")
  valid_598742 = validateParameter(valid_598742, JString, required = false,
                                 default = nil)
  if valid_598742 != nil:
    section.add "X-Amz-Date", valid_598742
  var valid_598743 = header.getOrDefault("X-Amz-Security-Token")
  valid_598743 = validateParameter(valid_598743, JString, required = false,
                                 default = nil)
  if valid_598743 != nil:
    section.add "X-Amz-Security-Token", valid_598743
  var valid_598744 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598744 = validateParameter(valid_598744, JString, required = false,
                                 default = nil)
  if valid_598744 != nil:
    section.add "X-Amz-Content-Sha256", valid_598744
  var valid_598745 = header.getOrDefault("X-Amz-Algorithm")
  valid_598745 = validateParameter(valid_598745, JString, required = false,
                                 default = nil)
  if valid_598745 != nil:
    section.add "X-Amz-Algorithm", valid_598745
  var valid_598746 = header.getOrDefault("X-Amz-Signature")
  valid_598746 = validateParameter(valid_598746, JString, required = false,
                                 default = nil)
  if valid_598746 != nil:
    section.add "X-Amz-Signature", valid_598746
  var valid_598747 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598747 = validateParameter(valid_598747, JString, required = false,
                                 default = nil)
  if valid_598747 != nil:
    section.add "X-Amz-SignedHeaders", valid_598747
  var valid_598748 = header.getOrDefault("X-Amz-Credential")
  valid_598748 = validateParameter(valid_598748, JString, required = false,
                                 default = nil)
  if valid_598748 != nil:
    section.add "X-Amz-Credential", valid_598748
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598749: Call_GetUpdateSSHPublicKey_598734; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_598749.validator(path, query, header, formData, body)
  let scheme = call_598749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598749.url(scheme.get, call_598749.host, call_598749.base,
                         call_598749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598749, url, valid)

proc call*(call_598750: Call_GetUpdateSSHPublicKey_598734; SSHPublicKeyId: string;
          UserName: string; Status: string = "Active";
          Action: string = "UpdateSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598751 = newJObject()
  add(query_598751, "Status", newJString(Status))
  add(query_598751, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_598751, "UserName", newJString(UserName))
  add(query_598751, "Action", newJString(Action))
  add(query_598751, "Version", newJString(Version))
  result = call_598750.call(nil, query_598751, nil, nil, nil)

var getUpdateSSHPublicKey* = Call_GetUpdateSSHPublicKey_598734(
    name: "getUpdateSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_GetUpdateSSHPublicKey_598735, base: "/",
    url: url_GetUpdateSSHPublicKey_598736, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServerCertificate_598789 = ref object of OpenApiRestCall_593437
proc url_PostUpdateServerCertificate_598791(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateServerCertificate_598790(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598792 = query.getOrDefault("Action")
  valid_598792 = validateParameter(valid_598792, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_598792 != nil:
    section.add "Action", valid_598792
  var valid_598793 = query.getOrDefault("Version")
  valid_598793 = validateParameter(valid_598793, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598793 != nil:
    section.add "Version", valid_598793
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598794 = header.getOrDefault("X-Amz-Date")
  valid_598794 = validateParameter(valid_598794, JString, required = false,
                                 default = nil)
  if valid_598794 != nil:
    section.add "X-Amz-Date", valid_598794
  var valid_598795 = header.getOrDefault("X-Amz-Security-Token")
  valid_598795 = validateParameter(valid_598795, JString, required = false,
                                 default = nil)
  if valid_598795 != nil:
    section.add "X-Amz-Security-Token", valid_598795
  var valid_598796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598796 = validateParameter(valid_598796, JString, required = false,
                                 default = nil)
  if valid_598796 != nil:
    section.add "X-Amz-Content-Sha256", valid_598796
  var valid_598797 = header.getOrDefault("X-Amz-Algorithm")
  valid_598797 = validateParameter(valid_598797, JString, required = false,
                                 default = nil)
  if valid_598797 != nil:
    section.add "X-Amz-Algorithm", valid_598797
  var valid_598798 = header.getOrDefault("X-Amz-Signature")
  valid_598798 = validateParameter(valid_598798, JString, required = false,
                                 default = nil)
  if valid_598798 != nil:
    section.add "X-Amz-Signature", valid_598798
  var valid_598799 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598799 = validateParameter(valid_598799, JString, required = false,
                                 default = nil)
  if valid_598799 != nil:
    section.add "X-Amz-SignedHeaders", valid_598799
  var valid_598800 = header.getOrDefault("X-Amz-Credential")
  valid_598800 = validateParameter(valid_598800, JString, required = false,
                                 default = nil)
  if valid_598800 != nil:
    section.add "X-Amz-Credential", valid_598800
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_598801 = formData.getOrDefault("ServerCertificateName")
  valid_598801 = validateParameter(valid_598801, JString, required = true,
                                 default = nil)
  if valid_598801 != nil:
    section.add "ServerCertificateName", valid_598801
  var valid_598802 = formData.getOrDefault("NewServerCertificateName")
  valid_598802 = validateParameter(valid_598802, JString, required = false,
                                 default = nil)
  if valid_598802 != nil:
    section.add "NewServerCertificateName", valid_598802
  var valid_598803 = formData.getOrDefault("NewPath")
  valid_598803 = validateParameter(valid_598803, JString, required = false,
                                 default = nil)
  if valid_598803 != nil:
    section.add "NewPath", valid_598803
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598804: Call_PostUpdateServerCertificate_598789; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_598804.validator(path, query, header, formData, body)
  let scheme = call_598804.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598804.url(scheme.get, call_598804.host, call_598804.base,
                         call_598804.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598804, url, valid)

proc call*(call_598805: Call_PostUpdateServerCertificate_598789;
          ServerCertificateName: string;
          Action: string = "UpdateServerCertificate";
          NewServerCertificateName: string = ""; Version: string = "2010-05-08";
          NewPath: string = ""): Recallable =
  ## postUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_598806 = newJObject()
  var formData_598807 = newJObject()
  add(formData_598807, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_598806, "Action", newJString(Action))
  add(formData_598807, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  add(query_598806, "Version", newJString(Version))
  add(formData_598807, "NewPath", newJString(NewPath))
  result = call_598805.call(nil, query_598806, nil, formData_598807, nil)

var postUpdateServerCertificate* = Call_PostUpdateServerCertificate_598789(
    name: "postUpdateServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_PostUpdateServerCertificate_598790, base: "/",
    url: url_PostUpdateServerCertificate_598791,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServerCertificate_598771 = ref object of OpenApiRestCall_593437
proc url_GetUpdateServerCertificate_598773(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateServerCertificate_598772(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_598774 = query.getOrDefault("ServerCertificateName")
  valid_598774 = validateParameter(valid_598774, JString, required = true,
                                 default = nil)
  if valid_598774 != nil:
    section.add "ServerCertificateName", valid_598774
  var valid_598775 = query.getOrDefault("Action")
  valid_598775 = validateParameter(valid_598775, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_598775 != nil:
    section.add "Action", valid_598775
  var valid_598776 = query.getOrDefault("NewServerCertificateName")
  valid_598776 = validateParameter(valid_598776, JString, required = false,
                                 default = nil)
  if valid_598776 != nil:
    section.add "NewServerCertificateName", valid_598776
  var valid_598777 = query.getOrDefault("NewPath")
  valid_598777 = validateParameter(valid_598777, JString, required = false,
                                 default = nil)
  if valid_598777 != nil:
    section.add "NewPath", valid_598777
  var valid_598778 = query.getOrDefault("Version")
  valid_598778 = validateParameter(valid_598778, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598778 != nil:
    section.add "Version", valid_598778
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598779 = header.getOrDefault("X-Amz-Date")
  valid_598779 = validateParameter(valid_598779, JString, required = false,
                                 default = nil)
  if valid_598779 != nil:
    section.add "X-Amz-Date", valid_598779
  var valid_598780 = header.getOrDefault("X-Amz-Security-Token")
  valid_598780 = validateParameter(valid_598780, JString, required = false,
                                 default = nil)
  if valid_598780 != nil:
    section.add "X-Amz-Security-Token", valid_598780
  var valid_598781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598781 = validateParameter(valid_598781, JString, required = false,
                                 default = nil)
  if valid_598781 != nil:
    section.add "X-Amz-Content-Sha256", valid_598781
  var valid_598782 = header.getOrDefault("X-Amz-Algorithm")
  valid_598782 = validateParameter(valid_598782, JString, required = false,
                                 default = nil)
  if valid_598782 != nil:
    section.add "X-Amz-Algorithm", valid_598782
  var valid_598783 = header.getOrDefault("X-Amz-Signature")
  valid_598783 = validateParameter(valid_598783, JString, required = false,
                                 default = nil)
  if valid_598783 != nil:
    section.add "X-Amz-Signature", valid_598783
  var valid_598784 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598784 = validateParameter(valid_598784, JString, required = false,
                                 default = nil)
  if valid_598784 != nil:
    section.add "X-Amz-SignedHeaders", valid_598784
  var valid_598785 = header.getOrDefault("X-Amz-Credential")
  valid_598785 = validateParameter(valid_598785, JString, required = false,
                                 default = nil)
  if valid_598785 != nil:
    section.add "X-Amz-Credential", valid_598785
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598786: Call_GetUpdateServerCertificate_598771; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_598786.validator(path, query, header, formData, body)
  let scheme = call_598786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598786.url(scheme.get, call_598786.host, call_598786.base,
                         call_598786.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598786, url, valid)

proc call*(call_598787: Call_GetUpdateServerCertificate_598771;
          ServerCertificateName: string;
          Action: string = "UpdateServerCertificate";
          NewServerCertificateName: string = ""; NewPath: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_598788 = newJObject()
  add(query_598788, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_598788, "Action", newJString(Action))
  add(query_598788, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  add(query_598788, "NewPath", newJString(NewPath))
  add(query_598788, "Version", newJString(Version))
  result = call_598787.call(nil, query_598788, nil, nil, nil)

var getUpdateServerCertificate* = Call_GetUpdateServerCertificate_598771(
    name: "getUpdateServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_GetUpdateServerCertificate_598772, base: "/",
    url: url_GetUpdateServerCertificate_598773,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServiceSpecificCredential_598826 = ref object of OpenApiRestCall_593437
proc url_PostUpdateServiceSpecificCredential_598828(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateServiceSpecificCredential_598827(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598829 = query.getOrDefault("Action")
  valid_598829 = validateParameter(valid_598829, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_598829 != nil:
    section.add "Action", valid_598829
  var valid_598830 = query.getOrDefault("Version")
  valid_598830 = validateParameter(valid_598830, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598830 != nil:
    section.add "Version", valid_598830
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598831 = header.getOrDefault("X-Amz-Date")
  valid_598831 = validateParameter(valid_598831, JString, required = false,
                                 default = nil)
  if valid_598831 != nil:
    section.add "X-Amz-Date", valid_598831
  var valid_598832 = header.getOrDefault("X-Amz-Security-Token")
  valid_598832 = validateParameter(valid_598832, JString, required = false,
                                 default = nil)
  if valid_598832 != nil:
    section.add "X-Amz-Security-Token", valid_598832
  var valid_598833 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598833 = validateParameter(valid_598833, JString, required = false,
                                 default = nil)
  if valid_598833 != nil:
    section.add "X-Amz-Content-Sha256", valid_598833
  var valid_598834 = header.getOrDefault("X-Amz-Algorithm")
  valid_598834 = validateParameter(valid_598834, JString, required = false,
                                 default = nil)
  if valid_598834 != nil:
    section.add "X-Amz-Algorithm", valid_598834
  var valid_598835 = header.getOrDefault("X-Amz-Signature")
  valid_598835 = validateParameter(valid_598835, JString, required = false,
                                 default = nil)
  if valid_598835 != nil:
    section.add "X-Amz-Signature", valid_598835
  var valid_598836 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598836 = validateParameter(valid_598836, JString, required = false,
                                 default = nil)
  if valid_598836 != nil:
    section.add "X-Amz-SignedHeaders", valid_598836
  var valid_598837 = header.getOrDefault("X-Amz-Credential")
  valid_598837 = validateParameter(valid_598837, JString, required = false,
                                 default = nil)
  if valid_598837 != nil:
    section.add "X-Amz-Credential", valid_598837
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  section = newJObject()
  var valid_598838 = formData.getOrDefault("UserName")
  valid_598838 = validateParameter(valid_598838, JString, required = false,
                                 default = nil)
  if valid_598838 != nil:
    section.add "UserName", valid_598838
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_598839 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_598839 = validateParameter(valid_598839, JString, required = true,
                                 default = nil)
  if valid_598839 != nil:
    section.add "ServiceSpecificCredentialId", valid_598839
  var valid_598840 = formData.getOrDefault("Status")
  valid_598840 = validateParameter(valid_598840, JString, required = true,
                                 default = newJString("Active"))
  if valid_598840 != nil:
    section.add "Status", valid_598840
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598841: Call_PostUpdateServiceSpecificCredential_598826;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_598841.validator(path, query, header, formData, body)
  let scheme = call_598841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598841.url(scheme.get, call_598841.host, call_598841.base,
                         call_598841.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598841, url, valid)

proc call*(call_598842: Call_PostUpdateServiceSpecificCredential_598826;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Status: string = "Active";
          Action: string = "UpdateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598843 = newJObject()
  var formData_598844 = newJObject()
  add(formData_598844, "UserName", newJString(UserName))
  add(formData_598844, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_598844, "Status", newJString(Status))
  add(query_598843, "Action", newJString(Action))
  add(query_598843, "Version", newJString(Version))
  result = call_598842.call(nil, query_598843, nil, formData_598844, nil)

var postUpdateServiceSpecificCredential* = Call_PostUpdateServiceSpecificCredential_598826(
    name: "postUpdateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_PostUpdateServiceSpecificCredential_598827, base: "/",
    url: url_PostUpdateServiceSpecificCredential_598828,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServiceSpecificCredential_598808 = ref object of OpenApiRestCall_593437
proc url_GetUpdateServiceSpecificCredential_598810(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateServiceSpecificCredential_598809(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_598811 = query.getOrDefault("Status")
  valid_598811 = validateParameter(valid_598811, JString, required = true,
                                 default = newJString("Active"))
  if valid_598811 != nil:
    section.add "Status", valid_598811
  var valid_598812 = query.getOrDefault("UserName")
  valid_598812 = validateParameter(valid_598812, JString, required = false,
                                 default = nil)
  if valid_598812 != nil:
    section.add "UserName", valid_598812
  var valid_598813 = query.getOrDefault("Action")
  valid_598813 = validateParameter(valid_598813, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_598813 != nil:
    section.add "Action", valid_598813
  var valid_598814 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_598814 = validateParameter(valid_598814, JString, required = true,
                                 default = nil)
  if valid_598814 != nil:
    section.add "ServiceSpecificCredentialId", valid_598814
  var valid_598815 = query.getOrDefault("Version")
  valid_598815 = validateParameter(valid_598815, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598815 != nil:
    section.add "Version", valid_598815
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598816 = header.getOrDefault("X-Amz-Date")
  valid_598816 = validateParameter(valid_598816, JString, required = false,
                                 default = nil)
  if valid_598816 != nil:
    section.add "X-Amz-Date", valid_598816
  var valid_598817 = header.getOrDefault("X-Amz-Security-Token")
  valid_598817 = validateParameter(valid_598817, JString, required = false,
                                 default = nil)
  if valid_598817 != nil:
    section.add "X-Amz-Security-Token", valid_598817
  var valid_598818 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598818 = validateParameter(valid_598818, JString, required = false,
                                 default = nil)
  if valid_598818 != nil:
    section.add "X-Amz-Content-Sha256", valid_598818
  var valid_598819 = header.getOrDefault("X-Amz-Algorithm")
  valid_598819 = validateParameter(valid_598819, JString, required = false,
                                 default = nil)
  if valid_598819 != nil:
    section.add "X-Amz-Algorithm", valid_598819
  var valid_598820 = header.getOrDefault("X-Amz-Signature")
  valid_598820 = validateParameter(valid_598820, JString, required = false,
                                 default = nil)
  if valid_598820 != nil:
    section.add "X-Amz-Signature", valid_598820
  var valid_598821 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598821 = validateParameter(valid_598821, JString, required = false,
                                 default = nil)
  if valid_598821 != nil:
    section.add "X-Amz-SignedHeaders", valid_598821
  var valid_598822 = header.getOrDefault("X-Amz-Credential")
  valid_598822 = validateParameter(valid_598822, JString, required = false,
                                 default = nil)
  if valid_598822 != nil:
    section.add "X-Amz-Credential", valid_598822
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598823: Call_GetUpdateServiceSpecificCredential_598808;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_598823.validator(path, query, header, formData, body)
  let scheme = call_598823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598823.url(scheme.get, call_598823.host, call_598823.base,
                         call_598823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598823, url, valid)

proc call*(call_598824: Call_GetUpdateServiceSpecificCredential_598808;
          ServiceSpecificCredentialId: string; Status: string = "Active";
          UserName: string = ""; Action: string = "UpdateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_598825 = newJObject()
  add(query_598825, "Status", newJString(Status))
  add(query_598825, "UserName", newJString(UserName))
  add(query_598825, "Action", newJString(Action))
  add(query_598825, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_598825, "Version", newJString(Version))
  result = call_598824.call(nil, query_598825, nil, nil, nil)

var getUpdateServiceSpecificCredential* = Call_GetUpdateServiceSpecificCredential_598808(
    name: "getUpdateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_GetUpdateServiceSpecificCredential_598809, base: "/",
    url: url_GetUpdateServiceSpecificCredential_598810,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSigningCertificate_598863 = ref object of OpenApiRestCall_593437
proc url_PostUpdateSigningCertificate_598865(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateSigningCertificate_598864(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598866 = query.getOrDefault("Action")
  valid_598866 = validateParameter(valid_598866, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_598866 != nil:
    section.add "Action", valid_598866
  var valid_598867 = query.getOrDefault("Version")
  valid_598867 = validateParameter(valid_598867, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598867 != nil:
    section.add "Version", valid_598867
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598868 = header.getOrDefault("X-Amz-Date")
  valid_598868 = validateParameter(valid_598868, JString, required = false,
                                 default = nil)
  if valid_598868 != nil:
    section.add "X-Amz-Date", valid_598868
  var valid_598869 = header.getOrDefault("X-Amz-Security-Token")
  valid_598869 = validateParameter(valid_598869, JString, required = false,
                                 default = nil)
  if valid_598869 != nil:
    section.add "X-Amz-Security-Token", valid_598869
  var valid_598870 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598870 = validateParameter(valid_598870, JString, required = false,
                                 default = nil)
  if valid_598870 != nil:
    section.add "X-Amz-Content-Sha256", valid_598870
  var valid_598871 = header.getOrDefault("X-Amz-Algorithm")
  valid_598871 = validateParameter(valid_598871, JString, required = false,
                                 default = nil)
  if valid_598871 != nil:
    section.add "X-Amz-Algorithm", valid_598871
  var valid_598872 = header.getOrDefault("X-Amz-Signature")
  valid_598872 = validateParameter(valid_598872, JString, required = false,
                                 default = nil)
  if valid_598872 != nil:
    section.add "X-Amz-Signature", valid_598872
  var valid_598873 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598873 = validateParameter(valid_598873, JString, required = false,
                                 default = nil)
  if valid_598873 != nil:
    section.add "X-Amz-SignedHeaders", valid_598873
  var valid_598874 = header.getOrDefault("X-Amz-Credential")
  valid_598874 = validateParameter(valid_598874, JString, required = false,
                                 default = nil)
  if valid_598874 != nil:
    section.add "X-Amz-Credential", valid_598874
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_598875 = formData.getOrDefault("UserName")
  valid_598875 = validateParameter(valid_598875, JString, required = false,
                                 default = nil)
  if valid_598875 != nil:
    section.add "UserName", valid_598875
  assert formData != nil,
        "formData argument is necessary due to required `Status` field"
  var valid_598876 = formData.getOrDefault("Status")
  valid_598876 = validateParameter(valid_598876, JString, required = true,
                                 default = newJString("Active"))
  if valid_598876 != nil:
    section.add "Status", valid_598876
  var valid_598877 = formData.getOrDefault("CertificateId")
  valid_598877 = validateParameter(valid_598877, JString, required = true,
                                 default = nil)
  if valid_598877 != nil:
    section.add "CertificateId", valid_598877
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598878: Call_PostUpdateSigningCertificate_598863; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_598878.validator(path, query, header, formData, body)
  let scheme = call_598878.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598878.url(scheme.get, call_598878.host, call_598878.base,
                         call_598878.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598878, url, valid)

proc call*(call_598879: Call_PostUpdateSigningCertificate_598863;
          CertificateId: string; UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598880 = newJObject()
  var formData_598881 = newJObject()
  add(formData_598881, "UserName", newJString(UserName))
  add(formData_598881, "Status", newJString(Status))
  add(formData_598881, "CertificateId", newJString(CertificateId))
  add(query_598880, "Action", newJString(Action))
  add(query_598880, "Version", newJString(Version))
  result = call_598879.call(nil, query_598880, nil, formData_598881, nil)

var postUpdateSigningCertificate* = Call_PostUpdateSigningCertificate_598863(
    name: "postUpdateSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_PostUpdateSigningCertificate_598864, base: "/",
    url: url_PostUpdateSigningCertificate_598865,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSigningCertificate_598845 = ref object of OpenApiRestCall_593437
proc url_GetUpdateSigningCertificate_598847(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateSigningCertificate_598846(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_598848 = query.getOrDefault("Status")
  valid_598848 = validateParameter(valid_598848, JString, required = true,
                                 default = newJString("Active"))
  if valid_598848 != nil:
    section.add "Status", valid_598848
  var valid_598849 = query.getOrDefault("CertificateId")
  valid_598849 = validateParameter(valid_598849, JString, required = true,
                                 default = nil)
  if valid_598849 != nil:
    section.add "CertificateId", valid_598849
  var valid_598850 = query.getOrDefault("UserName")
  valid_598850 = validateParameter(valid_598850, JString, required = false,
                                 default = nil)
  if valid_598850 != nil:
    section.add "UserName", valid_598850
  var valid_598851 = query.getOrDefault("Action")
  valid_598851 = validateParameter(valid_598851, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_598851 != nil:
    section.add "Action", valid_598851
  var valid_598852 = query.getOrDefault("Version")
  valid_598852 = validateParameter(valid_598852, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598852 != nil:
    section.add "Version", valid_598852
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598853 = header.getOrDefault("X-Amz-Date")
  valid_598853 = validateParameter(valid_598853, JString, required = false,
                                 default = nil)
  if valid_598853 != nil:
    section.add "X-Amz-Date", valid_598853
  var valid_598854 = header.getOrDefault("X-Amz-Security-Token")
  valid_598854 = validateParameter(valid_598854, JString, required = false,
                                 default = nil)
  if valid_598854 != nil:
    section.add "X-Amz-Security-Token", valid_598854
  var valid_598855 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598855 = validateParameter(valid_598855, JString, required = false,
                                 default = nil)
  if valid_598855 != nil:
    section.add "X-Amz-Content-Sha256", valid_598855
  var valid_598856 = header.getOrDefault("X-Amz-Algorithm")
  valid_598856 = validateParameter(valid_598856, JString, required = false,
                                 default = nil)
  if valid_598856 != nil:
    section.add "X-Amz-Algorithm", valid_598856
  var valid_598857 = header.getOrDefault("X-Amz-Signature")
  valid_598857 = validateParameter(valid_598857, JString, required = false,
                                 default = nil)
  if valid_598857 != nil:
    section.add "X-Amz-Signature", valid_598857
  var valid_598858 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598858 = validateParameter(valid_598858, JString, required = false,
                                 default = nil)
  if valid_598858 != nil:
    section.add "X-Amz-SignedHeaders", valid_598858
  var valid_598859 = header.getOrDefault("X-Amz-Credential")
  valid_598859 = validateParameter(valid_598859, JString, required = false,
                                 default = nil)
  if valid_598859 != nil:
    section.add "X-Amz-Credential", valid_598859
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598860: Call_GetUpdateSigningCertificate_598845; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_598860.validator(path, query, header, formData, body)
  let scheme = call_598860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598860.url(scheme.get, call_598860.host, call_598860.base,
                         call_598860.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598860, url, valid)

proc call*(call_598861: Call_GetUpdateSigningCertificate_598845;
          CertificateId: string; Status: string = "Active"; UserName: string = "";
          Action: string = "UpdateSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598862 = newJObject()
  add(query_598862, "Status", newJString(Status))
  add(query_598862, "CertificateId", newJString(CertificateId))
  add(query_598862, "UserName", newJString(UserName))
  add(query_598862, "Action", newJString(Action))
  add(query_598862, "Version", newJString(Version))
  result = call_598861.call(nil, query_598862, nil, nil, nil)

var getUpdateSigningCertificate* = Call_GetUpdateSigningCertificate_598845(
    name: "getUpdateSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_GetUpdateSigningCertificate_598846, base: "/",
    url: url_GetUpdateSigningCertificate_598847,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateUser_598900 = ref object of OpenApiRestCall_593437
proc url_PostUpdateUser_598902(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUpdateUser_598901(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598903 = query.getOrDefault("Action")
  valid_598903 = validateParameter(valid_598903, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_598903 != nil:
    section.add "Action", valid_598903
  var valid_598904 = query.getOrDefault("Version")
  valid_598904 = validateParameter(valid_598904, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598904 != nil:
    section.add "Version", valid_598904
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598905 = header.getOrDefault("X-Amz-Date")
  valid_598905 = validateParameter(valid_598905, JString, required = false,
                                 default = nil)
  if valid_598905 != nil:
    section.add "X-Amz-Date", valid_598905
  var valid_598906 = header.getOrDefault("X-Amz-Security-Token")
  valid_598906 = validateParameter(valid_598906, JString, required = false,
                                 default = nil)
  if valid_598906 != nil:
    section.add "X-Amz-Security-Token", valid_598906
  var valid_598907 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598907 = validateParameter(valid_598907, JString, required = false,
                                 default = nil)
  if valid_598907 != nil:
    section.add "X-Amz-Content-Sha256", valid_598907
  var valid_598908 = header.getOrDefault("X-Amz-Algorithm")
  valid_598908 = validateParameter(valid_598908, JString, required = false,
                                 default = nil)
  if valid_598908 != nil:
    section.add "X-Amz-Algorithm", valid_598908
  var valid_598909 = header.getOrDefault("X-Amz-Signature")
  valid_598909 = validateParameter(valid_598909, JString, required = false,
                                 default = nil)
  if valid_598909 != nil:
    section.add "X-Amz-Signature", valid_598909
  var valid_598910 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598910 = validateParameter(valid_598910, JString, required = false,
                                 default = nil)
  if valid_598910 != nil:
    section.add "X-Amz-SignedHeaders", valid_598910
  var valid_598911 = header.getOrDefault("X-Amz-Credential")
  valid_598911 = validateParameter(valid_598911, JString, required = false,
                                 default = nil)
  if valid_598911 != nil:
    section.add "X-Amz-Credential", valid_598911
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_598912 = formData.getOrDefault("UserName")
  valid_598912 = validateParameter(valid_598912, JString, required = true,
                                 default = nil)
  if valid_598912 != nil:
    section.add "UserName", valid_598912
  var valid_598913 = formData.getOrDefault("NewUserName")
  valid_598913 = validateParameter(valid_598913, JString, required = false,
                                 default = nil)
  if valid_598913 != nil:
    section.add "NewUserName", valid_598913
  var valid_598914 = formData.getOrDefault("NewPath")
  valid_598914 = validateParameter(valid_598914, JString, required = false,
                                 default = nil)
  if valid_598914 != nil:
    section.add "NewPath", valid_598914
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598915: Call_PostUpdateUser_598900; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_598915.validator(path, query, header, formData, body)
  let scheme = call_598915.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598915.url(scheme.get, call_598915.host, call_598915.base,
                         call_598915.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598915, url, valid)

proc call*(call_598916: Call_PostUpdateUser_598900; UserName: string;
          NewUserName: string = ""; Action: string = "UpdateUser";
          Version: string = "2010-05-08"; NewPath: string = ""): Recallable =
  ## postUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_598917 = newJObject()
  var formData_598918 = newJObject()
  add(formData_598918, "UserName", newJString(UserName))
  add(formData_598918, "NewUserName", newJString(NewUserName))
  add(query_598917, "Action", newJString(Action))
  add(query_598917, "Version", newJString(Version))
  add(formData_598918, "NewPath", newJString(NewPath))
  result = call_598916.call(nil, query_598917, nil, formData_598918, nil)

var postUpdateUser* = Call_PostUpdateUser_598900(name: "postUpdateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_PostUpdateUser_598901,
    base: "/", url: url_PostUpdateUser_598902, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateUser_598882 = ref object of OpenApiRestCall_593437
proc url_GetUpdateUser_598884(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUpdateUser_598883(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_598885 = query.getOrDefault("UserName")
  valid_598885 = validateParameter(valid_598885, JString, required = true,
                                 default = nil)
  if valid_598885 != nil:
    section.add "UserName", valid_598885
  var valid_598886 = query.getOrDefault("Action")
  valid_598886 = validateParameter(valid_598886, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_598886 != nil:
    section.add "Action", valid_598886
  var valid_598887 = query.getOrDefault("NewUserName")
  valid_598887 = validateParameter(valid_598887, JString, required = false,
                                 default = nil)
  if valid_598887 != nil:
    section.add "NewUserName", valid_598887
  var valid_598888 = query.getOrDefault("NewPath")
  valid_598888 = validateParameter(valid_598888, JString, required = false,
                                 default = nil)
  if valid_598888 != nil:
    section.add "NewPath", valid_598888
  var valid_598889 = query.getOrDefault("Version")
  valid_598889 = validateParameter(valid_598889, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598889 != nil:
    section.add "Version", valid_598889
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598890 = header.getOrDefault("X-Amz-Date")
  valid_598890 = validateParameter(valid_598890, JString, required = false,
                                 default = nil)
  if valid_598890 != nil:
    section.add "X-Amz-Date", valid_598890
  var valid_598891 = header.getOrDefault("X-Amz-Security-Token")
  valid_598891 = validateParameter(valid_598891, JString, required = false,
                                 default = nil)
  if valid_598891 != nil:
    section.add "X-Amz-Security-Token", valid_598891
  var valid_598892 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598892 = validateParameter(valid_598892, JString, required = false,
                                 default = nil)
  if valid_598892 != nil:
    section.add "X-Amz-Content-Sha256", valid_598892
  var valid_598893 = header.getOrDefault("X-Amz-Algorithm")
  valid_598893 = validateParameter(valid_598893, JString, required = false,
                                 default = nil)
  if valid_598893 != nil:
    section.add "X-Amz-Algorithm", valid_598893
  var valid_598894 = header.getOrDefault("X-Amz-Signature")
  valid_598894 = validateParameter(valid_598894, JString, required = false,
                                 default = nil)
  if valid_598894 != nil:
    section.add "X-Amz-Signature", valid_598894
  var valid_598895 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598895 = validateParameter(valid_598895, JString, required = false,
                                 default = nil)
  if valid_598895 != nil:
    section.add "X-Amz-SignedHeaders", valid_598895
  var valid_598896 = header.getOrDefault("X-Amz-Credential")
  valid_598896 = validateParameter(valid_598896, JString, required = false,
                                 default = nil)
  if valid_598896 != nil:
    section.add "X-Amz-Credential", valid_598896
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598897: Call_GetUpdateUser_598882; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_598897.validator(path, query, header, formData, body)
  let scheme = call_598897.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598897.url(scheme.get, call_598897.host, call_598897.base,
                         call_598897.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598897, url, valid)

proc call*(call_598898: Call_GetUpdateUser_598882; UserName: string;
          Action: string = "UpdateUser"; NewUserName: string = ""; NewPath: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_598899 = newJObject()
  add(query_598899, "UserName", newJString(UserName))
  add(query_598899, "Action", newJString(Action))
  add(query_598899, "NewUserName", newJString(NewUserName))
  add(query_598899, "NewPath", newJString(NewPath))
  add(query_598899, "Version", newJString(Version))
  result = call_598898.call(nil, query_598899, nil, nil, nil)

var getUpdateUser* = Call_GetUpdateUser_598882(name: "getUpdateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_GetUpdateUser_598883,
    base: "/", url: url_GetUpdateUser_598884, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSSHPublicKey_598936 = ref object of OpenApiRestCall_593437
proc url_PostUploadSSHPublicKey_598938(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUploadSSHPublicKey_598937(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598939 = query.getOrDefault("Action")
  valid_598939 = validateParameter(valid_598939, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_598939 != nil:
    section.add "Action", valid_598939
  var valid_598940 = query.getOrDefault("Version")
  valid_598940 = validateParameter(valid_598940, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598940 != nil:
    section.add "Version", valid_598940
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598941 = header.getOrDefault("X-Amz-Date")
  valid_598941 = validateParameter(valid_598941, JString, required = false,
                                 default = nil)
  if valid_598941 != nil:
    section.add "X-Amz-Date", valid_598941
  var valid_598942 = header.getOrDefault("X-Amz-Security-Token")
  valid_598942 = validateParameter(valid_598942, JString, required = false,
                                 default = nil)
  if valid_598942 != nil:
    section.add "X-Amz-Security-Token", valid_598942
  var valid_598943 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598943 = validateParameter(valid_598943, JString, required = false,
                                 default = nil)
  if valid_598943 != nil:
    section.add "X-Amz-Content-Sha256", valid_598943
  var valid_598944 = header.getOrDefault("X-Amz-Algorithm")
  valid_598944 = validateParameter(valid_598944, JString, required = false,
                                 default = nil)
  if valid_598944 != nil:
    section.add "X-Amz-Algorithm", valid_598944
  var valid_598945 = header.getOrDefault("X-Amz-Signature")
  valid_598945 = validateParameter(valid_598945, JString, required = false,
                                 default = nil)
  if valid_598945 != nil:
    section.add "X-Amz-Signature", valid_598945
  var valid_598946 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598946 = validateParameter(valid_598946, JString, required = false,
                                 default = nil)
  if valid_598946 != nil:
    section.add "X-Amz-SignedHeaders", valid_598946
  var valid_598947 = header.getOrDefault("X-Amz-Credential")
  valid_598947 = validateParameter(valid_598947, JString, required = false,
                                 default = nil)
  if valid_598947 != nil:
    section.add "X-Amz-Credential", valid_598947
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_598948 = formData.getOrDefault("UserName")
  valid_598948 = validateParameter(valid_598948, JString, required = true,
                                 default = nil)
  if valid_598948 != nil:
    section.add "UserName", valid_598948
  var valid_598949 = formData.getOrDefault("SSHPublicKeyBody")
  valid_598949 = validateParameter(valid_598949, JString, required = true,
                                 default = nil)
  if valid_598949 != nil:
    section.add "SSHPublicKeyBody", valid_598949
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598950: Call_PostUploadSSHPublicKey_598936; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_598950.validator(path, query, header, formData, body)
  let scheme = call_598950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598950.url(scheme.get, call_598950.host, call_598950.base,
                         call_598950.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598950, url, valid)

proc call*(call_598951: Call_PostUploadSSHPublicKey_598936; UserName: string;
          SSHPublicKeyBody: string; Action: string = "UploadSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598952 = newJObject()
  var formData_598953 = newJObject()
  add(formData_598953, "UserName", newJString(UserName))
  add(formData_598953, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(query_598952, "Action", newJString(Action))
  add(query_598952, "Version", newJString(Version))
  result = call_598951.call(nil, query_598952, nil, formData_598953, nil)

var postUploadSSHPublicKey* = Call_PostUploadSSHPublicKey_598936(
    name: "postUploadSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_PostUploadSSHPublicKey_598937, base: "/",
    url: url_PostUploadSSHPublicKey_598938, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSSHPublicKey_598919 = ref object of OpenApiRestCall_593437
proc url_GetUploadSSHPublicKey_598921(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUploadSSHPublicKey_598920(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyBody` field"
  var valid_598922 = query.getOrDefault("SSHPublicKeyBody")
  valid_598922 = validateParameter(valid_598922, JString, required = true,
                                 default = nil)
  if valid_598922 != nil:
    section.add "SSHPublicKeyBody", valid_598922
  var valid_598923 = query.getOrDefault("UserName")
  valid_598923 = validateParameter(valid_598923, JString, required = true,
                                 default = nil)
  if valid_598923 != nil:
    section.add "UserName", valid_598923
  var valid_598924 = query.getOrDefault("Action")
  valid_598924 = validateParameter(valid_598924, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_598924 != nil:
    section.add "Action", valid_598924
  var valid_598925 = query.getOrDefault("Version")
  valid_598925 = validateParameter(valid_598925, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598925 != nil:
    section.add "Version", valid_598925
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598926 = header.getOrDefault("X-Amz-Date")
  valid_598926 = validateParameter(valid_598926, JString, required = false,
                                 default = nil)
  if valid_598926 != nil:
    section.add "X-Amz-Date", valid_598926
  var valid_598927 = header.getOrDefault("X-Amz-Security-Token")
  valid_598927 = validateParameter(valid_598927, JString, required = false,
                                 default = nil)
  if valid_598927 != nil:
    section.add "X-Amz-Security-Token", valid_598927
  var valid_598928 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598928 = validateParameter(valid_598928, JString, required = false,
                                 default = nil)
  if valid_598928 != nil:
    section.add "X-Amz-Content-Sha256", valid_598928
  var valid_598929 = header.getOrDefault("X-Amz-Algorithm")
  valid_598929 = validateParameter(valid_598929, JString, required = false,
                                 default = nil)
  if valid_598929 != nil:
    section.add "X-Amz-Algorithm", valid_598929
  var valid_598930 = header.getOrDefault("X-Amz-Signature")
  valid_598930 = validateParameter(valid_598930, JString, required = false,
                                 default = nil)
  if valid_598930 != nil:
    section.add "X-Amz-Signature", valid_598930
  var valid_598931 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598931 = validateParameter(valid_598931, JString, required = false,
                                 default = nil)
  if valid_598931 != nil:
    section.add "X-Amz-SignedHeaders", valid_598931
  var valid_598932 = header.getOrDefault("X-Amz-Credential")
  valid_598932 = validateParameter(valid_598932, JString, required = false,
                                 default = nil)
  if valid_598932 != nil:
    section.add "X-Amz-Credential", valid_598932
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598933: Call_GetUploadSSHPublicKey_598919; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_598933.validator(path, query, header, formData, body)
  let scheme = call_598933.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598933.url(scheme.get, call_598933.host, call_598933.base,
                         call_598933.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598933, url, valid)

proc call*(call_598934: Call_GetUploadSSHPublicKey_598919;
          SSHPublicKeyBody: string; UserName: string;
          Action: string = "UploadSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_598935 = newJObject()
  add(query_598935, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(query_598935, "UserName", newJString(UserName))
  add(query_598935, "Action", newJString(Action))
  add(query_598935, "Version", newJString(Version))
  result = call_598934.call(nil, query_598935, nil, nil, nil)

var getUploadSSHPublicKey* = Call_GetUploadSSHPublicKey_598919(
    name: "getUploadSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_GetUploadSSHPublicKey_598920, base: "/",
    url: url_GetUploadSSHPublicKey_598921, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadServerCertificate_598974 = ref object of OpenApiRestCall_593437
proc url_PostUploadServerCertificate_598976(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUploadServerCertificate_598975(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_598977 = query.getOrDefault("Action")
  valid_598977 = validateParameter(valid_598977, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_598977 != nil:
    section.add "Action", valid_598977
  var valid_598978 = query.getOrDefault("Version")
  valid_598978 = validateParameter(valid_598978, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598978 != nil:
    section.add "Version", valid_598978
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598979 = header.getOrDefault("X-Amz-Date")
  valid_598979 = validateParameter(valid_598979, JString, required = false,
                                 default = nil)
  if valid_598979 != nil:
    section.add "X-Amz-Date", valid_598979
  var valid_598980 = header.getOrDefault("X-Amz-Security-Token")
  valid_598980 = validateParameter(valid_598980, JString, required = false,
                                 default = nil)
  if valid_598980 != nil:
    section.add "X-Amz-Security-Token", valid_598980
  var valid_598981 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598981 = validateParameter(valid_598981, JString, required = false,
                                 default = nil)
  if valid_598981 != nil:
    section.add "X-Amz-Content-Sha256", valid_598981
  var valid_598982 = header.getOrDefault("X-Amz-Algorithm")
  valid_598982 = validateParameter(valid_598982, JString, required = false,
                                 default = nil)
  if valid_598982 != nil:
    section.add "X-Amz-Algorithm", valid_598982
  var valid_598983 = header.getOrDefault("X-Amz-Signature")
  valid_598983 = validateParameter(valid_598983, JString, required = false,
                                 default = nil)
  if valid_598983 != nil:
    section.add "X-Amz-Signature", valid_598983
  var valid_598984 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598984 = validateParameter(valid_598984, JString, required = false,
                                 default = nil)
  if valid_598984 != nil:
    section.add "X-Amz-SignedHeaders", valid_598984
  var valid_598985 = header.getOrDefault("X-Amz-Credential")
  valid_598985 = validateParameter(valid_598985, JString, required = false,
                                 default = nil)
  if valid_598985 != nil:
    section.add "X-Amz-Credential", valid_598985
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_598986 = formData.getOrDefault("CertificateBody")
  valid_598986 = validateParameter(valid_598986, JString, required = true,
                                 default = nil)
  if valid_598986 != nil:
    section.add "CertificateBody", valid_598986
  var valid_598987 = formData.getOrDefault("ServerCertificateName")
  valid_598987 = validateParameter(valid_598987, JString, required = true,
                                 default = nil)
  if valid_598987 != nil:
    section.add "ServerCertificateName", valid_598987
  var valid_598988 = formData.getOrDefault("PrivateKey")
  valid_598988 = validateParameter(valid_598988, JString, required = true,
                                 default = nil)
  if valid_598988 != nil:
    section.add "PrivateKey", valid_598988
  var valid_598989 = formData.getOrDefault("CertificateChain")
  valid_598989 = validateParameter(valid_598989, JString, required = false,
                                 default = nil)
  if valid_598989 != nil:
    section.add "CertificateChain", valid_598989
  var valid_598990 = formData.getOrDefault("Path")
  valid_598990 = validateParameter(valid_598990, JString, required = false,
                                 default = nil)
  if valid_598990 != nil:
    section.add "Path", valid_598990
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598991: Call_PostUploadServerCertificate_598974; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_598991.validator(path, query, header, formData, body)
  let scheme = call_598991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598991.url(scheme.get, call_598991.host, call_598991.base,
                         call_598991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598991, url, valid)

proc call*(call_598992: Call_PostUploadServerCertificate_598974;
          CertificateBody: string; ServerCertificateName: string;
          PrivateKey: string; Action: string = "UploadServerCertificate";
          CertificateChain: string = ""; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  var query_598993 = newJObject()
  var formData_598994 = newJObject()
  add(formData_598994, "CertificateBody", newJString(CertificateBody))
  add(formData_598994, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_598993, "Action", newJString(Action))
  add(formData_598994, "PrivateKey", newJString(PrivateKey))
  add(formData_598994, "CertificateChain", newJString(CertificateChain))
  add(query_598993, "Version", newJString(Version))
  add(formData_598994, "Path", newJString(Path))
  result = call_598992.call(nil, query_598993, nil, formData_598994, nil)

var postUploadServerCertificate* = Call_PostUploadServerCertificate_598974(
    name: "postUploadServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_PostUploadServerCertificate_598975, base: "/",
    url: url_PostUploadServerCertificate_598976,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadServerCertificate_598954 = ref object of OpenApiRestCall_593437
proc url_GetUploadServerCertificate_598956(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUploadServerCertificate_598955(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_598957 = query.getOrDefault("ServerCertificateName")
  valid_598957 = validateParameter(valid_598957, JString, required = true,
                                 default = nil)
  if valid_598957 != nil:
    section.add "ServerCertificateName", valid_598957
  var valid_598958 = query.getOrDefault("CertificateBody")
  valid_598958 = validateParameter(valid_598958, JString, required = true,
                                 default = nil)
  if valid_598958 != nil:
    section.add "CertificateBody", valid_598958
  var valid_598959 = query.getOrDefault("CertificateChain")
  valid_598959 = validateParameter(valid_598959, JString, required = false,
                                 default = nil)
  if valid_598959 != nil:
    section.add "CertificateChain", valid_598959
  var valid_598960 = query.getOrDefault("Action")
  valid_598960 = validateParameter(valid_598960, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_598960 != nil:
    section.add "Action", valid_598960
  var valid_598961 = query.getOrDefault("Path")
  valid_598961 = validateParameter(valid_598961, JString, required = false,
                                 default = nil)
  if valid_598961 != nil:
    section.add "Path", valid_598961
  var valid_598962 = query.getOrDefault("PrivateKey")
  valid_598962 = validateParameter(valid_598962, JString, required = true,
                                 default = nil)
  if valid_598962 != nil:
    section.add "PrivateKey", valid_598962
  var valid_598963 = query.getOrDefault("Version")
  valid_598963 = validateParameter(valid_598963, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_598963 != nil:
    section.add "Version", valid_598963
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_598964 = header.getOrDefault("X-Amz-Date")
  valid_598964 = validateParameter(valid_598964, JString, required = false,
                                 default = nil)
  if valid_598964 != nil:
    section.add "X-Amz-Date", valid_598964
  var valid_598965 = header.getOrDefault("X-Amz-Security-Token")
  valid_598965 = validateParameter(valid_598965, JString, required = false,
                                 default = nil)
  if valid_598965 != nil:
    section.add "X-Amz-Security-Token", valid_598965
  var valid_598966 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_598966 = validateParameter(valid_598966, JString, required = false,
                                 default = nil)
  if valid_598966 != nil:
    section.add "X-Amz-Content-Sha256", valid_598966
  var valid_598967 = header.getOrDefault("X-Amz-Algorithm")
  valid_598967 = validateParameter(valid_598967, JString, required = false,
                                 default = nil)
  if valid_598967 != nil:
    section.add "X-Amz-Algorithm", valid_598967
  var valid_598968 = header.getOrDefault("X-Amz-Signature")
  valid_598968 = validateParameter(valid_598968, JString, required = false,
                                 default = nil)
  if valid_598968 != nil:
    section.add "X-Amz-Signature", valid_598968
  var valid_598969 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_598969 = validateParameter(valid_598969, JString, required = false,
                                 default = nil)
  if valid_598969 != nil:
    section.add "X-Amz-SignedHeaders", valid_598969
  var valid_598970 = header.getOrDefault("X-Amz-Credential")
  valid_598970 = validateParameter(valid_598970, JString, required = false,
                                 default = nil)
  if valid_598970 != nil:
    section.add "X-Amz-Credential", valid_598970
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_598971: Call_GetUploadServerCertificate_598954; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_598971.validator(path, query, header, formData, body)
  let scheme = call_598971.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_598971.url(scheme.get, call_598971.host, call_598971.base,
                         call_598971.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_598971, url, valid)

proc call*(call_598972: Call_GetUploadServerCertificate_598954;
          ServerCertificateName: string; CertificateBody: string;
          PrivateKey: string; CertificateChain: string = "";
          Action: string = "UploadServerCertificate"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_598973 = newJObject()
  add(query_598973, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_598973, "CertificateBody", newJString(CertificateBody))
  add(query_598973, "CertificateChain", newJString(CertificateChain))
  add(query_598973, "Action", newJString(Action))
  add(query_598973, "Path", newJString(Path))
  add(query_598973, "PrivateKey", newJString(PrivateKey))
  add(query_598973, "Version", newJString(Version))
  result = call_598972.call(nil, query_598973, nil, nil, nil)

var getUploadServerCertificate* = Call_GetUploadServerCertificate_598954(
    name: "getUploadServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_GetUploadServerCertificate_598955, base: "/",
    url: url_GetUploadServerCertificate_598956,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSigningCertificate_599012 = ref object of OpenApiRestCall_593437
proc url_PostUploadSigningCertificate_599014(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostUploadSigningCertificate_599013(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_599015 = query.getOrDefault("Action")
  valid_599015 = validateParameter(valid_599015, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_599015 != nil:
    section.add "Action", valid_599015
  var valid_599016 = query.getOrDefault("Version")
  valid_599016 = validateParameter(valid_599016, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_599016 != nil:
    section.add "Version", valid_599016
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_599017 = header.getOrDefault("X-Amz-Date")
  valid_599017 = validateParameter(valid_599017, JString, required = false,
                                 default = nil)
  if valid_599017 != nil:
    section.add "X-Amz-Date", valid_599017
  var valid_599018 = header.getOrDefault("X-Amz-Security-Token")
  valid_599018 = validateParameter(valid_599018, JString, required = false,
                                 default = nil)
  if valid_599018 != nil:
    section.add "X-Amz-Security-Token", valid_599018
  var valid_599019 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_599019 = validateParameter(valid_599019, JString, required = false,
                                 default = nil)
  if valid_599019 != nil:
    section.add "X-Amz-Content-Sha256", valid_599019
  var valid_599020 = header.getOrDefault("X-Amz-Algorithm")
  valid_599020 = validateParameter(valid_599020, JString, required = false,
                                 default = nil)
  if valid_599020 != nil:
    section.add "X-Amz-Algorithm", valid_599020
  var valid_599021 = header.getOrDefault("X-Amz-Signature")
  valid_599021 = validateParameter(valid_599021, JString, required = false,
                                 default = nil)
  if valid_599021 != nil:
    section.add "X-Amz-Signature", valid_599021
  var valid_599022 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_599022 = validateParameter(valid_599022, JString, required = false,
                                 default = nil)
  if valid_599022 != nil:
    section.add "X-Amz-SignedHeaders", valid_599022
  var valid_599023 = header.getOrDefault("X-Amz-Credential")
  valid_599023 = validateParameter(valid_599023, JString, required = false,
                                 default = nil)
  if valid_599023 != nil:
    section.add "X-Amz-Credential", valid_599023
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_599024 = formData.getOrDefault("CertificateBody")
  valid_599024 = validateParameter(valid_599024, JString, required = true,
                                 default = nil)
  if valid_599024 != nil:
    section.add "CertificateBody", valid_599024
  var valid_599025 = formData.getOrDefault("UserName")
  valid_599025 = validateParameter(valid_599025, JString, required = false,
                                 default = nil)
  if valid_599025 != nil:
    section.add "UserName", valid_599025
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_599026: Call_PostUploadSigningCertificate_599012; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_599026.validator(path, query, header, formData, body)
  let scheme = call_599026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_599026.url(scheme.get, call_599026.host, call_599026.base,
                         call_599026.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_599026, url, valid)

proc call*(call_599027: Call_PostUploadSigningCertificate_599012;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_599028 = newJObject()
  var formData_599029 = newJObject()
  add(formData_599029, "CertificateBody", newJString(CertificateBody))
  add(formData_599029, "UserName", newJString(UserName))
  add(query_599028, "Action", newJString(Action))
  add(query_599028, "Version", newJString(Version))
  result = call_599027.call(nil, query_599028, nil, formData_599029, nil)

var postUploadSigningCertificate* = Call_PostUploadSigningCertificate_599012(
    name: "postUploadSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_PostUploadSigningCertificate_599013, base: "/",
    url: url_PostUploadSigningCertificate_599014,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSigningCertificate_598995 = ref object of OpenApiRestCall_593437
proc url_GetUploadSigningCertificate_598997(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetUploadSigningCertificate_598996(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CertificateBody` field"
  var valid_598998 = query.getOrDefault("CertificateBody")
  valid_598998 = validateParameter(valid_598998, JString, required = true,
                                 default = nil)
  if valid_598998 != nil:
    section.add "CertificateBody", valid_598998
  var valid_598999 = query.getOrDefault("UserName")
  valid_598999 = validateParameter(valid_598999, JString, required = false,
                                 default = nil)
  if valid_598999 != nil:
    section.add "UserName", valid_598999
  var valid_599000 = query.getOrDefault("Action")
  valid_599000 = validateParameter(valid_599000, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_599000 != nil:
    section.add "Action", valid_599000
  var valid_599001 = query.getOrDefault("Version")
  valid_599001 = validateParameter(valid_599001, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_599001 != nil:
    section.add "Version", valid_599001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_599002 = header.getOrDefault("X-Amz-Date")
  valid_599002 = validateParameter(valid_599002, JString, required = false,
                                 default = nil)
  if valid_599002 != nil:
    section.add "X-Amz-Date", valid_599002
  var valid_599003 = header.getOrDefault("X-Amz-Security-Token")
  valid_599003 = validateParameter(valid_599003, JString, required = false,
                                 default = nil)
  if valid_599003 != nil:
    section.add "X-Amz-Security-Token", valid_599003
  var valid_599004 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_599004 = validateParameter(valid_599004, JString, required = false,
                                 default = nil)
  if valid_599004 != nil:
    section.add "X-Amz-Content-Sha256", valid_599004
  var valid_599005 = header.getOrDefault("X-Amz-Algorithm")
  valid_599005 = validateParameter(valid_599005, JString, required = false,
                                 default = nil)
  if valid_599005 != nil:
    section.add "X-Amz-Algorithm", valid_599005
  var valid_599006 = header.getOrDefault("X-Amz-Signature")
  valid_599006 = validateParameter(valid_599006, JString, required = false,
                                 default = nil)
  if valid_599006 != nil:
    section.add "X-Amz-Signature", valid_599006
  var valid_599007 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_599007 = validateParameter(valid_599007, JString, required = false,
                                 default = nil)
  if valid_599007 != nil:
    section.add "X-Amz-SignedHeaders", valid_599007
  var valid_599008 = header.getOrDefault("X-Amz-Credential")
  valid_599008 = validateParameter(valid_599008, JString, required = false,
                                 default = nil)
  if valid_599008 != nil:
    section.add "X-Amz-Credential", valid_599008
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_599009: Call_GetUploadSigningCertificate_598995; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_599009.validator(path, query, header, formData, body)
  let scheme = call_599009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_599009.url(scheme.get, call_599009.host, call_599009.base,
                         call_599009.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_599009, url, valid)

proc call*(call_599010: Call_GetUploadSigningCertificate_598995;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_599011 = newJObject()
  add(query_599011, "CertificateBody", newJString(CertificateBody))
  add(query_599011, "UserName", newJString(UserName))
  add(query_599011, "Action", newJString(Action))
  add(query_599011, "Version", newJString(Version))
  result = call_599010.call(nil, query_599011, nil, nil, nil)

var getUploadSigningCertificate* = Call_GetUploadSigningCertificate_598995(
    name: "getUploadSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_GetUploadSigningCertificate_598996, base: "/",
    url: url_GetUploadSigningCertificate_598997,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.sign(input.getOrDefault("query"), SHA256)
