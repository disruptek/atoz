
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: AWS Identity and Access Management
## version: 2010-05-08
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>AWS Identity and Access Management</fullname> <p>AWS Identity and Access Management (IAM) is a web service that you can use to manage users and user permissions under your AWS account. This guide provides descriptions of IAM actions that you can call programmatically. For general information about IAM, see <a href="http://aws.amazon.com/iam/">AWS Identity and Access Management (IAM)</a>. For the user guide for IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/">Using IAM</a>. </p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to IAM and AWS. For example, the SDKs take care of tasks such as cryptographically signing requests (see below), managing errors, and retrying requests automatically. For information about the AWS SDKs, including how to download and install them, see the <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a> page. </p> </note> <p>We recommend that you use the AWS SDKs to make programmatic API calls to IAM. However, you can also use the IAM Query API to make direct calls to the IAM web service. To learn more about the IAM Query API, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>Using IAM</i> guide. IAM supports GET and POST requests for all actions. That is, the API does not require you to use GET for some actions and POST for others. However, GET requests are subject to the limitation size of a URL. Therefore, for operations that require larger sizes, use a POST request. </p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your AWS account access key ID and secret access key for everyday work with IAM. You can use the access key ID and secret access key for an IAM user or you can use the AWS Security Token Service to generate temporary security credentials and use those to sign requests.</p> <p>To sign requests, we recommend that you use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>. If you have an existing application that uses Signature Version 2, you do not have to update it to use Signature Version 4. However, some operations now require Signature Version 4. The documentation for operations that require version 4 indicate this requirement. </p> <p> <b>Additional Resources</b> </p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html">AWS Security Credentials</a>. This topic provides general information about the types of credentials used for accessing AWS. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html">IAM Best Practices</a>. This topic presents a list of suggestions for using the IAM service to help secure your AWS resources. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a>. This set of topics walk you through the process of signing a request using an access key ID and secret access key. </p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/iam/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_605589 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_605589](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_605589): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
                           "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable, Scheme.Https: {
      "cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
      "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable}.toTable
const
  awsServiceName = "iam"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddClientIDToOpenIDConnectProvider_606199 = ref object of OpenApiRestCall_605589
proc url_PostAddClientIDToOpenIDConnectProvider_606201(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddClientIDToOpenIDConnectProvider_606200(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606202 = query.getOrDefault("Action")
  valid_606202 = validateParameter(valid_606202, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_606202 != nil:
    section.add "Action", valid_606202
  var valid_606203 = query.getOrDefault("Version")
  valid_606203 = validateParameter(valid_606203, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606203 != nil:
    section.add "Version", valid_606203
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606204 = header.getOrDefault("X-Amz-Signature")
  valid_606204 = validateParameter(valid_606204, JString, required = false,
                                 default = nil)
  if valid_606204 != nil:
    section.add "X-Amz-Signature", valid_606204
  var valid_606205 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606205 = validateParameter(valid_606205, JString, required = false,
                                 default = nil)
  if valid_606205 != nil:
    section.add "X-Amz-Content-Sha256", valid_606205
  var valid_606206 = header.getOrDefault("X-Amz-Date")
  valid_606206 = validateParameter(valid_606206, JString, required = false,
                                 default = nil)
  if valid_606206 != nil:
    section.add "X-Amz-Date", valid_606206
  var valid_606207 = header.getOrDefault("X-Amz-Credential")
  valid_606207 = validateParameter(valid_606207, JString, required = false,
                                 default = nil)
  if valid_606207 != nil:
    section.add "X-Amz-Credential", valid_606207
  var valid_606208 = header.getOrDefault("X-Amz-Security-Token")
  valid_606208 = validateParameter(valid_606208, JString, required = false,
                                 default = nil)
  if valid_606208 != nil:
    section.add "X-Amz-Security-Token", valid_606208
  var valid_606209 = header.getOrDefault("X-Amz-Algorithm")
  valid_606209 = validateParameter(valid_606209, JString, required = false,
                                 default = nil)
  if valid_606209 != nil:
    section.add "X-Amz-Algorithm", valid_606209
  var valid_606210 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606210 = validateParameter(valid_606210, JString, required = false,
                                 default = nil)
  if valid_606210 != nil:
    section.add "X-Amz-SignedHeaders", valid_606210
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ClientID` field"
  var valid_606211 = formData.getOrDefault("ClientID")
  valid_606211 = validateParameter(valid_606211, JString, required = true,
                                 default = nil)
  if valid_606211 != nil:
    section.add "ClientID", valid_606211
  var valid_606212 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_606212 = validateParameter(valid_606212, JString, required = true,
                                 default = nil)
  if valid_606212 != nil:
    section.add "OpenIDConnectProviderArn", valid_606212
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606213: Call_PostAddClientIDToOpenIDConnectProvider_606199;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_606213.validator(path, query, header, formData, body)
  let scheme = call_606213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606213.url(scheme.get, call_606213.host, call_606213.base,
                         call_606213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606213, url, valid)

proc call*(call_606214: Call_PostAddClientIDToOpenIDConnectProvider_606199;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_606215 = newJObject()
  var formData_606216 = newJObject()
  add(formData_606216, "ClientID", newJString(ClientID))
  add(query_606215, "Action", newJString(Action))
  add(query_606215, "Version", newJString(Version))
  add(formData_606216, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_606214.call(nil, query_606215, nil, formData_606216, nil)

var postAddClientIDToOpenIDConnectProvider* = Call_PostAddClientIDToOpenIDConnectProvider_606199(
    name: "postAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_PostAddClientIDToOpenIDConnectProvider_606200, base: "/",
    url: url_PostAddClientIDToOpenIDConnectProvider_606201,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddClientIDToOpenIDConnectProvider_605927 = ref object of OpenApiRestCall_605589
proc url_GetAddClientIDToOpenIDConnectProvider_605929(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddClientIDToOpenIDConnectProvider_605928(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ClientID` field"
  var valid_606041 = query.getOrDefault("ClientID")
  valid_606041 = validateParameter(valid_606041, JString, required = true,
                                 default = nil)
  if valid_606041 != nil:
    section.add "ClientID", valid_606041
  var valid_606042 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_606042 = validateParameter(valid_606042, JString, required = true,
                                 default = nil)
  if valid_606042 != nil:
    section.add "OpenIDConnectProviderArn", valid_606042
  var valid_606056 = query.getOrDefault("Action")
  valid_606056 = validateParameter(valid_606056, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_606056 != nil:
    section.add "Action", valid_606056
  var valid_606057 = query.getOrDefault("Version")
  valid_606057 = validateParameter(valid_606057, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606057 != nil:
    section.add "Version", valid_606057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606058 = header.getOrDefault("X-Amz-Signature")
  valid_606058 = validateParameter(valid_606058, JString, required = false,
                                 default = nil)
  if valid_606058 != nil:
    section.add "X-Amz-Signature", valid_606058
  var valid_606059 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606059 = validateParameter(valid_606059, JString, required = false,
                                 default = nil)
  if valid_606059 != nil:
    section.add "X-Amz-Content-Sha256", valid_606059
  var valid_606060 = header.getOrDefault("X-Amz-Date")
  valid_606060 = validateParameter(valid_606060, JString, required = false,
                                 default = nil)
  if valid_606060 != nil:
    section.add "X-Amz-Date", valid_606060
  var valid_606061 = header.getOrDefault("X-Amz-Credential")
  valid_606061 = validateParameter(valid_606061, JString, required = false,
                                 default = nil)
  if valid_606061 != nil:
    section.add "X-Amz-Credential", valid_606061
  var valid_606062 = header.getOrDefault("X-Amz-Security-Token")
  valid_606062 = validateParameter(valid_606062, JString, required = false,
                                 default = nil)
  if valid_606062 != nil:
    section.add "X-Amz-Security-Token", valid_606062
  var valid_606063 = header.getOrDefault("X-Amz-Algorithm")
  valid_606063 = validateParameter(valid_606063, JString, required = false,
                                 default = nil)
  if valid_606063 != nil:
    section.add "X-Amz-Algorithm", valid_606063
  var valid_606064 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606064 = validateParameter(valid_606064, JString, required = false,
                                 default = nil)
  if valid_606064 != nil:
    section.add "X-Amz-SignedHeaders", valid_606064
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606087: Call_GetAddClientIDToOpenIDConnectProvider_605927;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_606087.validator(path, query, header, formData, body)
  let scheme = call_606087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606087.url(scheme.get, call_606087.host, call_606087.base,
                         call_606087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606087, url, valid)

proc call*(call_606158: Call_GetAddClientIDToOpenIDConnectProvider_605927;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606159 = newJObject()
  add(query_606159, "ClientID", newJString(ClientID))
  add(query_606159, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_606159, "Action", newJString(Action))
  add(query_606159, "Version", newJString(Version))
  result = call_606158.call(nil, query_606159, nil, nil, nil)

var getAddClientIDToOpenIDConnectProvider* = Call_GetAddClientIDToOpenIDConnectProvider_605927(
    name: "getAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_GetAddClientIDToOpenIDConnectProvider_605928, base: "/",
    url: url_GetAddClientIDToOpenIDConnectProvider_605929,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToInstanceProfile_606234 = ref object of OpenApiRestCall_605589
proc url_PostAddRoleToInstanceProfile_606236(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToInstanceProfile_606235(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606237 = query.getOrDefault("Action")
  valid_606237 = validateParameter(valid_606237, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_606237 != nil:
    section.add "Action", valid_606237
  var valid_606238 = query.getOrDefault("Version")
  valid_606238 = validateParameter(valid_606238, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606238 != nil:
    section.add "Version", valid_606238
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606239 = header.getOrDefault("X-Amz-Signature")
  valid_606239 = validateParameter(valid_606239, JString, required = false,
                                 default = nil)
  if valid_606239 != nil:
    section.add "X-Amz-Signature", valid_606239
  var valid_606240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606240 = validateParameter(valid_606240, JString, required = false,
                                 default = nil)
  if valid_606240 != nil:
    section.add "X-Amz-Content-Sha256", valid_606240
  var valid_606241 = header.getOrDefault("X-Amz-Date")
  valid_606241 = validateParameter(valid_606241, JString, required = false,
                                 default = nil)
  if valid_606241 != nil:
    section.add "X-Amz-Date", valid_606241
  var valid_606242 = header.getOrDefault("X-Amz-Credential")
  valid_606242 = validateParameter(valid_606242, JString, required = false,
                                 default = nil)
  if valid_606242 != nil:
    section.add "X-Amz-Credential", valid_606242
  var valid_606243 = header.getOrDefault("X-Amz-Security-Token")
  valid_606243 = validateParameter(valid_606243, JString, required = false,
                                 default = nil)
  if valid_606243 != nil:
    section.add "X-Amz-Security-Token", valid_606243
  var valid_606244 = header.getOrDefault("X-Amz-Algorithm")
  valid_606244 = validateParameter(valid_606244, JString, required = false,
                                 default = nil)
  if valid_606244 != nil:
    section.add "X-Amz-Algorithm", valid_606244
  var valid_606245 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606245 = validateParameter(valid_606245, JString, required = false,
                                 default = nil)
  if valid_606245 != nil:
    section.add "X-Amz-SignedHeaders", valid_606245
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_606246 = formData.getOrDefault("RoleName")
  valid_606246 = validateParameter(valid_606246, JString, required = true,
                                 default = nil)
  if valid_606246 != nil:
    section.add "RoleName", valid_606246
  var valid_606247 = formData.getOrDefault("InstanceProfileName")
  valid_606247 = validateParameter(valid_606247, JString, required = true,
                                 default = nil)
  if valid_606247 != nil:
    section.add "InstanceProfileName", valid_606247
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606248: Call_PostAddRoleToInstanceProfile_606234; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_606248.validator(path, query, header, formData, body)
  let scheme = call_606248.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606248.url(scheme.get, call_606248.host, call_606248.base,
                         call_606248.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606248, url, valid)

proc call*(call_606249: Call_PostAddRoleToInstanceProfile_606234; RoleName: string;
          InstanceProfileName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_606250 = newJObject()
  var formData_606251 = newJObject()
  add(formData_606251, "RoleName", newJString(RoleName))
  add(query_606250, "Action", newJString(Action))
  add(formData_606251, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_606250, "Version", newJString(Version))
  result = call_606249.call(nil, query_606250, nil, formData_606251, nil)

var postAddRoleToInstanceProfile* = Call_PostAddRoleToInstanceProfile_606234(
    name: "postAddRoleToInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_PostAddRoleToInstanceProfile_606235, base: "/",
    url: url_PostAddRoleToInstanceProfile_606236,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToInstanceProfile_606217 = ref object of OpenApiRestCall_605589
proc url_GetAddRoleToInstanceProfile_606219(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToInstanceProfile_606218(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_606220 = query.getOrDefault("RoleName")
  valid_606220 = validateParameter(valid_606220, JString, required = true,
                                 default = nil)
  if valid_606220 != nil:
    section.add "RoleName", valid_606220
  var valid_606221 = query.getOrDefault("Action")
  valid_606221 = validateParameter(valid_606221, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_606221 != nil:
    section.add "Action", valid_606221
  var valid_606222 = query.getOrDefault("InstanceProfileName")
  valid_606222 = validateParameter(valid_606222, JString, required = true,
                                 default = nil)
  if valid_606222 != nil:
    section.add "InstanceProfileName", valid_606222
  var valid_606223 = query.getOrDefault("Version")
  valid_606223 = validateParameter(valid_606223, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606223 != nil:
    section.add "Version", valid_606223
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606224 = header.getOrDefault("X-Amz-Signature")
  valid_606224 = validateParameter(valid_606224, JString, required = false,
                                 default = nil)
  if valid_606224 != nil:
    section.add "X-Amz-Signature", valid_606224
  var valid_606225 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606225 = validateParameter(valid_606225, JString, required = false,
                                 default = nil)
  if valid_606225 != nil:
    section.add "X-Amz-Content-Sha256", valid_606225
  var valid_606226 = header.getOrDefault("X-Amz-Date")
  valid_606226 = validateParameter(valid_606226, JString, required = false,
                                 default = nil)
  if valid_606226 != nil:
    section.add "X-Amz-Date", valid_606226
  var valid_606227 = header.getOrDefault("X-Amz-Credential")
  valid_606227 = validateParameter(valid_606227, JString, required = false,
                                 default = nil)
  if valid_606227 != nil:
    section.add "X-Amz-Credential", valid_606227
  var valid_606228 = header.getOrDefault("X-Amz-Security-Token")
  valid_606228 = validateParameter(valid_606228, JString, required = false,
                                 default = nil)
  if valid_606228 != nil:
    section.add "X-Amz-Security-Token", valid_606228
  var valid_606229 = header.getOrDefault("X-Amz-Algorithm")
  valid_606229 = validateParameter(valid_606229, JString, required = false,
                                 default = nil)
  if valid_606229 != nil:
    section.add "X-Amz-Algorithm", valid_606229
  var valid_606230 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606230 = validateParameter(valid_606230, JString, required = false,
                                 default = nil)
  if valid_606230 != nil:
    section.add "X-Amz-SignedHeaders", valid_606230
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606231: Call_GetAddRoleToInstanceProfile_606217; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_606231.validator(path, query, header, formData, body)
  let scheme = call_606231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606231.url(scheme.get, call_606231.host, call_606231.base,
                         call_606231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606231, url, valid)

proc call*(call_606232: Call_GetAddRoleToInstanceProfile_606217; RoleName: string;
          InstanceProfileName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_606233 = newJObject()
  add(query_606233, "RoleName", newJString(RoleName))
  add(query_606233, "Action", newJString(Action))
  add(query_606233, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_606233, "Version", newJString(Version))
  result = call_606232.call(nil, query_606233, nil, nil, nil)

var getAddRoleToInstanceProfile* = Call_GetAddRoleToInstanceProfile_606217(
    name: "getAddRoleToInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_GetAddRoleToInstanceProfile_606218, base: "/",
    url: url_GetAddRoleToInstanceProfile_606219,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddUserToGroup_606269 = ref object of OpenApiRestCall_605589
proc url_PostAddUserToGroup_606271(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddUserToGroup_606270(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606272 = query.getOrDefault("Action")
  valid_606272 = validateParameter(valid_606272, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_606272 != nil:
    section.add "Action", valid_606272
  var valid_606273 = query.getOrDefault("Version")
  valid_606273 = validateParameter(valid_606273, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606273 != nil:
    section.add "Version", valid_606273
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606274 = header.getOrDefault("X-Amz-Signature")
  valid_606274 = validateParameter(valid_606274, JString, required = false,
                                 default = nil)
  if valid_606274 != nil:
    section.add "X-Amz-Signature", valid_606274
  var valid_606275 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606275 = validateParameter(valid_606275, JString, required = false,
                                 default = nil)
  if valid_606275 != nil:
    section.add "X-Amz-Content-Sha256", valid_606275
  var valid_606276 = header.getOrDefault("X-Amz-Date")
  valid_606276 = validateParameter(valid_606276, JString, required = false,
                                 default = nil)
  if valid_606276 != nil:
    section.add "X-Amz-Date", valid_606276
  var valid_606277 = header.getOrDefault("X-Amz-Credential")
  valid_606277 = validateParameter(valid_606277, JString, required = false,
                                 default = nil)
  if valid_606277 != nil:
    section.add "X-Amz-Credential", valid_606277
  var valid_606278 = header.getOrDefault("X-Amz-Security-Token")
  valid_606278 = validateParameter(valid_606278, JString, required = false,
                                 default = nil)
  if valid_606278 != nil:
    section.add "X-Amz-Security-Token", valid_606278
  var valid_606279 = header.getOrDefault("X-Amz-Algorithm")
  valid_606279 = validateParameter(valid_606279, JString, required = false,
                                 default = nil)
  if valid_606279 != nil:
    section.add "X-Amz-Algorithm", valid_606279
  var valid_606280 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606280 = validateParameter(valid_606280, JString, required = false,
                                 default = nil)
  if valid_606280 != nil:
    section.add "X-Amz-SignedHeaders", valid_606280
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_606281 = formData.getOrDefault("GroupName")
  valid_606281 = validateParameter(valid_606281, JString, required = true,
                                 default = nil)
  if valid_606281 != nil:
    section.add "GroupName", valid_606281
  var valid_606282 = formData.getOrDefault("UserName")
  valid_606282 = validateParameter(valid_606282, JString, required = true,
                                 default = nil)
  if valid_606282 != nil:
    section.add "UserName", valid_606282
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606283: Call_PostAddUserToGroup_606269; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_606283.validator(path, query, header, formData, body)
  let scheme = call_606283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606283.url(scheme.get, call_606283.host, call_606283.base,
                         call_606283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606283, url, valid)

proc call*(call_606284: Call_PostAddUserToGroup_606269; GroupName: string;
          UserName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606285 = newJObject()
  var formData_606286 = newJObject()
  add(formData_606286, "GroupName", newJString(GroupName))
  add(formData_606286, "UserName", newJString(UserName))
  add(query_606285, "Action", newJString(Action))
  add(query_606285, "Version", newJString(Version))
  result = call_606284.call(nil, query_606285, nil, formData_606286, nil)

var postAddUserToGroup* = Call_PostAddUserToGroup_606269(
    name: "postAddUserToGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddUserToGroup",
    validator: validate_PostAddUserToGroup_606270, base: "/",
    url: url_PostAddUserToGroup_606271, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddUserToGroup_606252 = ref object of OpenApiRestCall_605589
proc url_GetAddUserToGroup_606254(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddUserToGroup_606253(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_606255 = query.getOrDefault("UserName")
  valid_606255 = validateParameter(valid_606255, JString, required = true,
                                 default = nil)
  if valid_606255 != nil:
    section.add "UserName", valid_606255
  var valid_606256 = query.getOrDefault("GroupName")
  valid_606256 = validateParameter(valid_606256, JString, required = true,
                                 default = nil)
  if valid_606256 != nil:
    section.add "GroupName", valid_606256
  var valid_606257 = query.getOrDefault("Action")
  valid_606257 = validateParameter(valid_606257, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_606257 != nil:
    section.add "Action", valid_606257
  var valid_606258 = query.getOrDefault("Version")
  valid_606258 = validateParameter(valid_606258, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606258 != nil:
    section.add "Version", valid_606258
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606259 = header.getOrDefault("X-Amz-Signature")
  valid_606259 = validateParameter(valid_606259, JString, required = false,
                                 default = nil)
  if valid_606259 != nil:
    section.add "X-Amz-Signature", valid_606259
  var valid_606260 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606260 = validateParameter(valid_606260, JString, required = false,
                                 default = nil)
  if valid_606260 != nil:
    section.add "X-Amz-Content-Sha256", valid_606260
  var valid_606261 = header.getOrDefault("X-Amz-Date")
  valid_606261 = validateParameter(valid_606261, JString, required = false,
                                 default = nil)
  if valid_606261 != nil:
    section.add "X-Amz-Date", valid_606261
  var valid_606262 = header.getOrDefault("X-Amz-Credential")
  valid_606262 = validateParameter(valid_606262, JString, required = false,
                                 default = nil)
  if valid_606262 != nil:
    section.add "X-Amz-Credential", valid_606262
  var valid_606263 = header.getOrDefault("X-Amz-Security-Token")
  valid_606263 = validateParameter(valid_606263, JString, required = false,
                                 default = nil)
  if valid_606263 != nil:
    section.add "X-Amz-Security-Token", valid_606263
  var valid_606264 = header.getOrDefault("X-Amz-Algorithm")
  valid_606264 = validateParameter(valid_606264, JString, required = false,
                                 default = nil)
  if valid_606264 != nil:
    section.add "X-Amz-Algorithm", valid_606264
  var valid_606265 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606265 = validateParameter(valid_606265, JString, required = false,
                                 default = nil)
  if valid_606265 != nil:
    section.add "X-Amz-SignedHeaders", valid_606265
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606266: Call_GetAddUserToGroup_606252; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_606266.validator(path, query, header, formData, body)
  let scheme = call_606266.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606266.url(scheme.get, call_606266.host, call_606266.base,
                         call_606266.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606266, url, valid)

proc call*(call_606267: Call_GetAddUserToGroup_606252; UserName: string;
          GroupName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606268 = newJObject()
  add(query_606268, "UserName", newJString(UserName))
  add(query_606268, "GroupName", newJString(GroupName))
  add(query_606268, "Action", newJString(Action))
  add(query_606268, "Version", newJString(Version))
  result = call_606267.call(nil, query_606268, nil, nil, nil)

var getAddUserToGroup* = Call_GetAddUserToGroup_606252(name: "getAddUserToGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=AddUserToGroup", validator: validate_GetAddUserToGroup_606253,
    base: "/", url: url_GetAddUserToGroup_606254,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachGroupPolicy_606304 = ref object of OpenApiRestCall_605589
proc url_PostAttachGroupPolicy_606306(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachGroupPolicy_606305(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606307 = query.getOrDefault("Action")
  valid_606307 = validateParameter(valid_606307, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_606307 != nil:
    section.add "Action", valid_606307
  var valid_606308 = query.getOrDefault("Version")
  valid_606308 = validateParameter(valid_606308, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606308 != nil:
    section.add "Version", valid_606308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606309 = header.getOrDefault("X-Amz-Signature")
  valid_606309 = validateParameter(valid_606309, JString, required = false,
                                 default = nil)
  if valid_606309 != nil:
    section.add "X-Amz-Signature", valid_606309
  var valid_606310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606310 = validateParameter(valid_606310, JString, required = false,
                                 default = nil)
  if valid_606310 != nil:
    section.add "X-Amz-Content-Sha256", valid_606310
  var valid_606311 = header.getOrDefault("X-Amz-Date")
  valid_606311 = validateParameter(valid_606311, JString, required = false,
                                 default = nil)
  if valid_606311 != nil:
    section.add "X-Amz-Date", valid_606311
  var valid_606312 = header.getOrDefault("X-Amz-Credential")
  valid_606312 = validateParameter(valid_606312, JString, required = false,
                                 default = nil)
  if valid_606312 != nil:
    section.add "X-Amz-Credential", valid_606312
  var valid_606313 = header.getOrDefault("X-Amz-Security-Token")
  valid_606313 = validateParameter(valid_606313, JString, required = false,
                                 default = nil)
  if valid_606313 != nil:
    section.add "X-Amz-Security-Token", valid_606313
  var valid_606314 = header.getOrDefault("X-Amz-Algorithm")
  valid_606314 = validateParameter(valid_606314, JString, required = false,
                                 default = nil)
  if valid_606314 != nil:
    section.add "X-Amz-Algorithm", valid_606314
  var valid_606315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606315 = validateParameter(valid_606315, JString, required = false,
                                 default = nil)
  if valid_606315 != nil:
    section.add "X-Amz-SignedHeaders", valid_606315
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_606316 = formData.getOrDefault("GroupName")
  valid_606316 = validateParameter(valid_606316, JString, required = true,
                                 default = nil)
  if valid_606316 != nil:
    section.add "GroupName", valid_606316
  var valid_606317 = formData.getOrDefault("PolicyArn")
  valid_606317 = validateParameter(valid_606317, JString, required = true,
                                 default = nil)
  if valid_606317 != nil:
    section.add "PolicyArn", valid_606317
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606318: Call_PostAttachGroupPolicy_606304; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606318.validator(path, query, header, formData, body)
  let scheme = call_606318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606318.url(scheme.get, call_606318.host, call_606318.base,
                         call_606318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606318, url, valid)

proc call*(call_606319: Call_PostAttachGroupPolicy_606304; GroupName: string;
          PolicyArn: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606320 = newJObject()
  var formData_606321 = newJObject()
  add(formData_606321, "GroupName", newJString(GroupName))
  add(formData_606321, "PolicyArn", newJString(PolicyArn))
  add(query_606320, "Action", newJString(Action))
  add(query_606320, "Version", newJString(Version))
  result = call_606319.call(nil, query_606320, nil, formData_606321, nil)

var postAttachGroupPolicy* = Call_PostAttachGroupPolicy_606304(
    name: "postAttachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_PostAttachGroupPolicy_606305, base: "/",
    url: url_PostAttachGroupPolicy_606306, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachGroupPolicy_606287 = ref object of OpenApiRestCall_605589
proc url_GetAttachGroupPolicy_606289(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachGroupPolicy_606288(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_606290 = query.getOrDefault("GroupName")
  valid_606290 = validateParameter(valid_606290, JString, required = true,
                                 default = nil)
  if valid_606290 != nil:
    section.add "GroupName", valid_606290
  var valid_606291 = query.getOrDefault("PolicyArn")
  valid_606291 = validateParameter(valid_606291, JString, required = true,
                                 default = nil)
  if valid_606291 != nil:
    section.add "PolicyArn", valid_606291
  var valid_606292 = query.getOrDefault("Action")
  valid_606292 = validateParameter(valid_606292, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_606292 != nil:
    section.add "Action", valid_606292
  var valid_606293 = query.getOrDefault("Version")
  valid_606293 = validateParameter(valid_606293, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606293 != nil:
    section.add "Version", valid_606293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606294 = header.getOrDefault("X-Amz-Signature")
  valid_606294 = validateParameter(valid_606294, JString, required = false,
                                 default = nil)
  if valid_606294 != nil:
    section.add "X-Amz-Signature", valid_606294
  var valid_606295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606295 = validateParameter(valid_606295, JString, required = false,
                                 default = nil)
  if valid_606295 != nil:
    section.add "X-Amz-Content-Sha256", valid_606295
  var valid_606296 = header.getOrDefault("X-Amz-Date")
  valid_606296 = validateParameter(valid_606296, JString, required = false,
                                 default = nil)
  if valid_606296 != nil:
    section.add "X-Amz-Date", valid_606296
  var valid_606297 = header.getOrDefault("X-Amz-Credential")
  valid_606297 = validateParameter(valid_606297, JString, required = false,
                                 default = nil)
  if valid_606297 != nil:
    section.add "X-Amz-Credential", valid_606297
  var valid_606298 = header.getOrDefault("X-Amz-Security-Token")
  valid_606298 = validateParameter(valid_606298, JString, required = false,
                                 default = nil)
  if valid_606298 != nil:
    section.add "X-Amz-Security-Token", valid_606298
  var valid_606299 = header.getOrDefault("X-Amz-Algorithm")
  valid_606299 = validateParameter(valid_606299, JString, required = false,
                                 default = nil)
  if valid_606299 != nil:
    section.add "X-Amz-Algorithm", valid_606299
  var valid_606300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606300 = validateParameter(valid_606300, JString, required = false,
                                 default = nil)
  if valid_606300 != nil:
    section.add "X-Amz-SignedHeaders", valid_606300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606301: Call_GetAttachGroupPolicy_606287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606301.validator(path, query, header, formData, body)
  let scheme = call_606301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606301.url(scheme.get, call_606301.host, call_606301.base,
                         call_606301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606301, url, valid)

proc call*(call_606302: Call_GetAttachGroupPolicy_606287; GroupName: string;
          PolicyArn: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606303 = newJObject()
  add(query_606303, "GroupName", newJString(GroupName))
  add(query_606303, "PolicyArn", newJString(PolicyArn))
  add(query_606303, "Action", newJString(Action))
  add(query_606303, "Version", newJString(Version))
  result = call_606302.call(nil, query_606303, nil, nil, nil)

var getAttachGroupPolicy* = Call_GetAttachGroupPolicy_606287(
    name: "getAttachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_GetAttachGroupPolicy_606288, base: "/",
    url: url_GetAttachGroupPolicy_606289, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachRolePolicy_606339 = ref object of OpenApiRestCall_605589
proc url_PostAttachRolePolicy_606341(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachRolePolicy_606340(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606342 = query.getOrDefault("Action")
  valid_606342 = validateParameter(valid_606342, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_606342 != nil:
    section.add "Action", valid_606342
  var valid_606343 = query.getOrDefault("Version")
  valid_606343 = validateParameter(valid_606343, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606343 != nil:
    section.add "Version", valid_606343
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606344 = header.getOrDefault("X-Amz-Signature")
  valid_606344 = validateParameter(valid_606344, JString, required = false,
                                 default = nil)
  if valid_606344 != nil:
    section.add "X-Amz-Signature", valid_606344
  var valid_606345 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606345 = validateParameter(valid_606345, JString, required = false,
                                 default = nil)
  if valid_606345 != nil:
    section.add "X-Amz-Content-Sha256", valid_606345
  var valid_606346 = header.getOrDefault("X-Amz-Date")
  valid_606346 = validateParameter(valid_606346, JString, required = false,
                                 default = nil)
  if valid_606346 != nil:
    section.add "X-Amz-Date", valid_606346
  var valid_606347 = header.getOrDefault("X-Amz-Credential")
  valid_606347 = validateParameter(valid_606347, JString, required = false,
                                 default = nil)
  if valid_606347 != nil:
    section.add "X-Amz-Credential", valid_606347
  var valid_606348 = header.getOrDefault("X-Amz-Security-Token")
  valid_606348 = validateParameter(valid_606348, JString, required = false,
                                 default = nil)
  if valid_606348 != nil:
    section.add "X-Amz-Security-Token", valid_606348
  var valid_606349 = header.getOrDefault("X-Amz-Algorithm")
  valid_606349 = validateParameter(valid_606349, JString, required = false,
                                 default = nil)
  if valid_606349 != nil:
    section.add "X-Amz-Algorithm", valid_606349
  var valid_606350 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606350 = validateParameter(valid_606350, JString, required = false,
                                 default = nil)
  if valid_606350 != nil:
    section.add "X-Amz-SignedHeaders", valid_606350
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_606351 = formData.getOrDefault("RoleName")
  valid_606351 = validateParameter(valid_606351, JString, required = true,
                                 default = nil)
  if valid_606351 != nil:
    section.add "RoleName", valid_606351
  var valid_606352 = formData.getOrDefault("PolicyArn")
  valid_606352 = validateParameter(valid_606352, JString, required = true,
                                 default = nil)
  if valid_606352 != nil:
    section.add "PolicyArn", valid_606352
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606353: Call_PostAttachRolePolicy_606339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606353.validator(path, query, header, formData, body)
  let scheme = call_606353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606353.url(scheme.get, call_606353.host, call_606353.base,
                         call_606353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606353, url, valid)

proc call*(call_606354: Call_PostAttachRolePolicy_606339; RoleName: string;
          PolicyArn: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606355 = newJObject()
  var formData_606356 = newJObject()
  add(formData_606356, "RoleName", newJString(RoleName))
  add(formData_606356, "PolicyArn", newJString(PolicyArn))
  add(query_606355, "Action", newJString(Action))
  add(query_606355, "Version", newJString(Version))
  result = call_606354.call(nil, query_606355, nil, formData_606356, nil)

var postAttachRolePolicy* = Call_PostAttachRolePolicy_606339(
    name: "postAttachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_PostAttachRolePolicy_606340, base: "/",
    url: url_PostAttachRolePolicy_606341, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachRolePolicy_606322 = ref object of OpenApiRestCall_605589
proc url_GetAttachRolePolicy_606324(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachRolePolicy_606323(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_606325 = query.getOrDefault("PolicyArn")
  valid_606325 = validateParameter(valid_606325, JString, required = true,
                                 default = nil)
  if valid_606325 != nil:
    section.add "PolicyArn", valid_606325
  var valid_606326 = query.getOrDefault("RoleName")
  valid_606326 = validateParameter(valid_606326, JString, required = true,
                                 default = nil)
  if valid_606326 != nil:
    section.add "RoleName", valid_606326
  var valid_606327 = query.getOrDefault("Action")
  valid_606327 = validateParameter(valid_606327, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_606327 != nil:
    section.add "Action", valid_606327
  var valid_606328 = query.getOrDefault("Version")
  valid_606328 = validateParameter(valid_606328, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606328 != nil:
    section.add "Version", valid_606328
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606329 = header.getOrDefault("X-Amz-Signature")
  valid_606329 = validateParameter(valid_606329, JString, required = false,
                                 default = nil)
  if valid_606329 != nil:
    section.add "X-Amz-Signature", valid_606329
  var valid_606330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606330 = validateParameter(valid_606330, JString, required = false,
                                 default = nil)
  if valid_606330 != nil:
    section.add "X-Amz-Content-Sha256", valid_606330
  var valid_606331 = header.getOrDefault("X-Amz-Date")
  valid_606331 = validateParameter(valid_606331, JString, required = false,
                                 default = nil)
  if valid_606331 != nil:
    section.add "X-Amz-Date", valid_606331
  var valid_606332 = header.getOrDefault("X-Amz-Credential")
  valid_606332 = validateParameter(valid_606332, JString, required = false,
                                 default = nil)
  if valid_606332 != nil:
    section.add "X-Amz-Credential", valid_606332
  var valid_606333 = header.getOrDefault("X-Amz-Security-Token")
  valid_606333 = validateParameter(valid_606333, JString, required = false,
                                 default = nil)
  if valid_606333 != nil:
    section.add "X-Amz-Security-Token", valid_606333
  var valid_606334 = header.getOrDefault("X-Amz-Algorithm")
  valid_606334 = validateParameter(valid_606334, JString, required = false,
                                 default = nil)
  if valid_606334 != nil:
    section.add "X-Amz-Algorithm", valid_606334
  var valid_606335 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606335 = validateParameter(valid_606335, JString, required = false,
                                 default = nil)
  if valid_606335 != nil:
    section.add "X-Amz-SignedHeaders", valid_606335
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606336: Call_GetAttachRolePolicy_606322; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606336.validator(path, query, header, formData, body)
  let scheme = call_606336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606336.url(scheme.get, call_606336.host, call_606336.base,
                         call_606336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606336, url, valid)

proc call*(call_606337: Call_GetAttachRolePolicy_606322; PolicyArn: string;
          RoleName: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606338 = newJObject()
  add(query_606338, "PolicyArn", newJString(PolicyArn))
  add(query_606338, "RoleName", newJString(RoleName))
  add(query_606338, "Action", newJString(Action))
  add(query_606338, "Version", newJString(Version))
  result = call_606337.call(nil, query_606338, nil, nil, nil)

var getAttachRolePolicy* = Call_GetAttachRolePolicy_606322(
    name: "getAttachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_GetAttachRolePolicy_606323, base: "/",
    url: url_GetAttachRolePolicy_606324, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachUserPolicy_606374 = ref object of OpenApiRestCall_605589
proc url_PostAttachUserPolicy_606376(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachUserPolicy_606375(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606377 = query.getOrDefault("Action")
  valid_606377 = validateParameter(valid_606377, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_606377 != nil:
    section.add "Action", valid_606377
  var valid_606378 = query.getOrDefault("Version")
  valid_606378 = validateParameter(valid_606378, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606378 != nil:
    section.add "Version", valid_606378
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606379 = header.getOrDefault("X-Amz-Signature")
  valid_606379 = validateParameter(valid_606379, JString, required = false,
                                 default = nil)
  if valid_606379 != nil:
    section.add "X-Amz-Signature", valid_606379
  var valid_606380 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606380 = validateParameter(valid_606380, JString, required = false,
                                 default = nil)
  if valid_606380 != nil:
    section.add "X-Amz-Content-Sha256", valid_606380
  var valid_606381 = header.getOrDefault("X-Amz-Date")
  valid_606381 = validateParameter(valid_606381, JString, required = false,
                                 default = nil)
  if valid_606381 != nil:
    section.add "X-Amz-Date", valid_606381
  var valid_606382 = header.getOrDefault("X-Amz-Credential")
  valid_606382 = validateParameter(valid_606382, JString, required = false,
                                 default = nil)
  if valid_606382 != nil:
    section.add "X-Amz-Credential", valid_606382
  var valid_606383 = header.getOrDefault("X-Amz-Security-Token")
  valid_606383 = validateParameter(valid_606383, JString, required = false,
                                 default = nil)
  if valid_606383 != nil:
    section.add "X-Amz-Security-Token", valid_606383
  var valid_606384 = header.getOrDefault("X-Amz-Algorithm")
  valid_606384 = validateParameter(valid_606384, JString, required = false,
                                 default = nil)
  if valid_606384 != nil:
    section.add "X-Amz-Algorithm", valid_606384
  var valid_606385 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606385 = validateParameter(valid_606385, JString, required = false,
                                 default = nil)
  if valid_606385 != nil:
    section.add "X-Amz-SignedHeaders", valid_606385
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_606386 = formData.getOrDefault("PolicyArn")
  valid_606386 = validateParameter(valid_606386, JString, required = true,
                                 default = nil)
  if valid_606386 != nil:
    section.add "PolicyArn", valid_606386
  var valid_606387 = formData.getOrDefault("UserName")
  valid_606387 = validateParameter(valid_606387, JString, required = true,
                                 default = nil)
  if valid_606387 != nil:
    section.add "UserName", valid_606387
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606388: Call_PostAttachUserPolicy_606374; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606388.validator(path, query, header, formData, body)
  let scheme = call_606388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606388.url(scheme.get, call_606388.host, call_606388.base,
                         call_606388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606388, url, valid)

proc call*(call_606389: Call_PostAttachUserPolicy_606374; PolicyArn: string;
          UserName: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606390 = newJObject()
  var formData_606391 = newJObject()
  add(formData_606391, "PolicyArn", newJString(PolicyArn))
  add(formData_606391, "UserName", newJString(UserName))
  add(query_606390, "Action", newJString(Action))
  add(query_606390, "Version", newJString(Version))
  result = call_606389.call(nil, query_606390, nil, formData_606391, nil)

var postAttachUserPolicy* = Call_PostAttachUserPolicy_606374(
    name: "postAttachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_PostAttachUserPolicy_606375, base: "/",
    url: url_PostAttachUserPolicy_606376, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachUserPolicy_606357 = ref object of OpenApiRestCall_605589
proc url_GetAttachUserPolicy_606359(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachUserPolicy_606358(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_606360 = query.getOrDefault("UserName")
  valid_606360 = validateParameter(valid_606360, JString, required = true,
                                 default = nil)
  if valid_606360 != nil:
    section.add "UserName", valid_606360
  var valid_606361 = query.getOrDefault("PolicyArn")
  valid_606361 = validateParameter(valid_606361, JString, required = true,
                                 default = nil)
  if valid_606361 != nil:
    section.add "PolicyArn", valid_606361
  var valid_606362 = query.getOrDefault("Action")
  valid_606362 = validateParameter(valid_606362, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_606362 != nil:
    section.add "Action", valid_606362
  var valid_606363 = query.getOrDefault("Version")
  valid_606363 = validateParameter(valid_606363, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606363 != nil:
    section.add "Version", valid_606363
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606364 = header.getOrDefault("X-Amz-Signature")
  valid_606364 = validateParameter(valid_606364, JString, required = false,
                                 default = nil)
  if valid_606364 != nil:
    section.add "X-Amz-Signature", valid_606364
  var valid_606365 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606365 = validateParameter(valid_606365, JString, required = false,
                                 default = nil)
  if valid_606365 != nil:
    section.add "X-Amz-Content-Sha256", valid_606365
  var valid_606366 = header.getOrDefault("X-Amz-Date")
  valid_606366 = validateParameter(valid_606366, JString, required = false,
                                 default = nil)
  if valid_606366 != nil:
    section.add "X-Amz-Date", valid_606366
  var valid_606367 = header.getOrDefault("X-Amz-Credential")
  valid_606367 = validateParameter(valid_606367, JString, required = false,
                                 default = nil)
  if valid_606367 != nil:
    section.add "X-Amz-Credential", valid_606367
  var valid_606368 = header.getOrDefault("X-Amz-Security-Token")
  valid_606368 = validateParameter(valid_606368, JString, required = false,
                                 default = nil)
  if valid_606368 != nil:
    section.add "X-Amz-Security-Token", valid_606368
  var valid_606369 = header.getOrDefault("X-Amz-Algorithm")
  valid_606369 = validateParameter(valid_606369, JString, required = false,
                                 default = nil)
  if valid_606369 != nil:
    section.add "X-Amz-Algorithm", valid_606369
  var valid_606370 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606370 = validateParameter(valid_606370, JString, required = false,
                                 default = nil)
  if valid_606370 != nil:
    section.add "X-Amz-SignedHeaders", valid_606370
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606371: Call_GetAttachUserPolicy_606357; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606371.validator(path, query, header, formData, body)
  let scheme = call_606371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606371.url(scheme.get, call_606371.host, call_606371.base,
                         call_606371.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606371, url, valid)

proc call*(call_606372: Call_GetAttachUserPolicy_606357; UserName: string;
          PolicyArn: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606373 = newJObject()
  add(query_606373, "UserName", newJString(UserName))
  add(query_606373, "PolicyArn", newJString(PolicyArn))
  add(query_606373, "Action", newJString(Action))
  add(query_606373, "Version", newJString(Version))
  result = call_606372.call(nil, query_606373, nil, nil, nil)

var getAttachUserPolicy* = Call_GetAttachUserPolicy_606357(
    name: "getAttachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_GetAttachUserPolicy_606358, base: "/",
    url: url_GetAttachUserPolicy_606359, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostChangePassword_606409 = ref object of OpenApiRestCall_605589
proc url_PostChangePassword_606411(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostChangePassword_606410(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606412 = query.getOrDefault("Action")
  valid_606412 = validateParameter(valid_606412, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_606412 != nil:
    section.add "Action", valid_606412
  var valid_606413 = query.getOrDefault("Version")
  valid_606413 = validateParameter(valid_606413, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606413 != nil:
    section.add "Version", valid_606413
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606414 = header.getOrDefault("X-Amz-Signature")
  valid_606414 = validateParameter(valid_606414, JString, required = false,
                                 default = nil)
  if valid_606414 != nil:
    section.add "X-Amz-Signature", valid_606414
  var valid_606415 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606415 = validateParameter(valid_606415, JString, required = false,
                                 default = nil)
  if valid_606415 != nil:
    section.add "X-Amz-Content-Sha256", valid_606415
  var valid_606416 = header.getOrDefault("X-Amz-Date")
  valid_606416 = validateParameter(valid_606416, JString, required = false,
                                 default = nil)
  if valid_606416 != nil:
    section.add "X-Amz-Date", valid_606416
  var valid_606417 = header.getOrDefault("X-Amz-Credential")
  valid_606417 = validateParameter(valid_606417, JString, required = false,
                                 default = nil)
  if valid_606417 != nil:
    section.add "X-Amz-Credential", valid_606417
  var valid_606418 = header.getOrDefault("X-Amz-Security-Token")
  valid_606418 = validateParameter(valid_606418, JString, required = false,
                                 default = nil)
  if valid_606418 != nil:
    section.add "X-Amz-Security-Token", valid_606418
  var valid_606419 = header.getOrDefault("X-Amz-Algorithm")
  valid_606419 = validateParameter(valid_606419, JString, required = false,
                                 default = nil)
  if valid_606419 != nil:
    section.add "X-Amz-Algorithm", valid_606419
  var valid_606420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606420 = validateParameter(valid_606420, JString, required = false,
                                 default = nil)
  if valid_606420 != nil:
    section.add "X-Amz-SignedHeaders", valid_606420
  result.add "header", section
  ## parameters in `formData` object:
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `OldPassword` field"
  var valid_606421 = formData.getOrDefault("OldPassword")
  valid_606421 = validateParameter(valid_606421, JString, required = true,
                                 default = nil)
  if valid_606421 != nil:
    section.add "OldPassword", valid_606421
  var valid_606422 = formData.getOrDefault("NewPassword")
  valid_606422 = validateParameter(valid_606422, JString, required = true,
                                 default = nil)
  if valid_606422 != nil:
    section.add "NewPassword", valid_606422
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606423: Call_PostChangePassword_606409; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606423.validator(path, query, header, formData, body)
  let scheme = call_606423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606423.url(scheme.get, call_606423.host, call_606423.base,
                         call_606423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606423, url, valid)

proc call*(call_606424: Call_PostChangePassword_606409; OldPassword: string;
          NewPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## postChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  var query_606425 = newJObject()
  var formData_606426 = newJObject()
  add(formData_606426, "OldPassword", newJString(OldPassword))
  add(query_606425, "Action", newJString(Action))
  add(query_606425, "Version", newJString(Version))
  add(formData_606426, "NewPassword", newJString(NewPassword))
  result = call_606424.call(nil, query_606425, nil, formData_606426, nil)

var postChangePassword* = Call_PostChangePassword_606409(
    name: "postChangePassword", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ChangePassword",
    validator: validate_PostChangePassword_606410, base: "/",
    url: url_PostChangePassword_606411, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChangePassword_606392 = ref object of OpenApiRestCall_605589
proc url_GetChangePassword_606394(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetChangePassword_606393(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  ##   Version: JString (required)
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606395 = query.getOrDefault("Action")
  valid_606395 = validateParameter(valid_606395, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_606395 != nil:
    section.add "Action", valid_606395
  var valid_606396 = query.getOrDefault("OldPassword")
  valid_606396 = validateParameter(valid_606396, JString, required = true,
                                 default = nil)
  if valid_606396 != nil:
    section.add "OldPassword", valid_606396
  var valid_606397 = query.getOrDefault("Version")
  valid_606397 = validateParameter(valid_606397, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606397 != nil:
    section.add "Version", valid_606397
  var valid_606398 = query.getOrDefault("NewPassword")
  valid_606398 = validateParameter(valid_606398, JString, required = true,
                                 default = nil)
  if valid_606398 != nil:
    section.add "NewPassword", valid_606398
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606399 = header.getOrDefault("X-Amz-Signature")
  valid_606399 = validateParameter(valid_606399, JString, required = false,
                                 default = nil)
  if valid_606399 != nil:
    section.add "X-Amz-Signature", valid_606399
  var valid_606400 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606400 = validateParameter(valid_606400, JString, required = false,
                                 default = nil)
  if valid_606400 != nil:
    section.add "X-Amz-Content-Sha256", valid_606400
  var valid_606401 = header.getOrDefault("X-Amz-Date")
  valid_606401 = validateParameter(valid_606401, JString, required = false,
                                 default = nil)
  if valid_606401 != nil:
    section.add "X-Amz-Date", valid_606401
  var valid_606402 = header.getOrDefault("X-Amz-Credential")
  valid_606402 = validateParameter(valid_606402, JString, required = false,
                                 default = nil)
  if valid_606402 != nil:
    section.add "X-Amz-Credential", valid_606402
  var valid_606403 = header.getOrDefault("X-Amz-Security-Token")
  valid_606403 = validateParameter(valid_606403, JString, required = false,
                                 default = nil)
  if valid_606403 != nil:
    section.add "X-Amz-Security-Token", valid_606403
  var valid_606404 = header.getOrDefault("X-Amz-Algorithm")
  valid_606404 = validateParameter(valid_606404, JString, required = false,
                                 default = nil)
  if valid_606404 != nil:
    section.add "X-Amz-Algorithm", valid_606404
  var valid_606405 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606405 = validateParameter(valid_606405, JString, required = false,
                                 default = nil)
  if valid_606405 != nil:
    section.add "X-Amz-SignedHeaders", valid_606405
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606406: Call_GetChangePassword_606392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606406.validator(path, query, header, formData, body)
  let scheme = call_606406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606406.url(scheme.get, call_606406.host, call_606406.base,
                         call_606406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606406, url, valid)

proc call*(call_606407: Call_GetChangePassword_606392; OldPassword: string;
          NewPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## getChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Version: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  var query_606408 = newJObject()
  add(query_606408, "Action", newJString(Action))
  add(query_606408, "OldPassword", newJString(OldPassword))
  add(query_606408, "Version", newJString(Version))
  add(query_606408, "NewPassword", newJString(NewPassword))
  result = call_606407.call(nil, query_606408, nil, nil, nil)

var getChangePassword* = Call_GetChangePassword_606392(name: "getChangePassword",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ChangePassword", validator: validate_GetChangePassword_606393,
    base: "/", url: url_GetChangePassword_606394,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccessKey_606443 = ref object of OpenApiRestCall_605589
proc url_PostCreateAccessKey_606445(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAccessKey_606444(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606446 = query.getOrDefault("Action")
  valid_606446 = validateParameter(valid_606446, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_606446 != nil:
    section.add "Action", valid_606446
  var valid_606447 = query.getOrDefault("Version")
  valid_606447 = validateParameter(valid_606447, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606447 != nil:
    section.add "Version", valid_606447
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606448 = header.getOrDefault("X-Amz-Signature")
  valid_606448 = validateParameter(valid_606448, JString, required = false,
                                 default = nil)
  if valid_606448 != nil:
    section.add "X-Amz-Signature", valid_606448
  var valid_606449 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606449 = validateParameter(valid_606449, JString, required = false,
                                 default = nil)
  if valid_606449 != nil:
    section.add "X-Amz-Content-Sha256", valid_606449
  var valid_606450 = header.getOrDefault("X-Amz-Date")
  valid_606450 = validateParameter(valid_606450, JString, required = false,
                                 default = nil)
  if valid_606450 != nil:
    section.add "X-Amz-Date", valid_606450
  var valid_606451 = header.getOrDefault("X-Amz-Credential")
  valid_606451 = validateParameter(valid_606451, JString, required = false,
                                 default = nil)
  if valid_606451 != nil:
    section.add "X-Amz-Credential", valid_606451
  var valid_606452 = header.getOrDefault("X-Amz-Security-Token")
  valid_606452 = validateParameter(valid_606452, JString, required = false,
                                 default = nil)
  if valid_606452 != nil:
    section.add "X-Amz-Security-Token", valid_606452
  var valid_606453 = header.getOrDefault("X-Amz-Algorithm")
  valid_606453 = validateParameter(valid_606453, JString, required = false,
                                 default = nil)
  if valid_606453 != nil:
    section.add "X-Amz-Algorithm", valid_606453
  var valid_606454 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606454 = validateParameter(valid_606454, JString, required = false,
                                 default = nil)
  if valid_606454 != nil:
    section.add "X-Amz-SignedHeaders", valid_606454
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_606455 = formData.getOrDefault("UserName")
  valid_606455 = validateParameter(valid_606455, JString, required = false,
                                 default = nil)
  if valid_606455 != nil:
    section.add "UserName", valid_606455
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606456: Call_PostCreateAccessKey_606443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_606456.validator(path, query, header, formData, body)
  let scheme = call_606456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606456.url(scheme.get, call_606456.host, call_606456.base,
                         call_606456.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606456, url, valid)

proc call*(call_606457: Call_PostCreateAccessKey_606443; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606458 = newJObject()
  var formData_606459 = newJObject()
  add(formData_606459, "UserName", newJString(UserName))
  add(query_606458, "Action", newJString(Action))
  add(query_606458, "Version", newJString(Version))
  result = call_606457.call(nil, query_606458, nil, formData_606459, nil)

var postCreateAccessKey* = Call_PostCreateAccessKey_606443(
    name: "postCreateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccessKey",
    validator: validate_PostCreateAccessKey_606444, base: "/",
    url: url_PostCreateAccessKey_606445, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccessKey_606427 = ref object of OpenApiRestCall_605589
proc url_GetCreateAccessKey_606429(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAccessKey_606428(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606430 = query.getOrDefault("UserName")
  valid_606430 = validateParameter(valid_606430, JString, required = false,
                                 default = nil)
  if valid_606430 != nil:
    section.add "UserName", valid_606430
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606431 = query.getOrDefault("Action")
  valid_606431 = validateParameter(valid_606431, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_606431 != nil:
    section.add "Action", valid_606431
  var valid_606432 = query.getOrDefault("Version")
  valid_606432 = validateParameter(valid_606432, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606432 != nil:
    section.add "Version", valid_606432
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606433 = header.getOrDefault("X-Amz-Signature")
  valid_606433 = validateParameter(valid_606433, JString, required = false,
                                 default = nil)
  if valid_606433 != nil:
    section.add "X-Amz-Signature", valid_606433
  var valid_606434 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606434 = validateParameter(valid_606434, JString, required = false,
                                 default = nil)
  if valid_606434 != nil:
    section.add "X-Amz-Content-Sha256", valid_606434
  var valid_606435 = header.getOrDefault("X-Amz-Date")
  valid_606435 = validateParameter(valid_606435, JString, required = false,
                                 default = nil)
  if valid_606435 != nil:
    section.add "X-Amz-Date", valid_606435
  var valid_606436 = header.getOrDefault("X-Amz-Credential")
  valid_606436 = validateParameter(valid_606436, JString, required = false,
                                 default = nil)
  if valid_606436 != nil:
    section.add "X-Amz-Credential", valid_606436
  var valid_606437 = header.getOrDefault("X-Amz-Security-Token")
  valid_606437 = validateParameter(valid_606437, JString, required = false,
                                 default = nil)
  if valid_606437 != nil:
    section.add "X-Amz-Security-Token", valid_606437
  var valid_606438 = header.getOrDefault("X-Amz-Algorithm")
  valid_606438 = validateParameter(valid_606438, JString, required = false,
                                 default = nil)
  if valid_606438 != nil:
    section.add "X-Amz-Algorithm", valid_606438
  var valid_606439 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606439 = validateParameter(valid_606439, JString, required = false,
                                 default = nil)
  if valid_606439 != nil:
    section.add "X-Amz-SignedHeaders", valid_606439
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606440: Call_GetCreateAccessKey_606427; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_606440.validator(path, query, header, formData, body)
  let scheme = call_606440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606440.url(scheme.get, call_606440.host, call_606440.base,
                         call_606440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606440, url, valid)

proc call*(call_606441: Call_GetCreateAccessKey_606427; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606442 = newJObject()
  add(query_606442, "UserName", newJString(UserName))
  add(query_606442, "Action", newJString(Action))
  add(query_606442, "Version", newJString(Version))
  result = call_606441.call(nil, query_606442, nil, nil, nil)

var getCreateAccessKey* = Call_GetCreateAccessKey_606427(
    name: "getCreateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateAccessKey", validator: validate_GetCreateAccessKey_606428,
    base: "/", url: url_GetCreateAccessKey_606429,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccountAlias_606476 = ref object of OpenApiRestCall_605589
proc url_PostCreateAccountAlias_606478(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAccountAlias_606477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606479 = query.getOrDefault("Action")
  valid_606479 = validateParameter(valid_606479, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_606479 != nil:
    section.add "Action", valid_606479
  var valid_606480 = query.getOrDefault("Version")
  valid_606480 = validateParameter(valid_606480, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606480 != nil:
    section.add "Version", valid_606480
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606481 = header.getOrDefault("X-Amz-Signature")
  valid_606481 = validateParameter(valid_606481, JString, required = false,
                                 default = nil)
  if valid_606481 != nil:
    section.add "X-Amz-Signature", valid_606481
  var valid_606482 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606482 = validateParameter(valid_606482, JString, required = false,
                                 default = nil)
  if valid_606482 != nil:
    section.add "X-Amz-Content-Sha256", valid_606482
  var valid_606483 = header.getOrDefault("X-Amz-Date")
  valid_606483 = validateParameter(valid_606483, JString, required = false,
                                 default = nil)
  if valid_606483 != nil:
    section.add "X-Amz-Date", valid_606483
  var valid_606484 = header.getOrDefault("X-Amz-Credential")
  valid_606484 = validateParameter(valid_606484, JString, required = false,
                                 default = nil)
  if valid_606484 != nil:
    section.add "X-Amz-Credential", valid_606484
  var valid_606485 = header.getOrDefault("X-Amz-Security-Token")
  valid_606485 = validateParameter(valid_606485, JString, required = false,
                                 default = nil)
  if valid_606485 != nil:
    section.add "X-Amz-Security-Token", valid_606485
  var valid_606486 = header.getOrDefault("X-Amz-Algorithm")
  valid_606486 = validateParameter(valid_606486, JString, required = false,
                                 default = nil)
  if valid_606486 != nil:
    section.add "X-Amz-Algorithm", valid_606486
  var valid_606487 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606487 = validateParameter(valid_606487, JString, required = false,
                                 default = nil)
  if valid_606487 != nil:
    section.add "X-Amz-SignedHeaders", valid_606487
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_606488 = formData.getOrDefault("AccountAlias")
  valid_606488 = validateParameter(valid_606488, JString, required = true,
                                 default = nil)
  if valid_606488 != nil:
    section.add "AccountAlias", valid_606488
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606489: Call_PostCreateAccountAlias_606476; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_606489.validator(path, query, header, formData, body)
  let scheme = call_606489.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606489.url(scheme.get, call_606489.host, call_606489.base,
                         call_606489.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606489, url, valid)

proc call*(call_606490: Call_PostCreateAccountAlias_606476; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Version: string (required)
  var query_606491 = newJObject()
  var formData_606492 = newJObject()
  add(query_606491, "Action", newJString(Action))
  add(formData_606492, "AccountAlias", newJString(AccountAlias))
  add(query_606491, "Version", newJString(Version))
  result = call_606490.call(nil, query_606491, nil, formData_606492, nil)

var postCreateAccountAlias* = Call_PostCreateAccountAlias_606476(
    name: "postCreateAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_PostCreateAccountAlias_606477, base: "/",
    url: url_PostCreateAccountAlias_606478, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccountAlias_606460 = ref object of OpenApiRestCall_605589
proc url_GetCreateAccountAlias_606462(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAccountAlias_606461(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_606463 = query.getOrDefault("AccountAlias")
  valid_606463 = validateParameter(valid_606463, JString, required = true,
                                 default = nil)
  if valid_606463 != nil:
    section.add "AccountAlias", valid_606463
  var valid_606464 = query.getOrDefault("Action")
  valid_606464 = validateParameter(valid_606464, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_606464 != nil:
    section.add "Action", valid_606464
  var valid_606465 = query.getOrDefault("Version")
  valid_606465 = validateParameter(valid_606465, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606465 != nil:
    section.add "Version", valid_606465
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606466 = header.getOrDefault("X-Amz-Signature")
  valid_606466 = validateParameter(valid_606466, JString, required = false,
                                 default = nil)
  if valid_606466 != nil:
    section.add "X-Amz-Signature", valid_606466
  var valid_606467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606467 = validateParameter(valid_606467, JString, required = false,
                                 default = nil)
  if valid_606467 != nil:
    section.add "X-Amz-Content-Sha256", valid_606467
  var valid_606468 = header.getOrDefault("X-Amz-Date")
  valid_606468 = validateParameter(valid_606468, JString, required = false,
                                 default = nil)
  if valid_606468 != nil:
    section.add "X-Amz-Date", valid_606468
  var valid_606469 = header.getOrDefault("X-Amz-Credential")
  valid_606469 = validateParameter(valid_606469, JString, required = false,
                                 default = nil)
  if valid_606469 != nil:
    section.add "X-Amz-Credential", valid_606469
  var valid_606470 = header.getOrDefault("X-Amz-Security-Token")
  valid_606470 = validateParameter(valid_606470, JString, required = false,
                                 default = nil)
  if valid_606470 != nil:
    section.add "X-Amz-Security-Token", valid_606470
  var valid_606471 = header.getOrDefault("X-Amz-Algorithm")
  valid_606471 = validateParameter(valid_606471, JString, required = false,
                                 default = nil)
  if valid_606471 != nil:
    section.add "X-Amz-Algorithm", valid_606471
  var valid_606472 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606472 = validateParameter(valid_606472, JString, required = false,
                                 default = nil)
  if valid_606472 != nil:
    section.add "X-Amz-SignedHeaders", valid_606472
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606473: Call_GetCreateAccountAlias_606460; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_606473.validator(path, query, header, formData, body)
  let scheme = call_606473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606473.url(scheme.get, call_606473.host, call_606473.base,
                         call_606473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606473, url, valid)

proc call*(call_606474: Call_GetCreateAccountAlias_606460; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606475 = newJObject()
  add(query_606475, "AccountAlias", newJString(AccountAlias))
  add(query_606475, "Action", newJString(Action))
  add(query_606475, "Version", newJString(Version))
  result = call_606474.call(nil, query_606475, nil, nil, nil)

var getCreateAccountAlias* = Call_GetCreateAccountAlias_606460(
    name: "getCreateAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_GetCreateAccountAlias_606461, base: "/",
    url: url_GetCreateAccountAlias_606462, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGroup_606510 = ref object of OpenApiRestCall_605589
proc url_PostCreateGroup_606512(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateGroup_606511(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606513 = query.getOrDefault("Action")
  valid_606513 = validateParameter(valid_606513, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_606513 != nil:
    section.add "Action", valid_606513
  var valid_606514 = query.getOrDefault("Version")
  valid_606514 = validateParameter(valid_606514, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606514 != nil:
    section.add "Version", valid_606514
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606515 = header.getOrDefault("X-Amz-Signature")
  valid_606515 = validateParameter(valid_606515, JString, required = false,
                                 default = nil)
  if valid_606515 != nil:
    section.add "X-Amz-Signature", valid_606515
  var valid_606516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606516 = validateParameter(valid_606516, JString, required = false,
                                 default = nil)
  if valid_606516 != nil:
    section.add "X-Amz-Content-Sha256", valid_606516
  var valid_606517 = header.getOrDefault("X-Amz-Date")
  valid_606517 = validateParameter(valid_606517, JString, required = false,
                                 default = nil)
  if valid_606517 != nil:
    section.add "X-Amz-Date", valid_606517
  var valid_606518 = header.getOrDefault("X-Amz-Credential")
  valid_606518 = validateParameter(valid_606518, JString, required = false,
                                 default = nil)
  if valid_606518 != nil:
    section.add "X-Amz-Credential", valid_606518
  var valid_606519 = header.getOrDefault("X-Amz-Security-Token")
  valid_606519 = validateParameter(valid_606519, JString, required = false,
                                 default = nil)
  if valid_606519 != nil:
    section.add "X-Amz-Security-Token", valid_606519
  var valid_606520 = header.getOrDefault("X-Amz-Algorithm")
  valid_606520 = validateParameter(valid_606520, JString, required = false,
                                 default = nil)
  if valid_606520 != nil:
    section.add "X-Amz-Algorithm", valid_606520
  var valid_606521 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606521 = validateParameter(valid_606521, JString, required = false,
                                 default = nil)
  if valid_606521 != nil:
    section.add "X-Amz-SignedHeaders", valid_606521
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_606522 = formData.getOrDefault("GroupName")
  valid_606522 = validateParameter(valid_606522, JString, required = true,
                                 default = nil)
  if valid_606522 != nil:
    section.add "GroupName", valid_606522
  var valid_606523 = formData.getOrDefault("Path")
  valid_606523 = validateParameter(valid_606523, JString, required = false,
                                 default = nil)
  if valid_606523 != nil:
    section.add "Path", valid_606523
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606524: Call_PostCreateGroup_606510; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606524.validator(path, query, header, formData, body)
  let scheme = call_606524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606524.url(scheme.get, call_606524.host, call_606524.base,
                         call_606524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606524, url, valid)

proc call*(call_606525: Call_PostCreateGroup_606510; GroupName: string;
          Path: string = ""; Action: string = "CreateGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606526 = newJObject()
  var formData_606527 = newJObject()
  add(formData_606527, "GroupName", newJString(GroupName))
  add(formData_606527, "Path", newJString(Path))
  add(query_606526, "Action", newJString(Action))
  add(query_606526, "Version", newJString(Version))
  result = call_606525.call(nil, query_606526, nil, formData_606527, nil)

var postCreateGroup* = Call_PostCreateGroup_606510(name: "postCreateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_PostCreateGroup_606511,
    base: "/", url: url_PostCreateGroup_606512, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGroup_606493 = ref object of OpenApiRestCall_605589
proc url_GetCreateGroup_606495(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateGroup_606494(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_606496 = query.getOrDefault("GroupName")
  valid_606496 = validateParameter(valid_606496, JString, required = true,
                                 default = nil)
  if valid_606496 != nil:
    section.add "GroupName", valid_606496
  var valid_606497 = query.getOrDefault("Path")
  valid_606497 = validateParameter(valid_606497, JString, required = false,
                                 default = nil)
  if valid_606497 != nil:
    section.add "Path", valid_606497
  var valid_606498 = query.getOrDefault("Action")
  valid_606498 = validateParameter(valid_606498, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_606498 != nil:
    section.add "Action", valid_606498
  var valid_606499 = query.getOrDefault("Version")
  valid_606499 = validateParameter(valid_606499, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606499 != nil:
    section.add "Version", valid_606499
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606500 = header.getOrDefault("X-Amz-Signature")
  valid_606500 = validateParameter(valid_606500, JString, required = false,
                                 default = nil)
  if valid_606500 != nil:
    section.add "X-Amz-Signature", valid_606500
  var valid_606501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606501 = validateParameter(valid_606501, JString, required = false,
                                 default = nil)
  if valid_606501 != nil:
    section.add "X-Amz-Content-Sha256", valid_606501
  var valid_606502 = header.getOrDefault("X-Amz-Date")
  valid_606502 = validateParameter(valid_606502, JString, required = false,
                                 default = nil)
  if valid_606502 != nil:
    section.add "X-Amz-Date", valid_606502
  var valid_606503 = header.getOrDefault("X-Amz-Credential")
  valid_606503 = validateParameter(valid_606503, JString, required = false,
                                 default = nil)
  if valid_606503 != nil:
    section.add "X-Amz-Credential", valid_606503
  var valid_606504 = header.getOrDefault("X-Amz-Security-Token")
  valid_606504 = validateParameter(valid_606504, JString, required = false,
                                 default = nil)
  if valid_606504 != nil:
    section.add "X-Amz-Security-Token", valid_606504
  var valid_606505 = header.getOrDefault("X-Amz-Algorithm")
  valid_606505 = validateParameter(valid_606505, JString, required = false,
                                 default = nil)
  if valid_606505 != nil:
    section.add "X-Amz-Algorithm", valid_606505
  var valid_606506 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606506 = validateParameter(valid_606506, JString, required = false,
                                 default = nil)
  if valid_606506 != nil:
    section.add "X-Amz-SignedHeaders", valid_606506
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606507: Call_GetCreateGroup_606493; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606507.validator(path, query, header, formData, body)
  let scheme = call_606507.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606507.url(scheme.get, call_606507.host, call_606507.base,
                         call_606507.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606507, url, valid)

proc call*(call_606508: Call_GetCreateGroup_606493; GroupName: string;
          Path: string = ""; Action: string = "CreateGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606509 = newJObject()
  add(query_606509, "GroupName", newJString(GroupName))
  add(query_606509, "Path", newJString(Path))
  add(query_606509, "Action", newJString(Action))
  add(query_606509, "Version", newJString(Version))
  result = call_606508.call(nil, query_606509, nil, nil, nil)

var getCreateGroup* = Call_GetCreateGroup_606493(name: "getCreateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_GetCreateGroup_606494,
    base: "/", url: url_GetCreateGroup_606495, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateInstanceProfile_606545 = ref object of OpenApiRestCall_605589
proc url_PostCreateInstanceProfile_606547(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateInstanceProfile_606546(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606548 = query.getOrDefault("Action")
  valid_606548 = validateParameter(valid_606548, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_606548 != nil:
    section.add "Action", valid_606548
  var valid_606549 = query.getOrDefault("Version")
  valid_606549 = validateParameter(valid_606549, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606549 != nil:
    section.add "Version", valid_606549
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606550 = header.getOrDefault("X-Amz-Signature")
  valid_606550 = validateParameter(valid_606550, JString, required = false,
                                 default = nil)
  if valid_606550 != nil:
    section.add "X-Amz-Signature", valid_606550
  var valid_606551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606551 = validateParameter(valid_606551, JString, required = false,
                                 default = nil)
  if valid_606551 != nil:
    section.add "X-Amz-Content-Sha256", valid_606551
  var valid_606552 = header.getOrDefault("X-Amz-Date")
  valid_606552 = validateParameter(valid_606552, JString, required = false,
                                 default = nil)
  if valid_606552 != nil:
    section.add "X-Amz-Date", valid_606552
  var valid_606553 = header.getOrDefault("X-Amz-Credential")
  valid_606553 = validateParameter(valid_606553, JString, required = false,
                                 default = nil)
  if valid_606553 != nil:
    section.add "X-Amz-Credential", valid_606553
  var valid_606554 = header.getOrDefault("X-Amz-Security-Token")
  valid_606554 = validateParameter(valid_606554, JString, required = false,
                                 default = nil)
  if valid_606554 != nil:
    section.add "X-Amz-Security-Token", valid_606554
  var valid_606555 = header.getOrDefault("X-Amz-Algorithm")
  valid_606555 = validateParameter(valid_606555, JString, required = false,
                                 default = nil)
  if valid_606555 != nil:
    section.add "X-Amz-Algorithm", valid_606555
  var valid_606556 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606556 = validateParameter(valid_606556, JString, required = false,
                                 default = nil)
  if valid_606556 != nil:
    section.add "X-Amz-SignedHeaders", valid_606556
  result.add "header", section
  ## parameters in `formData` object:
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_606557 = formData.getOrDefault("Path")
  valid_606557 = validateParameter(valid_606557, JString, required = false,
                                 default = nil)
  if valid_606557 != nil:
    section.add "Path", valid_606557
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_606558 = formData.getOrDefault("InstanceProfileName")
  valid_606558 = validateParameter(valid_606558, JString, required = true,
                                 default = nil)
  if valid_606558 != nil:
    section.add "InstanceProfileName", valid_606558
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606559: Call_PostCreateInstanceProfile_606545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606559.validator(path, query, header, formData, body)
  let scheme = call_606559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606559.url(scheme.get, call_606559.host, call_606559.base,
                         call_606559.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606559, url, valid)

proc call*(call_606560: Call_PostCreateInstanceProfile_606545;
          InstanceProfileName: string; Path: string = "";
          Action: string = "CreateInstanceProfile"; Version: string = "2010-05-08"): Recallable =
  ## postCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_606561 = newJObject()
  var formData_606562 = newJObject()
  add(formData_606562, "Path", newJString(Path))
  add(query_606561, "Action", newJString(Action))
  add(formData_606562, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_606561, "Version", newJString(Version))
  result = call_606560.call(nil, query_606561, nil, formData_606562, nil)

var postCreateInstanceProfile* = Call_PostCreateInstanceProfile_606545(
    name: "postCreateInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_PostCreateInstanceProfile_606546, base: "/",
    url: url_PostCreateInstanceProfile_606547,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateInstanceProfile_606528 = ref object of OpenApiRestCall_605589
proc url_GetCreateInstanceProfile_606530(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateInstanceProfile_606529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606531 = query.getOrDefault("Path")
  valid_606531 = validateParameter(valid_606531, JString, required = false,
                                 default = nil)
  if valid_606531 != nil:
    section.add "Path", valid_606531
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606532 = query.getOrDefault("Action")
  valid_606532 = validateParameter(valid_606532, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_606532 != nil:
    section.add "Action", valid_606532
  var valid_606533 = query.getOrDefault("InstanceProfileName")
  valid_606533 = validateParameter(valid_606533, JString, required = true,
                                 default = nil)
  if valid_606533 != nil:
    section.add "InstanceProfileName", valid_606533
  var valid_606534 = query.getOrDefault("Version")
  valid_606534 = validateParameter(valid_606534, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606534 != nil:
    section.add "Version", valid_606534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606535 = header.getOrDefault("X-Amz-Signature")
  valid_606535 = validateParameter(valid_606535, JString, required = false,
                                 default = nil)
  if valid_606535 != nil:
    section.add "X-Amz-Signature", valid_606535
  var valid_606536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606536 = validateParameter(valid_606536, JString, required = false,
                                 default = nil)
  if valid_606536 != nil:
    section.add "X-Amz-Content-Sha256", valid_606536
  var valid_606537 = header.getOrDefault("X-Amz-Date")
  valid_606537 = validateParameter(valid_606537, JString, required = false,
                                 default = nil)
  if valid_606537 != nil:
    section.add "X-Amz-Date", valid_606537
  var valid_606538 = header.getOrDefault("X-Amz-Credential")
  valid_606538 = validateParameter(valid_606538, JString, required = false,
                                 default = nil)
  if valid_606538 != nil:
    section.add "X-Amz-Credential", valid_606538
  var valid_606539 = header.getOrDefault("X-Amz-Security-Token")
  valid_606539 = validateParameter(valid_606539, JString, required = false,
                                 default = nil)
  if valid_606539 != nil:
    section.add "X-Amz-Security-Token", valid_606539
  var valid_606540 = header.getOrDefault("X-Amz-Algorithm")
  valid_606540 = validateParameter(valid_606540, JString, required = false,
                                 default = nil)
  if valid_606540 != nil:
    section.add "X-Amz-Algorithm", valid_606540
  var valid_606541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606541 = validateParameter(valid_606541, JString, required = false,
                                 default = nil)
  if valid_606541 != nil:
    section.add "X-Amz-SignedHeaders", valid_606541
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606542: Call_GetCreateInstanceProfile_606528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606542.validator(path, query, header, formData, body)
  let scheme = call_606542.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606542.url(scheme.get, call_606542.host, call_606542.base,
                         call_606542.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606542, url, valid)

proc call*(call_606543: Call_GetCreateInstanceProfile_606528;
          InstanceProfileName: string; Path: string = "";
          Action: string = "CreateInstanceProfile"; Version: string = "2010-05-08"): Recallable =
  ## getCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_606544 = newJObject()
  add(query_606544, "Path", newJString(Path))
  add(query_606544, "Action", newJString(Action))
  add(query_606544, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_606544, "Version", newJString(Version))
  result = call_606543.call(nil, query_606544, nil, nil, nil)

var getCreateInstanceProfile* = Call_GetCreateInstanceProfile_606528(
    name: "getCreateInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_GetCreateInstanceProfile_606529, base: "/",
    url: url_GetCreateInstanceProfile_606530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLoginProfile_606581 = ref object of OpenApiRestCall_605589
proc url_PostCreateLoginProfile_606583(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateLoginProfile_606582(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606584 = query.getOrDefault("Action")
  valid_606584 = validateParameter(valid_606584, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_606584 != nil:
    section.add "Action", valid_606584
  var valid_606585 = query.getOrDefault("Version")
  valid_606585 = validateParameter(valid_606585, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606585 != nil:
    section.add "Version", valid_606585
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606586 = header.getOrDefault("X-Amz-Signature")
  valid_606586 = validateParameter(valid_606586, JString, required = false,
                                 default = nil)
  if valid_606586 != nil:
    section.add "X-Amz-Signature", valid_606586
  var valid_606587 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606587 = validateParameter(valid_606587, JString, required = false,
                                 default = nil)
  if valid_606587 != nil:
    section.add "X-Amz-Content-Sha256", valid_606587
  var valid_606588 = header.getOrDefault("X-Amz-Date")
  valid_606588 = validateParameter(valid_606588, JString, required = false,
                                 default = nil)
  if valid_606588 != nil:
    section.add "X-Amz-Date", valid_606588
  var valid_606589 = header.getOrDefault("X-Amz-Credential")
  valid_606589 = validateParameter(valid_606589, JString, required = false,
                                 default = nil)
  if valid_606589 != nil:
    section.add "X-Amz-Credential", valid_606589
  var valid_606590 = header.getOrDefault("X-Amz-Security-Token")
  valid_606590 = validateParameter(valid_606590, JString, required = false,
                                 default = nil)
  if valid_606590 != nil:
    section.add "X-Amz-Security-Token", valid_606590
  var valid_606591 = header.getOrDefault("X-Amz-Algorithm")
  valid_606591 = validateParameter(valid_606591, JString, required = false,
                                 default = nil)
  if valid_606591 != nil:
    section.add "X-Amz-Algorithm", valid_606591
  var valid_606592 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606592 = validateParameter(valid_606592, JString, required = false,
                                 default = nil)
  if valid_606592 != nil:
    section.add "X-Amz-SignedHeaders", valid_606592
  result.add "header", section
  ## parameters in `formData` object:
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Password` field"
  var valid_606593 = formData.getOrDefault("Password")
  valid_606593 = validateParameter(valid_606593, JString, required = true,
                                 default = nil)
  if valid_606593 != nil:
    section.add "Password", valid_606593
  var valid_606594 = formData.getOrDefault("UserName")
  valid_606594 = validateParameter(valid_606594, JString, required = true,
                                 default = nil)
  if valid_606594 != nil:
    section.add "UserName", valid_606594
  var valid_606595 = formData.getOrDefault("PasswordResetRequired")
  valid_606595 = validateParameter(valid_606595, JBool, required = false, default = nil)
  if valid_606595 != nil:
    section.add "PasswordResetRequired", valid_606595
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606596: Call_PostCreateLoginProfile_606581; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_606596.validator(path, query, header, formData, body)
  let scheme = call_606596.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606596.url(scheme.get, call_606596.host, call_606596.base,
                         call_606596.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606596, url, valid)

proc call*(call_606597: Call_PostCreateLoginProfile_606581; Password: string;
          UserName: string; Action: string = "CreateLoginProfile";
          PasswordResetRequired: bool = false; Version: string = "2010-05-08"): Recallable =
  ## postCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Version: string (required)
  var query_606598 = newJObject()
  var formData_606599 = newJObject()
  add(formData_606599, "Password", newJString(Password))
  add(formData_606599, "UserName", newJString(UserName))
  add(query_606598, "Action", newJString(Action))
  add(formData_606599, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_606598, "Version", newJString(Version))
  result = call_606597.call(nil, query_606598, nil, formData_606599, nil)

var postCreateLoginProfile* = Call_PostCreateLoginProfile_606581(
    name: "postCreateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_PostCreateLoginProfile_606582, base: "/",
    url: url_PostCreateLoginProfile_606583, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLoginProfile_606563 = ref object of OpenApiRestCall_605589
proc url_GetCreateLoginProfile_606565(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateLoginProfile_606564(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Password` field"
  var valid_606566 = query.getOrDefault("Password")
  valid_606566 = validateParameter(valid_606566, JString, required = true,
                                 default = nil)
  if valid_606566 != nil:
    section.add "Password", valid_606566
  var valid_606567 = query.getOrDefault("UserName")
  valid_606567 = validateParameter(valid_606567, JString, required = true,
                                 default = nil)
  if valid_606567 != nil:
    section.add "UserName", valid_606567
  var valid_606568 = query.getOrDefault("PasswordResetRequired")
  valid_606568 = validateParameter(valid_606568, JBool, required = false, default = nil)
  if valid_606568 != nil:
    section.add "PasswordResetRequired", valid_606568
  var valid_606569 = query.getOrDefault("Action")
  valid_606569 = validateParameter(valid_606569, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_606569 != nil:
    section.add "Action", valid_606569
  var valid_606570 = query.getOrDefault("Version")
  valid_606570 = validateParameter(valid_606570, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606570 != nil:
    section.add "Version", valid_606570
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606571 = header.getOrDefault("X-Amz-Signature")
  valid_606571 = validateParameter(valid_606571, JString, required = false,
                                 default = nil)
  if valid_606571 != nil:
    section.add "X-Amz-Signature", valid_606571
  var valid_606572 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606572 = validateParameter(valid_606572, JString, required = false,
                                 default = nil)
  if valid_606572 != nil:
    section.add "X-Amz-Content-Sha256", valid_606572
  var valid_606573 = header.getOrDefault("X-Amz-Date")
  valid_606573 = validateParameter(valid_606573, JString, required = false,
                                 default = nil)
  if valid_606573 != nil:
    section.add "X-Amz-Date", valid_606573
  var valid_606574 = header.getOrDefault("X-Amz-Credential")
  valid_606574 = validateParameter(valid_606574, JString, required = false,
                                 default = nil)
  if valid_606574 != nil:
    section.add "X-Amz-Credential", valid_606574
  var valid_606575 = header.getOrDefault("X-Amz-Security-Token")
  valid_606575 = validateParameter(valid_606575, JString, required = false,
                                 default = nil)
  if valid_606575 != nil:
    section.add "X-Amz-Security-Token", valid_606575
  var valid_606576 = header.getOrDefault("X-Amz-Algorithm")
  valid_606576 = validateParameter(valid_606576, JString, required = false,
                                 default = nil)
  if valid_606576 != nil:
    section.add "X-Amz-Algorithm", valid_606576
  var valid_606577 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606577 = validateParameter(valid_606577, JString, required = false,
                                 default = nil)
  if valid_606577 != nil:
    section.add "X-Amz-SignedHeaders", valid_606577
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606578: Call_GetCreateLoginProfile_606563; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_606578.validator(path, query, header, formData, body)
  let scheme = call_606578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606578.url(scheme.get, call_606578.host, call_606578.base,
                         call_606578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606578, url, valid)

proc call*(call_606579: Call_GetCreateLoginProfile_606563; Password: string;
          UserName: string; PasswordResetRequired: bool = false;
          Action: string = "CreateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606580 = newJObject()
  add(query_606580, "Password", newJString(Password))
  add(query_606580, "UserName", newJString(UserName))
  add(query_606580, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_606580, "Action", newJString(Action))
  add(query_606580, "Version", newJString(Version))
  result = call_606579.call(nil, query_606580, nil, nil, nil)

var getCreateLoginProfile* = Call_GetCreateLoginProfile_606563(
    name: "getCreateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_GetCreateLoginProfile_606564, base: "/",
    url: url_GetCreateLoginProfile_606565, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOpenIDConnectProvider_606618 = ref object of OpenApiRestCall_605589
proc url_PostCreateOpenIDConnectProvider_606620(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOpenIDConnectProvider_606619(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606621 = query.getOrDefault("Action")
  valid_606621 = validateParameter(valid_606621, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_606621 != nil:
    section.add "Action", valid_606621
  var valid_606622 = query.getOrDefault("Version")
  valid_606622 = validateParameter(valid_606622, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606622 != nil:
    section.add "Version", valid_606622
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606623 = header.getOrDefault("X-Amz-Signature")
  valid_606623 = validateParameter(valid_606623, JString, required = false,
                                 default = nil)
  if valid_606623 != nil:
    section.add "X-Amz-Signature", valid_606623
  var valid_606624 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606624 = validateParameter(valid_606624, JString, required = false,
                                 default = nil)
  if valid_606624 != nil:
    section.add "X-Amz-Content-Sha256", valid_606624
  var valid_606625 = header.getOrDefault("X-Amz-Date")
  valid_606625 = validateParameter(valid_606625, JString, required = false,
                                 default = nil)
  if valid_606625 != nil:
    section.add "X-Amz-Date", valid_606625
  var valid_606626 = header.getOrDefault("X-Amz-Credential")
  valid_606626 = validateParameter(valid_606626, JString, required = false,
                                 default = nil)
  if valid_606626 != nil:
    section.add "X-Amz-Credential", valid_606626
  var valid_606627 = header.getOrDefault("X-Amz-Security-Token")
  valid_606627 = validateParameter(valid_606627, JString, required = false,
                                 default = nil)
  if valid_606627 != nil:
    section.add "X-Amz-Security-Token", valid_606627
  var valid_606628 = header.getOrDefault("X-Amz-Algorithm")
  valid_606628 = validateParameter(valid_606628, JString, required = false,
                                 default = nil)
  if valid_606628 != nil:
    section.add "X-Amz-Algorithm", valid_606628
  var valid_606629 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606629 = validateParameter(valid_606629, JString, required = false,
                                 default = nil)
  if valid_606629 != nil:
    section.add "X-Amz-SignedHeaders", valid_606629
  result.add "header", section
  ## parameters in `formData` object:
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Url` field"
  var valid_606630 = formData.getOrDefault("Url")
  valid_606630 = validateParameter(valid_606630, JString, required = true,
                                 default = nil)
  if valid_606630 != nil:
    section.add "Url", valid_606630
  var valid_606631 = formData.getOrDefault("ClientIDList")
  valid_606631 = validateParameter(valid_606631, JArray, required = false,
                                 default = nil)
  if valid_606631 != nil:
    section.add "ClientIDList", valid_606631
  var valid_606632 = formData.getOrDefault("ThumbprintList")
  valid_606632 = validateParameter(valid_606632, JArray, required = true, default = nil)
  if valid_606632 != nil:
    section.add "ThumbprintList", valid_606632
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606633: Call_PostCreateOpenIDConnectProvider_606618;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_606633.validator(path, query, header, formData, body)
  let scheme = call_606633.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606633.url(scheme.get, call_606633.host, call_606633.base,
                         call_606633.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606633, url, valid)

proc call*(call_606634: Call_PostCreateOpenIDConnectProvider_606618; Url: string;
          ThumbprintList: JsonNode; ClientIDList: JsonNode = nil;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606635 = newJObject()
  var formData_606636 = newJObject()
  add(formData_606636, "Url", newJString(Url))
  if ClientIDList != nil:
    formData_606636.add "ClientIDList", ClientIDList
  if ThumbprintList != nil:
    formData_606636.add "ThumbprintList", ThumbprintList
  add(query_606635, "Action", newJString(Action))
  add(query_606635, "Version", newJString(Version))
  result = call_606634.call(nil, query_606635, nil, formData_606636, nil)

var postCreateOpenIDConnectProvider* = Call_PostCreateOpenIDConnectProvider_606618(
    name: "postCreateOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_PostCreateOpenIDConnectProvider_606619, base: "/",
    url: url_PostCreateOpenIDConnectProvider_606620,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOpenIDConnectProvider_606600 = ref object of OpenApiRestCall_605589
proc url_GetCreateOpenIDConnectProvider_606602(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOpenIDConnectProvider_606601(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: JString (required)
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: JString (required)
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_606603 = query.getOrDefault("ThumbprintList")
  valid_606603 = validateParameter(valid_606603, JArray, required = true, default = nil)
  if valid_606603 != nil:
    section.add "ThumbprintList", valid_606603
  var valid_606604 = query.getOrDefault("Action")
  valid_606604 = validateParameter(valid_606604, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_606604 != nil:
    section.add "Action", valid_606604
  var valid_606605 = query.getOrDefault("Url")
  valid_606605 = validateParameter(valid_606605, JString, required = true,
                                 default = nil)
  if valid_606605 != nil:
    section.add "Url", valid_606605
  var valid_606606 = query.getOrDefault("Version")
  valid_606606 = validateParameter(valid_606606, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606606 != nil:
    section.add "Version", valid_606606
  var valid_606607 = query.getOrDefault("ClientIDList")
  valid_606607 = validateParameter(valid_606607, JArray, required = false,
                                 default = nil)
  if valid_606607 != nil:
    section.add "ClientIDList", valid_606607
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606608 = header.getOrDefault("X-Amz-Signature")
  valid_606608 = validateParameter(valid_606608, JString, required = false,
                                 default = nil)
  if valid_606608 != nil:
    section.add "X-Amz-Signature", valid_606608
  var valid_606609 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606609 = validateParameter(valid_606609, JString, required = false,
                                 default = nil)
  if valid_606609 != nil:
    section.add "X-Amz-Content-Sha256", valid_606609
  var valid_606610 = header.getOrDefault("X-Amz-Date")
  valid_606610 = validateParameter(valid_606610, JString, required = false,
                                 default = nil)
  if valid_606610 != nil:
    section.add "X-Amz-Date", valid_606610
  var valid_606611 = header.getOrDefault("X-Amz-Credential")
  valid_606611 = validateParameter(valid_606611, JString, required = false,
                                 default = nil)
  if valid_606611 != nil:
    section.add "X-Amz-Credential", valid_606611
  var valid_606612 = header.getOrDefault("X-Amz-Security-Token")
  valid_606612 = validateParameter(valid_606612, JString, required = false,
                                 default = nil)
  if valid_606612 != nil:
    section.add "X-Amz-Security-Token", valid_606612
  var valid_606613 = header.getOrDefault("X-Amz-Algorithm")
  valid_606613 = validateParameter(valid_606613, JString, required = false,
                                 default = nil)
  if valid_606613 != nil:
    section.add "X-Amz-Algorithm", valid_606613
  var valid_606614 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606614 = validateParameter(valid_606614, JString, required = false,
                                 default = nil)
  if valid_606614 != nil:
    section.add "X-Amz-SignedHeaders", valid_606614
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606615: Call_GetCreateOpenIDConnectProvider_606600; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_606615.validator(path, query, header, formData, body)
  let scheme = call_606615.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606615.url(scheme.get, call_606615.host, call_606615.base,
                         call_606615.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606615, url, valid)

proc call*(call_606616: Call_GetCreateOpenIDConnectProvider_606600;
          ThumbprintList: JsonNode; Url: string;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"; ClientIDList: JsonNode = nil): Recallable =
  ## getCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: string (required)
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  var query_606617 = newJObject()
  if ThumbprintList != nil:
    query_606617.add "ThumbprintList", ThumbprintList
  add(query_606617, "Action", newJString(Action))
  add(query_606617, "Url", newJString(Url))
  add(query_606617, "Version", newJString(Version))
  if ClientIDList != nil:
    query_606617.add "ClientIDList", ClientIDList
  result = call_606616.call(nil, query_606617, nil, nil, nil)

var getCreateOpenIDConnectProvider* = Call_GetCreateOpenIDConnectProvider_606600(
    name: "getCreateOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_GetCreateOpenIDConnectProvider_606601, base: "/",
    url: url_GetCreateOpenIDConnectProvider_606602,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicy_606656 = ref object of OpenApiRestCall_605589
proc url_PostCreatePolicy_606658(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreatePolicy_606657(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606659 = query.getOrDefault("Action")
  valid_606659 = validateParameter(valid_606659, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_606659 != nil:
    section.add "Action", valid_606659
  var valid_606660 = query.getOrDefault("Version")
  valid_606660 = validateParameter(valid_606660, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606660 != nil:
    section.add "Version", valid_606660
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606661 = header.getOrDefault("X-Amz-Signature")
  valid_606661 = validateParameter(valid_606661, JString, required = false,
                                 default = nil)
  if valid_606661 != nil:
    section.add "X-Amz-Signature", valid_606661
  var valid_606662 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606662 = validateParameter(valid_606662, JString, required = false,
                                 default = nil)
  if valid_606662 != nil:
    section.add "X-Amz-Content-Sha256", valid_606662
  var valid_606663 = header.getOrDefault("X-Amz-Date")
  valid_606663 = validateParameter(valid_606663, JString, required = false,
                                 default = nil)
  if valid_606663 != nil:
    section.add "X-Amz-Date", valid_606663
  var valid_606664 = header.getOrDefault("X-Amz-Credential")
  valid_606664 = validateParameter(valid_606664, JString, required = false,
                                 default = nil)
  if valid_606664 != nil:
    section.add "X-Amz-Credential", valid_606664
  var valid_606665 = header.getOrDefault("X-Amz-Security-Token")
  valid_606665 = validateParameter(valid_606665, JString, required = false,
                                 default = nil)
  if valid_606665 != nil:
    section.add "X-Amz-Security-Token", valid_606665
  var valid_606666 = header.getOrDefault("X-Amz-Algorithm")
  valid_606666 = validateParameter(valid_606666, JString, required = false,
                                 default = nil)
  if valid_606666 != nil:
    section.add "X-Amz-Algorithm", valid_606666
  var valid_606667 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606667 = validateParameter(valid_606667, JString, required = false,
                                 default = nil)
  if valid_606667 != nil:
    section.add "X-Amz-SignedHeaders", valid_606667
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_606668 = formData.getOrDefault("PolicyDocument")
  valid_606668 = validateParameter(valid_606668, JString, required = true,
                                 default = nil)
  if valid_606668 != nil:
    section.add "PolicyDocument", valid_606668
  var valid_606669 = formData.getOrDefault("Description")
  valid_606669 = validateParameter(valid_606669, JString, required = false,
                                 default = nil)
  if valid_606669 != nil:
    section.add "Description", valid_606669
  var valid_606670 = formData.getOrDefault("Path")
  valid_606670 = validateParameter(valid_606670, JString, required = false,
                                 default = nil)
  if valid_606670 != nil:
    section.add "Path", valid_606670
  var valid_606671 = formData.getOrDefault("PolicyName")
  valid_606671 = validateParameter(valid_606671, JString, required = true,
                                 default = nil)
  if valid_606671 != nil:
    section.add "PolicyName", valid_606671
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606672: Call_PostCreatePolicy_606656; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606672.validator(path, query, header, formData, body)
  let scheme = call_606672.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606672.url(scheme.get, call_606672.host, call_606672.base,
                         call_606672.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606672, url, valid)

proc call*(call_606673: Call_PostCreatePolicy_606656; PolicyDocument: string;
          PolicyName: string; Description: string = ""; Path: string = "";
          Action: string = "CreatePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  var query_606674 = newJObject()
  var formData_606675 = newJObject()
  add(formData_606675, "PolicyDocument", newJString(PolicyDocument))
  add(formData_606675, "Description", newJString(Description))
  add(formData_606675, "Path", newJString(Path))
  add(query_606674, "Action", newJString(Action))
  add(query_606674, "Version", newJString(Version))
  add(formData_606675, "PolicyName", newJString(PolicyName))
  result = call_606673.call(nil, query_606674, nil, formData_606675, nil)

var postCreatePolicy* = Call_PostCreatePolicy_606656(name: "postCreatePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_PostCreatePolicy_606657,
    base: "/", url: url_PostCreatePolicy_606658,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicy_606637 = ref object of OpenApiRestCall_605589
proc url_GetCreatePolicy_606639(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreatePolicy_606638(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_606640 = query.getOrDefault("PolicyName")
  valid_606640 = validateParameter(valid_606640, JString, required = true,
                                 default = nil)
  if valid_606640 != nil:
    section.add "PolicyName", valid_606640
  var valid_606641 = query.getOrDefault("Path")
  valid_606641 = validateParameter(valid_606641, JString, required = false,
                                 default = nil)
  if valid_606641 != nil:
    section.add "Path", valid_606641
  var valid_606642 = query.getOrDefault("PolicyDocument")
  valid_606642 = validateParameter(valid_606642, JString, required = true,
                                 default = nil)
  if valid_606642 != nil:
    section.add "PolicyDocument", valid_606642
  var valid_606643 = query.getOrDefault("Action")
  valid_606643 = validateParameter(valid_606643, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_606643 != nil:
    section.add "Action", valid_606643
  var valid_606644 = query.getOrDefault("Description")
  valid_606644 = validateParameter(valid_606644, JString, required = false,
                                 default = nil)
  if valid_606644 != nil:
    section.add "Description", valid_606644
  var valid_606645 = query.getOrDefault("Version")
  valid_606645 = validateParameter(valid_606645, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606645 != nil:
    section.add "Version", valid_606645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606646 = header.getOrDefault("X-Amz-Signature")
  valid_606646 = validateParameter(valid_606646, JString, required = false,
                                 default = nil)
  if valid_606646 != nil:
    section.add "X-Amz-Signature", valid_606646
  var valid_606647 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606647 = validateParameter(valid_606647, JString, required = false,
                                 default = nil)
  if valid_606647 != nil:
    section.add "X-Amz-Content-Sha256", valid_606647
  var valid_606648 = header.getOrDefault("X-Amz-Date")
  valid_606648 = validateParameter(valid_606648, JString, required = false,
                                 default = nil)
  if valid_606648 != nil:
    section.add "X-Amz-Date", valid_606648
  var valid_606649 = header.getOrDefault("X-Amz-Credential")
  valid_606649 = validateParameter(valid_606649, JString, required = false,
                                 default = nil)
  if valid_606649 != nil:
    section.add "X-Amz-Credential", valid_606649
  var valid_606650 = header.getOrDefault("X-Amz-Security-Token")
  valid_606650 = validateParameter(valid_606650, JString, required = false,
                                 default = nil)
  if valid_606650 != nil:
    section.add "X-Amz-Security-Token", valid_606650
  var valid_606651 = header.getOrDefault("X-Amz-Algorithm")
  valid_606651 = validateParameter(valid_606651, JString, required = false,
                                 default = nil)
  if valid_606651 != nil:
    section.add "X-Amz-Algorithm", valid_606651
  var valid_606652 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606652 = validateParameter(valid_606652, JString, required = false,
                                 default = nil)
  if valid_606652 != nil:
    section.add "X-Amz-SignedHeaders", valid_606652
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606653: Call_GetCreatePolicy_606637; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606653.validator(path, query, header, formData, body)
  let scheme = call_606653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606653.url(scheme.get, call_606653.host, call_606653.base,
                         call_606653.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606653, url, valid)

proc call*(call_606654: Call_GetCreatePolicy_606637; PolicyName: string;
          PolicyDocument: string; Path: string = ""; Action: string = "CreatePolicy";
          Description: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Version: string (required)
  var query_606655 = newJObject()
  add(query_606655, "PolicyName", newJString(PolicyName))
  add(query_606655, "Path", newJString(Path))
  add(query_606655, "PolicyDocument", newJString(PolicyDocument))
  add(query_606655, "Action", newJString(Action))
  add(query_606655, "Description", newJString(Description))
  add(query_606655, "Version", newJString(Version))
  result = call_606654.call(nil, query_606655, nil, nil, nil)

var getCreatePolicy* = Call_GetCreatePolicy_606637(name: "getCreatePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_GetCreatePolicy_606638,
    base: "/", url: url_GetCreatePolicy_606639, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicyVersion_606694 = ref object of OpenApiRestCall_605589
proc url_PostCreatePolicyVersion_606696(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreatePolicyVersion_606695(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606697 = query.getOrDefault("Action")
  valid_606697 = validateParameter(valid_606697, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_606697 != nil:
    section.add "Action", valid_606697
  var valid_606698 = query.getOrDefault("Version")
  valid_606698 = validateParameter(valid_606698, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606698 != nil:
    section.add "Version", valid_606698
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606699 = header.getOrDefault("X-Amz-Signature")
  valid_606699 = validateParameter(valid_606699, JString, required = false,
                                 default = nil)
  if valid_606699 != nil:
    section.add "X-Amz-Signature", valid_606699
  var valid_606700 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606700 = validateParameter(valid_606700, JString, required = false,
                                 default = nil)
  if valid_606700 != nil:
    section.add "X-Amz-Content-Sha256", valid_606700
  var valid_606701 = header.getOrDefault("X-Amz-Date")
  valid_606701 = validateParameter(valid_606701, JString, required = false,
                                 default = nil)
  if valid_606701 != nil:
    section.add "X-Amz-Date", valid_606701
  var valid_606702 = header.getOrDefault("X-Amz-Credential")
  valid_606702 = validateParameter(valid_606702, JString, required = false,
                                 default = nil)
  if valid_606702 != nil:
    section.add "X-Amz-Credential", valid_606702
  var valid_606703 = header.getOrDefault("X-Amz-Security-Token")
  valid_606703 = validateParameter(valid_606703, JString, required = false,
                                 default = nil)
  if valid_606703 != nil:
    section.add "X-Amz-Security-Token", valid_606703
  var valid_606704 = header.getOrDefault("X-Amz-Algorithm")
  valid_606704 = validateParameter(valid_606704, JString, required = false,
                                 default = nil)
  if valid_606704 != nil:
    section.add "X-Amz-Algorithm", valid_606704
  var valid_606705 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606705 = validateParameter(valid_606705, JString, required = false,
                                 default = nil)
  if valid_606705 != nil:
    section.add "X-Amz-SignedHeaders", valid_606705
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_606706 = formData.getOrDefault("PolicyDocument")
  valid_606706 = validateParameter(valid_606706, JString, required = true,
                                 default = nil)
  if valid_606706 != nil:
    section.add "PolicyDocument", valid_606706
  var valid_606707 = formData.getOrDefault("SetAsDefault")
  valid_606707 = validateParameter(valid_606707, JBool, required = false, default = nil)
  if valid_606707 != nil:
    section.add "SetAsDefault", valid_606707
  var valid_606708 = formData.getOrDefault("PolicyArn")
  valid_606708 = validateParameter(valid_606708, JString, required = true,
                                 default = nil)
  if valid_606708 != nil:
    section.add "PolicyArn", valid_606708
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606709: Call_PostCreatePolicyVersion_606694; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606709.validator(path, query, header, formData, body)
  let scheme = call_606709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606709.url(scheme.get, call_606709.host, call_606709.base,
                         call_606709.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606709, url, valid)

proc call*(call_606710: Call_PostCreatePolicyVersion_606694;
          PolicyDocument: string; PolicyArn: string; SetAsDefault: bool = false;
          Action: string = "CreatePolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## postCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606711 = newJObject()
  var formData_606712 = newJObject()
  add(formData_606712, "PolicyDocument", newJString(PolicyDocument))
  add(formData_606712, "SetAsDefault", newJBool(SetAsDefault))
  add(formData_606712, "PolicyArn", newJString(PolicyArn))
  add(query_606711, "Action", newJString(Action))
  add(query_606711, "Version", newJString(Version))
  result = call_606710.call(nil, query_606711, nil, formData_606712, nil)

var postCreatePolicyVersion* = Call_PostCreatePolicyVersion_606694(
    name: "postCreatePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_PostCreatePolicyVersion_606695, base: "/",
    url: url_PostCreatePolicyVersion_606696, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicyVersion_606676 = ref object of OpenApiRestCall_605589
proc url_GetCreatePolicyVersion_606678(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreatePolicyVersion_606677(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_606679 = query.getOrDefault("PolicyArn")
  valid_606679 = validateParameter(valid_606679, JString, required = true,
                                 default = nil)
  if valid_606679 != nil:
    section.add "PolicyArn", valid_606679
  var valid_606680 = query.getOrDefault("SetAsDefault")
  valid_606680 = validateParameter(valid_606680, JBool, required = false, default = nil)
  if valid_606680 != nil:
    section.add "SetAsDefault", valid_606680
  var valid_606681 = query.getOrDefault("PolicyDocument")
  valid_606681 = validateParameter(valid_606681, JString, required = true,
                                 default = nil)
  if valid_606681 != nil:
    section.add "PolicyDocument", valid_606681
  var valid_606682 = query.getOrDefault("Action")
  valid_606682 = validateParameter(valid_606682, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_606682 != nil:
    section.add "Action", valid_606682
  var valid_606683 = query.getOrDefault("Version")
  valid_606683 = validateParameter(valid_606683, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606683 != nil:
    section.add "Version", valid_606683
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606684 = header.getOrDefault("X-Amz-Signature")
  valid_606684 = validateParameter(valid_606684, JString, required = false,
                                 default = nil)
  if valid_606684 != nil:
    section.add "X-Amz-Signature", valid_606684
  var valid_606685 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606685 = validateParameter(valid_606685, JString, required = false,
                                 default = nil)
  if valid_606685 != nil:
    section.add "X-Amz-Content-Sha256", valid_606685
  var valid_606686 = header.getOrDefault("X-Amz-Date")
  valid_606686 = validateParameter(valid_606686, JString, required = false,
                                 default = nil)
  if valid_606686 != nil:
    section.add "X-Amz-Date", valid_606686
  var valid_606687 = header.getOrDefault("X-Amz-Credential")
  valid_606687 = validateParameter(valid_606687, JString, required = false,
                                 default = nil)
  if valid_606687 != nil:
    section.add "X-Amz-Credential", valid_606687
  var valid_606688 = header.getOrDefault("X-Amz-Security-Token")
  valid_606688 = validateParameter(valid_606688, JString, required = false,
                                 default = nil)
  if valid_606688 != nil:
    section.add "X-Amz-Security-Token", valid_606688
  var valid_606689 = header.getOrDefault("X-Amz-Algorithm")
  valid_606689 = validateParameter(valid_606689, JString, required = false,
                                 default = nil)
  if valid_606689 != nil:
    section.add "X-Amz-Algorithm", valid_606689
  var valid_606690 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606690 = validateParameter(valid_606690, JString, required = false,
                                 default = nil)
  if valid_606690 != nil:
    section.add "X-Amz-SignedHeaders", valid_606690
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606691: Call_GetCreatePolicyVersion_606676; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606691.validator(path, query, header, formData, body)
  let scheme = call_606691.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606691.url(scheme.get, call_606691.host, call_606691.base,
                         call_606691.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606691, url, valid)

proc call*(call_606692: Call_GetCreatePolicyVersion_606676; PolicyArn: string;
          PolicyDocument: string; SetAsDefault: bool = false;
          Action: string = "CreatePolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606693 = newJObject()
  add(query_606693, "PolicyArn", newJString(PolicyArn))
  add(query_606693, "SetAsDefault", newJBool(SetAsDefault))
  add(query_606693, "PolicyDocument", newJString(PolicyDocument))
  add(query_606693, "Action", newJString(Action))
  add(query_606693, "Version", newJString(Version))
  result = call_606692.call(nil, query_606693, nil, nil, nil)

var getCreatePolicyVersion* = Call_GetCreatePolicyVersion_606676(
    name: "getCreatePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_GetCreatePolicyVersion_606677, base: "/",
    url: url_GetCreatePolicyVersion_606678, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateRole_606735 = ref object of OpenApiRestCall_605589
proc url_PostCreateRole_606737(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateRole_606736(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606738 = query.getOrDefault("Action")
  valid_606738 = validateParameter(valid_606738, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_606738 != nil:
    section.add "Action", valid_606738
  var valid_606739 = query.getOrDefault("Version")
  valid_606739 = validateParameter(valid_606739, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606739 != nil:
    section.add "Version", valid_606739
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606740 = header.getOrDefault("X-Amz-Signature")
  valid_606740 = validateParameter(valid_606740, JString, required = false,
                                 default = nil)
  if valid_606740 != nil:
    section.add "X-Amz-Signature", valid_606740
  var valid_606741 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606741 = validateParameter(valid_606741, JString, required = false,
                                 default = nil)
  if valid_606741 != nil:
    section.add "X-Amz-Content-Sha256", valid_606741
  var valid_606742 = header.getOrDefault("X-Amz-Date")
  valid_606742 = validateParameter(valid_606742, JString, required = false,
                                 default = nil)
  if valid_606742 != nil:
    section.add "X-Amz-Date", valid_606742
  var valid_606743 = header.getOrDefault("X-Amz-Credential")
  valid_606743 = validateParameter(valid_606743, JString, required = false,
                                 default = nil)
  if valid_606743 != nil:
    section.add "X-Amz-Credential", valid_606743
  var valid_606744 = header.getOrDefault("X-Amz-Security-Token")
  valid_606744 = validateParameter(valid_606744, JString, required = false,
                                 default = nil)
  if valid_606744 != nil:
    section.add "X-Amz-Security-Token", valid_606744
  var valid_606745 = header.getOrDefault("X-Amz-Algorithm")
  valid_606745 = validateParameter(valid_606745, JString, required = false,
                                 default = nil)
  if valid_606745 != nil:
    section.add "X-Amz-Algorithm", valid_606745
  var valid_606746 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606746 = validateParameter(valid_606746, JString, required = false,
                                 default = nil)
  if valid_606746 != nil:
    section.add "X-Amz-SignedHeaders", valid_606746
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString
  ##              : A description of the role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  section = newJObject()
  var valid_606747 = formData.getOrDefault("Description")
  valid_606747 = validateParameter(valid_606747, JString, required = false,
                                 default = nil)
  if valid_606747 != nil:
    section.add "Description", valid_606747
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_606748 = formData.getOrDefault("RoleName")
  valid_606748 = validateParameter(valid_606748, JString, required = true,
                                 default = nil)
  if valid_606748 != nil:
    section.add "RoleName", valid_606748
  var valid_606749 = formData.getOrDefault("Path")
  valid_606749 = validateParameter(valid_606749, JString, required = false,
                                 default = nil)
  if valid_606749 != nil:
    section.add "Path", valid_606749
  var valid_606750 = formData.getOrDefault("Tags")
  valid_606750 = validateParameter(valid_606750, JArray, required = false,
                                 default = nil)
  if valid_606750 != nil:
    section.add "Tags", valid_606750
  var valid_606751 = formData.getOrDefault("PermissionsBoundary")
  valid_606751 = validateParameter(valid_606751, JString, required = false,
                                 default = nil)
  if valid_606751 != nil:
    section.add "PermissionsBoundary", valid_606751
  var valid_606752 = formData.getOrDefault("MaxSessionDuration")
  valid_606752 = validateParameter(valid_606752, JInt, required = false, default = nil)
  if valid_606752 != nil:
    section.add "MaxSessionDuration", valid_606752
  var valid_606753 = formData.getOrDefault("AssumeRolePolicyDocument")
  valid_606753 = validateParameter(valid_606753, JString, required = true,
                                 default = nil)
  if valid_606753 != nil:
    section.add "AssumeRolePolicyDocument", valid_606753
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606754: Call_PostCreateRole_606735; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_606754.validator(path, query, header, formData, body)
  let scheme = call_606754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606754.url(scheme.get, call_606754.host, call_606754.base,
                         call_606754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606754, url, valid)

proc call*(call_606755: Call_PostCreateRole_606735; RoleName: string;
          AssumeRolePolicyDocument: string; Description: string = "";
          Path: string = ""; Action: string = "CreateRole"; Tags: JsonNode = nil;
          PermissionsBoundary: string = ""; MaxSessionDuration: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   Description: string
  ##              : A description of the role.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  var query_606756 = newJObject()
  var formData_606757 = newJObject()
  add(formData_606757, "Description", newJString(Description))
  add(formData_606757, "RoleName", newJString(RoleName))
  add(formData_606757, "Path", newJString(Path))
  add(query_606756, "Action", newJString(Action))
  if Tags != nil:
    formData_606757.add "Tags", Tags
  add(formData_606757, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(formData_606757, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_606756, "Version", newJString(Version))
  add(formData_606757, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  result = call_606755.call(nil, query_606756, nil, formData_606757, nil)

var postCreateRole* = Call_PostCreateRole_606735(name: "postCreateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_PostCreateRole_606736,
    base: "/", url: url_PostCreateRole_606737, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateRole_606713 = ref object of OpenApiRestCall_605589
proc url_GetCreateRole_606715(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateRole_606714(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : A description of the role.
  ##   Version: JString (required)
  section = newJObject()
  var valid_606716 = query.getOrDefault("Tags")
  valid_606716 = validateParameter(valid_606716, JArray, required = false,
                                 default = nil)
  if valid_606716 != nil:
    section.add "Tags", valid_606716
  assert query != nil, "query argument is necessary due to required `AssumeRolePolicyDocument` field"
  var valid_606717 = query.getOrDefault("AssumeRolePolicyDocument")
  valid_606717 = validateParameter(valid_606717, JString, required = true,
                                 default = nil)
  if valid_606717 != nil:
    section.add "AssumeRolePolicyDocument", valid_606717
  var valid_606718 = query.getOrDefault("PermissionsBoundary")
  valid_606718 = validateParameter(valid_606718, JString, required = false,
                                 default = nil)
  if valid_606718 != nil:
    section.add "PermissionsBoundary", valid_606718
  var valid_606719 = query.getOrDefault("Path")
  valid_606719 = validateParameter(valid_606719, JString, required = false,
                                 default = nil)
  if valid_606719 != nil:
    section.add "Path", valid_606719
  var valid_606720 = query.getOrDefault("RoleName")
  valid_606720 = validateParameter(valid_606720, JString, required = true,
                                 default = nil)
  if valid_606720 != nil:
    section.add "RoleName", valid_606720
  var valid_606721 = query.getOrDefault("MaxSessionDuration")
  valid_606721 = validateParameter(valid_606721, JInt, required = false, default = nil)
  if valid_606721 != nil:
    section.add "MaxSessionDuration", valid_606721
  var valid_606722 = query.getOrDefault("Action")
  valid_606722 = validateParameter(valid_606722, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_606722 != nil:
    section.add "Action", valid_606722
  var valid_606723 = query.getOrDefault("Description")
  valid_606723 = validateParameter(valid_606723, JString, required = false,
                                 default = nil)
  if valid_606723 != nil:
    section.add "Description", valid_606723
  var valid_606724 = query.getOrDefault("Version")
  valid_606724 = validateParameter(valid_606724, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606724 != nil:
    section.add "Version", valid_606724
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606725 = header.getOrDefault("X-Amz-Signature")
  valid_606725 = validateParameter(valid_606725, JString, required = false,
                                 default = nil)
  if valid_606725 != nil:
    section.add "X-Amz-Signature", valid_606725
  var valid_606726 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606726 = validateParameter(valid_606726, JString, required = false,
                                 default = nil)
  if valid_606726 != nil:
    section.add "X-Amz-Content-Sha256", valid_606726
  var valid_606727 = header.getOrDefault("X-Amz-Date")
  valid_606727 = validateParameter(valid_606727, JString, required = false,
                                 default = nil)
  if valid_606727 != nil:
    section.add "X-Amz-Date", valid_606727
  var valid_606728 = header.getOrDefault("X-Amz-Credential")
  valid_606728 = validateParameter(valid_606728, JString, required = false,
                                 default = nil)
  if valid_606728 != nil:
    section.add "X-Amz-Credential", valid_606728
  var valid_606729 = header.getOrDefault("X-Amz-Security-Token")
  valid_606729 = validateParameter(valid_606729, JString, required = false,
                                 default = nil)
  if valid_606729 != nil:
    section.add "X-Amz-Security-Token", valid_606729
  var valid_606730 = header.getOrDefault("X-Amz-Algorithm")
  valid_606730 = validateParameter(valid_606730, JString, required = false,
                                 default = nil)
  if valid_606730 != nil:
    section.add "X-Amz-Algorithm", valid_606730
  var valid_606731 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606731 = validateParameter(valid_606731, JString, required = false,
                                 default = nil)
  if valid_606731 != nil:
    section.add "X-Amz-SignedHeaders", valid_606731
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606732: Call_GetCreateRole_606713; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_606732.validator(path, query, header, formData, body)
  let scheme = call_606732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606732.url(scheme.get, call_606732.host, call_606732.base,
                         call_606732.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606732, url, valid)

proc call*(call_606733: Call_GetCreateRole_606713;
          AssumeRolePolicyDocument: string; RoleName: string; Tags: JsonNode = nil;
          PermissionsBoundary: string = ""; Path: string = "";
          MaxSessionDuration: int = 0; Action: string = "CreateRole";
          Description: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Description: string
  ##              : A description of the role.
  ##   Version: string (required)
  var query_606734 = newJObject()
  if Tags != nil:
    query_606734.add "Tags", Tags
  add(query_606734, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  add(query_606734, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_606734, "Path", newJString(Path))
  add(query_606734, "RoleName", newJString(RoleName))
  add(query_606734, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_606734, "Action", newJString(Action))
  add(query_606734, "Description", newJString(Description))
  add(query_606734, "Version", newJString(Version))
  result = call_606733.call(nil, query_606734, nil, nil, nil)

var getCreateRole* = Call_GetCreateRole_606713(name: "getCreateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_GetCreateRole_606714,
    base: "/", url: url_GetCreateRole_606715, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSAMLProvider_606775 = ref object of OpenApiRestCall_605589
proc url_PostCreateSAMLProvider_606777(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateSAMLProvider_606776(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606778 = query.getOrDefault("Action")
  valid_606778 = validateParameter(valid_606778, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_606778 != nil:
    section.add "Action", valid_606778
  var valid_606779 = query.getOrDefault("Version")
  valid_606779 = validateParameter(valid_606779, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606779 != nil:
    section.add "Version", valid_606779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606780 = header.getOrDefault("X-Amz-Signature")
  valid_606780 = validateParameter(valid_606780, JString, required = false,
                                 default = nil)
  if valid_606780 != nil:
    section.add "X-Amz-Signature", valid_606780
  var valid_606781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606781 = validateParameter(valid_606781, JString, required = false,
                                 default = nil)
  if valid_606781 != nil:
    section.add "X-Amz-Content-Sha256", valid_606781
  var valid_606782 = header.getOrDefault("X-Amz-Date")
  valid_606782 = validateParameter(valid_606782, JString, required = false,
                                 default = nil)
  if valid_606782 != nil:
    section.add "X-Amz-Date", valid_606782
  var valid_606783 = header.getOrDefault("X-Amz-Credential")
  valid_606783 = validateParameter(valid_606783, JString, required = false,
                                 default = nil)
  if valid_606783 != nil:
    section.add "X-Amz-Credential", valid_606783
  var valid_606784 = header.getOrDefault("X-Amz-Security-Token")
  valid_606784 = validateParameter(valid_606784, JString, required = false,
                                 default = nil)
  if valid_606784 != nil:
    section.add "X-Amz-Security-Token", valid_606784
  var valid_606785 = header.getOrDefault("X-Amz-Algorithm")
  valid_606785 = validateParameter(valid_606785, JString, required = false,
                                 default = nil)
  if valid_606785 != nil:
    section.add "X-Amz-Algorithm", valid_606785
  var valid_606786 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606786 = validateParameter(valid_606786, JString, required = false,
                                 default = nil)
  if valid_606786 != nil:
    section.add "X-Amz-SignedHeaders", valid_606786
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLMetadataDocument` field"
  var valid_606787 = formData.getOrDefault("SAMLMetadataDocument")
  valid_606787 = validateParameter(valid_606787, JString, required = true,
                                 default = nil)
  if valid_606787 != nil:
    section.add "SAMLMetadataDocument", valid_606787
  var valid_606788 = formData.getOrDefault("Name")
  valid_606788 = validateParameter(valid_606788, JString, required = true,
                                 default = nil)
  if valid_606788 != nil:
    section.add "Name", valid_606788
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606789: Call_PostCreateSAMLProvider_606775; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606789.validator(path, query, header, formData, body)
  let scheme = call_606789.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606789.url(scheme.get, call_606789.host, call_606789.base,
                         call_606789.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606789, url, valid)

proc call*(call_606790: Call_PostCreateSAMLProvider_606775;
          SAMLMetadataDocument: string; Name: string;
          Action: string = "CreateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Action: string (required)
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_606791 = newJObject()
  var formData_606792 = newJObject()
  add(formData_606792, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_606791, "Action", newJString(Action))
  add(formData_606792, "Name", newJString(Name))
  add(query_606791, "Version", newJString(Version))
  result = call_606790.call(nil, query_606791, nil, formData_606792, nil)

var postCreateSAMLProvider* = Call_PostCreateSAMLProvider_606775(
    name: "postCreateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_PostCreateSAMLProvider_606776, base: "/",
    url: url_PostCreateSAMLProvider_606777, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSAMLProvider_606758 = ref object of OpenApiRestCall_605589
proc url_GetCreateSAMLProvider_606760(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateSAMLProvider_606759(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Name` field"
  var valid_606761 = query.getOrDefault("Name")
  valid_606761 = validateParameter(valid_606761, JString, required = true,
                                 default = nil)
  if valid_606761 != nil:
    section.add "Name", valid_606761
  var valid_606762 = query.getOrDefault("Action")
  valid_606762 = validateParameter(valid_606762, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_606762 != nil:
    section.add "Action", valid_606762
  var valid_606763 = query.getOrDefault("SAMLMetadataDocument")
  valid_606763 = validateParameter(valid_606763, JString, required = true,
                                 default = nil)
  if valid_606763 != nil:
    section.add "SAMLMetadataDocument", valid_606763
  var valid_606764 = query.getOrDefault("Version")
  valid_606764 = validateParameter(valid_606764, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606764 != nil:
    section.add "Version", valid_606764
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606765 = header.getOrDefault("X-Amz-Signature")
  valid_606765 = validateParameter(valid_606765, JString, required = false,
                                 default = nil)
  if valid_606765 != nil:
    section.add "X-Amz-Signature", valid_606765
  var valid_606766 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606766 = validateParameter(valid_606766, JString, required = false,
                                 default = nil)
  if valid_606766 != nil:
    section.add "X-Amz-Content-Sha256", valid_606766
  var valid_606767 = header.getOrDefault("X-Amz-Date")
  valid_606767 = validateParameter(valid_606767, JString, required = false,
                                 default = nil)
  if valid_606767 != nil:
    section.add "X-Amz-Date", valid_606767
  var valid_606768 = header.getOrDefault("X-Amz-Credential")
  valid_606768 = validateParameter(valid_606768, JString, required = false,
                                 default = nil)
  if valid_606768 != nil:
    section.add "X-Amz-Credential", valid_606768
  var valid_606769 = header.getOrDefault("X-Amz-Security-Token")
  valid_606769 = validateParameter(valid_606769, JString, required = false,
                                 default = nil)
  if valid_606769 != nil:
    section.add "X-Amz-Security-Token", valid_606769
  var valid_606770 = header.getOrDefault("X-Amz-Algorithm")
  valid_606770 = validateParameter(valid_606770, JString, required = false,
                                 default = nil)
  if valid_606770 != nil:
    section.add "X-Amz-Algorithm", valid_606770
  var valid_606771 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606771 = validateParameter(valid_606771, JString, required = false,
                                 default = nil)
  if valid_606771 != nil:
    section.add "X-Amz-SignedHeaders", valid_606771
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606772: Call_GetCreateSAMLProvider_606758; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606772.validator(path, query, header, formData, body)
  let scheme = call_606772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606772.url(scheme.get, call_606772.host, call_606772.base,
                         call_606772.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606772, url, valid)

proc call*(call_606773: Call_GetCreateSAMLProvider_606758; Name: string;
          SAMLMetadataDocument: string; Action: string = "CreateSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Version: string (required)
  var query_606774 = newJObject()
  add(query_606774, "Name", newJString(Name))
  add(query_606774, "Action", newJString(Action))
  add(query_606774, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_606774, "Version", newJString(Version))
  result = call_606773.call(nil, query_606774, nil, nil, nil)

var getCreateSAMLProvider* = Call_GetCreateSAMLProvider_606758(
    name: "getCreateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_GetCreateSAMLProvider_606759, base: "/",
    url: url_GetCreateSAMLProvider_606760, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceLinkedRole_606811 = ref object of OpenApiRestCall_605589
proc url_PostCreateServiceLinkedRole_606813(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateServiceLinkedRole_606812(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606814 = query.getOrDefault("Action")
  valid_606814 = validateParameter(valid_606814, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_606814 != nil:
    section.add "Action", valid_606814
  var valid_606815 = query.getOrDefault("Version")
  valid_606815 = validateParameter(valid_606815, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606815 != nil:
    section.add "Version", valid_606815
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606816 = header.getOrDefault("X-Amz-Signature")
  valid_606816 = validateParameter(valid_606816, JString, required = false,
                                 default = nil)
  if valid_606816 != nil:
    section.add "X-Amz-Signature", valid_606816
  var valid_606817 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606817 = validateParameter(valid_606817, JString, required = false,
                                 default = nil)
  if valid_606817 != nil:
    section.add "X-Amz-Content-Sha256", valid_606817
  var valid_606818 = header.getOrDefault("X-Amz-Date")
  valid_606818 = validateParameter(valid_606818, JString, required = false,
                                 default = nil)
  if valid_606818 != nil:
    section.add "X-Amz-Date", valid_606818
  var valid_606819 = header.getOrDefault("X-Amz-Credential")
  valid_606819 = validateParameter(valid_606819, JString, required = false,
                                 default = nil)
  if valid_606819 != nil:
    section.add "X-Amz-Credential", valid_606819
  var valid_606820 = header.getOrDefault("X-Amz-Security-Token")
  valid_606820 = validateParameter(valid_606820, JString, required = false,
                                 default = nil)
  if valid_606820 != nil:
    section.add "X-Amz-Security-Token", valid_606820
  var valid_606821 = header.getOrDefault("X-Amz-Algorithm")
  valid_606821 = validateParameter(valid_606821, JString, required = false,
                                 default = nil)
  if valid_606821 != nil:
    section.add "X-Amz-Algorithm", valid_606821
  var valid_606822 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606822 = validateParameter(valid_606822, JString, required = false,
                                 default = nil)
  if valid_606822 != nil:
    section.add "X-Amz-SignedHeaders", valid_606822
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Description: JString
  ##              : The description of the role.
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  section = newJObject()
  var valid_606823 = formData.getOrDefault("CustomSuffix")
  valid_606823 = validateParameter(valid_606823, JString, required = false,
                                 default = nil)
  if valid_606823 != nil:
    section.add "CustomSuffix", valid_606823
  var valid_606824 = formData.getOrDefault("Description")
  valid_606824 = validateParameter(valid_606824, JString, required = false,
                                 default = nil)
  if valid_606824 != nil:
    section.add "Description", valid_606824
  assert formData != nil,
        "formData argument is necessary due to required `AWSServiceName` field"
  var valid_606825 = formData.getOrDefault("AWSServiceName")
  valid_606825 = validateParameter(valid_606825, JString, required = true,
                                 default = nil)
  if valid_606825 != nil:
    section.add "AWSServiceName", valid_606825
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606826: Call_PostCreateServiceLinkedRole_606811; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_606826.validator(path, query, header, formData, body)
  let scheme = call_606826.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606826.url(scheme.get, call_606826.host, call_606826.base,
                         call_606826.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606826, url, valid)

proc call*(call_606827: Call_PostCreateServiceLinkedRole_606811;
          AWSServiceName: string; CustomSuffix: string = ""; Description: string = "";
          Action: string = "CreateServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## postCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Description: string
  ##              : The description of the role.
  ##   Action: string (required)
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Version: string (required)
  var query_606828 = newJObject()
  var formData_606829 = newJObject()
  add(formData_606829, "CustomSuffix", newJString(CustomSuffix))
  add(formData_606829, "Description", newJString(Description))
  add(query_606828, "Action", newJString(Action))
  add(formData_606829, "AWSServiceName", newJString(AWSServiceName))
  add(query_606828, "Version", newJString(Version))
  result = call_606827.call(nil, query_606828, nil, formData_606829, nil)

var postCreateServiceLinkedRole* = Call_PostCreateServiceLinkedRole_606811(
    name: "postCreateServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_PostCreateServiceLinkedRole_606812, base: "/",
    url: url_PostCreateServiceLinkedRole_606813,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceLinkedRole_606793 = ref object of OpenApiRestCall_605589
proc url_GetCreateServiceLinkedRole_606795(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateServiceLinkedRole_606794(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : The description of the role.
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606796 = query.getOrDefault("CustomSuffix")
  valid_606796 = validateParameter(valid_606796, JString, required = false,
                                 default = nil)
  if valid_606796 != nil:
    section.add "CustomSuffix", valid_606796
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606797 = query.getOrDefault("Action")
  valid_606797 = validateParameter(valid_606797, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_606797 != nil:
    section.add "Action", valid_606797
  var valid_606798 = query.getOrDefault("Description")
  valid_606798 = validateParameter(valid_606798, JString, required = false,
                                 default = nil)
  if valid_606798 != nil:
    section.add "Description", valid_606798
  var valid_606799 = query.getOrDefault("AWSServiceName")
  valid_606799 = validateParameter(valid_606799, JString, required = true,
                                 default = nil)
  if valid_606799 != nil:
    section.add "AWSServiceName", valid_606799
  var valid_606800 = query.getOrDefault("Version")
  valid_606800 = validateParameter(valid_606800, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606800 != nil:
    section.add "Version", valid_606800
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606801 = header.getOrDefault("X-Amz-Signature")
  valid_606801 = validateParameter(valid_606801, JString, required = false,
                                 default = nil)
  if valid_606801 != nil:
    section.add "X-Amz-Signature", valid_606801
  var valid_606802 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606802 = validateParameter(valid_606802, JString, required = false,
                                 default = nil)
  if valid_606802 != nil:
    section.add "X-Amz-Content-Sha256", valid_606802
  var valid_606803 = header.getOrDefault("X-Amz-Date")
  valid_606803 = validateParameter(valid_606803, JString, required = false,
                                 default = nil)
  if valid_606803 != nil:
    section.add "X-Amz-Date", valid_606803
  var valid_606804 = header.getOrDefault("X-Amz-Credential")
  valid_606804 = validateParameter(valid_606804, JString, required = false,
                                 default = nil)
  if valid_606804 != nil:
    section.add "X-Amz-Credential", valid_606804
  var valid_606805 = header.getOrDefault("X-Amz-Security-Token")
  valid_606805 = validateParameter(valid_606805, JString, required = false,
                                 default = nil)
  if valid_606805 != nil:
    section.add "X-Amz-Security-Token", valid_606805
  var valid_606806 = header.getOrDefault("X-Amz-Algorithm")
  valid_606806 = validateParameter(valid_606806, JString, required = false,
                                 default = nil)
  if valid_606806 != nil:
    section.add "X-Amz-Algorithm", valid_606806
  var valid_606807 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606807 = validateParameter(valid_606807, JString, required = false,
                                 default = nil)
  if valid_606807 != nil:
    section.add "X-Amz-SignedHeaders", valid_606807
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606808: Call_GetCreateServiceLinkedRole_606793; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_606808.validator(path, query, header, formData, body)
  let scheme = call_606808.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606808.url(scheme.get, call_606808.host, call_606808.base,
                         call_606808.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606808, url, valid)

proc call*(call_606809: Call_GetCreateServiceLinkedRole_606793;
          AWSServiceName: string; CustomSuffix: string = "";
          Action: string = "CreateServiceLinkedRole"; Description: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Action: string (required)
  ##   Description: string
  ##              : The description of the role.
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Version: string (required)
  var query_606810 = newJObject()
  add(query_606810, "CustomSuffix", newJString(CustomSuffix))
  add(query_606810, "Action", newJString(Action))
  add(query_606810, "Description", newJString(Description))
  add(query_606810, "AWSServiceName", newJString(AWSServiceName))
  add(query_606810, "Version", newJString(Version))
  result = call_606809.call(nil, query_606810, nil, nil, nil)

var getCreateServiceLinkedRole* = Call_GetCreateServiceLinkedRole_606793(
    name: "getCreateServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_GetCreateServiceLinkedRole_606794, base: "/",
    url: url_GetCreateServiceLinkedRole_606795,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceSpecificCredential_606847 = ref object of OpenApiRestCall_605589
proc url_PostCreateServiceSpecificCredential_606849(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateServiceSpecificCredential_606848(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606850 = query.getOrDefault("Action")
  valid_606850 = validateParameter(valid_606850, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_606850 != nil:
    section.add "Action", valid_606850
  var valid_606851 = query.getOrDefault("Version")
  valid_606851 = validateParameter(valid_606851, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606851 != nil:
    section.add "Version", valid_606851
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606852 = header.getOrDefault("X-Amz-Signature")
  valid_606852 = validateParameter(valid_606852, JString, required = false,
                                 default = nil)
  if valid_606852 != nil:
    section.add "X-Amz-Signature", valid_606852
  var valid_606853 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606853 = validateParameter(valid_606853, JString, required = false,
                                 default = nil)
  if valid_606853 != nil:
    section.add "X-Amz-Content-Sha256", valid_606853
  var valid_606854 = header.getOrDefault("X-Amz-Date")
  valid_606854 = validateParameter(valid_606854, JString, required = false,
                                 default = nil)
  if valid_606854 != nil:
    section.add "X-Amz-Date", valid_606854
  var valid_606855 = header.getOrDefault("X-Amz-Credential")
  valid_606855 = validateParameter(valid_606855, JString, required = false,
                                 default = nil)
  if valid_606855 != nil:
    section.add "X-Amz-Credential", valid_606855
  var valid_606856 = header.getOrDefault("X-Amz-Security-Token")
  valid_606856 = validateParameter(valid_606856, JString, required = false,
                                 default = nil)
  if valid_606856 != nil:
    section.add "X-Amz-Security-Token", valid_606856
  var valid_606857 = header.getOrDefault("X-Amz-Algorithm")
  valid_606857 = validateParameter(valid_606857, JString, required = false,
                                 default = nil)
  if valid_606857 != nil:
    section.add "X-Amz-Algorithm", valid_606857
  var valid_606858 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606858 = validateParameter(valid_606858, JString, required = false,
                                 default = nil)
  if valid_606858 != nil:
    section.add "X-Amz-SignedHeaders", valid_606858
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ServiceName` field"
  var valid_606859 = formData.getOrDefault("ServiceName")
  valid_606859 = validateParameter(valid_606859, JString, required = true,
                                 default = nil)
  if valid_606859 != nil:
    section.add "ServiceName", valid_606859
  var valid_606860 = formData.getOrDefault("UserName")
  valid_606860 = validateParameter(valid_606860, JString, required = true,
                                 default = nil)
  if valid_606860 != nil:
    section.add "UserName", valid_606860
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606861: Call_PostCreateServiceSpecificCredential_606847;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606861.validator(path, query, header, formData, body)
  let scheme = call_606861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606861.url(scheme.get, call_606861.host, call_606861.base,
                         call_606861.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606861, url, valid)

proc call*(call_606862: Call_PostCreateServiceSpecificCredential_606847;
          ServiceName: string; UserName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606863 = newJObject()
  var formData_606864 = newJObject()
  add(formData_606864, "ServiceName", newJString(ServiceName))
  add(formData_606864, "UserName", newJString(UserName))
  add(query_606863, "Action", newJString(Action))
  add(query_606863, "Version", newJString(Version))
  result = call_606862.call(nil, query_606863, nil, formData_606864, nil)

var postCreateServiceSpecificCredential* = Call_PostCreateServiceSpecificCredential_606847(
    name: "postCreateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_PostCreateServiceSpecificCredential_606848, base: "/",
    url: url_PostCreateServiceSpecificCredential_606849,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceSpecificCredential_606830 = ref object of OpenApiRestCall_605589
proc url_GetCreateServiceSpecificCredential_606832(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateServiceSpecificCredential_606831(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_606833 = query.getOrDefault("UserName")
  valid_606833 = validateParameter(valid_606833, JString, required = true,
                                 default = nil)
  if valid_606833 != nil:
    section.add "UserName", valid_606833
  var valid_606834 = query.getOrDefault("ServiceName")
  valid_606834 = validateParameter(valid_606834, JString, required = true,
                                 default = nil)
  if valid_606834 != nil:
    section.add "ServiceName", valid_606834
  var valid_606835 = query.getOrDefault("Action")
  valid_606835 = validateParameter(valid_606835, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_606835 != nil:
    section.add "Action", valid_606835
  var valid_606836 = query.getOrDefault("Version")
  valid_606836 = validateParameter(valid_606836, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606836 != nil:
    section.add "Version", valid_606836
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606837 = header.getOrDefault("X-Amz-Signature")
  valid_606837 = validateParameter(valid_606837, JString, required = false,
                                 default = nil)
  if valid_606837 != nil:
    section.add "X-Amz-Signature", valid_606837
  var valid_606838 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606838 = validateParameter(valid_606838, JString, required = false,
                                 default = nil)
  if valid_606838 != nil:
    section.add "X-Amz-Content-Sha256", valid_606838
  var valid_606839 = header.getOrDefault("X-Amz-Date")
  valid_606839 = validateParameter(valid_606839, JString, required = false,
                                 default = nil)
  if valid_606839 != nil:
    section.add "X-Amz-Date", valid_606839
  var valid_606840 = header.getOrDefault("X-Amz-Credential")
  valid_606840 = validateParameter(valid_606840, JString, required = false,
                                 default = nil)
  if valid_606840 != nil:
    section.add "X-Amz-Credential", valid_606840
  var valid_606841 = header.getOrDefault("X-Amz-Security-Token")
  valid_606841 = validateParameter(valid_606841, JString, required = false,
                                 default = nil)
  if valid_606841 != nil:
    section.add "X-Amz-Security-Token", valid_606841
  var valid_606842 = header.getOrDefault("X-Amz-Algorithm")
  valid_606842 = validateParameter(valid_606842, JString, required = false,
                                 default = nil)
  if valid_606842 != nil:
    section.add "X-Amz-Algorithm", valid_606842
  var valid_606843 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606843 = validateParameter(valid_606843, JString, required = false,
                                 default = nil)
  if valid_606843 != nil:
    section.add "X-Amz-SignedHeaders", valid_606843
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606844: Call_GetCreateServiceSpecificCredential_606830;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606844.validator(path, query, header, formData, body)
  let scheme = call_606844.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606844.url(scheme.get, call_606844.host, call_606844.base,
                         call_606844.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606844, url, valid)

proc call*(call_606845: Call_GetCreateServiceSpecificCredential_606830;
          UserName: string; ServiceName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606846 = newJObject()
  add(query_606846, "UserName", newJString(UserName))
  add(query_606846, "ServiceName", newJString(ServiceName))
  add(query_606846, "Action", newJString(Action))
  add(query_606846, "Version", newJString(Version))
  result = call_606845.call(nil, query_606846, nil, nil, nil)

var getCreateServiceSpecificCredential* = Call_GetCreateServiceSpecificCredential_606830(
    name: "getCreateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_GetCreateServiceSpecificCredential_606831, base: "/",
    url: url_GetCreateServiceSpecificCredential_606832,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateUser_606884 = ref object of OpenApiRestCall_605589
proc url_PostCreateUser_606886(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateUser_606885(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606887 = query.getOrDefault("Action")
  valid_606887 = validateParameter(valid_606887, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_606887 != nil:
    section.add "Action", valid_606887
  var valid_606888 = query.getOrDefault("Version")
  valid_606888 = validateParameter(valid_606888, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606888 != nil:
    section.add "Version", valid_606888
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606889 = header.getOrDefault("X-Amz-Signature")
  valid_606889 = validateParameter(valid_606889, JString, required = false,
                                 default = nil)
  if valid_606889 != nil:
    section.add "X-Amz-Signature", valid_606889
  var valid_606890 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606890 = validateParameter(valid_606890, JString, required = false,
                                 default = nil)
  if valid_606890 != nil:
    section.add "X-Amz-Content-Sha256", valid_606890
  var valid_606891 = header.getOrDefault("X-Amz-Date")
  valid_606891 = validateParameter(valid_606891, JString, required = false,
                                 default = nil)
  if valid_606891 != nil:
    section.add "X-Amz-Date", valid_606891
  var valid_606892 = header.getOrDefault("X-Amz-Credential")
  valid_606892 = validateParameter(valid_606892, JString, required = false,
                                 default = nil)
  if valid_606892 != nil:
    section.add "X-Amz-Credential", valid_606892
  var valid_606893 = header.getOrDefault("X-Amz-Security-Token")
  valid_606893 = validateParameter(valid_606893, JString, required = false,
                                 default = nil)
  if valid_606893 != nil:
    section.add "X-Amz-Security-Token", valid_606893
  var valid_606894 = header.getOrDefault("X-Amz-Algorithm")
  valid_606894 = validateParameter(valid_606894, JString, required = false,
                                 default = nil)
  if valid_606894 != nil:
    section.add "X-Amz-Algorithm", valid_606894
  var valid_606895 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606895 = validateParameter(valid_606895, JString, required = false,
                                 default = nil)
  if valid_606895 != nil:
    section.add "X-Amz-SignedHeaders", valid_606895
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_606896 = formData.getOrDefault("UserName")
  valid_606896 = validateParameter(valid_606896, JString, required = true,
                                 default = nil)
  if valid_606896 != nil:
    section.add "UserName", valid_606896
  var valid_606897 = formData.getOrDefault("Path")
  valid_606897 = validateParameter(valid_606897, JString, required = false,
                                 default = nil)
  if valid_606897 != nil:
    section.add "Path", valid_606897
  var valid_606898 = formData.getOrDefault("Tags")
  valid_606898 = validateParameter(valid_606898, JArray, required = false,
                                 default = nil)
  if valid_606898 != nil:
    section.add "Tags", valid_606898
  var valid_606899 = formData.getOrDefault("PermissionsBoundary")
  valid_606899 = validateParameter(valid_606899, JString, required = false,
                                 default = nil)
  if valid_606899 != nil:
    section.add "PermissionsBoundary", valid_606899
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606900: Call_PostCreateUser_606884; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606900.validator(path, query, header, formData, body)
  let scheme = call_606900.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606900.url(scheme.get, call_606900.host, call_606900.base,
                         call_606900.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606900, url, valid)

proc call*(call_606901: Call_PostCreateUser_606884; UserName: string;
          Path: string = ""; Action: string = "CreateUser"; Tags: JsonNode = nil;
          PermissionsBoundary: string = ""; Version: string = "2010-05-08"): Recallable =
  ## postCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_606902 = newJObject()
  var formData_606903 = newJObject()
  add(formData_606903, "UserName", newJString(UserName))
  add(formData_606903, "Path", newJString(Path))
  add(query_606902, "Action", newJString(Action))
  if Tags != nil:
    formData_606903.add "Tags", Tags
  add(formData_606903, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_606902, "Version", newJString(Version))
  result = call_606901.call(nil, query_606902, nil, formData_606903, nil)

var postCreateUser* = Call_PostCreateUser_606884(name: "postCreateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_PostCreateUser_606885,
    base: "/", url: url_PostCreateUser_606886, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateUser_606865 = ref object of OpenApiRestCall_605589
proc url_GetCreateUser_606867(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateUser_606866(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_606868 = query.getOrDefault("UserName")
  valid_606868 = validateParameter(valid_606868, JString, required = true,
                                 default = nil)
  if valid_606868 != nil:
    section.add "UserName", valid_606868
  var valid_606869 = query.getOrDefault("Tags")
  valid_606869 = validateParameter(valid_606869, JArray, required = false,
                                 default = nil)
  if valid_606869 != nil:
    section.add "Tags", valid_606869
  var valid_606870 = query.getOrDefault("PermissionsBoundary")
  valid_606870 = validateParameter(valid_606870, JString, required = false,
                                 default = nil)
  if valid_606870 != nil:
    section.add "PermissionsBoundary", valid_606870
  var valid_606871 = query.getOrDefault("Path")
  valid_606871 = validateParameter(valid_606871, JString, required = false,
                                 default = nil)
  if valid_606871 != nil:
    section.add "Path", valid_606871
  var valid_606872 = query.getOrDefault("Action")
  valid_606872 = validateParameter(valid_606872, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_606872 != nil:
    section.add "Action", valid_606872
  var valid_606873 = query.getOrDefault("Version")
  valid_606873 = validateParameter(valid_606873, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606873 != nil:
    section.add "Version", valid_606873
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606874 = header.getOrDefault("X-Amz-Signature")
  valid_606874 = validateParameter(valid_606874, JString, required = false,
                                 default = nil)
  if valid_606874 != nil:
    section.add "X-Amz-Signature", valid_606874
  var valid_606875 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606875 = validateParameter(valid_606875, JString, required = false,
                                 default = nil)
  if valid_606875 != nil:
    section.add "X-Amz-Content-Sha256", valid_606875
  var valid_606876 = header.getOrDefault("X-Amz-Date")
  valid_606876 = validateParameter(valid_606876, JString, required = false,
                                 default = nil)
  if valid_606876 != nil:
    section.add "X-Amz-Date", valid_606876
  var valid_606877 = header.getOrDefault("X-Amz-Credential")
  valid_606877 = validateParameter(valid_606877, JString, required = false,
                                 default = nil)
  if valid_606877 != nil:
    section.add "X-Amz-Credential", valid_606877
  var valid_606878 = header.getOrDefault("X-Amz-Security-Token")
  valid_606878 = validateParameter(valid_606878, JString, required = false,
                                 default = nil)
  if valid_606878 != nil:
    section.add "X-Amz-Security-Token", valid_606878
  var valid_606879 = header.getOrDefault("X-Amz-Algorithm")
  valid_606879 = validateParameter(valid_606879, JString, required = false,
                                 default = nil)
  if valid_606879 != nil:
    section.add "X-Amz-Algorithm", valid_606879
  var valid_606880 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606880 = validateParameter(valid_606880, JString, required = false,
                                 default = nil)
  if valid_606880 != nil:
    section.add "X-Amz-SignedHeaders", valid_606880
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606881: Call_GetCreateUser_606865; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606881.validator(path, query, header, formData, body)
  let scheme = call_606881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606881.url(scheme.get, call_606881.host, call_606881.base,
                         call_606881.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606881, url, valid)

proc call*(call_606882: Call_GetCreateUser_606865; UserName: string;
          Tags: JsonNode = nil; PermissionsBoundary: string = ""; Path: string = "";
          Action: string = "CreateUser"; Version: string = "2010-05-08"): Recallable =
  ## getCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606883 = newJObject()
  add(query_606883, "UserName", newJString(UserName))
  if Tags != nil:
    query_606883.add "Tags", Tags
  add(query_606883, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_606883, "Path", newJString(Path))
  add(query_606883, "Action", newJString(Action))
  add(query_606883, "Version", newJString(Version))
  result = call_606882.call(nil, query_606883, nil, nil, nil)

var getCreateUser* = Call_GetCreateUser_606865(name: "getCreateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_GetCreateUser_606866,
    base: "/", url: url_GetCreateUser_606867, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateVirtualMFADevice_606921 = ref object of OpenApiRestCall_605589
proc url_PostCreateVirtualMFADevice_606923(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateVirtualMFADevice_606922(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606924 = query.getOrDefault("Action")
  valid_606924 = validateParameter(valid_606924, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_606924 != nil:
    section.add "Action", valid_606924
  var valid_606925 = query.getOrDefault("Version")
  valid_606925 = validateParameter(valid_606925, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606925 != nil:
    section.add "Version", valid_606925
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606926 = header.getOrDefault("X-Amz-Signature")
  valid_606926 = validateParameter(valid_606926, JString, required = false,
                                 default = nil)
  if valid_606926 != nil:
    section.add "X-Amz-Signature", valid_606926
  var valid_606927 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606927 = validateParameter(valid_606927, JString, required = false,
                                 default = nil)
  if valid_606927 != nil:
    section.add "X-Amz-Content-Sha256", valid_606927
  var valid_606928 = header.getOrDefault("X-Amz-Date")
  valid_606928 = validateParameter(valid_606928, JString, required = false,
                                 default = nil)
  if valid_606928 != nil:
    section.add "X-Amz-Date", valid_606928
  var valid_606929 = header.getOrDefault("X-Amz-Credential")
  valid_606929 = validateParameter(valid_606929, JString, required = false,
                                 default = nil)
  if valid_606929 != nil:
    section.add "X-Amz-Credential", valid_606929
  var valid_606930 = header.getOrDefault("X-Amz-Security-Token")
  valid_606930 = validateParameter(valid_606930, JString, required = false,
                                 default = nil)
  if valid_606930 != nil:
    section.add "X-Amz-Security-Token", valid_606930
  var valid_606931 = header.getOrDefault("X-Amz-Algorithm")
  valid_606931 = validateParameter(valid_606931, JString, required = false,
                                 default = nil)
  if valid_606931 != nil:
    section.add "X-Amz-Algorithm", valid_606931
  var valid_606932 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606932 = validateParameter(valid_606932, JString, required = false,
                                 default = nil)
  if valid_606932 != nil:
    section.add "X-Amz-SignedHeaders", valid_606932
  result.add "header", section
  ## parameters in `formData` object:
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `VirtualMFADeviceName` field"
  var valid_606933 = formData.getOrDefault("VirtualMFADeviceName")
  valid_606933 = validateParameter(valid_606933, JString, required = true,
                                 default = nil)
  if valid_606933 != nil:
    section.add "VirtualMFADeviceName", valid_606933
  var valid_606934 = formData.getOrDefault("Path")
  valid_606934 = validateParameter(valid_606934, JString, required = false,
                                 default = nil)
  if valid_606934 != nil:
    section.add "Path", valid_606934
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606935: Call_PostCreateVirtualMFADevice_606921; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_606935.validator(path, query, header, formData, body)
  let scheme = call_606935.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606935.url(scheme.get, call_606935.host, call_606935.base,
                         call_606935.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606935, url, valid)

proc call*(call_606936: Call_PostCreateVirtualMFADevice_606921;
          VirtualMFADeviceName: string; Path: string = "";
          Action: string = "CreateVirtualMFADevice"; Version: string = "2010-05-08"): Recallable =
  ## postCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606937 = newJObject()
  var formData_606938 = newJObject()
  add(formData_606938, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  add(formData_606938, "Path", newJString(Path))
  add(query_606937, "Action", newJString(Action))
  add(query_606937, "Version", newJString(Version))
  result = call_606936.call(nil, query_606937, nil, formData_606938, nil)

var postCreateVirtualMFADevice* = Call_PostCreateVirtualMFADevice_606921(
    name: "postCreateVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_PostCreateVirtualMFADevice_606922, base: "/",
    url: url_PostCreateVirtualMFADevice_606923,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateVirtualMFADevice_606904 = ref object of OpenApiRestCall_605589
proc url_GetCreateVirtualMFADevice_606906(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateVirtualMFADevice_606905(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_606907 = query.getOrDefault("Path")
  valid_606907 = validateParameter(valid_606907, JString, required = false,
                                 default = nil)
  if valid_606907 != nil:
    section.add "Path", valid_606907
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606908 = query.getOrDefault("Action")
  valid_606908 = validateParameter(valid_606908, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_606908 != nil:
    section.add "Action", valid_606908
  var valid_606909 = query.getOrDefault("Version")
  valid_606909 = validateParameter(valid_606909, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606909 != nil:
    section.add "Version", valid_606909
  var valid_606910 = query.getOrDefault("VirtualMFADeviceName")
  valid_606910 = validateParameter(valid_606910, JString, required = true,
                                 default = nil)
  if valid_606910 != nil:
    section.add "VirtualMFADeviceName", valid_606910
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606911 = header.getOrDefault("X-Amz-Signature")
  valid_606911 = validateParameter(valid_606911, JString, required = false,
                                 default = nil)
  if valid_606911 != nil:
    section.add "X-Amz-Signature", valid_606911
  var valid_606912 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606912 = validateParameter(valid_606912, JString, required = false,
                                 default = nil)
  if valid_606912 != nil:
    section.add "X-Amz-Content-Sha256", valid_606912
  var valid_606913 = header.getOrDefault("X-Amz-Date")
  valid_606913 = validateParameter(valid_606913, JString, required = false,
                                 default = nil)
  if valid_606913 != nil:
    section.add "X-Amz-Date", valid_606913
  var valid_606914 = header.getOrDefault("X-Amz-Credential")
  valid_606914 = validateParameter(valid_606914, JString, required = false,
                                 default = nil)
  if valid_606914 != nil:
    section.add "X-Amz-Credential", valid_606914
  var valid_606915 = header.getOrDefault("X-Amz-Security-Token")
  valid_606915 = validateParameter(valid_606915, JString, required = false,
                                 default = nil)
  if valid_606915 != nil:
    section.add "X-Amz-Security-Token", valid_606915
  var valid_606916 = header.getOrDefault("X-Amz-Algorithm")
  valid_606916 = validateParameter(valid_606916, JString, required = false,
                                 default = nil)
  if valid_606916 != nil:
    section.add "X-Amz-Algorithm", valid_606916
  var valid_606917 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606917 = validateParameter(valid_606917, JString, required = false,
                                 default = nil)
  if valid_606917 != nil:
    section.add "X-Amz-SignedHeaders", valid_606917
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606918: Call_GetCreateVirtualMFADevice_606904; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_606918.validator(path, query, header, formData, body)
  let scheme = call_606918.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606918.url(scheme.get, call_606918.host, call_606918.base,
                         call_606918.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606918, url, valid)

proc call*(call_606919: Call_GetCreateVirtualMFADevice_606904;
          VirtualMFADeviceName: string; Path: string = "";
          Action: string = "CreateVirtualMFADevice"; Version: string = "2010-05-08"): Recallable =
  ## getCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_606920 = newJObject()
  add(query_606920, "Path", newJString(Path))
  add(query_606920, "Action", newJString(Action))
  add(query_606920, "Version", newJString(Version))
  add(query_606920, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  result = call_606919.call(nil, query_606920, nil, nil, nil)

var getCreateVirtualMFADevice* = Call_GetCreateVirtualMFADevice_606904(
    name: "getCreateVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_GetCreateVirtualMFADevice_606905, base: "/",
    url: url_GetCreateVirtualMFADevice_606906,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeactivateMFADevice_606956 = ref object of OpenApiRestCall_605589
proc url_PostDeactivateMFADevice_606958(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeactivateMFADevice_606957(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606959 = query.getOrDefault("Action")
  valid_606959 = validateParameter(valid_606959, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_606959 != nil:
    section.add "Action", valid_606959
  var valid_606960 = query.getOrDefault("Version")
  valid_606960 = validateParameter(valid_606960, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606960 != nil:
    section.add "Version", valid_606960
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606961 = header.getOrDefault("X-Amz-Signature")
  valid_606961 = validateParameter(valid_606961, JString, required = false,
                                 default = nil)
  if valid_606961 != nil:
    section.add "X-Amz-Signature", valid_606961
  var valid_606962 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606962 = validateParameter(valid_606962, JString, required = false,
                                 default = nil)
  if valid_606962 != nil:
    section.add "X-Amz-Content-Sha256", valid_606962
  var valid_606963 = header.getOrDefault("X-Amz-Date")
  valid_606963 = validateParameter(valid_606963, JString, required = false,
                                 default = nil)
  if valid_606963 != nil:
    section.add "X-Amz-Date", valid_606963
  var valid_606964 = header.getOrDefault("X-Amz-Credential")
  valid_606964 = validateParameter(valid_606964, JString, required = false,
                                 default = nil)
  if valid_606964 != nil:
    section.add "X-Amz-Credential", valid_606964
  var valid_606965 = header.getOrDefault("X-Amz-Security-Token")
  valid_606965 = validateParameter(valid_606965, JString, required = false,
                                 default = nil)
  if valid_606965 != nil:
    section.add "X-Amz-Security-Token", valid_606965
  var valid_606966 = header.getOrDefault("X-Amz-Algorithm")
  valid_606966 = validateParameter(valid_606966, JString, required = false,
                                 default = nil)
  if valid_606966 != nil:
    section.add "X-Amz-Algorithm", valid_606966
  var valid_606967 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606967 = validateParameter(valid_606967, JString, required = false,
                                 default = nil)
  if valid_606967 != nil:
    section.add "X-Amz-SignedHeaders", valid_606967
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_606968 = formData.getOrDefault("SerialNumber")
  valid_606968 = validateParameter(valid_606968, JString, required = true,
                                 default = nil)
  if valid_606968 != nil:
    section.add "SerialNumber", valid_606968
  var valid_606969 = formData.getOrDefault("UserName")
  valid_606969 = validateParameter(valid_606969, JString, required = true,
                                 default = nil)
  if valid_606969 != nil:
    section.add "UserName", valid_606969
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606970: Call_PostDeactivateMFADevice_606956; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606970.validator(path, query, header, formData, body)
  let scheme = call_606970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606970.url(scheme.get, call_606970.host, call_606970.base,
                         call_606970.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606970, url, valid)

proc call*(call_606971: Call_PostDeactivateMFADevice_606956; SerialNumber: string;
          UserName: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606972 = newJObject()
  var formData_606973 = newJObject()
  add(formData_606973, "SerialNumber", newJString(SerialNumber))
  add(formData_606973, "UserName", newJString(UserName))
  add(query_606972, "Action", newJString(Action))
  add(query_606972, "Version", newJString(Version))
  result = call_606971.call(nil, query_606972, nil, formData_606973, nil)

var postDeactivateMFADevice* = Call_PostDeactivateMFADevice_606956(
    name: "postDeactivateMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_PostDeactivateMFADevice_606957, base: "/",
    url: url_PostDeactivateMFADevice_606958, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeactivateMFADevice_606939 = ref object of OpenApiRestCall_605589
proc url_GetDeactivateMFADevice_606941(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeactivateMFADevice_606940(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_606942 = query.getOrDefault("UserName")
  valid_606942 = validateParameter(valid_606942, JString, required = true,
                                 default = nil)
  if valid_606942 != nil:
    section.add "UserName", valid_606942
  var valid_606943 = query.getOrDefault("SerialNumber")
  valid_606943 = validateParameter(valid_606943, JString, required = true,
                                 default = nil)
  if valid_606943 != nil:
    section.add "SerialNumber", valid_606943
  var valid_606944 = query.getOrDefault("Action")
  valid_606944 = validateParameter(valid_606944, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_606944 != nil:
    section.add "Action", valid_606944
  var valid_606945 = query.getOrDefault("Version")
  valid_606945 = validateParameter(valid_606945, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606945 != nil:
    section.add "Version", valid_606945
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606946 = header.getOrDefault("X-Amz-Signature")
  valid_606946 = validateParameter(valid_606946, JString, required = false,
                                 default = nil)
  if valid_606946 != nil:
    section.add "X-Amz-Signature", valid_606946
  var valid_606947 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606947 = validateParameter(valid_606947, JString, required = false,
                                 default = nil)
  if valid_606947 != nil:
    section.add "X-Amz-Content-Sha256", valid_606947
  var valid_606948 = header.getOrDefault("X-Amz-Date")
  valid_606948 = validateParameter(valid_606948, JString, required = false,
                                 default = nil)
  if valid_606948 != nil:
    section.add "X-Amz-Date", valid_606948
  var valid_606949 = header.getOrDefault("X-Amz-Credential")
  valid_606949 = validateParameter(valid_606949, JString, required = false,
                                 default = nil)
  if valid_606949 != nil:
    section.add "X-Amz-Credential", valid_606949
  var valid_606950 = header.getOrDefault("X-Amz-Security-Token")
  valid_606950 = validateParameter(valid_606950, JString, required = false,
                                 default = nil)
  if valid_606950 != nil:
    section.add "X-Amz-Security-Token", valid_606950
  var valid_606951 = header.getOrDefault("X-Amz-Algorithm")
  valid_606951 = validateParameter(valid_606951, JString, required = false,
                                 default = nil)
  if valid_606951 != nil:
    section.add "X-Amz-Algorithm", valid_606951
  var valid_606952 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606952 = validateParameter(valid_606952, JString, required = false,
                                 default = nil)
  if valid_606952 != nil:
    section.add "X-Amz-SignedHeaders", valid_606952
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606953: Call_GetDeactivateMFADevice_606939; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606953.validator(path, query, header, formData, body)
  let scheme = call_606953.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606953.url(scheme.get, call_606953.host, call_606953.base,
                         call_606953.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606953, url, valid)

proc call*(call_606954: Call_GetDeactivateMFADevice_606939; UserName: string;
          SerialNumber: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606955 = newJObject()
  add(query_606955, "UserName", newJString(UserName))
  add(query_606955, "SerialNumber", newJString(SerialNumber))
  add(query_606955, "Action", newJString(Action))
  add(query_606955, "Version", newJString(Version))
  result = call_606954.call(nil, query_606955, nil, nil, nil)

var getDeactivateMFADevice* = Call_GetDeactivateMFADevice_606939(
    name: "getDeactivateMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_GetDeactivateMFADevice_606940, base: "/",
    url: url_GetDeactivateMFADevice_606941, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccessKey_606991 = ref object of OpenApiRestCall_605589
proc url_PostDeleteAccessKey_606993(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccessKey_606992(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606994 = query.getOrDefault("Action")
  valid_606994 = validateParameter(valid_606994, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_606994 != nil:
    section.add "Action", valid_606994
  var valid_606995 = query.getOrDefault("Version")
  valid_606995 = validateParameter(valid_606995, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606995 != nil:
    section.add "Version", valid_606995
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606996 = header.getOrDefault("X-Amz-Signature")
  valid_606996 = validateParameter(valid_606996, JString, required = false,
                                 default = nil)
  if valid_606996 != nil:
    section.add "X-Amz-Signature", valid_606996
  var valid_606997 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606997 = validateParameter(valid_606997, JString, required = false,
                                 default = nil)
  if valid_606997 != nil:
    section.add "X-Amz-Content-Sha256", valid_606997
  var valid_606998 = header.getOrDefault("X-Amz-Date")
  valid_606998 = validateParameter(valid_606998, JString, required = false,
                                 default = nil)
  if valid_606998 != nil:
    section.add "X-Amz-Date", valid_606998
  var valid_606999 = header.getOrDefault("X-Amz-Credential")
  valid_606999 = validateParameter(valid_606999, JString, required = false,
                                 default = nil)
  if valid_606999 != nil:
    section.add "X-Amz-Credential", valid_606999
  var valid_607000 = header.getOrDefault("X-Amz-Security-Token")
  valid_607000 = validateParameter(valid_607000, JString, required = false,
                                 default = nil)
  if valid_607000 != nil:
    section.add "X-Amz-Security-Token", valid_607000
  var valid_607001 = header.getOrDefault("X-Amz-Algorithm")
  valid_607001 = validateParameter(valid_607001, JString, required = false,
                                 default = nil)
  if valid_607001 != nil:
    section.add "X-Amz-Algorithm", valid_607001
  var valid_607002 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607002 = validateParameter(valid_607002, JString, required = false,
                                 default = nil)
  if valid_607002 != nil:
    section.add "X-Amz-SignedHeaders", valid_607002
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_607003 = formData.getOrDefault("AccessKeyId")
  valid_607003 = validateParameter(valid_607003, JString, required = true,
                                 default = nil)
  if valid_607003 != nil:
    section.add "AccessKeyId", valid_607003
  var valid_607004 = formData.getOrDefault("UserName")
  valid_607004 = validateParameter(valid_607004, JString, required = false,
                                 default = nil)
  if valid_607004 != nil:
    section.add "UserName", valid_607004
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607005: Call_PostDeleteAccessKey_606991; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_607005.validator(path, query, header, formData, body)
  let scheme = call_607005.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607005.url(scheme.get, call_607005.host, call_607005.base,
                         call_607005.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607005, url, valid)

proc call*(call_607006: Call_PostDeleteAccessKey_606991; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607007 = newJObject()
  var formData_607008 = newJObject()
  add(formData_607008, "AccessKeyId", newJString(AccessKeyId))
  add(formData_607008, "UserName", newJString(UserName))
  add(query_607007, "Action", newJString(Action))
  add(query_607007, "Version", newJString(Version))
  result = call_607006.call(nil, query_607007, nil, formData_607008, nil)

var postDeleteAccessKey* = Call_PostDeleteAccessKey_606991(
    name: "postDeleteAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccessKey",
    validator: validate_PostDeleteAccessKey_606992, base: "/",
    url: url_PostDeleteAccessKey_606993, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccessKey_606974 = ref object of OpenApiRestCall_605589
proc url_GetDeleteAccessKey_606976(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccessKey_606975(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606977 = query.getOrDefault("UserName")
  valid_606977 = validateParameter(valid_606977, JString, required = false,
                                 default = nil)
  if valid_606977 != nil:
    section.add "UserName", valid_606977
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606978 = query.getOrDefault("Action")
  valid_606978 = validateParameter(valid_606978, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_606978 != nil:
    section.add "Action", valid_606978
  var valid_606979 = query.getOrDefault("AccessKeyId")
  valid_606979 = validateParameter(valid_606979, JString, required = true,
                                 default = nil)
  if valid_606979 != nil:
    section.add "AccessKeyId", valid_606979
  var valid_606980 = query.getOrDefault("Version")
  valid_606980 = validateParameter(valid_606980, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606980 != nil:
    section.add "Version", valid_606980
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606981 = header.getOrDefault("X-Amz-Signature")
  valid_606981 = validateParameter(valid_606981, JString, required = false,
                                 default = nil)
  if valid_606981 != nil:
    section.add "X-Amz-Signature", valid_606981
  var valid_606982 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606982 = validateParameter(valid_606982, JString, required = false,
                                 default = nil)
  if valid_606982 != nil:
    section.add "X-Amz-Content-Sha256", valid_606982
  var valid_606983 = header.getOrDefault("X-Amz-Date")
  valid_606983 = validateParameter(valid_606983, JString, required = false,
                                 default = nil)
  if valid_606983 != nil:
    section.add "X-Amz-Date", valid_606983
  var valid_606984 = header.getOrDefault("X-Amz-Credential")
  valid_606984 = validateParameter(valid_606984, JString, required = false,
                                 default = nil)
  if valid_606984 != nil:
    section.add "X-Amz-Credential", valid_606984
  var valid_606985 = header.getOrDefault("X-Amz-Security-Token")
  valid_606985 = validateParameter(valid_606985, JString, required = false,
                                 default = nil)
  if valid_606985 != nil:
    section.add "X-Amz-Security-Token", valid_606985
  var valid_606986 = header.getOrDefault("X-Amz-Algorithm")
  valid_606986 = validateParameter(valid_606986, JString, required = false,
                                 default = nil)
  if valid_606986 != nil:
    section.add "X-Amz-Algorithm", valid_606986
  var valid_606987 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606987 = validateParameter(valid_606987, JString, required = false,
                                 default = nil)
  if valid_606987 != nil:
    section.add "X-Amz-SignedHeaders", valid_606987
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606988: Call_GetDeleteAccessKey_606974; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_606988.validator(path, query, header, formData, body)
  let scheme = call_606988.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606988.url(scheme.get, call_606988.host, call_606988.base,
                         call_606988.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606988, url, valid)

proc call*(call_606989: Call_GetDeleteAccessKey_606974; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_606990 = newJObject()
  add(query_606990, "UserName", newJString(UserName))
  add(query_606990, "Action", newJString(Action))
  add(query_606990, "AccessKeyId", newJString(AccessKeyId))
  add(query_606990, "Version", newJString(Version))
  result = call_606989.call(nil, query_606990, nil, nil, nil)

var getDeleteAccessKey* = Call_GetDeleteAccessKey_606974(
    name: "getDeleteAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteAccessKey", validator: validate_GetDeleteAccessKey_606975,
    base: "/", url: url_GetDeleteAccessKey_606976,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountAlias_607025 = ref object of OpenApiRestCall_605589
proc url_PostDeleteAccountAlias_607027(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccountAlias_607026(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607028 = query.getOrDefault("Action")
  valid_607028 = validateParameter(valid_607028, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_607028 != nil:
    section.add "Action", valid_607028
  var valid_607029 = query.getOrDefault("Version")
  valid_607029 = validateParameter(valid_607029, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607029 != nil:
    section.add "Version", valid_607029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607030 = header.getOrDefault("X-Amz-Signature")
  valid_607030 = validateParameter(valid_607030, JString, required = false,
                                 default = nil)
  if valid_607030 != nil:
    section.add "X-Amz-Signature", valid_607030
  var valid_607031 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607031 = validateParameter(valid_607031, JString, required = false,
                                 default = nil)
  if valid_607031 != nil:
    section.add "X-Amz-Content-Sha256", valid_607031
  var valid_607032 = header.getOrDefault("X-Amz-Date")
  valid_607032 = validateParameter(valid_607032, JString, required = false,
                                 default = nil)
  if valid_607032 != nil:
    section.add "X-Amz-Date", valid_607032
  var valid_607033 = header.getOrDefault("X-Amz-Credential")
  valid_607033 = validateParameter(valid_607033, JString, required = false,
                                 default = nil)
  if valid_607033 != nil:
    section.add "X-Amz-Credential", valid_607033
  var valid_607034 = header.getOrDefault("X-Amz-Security-Token")
  valid_607034 = validateParameter(valid_607034, JString, required = false,
                                 default = nil)
  if valid_607034 != nil:
    section.add "X-Amz-Security-Token", valid_607034
  var valid_607035 = header.getOrDefault("X-Amz-Algorithm")
  valid_607035 = validateParameter(valid_607035, JString, required = false,
                                 default = nil)
  if valid_607035 != nil:
    section.add "X-Amz-Algorithm", valid_607035
  var valid_607036 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607036 = validateParameter(valid_607036, JString, required = false,
                                 default = nil)
  if valid_607036 != nil:
    section.add "X-Amz-SignedHeaders", valid_607036
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_607037 = formData.getOrDefault("AccountAlias")
  valid_607037 = validateParameter(valid_607037, JString, required = true,
                                 default = nil)
  if valid_607037 != nil:
    section.add "AccountAlias", valid_607037
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607038: Call_PostDeleteAccountAlias_607025; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_607038.validator(path, query, header, formData, body)
  let scheme = call_607038.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607038.url(scheme.get, call_607038.host, call_607038.base,
                         call_607038.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607038, url, valid)

proc call*(call_607039: Call_PostDeleteAccountAlias_607025; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Version: string (required)
  var query_607040 = newJObject()
  var formData_607041 = newJObject()
  add(query_607040, "Action", newJString(Action))
  add(formData_607041, "AccountAlias", newJString(AccountAlias))
  add(query_607040, "Version", newJString(Version))
  result = call_607039.call(nil, query_607040, nil, formData_607041, nil)

var postDeleteAccountAlias* = Call_PostDeleteAccountAlias_607025(
    name: "postDeleteAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_PostDeleteAccountAlias_607026, base: "/",
    url: url_PostDeleteAccountAlias_607027, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountAlias_607009 = ref object of OpenApiRestCall_605589
proc url_GetDeleteAccountAlias_607011(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccountAlias_607010(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_607012 = query.getOrDefault("AccountAlias")
  valid_607012 = validateParameter(valid_607012, JString, required = true,
                                 default = nil)
  if valid_607012 != nil:
    section.add "AccountAlias", valid_607012
  var valid_607013 = query.getOrDefault("Action")
  valid_607013 = validateParameter(valid_607013, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_607013 != nil:
    section.add "Action", valid_607013
  var valid_607014 = query.getOrDefault("Version")
  valid_607014 = validateParameter(valid_607014, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607014 != nil:
    section.add "Version", valid_607014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607015 = header.getOrDefault("X-Amz-Signature")
  valid_607015 = validateParameter(valid_607015, JString, required = false,
                                 default = nil)
  if valid_607015 != nil:
    section.add "X-Amz-Signature", valid_607015
  var valid_607016 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607016 = validateParameter(valid_607016, JString, required = false,
                                 default = nil)
  if valid_607016 != nil:
    section.add "X-Amz-Content-Sha256", valid_607016
  var valid_607017 = header.getOrDefault("X-Amz-Date")
  valid_607017 = validateParameter(valid_607017, JString, required = false,
                                 default = nil)
  if valid_607017 != nil:
    section.add "X-Amz-Date", valid_607017
  var valid_607018 = header.getOrDefault("X-Amz-Credential")
  valid_607018 = validateParameter(valid_607018, JString, required = false,
                                 default = nil)
  if valid_607018 != nil:
    section.add "X-Amz-Credential", valid_607018
  var valid_607019 = header.getOrDefault("X-Amz-Security-Token")
  valid_607019 = validateParameter(valid_607019, JString, required = false,
                                 default = nil)
  if valid_607019 != nil:
    section.add "X-Amz-Security-Token", valid_607019
  var valid_607020 = header.getOrDefault("X-Amz-Algorithm")
  valid_607020 = validateParameter(valid_607020, JString, required = false,
                                 default = nil)
  if valid_607020 != nil:
    section.add "X-Amz-Algorithm", valid_607020
  var valid_607021 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607021 = validateParameter(valid_607021, JString, required = false,
                                 default = nil)
  if valid_607021 != nil:
    section.add "X-Amz-SignedHeaders", valid_607021
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607022: Call_GetDeleteAccountAlias_607009; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_607022.validator(path, query, header, formData, body)
  let scheme = call_607022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607022.url(scheme.get, call_607022.host, call_607022.base,
                         call_607022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607022, url, valid)

proc call*(call_607023: Call_GetDeleteAccountAlias_607009; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607024 = newJObject()
  add(query_607024, "AccountAlias", newJString(AccountAlias))
  add(query_607024, "Action", newJString(Action))
  add(query_607024, "Version", newJString(Version))
  result = call_607023.call(nil, query_607024, nil, nil, nil)

var getDeleteAccountAlias* = Call_GetDeleteAccountAlias_607009(
    name: "getDeleteAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_GetDeleteAccountAlias_607010, base: "/",
    url: url_GetDeleteAccountAlias_607011, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountPasswordPolicy_607057 = ref object of OpenApiRestCall_605589
proc url_PostDeleteAccountPasswordPolicy_607059(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccountPasswordPolicy_607058(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607060 = query.getOrDefault("Action")
  valid_607060 = validateParameter(valid_607060, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_607060 != nil:
    section.add "Action", valid_607060
  var valid_607061 = query.getOrDefault("Version")
  valid_607061 = validateParameter(valid_607061, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607061 != nil:
    section.add "Version", valid_607061
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607062 = header.getOrDefault("X-Amz-Signature")
  valid_607062 = validateParameter(valid_607062, JString, required = false,
                                 default = nil)
  if valid_607062 != nil:
    section.add "X-Amz-Signature", valid_607062
  var valid_607063 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607063 = validateParameter(valid_607063, JString, required = false,
                                 default = nil)
  if valid_607063 != nil:
    section.add "X-Amz-Content-Sha256", valid_607063
  var valid_607064 = header.getOrDefault("X-Amz-Date")
  valid_607064 = validateParameter(valid_607064, JString, required = false,
                                 default = nil)
  if valid_607064 != nil:
    section.add "X-Amz-Date", valid_607064
  var valid_607065 = header.getOrDefault("X-Amz-Credential")
  valid_607065 = validateParameter(valid_607065, JString, required = false,
                                 default = nil)
  if valid_607065 != nil:
    section.add "X-Amz-Credential", valid_607065
  var valid_607066 = header.getOrDefault("X-Amz-Security-Token")
  valid_607066 = validateParameter(valid_607066, JString, required = false,
                                 default = nil)
  if valid_607066 != nil:
    section.add "X-Amz-Security-Token", valid_607066
  var valid_607067 = header.getOrDefault("X-Amz-Algorithm")
  valid_607067 = validateParameter(valid_607067, JString, required = false,
                                 default = nil)
  if valid_607067 != nil:
    section.add "X-Amz-Algorithm", valid_607067
  var valid_607068 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607068 = validateParameter(valid_607068, JString, required = false,
                                 default = nil)
  if valid_607068 != nil:
    section.add "X-Amz-SignedHeaders", valid_607068
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607069: Call_PostDeleteAccountPasswordPolicy_607057;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_607069.validator(path, query, header, formData, body)
  let scheme = call_607069.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607069.url(scheme.get, call_607069.host, call_607069.base,
                         call_607069.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607069, url, valid)

proc call*(call_607070: Call_PostDeleteAccountPasswordPolicy_607057;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607071 = newJObject()
  add(query_607071, "Action", newJString(Action))
  add(query_607071, "Version", newJString(Version))
  result = call_607070.call(nil, query_607071, nil, nil, nil)

var postDeleteAccountPasswordPolicy* = Call_PostDeleteAccountPasswordPolicy_607057(
    name: "postDeleteAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_PostDeleteAccountPasswordPolicy_607058, base: "/",
    url: url_PostDeleteAccountPasswordPolicy_607059,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountPasswordPolicy_607042 = ref object of OpenApiRestCall_605589
proc url_GetDeleteAccountPasswordPolicy_607044(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccountPasswordPolicy_607043(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607045 = query.getOrDefault("Action")
  valid_607045 = validateParameter(valid_607045, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_607045 != nil:
    section.add "Action", valid_607045
  var valid_607046 = query.getOrDefault("Version")
  valid_607046 = validateParameter(valid_607046, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607046 != nil:
    section.add "Version", valid_607046
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607047 = header.getOrDefault("X-Amz-Signature")
  valid_607047 = validateParameter(valid_607047, JString, required = false,
                                 default = nil)
  if valid_607047 != nil:
    section.add "X-Amz-Signature", valid_607047
  var valid_607048 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607048 = validateParameter(valid_607048, JString, required = false,
                                 default = nil)
  if valid_607048 != nil:
    section.add "X-Amz-Content-Sha256", valid_607048
  var valid_607049 = header.getOrDefault("X-Amz-Date")
  valid_607049 = validateParameter(valid_607049, JString, required = false,
                                 default = nil)
  if valid_607049 != nil:
    section.add "X-Amz-Date", valid_607049
  var valid_607050 = header.getOrDefault("X-Amz-Credential")
  valid_607050 = validateParameter(valid_607050, JString, required = false,
                                 default = nil)
  if valid_607050 != nil:
    section.add "X-Amz-Credential", valid_607050
  var valid_607051 = header.getOrDefault("X-Amz-Security-Token")
  valid_607051 = validateParameter(valid_607051, JString, required = false,
                                 default = nil)
  if valid_607051 != nil:
    section.add "X-Amz-Security-Token", valid_607051
  var valid_607052 = header.getOrDefault("X-Amz-Algorithm")
  valid_607052 = validateParameter(valid_607052, JString, required = false,
                                 default = nil)
  if valid_607052 != nil:
    section.add "X-Amz-Algorithm", valid_607052
  var valid_607053 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607053 = validateParameter(valid_607053, JString, required = false,
                                 default = nil)
  if valid_607053 != nil:
    section.add "X-Amz-SignedHeaders", valid_607053
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607054: Call_GetDeleteAccountPasswordPolicy_607042; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_607054.validator(path, query, header, formData, body)
  let scheme = call_607054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607054.url(scheme.get, call_607054.host, call_607054.base,
                         call_607054.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607054, url, valid)

proc call*(call_607055: Call_GetDeleteAccountPasswordPolicy_607042;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607056 = newJObject()
  add(query_607056, "Action", newJString(Action))
  add(query_607056, "Version", newJString(Version))
  result = call_607055.call(nil, query_607056, nil, nil, nil)

var getDeleteAccountPasswordPolicy* = Call_GetDeleteAccountPasswordPolicy_607042(
    name: "getDeleteAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_GetDeleteAccountPasswordPolicy_607043, base: "/",
    url: url_GetDeleteAccountPasswordPolicy_607044,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroup_607088 = ref object of OpenApiRestCall_605589
proc url_PostDeleteGroup_607090(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGroup_607089(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607091 = query.getOrDefault("Action")
  valid_607091 = validateParameter(valid_607091, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_607091 != nil:
    section.add "Action", valid_607091
  var valid_607092 = query.getOrDefault("Version")
  valid_607092 = validateParameter(valid_607092, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607092 != nil:
    section.add "Version", valid_607092
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607093 = header.getOrDefault("X-Amz-Signature")
  valid_607093 = validateParameter(valid_607093, JString, required = false,
                                 default = nil)
  if valid_607093 != nil:
    section.add "X-Amz-Signature", valid_607093
  var valid_607094 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607094 = validateParameter(valid_607094, JString, required = false,
                                 default = nil)
  if valid_607094 != nil:
    section.add "X-Amz-Content-Sha256", valid_607094
  var valid_607095 = header.getOrDefault("X-Amz-Date")
  valid_607095 = validateParameter(valid_607095, JString, required = false,
                                 default = nil)
  if valid_607095 != nil:
    section.add "X-Amz-Date", valid_607095
  var valid_607096 = header.getOrDefault("X-Amz-Credential")
  valid_607096 = validateParameter(valid_607096, JString, required = false,
                                 default = nil)
  if valid_607096 != nil:
    section.add "X-Amz-Credential", valid_607096
  var valid_607097 = header.getOrDefault("X-Amz-Security-Token")
  valid_607097 = validateParameter(valid_607097, JString, required = false,
                                 default = nil)
  if valid_607097 != nil:
    section.add "X-Amz-Security-Token", valid_607097
  var valid_607098 = header.getOrDefault("X-Amz-Algorithm")
  valid_607098 = validateParameter(valid_607098, JString, required = false,
                                 default = nil)
  if valid_607098 != nil:
    section.add "X-Amz-Algorithm", valid_607098
  var valid_607099 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607099 = validateParameter(valid_607099, JString, required = false,
                                 default = nil)
  if valid_607099 != nil:
    section.add "X-Amz-SignedHeaders", valid_607099
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_607100 = formData.getOrDefault("GroupName")
  valid_607100 = validateParameter(valid_607100, JString, required = true,
                                 default = nil)
  if valid_607100 != nil:
    section.add "GroupName", valid_607100
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607101: Call_PostDeleteGroup_607088; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_607101.validator(path, query, header, formData, body)
  let scheme = call_607101.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607101.url(scheme.get, call_607101.host, call_607101.base,
                         call_607101.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607101, url, valid)

proc call*(call_607102: Call_PostDeleteGroup_607088; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607103 = newJObject()
  var formData_607104 = newJObject()
  add(formData_607104, "GroupName", newJString(GroupName))
  add(query_607103, "Action", newJString(Action))
  add(query_607103, "Version", newJString(Version))
  result = call_607102.call(nil, query_607103, nil, formData_607104, nil)

var postDeleteGroup* = Call_PostDeleteGroup_607088(name: "postDeleteGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_PostDeleteGroup_607089,
    base: "/", url: url_PostDeleteGroup_607090, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroup_607072 = ref object of OpenApiRestCall_605589
proc url_GetDeleteGroup_607074(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGroup_607073(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_607075 = query.getOrDefault("GroupName")
  valid_607075 = validateParameter(valid_607075, JString, required = true,
                                 default = nil)
  if valid_607075 != nil:
    section.add "GroupName", valid_607075
  var valid_607076 = query.getOrDefault("Action")
  valid_607076 = validateParameter(valid_607076, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_607076 != nil:
    section.add "Action", valid_607076
  var valid_607077 = query.getOrDefault("Version")
  valid_607077 = validateParameter(valid_607077, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607077 != nil:
    section.add "Version", valid_607077
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607078 = header.getOrDefault("X-Amz-Signature")
  valid_607078 = validateParameter(valid_607078, JString, required = false,
                                 default = nil)
  if valid_607078 != nil:
    section.add "X-Amz-Signature", valid_607078
  var valid_607079 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607079 = validateParameter(valid_607079, JString, required = false,
                                 default = nil)
  if valid_607079 != nil:
    section.add "X-Amz-Content-Sha256", valid_607079
  var valid_607080 = header.getOrDefault("X-Amz-Date")
  valid_607080 = validateParameter(valid_607080, JString, required = false,
                                 default = nil)
  if valid_607080 != nil:
    section.add "X-Amz-Date", valid_607080
  var valid_607081 = header.getOrDefault("X-Amz-Credential")
  valid_607081 = validateParameter(valid_607081, JString, required = false,
                                 default = nil)
  if valid_607081 != nil:
    section.add "X-Amz-Credential", valid_607081
  var valid_607082 = header.getOrDefault("X-Amz-Security-Token")
  valid_607082 = validateParameter(valid_607082, JString, required = false,
                                 default = nil)
  if valid_607082 != nil:
    section.add "X-Amz-Security-Token", valid_607082
  var valid_607083 = header.getOrDefault("X-Amz-Algorithm")
  valid_607083 = validateParameter(valid_607083, JString, required = false,
                                 default = nil)
  if valid_607083 != nil:
    section.add "X-Amz-Algorithm", valid_607083
  var valid_607084 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607084 = validateParameter(valid_607084, JString, required = false,
                                 default = nil)
  if valid_607084 != nil:
    section.add "X-Amz-SignedHeaders", valid_607084
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607085: Call_GetDeleteGroup_607072; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_607085.validator(path, query, header, formData, body)
  let scheme = call_607085.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607085.url(scheme.get, call_607085.host, call_607085.base,
                         call_607085.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607085, url, valid)

proc call*(call_607086: Call_GetDeleteGroup_607072; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607087 = newJObject()
  add(query_607087, "GroupName", newJString(GroupName))
  add(query_607087, "Action", newJString(Action))
  add(query_607087, "Version", newJString(Version))
  result = call_607086.call(nil, query_607087, nil, nil, nil)

var getDeleteGroup* = Call_GetDeleteGroup_607072(name: "getDeleteGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_GetDeleteGroup_607073,
    base: "/", url: url_GetDeleteGroup_607074, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroupPolicy_607122 = ref object of OpenApiRestCall_605589
proc url_PostDeleteGroupPolicy_607124(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGroupPolicy_607123(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607125 = query.getOrDefault("Action")
  valid_607125 = validateParameter(valid_607125, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_607125 != nil:
    section.add "Action", valid_607125
  var valid_607126 = query.getOrDefault("Version")
  valid_607126 = validateParameter(valid_607126, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607126 != nil:
    section.add "Version", valid_607126
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607127 = header.getOrDefault("X-Amz-Signature")
  valid_607127 = validateParameter(valid_607127, JString, required = false,
                                 default = nil)
  if valid_607127 != nil:
    section.add "X-Amz-Signature", valid_607127
  var valid_607128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607128 = validateParameter(valid_607128, JString, required = false,
                                 default = nil)
  if valid_607128 != nil:
    section.add "X-Amz-Content-Sha256", valid_607128
  var valid_607129 = header.getOrDefault("X-Amz-Date")
  valid_607129 = validateParameter(valid_607129, JString, required = false,
                                 default = nil)
  if valid_607129 != nil:
    section.add "X-Amz-Date", valid_607129
  var valid_607130 = header.getOrDefault("X-Amz-Credential")
  valid_607130 = validateParameter(valid_607130, JString, required = false,
                                 default = nil)
  if valid_607130 != nil:
    section.add "X-Amz-Credential", valid_607130
  var valid_607131 = header.getOrDefault("X-Amz-Security-Token")
  valid_607131 = validateParameter(valid_607131, JString, required = false,
                                 default = nil)
  if valid_607131 != nil:
    section.add "X-Amz-Security-Token", valid_607131
  var valid_607132 = header.getOrDefault("X-Amz-Algorithm")
  valid_607132 = validateParameter(valid_607132, JString, required = false,
                                 default = nil)
  if valid_607132 != nil:
    section.add "X-Amz-Algorithm", valid_607132
  var valid_607133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607133 = validateParameter(valid_607133, JString, required = false,
                                 default = nil)
  if valid_607133 != nil:
    section.add "X-Amz-SignedHeaders", valid_607133
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_607134 = formData.getOrDefault("GroupName")
  valid_607134 = validateParameter(valid_607134, JString, required = true,
                                 default = nil)
  if valid_607134 != nil:
    section.add "GroupName", valid_607134
  var valid_607135 = formData.getOrDefault("PolicyName")
  valid_607135 = validateParameter(valid_607135, JString, required = true,
                                 default = nil)
  if valid_607135 != nil:
    section.add "PolicyName", valid_607135
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607136: Call_PostDeleteGroupPolicy_607122; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607136.validator(path, query, header, formData, body)
  let scheme = call_607136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607136.url(scheme.get, call_607136.host, call_607136.base,
                         call_607136.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607136, url, valid)

proc call*(call_607137: Call_PostDeleteGroupPolicy_607122; GroupName: string;
          PolicyName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_607138 = newJObject()
  var formData_607139 = newJObject()
  add(formData_607139, "GroupName", newJString(GroupName))
  add(query_607138, "Action", newJString(Action))
  add(query_607138, "Version", newJString(Version))
  add(formData_607139, "PolicyName", newJString(PolicyName))
  result = call_607137.call(nil, query_607138, nil, formData_607139, nil)

var postDeleteGroupPolicy* = Call_PostDeleteGroupPolicy_607122(
    name: "postDeleteGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_PostDeleteGroupPolicy_607123, base: "/",
    url: url_PostDeleteGroupPolicy_607124, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroupPolicy_607105 = ref object of OpenApiRestCall_605589
proc url_GetDeleteGroupPolicy_607107(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGroupPolicy_607106(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_607108 = query.getOrDefault("GroupName")
  valid_607108 = validateParameter(valid_607108, JString, required = true,
                                 default = nil)
  if valid_607108 != nil:
    section.add "GroupName", valid_607108
  var valid_607109 = query.getOrDefault("PolicyName")
  valid_607109 = validateParameter(valid_607109, JString, required = true,
                                 default = nil)
  if valid_607109 != nil:
    section.add "PolicyName", valid_607109
  var valid_607110 = query.getOrDefault("Action")
  valid_607110 = validateParameter(valid_607110, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_607110 != nil:
    section.add "Action", valid_607110
  var valid_607111 = query.getOrDefault("Version")
  valid_607111 = validateParameter(valid_607111, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607111 != nil:
    section.add "Version", valid_607111
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607112 = header.getOrDefault("X-Amz-Signature")
  valid_607112 = validateParameter(valid_607112, JString, required = false,
                                 default = nil)
  if valid_607112 != nil:
    section.add "X-Amz-Signature", valid_607112
  var valid_607113 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607113 = validateParameter(valid_607113, JString, required = false,
                                 default = nil)
  if valid_607113 != nil:
    section.add "X-Amz-Content-Sha256", valid_607113
  var valid_607114 = header.getOrDefault("X-Amz-Date")
  valid_607114 = validateParameter(valid_607114, JString, required = false,
                                 default = nil)
  if valid_607114 != nil:
    section.add "X-Amz-Date", valid_607114
  var valid_607115 = header.getOrDefault("X-Amz-Credential")
  valid_607115 = validateParameter(valid_607115, JString, required = false,
                                 default = nil)
  if valid_607115 != nil:
    section.add "X-Amz-Credential", valid_607115
  var valid_607116 = header.getOrDefault("X-Amz-Security-Token")
  valid_607116 = validateParameter(valid_607116, JString, required = false,
                                 default = nil)
  if valid_607116 != nil:
    section.add "X-Amz-Security-Token", valid_607116
  var valid_607117 = header.getOrDefault("X-Amz-Algorithm")
  valid_607117 = validateParameter(valid_607117, JString, required = false,
                                 default = nil)
  if valid_607117 != nil:
    section.add "X-Amz-Algorithm", valid_607117
  var valid_607118 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607118 = validateParameter(valid_607118, JString, required = false,
                                 default = nil)
  if valid_607118 != nil:
    section.add "X-Amz-SignedHeaders", valid_607118
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607119: Call_GetDeleteGroupPolicy_607105; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607119.validator(path, query, header, formData, body)
  let scheme = call_607119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607119.url(scheme.get, call_607119.host, call_607119.base,
                         call_607119.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607119, url, valid)

proc call*(call_607120: Call_GetDeleteGroupPolicy_607105; GroupName: string;
          PolicyName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607121 = newJObject()
  add(query_607121, "GroupName", newJString(GroupName))
  add(query_607121, "PolicyName", newJString(PolicyName))
  add(query_607121, "Action", newJString(Action))
  add(query_607121, "Version", newJString(Version))
  result = call_607120.call(nil, query_607121, nil, nil, nil)

var getDeleteGroupPolicy* = Call_GetDeleteGroupPolicy_607105(
    name: "getDeleteGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_GetDeleteGroupPolicy_607106, base: "/",
    url: url_GetDeleteGroupPolicy_607107, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstanceProfile_607156 = ref object of OpenApiRestCall_605589
proc url_PostDeleteInstanceProfile_607158(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteInstanceProfile_607157(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607159 = query.getOrDefault("Action")
  valid_607159 = validateParameter(valid_607159, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_607159 != nil:
    section.add "Action", valid_607159
  var valid_607160 = query.getOrDefault("Version")
  valid_607160 = validateParameter(valid_607160, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607160 != nil:
    section.add "Version", valid_607160
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607161 = header.getOrDefault("X-Amz-Signature")
  valid_607161 = validateParameter(valid_607161, JString, required = false,
                                 default = nil)
  if valid_607161 != nil:
    section.add "X-Amz-Signature", valid_607161
  var valid_607162 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607162 = validateParameter(valid_607162, JString, required = false,
                                 default = nil)
  if valid_607162 != nil:
    section.add "X-Amz-Content-Sha256", valid_607162
  var valid_607163 = header.getOrDefault("X-Amz-Date")
  valid_607163 = validateParameter(valid_607163, JString, required = false,
                                 default = nil)
  if valid_607163 != nil:
    section.add "X-Amz-Date", valid_607163
  var valid_607164 = header.getOrDefault("X-Amz-Credential")
  valid_607164 = validateParameter(valid_607164, JString, required = false,
                                 default = nil)
  if valid_607164 != nil:
    section.add "X-Amz-Credential", valid_607164
  var valid_607165 = header.getOrDefault("X-Amz-Security-Token")
  valid_607165 = validateParameter(valid_607165, JString, required = false,
                                 default = nil)
  if valid_607165 != nil:
    section.add "X-Amz-Security-Token", valid_607165
  var valid_607166 = header.getOrDefault("X-Amz-Algorithm")
  valid_607166 = validateParameter(valid_607166, JString, required = false,
                                 default = nil)
  if valid_607166 != nil:
    section.add "X-Amz-Algorithm", valid_607166
  var valid_607167 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607167 = validateParameter(valid_607167, JString, required = false,
                                 default = nil)
  if valid_607167 != nil:
    section.add "X-Amz-SignedHeaders", valid_607167
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_607168 = formData.getOrDefault("InstanceProfileName")
  valid_607168 = validateParameter(valid_607168, JString, required = true,
                                 default = nil)
  if valid_607168 != nil:
    section.add "InstanceProfileName", valid_607168
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607169: Call_PostDeleteInstanceProfile_607156; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_607169.validator(path, query, header, formData, body)
  let scheme = call_607169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607169.url(scheme.get, call_607169.host, call_607169.base,
                         call_607169.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607169, url, valid)

proc call*(call_607170: Call_PostDeleteInstanceProfile_607156;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_607171 = newJObject()
  var formData_607172 = newJObject()
  add(query_607171, "Action", newJString(Action))
  add(formData_607172, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_607171, "Version", newJString(Version))
  result = call_607170.call(nil, query_607171, nil, formData_607172, nil)

var postDeleteInstanceProfile* = Call_PostDeleteInstanceProfile_607156(
    name: "postDeleteInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_PostDeleteInstanceProfile_607157, base: "/",
    url: url_PostDeleteInstanceProfile_607158,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstanceProfile_607140 = ref object of OpenApiRestCall_605589
proc url_GetDeleteInstanceProfile_607142(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteInstanceProfile_607141(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607143 = query.getOrDefault("Action")
  valid_607143 = validateParameter(valid_607143, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_607143 != nil:
    section.add "Action", valid_607143
  var valid_607144 = query.getOrDefault("InstanceProfileName")
  valid_607144 = validateParameter(valid_607144, JString, required = true,
                                 default = nil)
  if valid_607144 != nil:
    section.add "InstanceProfileName", valid_607144
  var valid_607145 = query.getOrDefault("Version")
  valid_607145 = validateParameter(valid_607145, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607145 != nil:
    section.add "Version", valid_607145
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607146 = header.getOrDefault("X-Amz-Signature")
  valid_607146 = validateParameter(valid_607146, JString, required = false,
                                 default = nil)
  if valid_607146 != nil:
    section.add "X-Amz-Signature", valid_607146
  var valid_607147 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607147 = validateParameter(valid_607147, JString, required = false,
                                 default = nil)
  if valid_607147 != nil:
    section.add "X-Amz-Content-Sha256", valid_607147
  var valid_607148 = header.getOrDefault("X-Amz-Date")
  valid_607148 = validateParameter(valid_607148, JString, required = false,
                                 default = nil)
  if valid_607148 != nil:
    section.add "X-Amz-Date", valid_607148
  var valid_607149 = header.getOrDefault("X-Amz-Credential")
  valid_607149 = validateParameter(valid_607149, JString, required = false,
                                 default = nil)
  if valid_607149 != nil:
    section.add "X-Amz-Credential", valid_607149
  var valid_607150 = header.getOrDefault("X-Amz-Security-Token")
  valid_607150 = validateParameter(valid_607150, JString, required = false,
                                 default = nil)
  if valid_607150 != nil:
    section.add "X-Amz-Security-Token", valid_607150
  var valid_607151 = header.getOrDefault("X-Amz-Algorithm")
  valid_607151 = validateParameter(valid_607151, JString, required = false,
                                 default = nil)
  if valid_607151 != nil:
    section.add "X-Amz-Algorithm", valid_607151
  var valid_607152 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607152 = validateParameter(valid_607152, JString, required = false,
                                 default = nil)
  if valid_607152 != nil:
    section.add "X-Amz-SignedHeaders", valid_607152
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607153: Call_GetDeleteInstanceProfile_607140; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_607153.validator(path, query, header, formData, body)
  let scheme = call_607153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607153.url(scheme.get, call_607153.host, call_607153.base,
                         call_607153.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607153, url, valid)

proc call*(call_607154: Call_GetDeleteInstanceProfile_607140;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_607155 = newJObject()
  add(query_607155, "Action", newJString(Action))
  add(query_607155, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_607155, "Version", newJString(Version))
  result = call_607154.call(nil, query_607155, nil, nil, nil)

var getDeleteInstanceProfile* = Call_GetDeleteInstanceProfile_607140(
    name: "getDeleteInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_GetDeleteInstanceProfile_607141, base: "/",
    url: url_GetDeleteInstanceProfile_607142, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLoginProfile_607189 = ref object of OpenApiRestCall_605589
proc url_PostDeleteLoginProfile_607191(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLoginProfile_607190(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607192 = query.getOrDefault("Action")
  valid_607192 = validateParameter(valid_607192, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_607192 != nil:
    section.add "Action", valid_607192
  var valid_607193 = query.getOrDefault("Version")
  valid_607193 = validateParameter(valid_607193, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607193 != nil:
    section.add "Version", valid_607193
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607194 = header.getOrDefault("X-Amz-Signature")
  valid_607194 = validateParameter(valid_607194, JString, required = false,
                                 default = nil)
  if valid_607194 != nil:
    section.add "X-Amz-Signature", valid_607194
  var valid_607195 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607195 = validateParameter(valid_607195, JString, required = false,
                                 default = nil)
  if valid_607195 != nil:
    section.add "X-Amz-Content-Sha256", valid_607195
  var valid_607196 = header.getOrDefault("X-Amz-Date")
  valid_607196 = validateParameter(valid_607196, JString, required = false,
                                 default = nil)
  if valid_607196 != nil:
    section.add "X-Amz-Date", valid_607196
  var valid_607197 = header.getOrDefault("X-Amz-Credential")
  valid_607197 = validateParameter(valid_607197, JString, required = false,
                                 default = nil)
  if valid_607197 != nil:
    section.add "X-Amz-Credential", valid_607197
  var valid_607198 = header.getOrDefault("X-Amz-Security-Token")
  valid_607198 = validateParameter(valid_607198, JString, required = false,
                                 default = nil)
  if valid_607198 != nil:
    section.add "X-Amz-Security-Token", valid_607198
  var valid_607199 = header.getOrDefault("X-Amz-Algorithm")
  valid_607199 = validateParameter(valid_607199, JString, required = false,
                                 default = nil)
  if valid_607199 != nil:
    section.add "X-Amz-Algorithm", valid_607199
  var valid_607200 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607200 = validateParameter(valid_607200, JString, required = false,
                                 default = nil)
  if valid_607200 != nil:
    section.add "X-Amz-SignedHeaders", valid_607200
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_607201 = formData.getOrDefault("UserName")
  valid_607201 = validateParameter(valid_607201, JString, required = true,
                                 default = nil)
  if valid_607201 != nil:
    section.add "UserName", valid_607201
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607202: Call_PostDeleteLoginProfile_607189; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_607202.validator(path, query, header, formData, body)
  let scheme = call_607202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607202.url(scheme.get, call_607202.host, call_607202.base,
                         call_607202.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607202, url, valid)

proc call*(call_607203: Call_PostDeleteLoginProfile_607189; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607204 = newJObject()
  var formData_607205 = newJObject()
  add(formData_607205, "UserName", newJString(UserName))
  add(query_607204, "Action", newJString(Action))
  add(query_607204, "Version", newJString(Version))
  result = call_607203.call(nil, query_607204, nil, formData_607205, nil)

var postDeleteLoginProfile* = Call_PostDeleteLoginProfile_607189(
    name: "postDeleteLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_PostDeleteLoginProfile_607190, base: "/",
    url: url_PostDeleteLoginProfile_607191, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLoginProfile_607173 = ref object of OpenApiRestCall_605589
proc url_GetDeleteLoginProfile_607175(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLoginProfile_607174(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_607176 = query.getOrDefault("UserName")
  valid_607176 = validateParameter(valid_607176, JString, required = true,
                                 default = nil)
  if valid_607176 != nil:
    section.add "UserName", valid_607176
  var valid_607177 = query.getOrDefault("Action")
  valid_607177 = validateParameter(valid_607177, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_607177 != nil:
    section.add "Action", valid_607177
  var valid_607178 = query.getOrDefault("Version")
  valid_607178 = validateParameter(valid_607178, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607178 != nil:
    section.add "Version", valid_607178
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607179 = header.getOrDefault("X-Amz-Signature")
  valid_607179 = validateParameter(valid_607179, JString, required = false,
                                 default = nil)
  if valid_607179 != nil:
    section.add "X-Amz-Signature", valid_607179
  var valid_607180 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607180 = validateParameter(valid_607180, JString, required = false,
                                 default = nil)
  if valid_607180 != nil:
    section.add "X-Amz-Content-Sha256", valid_607180
  var valid_607181 = header.getOrDefault("X-Amz-Date")
  valid_607181 = validateParameter(valid_607181, JString, required = false,
                                 default = nil)
  if valid_607181 != nil:
    section.add "X-Amz-Date", valid_607181
  var valid_607182 = header.getOrDefault("X-Amz-Credential")
  valid_607182 = validateParameter(valid_607182, JString, required = false,
                                 default = nil)
  if valid_607182 != nil:
    section.add "X-Amz-Credential", valid_607182
  var valid_607183 = header.getOrDefault("X-Amz-Security-Token")
  valid_607183 = validateParameter(valid_607183, JString, required = false,
                                 default = nil)
  if valid_607183 != nil:
    section.add "X-Amz-Security-Token", valid_607183
  var valid_607184 = header.getOrDefault("X-Amz-Algorithm")
  valid_607184 = validateParameter(valid_607184, JString, required = false,
                                 default = nil)
  if valid_607184 != nil:
    section.add "X-Amz-Algorithm", valid_607184
  var valid_607185 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607185 = validateParameter(valid_607185, JString, required = false,
                                 default = nil)
  if valid_607185 != nil:
    section.add "X-Amz-SignedHeaders", valid_607185
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607186: Call_GetDeleteLoginProfile_607173; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_607186.validator(path, query, header, formData, body)
  let scheme = call_607186.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607186.url(scheme.get, call_607186.host, call_607186.base,
                         call_607186.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607186, url, valid)

proc call*(call_607187: Call_GetDeleteLoginProfile_607173; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607188 = newJObject()
  add(query_607188, "UserName", newJString(UserName))
  add(query_607188, "Action", newJString(Action))
  add(query_607188, "Version", newJString(Version))
  result = call_607187.call(nil, query_607188, nil, nil, nil)

var getDeleteLoginProfile* = Call_GetDeleteLoginProfile_607173(
    name: "getDeleteLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_GetDeleteLoginProfile_607174, base: "/",
    url: url_GetDeleteLoginProfile_607175, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOpenIDConnectProvider_607222 = ref object of OpenApiRestCall_605589
proc url_PostDeleteOpenIDConnectProvider_607224(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteOpenIDConnectProvider_607223(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607225 = query.getOrDefault("Action")
  valid_607225 = validateParameter(valid_607225, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_607225 != nil:
    section.add "Action", valid_607225
  var valid_607226 = query.getOrDefault("Version")
  valid_607226 = validateParameter(valid_607226, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607226 != nil:
    section.add "Version", valid_607226
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607227 = header.getOrDefault("X-Amz-Signature")
  valid_607227 = validateParameter(valid_607227, JString, required = false,
                                 default = nil)
  if valid_607227 != nil:
    section.add "X-Amz-Signature", valid_607227
  var valid_607228 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607228 = validateParameter(valid_607228, JString, required = false,
                                 default = nil)
  if valid_607228 != nil:
    section.add "X-Amz-Content-Sha256", valid_607228
  var valid_607229 = header.getOrDefault("X-Amz-Date")
  valid_607229 = validateParameter(valid_607229, JString, required = false,
                                 default = nil)
  if valid_607229 != nil:
    section.add "X-Amz-Date", valid_607229
  var valid_607230 = header.getOrDefault("X-Amz-Credential")
  valid_607230 = validateParameter(valid_607230, JString, required = false,
                                 default = nil)
  if valid_607230 != nil:
    section.add "X-Amz-Credential", valid_607230
  var valid_607231 = header.getOrDefault("X-Amz-Security-Token")
  valid_607231 = validateParameter(valid_607231, JString, required = false,
                                 default = nil)
  if valid_607231 != nil:
    section.add "X-Amz-Security-Token", valid_607231
  var valid_607232 = header.getOrDefault("X-Amz-Algorithm")
  valid_607232 = validateParameter(valid_607232, JString, required = false,
                                 default = nil)
  if valid_607232 != nil:
    section.add "X-Amz-Algorithm", valid_607232
  var valid_607233 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607233 = validateParameter(valid_607233, JString, required = false,
                                 default = nil)
  if valid_607233 != nil:
    section.add "X-Amz-SignedHeaders", valid_607233
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_607234 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_607234 = validateParameter(valid_607234, JString, required = true,
                                 default = nil)
  if valid_607234 != nil:
    section.add "OpenIDConnectProviderArn", valid_607234
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607235: Call_PostDeleteOpenIDConnectProvider_607222;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_607235.validator(path, query, header, formData, body)
  let scheme = call_607235.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607235.url(scheme.get, call_607235.host, call_607235.base,
                         call_607235.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607235, url, valid)

proc call*(call_607236: Call_PostDeleteOpenIDConnectProvider_607222;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_607237 = newJObject()
  var formData_607238 = newJObject()
  add(query_607237, "Action", newJString(Action))
  add(query_607237, "Version", newJString(Version))
  add(formData_607238, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_607236.call(nil, query_607237, nil, formData_607238, nil)

var postDeleteOpenIDConnectProvider* = Call_PostDeleteOpenIDConnectProvider_607222(
    name: "postDeleteOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_PostDeleteOpenIDConnectProvider_607223, base: "/",
    url: url_PostDeleteOpenIDConnectProvider_607224,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOpenIDConnectProvider_607206 = ref object of OpenApiRestCall_605589
proc url_GetDeleteOpenIDConnectProvider_607208(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteOpenIDConnectProvider_607207(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_607209 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_607209 = validateParameter(valid_607209, JString, required = true,
                                 default = nil)
  if valid_607209 != nil:
    section.add "OpenIDConnectProviderArn", valid_607209
  var valid_607210 = query.getOrDefault("Action")
  valid_607210 = validateParameter(valid_607210, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_607210 != nil:
    section.add "Action", valid_607210
  var valid_607211 = query.getOrDefault("Version")
  valid_607211 = validateParameter(valid_607211, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607211 != nil:
    section.add "Version", valid_607211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607212 = header.getOrDefault("X-Amz-Signature")
  valid_607212 = validateParameter(valid_607212, JString, required = false,
                                 default = nil)
  if valid_607212 != nil:
    section.add "X-Amz-Signature", valid_607212
  var valid_607213 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607213 = validateParameter(valid_607213, JString, required = false,
                                 default = nil)
  if valid_607213 != nil:
    section.add "X-Amz-Content-Sha256", valid_607213
  var valid_607214 = header.getOrDefault("X-Amz-Date")
  valid_607214 = validateParameter(valid_607214, JString, required = false,
                                 default = nil)
  if valid_607214 != nil:
    section.add "X-Amz-Date", valid_607214
  var valid_607215 = header.getOrDefault("X-Amz-Credential")
  valid_607215 = validateParameter(valid_607215, JString, required = false,
                                 default = nil)
  if valid_607215 != nil:
    section.add "X-Amz-Credential", valid_607215
  var valid_607216 = header.getOrDefault("X-Amz-Security-Token")
  valid_607216 = validateParameter(valid_607216, JString, required = false,
                                 default = nil)
  if valid_607216 != nil:
    section.add "X-Amz-Security-Token", valid_607216
  var valid_607217 = header.getOrDefault("X-Amz-Algorithm")
  valid_607217 = validateParameter(valid_607217, JString, required = false,
                                 default = nil)
  if valid_607217 != nil:
    section.add "X-Amz-Algorithm", valid_607217
  var valid_607218 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607218 = validateParameter(valid_607218, JString, required = false,
                                 default = nil)
  if valid_607218 != nil:
    section.add "X-Amz-SignedHeaders", valid_607218
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607219: Call_GetDeleteOpenIDConnectProvider_607206; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_607219.validator(path, query, header, formData, body)
  let scheme = call_607219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607219.url(scheme.get, call_607219.host, call_607219.base,
                         call_607219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607219, url, valid)

proc call*(call_607220: Call_GetDeleteOpenIDConnectProvider_607206;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607221 = newJObject()
  add(query_607221, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_607221, "Action", newJString(Action))
  add(query_607221, "Version", newJString(Version))
  result = call_607220.call(nil, query_607221, nil, nil, nil)

var getDeleteOpenIDConnectProvider* = Call_GetDeleteOpenIDConnectProvider_607206(
    name: "getDeleteOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_GetDeleteOpenIDConnectProvider_607207, base: "/",
    url: url_GetDeleteOpenIDConnectProvider_607208,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_607255 = ref object of OpenApiRestCall_605589
proc url_PostDeletePolicy_607257(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicy_607256(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607258 = query.getOrDefault("Action")
  valid_607258 = validateParameter(valid_607258, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_607258 != nil:
    section.add "Action", valid_607258
  var valid_607259 = query.getOrDefault("Version")
  valid_607259 = validateParameter(valid_607259, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607259 != nil:
    section.add "Version", valid_607259
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607260 = header.getOrDefault("X-Amz-Signature")
  valid_607260 = validateParameter(valid_607260, JString, required = false,
                                 default = nil)
  if valid_607260 != nil:
    section.add "X-Amz-Signature", valid_607260
  var valid_607261 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607261 = validateParameter(valid_607261, JString, required = false,
                                 default = nil)
  if valid_607261 != nil:
    section.add "X-Amz-Content-Sha256", valid_607261
  var valid_607262 = header.getOrDefault("X-Amz-Date")
  valid_607262 = validateParameter(valid_607262, JString, required = false,
                                 default = nil)
  if valid_607262 != nil:
    section.add "X-Amz-Date", valid_607262
  var valid_607263 = header.getOrDefault("X-Amz-Credential")
  valid_607263 = validateParameter(valid_607263, JString, required = false,
                                 default = nil)
  if valid_607263 != nil:
    section.add "X-Amz-Credential", valid_607263
  var valid_607264 = header.getOrDefault("X-Amz-Security-Token")
  valid_607264 = validateParameter(valid_607264, JString, required = false,
                                 default = nil)
  if valid_607264 != nil:
    section.add "X-Amz-Security-Token", valid_607264
  var valid_607265 = header.getOrDefault("X-Amz-Algorithm")
  valid_607265 = validateParameter(valid_607265, JString, required = false,
                                 default = nil)
  if valid_607265 != nil:
    section.add "X-Amz-Algorithm", valid_607265
  var valid_607266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607266 = validateParameter(valid_607266, JString, required = false,
                                 default = nil)
  if valid_607266 != nil:
    section.add "X-Amz-SignedHeaders", valid_607266
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_607267 = formData.getOrDefault("PolicyArn")
  valid_607267 = validateParameter(valid_607267, JString, required = true,
                                 default = nil)
  if valid_607267 != nil:
    section.add "PolicyArn", valid_607267
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607268: Call_PostDeletePolicy_607255; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607268.validator(path, query, header, formData, body)
  let scheme = call_607268.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607268.url(scheme.get, call_607268.host, call_607268.base,
                         call_607268.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607268, url, valid)

proc call*(call_607269: Call_PostDeletePolicy_607255; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607270 = newJObject()
  var formData_607271 = newJObject()
  add(formData_607271, "PolicyArn", newJString(PolicyArn))
  add(query_607270, "Action", newJString(Action))
  add(query_607270, "Version", newJString(Version))
  result = call_607269.call(nil, query_607270, nil, formData_607271, nil)

var postDeletePolicy* = Call_PostDeletePolicy_607255(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_607256,
    base: "/", url: url_PostDeletePolicy_607257,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_607239 = ref object of OpenApiRestCall_605589
proc url_GetDeletePolicy_607241(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicy_607240(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_607242 = query.getOrDefault("PolicyArn")
  valid_607242 = validateParameter(valid_607242, JString, required = true,
                                 default = nil)
  if valid_607242 != nil:
    section.add "PolicyArn", valid_607242
  var valid_607243 = query.getOrDefault("Action")
  valid_607243 = validateParameter(valid_607243, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_607243 != nil:
    section.add "Action", valid_607243
  var valid_607244 = query.getOrDefault("Version")
  valid_607244 = validateParameter(valid_607244, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607244 != nil:
    section.add "Version", valid_607244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607245 = header.getOrDefault("X-Amz-Signature")
  valid_607245 = validateParameter(valid_607245, JString, required = false,
                                 default = nil)
  if valid_607245 != nil:
    section.add "X-Amz-Signature", valid_607245
  var valid_607246 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607246 = validateParameter(valid_607246, JString, required = false,
                                 default = nil)
  if valid_607246 != nil:
    section.add "X-Amz-Content-Sha256", valid_607246
  var valid_607247 = header.getOrDefault("X-Amz-Date")
  valid_607247 = validateParameter(valid_607247, JString, required = false,
                                 default = nil)
  if valid_607247 != nil:
    section.add "X-Amz-Date", valid_607247
  var valid_607248 = header.getOrDefault("X-Amz-Credential")
  valid_607248 = validateParameter(valid_607248, JString, required = false,
                                 default = nil)
  if valid_607248 != nil:
    section.add "X-Amz-Credential", valid_607248
  var valid_607249 = header.getOrDefault("X-Amz-Security-Token")
  valid_607249 = validateParameter(valid_607249, JString, required = false,
                                 default = nil)
  if valid_607249 != nil:
    section.add "X-Amz-Security-Token", valid_607249
  var valid_607250 = header.getOrDefault("X-Amz-Algorithm")
  valid_607250 = validateParameter(valid_607250, JString, required = false,
                                 default = nil)
  if valid_607250 != nil:
    section.add "X-Amz-Algorithm", valid_607250
  var valid_607251 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607251 = validateParameter(valid_607251, JString, required = false,
                                 default = nil)
  if valid_607251 != nil:
    section.add "X-Amz-SignedHeaders", valid_607251
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607252: Call_GetDeletePolicy_607239; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607252.validator(path, query, header, formData, body)
  let scheme = call_607252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607252.url(scheme.get, call_607252.host, call_607252.base,
                         call_607252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607252, url, valid)

proc call*(call_607253: Call_GetDeletePolicy_607239; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607254 = newJObject()
  add(query_607254, "PolicyArn", newJString(PolicyArn))
  add(query_607254, "Action", newJString(Action))
  add(query_607254, "Version", newJString(Version))
  result = call_607253.call(nil, query_607254, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_607239(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_607240,
    base: "/", url: url_GetDeletePolicy_607241, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicyVersion_607289 = ref object of OpenApiRestCall_605589
proc url_PostDeletePolicyVersion_607291(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicyVersion_607290(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607292 = query.getOrDefault("Action")
  valid_607292 = validateParameter(valid_607292, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_607292 != nil:
    section.add "Action", valid_607292
  var valid_607293 = query.getOrDefault("Version")
  valid_607293 = validateParameter(valid_607293, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607293 != nil:
    section.add "Version", valid_607293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607294 = header.getOrDefault("X-Amz-Signature")
  valid_607294 = validateParameter(valid_607294, JString, required = false,
                                 default = nil)
  if valid_607294 != nil:
    section.add "X-Amz-Signature", valid_607294
  var valid_607295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607295 = validateParameter(valid_607295, JString, required = false,
                                 default = nil)
  if valid_607295 != nil:
    section.add "X-Amz-Content-Sha256", valid_607295
  var valid_607296 = header.getOrDefault("X-Amz-Date")
  valid_607296 = validateParameter(valid_607296, JString, required = false,
                                 default = nil)
  if valid_607296 != nil:
    section.add "X-Amz-Date", valid_607296
  var valid_607297 = header.getOrDefault("X-Amz-Credential")
  valid_607297 = validateParameter(valid_607297, JString, required = false,
                                 default = nil)
  if valid_607297 != nil:
    section.add "X-Amz-Credential", valid_607297
  var valid_607298 = header.getOrDefault("X-Amz-Security-Token")
  valid_607298 = validateParameter(valid_607298, JString, required = false,
                                 default = nil)
  if valid_607298 != nil:
    section.add "X-Amz-Security-Token", valid_607298
  var valid_607299 = header.getOrDefault("X-Amz-Algorithm")
  valid_607299 = validateParameter(valid_607299, JString, required = false,
                                 default = nil)
  if valid_607299 != nil:
    section.add "X-Amz-Algorithm", valid_607299
  var valid_607300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607300 = validateParameter(valid_607300, JString, required = false,
                                 default = nil)
  if valid_607300 != nil:
    section.add "X-Amz-SignedHeaders", valid_607300
  result.add "header", section
  ## parameters in `formData` object:
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `VersionId` field"
  var valid_607301 = formData.getOrDefault("VersionId")
  valid_607301 = validateParameter(valid_607301, JString, required = true,
                                 default = nil)
  if valid_607301 != nil:
    section.add "VersionId", valid_607301
  var valid_607302 = formData.getOrDefault("PolicyArn")
  valid_607302 = validateParameter(valid_607302, JString, required = true,
                                 default = nil)
  if valid_607302 != nil:
    section.add "PolicyArn", valid_607302
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607303: Call_PostDeletePolicyVersion_607289; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607303.validator(path, query, header, formData, body)
  let scheme = call_607303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607303.url(scheme.get, call_607303.host, call_607303.base,
                         call_607303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607303, url, valid)

proc call*(call_607304: Call_PostDeletePolicyVersion_607289; VersionId: string;
          PolicyArn: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607305 = newJObject()
  var formData_607306 = newJObject()
  add(formData_607306, "VersionId", newJString(VersionId))
  add(formData_607306, "PolicyArn", newJString(PolicyArn))
  add(query_607305, "Action", newJString(Action))
  add(query_607305, "Version", newJString(Version))
  result = call_607304.call(nil, query_607305, nil, formData_607306, nil)

var postDeletePolicyVersion* = Call_PostDeletePolicyVersion_607289(
    name: "postDeletePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_PostDeletePolicyVersion_607290, base: "/",
    url: url_PostDeletePolicyVersion_607291, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicyVersion_607272 = ref object of OpenApiRestCall_605589
proc url_GetDeletePolicyVersion_607274(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicyVersion_607273(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `VersionId` field"
  var valid_607275 = query.getOrDefault("VersionId")
  valid_607275 = validateParameter(valid_607275, JString, required = true,
                                 default = nil)
  if valid_607275 != nil:
    section.add "VersionId", valid_607275
  var valid_607276 = query.getOrDefault("PolicyArn")
  valid_607276 = validateParameter(valid_607276, JString, required = true,
                                 default = nil)
  if valid_607276 != nil:
    section.add "PolicyArn", valid_607276
  var valid_607277 = query.getOrDefault("Action")
  valid_607277 = validateParameter(valid_607277, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_607277 != nil:
    section.add "Action", valid_607277
  var valid_607278 = query.getOrDefault("Version")
  valid_607278 = validateParameter(valid_607278, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607278 != nil:
    section.add "Version", valid_607278
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607279 = header.getOrDefault("X-Amz-Signature")
  valid_607279 = validateParameter(valid_607279, JString, required = false,
                                 default = nil)
  if valid_607279 != nil:
    section.add "X-Amz-Signature", valid_607279
  var valid_607280 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607280 = validateParameter(valid_607280, JString, required = false,
                                 default = nil)
  if valid_607280 != nil:
    section.add "X-Amz-Content-Sha256", valid_607280
  var valid_607281 = header.getOrDefault("X-Amz-Date")
  valid_607281 = validateParameter(valid_607281, JString, required = false,
                                 default = nil)
  if valid_607281 != nil:
    section.add "X-Amz-Date", valid_607281
  var valid_607282 = header.getOrDefault("X-Amz-Credential")
  valid_607282 = validateParameter(valid_607282, JString, required = false,
                                 default = nil)
  if valid_607282 != nil:
    section.add "X-Amz-Credential", valid_607282
  var valid_607283 = header.getOrDefault("X-Amz-Security-Token")
  valid_607283 = validateParameter(valid_607283, JString, required = false,
                                 default = nil)
  if valid_607283 != nil:
    section.add "X-Amz-Security-Token", valid_607283
  var valid_607284 = header.getOrDefault("X-Amz-Algorithm")
  valid_607284 = validateParameter(valid_607284, JString, required = false,
                                 default = nil)
  if valid_607284 != nil:
    section.add "X-Amz-Algorithm", valid_607284
  var valid_607285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607285 = validateParameter(valid_607285, JString, required = false,
                                 default = nil)
  if valid_607285 != nil:
    section.add "X-Amz-SignedHeaders", valid_607285
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607286: Call_GetDeletePolicyVersion_607272; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607286.validator(path, query, header, formData, body)
  let scheme = call_607286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607286.url(scheme.get, call_607286.host, call_607286.base,
                         call_607286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607286, url, valid)

proc call*(call_607287: Call_GetDeletePolicyVersion_607272; VersionId: string;
          PolicyArn: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607288 = newJObject()
  add(query_607288, "VersionId", newJString(VersionId))
  add(query_607288, "PolicyArn", newJString(PolicyArn))
  add(query_607288, "Action", newJString(Action))
  add(query_607288, "Version", newJString(Version))
  result = call_607287.call(nil, query_607288, nil, nil, nil)

var getDeletePolicyVersion* = Call_GetDeletePolicyVersion_607272(
    name: "getDeletePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_GetDeletePolicyVersion_607273, base: "/",
    url: url_GetDeletePolicyVersion_607274, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRole_607323 = ref object of OpenApiRestCall_605589
proc url_PostDeleteRole_607325(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRole_607324(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607326 = query.getOrDefault("Action")
  valid_607326 = validateParameter(valid_607326, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_607326 != nil:
    section.add "Action", valid_607326
  var valid_607327 = query.getOrDefault("Version")
  valid_607327 = validateParameter(valid_607327, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607327 != nil:
    section.add "Version", valid_607327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607328 = header.getOrDefault("X-Amz-Signature")
  valid_607328 = validateParameter(valid_607328, JString, required = false,
                                 default = nil)
  if valid_607328 != nil:
    section.add "X-Amz-Signature", valid_607328
  var valid_607329 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607329 = validateParameter(valid_607329, JString, required = false,
                                 default = nil)
  if valid_607329 != nil:
    section.add "X-Amz-Content-Sha256", valid_607329
  var valid_607330 = header.getOrDefault("X-Amz-Date")
  valid_607330 = validateParameter(valid_607330, JString, required = false,
                                 default = nil)
  if valid_607330 != nil:
    section.add "X-Amz-Date", valid_607330
  var valid_607331 = header.getOrDefault("X-Amz-Credential")
  valid_607331 = validateParameter(valid_607331, JString, required = false,
                                 default = nil)
  if valid_607331 != nil:
    section.add "X-Amz-Credential", valid_607331
  var valid_607332 = header.getOrDefault("X-Amz-Security-Token")
  valid_607332 = validateParameter(valid_607332, JString, required = false,
                                 default = nil)
  if valid_607332 != nil:
    section.add "X-Amz-Security-Token", valid_607332
  var valid_607333 = header.getOrDefault("X-Amz-Algorithm")
  valid_607333 = validateParameter(valid_607333, JString, required = false,
                                 default = nil)
  if valid_607333 != nil:
    section.add "X-Amz-Algorithm", valid_607333
  var valid_607334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607334 = validateParameter(valid_607334, JString, required = false,
                                 default = nil)
  if valid_607334 != nil:
    section.add "X-Amz-SignedHeaders", valid_607334
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_607335 = formData.getOrDefault("RoleName")
  valid_607335 = validateParameter(valid_607335, JString, required = true,
                                 default = nil)
  if valid_607335 != nil:
    section.add "RoleName", valid_607335
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607336: Call_PostDeleteRole_607323; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_607336.validator(path, query, header, formData, body)
  let scheme = call_607336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607336.url(scheme.get, call_607336.host, call_607336.base,
                         call_607336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607336, url, valid)

proc call*(call_607337: Call_PostDeleteRole_607323; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607338 = newJObject()
  var formData_607339 = newJObject()
  add(formData_607339, "RoleName", newJString(RoleName))
  add(query_607338, "Action", newJString(Action))
  add(query_607338, "Version", newJString(Version))
  result = call_607337.call(nil, query_607338, nil, formData_607339, nil)

var postDeleteRole* = Call_PostDeleteRole_607323(name: "postDeleteRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_PostDeleteRole_607324,
    base: "/", url: url_PostDeleteRole_607325, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRole_607307 = ref object of OpenApiRestCall_605589
proc url_GetDeleteRole_607309(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRole_607308(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_607310 = query.getOrDefault("RoleName")
  valid_607310 = validateParameter(valid_607310, JString, required = true,
                                 default = nil)
  if valid_607310 != nil:
    section.add "RoleName", valid_607310
  var valid_607311 = query.getOrDefault("Action")
  valid_607311 = validateParameter(valid_607311, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_607311 != nil:
    section.add "Action", valid_607311
  var valid_607312 = query.getOrDefault("Version")
  valid_607312 = validateParameter(valid_607312, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607312 != nil:
    section.add "Version", valid_607312
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607313 = header.getOrDefault("X-Amz-Signature")
  valid_607313 = validateParameter(valid_607313, JString, required = false,
                                 default = nil)
  if valid_607313 != nil:
    section.add "X-Amz-Signature", valid_607313
  var valid_607314 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607314 = validateParameter(valid_607314, JString, required = false,
                                 default = nil)
  if valid_607314 != nil:
    section.add "X-Amz-Content-Sha256", valid_607314
  var valid_607315 = header.getOrDefault("X-Amz-Date")
  valid_607315 = validateParameter(valid_607315, JString, required = false,
                                 default = nil)
  if valid_607315 != nil:
    section.add "X-Amz-Date", valid_607315
  var valid_607316 = header.getOrDefault("X-Amz-Credential")
  valid_607316 = validateParameter(valid_607316, JString, required = false,
                                 default = nil)
  if valid_607316 != nil:
    section.add "X-Amz-Credential", valid_607316
  var valid_607317 = header.getOrDefault("X-Amz-Security-Token")
  valid_607317 = validateParameter(valid_607317, JString, required = false,
                                 default = nil)
  if valid_607317 != nil:
    section.add "X-Amz-Security-Token", valid_607317
  var valid_607318 = header.getOrDefault("X-Amz-Algorithm")
  valid_607318 = validateParameter(valid_607318, JString, required = false,
                                 default = nil)
  if valid_607318 != nil:
    section.add "X-Amz-Algorithm", valid_607318
  var valid_607319 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607319 = validateParameter(valid_607319, JString, required = false,
                                 default = nil)
  if valid_607319 != nil:
    section.add "X-Amz-SignedHeaders", valid_607319
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607320: Call_GetDeleteRole_607307; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_607320.validator(path, query, header, formData, body)
  let scheme = call_607320.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607320.url(scheme.get, call_607320.host, call_607320.base,
                         call_607320.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607320, url, valid)

proc call*(call_607321: Call_GetDeleteRole_607307; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607322 = newJObject()
  add(query_607322, "RoleName", newJString(RoleName))
  add(query_607322, "Action", newJString(Action))
  add(query_607322, "Version", newJString(Version))
  result = call_607321.call(nil, query_607322, nil, nil, nil)

var getDeleteRole* = Call_GetDeleteRole_607307(name: "getDeleteRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_GetDeleteRole_607308,
    base: "/", url: url_GetDeleteRole_607309, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePermissionsBoundary_607356 = ref object of OpenApiRestCall_605589
proc url_PostDeleteRolePermissionsBoundary_607358(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRolePermissionsBoundary_607357(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607359 = query.getOrDefault("Action")
  valid_607359 = validateParameter(valid_607359, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_607359 != nil:
    section.add "Action", valid_607359
  var valid_607360 = query.getOrDefault("Version")
  valid_607360 = validateParameter(valid_607360, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607360 != nil:
    section.add "Version", valid_607360
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607361 = header.getOrDefault("X-Amz-Signature")
  valid_607361 = validateParameter(valid_607361, JString, required = false,
                                 default = nil)
  if valid_607361 != nil:
    section.add "X-Amz-Signature", valid_607361
  var valid_607362 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607362 = validateParameter(valid_607362, JString, required = false,
                                 default = nil)
  if valid_607362 != nil:
    section.add "X-Amz-Content-Sha256", valid_607362
  var valid_607363 = header.getOrDefault("X-Amz-Date")
  valid_607363 = validateParameter(valid_607363, JString, required = false,
                                 default = nil)
  if valid_607363 != nil:
    section.add "X-Amz-Date", valid_607363
  var valid_607364 = header.getOrDefault("X-Amz-Credential")
  valid_607364 = validateParameter(valid_607364, JString, required = false,
                                 default = nil)
  if valid_607364 != nil:
    section.add "X-Amz-Credential", valid_607364
  var valid_607365 = header.getOrDefault("X-Amz-Security-Token")
  valid_607365 = validateParameter(valid_607365, JString, required = false,
                                 default = nil)
  if valid_607365 != nil:
    section.add "X-Amz-Security-Token", valid_607365
  var valid_607366 = header.getOrDefault("X-Amz-Algorithm")
  valid_607366 = validateParameter(valid_607366, JString, required = false,
                                 default = nil)
  if valid_607366 != nil:
    section.add "X-Amz-Algorithm", valid_607366
  var valid_607367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607367 = validateParameter(valid_607367, JString, required = false,
                                 default = nil)
  if valid_607367 != nil:
    section.add "X-Amz-SignedHeaders", valid_607367
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_607368 = formData.getOrDefault("RoleName")
  valid_607368 = validateParameter(valid_607368, JString, required = true,
                                 default = nil)
  if valid_607368 != nil:
    section.add "RoleName", valid_607368
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607369: Call_PostDeleteRolePermissionsBoundary_607356;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_607369.validator(path, query, header, formData, body)
  let scheme = call_607369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607369.url(scheme.get, call_607369.host, call_607369.base,
                         call_607369.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607369, url, valid)

proc call*(call_607370: Call_PostDeleteRolePermissionsBoundary_607356;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607371 = newJObject()
  var formData_607372 = newJObject()
  add(formData_607372, "RoleName", newJString(RoleName))
  add(query_607371, "Action", newJString(Action))
  add(query_607371, "Version", newJString(Version))
  result = call_607370.call(nil, query_607371, nil, formData_607372, nil)

var postDeleteRolePermissionsBoundary* = Call_PostDeleteRolePermissionsBoundary_607356(
    name: "postDeleteRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_PostDeleteRolePermissionsBoundary_607357, base: "/",
    url: url_PostDeleteRolePermissionsBoundary_607358,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePermissionsBoundary_607340 = ref object of OpenApiRestCall_605589
proc url_GetDeleteRolePermissionsBoundary_607342(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRolePermissionsBoundary_607341(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_607343 = query.getOrDefault("RoleName")
  valid_607343 = validateParameter(valid_607343, JString, required = true,
                                 default = nil)
  if valid_607343 != nil:
    section.add "RoleName", valid_607343
  var valid_607344 = query.getOrDefault("Action")
  valid_607344 = validateParameter(valid_607344, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_607344 != nil:
    section.add "Action", valid_607344
  var valid_607345 = query.getOrDefault("Version")
  valid_607345 = validateParameter(valid_607345, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607345 != nil:
    section.add "Version", valid_607345
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607346 = header.getOrDefault("X-Amz-Signature")
  valid_607346 = validateParameter(valid_607346, JString, required = false,
                                 default = nil)
  if valid_607346 != nil:
    section.add "X-Amz-Signature", valid_607346
  var valid_607347 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607347 = validateParameter(valid_607347, JString, required = false,
                                 default = nil)
  if valid_607347 != nil:
    section.add "X-Amz-Content-Sha256", valid_607347
  var valid_607348 = header.getOrDefault("X-Amz-Date")
  valid_607348 = validateParameter(valid_607348, JString, required = false,
                                 default = nil)
  if valid_607348 != nil:
    section.add "X-Amz-Date", valid_607348
  var valid_607349 = header.getOrDefault("X-Amz-Credential")
  valid_607349 = validateParameter(valid_607349, JString, required = false,
                                 default = nil)
  if valid_607349 != nil:
    section.add "X-Amz-Credential", valid_607349
  var valid_607350 = header.getOrDefault("X-Amz-Security-Token")
  valid_607350 = validateParameter(valid_607350, JString, required = false,
                                 default = nil)
  if valid_607350 != nil:
    section.add "X-Amz-Security-Token", valid_607350
  var valid_607351 = header.getOrDefault("X-Amz-Algorithm")
  valid_607351 = validateParameter(valid_607351, JString, required = false,
                                 default = nil)
  if valid_607351 != nil:
    section.add "X-Amz-Algorithm", valid_607351
  var valid_607352 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607352 = validateParameter(valid_607352, JString, required = false,
                                 default = nil)
  if valid_607352 != nil:
    section.add "X-Amz-SignedHeaders", valid_607352
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607353: Call_GetDeleteRolePermissionsBoundary_607340;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_607353.validator(path, query, header, formData, body)
  let scheme = call_607353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607353.url(scheme.get, call_607353.host, call_607353.base,
                         call_607353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607353, url, valid)

proc call*(call_607354: Call_GetDeleteRolePermissionsBoundary_607340;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607355 = newJObject()
  add(query_607355, "RoleName", newJString(RoleName))
  add(query_607355, "Action", newJString(Action))
  add(query_607355, "Version", newJString(Version))
  result = call_607354.call(nil, query_607355, nil, nil, nil)

var getDeleteRolePermissionsBoundary* = Call_GetDeleteRolePermissionsBoundary_607340(
    name: "getDeleteRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_GetDeleteRolePermissionsBoundary_607341, base: "/",
    url: url_GetDeleteRolePermissionsBoundary_607342,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePolicy_607390 = ref object of OpenApiRestCall_605589
proc url_PostDeleteRolePolicy_607392(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRolePolicy_607391(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607393 = query.getOrDefault("Action")
  valid_607393 = validateParameter(valid_607393, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_607393 != nil:
    section.add "Action", valid_607393
  var valid_607394 = query.getOrDefault("Version")
  valid_607394 = validateParameter(valid_607394, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607394 != nil:
    section.add "Version", valid_607394
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607395 = header.getOrDefault("X-Amz-Signature")
  valid_607395 = validateParameter(valid_607395, JString, required = false,
                                 default = nil)
  if valid_607395 != nil:
    section.add "X-Amz-Signature", valid_607395
  var valid_607396 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607396 = validateParameter(valid_607396, JString, required = false,
                                 default = nil)
  if valid_607396 != nil:
    section.add "X-Amz-Content-Sha256", valid_607396
  var valid_607397 = header.getOrDefault("X-Amz-Date")
  valid_607397 = validateParameter(valid_607397, JString, required = false,
                                 default = nil)
  if valid_607397 != nil:
    section.add "X-Amz-Date", valid_607397
  var valid_607398 = header.getOrDefault("X-Amz-Credential")
  valid_607398 = validateParameter(valid_607398, JString, required = false,
                                 default = nil)
  if valid_607398 != nil:
    section.add "X-Amz-Credential", valid_607398
  var valid_607399 = header.getOrDefault("X-Amz-Security-Token")
  valid_607399 = validateParameter(valid_607399, JString, required = false,
                                 default = nil)
  if valid_607399 != nil:
    section.add "X-Amz-Security-Token", valid_607399
  var valid_607400 = header.getOrDefault("X-Amz-Algorithm")
  valid_607400 = validateParameter(valid_607400, JString, required = false,
                                 default = nil)
  if valid_607400 != nil:
    section.add "X-Amz-Algorithm", valid_607400
  var valid_607401 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607401 = validateParameter(valid_607401, JString, required = false,
                                 default = nil)
  if valid_607401 != nil:
    section.add "X-Amz-SignedHeaders", valid_607401
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_607402 = formData.getOrDefault("RoleName")
  valid_607402 = validateParameter(valid_607402, JString, required = true,
                                 default = nil)
  if valid_607402 != nil:
    section.add "RoleName", valid_607402
  var valid_607403 = formData.getOrDefault("PolicyName")
  valid_607403 = validateParameter(valid_607403, JString, required = true,
                                 default = nil)
  if valid_607403 != nil:
    section.add "PolicyName", valid_607403
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607404: Call_PostDeleteRolePolicy_607390; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607404.validator(path, query, header, formData, body)
  let scheme = call_607404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607404.url(scheme.get, call_607404.host, call_607404.base,
                         call_607404.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607404, url, valid)

proc call*(call_607405: Call_PostDeleteRolePolicy_607390; RoleName: string;
          PolicyName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_607406 = newJObject()
  var formData_607407 = newJObject()
  add(formData_607407, "RoleName", newJString(RoleName))
  add(query_607406, "Action", newJString(Action))
  add(query_607406, "Version", newJString(Version))
  add(formData_607407, "PolicyName", newJString(PolicyName))
  result = call_607405.call(nil, query_607406, nil, formData_607407, nil)

var postDeleteRolePolicy* = Call_PostDeleteRolePolicy_607390(
    name: "postDeleteRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_PostDeleteRolePolicy_607391, base: "/",
    url: url_PostDeleteRolePolicy_607392, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePolicy_607373 = ref object of OpenApiRestCall_605589
proc url_GetDeleteRolePolicy_607375(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRolePolicy_607374(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_607376 = query.getOrDefault("PolicyName")
  valid_607376 = validateParameter(valid_607376, JString, required = true,
                                 default = nil)
  if valid_607376 != nil:
    section.add "PolicyName", valid_607376
  var valid_607377 = query.getOrDefault("RoleName")
  valid_607377 = validateParameter(valid_607377, JString, required = true,
                                 default = nil)
  if valid_607377 != nil:
    section.add "RoleName", valid_607377
  var valid_607378 = query.getOrDefault("Action")
  valid_607378 = validateParameter(valid_607378, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_607378 != nil:
    section.add "Action", valid_607378
  var valid_607379 = query.getOrDefault("Version")
  valid_607379 = validateParameter(valid_607379, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607379 != nil:
    section.add "Version", valid_607379
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607380 = header.getOrDefault("X-Amz-Signature")
  valid_607380 = validateParameter(valid_607380, JString, required = false,
                                 default = nil)
  if valid_607380 != nil:
    section.add "X-Amz-Signature", valid_607380
  var valid_607381 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607381 = validateParameter(valid_607381, JString, required = false,
                                 default = nil)
  if valid_607381 != nil:
    section.add "X-Amz-Content-Sha256", valid_607381
  var valid_607382 = header.getOrDefault("X-Amz-Date")
  valid_607382 = validateParameter(valid_607382, JString, required = false,
                                 default = nil)
  if valid_607382 != nil:
    section.add "X-Amz-Date", valid_607382
  var valid_607383 = header.getOrDefault("X-Amz-Credential")
  valid_607383 = validateParameter(valid_607383, JString, required = false,
                                 default = nil)
  if valid_607383 != nil:
    section.add "X-Amz-Credential", valid_607383
  var valid_607384 = header.getOrDefault("X-Amz-Security-Token")
  valid_607384 = validateParameter(valid_607384, JString, required = false,
                                 default = nil)
  if valid_607384 != nil:
    section.add "X-Amz-Security-Token", valid_607384
  var valid_607385 = header.getOrDefault("X-Amz-Algorithm")
  valid_607385 = validateParameter(valid_607385, JString, required = false,
                                 default = nil)
  if valid_607385 != nil:
    section.add "X-Amz-Algorithm", valid_607385
  var valid_607386 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607386 = validateParameter(valid_607386, JString, required = false,
                                 default = nil)
  if valid_607386 != nil:
    section.add "X-Amz-SignedHeaders", valid_607386
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607387: Call_GetDeleteRolePolicy_607373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607387.validator(path, query, header, formData, body)
  let scheme = call_607387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607387.url(scheme.get, call_607387.host, call_607387.base,
                         call_607387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607387, url, valid)

proc call*(call_607388: Call_GetDeleteRolePolicy_607373; PolicyName: string;
          RoleName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607389 = newJObject()
  add(query_607389, "PolicyName", newJString(PolicyName))
  add(query_607389, "RoleName", newJString(RoleName))
  add(query_607389, "Action", newJString(Action))
  add(query_607389, "Version", newJString(Version))
  result = call_607388.call(nil, query_607389, nil, nil, nil)

var getDeleteRolePolicy* = Call_GetDeleteRolePolicy_607373(
    name: "getDeleteRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_GetDeleteRolePolicy_607374, base: "/",
    url: url_GetDeleteRolePolicy_607375, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSAMLProvider_607424 = ref object of OpenApiRestCall_605589
proc url_PostDeleteSAMLProvider_607426(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSAMLProvider_607425(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607427 = query.getOrDefault("Action")
  valid_607427 = validateParameter(valid_607427, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_607427 != nil:
    section.add "Action", valid_607427
  var valid_607428 = query.getOrDefault("Version")
  valid_607428 = validateParameter(valid_607428, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607428 != nil:
    section.add "Version", valid_607428
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607429 = header.getOrDefault("X-Amz-Signature")
  valid_607429 = validateParameter(valid_607429, JString, required = false,
                                 default = nil)
  if valid_607429 != nil:
    section.add "X-Amz-Signature", valid_607429
  var valid_607430 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607430 = validateParameter(valid_607430, JString, required = false,
                                 default = nil)
  if valid_607430 != nil:
    section.add "X-Amz-Content-Sha256", valid_607430
  var valid_607431 = header.getOrDefault("X-Amz-Date")
  valid_607431 = validateParameter(valid_607431, JString, required = false,
                                 default = nil)
  if valid_607431 != nil:
    section.add "X-Amz-Date", valid_607431
  var valid_607432 = header.getOrDefault("X-Amz-Credential")
  valid_607432 = validateParameter(valid_607432, JString, required = false,
                                 default = nil)
  if valid_607432 != nil:
    section.add "X-Amz-Credential", valid_607432
  var valid_607433 = header.getOrDefault("X-Amz-Security-Token")
  valid_607433 = validateParameter(valid_607433, JString, required = false,
                                 default = nil)
  if valid_607433 != nil:
    section.add "X-Amz-Security-Token", valid_607433
  var valid_607434 = header.getOrDefault("X-Amz-Algorithm")
  valid_607434 = validateParameter(valid_607434, JString, required = false,
                                 default = nil)
  if valid_607434 != nil:
    section.add "X-Amz-Algorithm", valid_607434
  var valid_607435 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607435 = validateParameter(valid_607435, JString, required = false,
                                 default = nil)
  if valid_607435 != nil:
    section.add "X-Amz-SignedHeaders", valid_607435
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_607436 = formData.getOrDefault("SAMLProviderArn")
  valid_607436 = validateParameter(valid_607436, JString, required = true,
                                 default = nil)
  if valid_607436 != nil:
    section.add "SAMLProviderArn", valid_607436
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607437: Call_PostDeleteSAMLProvider_607424; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_607437.validator(path, query, header, formData, body)
  let scheme = call_607437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607437.url(scheme.get, call_607437.host, call_607437.base,
                         call_607437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607437, url, valid)

proc call*(call_607438: Call_PostDeleteSAMLProvider_607424;
          SAMLProviderArn: string; Action: string = "DeleteSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607439 = newJObject()
  var formData_607440 = newJObject()
  add(formData_607440, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_607439, "Action", newJString(Action))
  add(query_607439, "Version", newJString(Version))
  result = call_607438.call(nil, query_607439, nil, formData_607440, nil)

var postDeleteSAMLProvider* = Call_PostDeleteSAMLProvider_607424(
    name: "postDeleteSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_PostDeleteSAMLProvider_607425, base: "/",
    url: url_PostDeleteSAMLProvider_607426, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSAMLProvider_607408 = ref object of OpenApiRestCall_605589
proc url_GetDeleteSAMLProvider_607410(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSAMLProvider_607409(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607411 = query.getOrDefault("Action")
  valid_607411 = validateParameter(valid_607411, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_607411 != nil:
    section.add "Action", valid_607411
  var valid_607412 = query.getOrDefault("SAMLProviderArn")
  valid_607412 = validateParameter(valid_607412, JString, required = true,
                                 default = nil)
  if valid_607412 != nil:
    section.add "SAMLProviderArn", valid_607412
  var valid_607413 = query.getOrDefault("Version")
  valid_607413 = validateParameter(valid_607413, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607413 != nil:
    section.add "Version", valid_607413
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607414 = header.getOrDefault("X-Amz-Signature")
  valid_607414 = validateParameter(valid_607414, JString, required = false,
                                 default = nil)
  if valid_607414 != nil:
    section.add "X-Amz-Signature", valid_607414
  var valid_607415 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607415 = validateParameter(valid_607415, JString, required = false,
                                 default = nil)
  if valid_607415 != nil:
    section.add "X-Amz-Content-Sha256", valid_607415
  var valid_607416 = header.getOrDefault("X-Amz-Date")
  valid_607416 = validateParameter(valid_607416, JString, required = false,
                                 default = nil)
  if valid_607416 != nil:
    section.add "X-Amz-Date", valid_607416
  var valid_607417 = header.getOrDefault("X-Amz-Credential")
  valid_607417 = validateParameter(valid_607417, JString, required = false,
                                 default = nil)
  if valid_607417 != nil:
    section.add "X-Amz-Credential", valid_607417
  var valid_607418 = header.getOrDefault("X-Amz-Security-Token")
  valid_607418 = validateParameter(valid_607418, JString, required = false,
                                 default = nil)
  if valid_607418 != nil:
    section.add "X-Amz-Security-Token", valid_607418
  var valid_607419 = header.getOrDefault("X-Amz-Algorithm")
  valid_607419 = validateParameter(valid_607419, JString, required = false,
                                 default = nil)
  if valid_607419 != nil:
    section.add "X-Amz-Algorithm", valid_607419
  var valid_607420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607420 = validateParameter(valid_607420, JString, required = false,
                                 default = nil)
  if valid_607420 != nil:
    section.add "X-Amz-SignedHeaders", valid_607420
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607421: Call_GetDeleteSAMLProvider_607408; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_607421.validator(path, query, header, formData, body)
  let scheme = call_607421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607421.url(scheme.get, call_607421.host, call_607421.base,
                         call_607421.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607421, url, valid)

proc call*(call_607422: Call_GetDeleteSAMLProvider_607408; SAMLProviderArn: string;
          Action: string = "DeleteSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_607423 = newJObject()
  add(query_607423, "Action", newJString(Action))
  add(query_607423, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_607423, "Version", newJString(Version))
  result = call_607422.call(nil, query_607423, nil, nil, nil)

var getDeleteSAMLProvider* = Call_GetDeleteSAMLProvider_607408(
    name: "getDeleteSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_GetDeleteSAMLProvider_607409, base: "/",
    url: url_GetDeleteSAMLProvider_607410, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSSHPublicKey_607458 = ref object of OpenApiRestCall_605589
proc url_PostDeleteSSHPublicKey_607460(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSSHPublicKey_607459(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607461 = query.getOrDefault("Action")
  valid_607461 = validateParameter(valid_607461, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_607461 != nil:
    section.add "Action", valid_607461
  var valid_607462 = query.getOrDefault("Version")
  valid_607462 = validateParameter(valid_607462, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607462 != nil:
    section.add "Version", valid_607462
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607463 = header.getOrDefault("X-Amz-Signature")
  valid_607463 = validateParameter(valid_607463, JString, required = false,
                                 default = nil)
  if valid_607463 != nil:
    section.add "X-Amz-Signature", valid_607463
  var valid_607464 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607464 = validateParameter(valid_607464, JString, required = false,
                                 default = nil)
  if valid_607464 != nil:
    section.add "X-Amz-Content-Sha256", valid_607464
  var valid_607465 = header.getOrDefault("X-Amz-Date")
  valid_607465 = validateParameter(valid_607465, JString, required = false,
                                 default = nil)
  if valid_607465 != nil:
    section.add "X-Amz-Date", valid_607465
  var valid_607466 = header.getOrDefault("X-Amz-Credential")
  valid_607466 = validateParameter(valid_607466, JString, required = false,
                                 default = nil)
  if valid_607466 != nil:
    section.add "X-Amz-Credential", valid_607466
  var valid_607467 = header.getOrDefault("X-Amz-Security-Token")
  valid_607467 = validateParameter(valid_607467, JString, required = false,
                                 default = nil)
  if valid_607467 != nil:
    section.add "X-Amz-Security-Token", valid_607467
  var valid_607468 = header.getOrDefault("X-Amz-Algorithm")
  valid_607468 = validateParameter(valid_607468, JString, required = false,
                                 default = nil)
  if valid_607468 != nil:
    section.add "X-Amz-Algorithm", valid_607468
  var valid_607469 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607469 = validateParameter(valid_607469, JString, required = false,
                                 default = nil)
  if valid_607469 != nil:
    section.add "X-Amz-SignedHeaders", valid_607469
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SSHPublicKeyId` field"
  var valid_607470 = formData.getOrDefault("SSHPublicKeyId")
  valid_607470 = validateParameter(valid_607470, JString, required = true,
                                 default = nil)
  if valid_607470 != nil:
    section.add "SSHPublicKeyId", valid_607470
  var valid_607471 = formData.getOrDefault("UserName")
  valid_607471 = validateParameter(valid_607471, JString, required = true,
                                 default = nil)
  if valid_607471 != nil:
    section.add "UserName", valid_607471
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607472: Call_PostDeleteSSHPublicKey_607458; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_607472.validator(path, query, header, formData, body)
  let scheme = call_607472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607472.url(scheme.get, call_607472.host, call_607472.base,
                         call_607472.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607472, url, valid)

proc call*(call_607473: Call_PostDeleteSSHPublicKey_607458; SSHPublicKeyId: string;
          UserName: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607474 = newJObject()
  var formData_607475 = newJObject()
  add(formData_607475, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_607475, "UserName", newJString(UserName))
  add(query_607474, "Action", newJString(Action))
  add(query_607474, "Version", newJString(Version))
  result = call_607473.call(nil, query_607474, nil, formData_607475, nil)

var postDeleteSSHPublicKey* = Call_PostDeleteSSHPublicKey_607458(
    name: "postDeleteSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_PostDeleteSSHPublicKey_607459, base: "/",
    url: url_PostDeleteSSHPublicKey_607460, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSSHPublicKey_607441 = ref object of OpenApiRestCall_605589
proc url_GetDeleteSSHPublicKey_607443(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSSHPublicKey_607442(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_607444 = query.getOrDefault("SSHPublicKeyId")
  valid_607444 = validateParameter(valid_607444, JString, required = true,
                                 default = nil)
  if valid_607444 != nil:
    section.add "SSHPublicKeyId", valid_607444
  var valid_607445 = query.getOrDefault("UserName")
  valid_607445 = validateParameter(valid_607445, JString, required = true,
                                 default = nil)
  if valid_607445 != nil:
    section.add "UserName", valid_607445
  var valid_607446 = query.getOrDefault("Action")
  valid_607446 = validateParameter(valid_607446, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_607446 != nil:
    section.add "Action", valid_607446
  var valid_607447 = query.getOrDefault("Version")
  valid_607447 = validateParameter(valid_607447, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607447 != nil:
    section.add "Version", valid_607447
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607448 = header.getOrDefault("X-Amz-Signature")
  valid_607448 = validateParameter(valid_607448, JString, required = false,
                                 default = nil)
  if valid_607448 != nil:
    section.add "X-Amz-Signature", valid_607448
  var valid_607449 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607449 = validateParameter(valid_607449, JString, required = false,
                                 default = nil)
  if valid_607449 != nil:
    section.add "X-Amz-Content-Sha256", valid_607449
  var valid_607450 = header.getOrDefault("X-Amz-Date")
  valid_607450 = validateParameter(valid_607450, JString, required = false,
                                 default = nil)
  if valid_607450 != nil:
    section.add "X-Amz-Date", valid_607450
  var valid_607451 = header.getOrDefault("X-Amz-Credential")
  valid_607451 = validateParameter(valid_607451, JString, required = false,
                                 default = nil)
  if valid_607451 != nil:
    section.add "X-Amz-Credential", valid_607451
  var valid_607452 = header.getOrDefault("X-Amz-Security-Token")
  valid_607452 = validateParameter(valid_607452, JString, required = false,
                                 default = nil)
  if valid_607452 != nil:
    section.add "X-Amz-Security-Token", valid_607452
  var valid_607453 = header.getOrDefault("X-Amz-Algorithm")
  valid_607453 = validateParameter(valid_607453, JString, required = false,
                                 default = nil)
  if valid_607453 != nil:
    section.add "X-Amz-Algorithm", valid_607453
  var valid_607454 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607454 = validateParameter(valid_607454, JString, required = false,
                                 default = nil)
  if valid_607454 != nil:
    section.add "X-Amz-SignedHeaders", valid_607454
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607455: Call_GetDeleteSSHPublicKey_607441; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_607455.validator(path, query, header, formData, body)
  let scheme = call_607455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607455.url(scheme.get, call_607455.host, call_607455.base,
                         call_607455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607455, url, valid)

proc call*(call_607456: Call_GetDeleteSSHPublicKey_607441; SSHPublicKeyId: string;
          UserName: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607457 = newJObject()
  add(query_607457, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_607457, "UserName", newJString(UserName))
  add(query_607457, "Action", newJString(Action))
  add(query_607457, "Version", newJString(Version))
  result = call_607456.call(nil, query_607457, nil, nil, nil)

var getDeleteSSHPublicKey* = Call_GetDeleteSSHPublicKey_607441(
    name: "getDeleteSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_GetDeleteSSHPublicKey_607442, base: "/",
    url: url_GetDeleteSSHPublicKey_607443, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServerCertificate_607492 = ref object of OpenApiRestCall_605589
proc url_PostDeleteServerCertificate_607494(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServerCertificate_607493(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607495 = query.getOrDefault("Action")
  valid_607495 = validateParameter(valid_607495, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_607495 != nil:
    section.add "Action", valid_607495
  var valid_607496 = query.getOrDefault("Version")
  valid_607496 = validateParameter(valid_607496, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607496 != nil:
    section.add "Version", valid_607496
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607497 = header.getOrDefault("X-Amz-Signature")
  valid_607497 = validateParameter(valid_607497, JString, required = false,
                                 default = nil)
  if valid_607497 != nil:
    section.add "X-Amz-Signature", valid_607497
  var valid_607498 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607498 = validateParameter(valid_607498, JString, required = false,
                                 default = nil)
  if valid_607498 != nil:
    section.add "X-Amz-Content-Sha256", valid_607498
  var valid_607499 = header.getOrDefault("X-Amz-Date")
  valid_607499 = validateParameter(valid_607499, JString, required = false,
                                 default = nil)
  if valid_607499 != nil:
    section.add "X-Amz-Date", valid_607499
  var valid_607500 = header.getOrDefault("X-Amz-Credential")
  valid_607500 = validateParameter(valid_607500, JString, required = false,
                                 default = nil)
  if valid_607500 != nil:
    section.add "X-Amz-Credential", valid_607500
  var valid_607501 = header.getOrDefault("X-Amz-Security-Token")
  valid_607501 = validateParameter(valid_607501, JString, required = false,
                                 default = nil)
  if valid_607501 != nil:
    section.add "X-Amz-Security-Token", valid_607501
  var valid_607502 = header.getOrDefault("X-Amz-Algorithm")
  valid_607502 = validateParameter(valid_607502, JString, required = false,
                                 default = nil)
  if valid_607502 != nil:
    section.add "X-Amz-Algorithm", valid_607502
  var valid_607503 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607503 = validateParameter(valid_607503, JString, required = false,
                                 default = nil)
  if valid_607503 != nil:
    section.add "X-Amz-SignedHeaders", valid_607503
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_607504 = formData.getOrDefault("ServerCertificateName")
  valid_607504 = validateParameter(valid_607504, JString, required = true,
                                 default = nil)
  if valid_607504 != nil:
    section.add "ServerCertificateName", valid_607504
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607505: Call_PostDeleteServerCertificate_607492; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_607505.validator(path, query, header, formData, body)
  let scheme = call_607505.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607505.url(scheme.get, call_607505.host, call_607505.base,
                         call_607505.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607505, url, valid)

proc call*(call_607506: Call_PostDeleteServerCertificate_607492;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607507 = newJObject()
  var formData_607508 = newJObject()
  add(formData_607508, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_607507, "Action", newJString(Action))
  add(query_607507, "Version", newJString(Version))
  result = call_607506.call(nil, query_607507, nil, formData_607508, nil)

var postDeleteServerCertificate* = Call_PostDeleteServerCertificate_607492(
    name: "postDeleteServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_PostDeleteServerCertificate_607493, base: "/",
    url: url_PostDeleteServerCertificate_607494,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServerCertificate_607476 = ref object of OpenApiRestCall_605589
proc url_GetDeleteServerCertificate_607478(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServerCertificate_607477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_607479 = query.getOrDefault("ServerCertificateName")
  valid_607479 = validateParameter(valid_607479, JString, required = true,
                                 default = nil)
  if valid_607479 != nil:
    section.add "ServerCertificateName", valid_607479
  var valid_607480 = query.getOrDefault("Action")
  valid_607480 = validateParameter(valid_607480, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_607480 != nil:
    section.add "Action", valid_607480
  var valid_607481 = query.getOrDefault("Version")
  valid_607481 = validateParameter(valid_607481, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607481 != nil:
    section.add "Version", valid_607481
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607482 = header.getOrDefault("X-Amz-Signature")
  valid_607482 = validateParameter(valid_607482, JString, required = false,
                                 default = nil)
  if valid_607482 != nil:
    section.add "X-Amz-Signature", valid_607482
  var valid_607483 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607483 = validateParameter(valid_607483, JString, required = false,
                                 default = nil)
  if valid_607483 != nil:
    section.add "X-Amz-Content-Sha256", valid_607483
  var valid_607484 = header.getOrDefault("X-Amz-Date")
  valid_607484 = validateParameter(valid_607484, JString, required = false,
                                 default = nil)
  if valid_607484 != nil:
    section.add "X-Amz-Date", valid_607484
  var valid_607485 = header.getOrDefault("X-Amz-Credential")
  valid_607485 = validateParameter(valid_607485, JString, required = false,
                                 default = nil)
  if valid_607485 != nil:
    section.add "X-Amz-Credential", valid_607485
  var valid_607486 = header.getOrDefault("X-Amz-Security-Token")
  valid_607486 = validateParameter(valid_607486, JString, required = false,
                                 default = nil)
  if valid_607486 != nil:
    section.add "X-Amz-Security-Token", valid_607486
  var valid_607487 = header.getOrDefault("X-Amz-Algorithm")
  valid_607487 = validateParameter(valid_607487, JString, required = false,
                                 default = nil)
  if valid_607487 != nil:
    section.add "X-Amz-Algorithm", valid_607487
  var valid_607488 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607488 = validateParameter(valid_607488, JString, required = false,
                                 default = nil)
  if valid_607488 != nil:
    section.add "X-Amz-SignedHeaders", valid_607488
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607489: Call_GetDeleteServerCertificate_607476; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_607489.validator(path, query, header, formData, body)
  let scheme = call_607489.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607489.url(scheme.get, call_607489.host, call_607489.base,
                         call_607489.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607489, url, valid)

proc call*(call_607490: Call_GetDeleteServerCertificate_607476;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607491 = newJObject()
  add(query_607491, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_607491, "Action", newJString(Action))
  add(query_607491, "Version", newJString(Version))
  result = call_607490.call(nil, query_607491, nil, nil, nil)

var getDeleteServerCertificate* = Call_GetDeleteServerCertificate_607476(
    name: "getDeleteServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_GetDeleteServerCertificate_607477, base: "/",
    url: url_GetDeleteServerCertificate_607478,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceLinkedRole_607525 = ref object of OpenApiRestCall_605589
proc url_PostDeleteServiceLinkedRole_607527(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServiceLinkedRole_607526(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607528 = query.getOrDefault("Action")
  valid_607528 = validateParameter(valid_607528, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_607528 != nil:
    section.add "Action", valid_607528
  var valid_607529 = query.getOrDefault("Version")
  valid_607529 = validateParameter(valid_607529, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607529 != nil:
    section.add "Version", valid_607529
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607530 = header.getOrDefault("X-Amz-Signature")
  valid_607530 = validateParameter(valid_607530, JString, required = false,
                                 default = nil)
  if valid_607530 != nil:
    section.add "X-Amz-Signature", valid_607530
  var valid_607531 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607531 = validateParameter(valid_607531, JString, required = false,
                                 default = nil)
  if valid_607531 != nil:
    section.add "X-Amz-Content-Sha256", valid_607531
  var valid_607532 = header.getOrDefault("X-Amz-Date")
  valid_607532 = validateParameter(valid_607532, JString, required = false,
                                 default = nil)
  if valid_607532 != nil:
    section.add "X-Amz-Date", valid_607532
  var valid_607533 = header.getOrDefault("X-Amz-Credential")
  valid_607533 = validateParameter(valid_607533, JString, required = false,
                                 default = nil)
  if valid_607533 != nil:
    section.add "X-Amz-Credential", valid_607533
  var valid_607534 = header.getOrDefault("X-Amz-Security-Token")
  valid_607534 = validateParameter(valid_607534, JString, required = false,
                                 default = nil)
  if valid_607534 != nil:
    section.add "X-Amz-Security-Token", valid_607534
  var valid_607535 = header.getOrDefault("X-Amz-Algorithm")
  valid_607535 = validateParameter(valid_607535, JString, required = false,
                                 default = nil)
  if valid_607535 != nil:
    section.add "X-Amz-Algorithm", valid_607535
  var valid_607536 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607536 = validateParameter(valid_607536, JString, required = false,
                                 default = nil)
  if valid_607536 != nil:
    section.add "X-Amz-SignedHeaders", valid_607536
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_607537 = formData.getOrDefault("RoleName")
  valid_607537 = validateParameter(valid_607537, JString, required = true,
                                 default = nil)
  if valid_607537 != nil:
    section.add "RoleName", valid_607537
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607538: Call_PostDeleteServiceLinkedRole_607525; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607538.validator(path, query, header, formData, body)
  let scheme = call_607538.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607538.url(scheme.get, call_607538.host, call_607538.base,
                         call_607538.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607538, url, valid)

proc call*(call_607539: Call_PostDeleteServiceLinkedRole_607525; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607540 = newJObject()
  var formData_607541 = newJObject()
  add(formData_607541, "RoleName", newJString(RoleName))
  add(query_607540, "Action", newJString(Action))
  add(query_607540, "Version", newJString(Version))
  result = call_607539.call(nil, query_607540, nil, formData_607541, nil)

var postDeleteServiceLinkedRole* = Call_PostDeleteServiceLinkedRole_607525(
    name: "postDeleteServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_PostDeleteServiceLinkedRole_607526, base: "/",
    url: url_PostDeleteServiceLinkedRole_607527,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceLinkedRole_607509 = ref object of OpenApiRestCall_605589
proc url_GetDeleteServiceLinkedRole_607511(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServiceLinkedRole_607510(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_607512 = query.getOrDefault("RoleName")
  valid_607512 = validateParameter(valid_607512, JString, required = true,
                                 default = nil)
  if valid_607512 != nil:
    section.add "RoleName", valid_607512
  var valid_607513 = query.getOrDefault("Action")
  valid_607513 = validateParameter(valid_607513, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_607513 != nil:
    section.add "Action", valid_607513
  var valid_607514 = query.getOrDefault("Version")
  valid_607514 = validateParameter(valid_607514, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607514 != nil:
    section.add "Version", valid_607514
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607515 = header.getOrDefault("X-Amz-Signature")
  valid_607515 = validateParameter(valid_607515, JString, required = false,
                                 default = nil)
  if valid_607515 != nil:
    section.add "X-Amz-Signature", valid_607515
  var valid_607516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607516 = validateParameter(valid_607516, JString, required = false,
                                 default = nil)
  if valid_607516 != nil:
    section.add "X-Amz-Content-Sha256", valid_607516
  var valid_607517 = header.getOrDefault("X-Amz-Date")
  valid_607517 = validateParameter(valid_607517, JString, required = false,
                                 default = nil)
  if valid_607517 != nil:
    section.add "X-Amz-Date", valid_607517
  var valid_607518 = header.getOrDefault("X-Amz-Credential")
  valid_607518 = validateParameter(valid_607518, JString, required = false,
                                 default = nil)
  if valid_607518 != nil:
    section.add "X-Amz-Credential", valid_607518
  var valid_607519 = header.getOrDefault("X-Amz-Security-Token")
  valid_607519 = validateParameter(valid_607519, JString, required = false,
                                 default = nil)
  if valid_607519 != nil:
    section.add "X-Amz-Security-Token", valid_607519
  var valid_607520 = header.getOrDefault("X-Amz-Algorithm")
  valid_607520 = validateParameter(valid_607520, JString, required = false,
                                 default = nil)
  if valid_607520 != nil:
    section.add "X-Amz-Algorithm", valid_607520
  var valid_607521 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607521 = validateParameter(valid_607521, JString, required = false,
                                 default = nil)
  if valid_607521 != nil:
    section.add "X-Amz-SignedHeaders", valid_607521
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607522: Call_GetDeleteServiceLinkedRole_607509; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607522.validator(path, query, header, formData, body)
  let scheme = call_607522.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607522.url(scheme.get, call_607522.host, call_607522.base,
                         call_607522.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607522, url, valid)

proc call*(call_607523: Call_GetDeleteServiceLinkedRole_607509; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607524 = newJObject()
  add(query_607524, "RoleName", newJString(RoleName))
  add(query_607524, "Action", newJString(Action))
  add(query_607524, "Version", newJString(Version))
  result = call_607523.call(nil, query_607524, nil, nil, nil)

var getDeleteServiceLinkedRole* = Call_GetDeleteServiceLinkedRole_607509(
    name: "getDeleteServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_GetDeleteServiceLinkedRole_607510, base: "/",
    url: url_GetDeleteServiceLinkedRole_607511,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceSpecificCredential_607559 = ref object of OpenApiRestCall_605589
proc url_PostDeleteServiceSpecificCredential_607561(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServiceSpecificCredential_607560(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607562 = query.getOrDefault("Action")
  valid_607562 = validateParameter(valid_607562, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_607562 != nil:
    section.add "Action", valid_607562
  var valid_607563 = query.getOrDefault("Version")
  valid_607563 = validateParameter(valid_607563, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607563 != nil:
    section.add "Version", valid_607563
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607564 = header.getOrDefault("X-Amz-Signature")
  valid_607564 = validateParameter(valid_607564, JString, required = false,
                                 default = nil)
  if valid_607564 != nil:
    section.add "X-Amz-Signature", valid_607564
  var valid_607565 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607565 = validateParameter(valid_607565, JString, required = false,
                                 default = nil)
  if valid_607565 != nil:
    section.add "X-Amz-Content-Sha256", valid_607565
  var valid_607566 = header.getOrDefault("X-Amz-Date")
  valid_607566 = validateParameter(valid_607566, JString, required = false,
                                 default = nil)
  if valid_607566 != nil:
    section.add "X-Amz-Date", valid_607566
  var valid_607567 = header.getOrDefault("X-Amz-Credential")
  valid_607567 = validateParameter(valid_607567, JString, required = false,
                                 default = nil)
  if valid_607567 != nil:
    section.add "X-Amz-Credential", valid_607567
  var valid_607568 = header.getOrDefault("X-Amz-Security-Token")
  valid_607568 = validateParameter(valid_607568, JString, required = false,
                                 default = nil)
  if valid_607568 != nil:
    section.add "X-Amz-Security-Token", valid_607568
  var valid_607569 = header.getOrDefault("X-Amz-Algorithm")
  valid_607569 = validateParameter(valid_607569, JString, required = false,
                                 default = nil)
  if valid_607569 != nil:
    section.add "X-Amz-Algorithm", valid_607569
  var valid_607570 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607570 = validateParameter(valid_607570, JString, required = false,
                                 default = nil)
  if valid_607570 != nil:
    section.add "X-Amz-SignedHeaders", valid_607570
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_607571 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_607571 = validateParameter(valid_607571, JString, required = true,
                                 default = nil)
  if valid_607571 != nil:
    section.add "ServiceSpecificCredentialId", valid_607571
  var valid_607572 = formData.getOrDefault("UserName")
  valid_607572 = validateParameter(valid_607572, JString, required = false,
                                 default = nil)
  if valid_607572 != nil:
    section.add "UserName", valid_607572
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607573: Call_PostDeleteServiceSpecificCredential_607559;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_607573.validator(path, query, header, formData, body)
  let scheme = call_607573.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607573.url(scheme.get, call_607573.host, call_607573.base,
                         call_607573.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607573, url, valid)

proc call*(call_607574: Call_PostDeleteServiceSpecificCredential_607559;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607575 = newJObject()
  var formData_607576 = newJObject()
  add(formData_607576, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_607576, "UserName", newJString(UserName))
  add(query_607575, "Action", newJString(Action))
  add(query_607575, "Version", newJString(Version))
  result = call_607574.call(nil, query_607575, nil, formData_607576, nil)

var postDeleteServiceSpecificCredential* = Call_PostDeleteServiceSpecificCredential_607559(
    name: "postDeleteServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_PostDeleteServiceSpecificCredential_607560, base: "/",
    url: url_PostDeleteServiceSpecificCredential_607561,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceSpecificCredential_607542 = ref object of OpenApiRestCall_605589
proc url_GetDeleteServiceSpecificCredential_607544(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServiceSpecificCredential_607543(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607545 = query.getOrDefault("UserName")
  valid_607545 = validateParameter(valid_607545, JString, required = false,
                                 default = nil)
  if valid_607545 != nil:
    section.add "UserName", valid_607545
  assert query != nil, "query argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_607546 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_607546 = validateParameter(valid_607546, JString, required = true,
                                 default = nil)
  if valid_607546 != nil:
    section.add "ServiceSpecificCredentialId", valid_607546
  var valid_607547 = query.getOrDefault("Action")
  valid_607547 = validateParameter(valid_607547, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_607547 != nil:
    section.add "Action", valid_607547
  var valid_607548 = query.getOrDefault("Version")
  valid_607548 = validateParameter(valid_607548, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607548 != nil:
    section.add "Version", valid_607548
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607549 = header.getOrDefault("X-Amz-Signature")
  valid_607549 = validateParameter(valid_607549, JString, required = false,
                                 default = nil)
  if valid_607549 != nil:
    section.add "X-Amz-Signature", valid_607549
  var valid_607550 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607550 = validateParameter(valid_607550, JString, required = false,
                                 default = nil)
  if valid_607550 != nil:
    section.add "X-Amz-Content-Sha256", valid_607550
  var valid_607551 = header.getOrDefault("X-Amz-Date")
  valid_607551 = validateParameter(valid_607551, JString, required = false,
                                 default = nil)
  if valid_607551 != nil:
    section.add "X-Amz-Date", valid_607551
  var valid_607552 = header.getOrDefault("X-Amz-Credential")
  valid_607552 = validateParameter(valid_607552, JString, required = false,
                                 default = nil)
  if valid_607552 != nil:
    section.add "X-Amz-Credential", valid_607552
  var valid_607553 = header.getOrDefault("X-Amz-Security-Token")
  valid_607553 = validateParameter(valid_607553, JString, required = false,
                                 default = nil)
  if valid_607553 != nil:
    section.add "X-Amz-Security-Token", valid_607553
  var valid_607554 = header.getOrDefault("X-Amz-Algorithm")
  valid_607554 = validateParameter(valid_607554, JString, required = false,
                                 default = nil)
  if valid_607554 != nil:
    section.add "X-Amz-Algorithm", valid_607554
  var valid_607555 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607555 = validateParameter(valid_607555, JString, required = false,
                                 default = nil)
  if valid_607555 != nil:
    section.add "X-Amz-SignedHeaders", valid_607555
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607556: Call_GetDeleteServiceSpecificCredential_607542;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_607556.validator(path, query, header, formData, body)
  let scheme = call_607556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607556.url(scheme.get, call_607556.host, call_607556.base,
                         call_607556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607556, url, valid)

proc call*(call_607557: Call_GetDeleteServiceSpecificCredential_607542;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607558 = newJObject()
  add(query_607558, "UserName", newJString(UserName))
  add(query_607558, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_607558, "Action", newJString(Action))
  add(query_607558, "Version", newJString(Version))
  result = call_607557.call(nil, query_607558, nil, nil, nil)

var getDeleteServiceSpecificCredential* = Call_GetDeleteServiceSpecificCredential_607542(
    name: "getDeleteServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_GetDeleteServiceSpecificCredential_607543, base: "/",
    url: url_GetDeleteServiceSpecificCredential_607544,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSigningCertificate_607594 = ref object of OpenApiRestCall_605589
proc url_PostDeleteSigningCertificate_607596(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSigningCertificate_607595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607597 = query.getOrDefault("Action")
  valid_607597 = validateParameter(valid_607597, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_607597 != nil:
    section.add "Action", valid_607597
  var valid_607598 = query.getOrDefault("Version")
  valid_607598 = validateParameter(valid_607598, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607598 != nil:
    section.add "Version", valid_607598
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607599 = header.getOrDefault("X-Amz-Signature")
  valid_607599 = validateParameter(valid_607599, JString, required = false,
                                 default = nil)
  if valid_607599 != nil:
    section.add "X-Amz-Signature", valid_607599
  var valid_607600 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607600 = validateParameter(valid_607600, JString, required = false,
                                 default = nil)
  if valid_607600 != nil:
    section.add "X-Amz-Content-Sha256", valid_607600
  var valid_607601 = header.getOrDefault("X-Amz-Date")
  valid_607601 = validateParameter(valid_607601, JString, required = false,
                                 default = nil)
  if valid_607601 != nil:
    section.add "X-Amz-Date", valid_607601
  var valid_607602 = header.getOrDefault("X-Amz-Credential")
  valid_607602 = validateParameter(valid_607602, JString, required = false,
                                 default = nil)
  if valid_607602 != nil:
    section.add "X-Amz-Credential", valid_607602
  var valid_607603 = header.getOrDefault("X-Amz-Security-Token")
  valid_607603 = validateParameter(valid_607603, JString, required = false,
                                 default = nil)
  if valid_607603 != nil:
    section.add "X-Amz-Security-Token", valid_607603
  var valid_607604 = header.getOrDefault("X-Amz-Algorithm")
  valid_607604 = validateParameter(valid_607604, JString, required = false,
                                 default = nil)
  if valid_607604 != nil:
    section.add "X-Amz-Algorithm", valid_607604
  var valid_607605 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607605 = validateParameter(valid_607605, JString, required = false,
                                 default = nil)
  if valid_607605 != nil:
    section.add "X-Amz-SignedHeaders", valid_607605
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CertificateId` field"
  var valid_607606 = formData.getOrDefault("CertificateId")
  valid_607606 = validateParameter(valid_607606, JString, required = true,
                                 default = nil)
  if valid_607606 != nil:
    section.add "CertificateId", valid_607606
  var valid_607607 = formData.getOrDefault("UserName")
  valid_607607 = validateParameter(valid_607607, JString, required = false,
                                 default = nil)
  if valid_607607 != nil:
    section.add "UserName", valid_607607
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607608: Call_PostDeleteSigningCertificate_607594; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_607608.validator(path, query, header, formData, body)
  let scheme = call_607608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607608.url(scheme.get, call_607608.host, call_607608.base,
                         call_607608.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607608, url, valid)

proc call*(call_607609: Call_PostDeleteSigningCertificate_607594;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607610 = newJObject()
  var formData_607611 = newJObject()
  add(formData_607611, "CertificateId", newJString(CertificateId))
  add(formData_607611, "UserName", newJString(UserName))
  add(query_607610, "Action", newJString(Action))
  add(query_607610, "Version", newJString(Version))
  result = call_607609.call(nil, query_607610, nil, formData_607611, nil)

var postDeleteSigningCertificate* = Call_PostDeleteSigningCertificate_607594(
    name: "postDeleteSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_PostDeleteSigningCertificate_607595, base: "/",
    url: url_PostDeleteSigningCertificate_607596,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSigningCertificate_607577 = ref object of OpenApiRestCall_605589
proc url_GetDeleteSigningCertificate_607579(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSigningCertificate_607578(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  section = newJObject()
  var valid_607580 = query.getOrDefault("UserName")
  valid_607580 = validateParameter(valid_607580, JString, required = false,
                                 default = nil)
  if valid_607580 != nil:
    section.add "UserName", valid_607580
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607581 = query.getOrDefault("Action")
  valid_607581 = validateParameter(valid_607581, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_607581 != nil:
    section.add "Action", valid_607581
  var valid_607582 = query.getOrDefault("Version")
  valid_607582 = validateParameter(valid_607582, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607582 != nil:
    section.add "Version", valid_607582
  var valid_607583 = query.getOrDefault("CertificateId")
  valid_607583 = validateParameter(valid_607583, JString, required = true,
                                 default = nil)
  if valid_607583 != nil:
    section.add "CertificateId", valid_607583
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607584 = header.getOrDefault("X-Amz-Signature")
  valid_607584 = validateParameter(valid_607584, JString, required = false,
                                 default = nil)
  if valid_607584 != nil:
    section.add "X-Amz-Signature", valid_607584
  var valid_607585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607585 = validateParameter(valid_607585, JString, required = false,
                                 default = nil)
  if valid_607585 != nil:
    section.add "X-Amz-Content-Sha256", valid_607585
  var valid_607586 = header.getOrDefault("X-Amz-Date")
  valid_607586 = validateParameter(valid_607586, JString, required = false,
                                 default = nil)
  if valid_607586 != nil:
    section.add "X-Amz-Date", valid_607586
  var valid_607587 = header.getOrDefault("X-Amz-Credential")
  valid_607587 = validateParameter(valid_607587, JString, required = false,
                                 default = nil)
  if valid_607587 != nil:
    section.add "X-Amz-Credential", valid_607587
  var valid_607588 = header.getOrDefault("X-Amz-Security-Token")
  valid_607588 = validateParameter(valid_607588, JString, required = false,
                                 default = nil)
  if valid_607588 != nil:
    section.add "X-Amz-Security-Token", valid_607588
  var valid_607589 = header.getOrDefault("X-Amz-Algorithm")
  valid_607589 = validateParameter(valid_607589, JString, required = false,
                                 default = nil)
  if valid_607589 != nil:
    section.add "X-Amz-Algorithm", valid_607589
  var valid_607590 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607590 = validateParameter(valid_607590, JString, required = false,
                                 default = nil)
  if valid_607590 != nil:
    section.add "X-Amz-SignedHeaders", valid_607590
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607591: Call_GetDeleteSigningCertificate_607577; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_607591.validator(path, query, header, formData, body)
  let scheme = call_607591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607591.url(scheme.get, call_607591.host, call_607591.base,
                         call_607591.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607591, url, valid)

proc call*(call_607592: Call_GetDeleteSigningCertificate_607577;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  var query_607593 = newJObject()
  add(query_607593, "UserName", newJString(UserName))
  add(query_607593, "Action", newJString(Action))
  add(query_607593, "Version", newJString(Version))
  add(query_607593, "CertificateId", newJString(CertificateId))
  result = call_607592.call(nil, query_607593, nil, nil, nil)

var getDeleteSigningCertificate* = Call_GetDeleteSigningCertificate_607577(
    name: "getDeleteSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_GetDeleteSigningCertificate_607578, base: "/",
    url: url_GetDeleteSigningCertificate_607579,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUser_607628 = ref object of OpenApiRestCall_605589
proc url_PostDeleteUser_607630(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUser_607629(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607631 = query.getOrDefault("Action")
  valid_607631 = validateParameter(valid_607631, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_607631 != nil:
    section.add "Action", valid_607631
  var valid_607632 = query.getOrDefault("Version")
  valid_607632 = validateParameter(valid_607632, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607632 != nil:
    section.add "Version", valid_607632
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607633 = header.getOrDefault("X-Amz-Signature")
  valid_607633 = validateParameter(valid_607633, JString, required = false,
                                 default = nil)
  if valid_607633 != nil:
    section.add "X-Amz-Signature", valid_607633
  var valid_607634 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607634 = validateParameter(valid_607634, JString, required = false,
                                 default = nil)
  if valid_607634 != nil:
    section.add "X-Amz-Content-Sha256", valid_607634
  var valid_607635 = header.getOrDefault("X-Amz-Date")
  valid_607635 = validateParameter(valid_607635, JString, required = false,
                                 default = nil)
  if valid_607635 != nil:
    section.add "X-Amz-Date", valid_607635
  var valid_607636 = header.getOrDefault("X-Amz-Credential")
  valid_607636 = validateParameter(valid_607636, JString, required = false,
                                 default = nil)
  if valid_607636 != nil:
    section.add "X-Amz-Credential", valid_607636
  var valid_607637 = header.getOrDefault("X-Amz-Security-Token")
  valid_607637 = validateParameter(valid_607637, JString, required = false,
                                 default = nil)
  if valid_607637 != nil:
    section.add "X-Amz-Security-Token", valid_607637
  var valid_607638 = header.getOrDefault("X-Amz-Algorithm")
  valid_607638 = validateParameter(valid_607638, JString, required = false,
                                 default = nil)
  if valid_607638 != nil:
    section.add "X-Amz-Algorithm", valid_607638
  var valid_607639 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607639 = validateParameter(valid_607639, JString, required = false,
                                 default = nil)
  if valid_607639 != nil:
    section.add "X-Amz-SignedHeaders", valid_607639
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_607640 = formData.getOrDefault("UserName")
  valid_607640 = validateParameter(valid_607640, JString, required = true,
                                 default = nil)
  if valid_607640 != nil:
    section.add "UserName", valid_607640
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607641: Call_PostDeleteUser_607628; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_607641.validator(path, query, header, formData, body)
  let scheme = call_607641.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607641.url(scheme.get, call_607641.host, call_607641.base,
                         call_607641.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607641, url, valid)

proc call*(call_607642: Call_PostDeleteUser_607628; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607643 = newJObject()
  var formData_607644 = newJObject()
  add(formData_607644, "UserName", newJString(UserName))
  add(query_607643, "Action", newJString(Action))
  add(query_607643, "Version", newJString(Version))
  result = call_607642.call(nil, query_607643, nil, formData_607644, nil)

var postDeleteUser* = Call_PostDeleteUser_607628(name: "postDeleteUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_PostDeleteUser_607629,
    base: "/", url: url_PostDeleteUser_607630, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUser_607612 = ref object of OpenApiRestCall_605589
proc url_GetDeleteUser_607614(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUser_607613(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_607615 = query.getOrDefault("UserName")
  valid_607615 = validateParameter(valid_607615, JString, required = true,
                                 default = nil)
  if valid_607615 != nil:
    section.add "UserName", valid_607615
  var valid_607616 = query.getOrDefault("Action")
  valid_607616 = validateParameter(valid_607616, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_607616 != nil:
    section.add "Action", valid_607616
  var valid_607617 = query.getOrDefault("Version")
  valid_607617 = validateParameter(valid_607617, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607617 != nil:
    section.add "Version", valid_607617
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607618 = header.getOrDefault("X-Amz-Signature")
  valid_607618 = validateParameter(valid_607618, JString, required = false,
                                 default = nil)
  if valid_607618 != nil:
    section.add "X-Amz-Signature", valid_607618
  var valid_607619 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607619 = validateParameter(valid_607619, JString, required = false,
                                 default = nil)
  if valid_607619 != nil:
    section.add "X-Amz-Content-Sha256", valid_607619
  var valid_607620 = header.getOrDefault("X-Amz-Date")
  valid_607620 = validateParameter(valid_607620, JString, required = false,
                                 default = nil)
  if valid_607620 != nil:
    section.add "X-Amz-Date", valid_607620
  var valid_607621 = header.getOrDefault("X-Amz-Credential")
  valid_607621 = validateParameter(valid_607621, JString, required = false,
                                 default = nil)
  if valid_607621 != nil:
    section.add "X-Amz-Credential", valid_607621
  var valid_607622 = header.getOrDefault("X-Amz-Security-Token")
  valid_607622 = validateParameter(valid_607622, JString, required = false,
                                 default = nil)
  if valid_607622 != nil:
    section.add "X-Amz-Security-Token", valid_607622
  var valid_607623 = header.getOrDefault("X-Amz-Algorithm")
  valid_607623 = validateParameter(valid_607623, JString, required = false,
                                 default = nil)
  if valid_607623 != nil:
    section.add "X-Amz-Algorithm", valid_607623
  var valid_607624 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607624 = validateParameter(valid_607624, JString, required = false,
                                 default = nil)
  if valid_607624 != nil:
    section.add "X-Amz-SignedHeaders", valid_607624
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607625: Call_GetDeleteUser_607612; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_607625.validator(path, query, header, formData, body)
  let scheme = call_607625.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607625.url(scheme.get, call_607625.host, call_607625.base,
                         call_607625.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607625, url, valid)

proc call*(call_607626: Call_GetDeleteUser_607612; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607627 = newJObject()
  add(query_607627, "UserName", newJString(UserName))
  add(query_607627, "Action", newJString(Action))
  add(query_607627, "Version", newJString(Version))
  result = call_607626.call(nil, query_607627, nil, nil, nil)

var getDeleteUser* = Call_GetDeleteUser_607612(name: "getDeleteUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_GetDeleteUser_607613,
    base: "/", url: url_GetDeleteUser_607614, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPermissionsBoundary_607661 = ref object of OpenApiRestCall_605589
proc url_PostDeleteUserPermissionsBoundary_607663(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUserPermissionsBoundary_607662(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607664 = query.getOrDefault("Action")
  valid_607664 = validateParameter(valid_607664, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_607664 != nil:
    section.add "Action", valid_607664
  var valid_607665 = query.getOrDefault("Version")
  valid_607665 = validateParameter(valid_607665, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607665 != nil:
    section.add "Version", valid_607665
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607666 = header.getOrDefault("X-Amz-Signature")
  valid_607666 = validateParameter(valid_607666, JString, required = false,
                                 default = nil)
  if valid_607666 != nil:
    section.add "X-Amz-Signature", valid_607666
  var valid_607667 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607667 = validateParameter(valid_607667, JString, required = false,
                                 default = nil)
  if valid_607667 != nil:
    section.add "X-Amz-Content-Sha256", valid_607667
  var valid_607668 = header.getOrDefault("X-Amz-Date")
  valid_607668 = validateParameter(valid_607668, JString, required = false,
                                 default = nil)
  if valid_607668 != nil:
    section.add "X-Amz-Date", valid_607668
  var valid_607669 = header.getOrDefault("X-Amz-Credential")
  valid_607669 = validateParameter(valid_607669, JString, required = false,
                                 default = nil)
  if valid_607669 != nil:
    section.add "X-Amz-Credential", valid_607669
  var valid_607670 = header.getOrDefault("X-Amz-Security-Token")
  valid_607670 = validateParameter(valid_607670, JString, required = false,
                                 default = nil)
  if valid_607670 != nil:
    section.add "X-Amz-Security-Token", valid_607670
  var valid_607671 = header.getOrDefault("X-Amz-Algorithm")
  valid_607671 = validateParameter(valid_607671, JString, required = false,
                                 default = nil)
  if valid_607671 != nil:
    section.add "X-Amz-Algorithm", valid_607671
  var valid_607672 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607672 = validateParameter(valid_607672, JString, required = false,
                                 default = nil)
  if valid_607672 != nil:
    section.add "X-Amz-SignedHeaders", valid_607672
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_607673 = formData.getOrDefault("UserName")
  valid_607673 = validateParameter(valid_607673, JString, required = true,
                                 default = nil)
  if valid_607673 != nil:
    section.add "UserName", valid_607673
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607674: Call_PostDeleteUserPermissionsBoundary_607661;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_607674.validator(path, query, header, formData, body)
  let scheme = call_607674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607674.url(scheme.get, call_607674.host, call_607674.base,
                         call_607674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607674, url, valid)

proc call*(call_607675: Call_PostDeleteUserPermissionsBoundary_607661;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607676 = newJObject()
  var formData_607677 = newJObject()
  add(formData_607677, "UserName", newJString(UserName))
  add(query_607676, "Action", newJString(Action))
  add(query_607676, "Version", newJString(Version))
  result = call_607675.call(nil, query_607676, nil, formData_607677, nil)

var postDeleteUserPermissionsBoundary* = Call_PostDeleteUserPermissionsBoundary_607661(
    name: "postDeleteUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_PostDeleteUserPermissionsBoundary_607662, base: "/",
    url: url_PostDeleteUserPermissionsBoundary_607663,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPermissionsBoundary_607645 = ref object of OpenApiRestCall_605589
proc url_GetDeleteUserPermissionsBoundary_607647(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUserPermissionsBoundary_607646(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_607648 = query.getOrDefault("UserName")
  valid_607648 = validateParameter(valid_607648, JString, required = true,
                                 default = nil)
  if valid_607648 != nil:
    section.add "UserName", valid_607648
  var valid_607649 = query.getOrDefault("Action")
  valid_607649 = validateParameter(valid_607649, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_607649 != nil:
    section.add "Action", valid_607649
  var valid_607650 = query.getOrDefault("Version")
  valid_607650 = validateParameter(valid_607650, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607650 != nil:
    section.add "Version", valid_607650
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607651 = header.getOrDefault("X-Amz-Signature")
  valid_607651 = validateParameter(valid_607651, JString, required = false,
                                 default = nil)
  if valid_607651 != nil:
    section.add "X-Amz-Signature", valid_607651
  var valid_607652 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607652 = validateParameter(valid_607652, JString, required = false,
                                 default = nil)
  if valid_607652 != nil:
    section.add "X-Amz-Content-Sha256", valid_607652
  var valid_607653 = header.getOrDefault("X-Amz-Date")
  valid_607653 = validateParameter(valid_607653, JString, required = false,
                                 default = nil)
  if valid_607653 != nil:
    section.add "X-Amz-Date", valid_607653
  var valid_607654 = header.getOrDefault("X-Amz-Credential")
  valid_607654 = validateParameter(valid_607654, JString, required = false,
                                 default = nil)
  if valid_607654 != nil:
    section.add "X-Amz-Credential", valid_607654
  var valid_607655 = header.getOrDefault("X-Amz-Security-Token")
  valid_607655 = validateParameter(valid_607655, JString, required = false,
                                 default = nil)
  if valid_607655 != nil:
    section.add "X-Amz-Security-Token", valid_607655
  var valid_607656 = header.getOrDefault("X-Amz-Algorithm")
  valid_607656 = validateParameter(valid_607656, JString, required = false,
                                 default = nil)
  if valid_607656 != nil:
    section.add "X-Amz-Algorithm", valid_607656
  var valid_607657 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607657 = validateParameter(valid_607657, JString, required = false,
                                 default = nil)
  if valid_607657 != nil:
    section.add "X-Amz-SignedHeaders", valid_607657
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607658: Call_GetDeleteUserPermissionsBoundary_607645;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_607658.validator(path, query, header, formData, body)
  let scheme = call_607658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607658.url(scheme.get, call_607658.host, call_607658.base,
                         call_607658.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607658, url, valid)

proc call*(call_607659: Call_GetDeleteUserPermissionsBoundary_607645;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607660 = newJObject()
  add(query_607660, "UserName", newJString(UserName))
  add(query_607660, "Action", newJString(Action))
  add(query_607660, "Version", newJString(Version))
  result = call_607659.call(nil, query_607660, nil, nil, nil)

var getDeleteUserPermissionsBoundary* = Call_GetDeleteUserPermissionsBoundary_607645(
    name: "getDeleteUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_GetDeleteUserPermissionsBoundary_607646, base: "/",
    url: url_GetDeleteUserPermissionsBoundary_607647,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPolicy_607695 = ref object of OpenApiRestCall_605589
proc url_PostDeleteUserPolicy_607697(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUserPolicy_607696(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607698 = query.getOrDefault("Action")
  valid_607698 = validateParameter(valid_607698, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_607698 != nil:
    section.add "Action", valid_607698
  var valid_607699 = query.getOrDefault("Version")
  valid_607699 = validateParameter(valid_607699, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607699 != nil:
    section.add "Version", valid_607699
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607700 = header.getOrDefault("X-Amz-Signature")
  valid_607700 = validateParameter(valid_607700, JString, required = false,
                                 default = nil)
  if valid_607700 != nil:
    section.add "X-Amz-Signature", valid_607700
  var valid_607701 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607701 = validateParameter(valid_607701, JString, required = false,
                                 default = nil)
  if valid_607701 != nil:
    section.add "X-Amz-Content-Sha256", valid_607701
  var valid_607702 = header.getOrDefault("X-Amz-Date")
  valid_607702 = validateParameter(valid_607702, JString, required = false,
                                 default = nil)
  if valid_607702 != nil:
    section.add "X-Amz-Date", valid_607702
  var valid_607703 = header.getOrDefault("X-Amz-Credential")
  valid_607703 = validateParameter(valid_607703, JString, required = false,
                                 default = nil)
  if valid_607703 != nil:
    section.add "X-Amz-Credential", valid_607703
  var valid_607704 = header.getOrDefault("X-Amz-Security-Token")
  valid_607704 = validateParameter(valid_607704, JString, required = false,
                                 default = nil)
  if valid_607704 != nil:
    section.add "X-Amz-Security-Token", valid_607704
  var valid_607705 = header.getOrDefault("X-Amz-Algorithm")
  valid_607705 = validateParameter(valid_607705, JString, required = false,
                                 default = nil)
  if valid_607705 != nil:
    section.add "X-Amz-Algorithm", valid_607705
  var valid_607706 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607706 = validateParameter(valid_607706, JString, required = false,
                                 default = nil)
  if valid_607706 != nil:
    section.add "X-Amz-SignedHeaders", valid_607706
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_607707 = formData.getOrDefault("UserName")
  valid_607707 = validateParameter(valid_607707, JString, required = true,
                                 default = nil)
  if valid_607707 != nil:
    section.add "UserName", valid_607707
  var valid_607708 = formData.getOrDefault("PolicyName")
  valid_607708 = validateParameter(valid_607708, JString, required = true,
                                 default = nil)
  if valid_607708 != nil:
    section.add "PolicyName", valid_607708
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607709: Call_PostDeleteUserPolicy_607695; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607709.validator(path, query, header, formData, body)
  let scheme = call_607709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607709.url(scheme.get, call_607709.host, call_607709.base,
                         call_607709.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607709, url, valid)

proc call*(call_607710: Call_PostDeleteUserPolicy_607695; UserName: string;
          PolicyName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_607711 = newJObject()
  var formData_607712 = newJObject()
  add(formData_607712, "UserName", newJString(UserName))
  add(query_607711, "Action", newJString(Action))
  add(query_607711, "Version", newJString(Version))
  add(formData_607712, "PolicyName", newJString(PolicyName))
  result = call_607710.call(nil, query_607711, nil, formData_607712, nil)

var postDeleteUserPolicy* = Call_PostDeleteUserPolicy_607695(
    name: "postDeleteUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_PostDeleteUserPolicy_607696, base: "/",
    url: url_PostDeleteUserPolicy_607697, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPolicy_607678 = ref object of OpenApiRestCall_605589
proc url_GetDeleteUserPolicy_607680(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUserPolicy_607679(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_607681 = query.getOrDefault("UserName")
  valid_607681 = validateParameter(valid_607681, JString, required = true,
                                 default = nil)
  if valid_607681 != nil:
    section.add "UserName", valid_607681
  var valid_607682 = query.getOrDefault("PolicyName")
  valid_607682 = validateParameter(valid_607682, JString, required = true,
                                 default = nil)
  if valid_607682 != nil:
    section.add "PolicyName", valid_607682
  var valid_607683 = query.getOrDefault("Action")
  valid_607683 = validateParameter(valid_607683, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_607683 != nil:
    section.add "Action", valid_607683
  var valid_607684 = query.getOrDefault("Version")
  valid_607684 = validateParameter(valid_607684, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607684 != nil:
    section.add "Version", valid_607684
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607685 = header.getOrDefault("X-Amz-Signature")
  valid_607685 = validateParameter(valid_607685, JString, required = false,
                                 default = nil)
  if valid_607685 != nil:
    section.add "X-Amz-Signature", valid_607685
  var valid_607686 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607686 = validateParameter(valid_607686, JString, required = false,
                                 default = nil)
  if valid_607686 != nil:
    section.add "X-Amz-Content-Sha256", valid_607686
  var valid_607687 = header.getOrDefault("X-Amz-Date")
  valid_607687 = validateParameter(valid_607687, JString, required = false,
                                 default = nil)
  if valid_607687 != nil:
    section.add "X-Amz-Date", valid_607687
  var valid_607688 = header.getOrDefault("X-Amz-Credential")
  valid_607688 = validateParameter(valid_607688, JString, required = false,
                                 default = nil)
  if valid_607688 != nil:
    section.add "X-Amz-Credential", valid_607688
  var valid_607689 = header.getOrDefault("X-Amz-Security-Token")
  valid_607689 = validateParameter(valid_607689, JString, required = false,
                                 default = nil)
  if valid_607689 != nil:
    section.add "X-Amz-Security-Token", valid_607689
  var valid_607690 = header.getOrDefault("X-Amz-Algorithm")
  valid_607690 = validateParameter(valid_607690, JString, required = false,
                                 default = nil)
  if valid_607690 != nil:
    section.add "X-Amz-Algorithm", valid_607690
  var valid_607691 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607691 = validateParameter(valid_607691, JString, required = false,
                                 default = nil)
  if valid_607691 != nil:
    section.add "X-Amz-SignedHeaders", valid_607691
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607692: Call_GetDeleteUserPolicy_607678; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607692.validator(path, query, header, formData, body)
  let scheme = call_607692.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607692.url(scheme.get, call_607692.host, call_607692.base,
                         call_607692.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607692, url, valid)

proc call*(call_607693: Call_GetDeleteUserPolicy_607678; UserName: string;
          PolicyName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607694 = newJObject()
  add(query_607694, "UserName", newJString(UserName))
  add(query_607694, "PolicyName", newJString(PolicyName))
  add(query_607694, "Action", newJString(Action))
  add(query_607694, "Version", newJString(Version))
  result = call_607693.call(nil, query_607694, nil, nil, nil)

var getDeleteUserPolicy* = Call_GetDeleteUserPolicy_607678(
    name: "getDeleteUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_GetDeleteUserPolicy_607679, base: "/",
    url: url_GetDeleteUserPolicy_607680, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVirtualMFADevice_607729 = ref object of OpenApiRestCall_605589
proc url_PostDeleteVirtualMFADevice_607731(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteVirtualMFADevice_607730(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607732 = query.getOrDefault("Action")
  valid_607732 = validateParameter(valid_607732, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_607732 != nil:
    section.add "Action", valid_607732
  var valid_607733 = query.getOrDefault("Version")
  valid_607733 = validateParameter(valid_607733, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607733 != nil:
    section.add "Version", valid_607733
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607734 = header.getOrDefault("X-Amz-Signature")
  valid_607734 = validateParameter(valid_607734, JString, required = false,
                                 default = nil)
  if valid_607734 != nil:
    section.add "X-Amz-Signature", valid_607734
  var valid_607735 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607735 = validateParameter(valid_607735, JString, required = false,
                                 default = nil)
  if valid_607735 != nil:
    section.add "X-Amz-Content-Sha256", valid_607735
  var valid_607736 = header.getOrDefault("X-Amz-Date")
  valid_607736 = validateParameter(valid_607736, JString, required = false,
                                 default = nil)
  if valid_607736 != nil:
    section.add "X-Amz-Date", valid_607736
  var valid_607737 = header.getOrDefault("X-Amz-Credential")
  valid_607737 = validateParameter(valid_607737, JString, required = false,
                                 default = nil)
  if valid_607737 != nil:
    section.add "X-Amz-Credential", valid_607737
  var valid_607738 = header.getOrDefault("X-Amz-Security-Token")
  valid_607738 = validateParameter(valid_607738, JString, required = false,
                                 default = nil)
  if valid_607738 != nil:
    section.add "X-Amz-Security-Token", valid_607738
  var valid_607739 = header.getOrDefault("X-Amz-Algorithm")
  valid_607739 = validateParameter(valid_607739, JString, required = false,
                                 default = nil)
  if valid_607739 != nil:
    section.add "X-Amz-Algorithm", valid_607739
  var valid_607740 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607740 = validateParameter(valid_607740, JString, required = false,
                                 default = nil)
  if valid_607740 != nil:
    section.add "X-Amz-SignedHeaders", valid_607740
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_607741 = formData.getOrDefault("SerialNumber")
  valid_607741 = validateParameter(valid_607741, JString, required = true,
                                 default = nil)
  if valid_607741 != nil:
    section.add "SerialNumber", valid_607741
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607742: Call_PostDeleteVirtualMFADevice_607729; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_607742.validator(path, query, header, formData, body)
  let scheme = call_607742.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607742.url(scheme.get, call_607742.host, call_607742.base,
                         call_607742.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607742, url, valid)

proc call*(call_607743: Call_PostDeleteVirtualMFADevice_607729;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607744 = newJObject()
  var formData_607745 = newJObject()
  add(formData_607745, "SerialNumber", newJString(SerialNumber))
  add(query_607744, "Action", newJString(Action))
  add(query_607744, "Version", newJString(Version))
  result = call_607743.call(nil, query_607744, nil, formData_607745, nil)

var postDeleteVirtualMFADevice* = Call_PostDeleteVirtualMFADevice_607729(
    name: "postDeleteVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_PostDeleteVirtualMFADevice_607730, base: "/",
    url: url_PostDeleteVirtualMFADevice_607731,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVirtualMFADevice_607713 = ref object of OpenApiRestCall_605589
proc url_GetDeleteVirtualMFADevice_607715(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteVirtualMFADevice_607714(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_607716 = query.getOrDefault("SerialNumber")
  valid_607716 = validateParameter(valid_607716, JString, required = true,
                                 default = nil)
  if valid_607716 != nil:
    section.add "SerialNumber", valid_607716
  var valid_607717 = query.getOrDefault("Action")
  valid_607717 = validateParameter(valid_607717, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_607717 != nil:
    section.add "Action", valid_607717
  var valid_607718 = query.getOrDefault("Version")
  valid_607718 = validateParameter(valid_607718, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607718 != nil:
    section.add "Version", valid_607718
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607719 = header.getOrDefault("X-Amz-Signature")
  valid_607719 = validateParameter(valid_607719, JString, required = false,
                                 default = nil)
  if valid_607719 != nil:
    section.add "X-Amz-Signature", valid_607719
  var valid_607720 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607720 = validateParameter(valid_607720, JString, required = false,
                                 default = nil)
  if valid_607720 != nil:
    section.add "X-Amz-Content-Sha256", valid_607720
  var valid_607721 = header.getOrDefault("X-Amz-Date")
  valid_607721 = validateParameter(valid_607721, JString, required = false,
                                 default = nil)
  if valid_607721 != nil:
    section.add "X-Amz-Date", valid_607721
  var valid_607722 = header.getOrDefault("X-Amz-Credential")
  valid_607722 = validateParameter(valid_607722, JString, required = false,
                                 default = nil)
  if valid_607722 != nil:
    section.add "X-Amz-Credential", valid_607722
  var valid_607723 = header.getOrDefault("X-Amz-Security-Token")
  valid_607723 = validateParameter(valid_607723, JString, required = false,
                                 default = nil)
  if valid_607723 != nil:
    section.add "X-Amz-Security-Token", valid_607723
  var valid_607724 = header.getOrDefault("X-Amz-Algorithm")
  valid_607724 = validateParameter(valid_607724, JString, required = false,
                                 default = nil)
  if valid_607724 != nil:
    section.add "X-Amz-Algorithm", valid_607724
  var valid_607725 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607725 = validateParameter(valid_607725, JString, required = false,
                                 default = nil)
  if valid_607725 != nil:
    section.add "X-Amz-SignedHeaders", valid_607725
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607726: Call_GetDeleteVirtualMFADevice_607713; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_607726.validator(path, query, header, formData, body)
  let scheme = call_607726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607726.url(scheme.get, call_607726.host, call_607726.base,
                         call_607726.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607726, url, valid)

proc call*(call_607727: Call_GetDeleteVirtualMFADevice_607713;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607728 = newJObject()
  add(query_607728, "SerialNumber", newJString(SerialNumber))
  add(query_607728, "Action", newJString(Action))
  add(query_607728, "Version", newJString(Version))
  result = call_607727.call(nil, query_607728, nil, nil, nil)

var getDeleteVirtualMFADevice* = Call_GetDeleteVirtualMFADevice_607713(
    name: "getDeleteVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_GetDeleteVirtualMFADevice_607714, base: "/",
    url: url_GetDeleteVirtualMFADevice_607715,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachGroupPolicy_607763 = ref object of OpenApiRestCall_605589
proc url_PostDetachGroupPolicy_607765(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachGroupPolicy_607764(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607766 = query.getOrDefault("Action")
  valid_607766 = validateParameter(valid_607766, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_607766 != nil:
    section.add "Action", valid_607766
  var valid_607767 = query.getOrDefault("Version")
  valid_607767 = validateParameter(valid_607767, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607767 != nil:
    section.add "Version", valid_607767
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607768 = header.getOrDefault("X-Amz-Signature")
  valid_607768 = validateParameter(valid_607768, JString, required = false,
                                 default = nil)
  if valid_607768 != nil:
    section.add "X-Amz-Signature", valid_607768
  var valid_607769 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607769 = validateParameter(valid_607769, JString, required = false,
                                 default = nil)
  if valid_607769 != nil:
    section.add "X-Amz-Content-Sha256", valid_607769
  var valid_607770 = header.getOrDefault("X-Amz-Date")
  valid_607770 = validateParameter(valid_607770, JString, required = false,
                                 default = nil)
  if valid_607770 != nil:
    section.add "X-Amz-Date", valid_607770
  var valid_607771 = header.getOrDefault("X-Amz-Credential")
  valid_607771 = validateParameter(valid_607771, JString, required = false,
                                 default = nil)
  if valid_607771 != nil:
    section.add "X-Amz-Credential", valid_607771
  var valid_607772 = header.getOrDefault("X-Amz-Security-Token")
  valid_607772 = validateParameter(valid_607772, JString, required = false,
                                 default = nil)
  if valid_607772 != nil:
    section.add "X-Amz-Security-Token", valid_607772
  var valid_607773 = header.getOrDefault("X-Amz-Algorithm")
  valid_607773 = validateParameter(valid_607773, JString, required = false,
                                 default = nil)
  if valid_607773 != nil:
    section.add "X-Amz-Algorithm", valid_607773
  var valid_607774 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607774 = validateParameter(valid_607774, JString, required = false,
                                 default = nil)
  if valid_607774 != nil:
    section.add "X-Amz-SignedHeaders", valid_607774
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_607775 = formData.getOrDefault("GroupName")
  valid_607775 = validateParameter(valid_607775, JString, required = true,
                                 default = nil)
  if valid_607775 != nil:
    section.add "GroupName", valid_607775
  var valid_607776 = formData.getOrDefault("PolicyArn")
  valid_607776 = validateParameter(valid_607776, JString, required = true,
                                 default = nil)
  if valid_607776 != nil:
    section.add "PolicyArn", valid_607776
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607777: Call_PostDetachGroupPolicy_607763; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607777.validator(path, query, header, formData, body)
  let scheme = call_607777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607777.url(scheme.get, call_607777.host, call_607777.base,
                         call_607777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607777, url, valid)

proc call*(call_607778: Call_PostDetachGroupPolicy_607763; GroupName: string;
          PolicyArn: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607779 = newJObject()
  var formData_607780 = newJObject()
  add(formData_607780, "GroupName", newJString(GroupName))
  add(formData_607780, "PolicyArn", newJString(PolicyArn))
  add(query_607779, "Action", newJString(Action))
  add(query_607779, "Version", newJString(Version))
  result = call_607778.call(nil, query_607779, nil, formData_607780, nil)

var postDetachGroupPolicy* = Call_PostDetachGroupPolicy_607763(
    name: "postDetachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_PostDetachGroupPolicy_607764, base: "/",
    url: url_PostDetachGroupPolicy_607765, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachGroupPolicy_607746 = ref object of OpenApiRestCall_605589
proc url_GetDetachGroupPolicy_607748(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachGroupPolicy_607747(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_607749 = query.getOrDefault("GroupName")
  valid_607749 = validateParameter(valid_607749, JString, required = true,
                                 default = nil)
  if valid_607749 != nil:
    section.add "GroupName", valid_607749
  var valid_607750 = query.getOrDefault("PolicyArn")
  valid_607750 = validateParameter(valid_607750, JString, required = true,
                                 default = nil)
  if valid_607750 != nil:
    section.add "PolicyArn", valid_607750
  var valid_607751 = query.getOrDefault("Action")
  valid_607751 = validateParameter(valid_607751, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_607751 != nil:
    section.add "Action", valid_607751
  var valid_607752 = query.getOrDefault("Version")
  valid_607752 = validateParameter(valid_607752, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607752 != nil:
    section.add "Version", valid_607752
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607753 = header.getOrDefault("X-Amz-Signature")
  valid_607753 = validateParameter(valid_607753, JString, required = false,
                                 default = nil)
  if valid_607753 != nil:
    section.add "X-Amz-Signature", valid_607753
  var valid_607754 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607754 = validateParameter(valid_607754, JString, required = false,
                                 default = nil)
  if valid_607754 != nil:
    section.add "X-Amz-Content-Sha256", valid_607754
  var valid_607755 = header.getOrDefault("X-Amz-Date")
  valid_607755 = validateParameter(valid_607755, JString, required = false,
                                 default = nil)
  if valid_607755 != nil:
    section.add "X-Amz-Date", valid_607755
  var valid_607756 = header.getOrDefault("X-Amz-Credential")
  valid_607756 = validateParameter(valid_607756, JString, required = false,
                                 default = nil)
  if valid_607756 != nil:
    section.add "X-Amz-Credential", valid_607756
  var valid_607757 = header.getOrDefault("X-Amz-Security-Token")
  valid_607757 = validateParameter(valid_607757, JString, required = false,
                                 default = nil)
  if valid_607757 != nil:
    section.add "X-Amz-Security-Token", valid_607757
  var valid_607758 = header.getOrDefault("X-Amz-Algorithm")
  valid_607758 = validateParameter(valid_607758, JString, required = false,
                                 default = nil)
  if valid_607758 != nil:
    section.add "X-Amz-Algorithm", valid_607758
  var valid_607759 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607759 = validateParameter(valid_607759, JString, required = false,
                                 default = nil)
  if valid_607759 != nil:
    section.add "X-Amz-SignedHeaders", valid_607759
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607760: Call_GetDetachGroupPolicy_607746; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607760.validator(path, query, header, formData, body)
  let scheme = call_607760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607760.url(scheme.get, call_607760.host, call_607760.base,
                         call_607760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607760, url, valid)

proc call*(call_607761: Call_GetDetachGroupPolicy_607746; GroupName: string;
          PolicyArn: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607762 = newJObject()
  add(query_607762, "GroupName", newJString(GroupName))
  add(query_607762, "PolicyArn", newJString(PolicyArn))
  add(query_607762, "Action", newJString(Action))
  add(query_607762, "Version", newJString(Version))
  result = call_607761.call(nil, query_607762, nil, nil, nil)

var getDetachGroupPolicy* = Call_GetDetachGroupPolicy_607746(
    name: "getDetachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_GetDetachGroupPolicy_607747, base: "/",
    url: url_GetDetachGroupPolicy_607748, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachRolePolicy_607798 = ref object of OpenApiRestCall_605589
proc url_PostDetachRolePolicy_607800(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachRolePolicy_607799(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607801 = query.getOrDefault("Action")
  valid_607801 = validateParameter(valid_607801, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_607801 != nil:
    section.add "Action", valid_607801
  var valid_607802 = query.getOrDefault("Version")
  valid_607802 = validateParameter(valid_607802, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607802 != nil:
    section.add "Version", valid_607802
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607803 = header.getOrDefault("X-Amz-Signature")
  valid_607803 = validateParameter(valid_607803, JString, required = false,
                                 default = nil)
  if valid_607803 != nil:
    section.add "X-Amz-Signature", valid_607803
  var valid_607804 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607804 = validateParameter(valid_607804, JString, required = false,
                                 default = nil)
  if valid_607804 != nil:
    section.add "X-Amz-Content-Sha256", valid_607804
  var valid_607805 = header.getOrDefault("X-Amz-Date")
  valid_607805 = validateParameter(valid_607805, JString, required = false,
                                 default = nil)
  if valid_607805 != nil:
    section.add "X-Amz-Date", valid_607805
  var valid_607806 = header.getOrDefault("X-Amz-Credential")
  valid_607806 = validateParameter(valid_607806, JString, required = false,
                                 default = nil)
  if valid_607806 != nil:
    section.add "X-Amz-Credential", valid_607806
  var valid_607807 = header.getOrDefault("X-Amz-Security-Token")
  valid_607807 = validateParameter(valid_607807, JString, required = false,
                                 default = nil)
  if valid_607807 != nil:
    section.add "X-Amz-Security-Token", valid_607807
  var valid_607808 = header.getOrDefault("X-Amz-Algorithm")
  valid_607808 = validateParameter(valid_607808, JString, required = false,
                                 default = nil)
  if valid_607808 != nil:
    section.add "X-Amz-Algorithm", valid_607808
  var valid_607809 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607809 = validateParameter(valid_607809, JString, required = false,
                                 default = nil)
  if valid_607809 != nil:
    section.add "X-Amz-SignedHeaders", valid_607809
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_607810 = formData.getOrDefault("RoleName")
  valid_607810 = validateParameter(valid_607810, JString, required = true,
                                 default = nil)
  if valid_607810 != nil:
    section.add "RoleName", valid_607810
  var valid_607811 = formData.getOrDefault("PolicyArn")
  valid_607811 = validateParameter(valid_607811, JString, required = true,
                                 default = nil)
  if valid_607811 != nil:
    section.add "PolicyArn", valid_607811
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607812: Call_PostDetachRolePolicy_607798; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607812.validator(path, query, header, formData, body)
  let scheme = call_607812.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607812.url(scheme.get, call_607812.host, call_607812.base,
                         call_607812.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607812, url, valid)

proc call*(call_607813: Call_PostDetachRolePolicy_607798; RoleName: string;
          PolicyArn: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607814 = newJObject()
  var formData_607815 = newJObject()
  add(formData_607815, "RoleName", newJString(RoleName))
  add(formData_607815, "PolicyArn", newJString(PolicyArn))
  add(query_607814, "Action", newJString(Action))
  add(query_607814, "Version", newJString(Version))
  result = call_607813.call(nil, query_607814, nil, formData_607815, nil)

var postDetachRolePolicy* = Call_PostDetachRolePolicy_607798(
    name: "postDetachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_PostDetachRolePolicy_607799, base: "/",
    url: url_PostDetachRolePolicy_607800, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachRolePolicy_607781 = ref object of OpenApiRestCall_605589
proc url_GetDetachRolePolicy_607783(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachRolePolicy_607782(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_607784 = query.getOrDefault("PolicyArn")
  valid_607784 = validateParameter(valid_607784, JString, required = true,
                                 default = nil)
  if valid_607784 != nil:
    section.add "PolicyArn", valid_607784
  var valid_607785 = query.getOrDefault("RoleName")
  valid_607785 = validateParameter(valid_607785, JString, required = true,
                                 default = nil)
  if valid_607785 != nil:
    section.add "RoleName", valid_607785
  var valid_607786 = query.getOrDefault("Action")
  valid_607786 = validateParameter(valid_607786, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_607786 != nil:
    section.add "Action", valid_607786
  var valid_607787 = query.getOrDefault("Version")
  valid_607787 = validateParameter(valid_607787, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607787 != nil:
    section.add "Version", valid_607787
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607788 = header.getOrDefault("X-Amz-Signature")
  valid_607788 = validateParameter(valid_607788, JString, required = false,
                                 default = nil)
  if valid_607788 != nil:
    section.add "X-Amz-Signature", valid_607788
  var valid_607789 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607789 = validateParameter(valid_607789, JString, required = false,
                                 default = nil)
  if valid_607789 != nil:
    section.add "X-Amz-Content-Sha256", valid_607789
  var valid_607790 = header.getOrDefault("X-Amz-Date")
  valid_607790 = validateParameter(valid_607790, JString, required = false,
                                 default = nil)
  if valid_607790 != nil:
    section.add "X-Amz-Date", valid_607790
  var valid_607791 = header.getOrDefault("X-Amz-Credential")
  valid_607791 = validateParameter(valid_607791, JString, required = false,
                                 default = nil)
  if valid_607791 != nil:
    section.add "X-Amz-Credential", valid_607791
  var valid_607792 = header.getOrDefault("X-Amz-Security-Token")
  valid_607792 = validateParameter(valid_607792, JString, required = false,
                                 default = nil)
  if valid_607792 != nil:
    section.add "X-Amz-Security-Token", valid_607792
  var valid_607793 = header.getOrDefault("X-Amz-Algorithm")
  valid_607793 = validateParameter(valid_607793, JString, required = false,
                                 default = nil)
  if valid_607793 != nil:
    section.add "X-Amz-Algorithm", valid_607793
  var valid_607794 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607794 = validateParameter(valid_607794, JString, required = false,
                                 default = nil)
  if valid_607794 != nil:
    section.add "X-Amz-SignedHeaders", valid_607794
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607795: Call_GetDetachRolePolicy_607781; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607795.validator(path, query, header, formData, body)
  let scheme = call_607795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607795.url(scheme.get, call_607795.host, call_607795.base,
                         call_607795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607795, url, valid)

proc call*(call_607796: Call_GetDetachRolePolicy_607781; PolicyArn: string;
          RoleName: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607797 = newJObject()
  add(query_607797, "PolicyArn", newJString(PolicyArn))
  add(query_607797, "RoleName", newJString(RoleName))
  add(query_607797, "Action", newJString(Action))
  add(query_607797, "Version", newJString(Version))
  result = call_607796.call(nil, query_607797, nil, nil, nil)

var getDetachRolePolicy* = Call_GetDetachRolePolicy_607781(
    name: "getDetachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_GetDetachRolePolicy_607782, base: "/",
    url: url_GetDetachRolePolicy_607783, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachUserPolicy_607833 = ref object of OpenApiRestCall_605589
proc url_PostDetachUserPolicy_607835(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachUserPolicy_607834(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607836 = query.getOrDefault("Action")
  valid_607836 = validateParameter(valid_607836, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_607836 != nil:
    section.add "Action", valid_607836
  var valid_607837 = query.getOrDefault("Version")
  valid_607837 = validateParameter(valid_607837, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607837 != nil:
    section.add "Version", valid_607837
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607838 = header.getOrDefault("X-Amz-Signature")
  valid_607838 = validateParameter(valid_607838, JString, required = false,
                                 default = nil)
  if valid_607838 != nil:
    section.add "X-Amz-Signature", valid_607838
  var valid_607839 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607839 = validateParameter(valid_607839, JString, required = false,
                                 default = nil)
  if valid_607839 != nil:
    section.add "X-Amz-Content-Sha256", valid_607839
  var valid_607840 = header.getOrDefault("X-Amz-Date")
  valid_607840 = validateParameter(valid_607840, JString, required = false,
                                 default = nil)
  if valid_607840 != nil:
    section.add "X-Amz-Date", valid_607840
  var valid_607841 = header.getOrDefault("X-Amz-Credential")
  valid_607841 = validateParameter(valid_607841, JString, required = false,
                                 default = nil)
  if valid_607841 != nil:
    section.add "X-Amz-Credential", valid_607841
  var valid_607842 = header.getOrDefault("X-Amz-Security-Token")
  valid_607842 = validateParameter(valid_607842, JString, required = false,
                                 default = nil)
  if valid_607842 != nil:
    section.add "X-Amz-Security-Token", valid_607842
  var valid_607843 = header.getOrDefault("X-Amz-Algorithm")
  valid_607843 = validateParameter(valid_607843, JString, required = false,
                                 default = nil)
  if valid_607843 != nil:
    section.add "X-Amz-Algorithm", valid_607843
  var valid_607844 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607844 = validateParameter(valid_607844, JString, required = false,
                                 default = nil)
  if valid_607844 != nil:
    section.add "X-Amz-SignedHeaders", valid_607844
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_607845 = formData.getOrDefault("PolicyArn")
  valid_607845 = validateParameter(valid_607845, JString, required = true,
                                 default = nil)
  if valid_607845 != nil:
    section.add "PolicyArn", valid_607845
  var valid_607846 = formData.getOrDefault("UserName")
  valid_607846 = validateParameter(valid_607846, JString, required = true,
                                 default = nil)
  if valid_607846 != nil:
    section.add "UserName", valid_607846
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607847: Call_PostDetachUserPolicy_607833; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607847.validator(path, query, header, formData, body)
  let scheme = call_607847.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607847.url(scheme.get, call_607847.host, call_607847.base,
                         call_607847.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607847, url, valid)

proc call*(call_607848: Call_PostDetachUserPolicy_607833; PolicyArn: string;
          UserName: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607849 = newJObject()
  var formData_607850 = newJObject()
  add(formData_607850, "PolicyArn", newJString(PolicyArn))
  add(formData_607850, "UserName", newJString(UserName))
  add(query_607849, "Action", newJString(Action))
  add(query_607849, "Version", newJString(Version))
  result = call_607848.call(nil, query_607849, nil, formData_607850, nil)

var postDetachUserPolicy* = Call_PostDetachUserPolicy_607833(
    name: "postDetachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_PostDetachUserPolicy_607834, base: "/",
    url: url_PostDetachUserPolicy_607835, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachUserPolicy_607816 = ref object of OpenApiRestCall_605589
proc url_GetDetachUserPolicy_607818(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachUserPolicy_607817(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_607819 = query.getOrDefault("UserName")
  valid_607819 = validateParameter(valid_607819, JString, required = true,
                                 default = nil)
  if valid_607819 != nil:
    section.add "UserName", valid_607819
  var valid_607820 = query.getOrDefault("PolicyArn")
  valid_607820 = validateParameter(valid_607820, JString, required = true,
                                 default = nil)
  if valid_607820 != nil:
    section.add "PolicyArn", valid_607820
  var valid_607821 = query.getOrDefault("Action")
  valid_607821 = validateParameter(valid_607821, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_607821 != nil:
    section.add "Action", valid_607821
  var valid_607822 = query.getOrDefault("Version")
  valid_607822 = validateParameter(valid_607822, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607822 != nil:
    section.add "Version", valid_607822
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607823 = header.getOrDefault("X-Amz-Signature")
  valid_607823 = validateParameter(valid_607823, JString, required = false,
                                 default = nil)
  if valid_607823 != nil:
    section.add "X-Amz-Signature", valid_607823
  var valid_607824 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607824 = validateParameter(valid_607824, JString, required = false,
                                 default = nil)
  if valid_607824 != nil:
    section.add "X-Amz-Content-Sha256", valid_607824
  var valid_607825 = header.getOrDefault("X-Amz-Date")
  valid_607825 = validateParameter(valid_607825, JString, required = false,
                                 default = nil)
  if valid_607825 != nil:
    section.add "X-Amz-Date", valid_607825
  var valid_607826 = header.getOrDefault("X-Amz-Credential")
  valid_607826 = validateParameter(valid_607826, JString, required = false,
                                 default = nil)
  if valid_607826 != nil:
    section.add "X-Amz-Credential", valid_607826
  var valid_607827 = header.getOrDefault("X-Amz-Security-Token")
  valid_607827 = validateParameter(valid_607827, JString, required = false,
                                 default = nil)
  if valid_607827 != nil:
    section.add "X-Amz-Security-Token", valid_607827
  var valid_607828 = header.getOrDefault("X-Amz-Algorithm")
  valid_607828 = validateParameter(valid_607828, JString, required = false,
                                 default = nil)
  if valid_607828 != nil:
    section.add "X-Amz-Algorithm", valid_607828
  var valid_607829 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607829 = validateParameter(valid_607829, JString, required = false,
                                 default = nil)
  if valid_607829 != nil:
    section.add "X-Amz-SignedHeaders", valid_607829
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607830: Call_GetDetachUserPolicy_607816; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607830.validator(path, query, header, formData, body)
  let scheme = call_607830.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607830.url(scheme.get, call_607830.host, call_607830.base,
                         call_607830.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607830, url, valid)

proc call*(call_607831: Call_GetDetachUserPolicy_607816; UserName: string;
          PolicyArn: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607832 = newJObject()
  add(query_607832, "UserName", newJString(UserName))
  add(query_607832, "PolicyArn", newJString(PolicyArn))
  add(query_607832, "Action", newJString(Action))
  add(query_607832, "Version", newJString(Version))
  result = call_607831.call(nil, query_607832, nil, nil, nil)

var getDetachUserPolicy* = Call_GetDetachUserPolicy_607816(
    name: "getDetachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_GetDetachUserPolicy_607817, base: "/",
    url: url_GetDetachUserPolicy_607818, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMFADevice_607870 = ref object of OpenApiRestCall_605589
proc url_PostEnableMFADevice_607872(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnableMFADevice_607871(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607873 = query.getOrDefault("Action")
  valid_607873 = validateParameter(valid_607873, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_607873 != nil:
    section.add "Action", valid_607873
  var valid_607874 = query.getOrDefault("Version")
  valid_607874 = validateParameter(valid_607874, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607874 != nil:
    section.add "Version", valid_607874
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607875 = header.getOrDefault("X-Amz-Signature")
  valid_607875 = validateParameter(valid_607875, JString, required = false,
                                 default = nil)
  if valid_607875 != nil:
    section.add "X-Amz-Signature", valid_607875
  var valid_607876 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607876 = validateParameter(valid_607876, JString, required = false,
                                 default = nil)
  if valid_607876 != nil:
    section.add "X-Amz-Content-Sha256", valid_607876
  var valid_607877 = header.getOrDefault("X-Amz-Date")
  valid_607877 = validateParameter(valid_607877, JString, required = false,
                                 default = nil)
  if valid_607877 != nil:
    section.add "X-Amz-Date", valid_607877
  var valid_607878 = header.getOrDefault("X-Amz-Credential")
  valid_607878 = validateParameter(valid_607878, JString, required = false,
                                 default = nil)
  if valid_607878 != nil:
    section.add "X-Amz-Credential", valid_607878
  var valid_607879 = header.getOrDefault("X-Amz-Security-Token")
  valid_607879 = validateParameter(valid_607879, JString, required = false,
                                 default = nil)
  if valid_607879 != nil:
    section.add "X-Amz-Security-Token", valid_607879
  var valid_607880 = header.getOrDefault("X-Amz-Algorithm")
  valid_607880 = validateParameter(valid_607880, JString, required = false,
                                 default = nil)
  if valid_607880 != nil:
    section.add "X-Amz-Algorithm", valid_607880
  var valid_607881 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607881 = validateParameter(valid_607881, JString, required = false,
                                 default = nil)
  if valid_607881 != nil:
    section.add "X-Amz-SignedHeaders", valid_607881
  result.add "header", section
  ## parameters in `formData` object:
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AuthenticationCode2` field"
  var valid_607882 = formData.getOrDefault("AuthenticationCode2")
  valid_607882 = validateParameter(valid_607882, JString, required = true,
                                 default = nil)
  if valid_607882 != nil:
    section.add "AuthenticationCode2", valid_607882
  var valid_607883 = formData.getOrDefault("SerialNumber")
  valid_607883 = validateParameter(valid_607883, JString, required = true,
                                 default = nil)
  if valid_607883 != nil:
    section.add "SerialNumber", valid_607883
  var valid_607884 = formData.getOrDefault("UserName")
  valid_607884 = validateParameter(valid_607884, JString, required = true,
                                 default = nil)
  if valid_607884 != nil:
    section.add "UserName", valid_607884
  var valid_607885 = formData.getOrDefault("AuthenticationCode1")
  valid_607885 = validateParameter(valid_607885, JString, required = true,
                                 default = nil)
  if valid_607885 != nil:
    section.add "AuthenticationCode1", valid_607885
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607886: Call_PostEnableMFADevice_607870; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_607886.validator(path, query, header, formData, body)
  let scheme = call_607886.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607886.url(scheme.get, call_607886.host, call_607886.base,
                         call_607886.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607886, url, valid)

proc call*(call_607887: Call_PostEnableMFADevice_607870;
          AuthenticationCode2: string; SerialNumber: string; UserName: string;
          AuthenticationCode1: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   Version: string (required)
  var query_607888 = newJObject()
  var formData_607889 = newJObject()
  add(formData_607889, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(formData_607889, "SerialNumber", newJString(SerialNumber))
  add(formData_607889, "UserName", newJString(UserName))
  add(query_607888, "Action", newJString(Action))
  add(formData_607889, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_607888, "Version", newJString(Version))
  result = call_607887.call(nil, query_607888, nil, formData_607889, nil)

var postEnableMFADevice* = Call_PostEnableMFADevice_607870(
    name: "postEnableMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=EnableMFADevice",
    validator: validate_PostEnableMFADevice_607871, base: "/",
    url: url_PostEnableMFADevice_607872, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMFADevice_607851 = ref object of OpenApiRestCall_605589
proc url_GetEnableMFADevice_607853(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnableMFADevice_607852(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_607854 = query.getOrDefault("UserName")
  valid_607854 = validateParameter(valid_607854, JString, required = true,
                                 default = nil)
  if valid_607854 != nil:
    section.add "UserName", valid_607854
  var valid_607855 = query.getOrDefault("AuthenticationCode1")
  valid_607855 = validateParameter(valid_607855, JString, required = true,
                                 default = nil)
  if valid_607855 != nil:
    section.add "AuthenticationCode1", valid_607855
  var valid_607856 = query.getOrDefault("AuthenticationCode2")
  valid_607856 = validateParameter(valid_607856, JString, required = true,
                                 default = nil)
  if valid_607856 != nil:
    section.add "AuthenticationCode2", valid_607856
  var valid_607857 = query.getOrDefault("SerialNumber")
  valid_607857 = validateParameter(valid_607857, JString, required = true,
                                 default = nil)
  if valid_607857 != nil:
    section.add "SerialNumber", valid_607857
  var valid_607858 = query.getOrDefault("Action")
  valid_607858 = validateParameter(valid_607858, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_607858 != nil:
    section.add "Action", valid_607858
  var valid_607859 = query.getOrDefault("Version")
  valid_607859 = validateParameter(valid_607859, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607859 != nil:
    section.add "Version", valid_607859
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607860 = header.getOrDefault("X-Amz-Signature")
  valid_607860 = validateParameter(valid_607860, JString, required = false,
                                 default = nil)
  if valid_607860 != nil:
    section.add "X-Amz-Signature", valid_607860
  var valid_607861 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607861 = validateParameter(valid_607861, JString, required = false,
                                 default = nil)
  if valid_607861 != nil:
    section.add "X-Amz-Content-Sha256", valid_607861
  var valid_607862 = header.getOrDefault("X-Amz-Date")
  valid_607862 = validateParameter(valid_607862, JString, required = false,
                                 default = nil)
  if valid_607862 != nil:
    section.add "X-Amz-Date", valid_607862
  var valid_607863 = header.getOrDefault("X-Amz-Credential")
  valid_607863 = validateParameter(valid_607863, JString, required = false,
                                 default = nil)
  if valid_607863 != nil:
    section.add "X-Amz-Credential", valid_607863
  var valid_607864 = header.getOrDefault("X-Amz-Security-Token")
  valid_607864 = validateParameter(valid_607864, JString, required = false,
                                 default = nil)
  if valid_607864 != nil:
    section.add "X-Amz-Security-Token", valid_607864
  var valid_607865 = header.getOrDefault("X-Amz-Algorithm")
  valid_607865 = validateParameter(valid_607865, JString, required = false,
                                 default = nil)
  if valid_607865 != nil:
    section.add "X-Amz-Algorithm", valid_607865
  var valid_607866 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607866 = validateParameter(valid_607866, JString, required = false,
                                 default = nil)
  if valid_607866 != nil:
    section.add "X-Amz-SignedHeaders", valid_607866
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607867: Call_GetEnableMFADevice_607851; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_607867.validator(path, query, header, formData, body)
  let scheme = call_607867.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607867.url(scheme.get, call_607867.host, call_607867.base,
                         call_607867.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607867, url, valid)

proc call*(call_607868: Call_GetEnableMFADevice_607851; UserName: string;
          AuthenticationCode1: string; AuthenticationCode2: string;
          SerialNumber: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607869 = newJObject()
  add(query_607869, "UserName", newJString(UserName))
  add(query_607869, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_607869, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_607869, "SerialNumber", newJString(SerialNumber))
  add(query_607869, "Action", newJString(Action))
  add(query_607869, "Version", newJString(Version))
  result = call_607868.call(nil, query_607869, nil, nil, nil)

var getEnableMFADevice* = Call_GetEnableMFADevice_607851(
    name: "getEnableMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=EnableMFADevice", validator: validate_GetEnableMFADevice_607852,
    base: "/", url: url_GetEnableMFADevice_607853,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateCredentialReport_607905 = ref object of OpenApiRestCall_605589
proc url_PostGenerateCredentialReport_607907(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateCredentialReport_607906(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607908 = query.getOrDefault("Action")
  valid_607908 = validateParameter(valid_607908, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_607908 != nil:
    section.add "Action", valid_607908
  var valid_607909 = query.getOrDefault("Version")
  valid_607909 = validateParameter(valid_607909, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607909 != nil:
    section.add "Version", valid_607909
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607910 = header.getOrDefault("X-Amz-Signature")
  valid_607910 = validateParameter(valid_607910, JString, required = false,
                                 default = nil)
  if valid_607910 != nil:
    section.add "X-Amz-Signature", valid_607910
  var valid_607911 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607911 = validateParameter(valid_607911, JString, required = false,
                                 default = nil)
  if valid_607911 != nil:
    section.add "X-Amz-Content-Sha256", valid_607911
  var valid_607912 = header.getOrDefault("X-Amz-Date")
  valid_607912 = validateParameter(valid_607912, JString, required = false,
                                 default = nil)
  if valid_607912 != nil:
    section.add "X-Amz-Date", valid_607912
  var valid_607913 = header.getOrDefault("X-Amz-Credential")
  valid_607913 = validateParameter(valid_607913, JString, required = false,
                                 default = nil)
  if valid_607913 != nil:
    section.add "X-Amz-Credential", valid_607913
  var valid_607914 = header.getOrDefault("X-Amz-Security-Token")
  valid_607914 = validateParameter(valid_607914, JString, required = false,
                                 default = nil)
  if valid_607914 != nil:
    section.add "X-Amz-Security-Token", valid_607914
  var valid_607915 = header.getOrDefault("X-Amz-Algorithm")
  valid_607915 = validateParameter(valid_607915, JString, required = false,
                                 default = nil)
  if valid_607915 != nil:
    section.add "X-Amz-Algorithm", valid_607915
  var valid_607916 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607916 = validateParameter(valid_607916, JString, required = false,
                                 default = nil)
  if valid_607916 != nil:
    section.add "X-Amz-SignedHeaders", valid_607916
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607917: Call_PostGenerateCredentialReport_607905; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_607917.validator(path, query, header, formData, body)
  let scheme = call_607917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607917.url(scheme.get, call_607917.host, call_607917.base,
                         call_607917.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607917, url, valid)

proc call*(call_607918: Call_PostGenerateCredentialReport_607905;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607919 = newJObject()
  add(query_607919, "Action", newJString(Action))
  add(query_607919, "Version", newJString(Version))
  result = call_607918.call(nil, query_607919, nil, nil, nil)

var postGenerateCredentialReport* = Call_PostGenerateCredentialReport_607905(
    name: "postGenerateCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_PostGenerateCredentialReport_607906, base: "/",
    url: url_PostGenerateCredentialReport_607907,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateCredentialReport_607890 = ref object of OpenApiRestCall_605589
proc url_GetGenerateCredentialReport_607892(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateCredentialReport_607891(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607893 = query.getOrDefault("Action")
  valid_607893 = validateParameter(valid_607893, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_607893 != nil:
    section.add "Action", valid_607893
  var valid_607894 = query.getOrDefault("Version")
  valid_607894 = validateParameter(valid_607894, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607894 != nil:
    section.add "Version", valid_607894
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607895 = header.getOrDefault("X-Amz-Signature")
  valid_607895 = validateParameter(valid_607895, JString, required = false,
                                 default = nil)
  if valid_607895 != nil:
    section.add "X-Amz-Signature", valid_607895
  var valid_607896 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607896 = validateParameter(valid_607896, JString, required = false,
                                 default = nil)
  if valid_607896 != nil:
    section.add "X-Amz-Content-Sha256", valid_607896
  var valid_607897 = header.getOrDefault("X-Amz-Date")
  valid_607897 = validateParameter(valid_607897, JString, required = false,
                                 default = nil)
  if valid_607897 != nil:
    section.add "X-Amz-Date", valid_607897
  var valid_607898 = header.getOrDefault("X-Amz-Credential")
  valid_607898 = validateParameter(valid_607898, JString, required = false,
                                 default = nil)
  if valid_607898 != nil:
    section.add "X-Amz-Credential", valid_607898
  var valid_607899 = header.getOrDefault("X-Amz-Security-Token")
  valid_607899 = validateParameter(valid_607899, JString, required = false,
                                 default = nil)
  if valid_607899 != nil:
    section.add "X-Amz-Security-Token", valid_607899
  var valid_607900 = header.getOrDefault("X-Amz-Algorithm")
  valid_607900 = validateParameter(valid_607900, JString, required = false,
                                 default = nil)
  if valid_607900 != nil:
    section.add "X-Amz-Algorithm", valid_607900
  var valid_607901 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607901 = validateParameter(valid_607901, JString, required = false,
                                 default = nil)
  if valid_607901 != nil:
    section.add "X-Amz-SignedHeaders", valid_607901
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607902: Call_GetGenerateCredentialReport_607890; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_607902.validator(path, query, header, formData, body)
  let scheme = call_607902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607902.url(scheme.get, call_607902.host, call_607902.base,
                         call_607902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607902, url, valid)

proc call*(call_607903: Call_GetGenerateCredentialReport_607890;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607904 = newJObject()
  add(query_607904, "Action", newJString(Action))
  add(query_607904, "Version", newJString(Version))
  result = call_607903.call(nil, query_607904, nil, nil, nil)

var getGenerateCredentialReport* = Call_GetGenerateCredentialReport_607890(
    name: "getGenerateCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_GetGenerateCredentialReport_607891, base: "/",
    url: url_GetGenerateCredentialReport_607892,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateOrganizationsAccessReport_607937 = ref object of OpenApiRestCall_605589
proc url_PostGenerateOrganizationsAccessReport_607939(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateOrganizationsAccessReport_607938(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607940 = query.getOrDefault("Action")
  valid_607940 = validateParameter(valid_607940, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_607940 != nil:
    section.add "Action", valid_607940
  var valid_607941 = query.getOrDefault("Version")
  valid_607941 = validateParameter(valid_607941, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607941 != nil:
    section.add "Version", valid_607941
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607942 = header.getOrDefault("X-Amz-Signature")
  valid_607942 = validateParameter(valid_607942, JString, required = false,
                                 default = nil)
  if valid_607942 != nil:
    section.add "X-Amz-Signature", valid_607942
  var valid_607943 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607943 = validateParameter(valid_607943, JString, required = false,
                                 default = nil)
  if valid_607943 != nil:
    section.add "X-Amz-Content-Sha256", valid_607943
  var valid_607944 = header.getOrDefault("X-Amz-Date")
  valid_607944 = validateParameter(valid_607944, JString, required = false,
                                 default = nil)
  if valid_607944 != nil:
    section.add "X-Amz-Date", valid_607944
  var valid_607945 = header.getOrDefault("X-Amz-Credential")
  valid_607945 = validateParameter(valid_607945, JString, required = false,
                                 default = nil)
  if valid_607945 != nil:
    section.add "X-Amz-Credential", valid_607945
  var valid_607946 = header.getOrDefault("X-Amz-Security-Token")
  valid_607946 = validateParameter(valid_607946, JString, required = false,
                                 default = nil)
  if valid_607946 != nil:
    section.add "X-Amz-Security-Token", valid_607946
  var valid_607947 = header.getOrDefault("X-Amz-Algorithm")
  valid_607947 = validateParameter(valid_607947, JString, required = false,
                                 default = nil)
  if valid_607947 != nil:
    section.add "X-Amz-Algorithm", valid_607947
  var valid_607948 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607948 = validateParameter(valid_607948, JString, required = false,
                                 default = nil)
  if valid_607948 != nil:
    section.add "X-Amz-SignedHeaders", valid_607948
  result.add "header", section
  ## parameters in `formData` object:
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  section = newJObject()
  var valid_607949 = formData.getOrDefault("OrganizationsPolicyId")
  valid_607949 = validateParameter(valid_607949, JString, required = false,
                                 default = nil)
  if valid_607949 != nil:
    section.add "OrganizationsPolicyId", valid_607949
  assert formData != nil,
        "formData argument is necessary due to required `EntityPath` field"
  var valid_607950 = formData.getOrDefault("EntityPath")
  valid_607950 = validateParameter(valid_607950, JString, required = true,
                                 default = nil)
  if valid_607950 != nil:
    section.add "EntityPath", valid_607950
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607951: Call_PostGenerateOrganizationsAccessReport_607937;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607951.validator(path, query, header, formData, body)
  let scheme = call_607951.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607951.url(scheme.get, call_607951.host, call_607951.base,
                         call_607951.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607951, url, valid)

proc call*(call_607952: Call_PostGenerateOrganizationsAccessReport_607937;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  var query_607953 = newJObject()
  var formData_607954 = newJObject()
  add(formData_607954, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_607953, "Action", newJString(Action))
  add(query_607953, "Version", newJString(Version))
  add(formData_607954, "EntityPath", newJString(EntityPath))
  result = call_607952.call(nil, query_607953, nil, formData_607954, nil)

var postGenerateOrganizationsAccessReport* = Call_PostGenerateOrganizationsAccessReport_607937(
    name: "postGenerateOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_PostGenerateOrganizationsAccessReport_607938, base: "/",
    url: url_PostGenerateOrganizationsAccessReport_607939,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateOrganizationsAccessReport_607920 = ref object of OpenApiRestCall_605589
proc url_GetGenerateOrganizationsAccessReport_607922(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateOrganizationsAccessReport_607921(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EntityPath` field"
  var valid_607923 = query.getOrDefault("EntityPath")
  valid_607923 = validateParameter(valid_607923, JString, required = true,
                                 default = nil)
  if valid_607923 != nil:
    section.add "EntityPath", valid_607923
  var valid_607924 = query.getOrDefault("OrganizationsPolicyId")
  valid_607924 = validateParameter(valid_607924, JString, required = false,
                                 default = nil)
  if valid_607924 != nil:
    section.add "OrganizationsPolicyId", valid_607924
  var valid_607925 = query.getOrDefault("Action")
  valid_607925 = validateParameter(valid_607925, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_607925 != nil:
    section.add "Action", valid_607925
  var valid_607926 = query.getOrDefault("Version")
  valid_607926 = validateParameter(valid_607926, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607926 != nil:
    section.add "Version", valid_607926
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607927 = header.getOrDefault("X-Amz-Signature")
  valid_607927 = validateParameter(valid_607927, JString, required = false,
                                 default = nil)
  if valid_607927 != nil:
    section.add "X-Amz-Signature", valid_607927
  var valid_607928 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607928 = validateParameter(valid_607928, JString, required = false,
                                 default = nil)
  if valid_607928 != nil:
    section.add "X-Amz-Content-Sha256", valid_607928
  var valid_607929 = header.getOrDefault("X-Amz-Date")
  valid_607929 = validateParameter(valid_607929, JString, required = false,
                                 default = nil)
  if valid_607929 != nil:
    section.add "X-Amz-Date", valid_607929
  var valid_607930 = header.getOrDefault("X-Amz-Credential")
  valid_607930 = validateParameter(valid_607930, JString, required = false,
                                 default = nil)
  if valid_607930 != nil:
    section.add "X-Amz-Credential", valid_607930
  var valid_607931 = header.getOrDefault("X-Amz-Security-Token")
  valid_607931 = validateParameter(valid_607931, JString, required = false,
                                 default = nil)
  if valid_607931 != nil:
    section.add "X-Amz-Security-Token", valid_607931
  var valid_607932 = header.getOrDefault("X-Amz-Algorithm")
  valid_607932 = validateParameter(valid_607932, JString, required = false,
                                 default = nil)
  if valid_607932 != nil:
    section.add "X-Amz-Algorithm", valid_607932
  var valid_607933 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607933 = validateParameter(valid_607933, JString, required = false,
                                 default = nil)
  if valid_607933 != nil:
    section.add "X-Amz-SignedHeaders", valid_607933
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607934: Call_GetGenerateOrganizationsAccessReport_607920;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607934.validator(path, query, header, formData, body)
  let scheme = call_607934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607934.url(scheme.get, call_607934.host, call_607934.base,
                         call_607934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607934, url, valid)

proc call*(call_607935: Call_GetGenerateOrganizationsAccessReport_607920;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607936 = newJObject()
  add(query_607936, "EntityPath", newJString(EntityPath))
  add(query_607936, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_607936, "Action", newJString(Action))
  add(query_607936, "Version", newJString(Version))
  result = call_607935.call(nil, query_607936, nil, nil, nil)

var getGenerateOrganizationsAccessReport* = Call_GetGenerateOrganizationsAccessReport_607920(
    name: "getGenerateOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_GetGenerateOrganizationsAccessReport_607921, base: "/",
    url: url_GetGenerateOrganizationsAccessReport_607922,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateServiceLastAccessedDetails_607971 = ref object of OpenApiRestCall_605589
proc url_PostGenerateServiceLastAccessedDetails_607973(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateServiceLastAccessedDetails_607972(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607974 = query.getOrDefault("Action")
  valid_607974 = validateParameter(valid_607974, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_607974 != nil:
    section.add "Action", valid_607974
  var valid_607975 = query.getOrDefault("Version")
  valid_607975 = validateParameter(valid_607975, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607975 != nil:
    section.add "Version", valid_607975
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607976 = header.getOrDefault("X-Amz-Signature")
  valid_607976 = validateParameter(valid_607976, JString, required = false,
                                 default = nil)
  if valid_607976 != nil:
    section.add "X-Amz-Signature", valid_607976
  var valid_607977 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607977 = validateParameter(valid_607977, JString, required = false,
                                 default = nil)
  if valid_607977 != nil:
    section.add "X-Amz-Content-Sha256", valid_607977
  var valid_607978 = header.getOrDefault("X-Amz-Date")
  valid_607978 = validateParameter(valid_607978, JString, required = false,
                                 default = nil)
  if valid_607978 != nil:
    section.add "X-Amz-Date", valid_607978
  var valid_607979 = header.getOrDefault("X-Amz-Credential")
  valid_607979 = validateParameter(valid_607979, JString, required = false,
                                 default = nil)
  if valid_607979 != nil:
    section.add "X-Amz-Credential", valid_607979
  var valid_607980 = header.getOrDefault("X-Amz-Security-Token")
  valid_607980 = validateParameter(valid_607980, JString, required = false,
                                 default = nil)
  if valid_607980 != nil:
    section.add "X-Amz-Security-Token", valid_607980
  var valid_607981 = header.getOrDefault("X-Amz-Algorithm")
  valid_607981 = validateParameter(valid_607981, JString, required = false,
                                 default = nil)
  if valid_607981 != nil:
    section.add "X-Amz-Algorithm", valid_607981
  var valid_607982 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607982 = validateParameter(valid_607982, JString, required = false,
                                 default = nil)
  if valid_607982 != nil:
    section.add "X-Amz-SignedHeaders", valid_607982
  result.add "header", section
  ## parameters in `formData` object:
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Arn` field"
  var valid_607983 = formData.getOrDefault("Arn")
  valid_607983 = validateParameter(valid_607983, JString, required = true,
                                 default = nil)
  if valid_607983 != nil:
    section.add "Arn", valid_607983
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607984: Call_PostGenerateServiceLastAccessedDetails_607971;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607984.validator(path, query, header, formData, body)
  let scheme = call_607984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607984.url(scheme.get, call_607984.host, call_607984.base,
                         call_607984.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607984, url, valid)

proc call*(call_607985: Call_PostGenerateServiceLastAccessedDetails_607971;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607986 = newJObject()
  var formData_607987 = newJObject()
  add(formData_607987, "Arn", newJString(Arn))
  add(query_607986, "Action", newJString(Action))
  add(query_607986, "Version", newJString(Version))
  result = call_607985.call(nil, query_607986, nil, formData_607987, nil)

var postGenerateServiceLastAccessedDetails* = Call_PostGenerateServiceLastAccessedDetails_607971(
    name: "postGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_PostGenerateServiceLastAccessedDetails_607972, base: "/",
    url: url_PostGenerateServiceLastAccessedDetails_607973,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateServiceLastAccessedDetails_607955 = ref object of OpenApiRestCall_605589
proc url_GetGenerateServiceLastAccessedDetails_607957(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateServiceLastAccessedDetails_607956(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607958 = query.getOrDefault("Action")
  valid_607958 = validateParameter(valid_607958, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_607958 != nil:
    section.add "Action", valid_607958
  var valid_607959 = query.getOrDefault("Version")
  valid_607959 = validateParameter(valid_607959, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607959 != nil:
    section.add "Version", valid_607959
  var valid_607960 = query.getOrDefault("Arn")
  valid_607960 = validateParameter(valid_607960, JString, required = true,
                                 default = nil)
  if valid_607960 != nil:
    section.add "Arn", valid_607960
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607961 = header.getOrDefault("X-Amz-Signature")
  valid_607961 = validateParameter(valid_607961, JString, required = false,
                                 default = nil)
  if valid_607961 != nil:
    section.add "X-Amz-Signature", valid_607961
  var valid_607962 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607962 = validateParameter(valid_607962, JString, required = false,
                                 default = nil)
  if valid_607962 != nil:
    section.add "X-Amz-Content-Sha256", valid_607962
  var valid_607963 = header.getOrDefault("X-Amz-Date")
  valid_607963 = validateParameter(valid_607963, JString, required = false,
                                 default = nil)
  if valid_607963 != nil:
    section.add "X-Amz-Date", valid_607963
  var valid_607964 = header.getOrDefault("X-Amz-Credential")
  valid_607964 = validateParameter(valid_607964, JString, required = false,
                                 default = nil)
  if valid_607964 != nil:
    section.add "X-Amz-Credential", valid_607964
  var valid_607965 = header.getOrDefault("X-Amz-Security-Token")
  valid_607965 = validateParameter(valid_607965, JString, required = false,
                                 default = nil)
  if valid_607965 != nil:
    section.add "X-Amz-Security-Token", valid_607965
  var valid_607966 = header.getOrDefault("X-Amz-Algorithm")
  valid_607966 = validateParameter(valid_607966, JString, required = false,
                                 default = nil)
  if valid_607966 != nil:
    section.add "X-Amz-Algorithm", valid_607966
  var valid_607967 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607967 = validateParameter(valid_607967, JString, required = false,
                                 default = nil)
  if valid_607967 != nil:
    section.add "X-Amz-SignedHeaders", valid_607967
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607968: Call_GetGenerateServiceLastAccessedDetails_607955;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607968.validator(path, query, header, formData, body)
  let scheme = call_607968.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607968.url(scheme.get, call_607968.host, call_607968.base,
                         call_607968.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607968, url, valid)

proc call*(call_607969: Call_GetGenerateServiceLastAccessedDetails_607955;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_607970 = newJObject()
  add(query_607970, "Action", newJString(Action))
  add(query_607970, "Version", newJString(Version))
  add(query_607970, "Arn", newJString(Arn))
  result = call_607969.call(nil, query_607970, nil, nil, nil)

var getGenerateServiceLastAccessedDetails* = Call_GetGenerateServiceLastAccessedDetails_607955(
    name: "getGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_GetGenerateServiceLastAccessedDetails_607956, base: "/",
    url: url_GetGenerateServiceLastAccessedDetails_607957,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccessKeyLastUsed_608004 = ref object of OpenApiRestCall_605589
proc url_PostGetAccessKeyLastUsed_608006(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccessKeyLastUsed_608005(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608007 = query.getOrDefault("Action")
  valid_608007 = validateParameter(valid_608007, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_608007 != nil:
    section.add "Action", valid_608007
  var valid_608008 = query.getOrDefault("Version")
  valid_608008 = validateParameter(valid_608008, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608008 != nil:
    section.add "Version", valid_608008
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608009 = header.getOrDefault("X-Amz-Signature")
  valid_608009 = validateParameter(valid_608009, JString, required = false,
                                 default = nil)
  if valid_608009 != nil:
    section.add "X-Amz-Signature", valid_608009
  var valid_608010 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608010 = validateParameter(valid_608010, JString, required = false,
                                 default = nil)
  if valid_608010 != nil:
    section.add "X-Amz-Content-Sha256", valid_608010
  var valid_608011 = header.getOrDefault("X-Amz-Date")
  valid_608011 = validateParameter(valid_608011, JString, required = false,
                                 default = nil)
  if valid_608011 != nil:
    section.add "X-Amz-Date", valid_608011
  var valid_608012 = header.getOrDefault("X-Amz-Credential")
  valid_608012 = validateParameter(valid_608012, JString, required = false,
                                 default = nil)
  if valid_608012 != nil:
    section.add "X-Amz-Credential", valid_608012
  var valid_608013 = header.getOrDefault("X-Amz-Security-Token")
  valid_608013 = validateParameter(valid_608013, JString, required = false,
                                 default = nil)
  if valid_608013 != nil:
    section.add "X-Amz-Security-Token", valid_608013
  var valid_608014 = header.getOrDefault("X-Amz-Algorithm")
  valid_608014 = validateParameter(valid_608014, JString, required = false,
                                 default = nil)
  if valid_608014 != nil:
    section.add "X-Amz-Algorithm", valid_608014
  var valid_608015 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608015 = validateParameter(valid_608015, JString, required = false,
                                 default = nil)
  if valid_608015 != nil:
    section.add "X-Amz-SignedHeaders", valid_608015
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_608016 = formData.getOrDefault("AccessKeyId")
  valid_608016 = validateParameter(valid_608016, JString, required = true,
                                 default = nil)
  if valid_608016 != nil:
    section.add "AccessKeyId", valid_608016
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608017: Call_PostGetAccessKeyLastUsed_608004; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_608017.validator(path, query, header, formData, body)
  let scheme = call_608017.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608017.url(scheme.get, call_608017.host, call_608017.base,
                         call_608017.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608017, url, valid)

proc call*(call_608018: Call_PostGetAccessKeyLastUsed_608004; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608019 = newJObject()
  var formData_608020 = newJObject()
  add(formData_608020, "AccessKeyId", newJString(AccessKeyId))
  add(query_608019, "Action", newJString(Action))
  add(query_608019, "Version", newJString(Version))
  result = call_608018.call(nil, query_608019, nil, formData_608020, nil)

var postGetAccessKeyLastUsed* = Call_PostGetAccessKeyLastUsed_608004(
    name: "postGetAccessKeyLastUsed", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_PostGetAccessKeyLastUsed_608005, base: "/",
    url: url_PostGetAccessKeyLastUsed_608006, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccessKeyLastUsed_607988 = ref object of OpenApiRestCall_605589
proc url_GetGetAccessKeyLastUsed_607990(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccessKeyLastUsed_607989(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607991 = query.getOrDefault("Action")
  valid_607991 = validateParameter(valid_607991, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_607991 != nil:
    section.add "Action", valid_607991
  var valid_607992 = query.getOrDefault("AccessKeyId")
  valid_607992 = validateParameter(valid_607992, JString, required = true,
                                 default = nil)
  if valid_607992 != nil:
    section.add "AccessKeyId", valid_607992
  var valid_607993 = query.getOrDefault("Version")
  valid_607993 = validateParameter(valid_607993, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607993 != nil:
    section.add "Version", valid_607993
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607994 = header.getOrDefault("X-Amz-Signature")
  valid_607994 = validateParameter(valid_607994, JString, required = false,
                                 default = nil)
  if valid_607994 != nil:
    section.add "X-Amz-Signature", valid_607994
  var valid_607995 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607995 = validateParameter(valid_607995, JString, required = false,
                                 default = nil)
  if valid_607995 != nil:
    section.add "X-Amz-Content-Sha256", valid_607995
  var valid_607996 = header.getOrDefault("X-Amz-Date")
  valid_607996 = validateParameter(valid_607996, JString, required = false,
                                 default = nil)
  if valid_607996 != nil:
    section.add "X-Amz-Date", valid_607996
  var valid_607997 = header.getOrDefault("X-Amz-Credential")
  valid_607997 = validateParameter(valid_607997, JString, required = false,
                                 default = nil)
  if valid_607997 != nil:
    section.add "X-Amz-Credential", valid_607997
  var valid_607998 = header.getOrDefault("X-Amz-Security-Token")
  valid_607998 = validateParameter(valid_607998, JString, required = false,
                                 default = nil)
  if valid_607998 != nil:
    section.add "X-Amz-Security-Token", valid_607998
  var valid_607999 = header.getOrDefault("X-Amz-Algorithm")
  valid_607999 = validateParameter(valid_607999, JString, required = false,
                                 default = nil)
  if valid_607999 != nil:
    section.add "X-Amz-Algorithm", valid_607999
  var valid_608000 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608000 = validateParameter(valid_608000, JString, required = false,
                                 default = nil)
  if valid_608000 != nil:
    section.add "X-Amz-SignedHeaders", valid_608000
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608001: Call_GetGetAccessKeyLastUsed_607988; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_608001.validator(path, query, header, formData, body)
  let scheme = call_608001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608001.url(scheme.get, call_608001.host, call_608001.base,
                         call_608001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608001, url, valid)

proc call*(call_608002: Call_GetGetAccessKeyLastUsed_607988; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   Action: string (required)
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_608003 = newJObject()
  add(query_608003, "Action", newJString(Action))
  add(query_608003, "AccessKeyId", newJString(AccessKeyId))
  add(query_608003, "Version", newJString(Version))
  result = call_608002.call(nil, query_608003, nil, nil, nil)

var getGetAccessKeyLastUsed* = Call_GetGetAccessKeyLastUsed_607988(
    name: "getGetAccessKeyLastUsed", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_GetGetAccessKeyLastUsed_607989, base: "/",
    url: url_GetGetAccessKeyLastUsed_607990, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountAuthorizationDetails_608039 = ref object of OpenApiRestCall_605589
proc url_PostGetAccountAuthorizationDetails_608041(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountAuthorizationDetails_608040(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608042 = query.getOrDefault("Action")
  valid_608042 = validateParameter(valid_608042, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_608042 != nil:
    section.add "Action", valid_608042
  var valid_608043 = query.getOrDefault("Version")
  valid_608043 = validateParameter(valid_608043, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608043 != nil:
    section.add "Version", valid_608043
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608044 = header.getOrDefault("X-Amz-Signature")
  valid_608044 = validateParameter(valid_608044, JString, required = false,
                                 default = nil)
  if valid_608044 != nil:
    section.add "X-Amz-Signature", valid_608044
  var valid_608045 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608045 = validateParameter(valid_608045, JString, required = false,
                                 default = nil)
  if valid_608045 != nil:
    section.add "X-Amz-Content-Sha256", valid_608045
  var valid_608046 = header.getOrDefault("X-Amz-Date")
  valid_608046 = validateParameter(valid_608046, JString, required = false,
                                 default = nil)
  if valid_608046 != nil:
    section.add "X-Amz-Date", valid_608046
  var valid_608047 = header.getOrDefault("X-Amz-Credential")
  valid_608047 = validateParameter(valid_608047, JString, required = false,
                                 default = nil)
  if valid_608047 != nil:
    section.add "X-Amz-Credential", valid_608047
  var valid_608048 = header.getOrDefault("X-Amz-Security-Token")
  valid_608048 = validateParameter(valid_608048, JString, required = false,
                                 default = nil)
  if valid_608048 != nil:
    section.add "X-Amz-Security-Token", valid_608048
  var valid_608049 = header.getOrDefault("X-Amz-Algorithm")
  valid_608049 = validateParameter(valid_608049, JString, required = false,
                                 default = nil)
  if valid_608049 != nil:
    section.add "X-Amz-Algorithm", valid_608049
  var valid_608050 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608050 = validateParameter(valid_608050, JString, required = false,
                                 default = nil)
  if valid_608050 != nil:
    section.add "X-Amz-SignedHeaders", valid_608050
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  section = newJObject()
  var valid_608051 = formData.getOrDefault("Marker")
  valid_608051 = validateParameter(valid_608051, JString, required = false,
                                 default = nil)
  if valid_608051 != nil:
    section.add "Marker", valid_608051
  var valid_608052 = formData.getOrDefault("MaxItems")
  valid_608052 = validateParameter(valid_608052, JInt, required = false, default = nil)
  if valid_608052 != nil:
    section.add "MaxItems", valid_608052
  var valid_608053 = formData.getOrDefault("Filter")
  valid_608053 = validateParameter(valid_608053, JArray, required = false,
                                 default = nil)
  if valid_608053 != nil:
    section.add "Filter", valid_608053
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608054: Call_PostGetAccountAuthorizationDetails_608039;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_608054.validator(path, query, header, formData, body)
  let scheme = call_608054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608054.url(scheme.get, call_608054.host, call_608054.base,
                         call_608054.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608054, url, valid)

proc call*(call_608055: Call_PostGetAccountAuthorizationDetails_608039;
          Marker: string = ""; Action: string = "GetAccountAuthorizationDetails";
          MaxItems: int = 0; Version: string = "2010-05-08"; Filter: JsonNode = nil): Recallable =
  ## postGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  var query_608056 = newJObject()
  var formData_608057 = newJObject()
  add(formData_608057, "Marker", newJString(Marker))
  add(query_608056, "Action", newJString(Action))
  add(formData_608057, "MaxItems", newJInt(MaxItems))
  add(query_608056, "Version", newJString(Version))
  if Filter != nil:
    formData_608057.add "Filter", Filter
  result = call_608055.call(nil, query_608056, nil, formData_608057, nil)

var postGetAccountAuthorizationDetails* = Call_PostGetAccountAuthorizationDetails_608039(
    name: "postGetAccountAuthorizationDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_PostGetAccountAuthorizationDetails_608040, base: "/",
    url: url_PostGetAccountAuthorizationDetails_608041,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountAuthorizationDetails_608021 = ref object of OpenApiRestCall_605589
proc url_GetGetAccountAuthorizationDetails_608023(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountAuthorizationDetails_608022(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608024 = query.getOrDefault("Marker")
  valid_608024 = validateParameter(valid_608024, JString, required = false,
                                 default = nil)
  if valid_608024 != nil:
    section.add "Marker", valid_608024
  var valid_608025 = query.getOrDefault("MaxItems")
  valid_608025 = validateParameter(valid_608025, JInt, required = false, default = nil)
  if valid_608025 != nil:
    section.add "MaxItems", valid_608025
  var valid_608026 = query.getOrDefault("Filter")
  valid_608026 = validateParameter(valid_608026, JArray, required = false,
                                 default = nil)
  if valid_608026 != nil:
    section.add "Filter", valid_608026
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608027 = query.getOrDefault("Action")
  valid_608027 = validateParameter(valid_608027, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_608027 != nil:
    section.add "Action", valid_608027
  var valid_608028 = query.getOrDefault("Version")
  valid_608028 = validateParameter(valid_608028, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608028 != nil:
    section.add "Version", valid_608028
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608029 = header.getOrDefault("X-Amz-Signature")
  valid_608029 = validateParameter(valid_608029, JString, required = false,
                                 default = nil)
  if valid_608029 != nil:
    section.add "X-Amz-Signature", valid_608029
  var valid_608030 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608030 = validateParameter(valid_608030, JString, required = false,
                                 default = nil)
  if valid_608030 != nil:
    section.add "X-Amz-Content-Sha256", valid_608030
  var valid_608031 = header.getOrDefault("X-Amz-Date")
  valid_608031 = validateParameter(valid_608031, JString, required = false,
                                 default = nil)
  if valid_608031 != nil:
    section.add "X-Amz-Date", valid_608031
  var valid_608032 = header.getOrDefault("X-Amz-Credential")
  valid_608032 = validateParameter(valid_608032, JString, required = false,
                                 default = nil)
  if valid_608032 != nil:
    section.add "X-Amz-Credential", valid_608032
  var valid_608033 = header.getOrDefault("X-Amz-Security-Token")
  valid_608033 = validateParameter(valid_608033, JString, required = false,
                                 default = nil)
  if valid_608033 != nil:
    section.add "X-Amz-Security-Token", valid_608033
  var valid_608034 = header.getOrDefault("X-Amz-Algorithm")
  valid_608034 = validateParameter(valid_608034, JString, required = false,
                                 default = nil)
  if valid_608034 != nil:
    section.add "X-Amz-Algorithm", valid_608034
  var valid_608035 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608035 = validateParameter(valid_608035, JString, required = false,
                                 default = nil)
  if valid_608035 != nil:
    section.add "X-Amz-SignedHeaders", valid_608035
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608036: Call_GetGetAccountAuthorizationDetails_608021;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_608036.validator(path, query, header, formData, body)
  let scheme = call_608036.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608036.url(scheme.get, call_608036.host, call_608036.base,
                         call_608036.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608036, url, valid)

proc call*(call_608037: Call_GetGetAccountAuthorizationDetails_608021;
          Marker: string = ""; MaxItems: int = 0; Filter: JsonNode = nil;
          Action: string = "GetAccountAuthorizationDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608038 = newJObject()
  add(query_608038, "Marker", newJString(Marker))
  add(query_608038, "MaxItems", newJInt(MaxItems))
  if Filter != nil:
    query_608038.add "Filter", Filter
  add(query_608038, "Action", newJString(Action))
  add(query_608038, "Version", newJString(Version))
  result = call_608037.call(nil, query_608038, nil, nil, nil)

var getGetAccountAuthorizationDetails* = Call_GetGetAccountAuthorizationDetails_608021(
    name: "getGetAccountAuthorizationDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_GetGetAccountAuthorizationDetails_608022, base: "/",
    url: url_GetGetAccountAuthorizationDetails_608023,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountPasswordPolicy_608073 = ref object of OpenApiRestCall_605589
proc url_PostGetAccountPasswordPolicy_608075(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountPasswordPolicy_608074(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608076 = query.getOrDefault("Action")
  valid_608076 = validateParameter(valid_608076, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_608076 != nil:
    section.add "Action", valid_608076
  var valid_608077 = query.getOrDefault("Version")
  valid_608077 = validateParameter(valid_608077, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608077 != nil:
    section.add "Version", valid_608077
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608078 = header.getOrDefault("X-Amz-Signature")
  valid_608078 = validateParameter(valid_608078, JString, required = false,
                                 default = nil)
  if valid_608078 != nil:
    section.add "X-Amz-Signature", valid_608078
  var valid_608079 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608079 = validateParameter(valid_608079, JString, required = false,
                                 default = nil)
  if valid_608079 != nil:
    section.add "X-Amz-Content-Sha256", valid_608079
  var valid_608080 = header.getOrDefault("X-Amz-Date")
  valid_608080 = validateParameter(valid_608080, JString, required = false,
                                 default = nil)
  if valid_608080 != nil:
    section.add "X-Amz-Date", valid_608080
  var valid_608081 = header.getOrDefault("X-Amz-Credential")
  valid_608081 = validateParameter(valid_608081, JString, required = false,
                                 default = nil)
  if valid_608081 != nil:
    section.add "X-Amz-Credential", valid_608081
  var valid_608082 = header.getOrDefault("X-Amz-Security-Token")
  valid_608082 = validateParameter(valid_608082, JString, required = false,
                                 default = nil)
  if valid_608082 != nil:
    section.add "X-Amz-Security-Token", valid_608082
  var valid_608083 = header.getOrDefault("X-Amz-Algorithm")
  valid_608083 = validateParameter(valid_608083, JString, required = false,
                                 default = nil)
  if valid_608083 != nil:
    section.add "X-Amz-Algorithm", valid_608083
  var valid_608084 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608084 = validateParameter(valid_608084, JString, required = false,
                                 default = nil)
  if valid_608084 != nil:
    section.add "X-Amz-SignedHeaders", valid_608084
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608085: Call_PostGetAccountPasswordPolicy_608073; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_608085.validator(path, query, header, formData, body)
  let scheme = call_608085.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608085.url(scheme.get, call_608085.host, call_608085.base,
                         call_608085.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608085, url, valid)

proc call*(call_608086: Call_PostGetAccountPasswordPolicy_608073;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608087 = newJObject()
  add(query_608087, "Action", newJString(Action))
  add(query_608087, "Version", newJString(Version))
  result = call_608086.call(nil, query_608087, nil, nil, nil)

var postGetAccountPasswordPolicy* = Call_PostGetAccountPasswordPolicy_608073(
    name: "postGetAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_PostGetAccountPasswordPolicy_608074, base: "/",
    url: url_PostGetAccountPasswordPolicy_608075,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountPasswordPolicy_608058 = ref object of OpenApiRestCall_605589
proc url_GetGetAccountPasswordPolicy_608060(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountPasswordPolicy_608059(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608061 = query.getOrDefault("Action")
  valid_608061 = validateParameter(valid_608061, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_608061 != nil:
    section.add "Action", valid_608061
  var valid_608062 = query.getOrDefault("Version")
  valid_608062 = validateParameter(valid_608062, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608062 != nil:
    section.add "Version", valid_608062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608063 = header.getOrDefault("X-Amz-Signature")
  valid_608063 = validateParameter(valid_608063, JString, required = false,
                                 default = nil)
  if valid_608063 != nil:
    section.add "X-Amz-Signature", valid_608063
  var valid_608064 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608064 = validateParameter(valid_608064, JString, required = false,
                                 default = nil)
  if valid_608064 != nil:
    section.add "X-Amz-Content-Sha256", valid_608064
  var valid_608065 = header.getOrDefault("X-Amz-Date")
  valid_608065 = validateParameter(valid_608065, JString, required = false,
                                 default = nil)
  if valid_608065 != nil:
    section.add "X-Amz-Date", valid_608065
  var valid_608066 = header.getOrDefault("X-Amz-Credential")
  valid_608066 = validateParameter(valid_608066, JString, required = false,
                                 default = nil)
  if valid_608066 != nil:
    section.add "X-Amz-Credential", valid_608066
  var valid_608067 = header.getOrDefault("X-Amz-Security-Token")
  valid_608067 = validateParameter(valid_608067, JString, required = false,
                                 default = nil)
  if valid_608067 != nil:
    section.add "X-Amz-Security-Token", valid_608067
  var valid_608068 = header.getOrDefault("X-Amz-Algorithm")
  valid_608068 = validateParameter(valid_608068, JString, required = false,
                                 default = nil)
  if valid_608068 != nil:
    section.add "X-Amz-Algorithm", valid_608068
  var valid_608069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608069 = validateParameter(valid_608069, JString, required = false,
                                 default = nil)
  if valid_608069 != nil:
    section.add "X-Amz-SignedHeaders", valid_608069
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608070: Call_GetGetAccountPasswordPolicy_608058; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_608070.validator(path, query, header, formData, body)
  let scheme = call_608070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608070.url(scheme.get, call_608070.host, call_608070.base,
                         call_608070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608070, url, valid)

proc call*(call_608071: Call_GetGetAccountPasswordPolicy_608058;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608072 = newJObject()
  add(query_608072, "Action", newJString(Action))
  add(query_608072, "Version", newJString(Version))
  result = call_608071.call(nil, query_608072, nil, nil, nil)

var getGetAccountPasswordPolicy* = Call_GetGetAccountPasswordPolicy_608058(
    name: "getGetAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_GetGetAccountPasswordPolicy_608059, base: "/",
    url: url_GetGetAccountPasswordPolicy_608060,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSummary_608103 = ref object of OpenApiRestCall_605589
proc url_PostGetAccountSummary_608105(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountSummary_608104(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608106 = query.getOrDefault("Action")
  valid_608106 = validateParameter(valid_608106, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_608106 != nil:
    section.add "Action", valid_608106
  var valid_608107 = query.getOrDefault("Version")
  valid_608107 = validateParameter(valid_608107, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608107 != nil:
    section.add "Version", valid_608107
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608108 = header.getOrDefault("X-Amz-Signature")
  valid_608108 = validateParameter(valid_608108, JString, required = false,
                                 default = nil)
  if valid_608108 != nil:
    section.add "X-Amz-Signature", valid_608108
  var valid_608109 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608109 = validateParameter(valid_608109, JString, required = false,
                                 default = nil)
  if valid_608109 != nil:
    section.add "X-Amz-Content-Sha256", valid_608109
  var valid_608110 = header.getOrDefault("X-Amz-Date")
  valid_608110 = validateParameter(valid_608110, JString, required = false,
                                 default = nil)
  if valid_608110 != nil:
    section.add "X-Amz-Date", valid_608110
  var valid_608111 = header.getOrDefault("X-Amz-Credential")
  valid_608111 = validateParameter(valid_608111, JString, required = false,
                                 default = nil)
  if valid_608111 != nil:
    section.add "X-Amz-Credential", valid_608111
  var valid_608112 = header.getOrDefault("X-Amz-Security-Token")
  valid_608112 = validateParameter(valid_608112, JString, required = false,
                                 default = nil)
  if valid_608112 != nil:
    section.add "X-Amz-Security-Token", valid_608112
  var valid_608113 = header.getOrDefault("X-Amz-Algorithm")
  valid_608113 = validateParameter(valid_608113, JString, required = false,
                                 default = nil)
  if valid_608113 != nil:
    section.add "X-Amz-Algorithm", valid_608113
  var valid_608114 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608114 = validateParameter(valid_608114, JString, required = false,
                                 default = nil)
  if valid_608114 != nil:
    section.add "X-Amz-SignedHeaders", valid_608114
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608115: Call_PostGetAccountSummary_608103; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_608115.validator(path, query, header, formData, body)
  let scheme = call_608115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608115.url(scheme.get, call_608115.host, call_608115.base,
                         call_608115.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608115, url, valid)

proc call*(call_608116: Call_PostGetAccountSummary_608103;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608117 = newJObject()
  add(query_608117, "Action", newJString(Action))
  add(query_608117, "Version", newJString(Version))
  result = call_608116.call(nil, query_608117, nil, nil, nil)

var postGetAccountSummary* = Call_PostGetAccountSummary_608103(
    name: "postGetAccountSummary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_PostGetAccountSummary_608104, base: "/",
    url: url_PostGetAccountSummary_608105, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSummary_608088 = ref object of OpenApiRestCall_605589
proc url_GetGetAccountSummary_608090(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountSummary_608089(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608091 = query.getOrDefault("Action")
  valid_608091 = validateParameter(valid_608091, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_608091 != nil:
    section.add "Action", valid_608091
  var valid_608092 = query.getOrDefault("Version")
  valid_608092 = validateParameter(valid_608092, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608092 != nil:
    section.add "Version", valid_608092
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608093 = header.getOrDefault("X-Amz-Signature")
  valid_608093 = validateParameter(valid_608093, JString, required = false,
                                 default = nil)
  if valid_608093 != nil:
    section.add "X-Amz-Signature", valid_608093
  var valid_608094 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608094 = validateParameter(valid_608094, JString, required = false,
                                 default = nil)
  if valid_608094 != nil:
    section.add "X-Amz-Content-Sha256", valid_608094
  var valid_608095 = header.getOrDefault("X-Amz-Date")
  valid_608095 = validateParameter(valid_608095, JString, required = false,
                                 default = nil)
  if valid_608095 != nil:
    section.add "X-Amz-Date", valid_608095
  var valid_608096 = header.getOrDefault("X-Amz-Credential")
  valid_608096 = validateParameter(valid_608096, JString, required = false,
                                 default = nil)
  if valid_608096 != nil:
    section.add "X-Amz-Credential", valid_608096
  var valid_608097 = header.getOrDefault("X-Amz-Security-Token")
  valid_608097 = validateParameter(valid_608097, JString, required = false,
                                 default = nil)
  if valid_608097 != nil:
    section.add "X-Amz-Security-Token", valid_608097
  var valid_608098 = header.getOrDefault("X-Amz-Algorithm")
  valid_608098 = validateParameter(valid_608098, JString, required = false,
                                 default = nil)
  if valid_608098 != nil:
    section.add "X-Amz-Algorithm", valid_608098
  var valid_608099 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608099 = validateParameter(valid_608099, JString, required = false,
                                 default = nil)
  if valid_608099 != nil:
    section.add "X-Amz-SignedHeaders", valid_608099
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608100: Call_GetGetAccountSummary_608088; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_608100.validator(path, query, header, formData, body)
  let scheme = call_608100.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608100.url(scheme.get, call_608100.host, call_608100.base,
                         call_608100.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608100, url, valid)

proc call*(call_608101: Call_GetGetAccountSummary_608088;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608102 = newJObject()
  add(query_608102, "Action", newJString(Action))
  add(query_608102, "Version", newJString(Version))
  result = call_608101.call(nil, query_608102, nil, nil, nil)

var getGetAccountSummary* = Call_GetGetAccountSummary_608088(
    name: "getGetAccountSummary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_GetGetAccountSummary_608089, base: "/",
    url: url_GetGetAccountSummary_608090, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForCustomPolicy_608134 = ref object of OpenApiRestCall_605589
proc url_PostGetContextKeysForCustomPolicy_608136(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetContextKeysForCustomPolicy_608135(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608137 = query.getOrDefault("Action")
  valid_608137 = validateParameter(valid_608137, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_608137 != nil:
    section.add "Action", valid_608137
  var valid_608138 = query.getOrDefault("Version")
  valid_608138 = validateParameter(valid_608138, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608138 != nil:
    section.add "Version", valid_608138
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608139 = header.getOrDefault("X-Amz-Signature")
  valid_608139 = validateParameter(valid_608139, JString, required = false,
                                 default = nil)
  if valid_608139 != nil:
    section.add "X-Amz-Signature", valid_608139
  var valid_608140 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608140 = validateParameter(valid_608140, JString, required = false,
                                 default = nil)
  if valid_608140 != nil:
    section.add "X-Amz-Content-Sha256", valid_608140
  var valid_608141 = header.getOrDefault("X-Amz-Date")
  valid_608141 = validateParameter(valid_608141, JString, required = false,
                                 default = nil)
  if valid_608141 != nil:
    section.add "X-Amz-Date", valid_608141
  var valid_608142 = header.getOrDefault("X-Amz-Credential")
  valid_608142 = validateParameter(valid_608142, JString, required = false,
                                 default = nil)
  if valid_608142 != nil:
    section.add "X-Amz-Credential", valid_608142
  var valid_608143 = header.getOrDefault("X-Amz-Security-Token")
  valid_608143 = validateParameter(valid_608143, JString, required = false,
                                 default = nil)
  if valid_608143 != nil:
    section.add "X-Amz-Security-Token", valid_608143
  var valid_608144 = header.getOrDefault("X-Amz-Algorithm")
  valid_608144 = validateParameter(valid_608144, JString, required = false,
                                 default = nil)
  if valid_608144 != nil:
    section.add "X-Amz-Algorithm", valid_608144
  var valid_608145 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608145 = validateParameter(valid_608145, JString, required = false,
                                 default = nil)
  if valid_608145 != nil:
    section.add "X-Amz-SignedHeaders", valid_608145
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `PolicyInputList` field"
  var valid_608146 = formData.getOrDefault("PolicyInputList")
  valid_608146 = validateParameter(valid_608146, JArray, required = true, default = nil)
  if valid_608146 != nil:
    section.add "PolicyInputList", valid_608146
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608147: Call_PostGetContextKeysForCustomPolicy_608134;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_608147.validator(path, query, header, formData, body)
  let scheme = call_608147.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608147.url(scheme.get, call_608147.host, call_608147.base,
                         call_608147.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608147, url, valid)

proc call*(call_608148: Call_PostGetContextKeysForCustomPolicy_608134;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  var query_608149 = newJObject()
  var formData_608150 = newJObject()
  add(query_608149, "Action", newJString(Action))
  add(query_608149, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_608150.add "PolicyInputList", PolicyInputList
  result = call_608148.call(nil, query_608149, nil, formData_608150, nil)

var postGetContextKeysForCustomPolicy* = Call_PostGetContextKeysForCustomPolicy_608134(
    name: "postGetContextKeysForCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_PostGetContextKeysForCustomPolicy_608135, base: "/",
    url: url_PostGetContextKeysForCustomPolicy_608136,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForCustomPolicy_608118 = ref object of OpenApiRestCall_605589
proc url_GetGetContextKeysForCustomPolicy_608120(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetContextKeysForCustomPolicy_608119(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyInputList` field"
  var valid_608121 = query.getOrDefault("PolicyInputList")
  valid_608121 = validateParameter(valid_608121, JArray, required = true, default = nil)
  if valid_608121 != nil:
    section.add "PolicyInputList", valid_608121
  var valid_608122 = query.getOrDefault("Action")
  valid_608122 = validateParameter(valid_608122, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_608122 != nil:
    section.add "Action", valid_608122
  var valid_608123 = query.getOrDefault("Version")
  valid_608123 = validateParameter(valid_608123, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608123 != nil:
    section.add "Version", valid_608123
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608124 = header.getOrDefault("X-Amz-Signature")
  valid_608124 = validateParameter(valid_608124, JString, required = false,
                                 default = nil)
  if valid_608124 != nil:
    section.add "X-Amz-Signature", valid_608124
  var valid_608125 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608125 = validateParameter(valid_608125, JString, required = false,
                                 default = nil)
  if valid_608125 != nil:
    section.add "X-Amz-Content-Sha256", valid_608125
  var valid_608126 = header.getOrDefault("X-Amz-Date")
  valid_608126 = validateParameter(valid_608126, JString, required = false,
                                 default = nil)
  if valid_608126 != nil:
    section.add "X-Amz-Date", valid_608126
  var valid_608127 = header.getOrDefault("X-Amz-Credential")
  valid_608127 = validateParameter(valid_608127, JString, required = false,
                                 default = nil)
  if valid_608127 != nil:
    section.add "X-Amz-Credential", valid_608127
  var valid_608128 = header.getOrDefault("X-Amz-Security-Token")
  valid_608128 = validateParameter(valid_608128, JString, required = false,
                                 default = nil)
  if valid_608128 != nil:
    section.add "X-Amz-Security-Token", valid_608128
  var valid_608129 = header.getOrDefault("X-Amz-Algorithm")
  valid_608129 = validateParameter(valid_608129, JString, required = false,
                                 default = nil)
  if valid_608129 != nil:
    section.add "X-Amz-Algorithm", valid_608129
  var valid_608130 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608130 = validateParameter(valid_608130, JString, required = false,
                                 default = nil)
  if valid_608130 != nil:
    section.add "X-Amz-SignedHeaders", valid_608130
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608131: Call_GetGetContextKeysForCustomPolicy_608118;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_608131.validator(path, query, header, formData, body)
  let scheme = call_608131.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608131.url(scheme.get, call_608131.host, call_608131.base,
                         call_608131.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608131, url, valid)

proc call*(call_608132: Call_GetGetContextKeysForCustomPolicy_608118;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608133 = newJObject()
  if PolicyInputList != nil:
    query_608133.add "PolicyInputList", PolicyInputList
  add(query_608133, "Action", newJString(Action))
  add(query_608133, "Version", newJString(Version))
  result = call_608132.call(nil, query_608133, nil, nil, nil)

var getGetContextKeysForCustomPolicy* = Call_GetGetContextKeysForCustomPolicy_608118(
    name: "getGetContextKeysForCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_GetGetContextKeysForCustomPolicy_608119, base: "/",
    url: url_GetGetContextKeysForCustomPolicy_608120,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForPrincipalPolicy_608168 = ref object of OpenApiRestCall_605589
proc url_PostGetContextKeysForPrincipalPolicy_608170(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetContextKeysForPrincipalPolicy_608169(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608171 = query.getOrDefault("Action")
  valid_608171 = validateParameter(valid_608171, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_608171 != nil:
    section.add "Action", valid_608171
  var valid_608172 = query.getOrDefault("Version")
  valid_608172 = validateParameter(valid_608172, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608172 != nil:
    section.add "Version", valid_608172
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608173 = header.getOrDefault("X-Amz-Signature")
  valid_608173 = validateParameter(valid_608173, JString, required = false,
                                 default = nil)
  if valid_608173 != nil:
    section.add "X-Amz-Signature", valid_608173
  var valid_608174 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608174 = validateParameter(valid_608174, JString, required = false,
                                 default = nil)
  if valid_608174 != nil:
    section.add "X-Amz-Content-Sha256", valid_608174
  var valid_608175 = header.getOrDefault("X-Amz-Date")
  valid_608175 = validateParameter(valid_608175, JString, required = false,
                                 default = nil)
  if valid_608175 != nil:
    section.add "X-Amz-Date", valid_608175
  var valid_608176 = header.getOrDefault("X-Amz-Credential")
  valid_608176 = validateParameter(valid_608176, JString, required = false,
                                 default = nil)
  if valid_608176 != nil:
    section.add "X-Amz-Credential", valid_608176
  var valid_608177 = header.getOrDefault("X-Amz-Security-Token")
  valid_608177 = validateParameter(valid_608177, JString, required = false,
                                 default = nil)
  if valid_608177 != nil:
    section.add "X-Amz-Security-Token", valid_608177
  var valid_608178 = header.getOrDefault("X-Amz-Algorithm")
  valid_608178 = validateParameter(valid_608178, JString, required = false,
                                 default = nil)
  if valid_608178 != nil:
    section.add "X-Amz-Algorithm", valid_608178
  var valid_608179 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608179 = validateParameter(valid_608179, JString, required = false,
                                 default = nil)
  if valid_608179 != nil:
    section.add "X-Amz-SignedHeaders", valid_608179
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `PolicySourceArn` field"
  var valid_608180 = formData.getOrDefault("PolicySourceArn")
  valid_608180 = validateParameter(valid_608180, JString, required = true,
                                 default = nil)
  if valid_608180 != nil:
    section.add "PolicySourceArn", valid_608180
  var valid_608181 = formData.getOrDefault("PolicyInputList")
  valid_608181 = validateParameter(valid_608181, JArray, required = false,
                                 default = nil)
  if valid_608181 != nil:
    section.add "PolicyInputList", valid_608181
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608182: Call_PostGetContextKeysForPrincipalPolicy_608168;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_608182.validator(path, query, header, formData, body)
  let scheme = call_608182.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608182.url(scheme.get, call_608182.host, call_608182.base,
                         call_608182.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608182, url, valid)

proc call*(call_608183: Call_PostGetContextKeysForPrincipalPolicy_608168;
          PolicySourceArn: string;
          Action: string = "GetContextKeysForPrincipalPolicy";
          Version: string = "2010-05-08"; PolicyInputList: JsonNode = nil): Recallable =
  ## postGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  var query_608184 = newJObject()
  var formData_608185 = newJObject()
  add(formData_608185, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_608184, "Action", newJString(Action))
  add(query_608184, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_608185.add "PolicyInputList", PolicyInputList
  result = call_608183.call(nil, query_608184, nil, formData_608185, nil)

var postGetContextKeysForPrincipalPolicy* = Call_PostGetContextKeysForPrincipalPolicy_608168(
    name: "postGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_PostGetContextKeysForPrincipalPolicy_608169, base: "/",
    url: url_PostGetContextKeysForPrincipalPolicy_608170,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForPrincipalPolicy_608151 = ref object of OpenApiRestCall_605589
proc url_GetGetContextKeysForPrincipalPolicy_608153(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetContextKeysForPrincipalPolicy_608152(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicySourceArn` field"
  var valid_608154 = query.getOrDefault("PolicySourceArn")
  valid_608154 = validateParameter(valid_608154, JString, required = true,
                                 default = nil)
  if valid_608154 != nil:
    section.add "PolicySourceArn", valid_608154
  var valid_608155 = query.getOrDefault("PolicyInputList")
  valid_608155 = validateParameter(valid_608155, JArray, required = false,
                                 default = nil)
  if valid_608155 != nil:
    section.add "PolicyInputList", valid_608155
  var valid_608156 = query.getOrDefault("Action")
  valid_608156 = validateParameter(valid_608156, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_608156 != nil:
    section.add "Action", valid_608156
  var valid_608157 = query.getOrDefault("Version")
  valid_608157 = validateParameter(valid_608157, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608157 != nil:
    section.add "Version", valid_608157
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608158 = header.getOrDefault("X-Amz-Signature")
  valid_608158 = validateParameter(valid_608158, JString, required = false,
                                 default = nil)
  if valid_608158 != nil:
    section.add "X-Amz-Signature", valid_608158
  var valid_608159 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608159 = validateParameter(valid_608159, JString, required = false,
                                 default = nil)
  if valid_608159 != nil:
    section.add "X-Amz-Content-Sha256", valid_608159
  var valid_608160 = header.getOrDefault("X-Amz-Date")
  valid_608160 = validateParameter(valid_608160, JString, required = false,
                                 default = nil)
  if valid_608160 != nil:
    section.add "X-Amz-Date", valid_608160
  var valid_608161 = header.getOrDefault("X-Amz-Credential")
  valid_608161 = validateParameter(valid_608161, JString, required = false,
                                 default = nil)
  if valid_608161 != nil:
    section.add "X-Amz-Credential", valid_608161
  var valid_608162 = header.getOrDefault("X-Amz-Security-Token")
  valid_608162 = validateParameter(valid_608162, JString, required = false,
                                 default = nil)
  if valid_608162 != nil:
    section.add "X-Amz-Security-Token", valid_608162
  var valid_608163 = header.getOrDefault("X-Amz-Algorithm")
  valid_608163 = validateParameter(valid_608163, JString, required = false,
                                 default = nil)
  if valid_608163 != nil:
    section.add "X-Amz-Algorithm", valid_608163
  var valid_608164 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608164 = validateParameter(valid_608164, JString, required = false,
                                 default = nil)
  if valid_608164 != nil:
    section.add "X-Amz-SignedHeaders", valid_608164
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608165: Call_GetGetContextKeysForPrincipalPolicy_608151;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_608165.validator(path, query, header, formData, body)
  let scheme = call_608165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608165.url(scheme.get, call_608165.host, call_608165.base,
                         call_608165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608165, url, valid)

proc call*(call_608166: Call_GetGetContextKeysForPrincipalPolicy_608151;
          PolicySourceArn: string; PolicyInputList: JsonNode = nil;
          Action: string = "GetContextKeysForPrincipalPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608167 = newJObject()
  add(query_608167, "PolicySourceArn", newJString(PolicySourceArn))
  if PolicyInputList != nil:
    query_608167.add "PolicyInputList", PolicyInputList
  add(query_608167, "Action", newJString(Action))
  add(query_608167, "Version", newJString(Version))
  result = call_608166.call(nil, query_608167, nil, nil, nil)

var getGetContextKeysForPrincipalPolicy* = Call_GetGetContextKeysForPrincipalPolicy_608151(
    name: "getGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_GetGetContextKeysForPrincipalPolicy_608152, base: "/",
    url: url_GetGetContextKeysForPrincipalPolicy_608153,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCredentialReport_608201 = ref object of OpenApiRestCall_605589
proc url_PostGetCredentialReport_608203(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetCredentialReport_608202(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608204 = query.getOrDefault("Action")
  valid_608204 = validateParameter(valid_608204, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_608204 != nil:
    section.add "Action", valid_608204
  var valid_608205 = query.getOrDefault("Version")
  valid_608205 = validateParameter(valid_608205, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608205 != nil:
    section.add "Version", valid_608205
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608206 = header.getOrDefault("X-Amz-Signature")
  valid_608206 = validateParameter(valid_608206, JString, required = false,
                                 default = nil)
  if valid_608206 != nil:
    section.add "X-Amz-Signature", valid_608206
  var valid_608207 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608207 = validateParameter(valid_608207, JString, required = false,
                                 default = nil)
  if valid_608207 != nil:
    section.add "X-Amz-Content-Sha256", valid_608207
  var valid_608208 = header.getOrDefault("X-Amz-Date")
  valid_608208 = validateParameter(valid_608208, JString, required = false,
                                 default = nil)
  if valid_608208 != nil:
    section.add "X-Amz-Date", valid_608208
  var valid_608209 = header.getOrDefault("X-Amz-Credential")
  valid_608209 = validateParameter(valid_608209, JString, required = false,
                                 default = nil)
  if valid_608209 != nil:
    section.add "X-Amz-Credential", valid_608209
  var valid_608210 = header.getOrDefault("X-Amz-Security-Token")
  valid_608210 = validateParameter(valid_608210, JString, required = false,
                                 default = nil)
  if valid_608210 != nil:
    section.add "X-Amz-Security-Token", valid_608210
  var valid_608211 = header.getOrDefault("X-Amz-Algorithm")
  valid_608211 = validateParameter(valid_608211, JString, required = false,
                                 default = nil)
  if valid_608211 != nil:
    section.add "X-Amz-Algorithm", valid_608211
  var valid_608212 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608212 = validateParameter(valid_608212, JString, required = false,
                                 default = nil)
  if valid_608212 != nil:
    section.add "X-Amz-SignedHeaders", valid_608212
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608213: Call_PostGetCredentialReport_608201; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_608213.validator(path, query, header, formData, body)
  let scheme = call_608213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608213.url(scheme.get, call_608213.host, call_608213.base,
                         call_608213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608213, url, valid)

proc call*(call_608214: Call_PostGetCredentialReport_608201;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## postGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608215 = newJObject()
  add(query_608215, "Action", newJString(Action))
  add(query_608215, "Version", newJString(Version))
  result = call_608214.call(nil, query_608215, nil, nil, nil)

var postGetCredentialReport* = Call_PostGetCredentialReport_608201(
    name: "postGetCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_PostGetCredentialReport_608202, base: "/",
    url: url_PostGetCredentialReport_608203, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCredentialReport_608186 = ref object of OpenApiRestCall_605589
proc url_GetGetCredentialReport_608188(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetCredentialReport_608187(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608189 = query.getOrDefault("Action")
  valid_608189 = validateParameter(valid_608189, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_608189 != nil:
    section.add "Action", valid_608189
  var valid_608190 = query.getOrDefault("Version")
  valid_608190 = validateParameter(valid_608190, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608190 != nil:
    section.add "Version", valid_608190
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608191 = header.getOrDefault("X-Amz-Signature")
  valid_608191 = validateParameter(valid_608191, JString, required = false,
                                 default = nil)
  if valid_608191 != nil:
    section.add "X-Amz-Signature", valid_608191
  var valid_608192 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608192 = validateParameter(valid_608192, JString, required = false,
                                 default = nil)
  if valid_608192 != nil:
    section.add "X-Amz-Content-Sha256", valid_608192
  var valid_608193 = header.getOrDefault("X-Amz-Date")
  valid_608193 = validateParameter(valid_608193, JString, required = false,
                                 default = nil)
  if valid_608193 != nil:
    section.add "X-Amz-Date", valid_608193
  var valid_608194 = header.getOrDefault("X-Amz-Credential")
  valid_608194 = validateParameter(valid_608194, JString, required = false,
                                 default = nil)
  if valid_608194 != nil:
    section.add "X-Amz-Credential", valid_608194
  var valid_608195 = header.getOrDefault("X-Amz-Security-Token")
  valid_608195 = validateParameter(valid_608195, JString, required = false,
                                 default = nil)
  if valid_608195 != nil:
    section.add "X-Amz-Security-Token", valid_608195
  var valid_608196 = header.getOrDefault("X-Amz-Algorithm")
  valid_608196 = validateParameter(valid_608196, JString, required = false,
                                 default = nil)
  if valid_608196 != nil:
    section.add "X-Amz-Algorithm", valid_608196
  var valid_608197 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608197 = validateParameter(valid_608197, JString, required = false,
                                 default = nil)
  if valid_608197 != nil:
    section.add "X-Amz-SignedHeaders", valid_608197
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608198: Call_GetGetCredentialReport_608186; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_608198.validator(path, query, header, formData, body)
  let scheme = call_608198.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608198.url(scheme.get, call_608198.host, call_608198.base,
                         call_608198.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608198, url, valid)

proc call*(call_608199: Call_GetGetCredentialReport_608186;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## getGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608200 = newJObject()
  add(query_608200, "Action", newJString(Action))
  add(query_608200, "Version", newJString(Version))
  result = call_608199.call(nil, query_608200, nil, nil, nil)

var getGetCredentialReport* = Call_GetGetCredentialReport_608186(
    name: "getGetCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_GetGetCredentialReport_608187, base: "/",
    url: url_GetGetCredentialReport_608188, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroup_608234 = ref object of OpenApiRestCall_605589
proc url_PostGetGroup_608236(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetGroup_608235(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608237 = query.getOrDefault("Action")
  valid_608237 = validateParameter(valid_608237, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_608237 != nil:
    section.add "Action", valid_608237
  var valid_608238 = query.getOrDefault("Version")
  valid_608238 = validateParameter(valid_608238, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608238 != nil:
    section.add "Version", valid_608238
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608239 = header.getOrDefault("X-Amz-Signature")
  valid_608239 = validateParameter(valid_608239, JString, required = false,
                                 default = nil)
  if valid_608239 != nil:
    section.add "X-Amz-Signature", valid_608239
  var valid_608240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608240 = validateParameter(valid_608240, JString, required = false,
                                 default = nil)
  if valid_608240 != nil:
    section.add "X-Amz-Content-Sha256", valid_608240
  var valid_608241 = header.getOrDefault("X-Amz-Date")
  valid_608241 = validateParameter(valid_608241, JString, required = false,
                                 default = nil)
  if valid_608241 != nil:
    section.add "X-Amz-Date", valid_608241
  var valid_608242 = header.getOrDefault("X-Amz-Credential")
  valid_608242 = validateParameter(valid_608242, JString, required = false,
                                 default = nil)
  if valid_608242 != nil:
    section.add "X-Amz-Credential", valid_608242
  var valid_608243 = header.getOrDefault("X-Amz-Security-Token")
  valid_608243 = validateParameter(valid_608243, JString, required = false,
                                 default = nil)
  if valid_608243 != nil:
    section.add "X-Amz-Security-Token", valid_608243
  var valid_608244 = header.getOrDefault("X-Amz-Algorithm")
  valid_608244 = validateParameter(valid_608244, JString, required = false,
                                 default = nil)
  if valid_608244 != nil:
    section.add "X-Amz-Algorithm", valid_608244
  var valid_608245 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608245 = validateParameter(valid_608245, JString, required = false,
                                 default = nil)
  if valid_608245 != nil:
    section.add "X-Amz-SignedHeaders", valid_608245
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_608246 = formData.getOrDefault("Marker")
  valid_608246 = validateParameter(valid_608246, JString, required = false,
                                 default = nil)
  if valid_608246 != nil:
    section.add "Marker", valid_608246
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_608247 = formData.getOrDefault("GroupName")
  valid_608247 = validateParameter(valid_608247, JString, required = true,
                                 default = nil)
  if valid_608247 != nil:
    section.add "GroupName", valid_608247
  var valid_608248 = formData.getOrDefault("MaxItems")
  valid_608248 = validateParameter(valid_608248, JInt, required = false, default = nil)
  if valid_608248 != nil:
    section.add "MaxItems", valid_608248
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608249: Call_PostGetGroup_608234; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_608249.validator(path, query, header, formData, body)
  let scheme = call_608249.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608249.url(scheme.get, call_608249.host, call_608249.base,
                         call_608249.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608249, url, valid)

proc call*(call_608250: Call_PostGetGroup_608234; GroupName: string;
          Marker: string = ""; Action: string = "GetGroup"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_608251 = newJObject()
  var formData_608252 = newJObject()
  add(formData_608252, "Marker", newJString(Marker))
  add(formData_608252, "GroupName", newJString(GroupName))
  add(query_608251, "Action", newJString(Action))
  add(formData_608252, "MaxItems", newJInt(MaxItems))
  add(query_608251, "Version", newJString(Version))
  result = call_608250.call(nil, query_608251, nil, formData_608252, nil)

var postGetGroup* = Call_PostGetGroup_608234(name: "postGetGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetGroup", validator: validate_PostGetGroup_608235, base: "/",
    url: url_PostGetGroup_608236, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroup_608216 = ref object of OpenApiRestCall_605589
proc url_GetGetGroup_608218(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetGroup_608217(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608219 = query.getOrDefault("Marker")
  valid_608219 = validateParameter(valid_608219, JString, required = false,
                                 default = nil)
  if valid_608219 != nil:
    section.add "Marker", valid_608219
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_608220 = query.getOrDefault("GroupName")
  valid_608220 = validateParameter(valid_608220, JString, required = true,
                                 default = nil)
  if valid_608220 != nil:
    section.add "GroupName", valid_608220
  var valid_608221 = query.getOrDefault("MaxItems")
  valid_608221 = validateParameter(valid_608221, JInt, required = false, default = nil)
  if valid_608221 != nil:
    section.add "MaxItems", valid_608221
  var valid_608222 = query.getOrDefault("Action")
  valid_608222 = validateParameter(valid_608222, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_608222 != nil:
    section.add "Action", valid_608222
  var valid_608223 = query.getOrDefault("Version")
  valid_608223 = validateParameter(valid_608223, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608223 != nil:
    section.add "Version", valid_608223
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608224 = header.getOrDefault("X-Amz-Signature")
  valid_608224 = validateParameter(valid_608224, JString, required = false,
                                 default = nil)
  if valid_608224 != nil:
    section.add "X-Amz-Signature", valid_608224
  var valid_608225 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608225 = validateParameter(valid_608225, JString, required = false,
                                 default = nil)
  if valid_608225 != nil:
    section.add "X-Amz-Content-Sha256", valid_608225
  var valid_608226 = header.getOrDefault("X-Amz-Date")
  valid_608226 = validateParameter(valid_608226, JString, required = false,
                                 default = nil)
  if valid_608226 != nil:
    section.add "X-Amz-Date", valid_608226
  var valid_608227 = header.getOrDefault("X-Amz-Credential")
  valid_608227 = validateParameter(valid_608227, JString, required = false,
                                 default = nil)
  if valid_608227 != nil:
    section.add "X-Amz-Credential", valid_608227
  var valid_608228 = header.getOrDefault("X-Amz-Security-Token")
  valid_608228 = validateParameter(valid_608228, JString, required = false,
                                 default = nil)
  if valid_608228 != nil:
    section.add "X-Amz-Security-Token", valid_608228
  var valid_608229 = header.getOrDefault("X-Amz-Algorithm")
  valid_608229 = validateParameter(valid_608229, JString, required = false,
                                 default = nil)
  if valid_608229 != nil:
    section.add "X-Amz-Algorithm", valid_608229
  var valid_608230 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608230 = validateParameter(valid_608230, JString, required = false,
                                 default = nil)
  if valid_608230 != nil:
    section.add "X-Amz-SignedHeaders", valid_608230
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608231: Call_GetGetGroup_608216; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_608231.validator(path, query, header, formData, body)
  let scheme = call_608231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608231.url(scheme.get, call_608231.host, call_608231.base,
                         call_608231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608231, url, valid)

proc call*(call_608232: Call_GetGetGroup_608216; GroupName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "GetGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608233 = newJObject()
  add(query_608233, "Marker", newJString(Marker))
  add(query_608233, "GroupName", newJString(GroupName))
  add(query_608233, "MaxItems", newJInt(MaxItems))
  add(query_608233, "Action", newJString(Action))
  add(query_608233, "Version", newJString(Version))
  result = call_608232.call(nil, query_608233, nil, nil, nil)

var getGetGroup* = Call_GetGetGroup_608216(name: "getGetGroup",
                                        meth: HttpMethod.HttpGet,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetGroup",
                                        validator: validate_GetGetGroup_608217,
                                        base: "/", url: url_GetGetGroup_608218,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroupPolicy_608270 = ref object of OpenApiRestCall_605589
proc url_PostGetGroupPolicy_608272(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetGroupPolicy_608271(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608273 = query.getOrDefault("Action")
  valid_608273 = validateParameter(valid_608273, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_608273 != nil:
    section.add "Action", valid_608273
  var valid_608274 = query.getOrDefault("Version")
  valid_608274 = validateParameter(valid_608274, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608274 != nil:
    section.add "Version", valid_608274
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608275 = header.getOrDefault("X-Amz-Signature")
  valid_608275 = validateParameter(valid_608275, JString, required = false,
                                 default = nil)
  if valid_608275 != nil:
    section.add "X-Amz-Signature", valid_608275
  var valid_608276 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608276 = validateParameter(valid_608276, JString, required = false,
                                 default = nil)
  if valid_608276 != nil:
    section.add "X-Amz-Content-Sha256", valid_608276
  var valid_608277 = header.getOrDefault("X-Amz-Date")
  valid_608277 = validateParameter(valid_608277, JString, required = false,
                                 default = nil)
  if valid_608277 != nil:
    section.add "X-Amz-Date", valid_608277
  var valid_608278 = header.getOrDefault("X-Amz-Credential")
  valid_608278 = validateParameter(valid_608278, JString, required = false,
                                 default = nil)
  if valid_608278 != nil:
    section.add "X-Amz-Credential", valid_608278
  var valid_608279 = header.getOrDefault("X-Amz-Security-Token")
  valid_608279 = validateParameter(valid_608279, JString, required = false,
                                 default = nil)
  if valid_608279 != nil:
    section.add "X-Amz-Security-Token", valid_608279
  var valid_608280 = header.getOrDefault("X-Amz-Algorithm")
  valid_608280 = validateParameter(valid_608280, JString, required = false,
                                 default = nil)
  if valid_608280 != nil:
    section.add "X-Amz-Algorithm", valid_608280
  var valid_608281 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608281 = validateParameter(valid_608281, JString, required = false,
                                 default = nil)
  if valid_608281 != nil:
    section.add "X-Amz-SignedHeaders", valid_608281
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_608282 = formData.getOrDefault("GroupName")
  valid_608282 = validateParameter(valid_608282, JString, required = true,
                                 default = nil)
  if valid_608282 != nil:
    section.add "GroupName", valid_608282
  var valid_608283 = formData.getOrDefault("PolicyName")
  valid_608283 = validateParameter(valid_608283, JString, required = true,
                                 default = nil)
  if valid_608283 != nil:
    section.add "PolicyName", valid_608283
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608284: Call_PostGetGroupPolicy_608270; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_608284.validator(path, query, header, formData, body)
  let scheme = call_608284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608284.url(scheme.get, call_608284.host, call_608284.base,
                         call_608284.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608284, url, valid)

proc call*(call_608285: Call_PostGetGroupPolicy_608270; GroupName: string;
          PolicyName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_608286 = newJObject()
  var formData_608287 = newJObject()
  add(formData_608287, "GroupName", newJString(GroupName))
  add(query_608286, "Action", newJString(Action))
  add(query_608286, "Version", newJString(Version))
  add(formData_608287, "PolicyName", newJString(PolicyName))
  result = call_608285.call(nil, query_608286, nil, formData_608287, nil)

var postGetGroupPolicy* = Call_PostGetGroupPolicy_608270(
    name: "postGetGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetGroupPolicy",
    validator: validate_PostGetGroupPolicy_608271, base: "/",
    url: url_PostGetGroupPolicy_608272, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroupPolicy_608253 = ref object of OpenApiRestCall_605589
proc url_GetGetGroupPolicy_608255(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetGroupPolicy_608254(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_608256 = query.getOrDefault("GroupName")
  valid_608256 = validateParameter(valid_608256, JString, required = true,
                                 default = nil)
  if valid_608256 != nil:
    section.add "GroupName", valid_608256
  var valid_608257 = query.getOrDefault("PolicyName")
  valid_608257 = validateParameter(valid_608257, JString, required = true,
                                 default = nil)
  if valid_608257 != nil:
    section.add "PolicyName", valid_608257
  var valid_608258 = query.getOrDefault("Action")
  valid_608258 = validateParameter(valid_608258, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_608258 != nil:
    section.add "Action", valid_608258
  var valid_608259 = query.getOrDefault("Version")
  valid_608259 = validateParameter(valid_608259, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608259 != nil:
    section.add "Version", valid_608259
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608260 = header.getOrDefault("X-Amz-Signature")
  valid_608260 = validateParameter(valid_608260, JString, required = false,
                                 default = nil)
  if valid_608260 != nil:
    section.add "X-Amz-Signature", valid_608260
  var valid_608261 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608261 = validateParameter(valid_608261, JString, required = false,
                                 default = nil)
  if valid_608261 != nil:
    section.add "X-Amz-Content-Sha256", valid_608261
  var valid_608262 = header.getOrDefault("X-Amz-Date")
  valid_608262 = validateParameter(valid_608262, JString, required = false,
                                 default = nil)
  if valid_608262 != nil:
    section.add "X-Amz-Date", valid_608262
  var valid_608263 = header.getOrDefault("X-Amz-Credential")
  valid_608263 = validateParameter(valid_608263, JString, required = false,
                                 default = nil)
  if valid_608263 != nil:
    section.add "X-Amz-Credential", valid_608263
  var valid_608264 = header.getOrDefault("X-Amz-Security-Token")
  valid_608264 = validateParameter(valid_608264, JString, required = false,
                                 default = nil)
  if valid_608264 != nil:
    section.add "X-Amz-Security-Token", valid_608264
  var valid_608265 = header.getOrDefault("X-Amz-Algorithm")
  valid_608265 = validateParameter(valid_608265, JString, required = false,
                                 default = nil)
  if valid_608265 != nil:
    section.add "X-Amz-Algorithm", valid_608265
  var valid_608266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608266 = validateParameter(valid_608266, JString, required = false,
                                 default = nil)
  if valid_608266 != nil:
    section.add "X-Amz-SignedHeaders", valid_608266
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608267: Call_GetGetGroupPolicy_608253; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_608267.validator(path, query, header, formData, body)
  let scheme = call_608267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608267.url(scheme.get, call_608267.host, call_608267.base,
                         call_608267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608267, url, valid)

proc call*(call_608268: Call_GetGetGroupPolicy_608253; GroupName: string;
          PolicyName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608269 = newJObject()
  add(query_608269, "GroupName", newJString(GroupName))
  add(query_608269, "PolicyName", newJString(PolicyName))
  add(query_608269, "Action", newJString(Action))
  add(query_608269, "Version", newJString(Version))
  result = call_608268.call(nil, query_608269, nil, nil, nil)

var getGetGroupPolicy* = Call_GetGetGroupPolicy_608253(name: "getGetGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetGroupPolicy", validator: validate_GetGetGroupPolicy_608254,
    base: "/", url: url_GetGetGroupPolicy_608255,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetInstanceProfile_608304 = ref object of OpenApiRestCall_605589
proc url_PostGetInstanceProfile_608306(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetInstanceProfile_608305(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608307 = query.getOrDefault("Action")
  valid_608307 = validateParameter(valid_608307, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_608307 != nil:
    section.add "Action", valid_608307
  var valid_608308 = query.getOrDefault("Version")
  valid_608308 = validateParameter(valid_608308, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608308 != nil:
    section.add "Version", valid_608308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608309 = header.getOrDefault("X-Amz-Signature")
  valid_608309 = validateParameter(valid_608309, JString, required = false,
                                 default = nil)
  if valid_608309 != nil:
    section.add "X-Amz-Signature", valid_608309
  var valid_608310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608310 = validateParameter(valid_608310, JString, required = false,
                                 default = nil)
  if valid_608310 != nil:
    section.add "X-Amz-Content-Sha256", valid_608310
  var valid_608311 = header.getOrDefault("X-Amz-Date")
  valid_608311 = validateParameter(valid_608311, JString, required = false,
                                 default = nil)
  if valid_608311 != nil:
    section.add "X-Amz-Date", valid_608311
  var valid_608312 = header.getOrDefault("X-Amz-Credential")
  valid_608312 = validateParameter(valid_608312, JString, required = false,
                                 default = nil)
  if valid_608312 != nil:
    section.add "X-Amz-Credential", valid_608312
  var valid_608313 = header.getOrDefault("X-Amz-Security-Token")
  valid_608313 = validateParameter(valid_608313, JString, required = false,
                                 default = nil)
  if valid_608313 != nil:
    section.add "X-Amz-Security-Token", valid_608313
  var valid_608314 = header.getOrDefault("X-Amz-Algorithm")
  valid_608314 = validateParameter(valid_608314, JString, required = false,
                                 default = nil)
  if valid_608314 != nil:
    section.add "X-Amz-Algorithm", valid_608314
  var valid_608315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608315 = validateParameter(valid_608315, JString, required = false,
                                 default = nil)
  if valid_608315 != nil:
    section.add "X-Amz-SignedHeaders", valid_608315
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_608316 = formData.getOrDefault("InstanceProfileName")
  valid_608316 = validateParameter(valid_608316, JString, required = true,
                                 default = nil)
  if valid_608316 != nil:
    section.add "InstanceProfileName", valid_608316
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608317: Call_PostGetInstanceProfile_608304; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_608317.validator(path, query, header, formData, body)
  let scheme = call_608317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608317.url(scheme.get, call_608317.host, call_608317.base,
                         call_608317.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608317, url, valid)

proc call*(call_608318: Call_PostGetInstanceProfile_608304;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_608319 = newJObject()
  var formData_608320 = newJObject()
  add(query_608319, "Action", newJString(Action))
  add(formData_608320, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_608319, "Version", newJString(Version))
  result = call_608318.call(nil, query_608319, nil, formData_608320, nil)

var postGetInstanceProfile* = Call_PostGetInstanceProfile_608304(
    name: "postGetInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_PostGetInstanceProfile_608305, base: "/",
    url: url_PostGetInstanceProfile_608306, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetInstanceProfile_608288 = ref object of OpenApiRestCall_605589
proc url_GetGetInstanceProfile_608290(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetInstanceProfile_608289(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608291 = query.getOrDefault("Action")
  valid_608291 = validateParameter(valid_608291, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_608291 != nil:
    section.add "Action", valid_608291
  var valid_608292 = query.getOrDefault("InstanceProfileName")
  valid_608292 = validateParameter(valid_608292, JString, required = true,
                                 default = nil)
  if valid_608292 != nil:
    section.add "InstanceProfileName", valid_608292
  var valid_608293 = query.getOrDefault("Version")
  valid_608293 = validateParameter(valid_608293, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608293 != nil:
    section.add "Version", valid_608293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608294 = header.getOrDefault("X-Amz-Signature")
  valid_608294 = validateParameter(valid_608294, JString, required = false,
                                 default = nil)
  if valid_608294 != nil:
    section.add "X-Amz-Signature", valid_608294
  var valid_608295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608295 = validateParameter(valid_608295, JString, required = false,
                                 default = nil)
  if valid_608295 != nil:
    section.add "X-Amz-Content-Sha256", valid_608295
  var valid_608296 = header.getOrDefault("X-Amz-Date")
  valid_608296 = validateParameter(valid_608296, JString, required = false,
                                 default = nil)
  if valid_608296 != nil:
    section.add "X-Amz-Date", valid_608296
  var valid_608297 = header.getOrDefault("X-Amz-Credential")
  valid_608297 = validateParameter(valid_608297, JString, required = false,
                                 default = nil)
  if valid_608297 != nil:
    section.add "X-Amz-Credential", valid_608297
  var valid_608298 = header.getOrDefault("X-Amz-Security-Token")
  valid_608298 = validateParameter(valid_608298, JString, required = false,
                                 default = nil)
  if valid_608298 != nil:
    section.add "X-Amz-Security-Token", valid_608298
  var valid_608299 = header.getOrDefault("X-Amz-Algorithm")
  valid_608299 = validateParameter(valid_608299, JString, required = false,
                                 default = nil)
  if valid_608299 != nil:
    section.add "X-Amz-Algorithm", valid_608299
  var valid_608300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608300 = validateParameter(valid_608300, JString, required = false,
                                 default = nil)
  if valid_608300 != nil:
    section.add "X-Amz-SignedHeaders", valid_608300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608301: Call_GetGetInstanceProfile_608288; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_608301.validator(path, query, header, formData, body)
  let scheme = call_608301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608301.url(scheme.get, call_608301.host, call_608301.base,
                         call_608301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608301, url, valid)

proc call*(call_608302: Call_GetGetInstanceProfile_608288;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_608303 = newJObject()
  add(query_608303, "Action", newJString(Action))
  add(query_608303, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_608303, "Version", newJString(Version))
  result = call_608302.call(nil, query_608303, nil, nil, nil)

var getGetInstanceProfile* = Call_GetGetInstanceProfile_608288(
    name: "getGetInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_GetGetInstanceProfile_608289, base: "/",
    url: url_GetGetInstanceProfile_608290, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetLoginProfile_608337 = ref object of OpenApiRestCall_605589
proc url_PostGetLoginProfile_608339(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetLoginProfile_608338(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608340 = query.getOrDefault("Action")
  valid_608340 = validateParameter(valid_608340, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_608340 != nil:
    section.add "Action", valid_608340
  var valid_608341 = query.getOrDefault("Version")
  valid_608341 = validateParameter(valid_608341, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608341 != nil:
    section.add "Version", valid_608341
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608342 = header.getOrDefault("X-Amz-Signature")
  valid_608342 = validateParameter(valid_608342, JString, required = false,
                                 default = nil)
  if valid_608342 != nil:
    section.add "X-Amz-Signature", valid_608342
  var valid_608343 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608343 = validateParameter(valid_608343, JString, required = false,
                                 default = nil)
  if valid_608343 != nil:
    section.add "X-Amz-Content-Sha256", valid_608343
  var valid_608344 = header.getOrDefault("X-Amz-Date")
  valid_608344 = validateParameter(valid_608344, JString, required = false,
                                 default = nil)
  if valid_608344 != nil:
    section.add "X-Amz-Date", valid_608344
  var valid_608345 = header.getOrDefault("X-Amz-Credential")
  valid_608345 = validateParameter(valid_608345, JString, required = false,
                                 default = nil)
  if valid_608345 != nil:
    section.add "X-Amz-Credential", valid_608345
  var valid_608346 = header.getOrDefault("X-Amz-Security-Token")
  valid_608346 = validateParameter(valid_608346, JString, required = false,
                                 default = nil)
  if valid_608346 != nil:
    section.add "X-Amz-Security-Token", valid_608346
  var valid_608347 = header.getOrDefault("X-Amz-Algorithm")
  valid_608347 = validateParameter(valid_608347, JString, required = false,
                                 default = nil)
  if valid_608347 != nil:
    section.add "X-Amz-Algorithm", valid_608347
  var valid_608348 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608348 = validateParameter(valid_608348, JString, required = false,
                                 default = nil)
  if valid_608348 != nil:
    section.add "X-Amz-SignedHeaders", valid_608348
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_608349 = formData.getOrDefault("UserName")
  valid_608349 = validateParameter(valid_608349, JString, required = true,
                                 default = nil)
  if valid_608349 != nil:
    section.add "UserName", valid_608349
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608350: Call_PostGetLoginProfile_608337; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_608350.validator(path, query, header, formData, body)
  let scheme = call_608350.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608350.url(scheme.get, call_608350.host, call_608350.base,
                         call_608350.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608350, url, valid)

proc call*(call_608351: Call_PostGetLoginProfile_608337; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608352 = newJObject()
  var formData_608353 = newJObject()
  add(formData_608353, "UserName", newJString(UserName))
  add(query_608352, "Action", newJString(Action))
  add(query_608352, "Version", newJString(Version))
  result = call_608351.call(nil, query_608352, nil, formData_608353, nil)

var postGetLoginProfile* = Call_PostGetLoginProfile_608337(
    name: "postGetLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetLoginProfile",
    validator: validate_PostGetLoginProfile_608338, base: "/",
    url: url_PostGetLoginProfile_608339, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetLoginProfile_608321 = ref object of OpenApiRestCall_605589
proc url_GetGetLoginProfile_608323(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetLoginProfile_608322(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_608324 = query.getOrDefault("UserName")
  valid_608324 = validateParameter(valid_608324, JString, required = true,
                                 default = nil)
  if valid_608324 != nil:
    section.add "UserName", valid_608324
  var valid_608325 = query.getOrDefault("Action")
  valid_608325 = validateParameter(valid_608325, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_608325 != nil:
    section.add "Action", valid_608325
  var valid_608326 = query.getOrDefault("Version")
  valid_608326 = validateParameter(valid_608326, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608326 != nil:
    section.add "Version", valid_608326
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608327 = header.getOrDefault("X-Amz-Signature")
  valid_608327 = validateParameter(valid_608327, JString, required = false,
                                 default = nil)
  if valid_608327 != nil:
    section.add "X-Amz-Signature", valid_608327
  var valid_608328 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608328 = validateParameter(valid_608328, JString, required = false,
                                 default = nil)
  if valid_608328 != nil:
    section.add "X-Amz-Content-Sha256", valid_608328
  var valid_608329 = header.getOrDefault("X-Amz-Date")
  valid_608329 = validateParameter(valid_608329, JString, required = false,
                                 default = nil)
  if valid_608329 != nil:
    section.add "X-Amz-Date", valid_608329
  var valid_608330 = header.getOrDefault("X-Amz-Credential")
  valid_608330 = validateParameter(valid_608330, JString, required = false,
                                 default = nil)
  if valid_608330 != nil:
    section.add "X-Amz-Credential", valid_608330
  var valid_608331 = header.getOrDefault("X-Amz-Security-Token")
  valid_608331 = validateParameter(valid_608331, JString, required = false,
                                 default = nil)
  if valid_608331 != nil:
    section.add "X-Amz-Security-Token", valid_608331
  var valid_608332 = header.getOrDefault("X-Amz-Algorithm")
  valid_608332 = validateParameter(valid_608332, JString, required = false,
                                 default = nil)
  if valid_608332 != nil:
    section.add "X-Amz-Algorithm", valid_608332
  var valid_608333 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608333 = validateParameter(valid_608333, JString, required = false,
                                 default = nil)
  if valid_608333 != nil:
    section.add "X-Amz-SignedHeaders", valid_608333
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608334: Call_GetGetLoginProfile_608321; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_608334.validator(path, query, header, formData, body)
  let scheme = call_608334.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608334.url(scheme.get, call_608334.host, call_608334.base,
                         call_608334.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608334, url, valid)

proc call*(call_608335: Call_GetGetLoginProfile_608321; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608336 = newJObject()
  add(query_608336, "UserName", newJString(UserName))
  add(query_608336, "Action", newJString(Action))
  add(query_608336, "Version", newJString(Version))
  result = call_608335.call(nil, query_608336, nil, nil, nil)

var getGetLoginProfile* = Call_GetGetLoginProfile_608321(
    name: "getGetLoginProfile", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetLoginProfile", validator: validate_GetGetLoginProfile_608322,
    base: "/", url: url_GetGetLoginProfile_608323,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOpenIDConnectProvider_608370 = ref object of OpenApiRestCall_605589
proc url_PostGetOpenIDConnectProvider_608372(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetOpenIDConnectProvider_608371(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608373 = query.getOrDefault("Action")
  valid_608373 = validateParameter(valid_608373, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_608373 != nil:
    section.add "Action", valid_608373
  var valid_608374 = query.getOrDefault("Version")
  valid_608374 = validateParameter(valid_608374, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608374 != nil:
    section.add "Version", valid_608374
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608375 = header.getOrDefault("X-Amz-Signature")
  valid_608375 = validateParameter(valid_608375, JString, required = false,
                                 default = nil)
  if valid_608375 != nil:
    section.add "X-Amz-Signature", valid_608375
  var valid_608376 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608376 = validateParameter(valid_608376, JString, required = false,
                                 default = nil)
  if valid_608376 != nil:
    section.add "X-Amz-Content-Sha256", valid_608376
  var valid_608377 = header.getOrDefault("X-Amz-Date")
  valid_608377 = validateParameter(valid_608377, JString, required = false,
                                 default = nil)
  if valid_608377 != nil:
    section.add "X-Amz-Date", valid_608377
  var valid_608378 = header.getOrDefault("X-Amz-Credential")
  valid_608378 = validateParameter(valid_608378, JString, required = false,
                                 default = nil)
  if valid_608378 != nil:
    section.add "X-Amz-Credential", valid_608378
  var valid_608379 = header.getOrDefault("X-Amz-Security-Token")
  valid_608379 = validateParameter(valid_608379, JString, required = false,
                                 default = nil)
  if valid_608379 != nil:
    section.add "X-Amz-Security-Token", valid_608379
  var valid_608380 = header.getOrDefault("X-Amz-Algorithm")
  valid_608380 = validateParameter(valid_608380, JString, required = false,
                                 default = nil)
  if valid_608380 != nil:
    section.add "X-Amz-Algorithm", valid_608380
  var valid_608381 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608381 = validateParameter(valid_608381, JString, required = false,
                                 default = nil)
  if valid_608381 != nil:
    section.add "X-Amz-SignedHeaders", valid_608381
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_608382 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_608382 = validateParameter(valid_608382, JString, required = true,
                                 default = nil)
  if valid_608382 != nil:
    section.add "OpenIDConnectProviderArn", valid_608382
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608383: Call_PostGetOpenIDConnectProvider_608370; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_608383.validator(path, query, header, formData, body)
  let scheme = call_608383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608383.url(scheme.get, call_608383.host, call_608383.base,
                         call_608383.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608383, url, valid)

proc call*(call_608384: Call_PostGetOpenIDConnectProvider_608370;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_608385 = newJObject()
  var formData_608386 = newJObject()
  add(query_608385, "Action", newJString(Action))
  add(query_608385, "Version", newJString(Version))
  add(formData_608386, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_608384.call(nil, query_608385, nil, formData_608386, nil)

var postGetOpenIDConnectProvider* = Call_PostGetOpenIDConnectProvider_608370(
    name: "postGetOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_PostGetOpenIDConnectProvider_608371, base: "/",
    url: url_PostGetOpenIDConnectProvider_608372,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOpenIDConnectProvider_608354 = ref object of OpenApiRestCall_605589
proc url_GetGetOpenIDConnectProvider_608356(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetOpenIDConnectProvider_608355(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_608357 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_608357 = validateParameter(valid_608357, JString, required = true,
                                 default = nil)
  if valid_608357 != nil:
    section.add "OpenIDConnectProviderArn", valid_608357
  var valid_608358 = query.getOrDefault("Action")
  valid_608358 = validateParameter(valid_608358, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_608358 != nil:
    section.add "Action", valid_608358
  var valid_608359 = query.getOrDefault("Version")
  valid_608359 = validateParameter(valid_608359, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608359 != nil:
    section.add "Version", valid_608359
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608360 = header.getOrDefault("X-Amz-Signature")
  valid_608360 = validateParameter(valid_608360, JString, required = false,
                                 default = nil)
  if valid_608360 != nil:
    section.add "X-Amz-Signature", valid_608360
  var valid_608361 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608361 = validateParameter(valid_608361, JString, required = false,
                                 default = nil)
  if valid_608361 != nil:
    section.add "X-Amz-Content-Sha256", valid_608361
  var valid_608362 = header.getOrDefault("X-Amz-Date")
  valid_608362 = validateParameter(valid_608362, JString, required = false,
                                 default = nil)
  if valid_608362 != nil:
    section.add "X-Amz-Date", valid_608362
  var valid_608363 = header.getOrDefault("X-Amz-Credential")
  valid_608363 = validateParameter(valid_608363, JString, required = false,
                                 default = nil)
  if valid_608363 != nil:
    section.add "X-Amz-Credential", valid_608363
  var valid_608364 = header.getOrDefault("X-Amz-Security-Token")
  valid_608364 = validateParameter(valid_608364, JString, required = false,
                                 default = nil)
  if valid_608364 != nil:
    section.add "X-Amz-Security-Token", valid_608364
  var valid_608365 = header.getOrDefault("X-Amz-Algorithm")
  valid_608365 = validateParameter(valid_608365, JString, required = false,
                                 default = nil)
  if valid_608365 != nil:
    section.add "X-Amz-Algorithm", valid_608365
  var valid_608366 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608366 = validateParameter(valid_608366, JString, required = false,
                                 default = nil)
  if valid_608366 != nil:
    section.add "X-Amz-SignedHeaders", valid_608366
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608367: Call_GetGetOpenIDConnectProvider_608354; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_608367.validator(path, query, header, formData, body)
  let scheme = call_608367.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608367.url(scheme.get, call_608367.host, call_608367.base,
                         call_608367.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608367, url, valid)

proc call*(call_608368: Call_GetGetOpenIDConnectProvider_608354;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608369 = newJObject()
  add(query_608369, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_608369, "Action", newJString(Action))
  add(query_608369, "Version", newJString(Version))
  result = call_608368.call(nil, query_608369, nil, nil, nil)

var getGetOpenIDConnectProvider* = Call_GetGetOpenIDConnectProvider_608354(
    name: "getGetOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_GetGetOpenIDConnectProvider_608355, base: "/",
    url: url_GetGetOpenIDConnectProvider_608356,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOrganizationsAccessReport_608406 = ref object of OpenApiRestCall_605589
proc url_PostGetOrganizationsAccessReport_608408(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetOrganizationsAccessReport_608407(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608409 = query.getOrDefault("Action")
  valid_608409 = validateParameter(valid_608409, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_608409 != nil:
    section.add "Action", valid_608409
  var valid_608410 = query.getOrDefault("Version")
  valid_608410 = validateParameter(valid_608410, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608410 != nil:
    section.add "Version", valid_608410
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608411 = header.getOrDefault("X-Amz-Signature")
  valid_608411 = validateParameter(valid_608411, JString, required = false,
                                 default = nil)
  if valid_608411 != nil:
    section.add "X-Amz-Signature", valid_608411
  var valid_608412 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608412 = validateParameter(valid_608412, JString, required = false,
                                 default = nil)
  if valid_608412 != nil:
    section.add "X-Amz-Content-Sha256", valid_608412
  var valid_608413 = header.getOrDefault("X-Amz-Date")
  valid_608413 = validateParameter(valid_608413, JString, required = false,
                                 default = nil)
  if valid_608413 != nil:
    section.add "X-Amz-Date", valid_608413
  var valid_608414 = header.getOrDefault("X-Amz-Credential")
  valid_608414 = validateParameter(valid_608414, JString, required = false,
                                 default = nil)
  if valid_608414 != nil:
    section.add "X-Amz-Credential", valid_608414
  var valid_608415 = header.getOrDefault("X-Amz-Security-Token")
  valid_608415 = validateParameter(valid_608415, JString, required = false,
                                 default = nil)
  if valid_608415 != nil:
    section.add "X-Amz-Security-Token", valid_608415
  var valid_608416 = header.getOrDefault("X-Amz-Algorithm")
  valid_608416 = validateParameter(valid_608416, JString, required = false,
                                 default = nil)
  if valid_608416 != nil:
    section.add "X-Amz-Algorithm", valid_608416
  var valid_608417 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608417 = validateParameter(valid_608417, JString, required = false,
                                 default = nil)
  if valid_608417 != nil:
    section.add "X-Amz-SignedHeaders", valid_608417
  result.add "header", section
  ## parameters in `formData` object:
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  section = newJObject()
  var valid_608418 = formData.getOrDefault("SortKey")
  valid_608418 = validateParameter(valid_608418, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_608418 != nil:
    section.add "SortKey", valid_608418
  var valid_608419 = formData.getOrDefault("Marker")
  valid_608419 = validateParameter(valid_608419, JString, required = false,
                                 default = nil)
  if valid_608419 != nil:
    section.add "Marker", valid_608419
  var valid_608420 = formData.getOrDefault("MaxItems")
  valid_608420 = validateParameter(valid_608420, JInt, required = false, default = nil)
  if valid_608420 != nil:
    section.add "MaxItems", valid_608420
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_608421 = formData.getOrDefault("JobId")
  valid_608421 = validateParameter(valid_608421, JString, required = true,
                                 default = nil)
  if valid_608421 != nil:
    section.add "JobId", valid_608421
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608422: Call_PostGetOrganizationsAccessReport_608406;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_608422.validator(path, query, header, formData, body)
  let scheme = call_608422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608422.url(scheme.get, call_608422.host, call_608422.base,
                         call_608422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608422, url, valid)

proc call*(call_608423: Call_PostGetOrganizationsAccessReport_608406;
          JobId: string; SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          Marker: string = ""; Action: string = "GetOrganizationsAccessReport";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   Version: string (required)
  var query_608424 = newJObject()
  var formData_608425 = newJObject()
  add(formData_608425, "SortKey", newJString(SortKey))
  add(formData_608425, "Marker", newJString(Marker))
  add(query_608424, "Action", newJString(Action))
  add(formData_608425, "MaxItems", newJInt(MaxItems))
  add(formData_608425, "JobId", newJString(JobId))
  add(query_608424, "Version", newJString(Version))
  result = call_608423.call(nil, query_608424, nil, formData_608425, nil)

var postGetOrganizationsAccessReport* = Call_PostGetOrganizationsAccessReport_608406(
    name: "postGetOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_PostGetOrganizationsAccessReport_608407, base: "/",
    url: url_PostGetOrganizationsAccessReport_608408,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOrganizationsAccessReport_608387 = ref object of OpenApiRestCall_605589
proc url_GetGetOrganizationsAccessReport_608389(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetOrganizationsAccessReport_608388(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  section = newJObject()
  var valid_608390 = query.getOrDefault("Marker")
  valid_608390 = validateParameter(valid_608390, JString, required = false,
                                 default = nil)
  if valid_608390 != nil:
    section.add "Marker", valid_608390
  var valid_608391 = query.getOrDefault("SortKey")
  valid_608391 = validateParameter(valid_608391, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_608391 != nil:
    section.add "SortKey", valid_608391
  var valid_608392 = query.getOrDefault("MaxItems")
  valid_608392 = validateParameter(valid_608392, JInt, required = false, default = nil)
  if valid_608392 != nil:
    section.add "MaxItems", valid_608392
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608393 = query.getOrDefault("Action")
  valid_608393 = validateParameter(valid_608393, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_608393 != nil:
    section.add "Action", valid_608393
  var valid_608394 = query.getOrDefault("Version")
  valid_608394 = validateParameter(valid_608394, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608394 != nil:
    section.add "Version", valid_608394
  var valid_608395 = query.getOrDefault("JobId")
  valid_608395 = validateParameter(valid_608395, JString, required = true,
                                 default = nil)
  if valid_608395 != nil:
    section.add "JobId", valid_608395
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608396 = header.getOrDefault("X-Amz-Signature")
  valid_608396 = validateParameter(valid_608396, JString, required = false,
                                 default = nil)
  if valid_608396 != nil:
    section.add "X-Amz-Signature", valid_608396
  var valid_608397 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608397 = validateParameter(valid_608397, JString, required = false,
                                 default = nil)
  if valid_608397 != nil:
    section.add "X-Amz-Content-Sha256", valid_608397
  var valid_608398 = header.getOrDefault("X-Amz-Date")
  valid_608398 = validateParameter(valid_608398, JString, required = false,
                                 default = nil)
  if valid_608398 != nil:
    section.add "X-Amz-Date", valid_608398
  var valid_608399 = header.getOrDefault("X-Amz-Credential")
  valid_608399 = validateParameter(valid_608399, JString, required = false,
                                 default = nil)
  if valid_608399 != nil:
    section.add "X-Amz-Credential", valid_608399
  var valid_608400 = header.getOrDefault("X-Amz-Security-Token")
  valid_608400 = validateParameter(valid_608400, JString, required = false,
                                 default = nil)
  if valid_608400 != nil:
    section.add "X-Amz-Security-Token", valid_608400
  var valid_608401 = header.getOrDefault("X-Amz-Algorithm")
  valid_608401 = validateParameter(valid_608401, JString, required = false,
                                 default = nil)
  if valid_608401 != nil:
    section.add "X-Amz-Algorithm", valid_608401
  var valid_608402 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608402 = validateParameter(valid_608402, JString, required = false,
                                 default = nil)
  if valid_608402 != nil:
    section.add "X-Amz-SignedHeaders", valid_608402
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608403: Call_GetGetOrganizationsAccessReport_608387;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_608403.validator(path, query, header, formData, body)
  let scheme = call_608403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608403.url(scheme.get, call_608403.host, call_608403.base,
                         call_608403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608403, url, valid)

proc call*(call_608404: Call_GetGetOrganizationsAccessReport_608387; JobId: string;
          Marker: string = ""; SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          MaxItems: int = 0; Action: string = "GetOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  var query_608405 = newJObject()
  add(query_608405, "Marker", newJString(Marker))
  add(query_608405, "SortKey", newJString(SortKey))
  add(query_608405, "MaxItems", newJInt(MaxItems))
  add(query_608405, "Action", newJString(Action))
  add(query_608405, "Version", newJString(Version))
  add(query_608405, "JobId", newJString(JobId))
  result = call_608404.call(nil, query_608405, nil, nil, nil)

var getGetOrganizationsAccessReport* = Call_GetGetOrganizationsAccessReport_608387(
    name: "getGetOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_GetGetOrganizationsAccessReport_608388, base: "/",
    url: url_GetGetOrganizationsAccessReport_608389,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicy_608442 = ref object of OpenApiRestCall_605589
proc url_PostGetPolicy_608444(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetPolicy_608443(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608445 = query.getOrDefault("Action")
  valid_608445 = validateParameter(valid_608445, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_608445 != nil:
    section.add "Action", valid_608445
  var valid_608446 = query.getOrDefault("Version")
  valid_608446 = validateParameter(valid_608446, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608446 != nil:
    section.add "Version", valid_608446
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608447 = header.getOrDefault("X-Amz-Signature")
  valid_608447 = validateParameter(valid_608447, JString, required = false,
                                 default = nil)
  if valid_608447 != nil:
    section.add "X-Amz-Signature", valid_608447
  var valid_608448 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608448 = validateParameter(valid_608448, JString, required = false,
                                 default = nil)
  if valid_608448 != nil:
    section.add "X-Amz-Content-Sha256", valid_608448
  var valid_608449 = header.getOrDefault("X-Amz-Date")
  valid_608449 = validateParameter(valid_608449, JString, required = false,
                                 default = nil)
  if valid_608449 != nil:
    section.add "X-Amz-Date", valid_608449
  var valid_608450 = header.getOrDefault("X-Amz-Credential")
  valid_608450 = validateParameter(valid_608450, JString, required = false,
                                 default = nil)
  if valid_608450 != nil:
    section.add "X-Amz-Credential", valid_608450
  var valid_608451 = header.getOrDefault("X-Amz-Security-Token")
  valid_608451 = validateParameter(valid_608451, JString, required = false,
                                 default = nil)
  if valid_608451 != nil:
    section.add "X-Amz-Security-Token", valid_608451
  var valid_608452 = header.getOrDefault("X-Amz-Algorithm")
  valid_608452 = validateParameter(valid_608452, JString, required = false,
                                 default = nil)
  if valid_608452 != nil:
    section.add "X-Amz-Algorithm", valid_608452
  var valid_608453 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608453 = validateParameter(valid_608453, JString, required = false,
                                 default = nil)
  if valid_608453 != nil:
    section.add "X-Amz-SignedHeaders", valid_608453
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_608454 = formData.getOrDefault("PolicyArn")
  valid_608454 = validateParameter(valid_608454, JString, required = true,
                                 default = nil)
  if valid_608454 != nil:
    section.add "PolicyArn", valid_608454
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608455: Call_PostGetPolicy_608442; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_608455.validator(path, query, header, formData, body)
  let scheme = call_608455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608455.url(scheme.get, call_608455.host, call_608455.base,
                         call_608455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608455, url, valid)

proc call*(call_608456: Call_PostGetPolicy_608442; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608457 = newJObject()
  var formData_608458 = newJObject()
  add(formData_608458, "PolicyArn", newJString(PolicyArn))
  add(query_608457, "Action", newJString(Action))
  add(query_608457, "Version", newJString(Version))
  result = call_608456.call(nil, query_608457, nil, formData_608458, nil)

var postGetPolicy* = Call_PostGetPolicy_608442(name: "postGetPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_PostGetPolicy_608443,
    base: "/", url: url_PostGetPolicy_608444, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicy_608426 = ref object of OpenApiRestCall_605589
proc url_GetGetPolicy_608428(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetPolicy_608427(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_608429 = query.getOrDefault("PolicyArn")
  valid_608429 = validateParameter(valid_608429, JString, required = true,
                                 default = nil)
  if valid_608429 != nil:
    section.add "PolicyArn", valid_608429
  var valid_608430 = query.getOrDefault("Action")
  valid_608430 = validateParameter(valid_608430, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_608430 != nil:
    section.add "Action", valid_608430
  var valid_608431 = query.getOrDefault("Version")
  valid_608431 = validateParameter(valid_608431, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608431 != nil:
    section.add "Version", valid_608431
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608432 = header.getOrDefault("X-Amz-Signature")
  valid_608432 = validateParameter(valid_608432, JString, required = false,
                                 default = nil)
  if valid_608432 != nil:
    section.add "X-Amz-Signature", valid_608432
  var valid_608433 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608433 = validateParameter(valid_608433, JString, required = false,
                                 default = nil)
  if valid_608433 != nil:
    section.add "X-Amz-Content-Sha256", valid_608433
  var valid_608434 = header.getOrDefault("X-Amz-Date")
  valid_608434 = validateParameter(valid_608434, JString, required = false,
                                 default = nil)
  if valid_608434 != nil:
    section.add "X-Amz-Date", valid_608434
  var valid_608435 = header.getOrDefault("X-Amz-Credential")
  valid_608435 = validateParameter(valid_608435, JString, required = false,
                                 default = nil)
  if valid_608435 != nil:
    section.add "X-Amz-Credential", valid_608435
  var valid_608436 = header.getOrDefault("X-Amz-Security-Token")
  valid_608436 = validateParameter(valid_608436, JString, required = false,
                                 default = nil)
  if valid_608436 != nil:
    section.add "X-Amz-Security-Token", valid_608436
  var valid_608437 = header.getOrDefault("X-Amz-Algorithm")
  valid_608437 = validateParameter(valid_608437, JString, required = false,
                                 default = nil)
  if valid_608437 != nil:
    section.add "X-Amz-Algorithm", valid_608437
  var valid_608438 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608438 = validateParameter(valid_608438, JString, required = false,
                                 default = nil)
  if valid_608438 != nil:
    section.add "X-Amz-SignedHeaders", valid_608438
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608439: Call_GetGetPolicy_608426; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_608439.validator(path, query, header, formData, body)
  let scheme = call_608439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608439.url(scheme.get, call_608439.host, call_608439.base,
                         call_608439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608439, url, valid)

proc call*(call_608440: Call_GetGetPolicy_608426; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608441 = newJObject()
  add(query_608441, "PolicyArn", newJString(PolicyArn))
  add(query_608441, "Action", newJString(Action))
  add(query_608441, "Version", newJString(Version))
  result = call_608440.call(nil, query_608441, nil, nil, nil)

var getGetPolicy* = Call_GetGetPolicy_608426(name: "getGetPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_GetGetPolicy_608427, base: "/",
    url: url_GetGetPolicy_608428, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicyVersion_608476 = ref object of OpenApiRestCall_605589
proc url_PostGetPolicyVersion_608478(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetPolicyVersion_608477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608479 = query.getOrDefault("Action")
  valid_608479 = validateParameter(valid_608479, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_608479 != nil:
    section.add "Action", valid_608479
  var valid_608480 = query.getOrDefault("Version")
  valid_608480 = validateParameter(valid_608480, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608480 != nil:
    section.add "Version", valid_608480
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608481 = header.getOrDefault("X-Amz-Signature")
  valid_608481 = validateParameter(valid_608481, JString, required = false,
                                 default = nil)
  if valid_608481 != nil:
    section.add "X-Amz-Signature", valid_608481
  var valid_608482 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608482 = validateParameter(valid_608482, JString, required = false,
                                 default = nil)
  if valid_608482 != nil:
    section.add "X-Amz-Content-Sha256", valid_608482
  var valid_608483 = header.getOrDefault("X-Amz-Date")
  valid_608483 = validateParameter(valid_608483, JString, required = false,
                                 default = nil)
  if valid_608483 != nil:
    section.add "X-Amz-Date", valid_608483
  var valid_608484 = header.getOrDefault("X-Amz-Credential")
  valid_608484 = validateParameter(valid_608484, JString, required = false,
                                 default = nil)
  if valid_608484 != nil:
    section.add "X-Amz-Credential", valid_608484
  var valid_608485 = header.getOrDefault("X-Amz-Security-Token")
  valid_608485 = validateParameter(valid_608485, JString, required = false,
                                 default = nil)
  if valid_608485 != nil:
    section.add "X-Amz-Security-Token", valid_608485
  var valid_608486 = header.getOrDefault("X-Amz-Algorithm")
  valid_608486 = validateParameter(valid_608486, JString, required = false,
                                 default = nil)
  if valid_608486 != nil:
    section.add "X-Amz-Algorithm", valid_608486
  var valid_608487 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608487 = validateParameter(valid_608487, JString, required = false,
                                 default = nil)
  if valid_608487 != nil:
    section.add "X-Amz-SignedHeaders", valid_608487
  result.add "header", section
  ## parameters in `formData` object:
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `VersionId` field"
  var valid_608488 = formData.getOrDefault("VersionId")
  valid_608488 = validateParameter(valid_608488, JString, required = true,
                                 default = nil)
  if valid_608488 != nil:
    section.add "VersionId", valid_608488
  var valid_608489 = formData.getOrDefault("PolicyArn")
  valid_608489 = validateParameter(valid_608489, JString, required = true,
                                 default = nil)
  if valid_608489 != nil:
    section.add "PolicyArn", valid_608489
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608490: Call_PostGetPolicyVersion_608476; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_608490.validator(path, query, header, formData, body)
  let scheme = call_608490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608490.url(scheme.get, call_608490.host, call_608490.base,
                         call_608490.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608490, url, valid)

proc call*(call_608491: Call_PostGetPolicyVersion_608476; VersionId: string;
          PolicyArn: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608492 = newJObject()
  var formData_608493 = newJObject()
  add(formData_608493, "VersionId", newJString(VersionId))
  add(formData_608493, "PolicyArn", newJString(PolicyArn))
  add(query_608492, "Action", newJString(Action))
  add(query_608492, "Version", newJString(Version))
  result = call_608491.call(nil, query_608492, nil, formData_608493, nil)

var postGetPolicyVersion* = Call_PostGetPolicyVersion_608476(
    name: "postGetPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_PostGetPolicyVersion_608477, base: "/",
    url: url_PostGetPolicyVersion_608478, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicyVersion_608459 = ref object of OpenApiRestCall_605589
proc url_GetGetPolicyVersion_608461(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetPolicyVersion_608460(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `VersionId` field"
  var valid_608462 = query.getOrDefault("VersionId")
  valid_608462 = validateParameter(valid_608462, JString, required = true,
                                 default = nil)
  if valid_608462 != nil:
    section.add "VersionId", valid_608462
  var valid_608463 = query.getOrDefault("PolicyArn")
  valid_608463 = validateParameter(valid_608463, JString, required = true,
                                 default = nil)
  if valid_608463 != nil:
    section.add "PolicyArn", valid_608463
  var valid_608464 = query.getOrDefault("Action")
  valid_608464 = validateParameter(valid_608464, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_608464 != nil:
    section.add "Action", valid_608464
  var valid_608465 = query.getOrDefault("Version")
  valid_608465 = validateParameter(valid_608465, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608465 != nil:
    section.add "Version", valid_608465
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608466 = header.getOrDefault("X-Amz-Signature")
  valid_608466 = validateParameter(valid_608466, JString, required = false,
                                 default = nil)
  if valid_608466 != nil:
    section.add "X-Amz-Signature", valid_608466
  var valid_608467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608467 = validateParameter(valid_608467, JString, required = false,
                                 default = nil)
  if valid_608467 != nil:
    section.add "X-Amz-Content-Sha256", valid_608467
  var valid_608468 = header.getOrDefault("X-Amz-Date")
  valid_608468 = validateParameter(valid_608468, JString, required = false,
                                 default = nil)
  if valid_608468 != nil:
    section.add "X-Amz-Date", valid_608468
  var valid_608469 = header.getOrDefault("X-Amz-Credential")
  valid_608469 = validateParameter(valid_608469, JString, required = false,
                                 default = nil)
  if valid_608469 != nil:
    section.add "X-Amz-Credential", valid_608469
  var valid_608470 = header.getOrDefault("X-Amz-Security-Token")
  valid_608470 = validateParameter(valid_608470, JString, required = false,
                                 default = nil)
  if valid_608470 != nil:
    section.add "X-Amz-Security-Token", valid_608470
  var valid_608471 = header.getOrDefault("X-Amz-Algorithm")
  valid_608471 = validateParameter(valid_608471, JString, required = false,
                                 default = nil)
  if valid_608471 != nil:
    section.add "X-Amz-Algorithm", valid_608471
  var valid_608472 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608472 = validateParameter(valid_608472, JString, required = false,
                                 default = nil)
  if valid_608472 != nil:
    section.add "X-Amz-SignedHeaders", valid_608472
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608473: Call_GetGetPolicyVersion_608459; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_608473.validator(path, query, header, formData, body)
  let scheme = call_608473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608473.url(scheme.get, call_608473.host, call_608473.base,
                         call_608473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608473, url, valid)

proc call*(call_608474: Call_GetGetPolicyVersion_608459; VersionId: string;
          PolicyArn: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608475 = newJObject()
  add(query_608475, "VersionId", newJString(VersionId))
  add(query_608475, "PolicyArn", newJString(PolicyArn))
  add(query_608475, "Action", newJString(Action))
  add(query_608475, "Version", newJString(Version))
  result = call_608474.call(nil, query_608475, nil, nil, nil)

var getGetPolicyVersion* = Call_GetGetPolicyVersion_608459(
    name: "getGetPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_GetGetPolicyVersion_608460, base: "/",
    url: url_GetGetPolicyVersion_608461, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRole_608510 = ref object of OpenApiRestCall_605589
proc url_PostGetRole_608512(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetRole_608511(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608513 = query.getOrDefault("Action")
  valid_608513 = validateParameter(valid_608513, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_608513 != nil:
    section.add "Action", valid_608513
  var valid_608514 = query.getOrDefault("Version")
  valid_608514 = validateParameter(valid_608514, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608514 != nil:
    section.add "Version", valid_608514
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608515 = header.getOrDefault("X-Amz-Signature")
  valid_608515 = validateParameter(valid_608515, JString, required = false,
                                 default = nil)
  if valid_608515 != nil:
    section.add "X-Amz-Signature", valid_608515
  var valid_608516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608516 = validateParameter(valid_608516, JString, required = false,
                                 default = nil)
  if valid_608516 != nil:
    section.add "X-Amz-Content-Sha256", valid_608516
  var valid_608517 = header.getOrDefault("X-Amz-Date")
  valid_608517 = validateParameter(valid_608517, JString, required = false,
                                 default = nil)
  if valid_608517 != nil:
    section.add "X-Amz-Date", valid_608517
  var valid_608518 = header.getOrDefault("X-Amz-Credential")
  valid_608518 = validateParameter(valid_608518, JString, required = false,
                                 default = nil)
  if valid_608518 != nil:
    section.add "X-Amz-Credential", valid_608518
  var valid_608519 = header.getOrDefault("X-Amz-Security-Token")
  valid_608519 = validateParameter(valid_608519, JString, required = false,
                                 default = nil)
  if valid_608519 != nil:
    section.add "X-Amz-Security-Token", valid_608519
  var valid_608520 = header.getOrDefault("X-Amz-Algorithm")
  valid_608520 = validateParameter(valid_608520, JString, required = false,
                                 default = nil)
  if valid_608520 != nil:
    section.add "X-Amz-Algorithm", valid_608520
  var valid_608521 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608521 = validateParameter(valid_608521, JString, required = false,
                                 default = nil)
  if valid_608521 != nil:
    section.add "X-Amz-SignedHeaders", valid_608521
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_608522 = formData.getOrDefault("RoleName")
  valid_608522 = validateParameter(valid_608522, JString, required = true,
                                 default = nil)
  if valid_608522 != nil:
    section.add "RoleName", valid_608522
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608523: Call_PostGetRole_608510; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_608523.validator(path, query, header, formData, body)
  let scheme = call_608523.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608523.url(scheme.get, call_608523.host, call_608523.base,
                         call_608523.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608523, url, valid)

proc call*(call_608524: Call_PostGetRole_608510; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## postGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608525 = newJObject()
  var formData_608526 = newJObject()
  add(formData_608526, "RoleName", newJString(RoleName))
  add(query_608525, "Action", newJString(Action))
  add(query_608525, "Version", newJString(Version))
  result = call_608524.call(nil, query_608525, nil, formData_608526, nil)

var postGetRole* = Call_PostGetRole_608510(name: "postGetRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetRole",
                                        validator: validate_PostGetRole_608511,
                                        base: "/", url: url_PostGetRole_608512,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRole_608494 = ref object of OpenApiRestCall_605589
proc url_GetGetRole_608496(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetRole_608495(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_608497 = query.getOrDefault("RoleName")
  valid_608497 = validateParameter(valid_608497, JString, required = true,
                                 default = nil)
  if valid_608497 != nil:
    section.add "RoleName", valid_608497
  var valid_608498 = query.getOrDefault("Action")
  valid_608498 = validateParameter(valid_608498, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_608498 != nil:
    section.add "Action", valid_608498
  var valid_608499 = query.getOrDefault("Version")
  valid_608499 = validateParameter(valid_608499, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608499 != nil:
    section.add "Version", valid_608499
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608500 = header.getOrDefault("X-Amz-Signature")
  valid_608500 = validateParameter(valid_608500, JString, required = false,
                                 default = nil)
  if valid_608500 != nil:
    section.add "X-Amz-Signature", valid_608500
  var valid_608501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608501 = validateParameter(valid_608501, JString, required = false,
                                 default = nil)
  if valid_608501 != nil:
    section.add "X-Amz-Content-Sha256", valid_608501
  var valid_608502 = header.getOrDefault("X-Amz-Date")
  valid_608502 = validateParameter(valid_608502, JString, required = false,
                                 default = nil)
  if valid_608502 != nil:
    section.add "X-Amz-Date", valid_608502
  var valid_608503 = header.getOrDefault("X-Amz-Credential")
  valid_608503 = validateParameter(valid_608503, JString, required = false,
                                 default = nil)
  if valid_608503 != nil:
    section.add "X-Amz-Credential", valid_608503
  var valid_608504 = header.getOrDefault("X-Amz-Security-Token")
  valid_608504 = validateParameter(valid_608504, JString, required = false,
                                 default = nil)
  if valid_608504 != nil:
    section.add "X-Amz-Security-Token", valid_608504
  var valid_608505 = header.getOrDefault("X-Amz-Algorithm")
  valid_608505 = validateParameter(valid_608505, JString, required = false,
                                 default = nil)
  if valid_608505 != nil:
    section.add "X-Amz-Algorithm", valid_608505
  var valid_608506 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608506 = validateParameter(valid_608506, JString, required = false,
                                 default = nil)
  if valid_608506 != nil:
    section.add "X-Amz-SignedHeaders", valid_608506
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608507: Call_GetGetRole_608494; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_608507.validator(path, query, header, formData, body)
  let scheme = call_608507.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608507.url(scheme.get, call_608507.host, call_608507.base,
                         call_608507.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608507, url, valid)

proc call*(call_608508: Call_GetGetRole_608494; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## getGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608509 = newJObject()
  add(query_608509, "RoleName", newJString(RoleName))
  add(query_608509, "Action", newJString(Action))
  add(query_608509, "Version", newJString(Version))
  result = call_608508.call(nil, query_608509, nil, nil, nil)

var getGetRole* = Call_GetGetRole_608494(name: "getGetRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetRole",
                                      validator: validate_GetGetRole_608495,
                                      base: "/", url: url_GetGetRole_608496,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRolePolicy_608544 = ref object of OpenApiRestCall_605589
proc url_PostGetRolePolicy_608546(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetRolePolicy_608545(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608547 = query.getOrDefault("Action")
  valid_608547 = validateParameter(valid_608547, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_608547 != nil:
    section.add "Action", valid_608547
  var valid_608548 = query.getOrDefault("Version")
  valid_608548 = validateParameter(valid_608548, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608548 != nil:
    section.add "Version", valid_608548
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608549 = header.getOrDefault("X-Amz-Signature")
  valid_608549 = validateParameter(valid_608549, JString, required = false,
                                 default = nil)
  if valid_608549 != nil:
    section.add "X-Amz-Signature", valid_608549
  var valid_608550 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608550 = validateParameter(valid_608550, JString, required = false,
                                 default = nil)
  if valid_608550 != nil:
    section.add "X-Amz-Content-Sha256", valid_608550
  var valid_608551 = header.getOrDefault("X-Amz-Date")
  valid_608551 = validateParameter(valid_608551, JString, required = false,
                                 default = nil)
  if valid_608551 != nil:
    section.add "X-Amz-Date", valid_608551
  var valid_608552 = header.getOrDefault("X-Amz-Credential")
  valid_608552 = validateParameter(valid_608552, JString, required = false,
                                 default = nil)
  if valid_608552 != nil:
    section.add "X-Amz-Credential", valid_608552
  var valid_608553 = header.getOrDefault("X-Amz-Security-Token")
  valid_608553 = validateParameter(valid_608553, JString, required = false,
                                 default = nil)
  if valid_608553 != nil:
    section.add "X-Amz-Security-Token", valid_608553
  var valid_608554 = header.getOrDefault("X-Amz-Algorithm")
  valid_608554 = validateParameter(valid_608554, JString, required = false,
                                 default = nil)
  if valid_608554 != nil:
    section.add "X-Amz-Algorithm", valid_608554
  var valid_608555 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608555 = validateParameter(valid_608555, JString, required = false,
                                 default = nil)
  if valid_608555 != nil:
    section.add "X-Amz-SignedHeaders", valid_608555
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_608556 = formData.getOrDefault("RoleName")
  valid_608556 = validateParameter(valid_608556, JString, required = true,
                                 default = nil)
  if valid_608556 != nil:
    section.add "RoleName", valid_608556
  var valid_608557 = formData.getOrDefault("PolicyName")
  valid_608557 = validateParameter(valid_608557, JString, required = true,
                                 default = nil)
  if valid_608557 != nil:
    section.add "PolicyName", valid_608557
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608558: Call_PostGetRolePolicy_608544; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_608558.validator(path, query, header, formData, body)
  let scheme = call_608558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608558.url(scheme.get, call_608558.host, call_608558.base,
                         call_608558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608558, url, valid)

proc call*(call_608559: Call_PostGetRolePolicy_608544; RoleName: string;
          PolicyName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_608560 = newJObject()
  var formData_608561 = newJObject()
  add(formData_608561, "RoleName", newJString(RoleName))
  add(query_608560, "Action", newJString(Action))
  add(query_608560, "Version", newJString(Version))
  add(formData_608561, "PolicyName", newJString(PolicyName))
  result = call_608559.call(nil, query_608560, nil, formData_608561, nil)

var postGetRolePolicy* = Call_PostGetRolePolicy_608544(name: "postGetRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_PostGetRolePolicy_608545,
    base: "/", url: url_PostGetRolePolicy_608546,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRolePolicy_608527 = ref object of OpenApiRestCall_605589
proc url_GetGetRolePolicy_608529(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetRolePolicy_608528(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_608530 = query.getOrDefault("PolicyName")
  valid_608530 = validateParameter(valid_608530, JString, required = true,
                                 default = nil)
  if valid_608530 != nil:
    section.add "PolicyName", valid_608530
  var valid_608531 = query.getOrDefault("RoleName")
  valid_608531 = validateParameter(valid_608531, JString, required = true,
                                 default = nil)
  if valid_608531 != nil:
    section.add "RoleName", valid_608531
  var valid_608532 = query.getOrDefault("Action")
  valid_608532 = validateParameter(valid_608532, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_608532 != nil:
    section.add "Action", valid_608532
  var valid_608533 = query.getOrDefault("Version")
  valid_608533 = validateParameter(valid_608533, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608533 != nil:
    section.add "Version", valid_608533
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608534 = header.getOrDefault("X-Amz-Signature")
  valid_608534 = validateParameter(valid_608534, JString, required = false,
                                 default = nil)
  if valid_608534 != nil:
    section.add "X-Amz-Signature", valid_608534
  var valid_608535 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608535 = validateParameter(valid_608535, JString, required = false,
                                 default = nil)
  if valid_608535 != nil:
    section.add "X-Amz-Content-Sha256", valid_608535
  var valid_608536 = header.getOrDefault("X-Amz-Date")
  valid_608536 = validateParameter(valid_608536, JString, required = false,
                                 default = nil)
  if valid_608536 != nil:
    section.add "X-Amz-Date", valid_608536
  var valid_608537 = header.getOrDefault("X-Amz-Credential")
  valid_608537 = validateParameter(valid_608537, JString, required = false,
                                 default = nil)
  if valid_608537 != nil:
    section.add "X-Amz-Credential", valid_608537
  var valid_608538 = header.getOrDefault("X-Amz-Security-Token")
  valid_608538 = validateParameter(valid_608538, JString, required = false,
                                 default = nil)
  if valid_608538 != nil:
    section.add "X-Amz-Security-Token", valid_608538
  var valid_608539 = header.getOrDefault("X-Amz-Algorithm")
  valid_608539 = validateParameter(valid_608539, JString, required = false,
                                 default = nil)
  if valid_608539 != nil:
    section.add "X-Amz-Algorithm", valid_608539
  var valid_608540 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608540 = validateParameter(valid_608540, JString, required = false,
                                 default = nil)
  if valid_608540 != nil:
    section.add "X-Amz-SignedHeaders", valid_608540
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608541: Call_GetGetRolePolicy_608527; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_608541.validator(path, query, header, formData, body)
  let scheme = call_608541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608541.url(scheme.get, call_608541.host, call_608541.base,
                         call_608541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608541, url, valid)

proc call*(call_608542: Call_GetGetRolePolicy_608527; PolicyName: string;
          RoleName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608543 = newJObject()
  add(query_608543, "PolicyName", newJString(PolicyName))
  add(query_608543, "RoleName", newJString(RoleName))
  add(query_608543, "Action", newJString(Action))
  add(query_608543, "Version", newJString(Version))
  result = call_608542.call(nil, query_608543, nil, nil, nil)

var getGetRolePolicy* = Call_GetGetRolePolicy_608527(name: "getGetRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_GetGetRolePolicy_608528,
    base: "/", url: url_GetGetRolePolicy_608529,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSAMLProvider_608578 = ref object of OpenApiRestCall_605589
proc url_PostGetSAMLProvider_608580(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSAMLProvider_608579(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608581 = query.getOrDefault("Action")
  valid_608581 = validateParameter(valid_608581, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_608581 != nil:
    section.add "Action", valid_608581
  var valid_608582 = query.getOrDefault("Version")
  valid_608582 = validateParameter(valid_608582, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608582 != nil:
    section.add "Version", valid_608582
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608583 = header.getOrDefault("X-Amz-Signature")
  valid_608583 = validateParameter(valid_608583, JString, required = false,
                                 default = nil)
  if valid_608583 != nil:
    section.add "X-Amz-Signature", valid_608583
  var valid_608584 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608584 = validateParameter(valid_608584, JString, required = false,
                                 default = nil)
  if valid_608584 != nil:
    section.add "X-Amz-Content-Sha256", valid_608584
  var valid_608585 = header.getOrDefault("X-Amz-Date")
  valid_608585 = validateParameter(valid_608585, JString, required = false,
                                 default = nil)
  if valid_608585 != nil:
    section.add "X-Amz-Date", valid_608585
  var valid_608586 = header.getOrDefault("X-Amz-Credential")
  valid_608586 = validateParameter(valid_608586, JString, required = false,
                                 default = nil)
  if valid_608586 != nil:
    section.add "X-Amz-Credential", valid_608586
  var valid_608587 = header.getOrDefault("X-Amz-Security-Token")
  valid_608587 = validateParameter(valid_608587, JString, required = false,
                                 default = nil)
  if valid_608587 != nil:
    section.add "X-Amz-Security-Token", valid_608587
  var valid_608588 = header.getOrDefault("X-Amz-Algorithm")
  valid_608588 = validateParameter(valid_608588, JString, required = false,
                                 default = nil)
  if valid_608588 != nil:
    section.add "X-Amz-Algorithm", valid_608588
  var valid_608589 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608589 = validateParameter(valid_608589, JString, required = false,
                                 default = nil)
  if valid_608589 != nil:
    section.add "X-Amz-SignedHeaders", valid_608589
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_608590 = formData.getOrDefault("SAMLProviderArn")
  valid_608590 = validateParameter(valid_608590, JString, required = true,
                                 default = nil)
  if valid_608590 != nil:
    section.add "SAMLProviderArn", valid_608590
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608591: Call_PostGetSAMLProvider_608578; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_608591.validator(path, query, header, formData, body)
  let scheme = call_608591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608591.url(scheme.get, call_608591.host, call_608591.base,
                         call_608591.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608591, url, valid)

proc call*(call_608592: Call_PostGetSAMLProvider_608578; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608593 = newJObject()
  var formData_608594 = newJObject()
  add(formData_608594, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_608593, "Action", newJString(Action))
  add(query_608593, "Version", newJString(Version))
  result = call_608592.call(nil, query_608593, nil, formData_608594, nil)

var postGetSAMLProvider* = Call_PostGetSAMLProvider_608578(
    name: "postGetSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSAMLProvider",
    validator: validate_PostGetSAMLProvider_608579, base: "/",
    url: url_PostGetSAMLProvider_608580, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSAMLProvider_608562 = ref object of OpenApiRestCall_605589
proc url_GetGetSAMLProvider_608564(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSAMLProvider_608563(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608565 = query.getOrDefault("Action")
  valid_608565 = validateParameter(valid_608565, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_608565 != nil:
    section.add "Action", valid_608565
  var valid_608566 = query.getOrDefault("SAMLProviderArn")
  valid_608566 = validateParameter(valid_608566, JString, required = true,
                                 default = nil)
  if valid_608566 != nil:
    section.add "SAMLProviderArn", valid_608566
  var valid_608567 = query.getOrDefault("Version")
  valid_608567 = validateParameter(valid_608567, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608567 != nil:
    section.add "Version", valid_608567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608568 = header.getOrDefault("X-Amz-Signature")
  valid_608568 = validateParameter(valid_608568, JString, required = false,
                                 default = nil)
  if valid_608568 != nil:
    section.add "X-Amz-Signature", valid_608568
  var valid_608569 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608569 = validateParameter(valid_608569, JString, required = false,
                                 default = nil)
  if valid_608569 != nil:
    section.add "X-Amz-Content-Sha256", valid_608569
  var valid_608570 = header.getOrDefault("X-Amz-Date")
  valid_608570 = validateParameter(valid_608570, JString, required = false,
                                 default = nil)
  if valid_608570 != nil:
    section.add "X-Amz-Date", valid_608570
  var valid_608571 = header.getOrDefault("X-Amz-Credential")
  valid_608571 = validateParameter(valid_608571, JString, required = false,
                                 default = nil)
  if valid_608571 != nil:
    section.add "X-Amz-Credential", valid_608571
  var valid_608572 = header.getOrDefault("X-Amz-Security-Token")
  valid_608572 = validateParameter(valid_608572, JString, required = false,
                                 default = nil)
  if valid_608572 != nil:
    section.add "X-Amz-Security-Token", valid_608572
  var valid_608573 = header.getOrDefault("X-Amz-Algorithm")
  valid_608573 = validateParameter(valid_608573, JString, required = false,
                                 default = nil)
  if valid_608573 != nil:
    section.add "X-Amz-Algorithm", valid_608573
  var valid_608574 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608574 = validateParameter(valid_608574, JString, required = false,
                                 default = nil)
  if valid_608574 != nil:
    section.add "X-Amz-SignedHeaders", valid_608574
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608575: Call_GetGetSAMLProvider_608562; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_608575.validator(path, query, header, formData, body)
  let scheme = call_608575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608575.url(scheme.get, call_608575.host, call_608575.base,
                         call_608575.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608575, url, valid)

proc call*(call_608576: Call_GetGetSAMLProvider_608562; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_608577 = newJObject()
  add(query_608577, "Action", newJString(Action))
  add(query_608577, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_608577, "Version", newJString(Version))
  result = call_608576.call(nil, query_608577, nil, nil, nil)

var getGetSAMLProvider* = Call_GetGetSAMLProvider_608562(
    name: "getGetSAMLProvider", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSAMLProvider", validator: validate_GetGetSAMLProvider_608563,
    base: "/", url: url_GetGetSAMLProvider_608564,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSSHPublicKey_608613 = ref object of OpenApiRestCall_605589
proc url_PostGetSSHPublicKey_608615(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSSHPublicKey_608614(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608616 = query.getOrDefault("Action")
  valid_608616 = validateParameter(valid_608616, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_608616 != nil:
    section.add "Action", valid_608616
  var valid_608617 = query.getOrDefault("Version")
  valid_608617 = validateParameter(valid_608617, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608617 != nil:
    section.add "Version", valid_608617
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608618 = header.getOrDefault("X-Amz-Signature")
  valid_608618 = validateParameter(valid_608618, JString, required = false,
                                 default = nil)
  if valid_608618 != nil:
    section.add "X-Amz-Signature", valid_608618
  var valid_608619 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608619 = validateParameter(valid_608619, JString, required = false,
                                 default = nil)
  if valid_608619 != nil:
    section.add "X-Amz-Content-Sha256", valid_608619
  var valid_608620 = header.getOrDefault("X-Amz-Date")
  valid_608620 = validateParameter(valid_608620, JString, required = false,
                                 default = nil)
  if valid_608620 != nil:
    section.add "X-Amz-Date", valid_608620
  var valid_608621 = header.getOrDefault("X-Amz-Credential")
  valid_608621 = validateParameter(valid_608621, JString, required = false,
                                 default = nil)
  if valid_608621 != nil:
    section.add "X-Amz-Credential", valid_608621
  var valid_608622 = header.getOrDefault("X-Amz-Security-Token")
  valid_608622 = validateParameter(valid_608622, JString, required = false,
                                 default = nil)
  if valid_608622 != nil:
    section.add "X-Amz-Security-Token", valid_608622
  var valid_608623 = header.getOrDefault("X-Amz-Algorithm")
  valid_608623 = validateParameter(valid_608623, JString, required = false,
                                 default = nil)
  if valid_608623 != nil:
    section.add "X-Amz-Algorithm", valid_608623
  var valid_608624 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608624 = validateParameter(valid_608624, JString, required = false,
                                 default = nil)
  if valid_608624 != nil:
    section.add "X-Amz-SignedHeaders", valid_608624
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SSHPublicKeyId` field"
  var valid_608625 = formData.getOrDefault("SSHPublicKeyId")
  valid_608625 = validateParameter(valid_608625, JString, required = true,
                                 default = nil)
  if valid_608625 != nil:
    section.add "SSHPublicKeyId", valid_608625
  var valid_608626 = formData.getOrDefault("Encoding")
  valid_608626 = validateParameter(valid_608626, JString, required = true,
                                 default = newJString("SSH"))
  if valid_608626 != nil:
    section.add "Encoding", valid_608626
  var valid_608627 = formData.getOrDefault("UserName")
  valid_608627 = validateParameter(valid_608627, JString, required = true,
                                 default = nil)
  if valid_608627 != nil:
    section.add "UserName", valid_608627
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608628: Call_PostGetSSHPublicKey_608613; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_608628.validator(path, query, header, formData, body)
  let scheme = call_608628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608628.url(scheme.get, call_608628.host, call_608628.base,
                         call_608628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608628, url, valid)

proc call*(call_608629: Call_PostGetSSHPublicKey_608613; SSHPublicKeyId: string;
          UserName: string; Encoding: string = "SSH";
          Action: string = "GetSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608630 = newJObject()
  var formData_608631 = newJObject()
  add(formData_608631, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_608631, "Encoding", newJString(Encoding))
  add(formData_608631, "UserName", newJString(UserName))
  add(query_608630, "Action", newJString(Action))
  add(query_608630, "Version", newJString(Version))
  result = call_608629.call(nil, query_608630, nil, formData_608631, nil)

var postGetSSHPublicKey* = Call_PostGetSSHPublicKey_608613(
    name: "postGetSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSSHPublicKey",
    validator: validate_PostGetSSHPublicKey_608614, base: "/",
    url: url_PostGetSSHPublicKey_608615, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSSHPublicKey_608595 = ref object of OpenApiRestCall_605589
proc url_GetGetSSHPublicKey_608597(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSSHPublicKey_608596(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_608598 = query.getOrDefault("SSHPublicKeyId")
  valid_608598 = validateParameter(valid_608598, JString, required = true,
                                 default = nil)
  if valid_608598 != nil:
    section.add "SSHPublicKeyId", valid_608598
  var valid_608599 = query.getOrDefault("UserName")
  valid_608599 = validateParameter(valid_608599, JString, required = true,
                                 default = nil)
  if valid_608599 != nil:
    section.add "UserName", valid_608599
  var valid_608600 = query.getOrDefault("Encoding")
  valid_608600 = validateParameter(valid_608600, JString, required = true,
                                 default = newJString("SSH"))
  if valid_608600 != nil:
    section.add "Encoding", valid_608600
  var valid_608601 = query.getOrDefault("Action")
  valid_608601 = validateParameter(valid_608601, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_608601 != nil:
    section.add "Action", valid_608601
  var valid_608602 = query.getOrDefault("Version")
  valid_608602 = validateParameter(valid_608602, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608602 != nil:
    section.add "Version", valid_608602
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608603 = header.getOrDefault("X-Amz-Signature")
  valid_608603 = validateParameter(valid_608603, JString, required = false,
                                 default = nil)
  if valid_608603 != nil:
    section.add "X-Amz-Signature", valid_608603
  var valid_608604 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608604 = validateParameter(valid_608604, JString, required = false,
                                 default = nil)
  if valid_608604 != nil:
    section.add "X-Amz-Content-Sha256", valid_608604
  var valid_608605 = header.getOrDefault("X-Amz-Date")
  valid_608605 = validateParameter(valid_608605, JString, required = false,
                                 default = nil)
  if valid_608605 != nil:
    section.add "X-Amz-Date", valid_608605
  var valid_608606 = header.getOrDefault("X-Amz-Credential")
  valid_608606 = validateParameter(valid_608606, JString, required = false,
                                 default = nil)
  if valid_608606 != nil:
    section.add "X-Amz-Credential", valid_608606
  var valid_608607 = header.getOrDefault("X-Amz-Security-Token")
  valid_608607 = validateParameter(valid_608607, JString, required = false,
                                 default = nil)
  if valid_608607 != nil:
    section.add "X-Amz-Security-Token", valid_608607
  var valid_608608 = header.getOrDefault("X-Amz-Algorithm")
  valid_608608 = validateParameter(valid_608608, JString, required = false,
                                 default = nil)
  if valid_608608 != nil:
    section.add "X-Amz-Algorithm", valid_608608
  var valid_608609 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608609 = validateParameter(valid_608609, JString, required = false,
                                 default = nil)
  if valid_608609 != nil:
    section.add "X-Amz-SignedHeaders", valid_608609
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608610: Call_GetGetSSHPublicKey_608595; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_608610.validator(path, query, header, formData, body)
  let scheme = call_608610.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608610.url(scheme.get, call_608610.host, call_608610.base,
                         call_608610.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608610, url, valid)

proc call*(call_608611: Call_GetGetSSHPublicKey_608595; SSHPublicKeyId: string;
          UserName: string; Encoding: string = "SSH";
          Action: string = "GetSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608612 = newJObject()
  add(query_608612, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_608612, "UserName", newJString(UserName))
  add(query_608612, "Encoding", newJString(Encoding))
  add(query_608612, "Action", newJString(Action))
  add(query_608612, "Version", newJString(Version))
  result = call_608611.call(nil, query_608612, nil, nil, nil)

var getGetSSHPublicKey* = Call_GetGetSSHPublicKey_608595(
    name: "getGetSSHPublicKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSSHPublicKey", validator: validate_GetGetSSHPublicKey_608596,
    base: "/", url: url_GetGetSSHPublicKey_608597,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServerCertificate_608648 = ref object of OpenApiRestCall_605589
proc url_PostGetServerCertificate_608650(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServerCertificate_608649(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608651 = query.getOrDefault("Action")
  valid_608651 = validateParameter(valid_608651, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_608651 != nil:
    section.add "Action", valid_608651
  var valid_608652 = query.getOrDefault("Version")
  valid_608652 = validateParameter(valid_608652, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608652 != nil:
    section.add "Version", valid_608652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608653 = header.getOrDefault("X-Amz-Signature")
  valid_608653 = validateParameter(valid_608653, JString, required = false,
                                 default = nil)
  if valid_608653 != nil:
    section.add "X-Amz-Signature", valid_608653
  var valid_608654 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608654 = validateParameter(valid_608654, JString, required = false,
                                 default = nil)
  if valid_608654 != nil:
    section.add "X-Amz-Content-Sha256", valid_608654
  var valid_608655 = header.getOrDefault("X-Amz-Date")
  valid_608655 = validateParameter(valid_608655, JString, required = false,
                                 default = nil)
  if valid_608655 != nil:
    section.add "X-Amz-Date", valid_608655
  var valid_608656 = header.getOrDefault("X-Amz-Credential")
  valid_608656 = validateParameter(valid_608656, JString, required = false,
                                 default = nil)
  if valid_608656 != nil:
    section.add "X-Amz-Credential", valid_608656
  var valid_608657 = header.getOrDefault("X-Amz-Security-Token")
  valid_608657 = validateParameter(valid_608657, JString, required = false,
                                 default = nil)
  if valid_608657 != nil:
    section.add "X-Amz-Security-Token", valid_608657
  var valid_608658 = header.getOrDefault("X-Amz-Algorithm")
  valid_608658 = validateParameter(valid_608658, JString, required = false,
                                 default = nil)
  if valid_608658 != nil:
    section.add "X-Amz-Algorithm", valid_608658
  var valid_608659 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608659 = validateParameter(valid_608659, JString, required = false,
                                 default = nil)
  if valid_608659 != nil:
    section.add "X-Amz-SignedHeaders", valid_608659
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_608660 = formData.getOrDefault("ServerCertificateName")
  valid_608660 = validateParameter(valid_608660, JString, required = true,
                                 default = nil)
  if valid_608660 != nil:
    section.add "ServerCertificateName", valid_608660
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608661: Call_PostGetServerCertificate_608648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_608661.validator(path, query, header, formData, body)
  let scheme = call_608661.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608661.url(scheme.get, call_608661.host, call_608661.base,
                         call_608661.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608661, url, valid)

proc call*(call_608662: Call_PostGetServerCertificate_608648;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608663 = newJObject()
  var formData_608664 = newJObject()
  add(formData_608664, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_608663, "Action", newJString(Action))
  add(query_608663, "Version", newJString(Version))
  result = call_608662.call(nil, query_608663, nil, formData_608664, nil)

var postGetServerCertificate* = Call_PostGetServerCertificate_608648(
    name: "postGetServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_PostGetServerCertificate_608649, base: "/",
    url: url_PostGetServerCertificate_608650, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServerCertificate_608632 = ref object of OpenApiRestCall_605589
proc url_GetGetServerCertificate_608634(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServerCertificate_608633(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_608635 = query.getOrDefault("ServerCertificateName")
  valid_608635 = validateParameter(valid_608635, JString, required = true,
                                 default = nil)
  if valid_608635 != nil:
    section.add "ServerCertificateName", valid_608635
  var valid_608636 = query.getOrDefault("Action")
  valid_608636 = validateParameter(valid_608636, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_608636 != nil:
    section.add "Action", valid_608636
  var valid_608637 = query.getOrDefault("Version")
  valid_608637 = validateParameter(valid_608637, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608637 != nil:
    section.add "Version", valid_608637
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608638 = header.getOrDefault("X-Amz-Signature")
  valid_608638 = validateParameter(valid_608638, JString, required = false,
                                 default = nil)
  if valid_608638 != nil:
    section.add "X-Amz-Signature", valid_608638
  var valid_608639 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608639 = validateParameter(valid_608639, JString, required = false,
                                 default = nil)
  if valid_608639 != nil:
    section.add "X-Amz-Content-Sha256", valid_608639
  var valid_608640 = header.getOrDefault("X-Amz-Date")
  valid_608640 = validateParameter(valid_608640, JString, required = false,
                                 default = nil)
  if valid_608640 != nil:
    section.add "X-Amz-Date", valid_608640
  var valid_608641 = header.getOrDefault("X-Amz-Credential")
  valid_608641 = validateParameter(valid_608641, JString, required = false,
                                 default = nil)
  if valid_608641 != nil:
    section.add "X-Amz-Credential", valid_608641
  var valid_608642 = header.getOrDefault("X-Amz-Security-Token")
  valid_608642 = validateParameter(valid_608642, JString, required = false,
                                 default = nil)
  if valid_608642 != nil:
    section.add "X-Amz-Security-Token", valid_608642
  var valid_608643 = header.getOrDefault("X-Amz-Algorithm")
  valid_608643 = validateParameter(valid_608643, JString, required = false,
                                 default = nil)
  if valid_608643 != nil:
    section.add "X-Amz-Algorithm", valid_608643
  var valid_608644 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608644 = validateParameter(valid_608644, JString, required = false,
                                 default = nil)
  if valid_608644 != nil:
    section.add "X-Amz-SignedHeaders", valid_608644
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608645: Call_GetGetServerCertificate_608632; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_608645.validator(path, query, header, formData, body)
  let scheme = call_608645.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608645.url(scheme.get, call_608645.host, call_608645.base,
                         call_608645.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608645, url, valid)

proc call*(call_608646: Call_GetGetServerCertificate_608632;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608647 = newJObject()
  add(query_608647, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_608647, "Action", newJString(Action))
  add(query_608647, "Version", newJString(Version))
  result = call_608646.call(nil, query_608647, nil, nil, nil)

var getGetServerCertificate* = Call_GetGetServerCertificate_608632(
    name: "getGetServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_GetGetServerCertificate_608633, base: "/",
    url: url_GetGetServerCertificate_608634, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetails_608683 = ref object of OpenApiRestCall_605589
proc url_PostGetServiceLastAccessedDetails_608685(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLastAccessedDetails_608684(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608686 = query.getOrDefault("Action")
  valid_608686 = validateParameter(valid_608686, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_608686 != nil:
    section.add "Action", valid_608686
  var valid_608687 = query.getOrDefault("Version")
  valid_608687 = validateParameter(valid_608687, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608687 != nil:
    section.add "Version", valid_608687
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608688 = header.getOrDefault("X-Amz-Signature")
  valid_608688 = validateParameter(valid_608688, JString, required = false,
                                 default = nil)
  if valid_608688 != nil:
    section.add "X-Amz-Signature", valid_608688
  var valid_608689 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608689 = validateParameter(valid_608689, JString, required = false,
                                 default = nil)
  if valid_608689 != nil:
    section.add "X-Amz-Content-Sha256", valid_608689
  var valid_608690 = header.getOrDefault("X-Amz-Date")
  valid_608690 = validateParameter(valid_608690, JString, required = false,
                                 default = nil)
  if valid_608690 != nil:
    section.add "X-Amz-Date", valid_608690
  var valid_608691 = header.getOrDefault("X-Amz-Credential")
  valid_608691 = validateParameter(valid_608691, JString, required = false,
                                 default = nil)
  if valid_608691 != nil:
    section.add "X-Amz-Credential", valid_608691
  var valid_608692 = header.getOrDefault("X-Amz-Security-Token")
  valid_608692 = validateParameter(valid_608692, JString, required = false,
                                 default = nil)
  if valid_608692 != nil:
    section.add "X-Amz-Security-Token", valid_608692
  var valid_608693 = header.getOrDefault("X-Amz-Algorithm")
  valid_608693 = validateParameter(valid_608693, JString, required = false,
                                 default = nil)
  if valid_608693 != nil:
    section.add "X-Amz-Algorithm", valid_608693
  var valid_608694 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608694 = validateParameter(valid_608694, JString, required = false,
                                 default = nil)
  if valid_608694 != nil:
    section.add "X-Amz-SignedHeaders", valid_608694
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  section = newJObject()
  var valid_608695 = formData.getOrDefault("Marker")
  valid_608695 = validateParameter(valid_608695, JString, required = false,
                                 default = nil)
  if valid_608695 != nil:
    section.add "Marker", valid_608695
  var valid_608696 = formData.getOrDefault("MaxItems")
  valid_608696 = validateParameter(valid_608696, JInt, required = false, default = nil)
  if valid_608696 != nil:
    section.add "MaxItems", valid_608696
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_608697 = formData.getOrDefault("JobId")
  valid_608697 = validateParameter(valid_608697, JString, required = true,
                                 default = nil)
  if valid_608697 != nil:
    section.add "JobId", valid_608697
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608698: Call_PostGetServiceLastAccessedDetails_608683;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_608698.validator(path, query, header, formData, body)
  let scheme = call_608698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608698.url(scheme.get, call_608698.host, call_608698.base,
                         call_608698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608698, url, valid)

proc call*(call_608699: Call_PostGetServiceLastAccessedDetails_608683;
          JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetails"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   Version: string (required)
  var query_608700 = newJObject()
  var formData_608701 = newJObject()
  add(formData_608701, "Marker", newJString(Marker))
  add(query_608700, "Action", newJString(Action))
  add(formData_608701, "MaxItems", newJInt(MaxItems))
  add(formData_608701, "JobId", newJString(JobId))
  add(query_608700, "Version", newJString(Version))
  result = call_608699.call(nil, query_608700, nil, formData_608701, nil)

var postGetServiceLastAccessedDetails* = Call_PostGetServiceLastAccessedDetails_608683(
    name: "postGetServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_PostGetServiceLastAccessedDetails_608684, base: "/",
    url: url_PostGetServiceLastAccessedDetails_608685,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetails_608665 = ref object of OpenApiRestCall_605589
proc url_GetGetServiceLastAccessedDetails_608667(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLastAccessedDetails_608666(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  section = newJObject()
  var valid_608668 = query.getOrDefault("Marker")
  valid_608668 = validateParameter(valid_608668, JString, required = false,
                                 default = nil)
  if valid_608668 != nil:
    section.add "Marker", valid_608668
  var valid_608669 = query.getOrDefault("MaxItems")
  valid_608669 = validateParameter(valid_608669, JInt, required = false, default = nil)
  if valid_608669 != nil:
    section.add "MaxItems", valid_608669
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608670 = query.getOrDefault("Action")
  valid_608670 = validateParameter(valid_608670, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_608670 != nil:
    section.add "Action", valid_608670
  var valid_608671 = query.getOrDefault("Version")
  valid_608671 = validateParameter(valid_608671, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608671 != nil:
    section.add "Version", valid_608671
  var valid_608672 = query.getOrDefault("JobId")
  valid_608672 = validateParameter(valid_608672, JString, required = true,
                                 default = nil)
  if valid_608672 != nil:
    section.add "JobId", valid_608672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608673 = header.getOrDefault("X-Amz-Signature")
  valid_608673 = validateParameter(valid_608673, JString, required = false,
                                 default = nil)
  if valid_608673 != nil:
    section.add "X-Amz-Signature", valid_608673
  var valid_608674 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608674 = validateParameter(valid_608674, JString, required = false,
                                 default = nil)
  if valid_608674 != nil:
    section.add "X-Amz-Content-Sha256", valid_608674
  var valid_608675 = header.getOrDefault("X-Amz-Date")
  valid_608675 = validateParameter(valid_608675, JString, required = false,
                                 default = nil)
  if valid_608675 != nil:
    section.add "X-Amz-Date", valid_608675
  var valid_608676 = header.getOrDefault("X-Amz-Credential")
  valid_608676 = validateParameter(valid_608676, JString, required = false,
                                 default = nil)
  if valid_608676 != nil:
    section.add "X-Amz-Credential", valid_608676
  var valid_608677 = header.getOrDefault("X-Amz-Security-Token")
  valid_608677 = validateParameter(valid_608677, JString, required = false,
                                 default = nil)
  if valid_608677 != nil:
    section.add "X-Amz-Security-Token", valid_608677
  var valid_608678 = header.getOrDefault("X-Amz-Algorithm")
  valid_608678 = validateParameter(valid_608678, JString, required = false,
                                 default = nil)
  if valid_608678 != nil:
    section.add "X-Amz-Algorithm", valid_608678
  var valid_608679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608679 = validateParameter(valid_608679, JString, required = false,
                                 default = nil)
  if valid_608679 != nil:
    section.add "X-Amz-SignedHeaders", valid_608679
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608680: Call_GetGetServiceLastAccessedDetails_608665;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_608680.validator(path, query, header, formData, body)
  let scheme = call_608680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608680.url(scheme.get, call_608680.host, call_608680.base,
                         call_608680.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608680, url, valid)

proc call*(call_608681: Call_GetGetServiceLastAccessedDetails_608665;
          JobId: string; Marker: string = ""; MaxItems: int = 0;
          Action: string = "GetServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  var query_608682 = newJObject()
  add(query_608682, "Marker", newJString(Marker))
  add(query_608682, "MaxItems", newJInt(MaxItems))
  add(query_608682, "Action", newJString(Action))
  add(query_608682, "Version", newJString(Version))
  add(query_608682, "JobId", newJString(JobId))
  result = call_608681.call(nil, query_608682, nil, nil, nil)

var getGetServiceLastAccessedDetails* = Call_GetGetServiceLastAccessedDetails_608665(
    name: "getGetServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_GetGetServiceLastAccessedDetails_608666, base: "/",
    url: url_GetGetServiceLastAccessedDetails_608667,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetailsWithEntities_608721 = ref object of OpenApiRestCall_605589
proc url_PostGetServiceLastAccessedDetailsWithEntities_608723(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLastAccessedDetailsWithEntities_608722(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608724 = query.getOrDefault("Action")
  valid_608724 = validateParameter(valid_608724, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_608724 != nil:
    section.add "Action", valid_608724
  var valid_608725 = query.getOrDefault("Version")
  valid_608725 = validateParameter(valid_608725, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608725 != nil:
    section.add "Version", valid_608725
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608726 = header.getOrDefault("X-Amz-Signature")
  valid_608726 = validateParameter(valid_608726, JString, required = false,
                                 default = nil)
  if valid_608726 != nil:
    section.add "X-Amz-Signature", valid_608726
  var valid_608727 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608727 = validateParameter(valid_608727, JString, required = false,
                                 default = nil)
  if valid_608727 != nil:
    section.add "X-Amz-Content-Sha256", valid_608727
  var valid_608728 = header.getOrDefault("X-Amz-Date")
  valid_608728 = validateParameter(valid_608728, JString, required = false,
                                 default = nil)
  if valid_608728 != nil:
    section.add "X-Amz-Date", valid_608728
  var valid_608729 = header.getOrDefault("X-Amz-Credential")
  valid_608729 = validateParameter(valid_608729, JString, required = false,
                                 default = nil)
  if valid_608729 != nil:
    section.add "X-Amz-Credential", valid_608729
  var valid_608730 = header.getOrDefault("X-Amz-Security-Token")
  valid_608730 = validateParameter(valid_608730, JString, required = false,
                                 default = nil)
  if valid_608730 != nil:
    section.add "X-Amz-Security-Token", valid_608730
  var valid_608731 = header.getOrDefault("X-Amz-Algorithm")
  valid_608731 = validateParameter(valid_608731, JString, required = false,
                                 default = nil)
  if valid_608731 != nil:
    section.add "X-Amz-Algorithm", valid_608731
  var valid_608732 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608732 = validateParameter(valid_608732, JString, required = false,
                                 default = nil)
  if valid_608732 != nil:
    section.add "X-Amz-SignedHeaders", valid_608732
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  section = newJObject()
  var valid_608733 = formData.getOrDefault("Marker")
  valid_608733 = validateParameter(valid_608733, JString, required = false,
                                 default = nil)
  if valid_608733 != nil:
    section.add "Marker", valid_608733
  assert formData != nil, "formData argument is necessary due to required `ServiceNamespace` field"
  var valid_608734 = formData.getOrDefault("ServiceNamespace")
  valid_608734 = validateParameter(valid_608734, JString, required = true,
                                 default = nil)
  if valid_608734 != nil:
    section.add "ServiceNamespace", valid_608734
  var valid_608735 = formData.getOrDefault("MaxItems")
  valid_608735 = validateParameter(valid_608735, JInt, required = false, default = nil)
  if valid_608735 != nil:
    section.add "MaxItems", valid_608735
  var valid_608736 = formData.getOrDefault("JobId")
  valid_608736 = validateParameter(valid_608736, JString, required = true,
                                 default = nil)
  if valid_608736 != nil:
    section.add "JobId", valid_608736
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608737: Call_PostGetServiceLastAccessedDetailsWithEntities_608721;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_608737.validator(path, query, header, formData, body)
  let scheme = call_608737.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608737.url(scheme.get, call_608737.host, call_608737.base,
                         call_608737.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608737, url, valid)

proc call*(call_608738: Call_PostGetServiceLastAccessedDetailsWithEntities_608721;
          ServiceNamespace: string; JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   Version: string (required)
  var query_608739 = newJObject()
  var formData_608740 = newJObject()
  add(formData_608740, "Marker", newJString(Marker))
  add(formData_608740, "ServiceNamespace", newJString(ServiceNamespace))
  add(query_608739, "Action", newJString(Action))
  add(formData_608740, "MaxItems", newJInt(MaxItems))
  add(formData_608740, "JobId", newJString(JobId))
  add(query_608739, "Version", newJString(Version))
  result = call_608738.call(nil, query_608739, nil, formData_608740, nil)

var postGetServiceLastAccessedDetailsWithEntities* = Call_PostGetServiceLastAccessedDetailsWithEntities_608721(
    name: "postGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_PostGetServiceLastAccessedDetailsWithEntities_608722,
    base: "/", url: url_PostGetServiceLastAccessedDetailsWithEntities_608723,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetailsWithEntities_608702 = ref object of OpenApiRestCall_605589
proc url_GetGetServiceLastAccessedDetailsWithEntities_608704(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLastAccessedDetailsWithEntities_608703(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  section = newJObject()
  var valid_608705 = query.getOrDefault("Marker")
  valid_608705 = validateParameter(valid_608705, JString, required = false,
                                 default = nil)
  if valid_608705 != nil:
    section.add "Marker", valid_608705
  var valid_608706 = query.getOrDefault("MaxItems")
  valid_608706 = validateParameter(valid_608706, JInt, required = false, default = nil)
  if valid_608706 != nil:
    section.add "MaxItems", valid_608706
  assert query != nil,
        "query argument is necessary due to required `ServiceNamespace` field"
  var valid_608707 = query.getOrDefault("ServiceNamespace")
  valid_608707 = validateParameter(valid_608707, JString, required = true,
                                 default = nil)
  if valid_608707 != nil:
    section.add "ServiceNamespace", valid_608707
  var valid_608708 = query.getOrDefault("Action")
  valid_608708 = validateParameter(valid_608708, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_608708 != nil:
    section.add "Action", valid_608708
  var valid_608709 = query.getOrDefault("Version")
  valid_608709 = validateParameter(valid_608709, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608709 != nil:
    section.add "Version", valid_608709
  var valid_608710 = query.getOrDefault("JobId")
  valid_608710 = validateParameter(valid_608710, JString, required = true,
                                 default = nil)
  if valid_608710 != nil:
    section.add "JobId", valid_608710
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608711 = header.getOrDefault("X-Amz-Signature")
  valid_608711 = validateParameter(valid_608711, JString, required = false,
                                 default = nil)
  if valid_608711 != nil:
    section.add "X-Amz-Signature", valid_608711
  var valid_608712 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608712 = validateParameter(valid_608712, JString, required = false,
                                 default = nil)
  if valid_608712 != nil:
    section.add "X-Amz-Content-Sha256", valid_608712
  var valid_608713 = header.getOrDefault("X-Amz-Date")
  valid_608713 = validateParameter(valid_608713, JString, required = false,
                                 default = nil)
  if valid_608713 != nil:
    section.add "X-Amz-Date", valid_608713
  var valid_608714 = header.getOrDefault("X-Amz-Credential")
  valid_608714 = validateParameter(valid_608714, JString, required = false,
                                 default = nil)
  if valid_608714 != nil:
    section.add "X-Amz-Credential", valid_608714
  var valid_608715 = header.getOrDefault("X-Amz-Security-Token")
  valid_608715 = validateParameter(valid_608715, JString, required = false,
                                 default = nil)
  if valid_608715 != nil:
    section.add "X-Amz-Security-Token", valid_608715
  var valid_608716 = header.getOrDefault("X-Amz-Algorithm")
  valid_608716 = validateParameter(valid_608716, JString, required = false,
                                 default = nil)
  if valid_608716 != nil:
    section.add "X-Amz-Algorithm", valid_608716
  var valid_608717 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608717 = validateParameter(valid_608717, JString, required = false,
                                 default = nil)
  if valid_608717 != nil:
    section.add "X-Amz-SignedHeaders", valid_608717
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608718: Call_GetGetServiceLastAccessedDetailsWithEntities_608702;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_608718.validator(path, query, header, formData, body)
  let scheme = call_608718.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608718.url(scheme.get, call_608718.host, call_608718.base,
                         call_608718.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608718, url, valid)

proc call*(call_608719: Call_GetGetServiceLastAccessedDetailsWithEntities_608702;
          ServiceNamespace: string; JobId: string; Marker: string = "";
          MaxItems: int = 0;
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  var query_608720 = newJObject()
  add(query_608720, "Marker", newJString(Marker))
  add(query_608720, "MaxItems", newJInt(MaxItems))
  add(query_608720, "ServiceNamespace", newJString(ServiceNamespace))
  add(query_608720, "Action", newJString(Action))
  add(query_608720, "Version", newJString(Version))
  add(query_608720, "JobId", newJString(JobId))
  result = call_608719.call(nil, query_608720, nil, nil, nil)

var getGetServiceLastAccessedDetailsWithEntities* = Call_GetGetServiceLastAccessedDetailsWithEntities_608702(
    name: "getGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_GetGetServiceLastAccessedDetailsWithEntities_608703,
    base: "/", url: url_GetGetServiceLastAccessedDetailsWithEntities_608704,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLinkedRoleDeletionStatus_608757 = ref object of OpenApiRestCall_605589
proc url_PostGetServiceLinkedRoleDeletionStatus_608759(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLinkedRoleDeletionStatus_608758(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608760 = query.getOrDefault("Action")
  valid_608760 = validateParameter(valid_608760, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_608760 != nil:
    section.add "Action", valid_608760
  var valid_608761 = query.getOrDefault("Version")
  valid_608761 = validateParameter(valid_608761, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608761 != nil:
    section.add "Version", valid_608761
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608762 = header.getOrDefault("X-Amz-Signature")
  valid_608762 = validateParameter(valid_608762, JString, required = false,
                                 default = nil)
  if valid_608762 != nil:
    section.add "X-Amz-Signature", valid_608762
  var valid_608763 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608763 = validateParameter(valid_608763, JString, required = false,
                                 default = nil)
  if valid_608763 != nil:
    section.add "X-Amz-Content-Sha256", valid_608763
  var valid_608764 = header.getOrDefault("X-Amz-Date")
  valid_608764 = validateParameter(valid_608764, JString, required = false,
                                 default = nil)
  if valid_608764 != nil:
    section.add "X-Amz-Date", valid_608764
  var valid_608765 = header.getOrDefault("X-Amz-Credential")
  valid_608765 = validateParameter(valid_608765, JString, required = false,
                                 default = nil)
  if valid_608765 != nil:
    section.add "X-Amz-Credential", valid_608765
  var valid_608766 = header.getOrDefault("X-Amz-Security-Token")
  valid_608766 = validateParameter(valid_608766, JString, required = false,
                                 default = nil)
  if valid_608766 != nil:
    section.add "X-Amz-Security-Token", valid_608766
  var valid_608767 = header.getOrDefault("X-Amz-Algorithm")
  valid_608767 = validateParameter(valid_608767, JString, required = false,
                                 default = nil)
  if valid_608767 != nil:
    section.add "X-Amz-Algorithm", valid_608767
  var valid_608768 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608768 = validateParameter(valid_608768, JString, required = false,
                                 default = nil)
  if valid_608768 != nil:
    section.add "X-Amz-SignedHeaders", valid_608768
  result.add "header", section
  ## parameters in `formData` object:
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DeletionTaskId` field"
  var valid_608769 = formData.getOrDefault("DeletionTaskId")
  valid_608769 = validateParameter(valid_608769, JString, required = true,
                                 default = nil)
  if valid_608769 != nil:
    section.add "DeletionTaskId", valid_608769
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608770: Call_PostGetServiceLinkedRoleDeletionStatus_608757;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_608770.validator(path, query, header, formData, body)
  let scheme = call_608770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608770.url(scheme.get, call_608770.host, call_608770.base,
                         call_608770.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608770, url, valid)

proc call*(call_608771: Call_PostGetServiceLinkedRoleDeletionStatus_608757;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608772 = newJObject()
  var formData_608773 = newJObject()
  add(formData_608773, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_608772, "Action", newJString(Action))
  add(query_608772, "Version", newJString(Version))
  result = call_608771.call(nil, query_608772, nil, formData_608773, nil)

var postGetServiceLinkedRoleDeletionStatus* = Call_PostGetServiceLinkedRoleDeletionStatus_608757(
    name: "postGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_PostGetServiceLinkedRoleDeletionStatus_608758, base: "/",
    url: url_PostGetServiceLinkedRoleDeletionStatus_608759,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLinkedRoleDeletionStatus_608741 = ref object of OpenApiRestCall_605589
proc url_GetGetServiceLinkedRoleDeletionStatus_608743(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLinkedRoleDeletionStatus_608742(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DeletionTaskId` field"
  var valid_608744 = query.getOrDefault("DeletionTaskId")
  valid_608744 = validateParameter(valid_608744, JString, required = true,
                                 default = nil)
  if valid_608744 != nil:
    section.add "DeletionTaskId", valid_608744
  var valid_608745 = query.getOrDefault("Action")
  valid_608745 = validateParameter(valid_608745, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_608745 != nil:
    section.add "Action", valid_608745
  var valid_608746 = query.getOrDefault("Version")
  valid_608746 = validateParameter(valid_608746, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608746 != nil:
    section.add "Version", valid_608746
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608747 = header.getOrDefault("X-Amz-Signature")
  valid_608747 = validateParameter(valid_608747, JString, required = false,
                                 default = nil)
  if valid_608747 != nil:
    section.add "X-Amz-Signature", valid_608747
  var valid_608748 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608748 = validateParameter(valid_608748, JString, required = false,
                                 default = nil)
  if valid_608748 != nil:
    section.add "X-Amz-Content-Sha256", valid_608748
  var valid_608749 = header.getOrDefault("X-Amz-Date")
  valid_608749 = validateParameter(valid_608749, JString, required = false,
                                 default = nil)
  if valid_608749 != nil:
    section.add "X-Amz-Date", valid_608749
  var valid_608750 = header.getOrDefault("X-Amz-Credential")
  valid_608750 = validateParameter(valid_608750, JString, required = false,
                                 default = nil)
  if valid_608750 != nil:
    section.add "X-Amz-Credential", valid_608750
  var valid_608751 = header.getOrDefault("X-Amz-Security-Token")
  valid_608751 = validateParameter(valid_608751, JString, required = false,
                                 default = nil)
  if valid_608751 != nil:
    section.add "X-Amz-Security-Token", valid_608751
  var valid_608752 = header.getOrDefault("X-Amz-Algorithm")
  valid_608752 = validateParameter(valid_608752, JString, required = false,
                                 default = nil)
  if valid_608752 != nil:
    section.add "X-Amz-Algorithm", valid_608752
  var valid_608753 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608753 = validateParameter(valid_608753, JString, required = false,
                                 default = nil)
  if valid_608753 != nil:
    section.add "X-Amz-SignedHeaders", valid_608753
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608754: Call_GetGetServiceLinkedRoleDeletionStatus_608741;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_608754.validator(path, query, header, formData, body)
  let scheme = call_608754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608754.url(scheme.get, call_608754.host, call_608754.base,
                         call_608754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608754, url, valid)

proc call*(call_608755: Call_GetGetServiceLinkedRoleDeletionStatus_608741;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608756 = newJObject()
  add(query_608756, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_608756, "Action", newJString(Action))
  add(query_608756, "Version", newJString(Version))
  result = call_608755.call(nil, query_608756, nil, nil, nil)

var getGetServiceLinkedRoleDeletionStatus* = Call_GetGetServiceLinkedRoleDeletionStatus_608741(
    name: "getGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_GetGetServiceLinkedRoleDeletionStatus_608742, base: "/",
    url: url_GetGetServiceLinkedRoleDeletionStatus_608743,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUser_608790 = ref object of OpenApiRestCall_605589
proc url_PostGetUser_608792(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetUser_608791(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608793 = query.getOrDefault("Action")
  valid_608793 = validateParameter(valid_608793, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_608793 != nil:
    section.add "Action", valid_608793
  var valid_608794 = query.getOrDefault("Version")
  valid_608794 = validateParameter(valid_608794, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608794 != nil:
    section.add "Version", valid_608794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608795 = header.getOrDefault("X-Amz-Signature")
  valid_608795 = validateParameter(valid_608795, JString, required = false,
                                 default = nil)
  if valid_608795 != nil:
    section.add "X-Amz-Signature", valid_608795
  var valid_608796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608796 = validateParameter(valid_608796, JString, required = false,
                                 default = nil)
  if valid_608796 != nil:
    section.add "X-Amz-Content-Sha256", valid_608796
  var valid_608797 = header.getOrDefault("X-Amz-Date")
  valid_608797 = validateParameter(valid_608797, JString, required = false,
                                 default = nil)
  if valid_608797 != nil:
    section.add "X-Amz-Date", valid_608797
  var valid_608798 = header.getOrDefault("X-Amz-Credential")
  valid_608798 = validateParameter(valid_608798, JString, required = false,
                                 default = nil)
  if valid_608798 != nil:
    section.add "X-Amz-Credential", valid_608798
  var valid_608799 = header.getOrDefault("X-Amz-Security-Token")
  valid_608799 = validateParameter(valid_608799, JString, required = false,
                                 default = nil)
  if valid_608799 != nil:
    section.add "X-Amz-Security-Token", valid_608799
  var valid_608800 = header.getOrDefault("X-Amz-Algorithm")
  valid_608800 = validateParameter(valid_608800, JString, required = false,
                                 default = nil)
  if valid_608800 != nil:
    section.add "X-Amz-Algorithm", valid_608800
  var valid_608801 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608801 = validateParameter(valid_608801, JString, required = false,
                                 default = nil)
  if valid_608801 != nil:
    section.add "X-Amz-SignedHeaders", valid_608801
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_608802 = formData.getOrDefault("UserName")
  valid_608802 = validateParameter(valid_608802, JString, required = false,
                                 default = nil)
  if valid_608802 != nil:
    section.add "UserName", valid_608802
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608803: Call_PostGetUser_608790; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_608803.validator(path, query, header, formData, body)
  let scheme = call_608803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608803.url(scheme.get, call_608803.host, call_608803.base,
                         call_608803.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608803, url, valid)

proc call*(call_608804: Call_PostGetUser_608790; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## postGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608805 = newJObject()
  var formData_608806 = newJObject()
  add(formData_608806, "UserName", newJString(UserName))
  add(query_608805, "Action", newJString(Action))
  add(query_608805, "Version", newJString(Version))
  result = call_608804.call(nil, query_608805, nil, formData_608806, nil)

var postGetUser* = Call_PostGetUser_608790(name: "postGetUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetUser",
                                        validator: validate_PostGetUser_608791,
                                        base: "/", url: url_PostGetUser_608792,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUser_608774 = ref object of OpenApiRestCall_605589
proc url_GetGetUser_608776(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetUser_608775(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608777 = query.getOrDefault("UserName")
  valid_608777 = validateParameter(valid_608777, JString, required = false,
                                 default = nil)
  if valid_608777 != nil:
    section.add "UserName", valid_608777
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608778 = query.getOrDefault("Action")
  valid_608778 = validateParameter(valid_608778, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_608778 != nil:
    section.add "Action", valid_608778
  var valid_608779 = query.getOrDefault("Version")
  valid_608779 = validateParameter(valid_608779, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608779 != nil:
    section.add "Version", valid_608779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608780 = header.getOrDefault("X-Amz-Signature")
  valid_608780 = validateParameter(valid_608780, JString, required = false,
                                 default = nil)
  if valid_608780 != nil:
    section.add "X-Amz-Signature", valid_608780
  var valid_608781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608781 = validateParameter(valid_608781, JString, required = false,
                                 default = nil)
  if valid_608781 != nil:
    section.add "X-Amz-Content-Sha256", valid_608781
  var valid_608782 = header.getOrDefault("X-Amz-Date")
  valid_608782 = validateParameter(valid_608782, JString, required = false,
                                 default = nil)
  if valid_608782 != nil:
    section.add "X-Amz-Date", valid_608782
  var valid_608783 = header.getOrDefault("X-Amz-Credential")
  valid_608783 = validateParameter(valid_608783, JString, required = false,
                                 default = nil)
  if valid_608783 != nil:
    section.add "X-Amz-Credential", valid_608783
  var valid_608784 = header.getOrDefault("X-Amz-Security-Token")
  valid_608784 = validateParameter(valid_608784, JString, required = false,
                                 default = nil)
  if valid_608784 != nil:
    section.add "X-Amz-Security-Token", valid_608784
  var valid_608785 = header.getOrDefault("X-Amz-Algorithm")
  valid_608785 = validateParameter(valid_608785, JString, required = false,
                                 default = nil)
  if valid_608785 != nil:
    section.add "X-Amz-Algorithm", valid_608785
  var valid_608786 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608786 = validateParameter(valid_608786, JString, required = false,
                                 default = nil)
  if valid_608786 != nil:
    section.add "X-Amz-SignedHeaders", valid_608786
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608787: Call_GetGetUser_608774; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_608787.validator(path, query, header, formData, body)
  let scheme = call_608787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608787.url(scheme.get, call_608787.host, call_608787.base,
                         call_608787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608787, url, valid)

proc call*(call_608788: Call_GetGetUser_608774; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## getGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608789 = newJObject()
  add(query_608789, "UserName", newJString(UserName))
  add(query_608789, "Action", newJString(Action))
  add(query_608789, "Version", newJString(Version))
  result = call_608788.call(nil, query_608789, nil, nil, nil)

var getGetUser* = Call_GetGetUser_608774(name: "getGetUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetUser",
                                      validator: validate_GetGetUser_608775,
                                      base: "/", url: url_GetGetUser_608776,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUserPolicy_608824 = ref object of OpenApiRestCall_605589
proc url_PostGetUserPolicy_608826(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetUserPolicy_608825(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608827 = query.getOrDefault("Action")
  valid_608827 = validateParameter(valid_608827, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_608827 != nil:
    section.add "Action", valid_608827
  var valid_608828 = query.getOrDefault("Version")
  valid_608828 = validateParameter(valid_608828, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608828 != nil:
    section.add "Version", valid_608828
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608829 = header.getOrDefault("X-Amz-Signature")
  valid_608829 = validateParameter(valid_608829, JString, required = false,
                                 default = nil)
  if valid_608829 != nil:
    section.add "X-Amz-Signature", valid_608829
  var valid_608830 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608830 = validateParameter(valid_608830, JString, required = false,
                                 default = nil)
  if valid_608830 != nil:
    section.add "X-Amz-Content-Sha256", valid_608830
  var valid_608831 = header.getOrDefault("X-Amz-Date")
  valid_608831 = validateParameter(valid_608831, JString, required = false,
                                 default = nil)
  if valid_608831 != nil:
    section.add "X-Amz-Date", valid_608831
  var valid_608832 = header.getOrDefault("X-Amz-Credential")
  valid_608832 = validateParameter(valid_608832, JString, required = false,
                                 default = nil)
  if valid_608832 != nil:
    section.add "X-Amz-Credential", valid_608832
  var valid_608833 = header.getOrDefault("X-Amz-Security-Token")
  valid_608833 = validateParameter(valid_608833, JString, required = false,
                                 default = nil)
  if valid_608833 != nil:
    section.add "X-Amz-Security-Token", valid_608833
  var valid_608834 = header.getOrDefault("X-Amz-Algorithm")
  valid_608834 = validateParameter(valid_608834, JString, required = false,
                                 default = nil)
  if valid_608834 != nil:
    section.add "X-Amz-Algorithm", valid_608834
  var valid_608835 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608835 = validateParameter(valid_608835, JString, required = false,
                                 default = nil)
  if valid_608835 != nil:
    section.add "X-Amz-SignedHeaders", valid_608835
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_608836 = formData.getOrDefault("UserName")
  valid_608836 = validateParameter(valid_608836, JString, required = true,
                                 default = nil)
  if valid_608836 != nil:
    section.add "UserName", valid_608836
  var valid_608837 = formData.getOrDefault("PolicyName")
  valid_608837 = validateParameter(valid_608837, JString, required = true,
                                 default = nil)
  if valid_608837 != nil:
    section.add "PolicyName", valid_608837
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608838: Call_PostGetUserPolicy_608824; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_608838.validator(path, query, header, formData, body)
  let scheme = call_608838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608838.url(scheme.get, call_608838.host, call_608838.base,
                         call_608838.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608838, url, valid)

proc call*(call_608839: Call_PostGetUserPolicy_608824; UserName: string;
          PolicyName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_608840 = newJObject()
  var formData_608841 = newJObject()
  add(formData_608841, "UserName", newJString(UserName))
  add(query_608840, "Action", newJString(Action))
  add(query_608840, "Version", newJString(Version))
  add(formData_608841, "PolicyName", newJString(PolicyName))
  result = call_608839.call(nil, query_608840, nil, formData_608841, nil)

var postGetUserPolicy* = Call_PostGetUserPolicy_608824(name: "postGetUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_PostGetUserPolicy_608825,
    base: "/", url: url_PostGetUserPolicy_608826,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUserPolicy_608807 = ref object of OpenApiRestCall_605589
proc url_GetGetUserPolicy_608809(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetUserPolicy_608808(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_608810 = query.getOrDefault("UserName")
  valid_608810 = validateParameter(valid_608810, JString, required = true,
                                 default = nil)
  if valid_608810 != nil:
    section.add "UserName", valid_608810
  var valid_608811 = query.getOrDefault("PolicyName")
  valid_608811 = validateParameter(valid_608811, JString, required = true,
                                 default = nil)
  if valid_608811 != nil:
    section.add "PolicyName", valid_608811
  var valid_608812 = query.getOrDefault("Action")
  valid_608812 = validateParameter(valid_608812, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_608812 != nil:
    section.add "Action", valid_608812
  var valid_608813 = query.getOrDefault("Version")
  valid_608813 = validateParameter(valid_608813, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608813 != nil:
    section.add "Version", valid_608813
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608814 = header.getOrDefault("X-Amz-Signature")
  valid_608814 = validateParameter(valid_608814, JString, required = false,
                                 default = nil)
  if valid_608814 != nil:
    section.add "X-Amz-Signature", valid_608814
  var valid_608815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608815 = validateParameter(valid_608815, JString, required = false,
                                 default = nil)
  if valid_608815 != nil:
    section.add "X-Amz-Content-Sha256", valid_608815
  var valid_608816 = header.getOrDefault("X-Amz-Date")
  valid_608816 = validateParameter(valid_608816, JString, required = false,
                                 default = nil)
  if valid_608816 != nil:
    section.add "X-Amz-Date", valid_608816
  var valid_608817 = header.getOrDefault("X-Amz-Credential")
  valid_608817 = validateParameter(valid_608817, JString, required = false,
                                 default = nil)
  if valid_608817 != nil:
    section.add "X-Amz-Credential", valid_608817
  var valid_608818 = header.getOrDefault("X-Amz-Security-Token")
  valid_608818 = validateParameter(valid_608818, JString, required = false,
                                 default = nil)
  if valid_608818 != nil:
    section.add "X-Amz-Security-Token", valid_608818
  var valid_608819 = header.getOrDefault("X-Amz-Algorithm")
  valid_608819 = validateParameter(valid_608819, JString, required = false,
                                 default = nil)
  if valid_608819 != nil:
    section.add "X-Amz-Algorithm", valid_608819
  var valid_608820 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608820 = validateParameter(valid_608820, JString, required = false,
                                 default = nil)
  if valid_608820 != nil:
    section.add "X-Amz-SignedHeaders", valid_608820
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608821: Call_GetGetUserPolicy_608807; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_608821.validator(path, query, header, formData, body)
  let scheme = call_608821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608821.url(scheme.get, call_608821.host, call_608821.base,
                         call_608821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608821, url, valid)

proc call*(call_608822: Call_GetGetUserPolicy_608807; UserName: string;
          PolicyName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608823 = newJObject()
  add(query_608823, "UserName", newJString(UserName))
  add(query_608823, "PolicyName", newJString(PolicyName))
  add(query_608823, "Action", newJString(Action))
  add(query_608823, "Version", newJString(Version))
  result = call_608822.call(nil, query_608823, nil, nil, nil)

var getGetUserPolicy* = Call_GetGetUserPolicy_608807(name: "getGetUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_GetGetUserPolicy_608808,
    base: "/", url: url_GetGetUserPolicy_608809,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccessKeys_608860 = ref object of OpenApiRestCall_605589
proc url_PostListAccessKeys_608862(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAccessKeys_608861(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608863 = query.getOrDefault("Action")
  valid_608863 = validateParameter(valid_608863, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_608863 != nil:
    section.add "Action", valid_608863
  var valid_608864 = query.getOrDefault("Version")
  valid_608864 = validateParameter(valid_608864, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608864 != nil:
    section.add "Version", valid_608864
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608865 = header.getOrDefault("X-Amz-Signature")
  valid_608865 = validateParameter(valid_608865, JString, required = false,
                                 default = nil)
  if valid_608865 != nil:
    section.add "X-Amz-Signature", valid_608865
  var valid_608866 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608866 = validateParameter(valid_608866, JString, required = false,
                                 default = nil)
  if valid_608866 != nil:
    section.add "X-Amz-Content-Sha256", valid_608866
  var valid_608867 = header.getOrDefault("X-Amz-Date")
  valid_608867 = validateParameter(valid_608867, JString, required = false,
                                 default = nil)
  if valid_608867 != nil:
    section.add "X-Amz-Date", valid_608867
  var valid_608868 = header.getOrDefault("X-Amz-Credential")
  valid_608868 = validateParameter(valid_608868, JString, required = false,
                                 default = nil)
  if valid_608868 != nil:
    section.add "X-Amz-Credential", valid_608868
  var valid_608869 = header.getOrDefault("X-Amz-Security-Token")
  valid_608869 = validateParameter(valid_608869, JString, required = false,
                                 default = nil)
  if valid_608869 != nil:
    section.add "X-Amz-Security-Token", valid_608869
  var valid_608870 = header.getOrDefault("X-Amz-Algorithm")
  valid_608870 = validateParameter(valid_608870, JString, required = false,
                                 default = nil)
  if valid_608870 != nil:
    section.add "X-Amz-Algorithm", valid_608870
  var valid_608871 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608871 = validateParameter(valid_608871, JString, required = false,
                                 default = nil)
  if valid_608871 != nil:
    section.add "X-Amz-SignedHeaders", valid_608871
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_608872 = formData.getOrDefault("Marker")
  valid_608872 = validateParameter(valid_608872, JString, required = false,
                                 default = nil)
  if valid_608872 != nil:
    section.add "Marker", valid_608872
  var valid_608873 = formData.getOrDefault("UserName")
  valid_608873 = validateParameter(valid_608873, JString, required = false,
                                 default = nil)
  if valid_608873 != nil:
    section.add "UserName", valid_608873
  var valid_608874 = formData.getOrDefault("MaxItems")
  valid_608874 = validateParameter(valid_608874, JInt, required = false, default = nil)
  if valid_608874 != nil:
    section.add "MaxItems", valid_608874
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608875: Call_PostListAccessKeys_608860; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_608875.validator(path, query, header, formData, body)
  let scheme = call_608875.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608875.url(scheme.get, call_608875.host, call_608875.base,
                         call_608875.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608875, url, valid)

proc call*(call_608876: Call_PostListAccessKeys_608860; Marker: string = "";
          UserName: string = ""; Action: string = "ListAccessKeys"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_608877 = newJObject()
  var formData_608878 = newJObject()
  add(formData_608878, "Marker", newJString(Marker))
  add(formData_608878, "UserName", newJString(UserName))
  add(query_608877, "Action", newJString(Action))
  add(formData_608878, "MaxItems", newJInt(MaxItems))
  add(query_608877, "Version", newJString(Version))
  result = call_608876.call(nil, query_608877, nil, formData_608878, nil)

var postListAccessKeys* = Call_PostListAccessKeys_608860(
    name: "postListAccessKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccessKeys",
    validator: validate_PostListAccessKeys_608861, base: "/",
    url: url_PostListAccessKeys_608862, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccessKeys_608842 = ref object of OpenApiRestCall_605589
proc url_GetListAccessKeys_608844(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAccessKeys_608843(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608845 = query.getOrDefault("Marker")
  valid_608845 = validateParameter(valid_608845, JString, required = false,
                                 default = nil)
  if valid_608845 != nil:
    section.add "Marker", valid_608845
  var valid_608846 = query.getOrDefault("UserName")
  valid_608846 = validateParameter(valid_608846, JString, required = false,
                                 default = nil)
  if valid_608846 != nil:
    section.add "UserName", valid_608846
  var valid_608847 = query.getOrDefault("MaxItems")
  valid_608847 = validateParameter(valid_608847, JInt, required = false, default = nil)
  if valid_608847 != nil:
    section.add "MaxItems", valid_608847
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608848 = query.getOrDefault("Action")
  valid_608848 = validateParameter(valid_608848, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_608848 != nil:
    section.add "Action", valid_608848
  var valid_608849 = query.getOrDefault("Version")
  valid_608849 = validateParameter(valid_608849, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608849 != nil:
    section.add "Version", valid_608849
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608850 = header.getOrDefault("X-Amz-Signature")
  valid_608850 = validateParameter(valid_608850, JString, required = false,
                                 default = nil)
  if valid_608850 != nil:
    section.add "X-Amz-Signature", valid_608850
  var valid_608851 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608851 = validateParameter(valid_608851, JString, required = false,
                                 default = nil)
  if valid_608851 != nil:
    section.add "X-Amz-Content-Sha256", valid_608851
  var valid_608852 = header.getOrDefault("X-Amz-Date")
  valid_608852 = validateParameter(valid_608852, JString, required = false,
                                 default = nil)
  if valid_608852 != nil:
    section.add "X-Amz-Date", valid_608852
  var valid_608853 = header.getOrDefault("X-Amz-Credential")
  valid_608853 = validateParameter(valid_608853, JString, required = false,
                                 default = nil)
  if valid_608853 != nil:
    section.add "X-Amz-Credential", valid_608853
  var valid_608854 = header.getOrDefault("X-Amz-Security-Token")
  valid_608854 = validateParameter(valid_608854, JString, required = false,
                                 default = nil)
  if valid_608854 != nil:
    section.add "X-Amz-Security-Token", valid_608854
  var valid_608855 = header.getOrDefault("X-Amz-Algorithm")
  valid_608855 = validateParameter(valid_608855, JString, required = false,
                                 default = nil)
  if valid_608855 != nil:
    section.add "X-Amz-Algorithm", valid_608855
  var valid_608856 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608856 = validateParameter(valid_608856, JString, required = false,
                                 default = nil)
  if valid_608856 != nil:
    section.add "X-Amz-SignedHeaders", valid_608856
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608857: Call_GetListAccessKeys_608842; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_608857.validator(path, query, header, formData, body)
  let scheme = call_608857.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608857.url(scheme.get, call_608857.host, call_608857.base,
                         call_608857.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608857, url, valid)

proc call*(call_608858: Call_GetListAccessKeys_608842; Marker: string = "";
          UserName: string = ""; MaxItems: int = 0; Action: string = "ListAccessKeys";
          Version: string = "2010-05-08"): Recallable =
  ## getListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608859 = newJObject()
  add(query_608859, "Marker", newJString(Marker))
  add(query_608859, "UserName", newJString(UserName))
  add(query_608859, "MaxItems", newJInt(MaxItems))
  add(query_608859, "Action", newJString(Action))
  add(query_608859, "Version", newJString(Version))
  result = call_608858.call(nil, query_608859, nil, nil, nil)

var getListAccessKeys* = Call_GetListAccessKeys_608842(name: "getListAccessKeys",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListAccessKeys", validator: validate_GetListAccessKeys_608843,
    base: "/", url: url_GetListAccessKeys_608844,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccountAliases_608896 = ref object of OpenApiRestCall_605589
proc url_PostListAccountAliases_608898(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAccountAliases_608897(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608899 = query.getOrDefault("Action")
  valid_608899 = validateParameter(valid_608899, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_608899 != nil:
    section.add "Action", valid_608899
  var valid_608900 = query.getOrDefault("Version")
  valid_608900 = validateParameter(valid_608900, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608900 != nil:
    section.add "Version", valid_608900
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608901 = header.getOrDefault("X-Amz-Signature")
  valid_608901 = validateParameter(valid_608901, JString, required = false,
                                 default = nil)
  if valid_608901 != nil:
    section.add "X-Amz-Signature", valid_608901
  var valid_608902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608902 = validateParameter(valid_608902, JString, required = false,
                                 default = nil)
  if valid_608902 != nil:
    section.add "X-Amz-Content-Sha256", valid_608902
  var valid_608903 = header.getOrDefault("X-Amz-Date")
  valid_608903 = validateParameter(valid_608903, JString, required = false,
                                 default = nil)
  if valid_608903 != nil:
    section.add "X-Amz-Date", valid_608903
  var valid_608904 = header.getOrDefault("X-Amz-Credential")
  valid_608904 = validateParameter(valid_608904, JString, required = false,
                                 default = nil)
  if valid_608904 != nil:
    section.add "X-Amz-Credential", valid_608904
  var valid_608905 = header.getOrDefault("X-Amz-Security-Token")
  valid_608905 = validateParameter(valid_608905, JString, required = false,
                                 default = nil)
  if valid_608905 != nil:
    section.add "X-Amz-Security-Token", valid_608905
  var valid_608906 = header.getOrDefault("X-Amz-Algorithm")
  valid_608906 = validateParameter(valid_608906, JString, required = false,
                                 default = nil)
  if valid_608906 != nil:
    section.add "X-Amz-Algorithm", valid_608906
  var valid_608907 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608907 = validateParameter(valid_608907, JString, required = false,
                                 default = nil)
  if valid_608907 != nil:
    section.add "X-Amz-SignedHeaders", valid_608907
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_608908 = formData.getOrDefault("Marker")
  valid_608908 = validateParameter(valid_608908, JString, required = false,
                                 default = nil)
  if valid_608908 != nil:
    section.add "Marker", valid_608908
  var valid_608909 = formData.getOrDefault("MaxItems")
  valid_608909 = validateParameter(valid_608909, JInt, required = false, default = nil)
  if valid_608909 != nil:
    section.add "MaxItems", valid_608909
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608910: Call_PostListAccountAliases_608896; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_608910.validator(path, query, header, formData, body)
  let scheme = call_608910.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608910.url(scheme.get, call_608910.host, call_608910.base,
                         call_608910.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608910, url, valid)

proc call*(call_608911: Call_PostListAccountAliases_608896; Marker: string = "";
          Action: string = "ListAccountAliases"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_608912 = newJObject()
  var formData_608913 = newJObject()
  add(formData_608913, "Marker", newJString(Marker))
  add(query_608912, "Action", newJString(Action))
  add(formData_608913, "MaxItems", newJInt(MaxItems))
  add(query_608912, "Version", newJString(Version))
  result = call_608911.call(nil, query_608912, nil, formData_608913, nil)

var postListAccountAliases* = Call_PostListAccountAliases_608896(
    name: "postListAccountAliases", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_PostListAccountAliases_608897, base: "/",
    url: url_PostListAccountAliases_608898, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccountAliases_608879 = ref object of OpenApiRestCall_605589
proc url_GetListAccountAliases_608881(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAccountAliases_608880(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608882 = query.getOrDefault("Marker")
  valid_608882 = validateParameter(valid_608882, JString, required = false,
                                 default = nil)
  if valid_608882 != nil:
    section.add "Marker", valid_608882
  var valid_608883 = query.getOrDefault("MaxItems")
  valid_608883 = validateParameter(valid_608883, JInt, required = false, default = nil)
  if valid_608883 != nil:
    section.add "MaxItems", valid_608883
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608884 = query.getOrDefault("Action")
  valid_608884 = validateParameter(valid_608884, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_608884 != nil:
    section.add "Action", valid_608884
  var valid_608885 = query.getOrDefault("Version")
  valid_608885 = validateParameter(valid_608885, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608885 != nil:
    section.add "Version", valid_608885
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608886 = header.getOrDefault("X-Amz-Signature")
  valid_608886 = validateParameter(valid_608886, JString, required = false,
                                 default = nil)
  if valid_608886 != nil:
    section.add "X-Amz-Signature", valid_608886
  var valid_608887 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608887 = validateParameter(valid_608887, JString, required = false,
                                 default = nil)
  if valid_608887 != nil:
    section.add "X-Amz-Content-Sha256", valid_608887
  var valid_608888 = header.getOrDefault("X-Amz-Date")
  valid_608888 = validateParameter(valid_608888, JString, required = false,
                                 default = nil)
  if valid_608888 != nil:
    section.add "X-Amz-Date", valid_608888
  var valid_608889 = header.getOrDefault("X-Amz-Credential")
  valid_608889 = validateParameter(valid_608889, JString, required = false,
                                 default = nil)
  if valid_608889 != nil:
    section.add "X-Amz-Credential", valid_608889
  var valid_608890 = header.getOrDefault("X-Amz-Security-Token")
  valid_608890 = validateParameter(valid_608890, JString, required = false,
                                 default = nil)
  if valid_608890 != nil:
    section.add "X-Amz-Security-Token", valid_608890
  var valid_608891 = header.getOrDefault("X-Amz-Algorithm")
  valid_608891 = validateParameter(valid_608891, JString, required = false,
                                 default = nil)
  if valid_608891 != nil:
    section.add "X-Amz-Algorithm", valid_608891
  var valid_608892 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608892 = validateParameter(valid_608892, JString, required = false,
                                 default = nil)
  if valid_608892 != nil:
    section.add "X-Amz-SignedHeaders", valid_608892
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608893: Call_GetListAccountAliases_608879; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_608893.validator(path, query, header, formData, body)
  let scheme = call_608893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608893.url(scheme.get, call_608893.host, call_608893.base,
                         call_608893.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608893, url, valid)

proc call*(call_608894: Call_GetListAccountAliases_608879; Marker: string = "";
          MaxItems: int = 0; Action: string = "ListAccountAliases";
          Version: string = "2010-05-08"): Recallable =
  ## getListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608895 = newJObject()
  add(query_608895, "Marker", newJString(Marker))
  add(query_608895, "MaxItems", newJInt(MaxItems))
  add(query_608895, "Action", newJString(Action))
  add(query_608895, "Version", newJString(Version))
  result = call_608894.call(nil, query_608895, nil, nil, nil)

var getListAccountAliases* = Call_GetListAccountAliases_608879(
    name: "getListAccountAliases", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_GetListAccountAliases_608880, base: "/",
    url: url_GetListAccountAliases_608881, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedGroupPolicies_608933 = ref object of OpenApiRestCall_605589
proc url_PostListAttachedGroupPolicies_608935(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedGroupPolicies_608934(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608936 = query.getOrDefault("Action")
  valid_608936 = validateParameter(valid_608936, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_608936 != nil:
    section.add "Action", valid_608936
  var valid_608937 = query.getOrDefault("Version")
  valid_608937 = validateParameter(valid_608937, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608937 != nil:
    section.add "Version", valid_608937
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608938 = header.getOrDefault("X-Amz-Signature")
  valid_608938 = validateParameter(valid_608938, JString, required = false,
                                 default = nil)
  if valid_608938 != nil:
    section.add "X-Amz-Signature", valid_608938
  var valid_608939 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608939 = validateParameter(valid_608939, JString, required = false,
                                 default = nil)
  if valid_608939 != nil:
    section.add "X-Amz-Content-Sha256", valid_608939
  var valid_608940 = header.getOrDefault("X-Amz-Date")
  valid_608940 = validateParameter(valid_608940, JString, required = false,
                                 default = nil)
  if valid_608940 != nil:
    section.add "X-Amz-Date", valid_608940
  var valid_608941 = header.getOrDefault("X-Amz-Credential")
  valid_608941 = validateParameter(valid_608941, JString, required = false,
                                 default = nil)
  if valid_608941 != nil:
    section.add "X-Amz-Credential", valid_608941
  var valid_608942 = header.getOrDefault("X-Amz-Security-Token")
  valid_608942 = validateParameter(valid_608942, JString, required = false,
                                 default = nil)
  if valid_608942 != nil:
    section.add "X-Amz-Security-Token", valid_608942
  var valid_608943 = header.getOrDefault("X-Amz-Algorithm")
  valid_608943 = validateParameter(valid_608943, JString, required = false,
                                 default = nil)
  if valid_608943 != nil:
    section.add "X-Amz-Algorithm", valid_608943
  var valid_608944 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608944 = validateParameter(valid_608944, JString, required = false,
                                 default = nil)
  if valid_608944 != nil:
    section.add "X-Amz-SignedHeaders", valid_608944
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_608945 = formData.getOrDefault("Marker")
  valid_608945 = validateParameter(valid_608945, JString, required = false,
                                 default = nil)
  if valid_608945 != nil:
    section.add "Marker", valid_608945
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_608946 = formData.getOrDefault("GroupName")
  valid_608946 = validateParameter(valid_608946, JString, required = true,
                                 default = nil)
  if valid_608946 != nil:
    section.add "GroupName", valid_608946
  var valid_608947 = formData.getOrDefault("PathPrefix")
  valid_608947 = validateParameter(valid_608947, JString, required = false,
                                 default = nil)
  if valid_608947 != nil:
    section.add "PathPrefix", valid_608947
  var valid_608948 = formData.getOrDefault("MaxItems")
  valid_608948 = validateParameter(valid_608948, JInt, required = false, default = nil)
  if valid_608948 != nil:
    section.add "MaxItems", valid_608948
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608949: Call_PostListAttachedGroupPolicies_608933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_608949.validator(path, query, header, formData, body)
  let scheme = call_608949.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608949.url(scheme.get, call_608949.host, call_608949.base,
                         call_608949.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608949, url, valid)

proc call*(call_608950: Call_PostListAttachedGroupPolicies_608933;
          GroupName: string; Marker: string = ""; PathPrefix: string = "";
          MaxItems: int = 0; Action: string = "ListAttachedGroupPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608951 = newJObject()
  var formData_608952 = newJObject()
  add(formData_608952, "Marker", newJString(Marker))
  add(formData_608952, "GroupName", newJString(GroupName))
  add(formData_608952, "PathPrefix", newJString(PathPrefix))
  add(formData_608952, "MaxItems", newJInt(MaxItems))
  add(query_608951, "Action", newJString(Action))
  add(query_608951, "Version", newJString(Version))
  result = call_608950.call(nil, query_608951, nil, formData_608952, nil)

var postListAttachedGroupPolicies* = Call_PostListAttachedGroupPolicies_608933(
    name: "postListAttachedGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_PostListAttachedGroupPolicies_608934, base: "/",
    url: url_PostListAttachedGroupPolicies_608935,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedGroupPolicies_608914 = ref object of OpenApiRestCall_605589
proc url_GetListAttachedGroupPolicies_608916(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedGroupPolicies_608915(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608917 = query.getOrDefault("Marker")
  valid_608917 = validateParameter(valid_608917, JString, required = false,
                                 default = nil)
  if valid_608917 != nil:
    section.add "Marker", valid_608917
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_608918 = query.getOrDefault("GroupName")
  valid_608918 = validateParameter(valid_608918, JString, required = true,
                                 default = nil)
  if valid_608918 != nil:
    section.add "GroupName", valid_608918
  var valid_608919 = query.getOrDefault("MaxItems")
  valid_608919 = validateParameter(valid_608919, JInt, required = false, default = nil)
  if valid_608919 != nil:
    section.add "MaxItems", valid_608919
  var valid_608920 = query.getOrDefault("PathPrefix")
  valid_608920 = validateParameter(valid_608920, JString, required = false,
                                 default = nil)
  if valid_608920 != nil:
    section.add "PathPrefix", valid_608920
  var valid_608921 = query.getOrDefault("Action")
  valid_608921 = validateParameter(valid_608921, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_608921 != nil:
    section.add "Action", valid_608921
  var valid_608922 = query.getOrDefault("Version")
  valid_608922 = validateParameter(valid_608922, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608922 != nil:
    section.add "Version", valid_608922
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608923 = header.getOrDefault("X-Amz-Signature")
  valid_608923 = validateParameter(valid_608923, JString, required = false,
                                 default = nil)
  if valid_608923 != nil:
    section.add "X-Amz-Signature", valid_608923
  var valid_608924 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608924 = validateParameter(valid_608924, JString, required = false,
                                 default = nil)
  if valid_608924 != nil:
    section.add "X-Amz-Content-Sha256", valid_608924
  var valid_608925 = header.getOrDefault("X-Amz-Date")
  valid_608925 = validateParameter(valid_608925, JString, required = false,
                                 default = nil)
  if valid_608925 != nil:
    section.add "X-Amz-Date", valid_608925
  var valid_608926 = header.getOrDefault("X-Amz-Credential")
  valid_608926 = validateParameter(valid_608926, JString, required = false,
                                 default = nil)
  if valid_608926 != nil:
    section.add "X-Amz-Credential", valid_608926
  var valid_608927 = header.getOrDefault("X-Amz-Security-Token")
  valid_608927 = validateParameter(valid_608927, JString, required = false,
                                 default = nil)
  if valid_608927 != nil:
    section.add "X-Amz-Security-Token", valid_608927
  var valid_608928 = header.getOrDefault("X-Amz-Algorithm")
  valid_608928 = validateParameter(valid_608928, JString, required = false,
                                 default = nil)
  if valid_608928 != nil:
    section.add "X-Amz-Algorithm", valid_608928
  var valid_608929 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608929 = validateParameter(valid_608929, JString, required = false,
                                 default = nil)
  if valid_608929 != nil:
    section.add "X-Amz-SignedHeaders", valid_608929
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608930: Call_GetListAttachedGroupPolicies_608914; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_608930.validator(path, query, header, formData, body)
  let scheme = call_608930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608930.url(scheme.get, call_608930.host, call_608930.base,
                         call_608930.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608930, url, valid)

proc call*(call_608931: Call_GetListAttachedGroupPolicies_608914;
          GroupName: string; Marker: string = ""; MaxItems: int = 0;
          PathPrefix: string = ""; Action: string = "ListAttachedGroupPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608932 = newJObject()
  add(query_608932, "Marker", newJString(Marker))
  add(query_608932, "GroupName", newJString(GroupName))
  add(query_608932, "MaxItems", newJInt(MaxItems))
  add(query_608932, "PathPrefix", newJString(PathPrefix))
  add(query_608932, "Action", newJString(Action))
  add(query_608932, "Version", newJString(Version))
  result = call_608931.call(nil, query_608932, nil, nil, nil)

var getListAttachedGroupPolicies* = Call_GetListAttachedGroupPolicies_608914(
    name: "getListAttachedGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_GetListAttachedGroupPolicies_608915, base: "/",
    url: url_GetListAttachedGroupPolicies_608916,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedRolePolicies_608972 = ref object of OpenApiRestCall_605589
proc url_PostListAttachedRolePolicies_608974(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedRolePolicies_608973(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608975 = query.getOrDefault("Action")
  valid_608975 = validateParameter(valid_608975, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_608975 != nil:
    section.add "Action", valid_608975
  var valid_608976 = query.getOrDefault("Version")
  valid_608976 = validateParameter(valid_608976, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608976 != nil:
    section.add "Version", valid_608976
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608977 = header.getOrDefault("X-Amz-Signature")
  valid_608977 = validateParameter(valid_608977, JString, required = false,
                                 default = nil)
  if valid_608977 != nil:
    section.add "X-Amz-Signature", valid_608977
  var valid_608978 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608978 = validateParameter(valid_608978, JString, required = false,
                                 default = nil)
  if valid_608978 != nil:
    section.add "X-Amz-Content-Sha256", valid_608978
  var valid_608979 = header.getOrDefault("X-Amz-Date")
  valid_608979 = validateParameter(valid_608979, JString, required = false,
                                 default = nil)
  if valid_608979 != nil:
    section.add "X-Amz-Date", valid_608979
  var valid_608980 = header.getOrDefault("X-Amz-Credential")
  valid_608980 = validateParameter(valid_608980, JString, required = false,
                                 default = nil)
  if valid_608980 != nil:
    section.add "X-Amz-Credential", valid_608980
  var valid_608981 = header.getOrDefault("X-Amz-Security-Token")
  valid_608981 = validateParameter(valid_608981, JString, required = false,
                                 default = nil)
  if valid_608981 != nil:
    section.add "X-Amz-Security-Token", valid_608981
  var valid_608982 = header.getOrDefault("X-Amz-Algorithm")
  valid_608982 = validateParameter(valid_608982, JString, required = false,
                                 default = nil)
  if valid_608982 != nil:
    section.add "X-Amz-Algorithm", valid_608982
  var valid_608983 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608983 = validateParameter(valid_608983, JString, required = false,
                                 default = nil)
  if valid_608983 != nil:
    section.add "X-Amz-SignedHeaders", valid_608983
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_608984 = formData.getOrDefault("RoleName")
  valid_608984 = validateParameter(valid_608984, JString, required = true,
                                 default = nil)
  if valid_608984 != nil:
    section.add "RoleName", valid_608984
  var valid_608985 = formData.getOrDefault("Marker")
  valid_608985 = validateParameter(valid_608985, JString, required = false,
                                 default = nil)
  if valid_608985 != nil:
    section.add "Marker", valid_608985
  var valid_608986 = formData.getOrDefault("PathPrefix")
  valid_608986 = validateParameter(valid_608986, JString, required = false,
                                 default = nil)
  if valid_608986 != nil:
    section.add "PathPrefix", valid_608986
  var valid_608987 = formData.getOrDefault("MaxItems")
  valid_608987 = validateParameter(valid_608987, JInt, required = false, default = nil)
  if valid_608987 != nil:
    section.add "MaxItems", valid_608987
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608988: Call_PostListAttachedRolePolicies_608972; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_608988.validator(path, query, header, formData, body)
  let scheme = call_608988.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608988.url(scheme.get, call_608988.host, call_608988.base,
                         call_608988.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608988, url, valid)

proc call*(call_608989: Call_PostListAttachedRolePolicies_608972; RoleName: string;
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListAttachedRolePolicies";
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608990 = newJObject()
  var formData_608991 = newJObject()
  add(formData_608991, "RoleName", newJString(RoleName))
  add(formData_608991, "Marker", newJString(Marker))
  add(formData_608991, "PathPrefix", newJString(PathPrefix))
  add(formData_608991, "MaxItems", newJInt(MaxItems))
  add(query_608990, "Action", newJString(Action))
  add(query_608990, "Version", newJString(Version))
  result = call_608989.call(nil, query_608990, nil, formData_608991, nil)

var postListAttachedRolePolicies* = Call_PostListAttachedRolePolicies_608972(
    name: "postListAttachedRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_PostListAttachedRolePolicies_608973, base: "/",
    url: url_PostListAttachedRolePolicies_608974,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedRolePolicies_608953 = ref object of OpenApiRestCall_605589
proc url_GetListAttachedRolePolicies_608955(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedRolePolicies_608954(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608956 = query.getOrDefault("Marker")
  valid_608956 = validateParameter(valid_608956, JString, required = false,
                                 default = nil)
  if valid_608956 != nil:
    section.add "Marker", valid_608956
  var valid_608957 = query.getOrDefault("MaxItems")
  valid_608957 = validateParameter(valid_608957, JInt, required = false, default = nil)
  if valid_608957 != nil:
    section.add "MaxItems", valid_608957
  var valid_608958 = query.getOrDefault("PathPrefix")
  valid_608958 = validateParameter(valid_608958, JString, required = false,
                                 default = nil)
  if valid_608958 != nil:
    section.add "PathPrefix", valid_608958
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_608959 = query.getOrDefault("RoleName")
  valid_608959 = validateParameter(valid_608959, JString, required = true,
                                 default = nil)
  if valid_608959 != nil:
    section.add "RoleName", valid_608959
  var valid_608960 = query.getOrDefault("Action")
  valid_608960 = validateParameter(valid_608960, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_608960 != nil:
    section.add "Action", valid_608960
  var valid_608961 = query.getOrDefault("Version")
  valid_608961 = validateParameter(valid_608961, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608961 != nil:
    section.add "Version", valid_608961
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608962 = header.getOrDefault("X-Amz-Signature")
  valid_608962 = validateParameter(valid_608962, JString, required = false,
                                 default = nil)
  if valid_608962 != nil:
    section.add "X-Amz-Signature", valid_608962
  var valid_608963 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608963 = validateParameter(valid_608963, JString, required = false,
                                 default = nil)
  if valid_608963 != nil:
    section.add "X-Amz-Content-Sha256", valid_608963
  var valid_608964 = header.getOrDefault("X-Amz-Date")
  valid_608964 = validateParameter(valid_608964, JString, required = false,
                                 default = nil)
  if valid_608964 != nil:
    section.add "X-Amz-Date", valid_608964
  var valid_608965 = header.getOrDefault("X-Amz-Credential")
  valid_608965 = validateParameter(valid_608965, JString, required = false,
                                 default = nil)
  if valid_608965 != nil:
    section.add "X-Amz-Credential", valid_608965
  var valid_608966 = header.getOrDefault("X-Amz-Security-Token")
  valid_608966 = validateParameter(valid_608966, JString, required = false,
                                 default = nil)
  if valid_608966 != nil:
    section.add "X-Amz-Security-Token", valid_608966
  var valid_608967 = header.getOrDefault("X-Amz-Algorithm")
  valid_608967 = validateParameter(valid_608967, JString, required = false,
                                 default = nil)
  if valid_608967 != nil:
    section.add "X-Amz-Algorithm", valid_608967
  var valid_608968 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608968 = validateParameter(valid_608968, JString, required = false,
                                 default = nil)
  if valid_608968 != nil:
    section.add "X-Amz-SignedHeaders", valid_608968
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608969: Call_GetListAttachedRolePolicies_608953; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_608969.validator(path, query, header, formData, body)
  let scheme = call_608969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608969.url(scheme.get, call_608969.host, call_608969.base,
                         call_608969.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608969, url, valid)

proc call*(call_608970: Call_GetListAttachedRolePolicies_608953; RoleName: string;
          Marker: string = ""; MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListAttachedRolePolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608971 = newJObject()
  add(query_608971, "Marker", newJString(Marker))
  add(query_608971, "MaxItems", newJInt(MaxItems))
  add(query_608971, "PathPrefix", newJString(PathPrefix))
  add(query_608971, "RoleName", newJString(RoleName))
  add(query_608971, "Action", newJString(Action))
  add(query_608971, "Version", newJString(Version))
  result = call_608970.call(nil, query_608971, nil, nil, nil)

var getListAttachedRolePolicies* = Call_GetListAttachedRolePolicies_608953(
    name: "getListAttachedRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_GetListAttachedRolePolicies_608954, base: "/",
    url: url_GetListAttachedRolePolicies_608955,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedUserPolicies_609011 = ref object of OpenApiRestCall_605589
proc url_PostListAttachedUserPolicies_609013(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedUserPolicies_609012(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609014 = query.getOrDefault("Action")
  valid_609014 = validateParameter(valid_609014, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_609014 != nil:
    section.add "Action", valid_609014
  var valid_609015 = query.getOrDefault("Version")
  valid_609015 = validateParameter(valid_609015, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609015 != nil:
    section.add "Version", valid_609015
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609016 = header.getOrDefault("X-Amz-Signature")
  valid_609016 = validateParameter(valid_609016, JString, required = false,
                                 default = nil)
  if valid_609016 != nil:
    section.add "X-Amz-Signature", valid_609016
  var valid_609017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609017 = validateParameter(valid_609017, JString, required = false,
                                 default = nil)
  if valid_609017 != nil:
    section.add "X-Amz-Content-Sha256", valid_609017
  var valid_609018 = header.getOrDefault("X-Amz-Date")
  valid_609018 = validateParameter(valid_609018, JString, required = false,
                                 default = nil)
  if valid_609018 != nil:
    section.add "X-Amz-Date", valid_609018
  var valid_609019 = header.getOrDefault("X-Amz-Credential")
  valid_609019 = validateParameter(valid_609019, JString, required = false,
                                 default = nil)
  if valid_609019 != nil:
    section.add "X-Amz-Credential", valid_609019
  var valid_609020 = header.getOrDefault("X-Amz-Security-Token")
  valid_609020 = validateParameter(valid_609020, JString, required = false,
                                 default = nil)
  if valid_609020 != nil:
    section.add "X-Amz-Security-Token", valid_609020
  var valid_609021 = header.getOrDefault("X-Amz-Algorithm")
  valid_609021 = validateParameter(valid_609021, JString, required = false,
                                 default = nil)
  if valid_609021 != nil:
    section.add "X-Amz-Algorithm", valid_609021
  var valid_609022 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609022 = validateParameter(valid_609022, JString, required = false,
                                 default = nil)
  if valid_609022 != nil:
    section.add "X-Amz-SignedHeaders", valid_609022
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609023 = formData.getOrDefault("Marker")
  valid_609023 = validateParameter(valid_609023, JString, required = false,
                                 default = nil)
  if valid_609023 != nil:
    section.add "Marker", valid_609023
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_609024 = formData.getOrDefault("UserName")
  valid_609024 = validateParameter(valid_609024, JString, required = true,
                                 default = nil)
  if valid_609024 != nil:
    section.add "UserName", valid_609024
  var valid_609025 = formData.getOrDefault("PathPrefix")
  valid_609025 = validateParameter(valid_609025, JString, required = false,
                                 default = nil)
  if valid_609025 != nil:
    section.add "PathPrefix", valid_609025
  var valid_609026 = formData.getOrDefault("MaxItems")
  valid_609026 = validateParameter(valid_609026, JInt, required = false, default = nil)
  if valid_609026 != nil:
    section.add "MaxItems", valid_609026
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609027: Call_PostListAttachedUserPolicies_609011; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_609027.validator(path, query, header, formData, body)
  let scheme = call_609027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609027.url(scheme.get, call_609027.host, call_609027.base,
                         call_609027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609027, url, valid)

proc call*(call_609028: Call_PostListAttachedUserPolicies_609011; UserName: string;
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListAttachedUserPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609029 = newJObject()
  var formData_609030 = newJObject()
  add(formData_609030, "Marker", newJString(Marker))
  add(formData_609030, "UserName", newJString(UserName))
  add(formData_609030, "PathPrefix", newJString(PathPrefix))
  add(formData_609030, "MaxItems", newJInt(MaxItems))
  add(query_609029, "Action", newJString(Action))
  add(query_609029, "Version", newJString(Version))
  result = call_609028.call(nil, query_609029, nil, formData_609030, nil)

var postListAttachedUserPolicies* = Call_PostListAttachedUserPolicies_609011(
    name: "postListAttachedUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_PostListAttachedUserPolicies_609012, base: "/",
    url: url_PostListAttachedUserPolicies_609013,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedUserPolicies_608992 = ref object of OpenApiRestCall_605589
proc url_GetListAttachedUserPolicies_608994(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedUserPolicies_608993(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608995 = query.getOrDefault("Marker")
  valid_608995 = validateParameter(valid_608995, JString, required = false,
                                 default = nil)
  if valid_608995 != nil:
    section.add "Marker", valid_608995
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_608996 = query.getOrDefault("UserName")
  valid_608996 = validateParameter(valid_608996, JString, required = true,
                                 default = nil)
  if valid_608996 != nil:
    section.add "UserName", valid_608996
  var valid_608997 = query.getOrDefault("MaxItems")
  valid_608997 = validateParameter(valid_608997, JInt, required = false, default = nil)
  if valid_608997 != nil:
    section.add "MaxItems", valid_608997
  var valid_608998 = query.getOrDefault("PathPrefix")
  valid_608998 = validateParameter(valid_608998, JString, required = false,
                                 default = nil)
  if valid_608998 != nil:
    section.add "PathPrefix", valid_608998
  var valid_608999 = query.getOrDefault("Action")
  valid_608999 = validateParameter(valid_608999, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_608999 != nil:
    section.add "Action", valid_608999
  var valid_609000 = query.getOrDefault("Version")
  valid_609000 = validateParameter(valid_609000, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609000 != nil:
    section.add "Version", valid_609000
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609001 = header.getOrDefault("X-Amz-Signature")
  valid_609001 = validateParameter(valid_609001, JString, required = false,
                                 default = nil)
  if valid_609001 != nil:
    section.add "X-Amz-Signature", valid_609001
  var valid_609002 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609002 = validateParameter(valid_609002, JString, required = false,
                                 default = nil)
  if valid_609002 != nil:
    section.add "X-Amz-Content-Sha256", valid_609002
  var valid_609003 = header.getOrDefault("X-Amz-Date")
  valid_609003 = validateParameter(valid_609003, JString, required = false,
                                 default = nil)
  if valid_609003 != nil:
    section.add "X-Amz-Date", valid_609003
  var valid_609004 = header.getOrDefault("X-Amz-Credential")
  valid_609004 = validateParameter(valid_609004, JString, required = false,
                                 default = nil)
  if valid_609004 != nil:
    section.add "X-Amz-Credential", valid_609004
  var valid_609005 = header.getOrDefault("X-Amz-Security-Token")
  valid_609005 = validateParameter(valid_609005, JString, required = false,
                                 default = nil)
  if valid_609005 != nil:
    section.add "X-Amz-Security-Token", valid_609005
  var valid_609006 = header.getOrDefault("X-Amz-Algorithm")
  valid_609006 = validateParameter(valid_609006, JString, required = false,
                                 default = nil)
  if valid_609006 != nil:
    section.add "X-Amz-Algorithm", valid_609006
  var valid_609007 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609007 = validateParameter(valid_609007, JString, required = false,
                                 default = nil)
  if valid_609007 != nil:
    section.add "X-Amz-SignedHeaders", valid_609007
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609008: Call_GetListAttachedUserPolicies_608992; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_609008.validator(path, query, header, formData, body)
  let scheme = call_609008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609008.url(scheme.get, call_609008.host, call_609008.base,
                         call_609008.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609008, url, valid)

proc call*(call_609009: Call_GetListAttachedUserPolicies_608992; UserName: string;
          Marker: string = ""; MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListAttachedUserPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609010 = newJObject()
  add(query_609010, "Marker", newJString(Marker))
  add(query_609010, "UserName", newJString(UserName))
  add(query_609010, "MaxItems", newJInt(MaxItems))
  add(query_609010, "PathPrefix", newJString(PathPrefix))
  add(query_609010, "Action", newJString(Action))
  add(query_609010, "Version", newJString(Version))
  result = call_609009.call(nil, query_609010, nil, nil, nil)

var getListAttachedUserPolicies* = Call_GetListAttachedUserPolicies_608992(
    name: "getListAttachedUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_GetListAttachedUserPolicies_608993, base: "/",
    url: url_GetListAttachedUserPolicies_608994,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListEntitiesForPolicy_609052 = ref object of OpenApiRestCall_605589
proc url_PostListEntitiesForPolicy_609054(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListEntitiesForPolicy_609053(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609055 = query.getOrDefault("Action")
  valid_609055 = validateParameter(valid_609055, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_609055 != nil:
    section.add "Action", valid_609055
  var valid_609056 = query.getOrDefault("Version")
  valid_609056 = validateParameter(valid_609056, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609056 != nil:
    section.add "Version", valid_609056
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609057 = header.getOrDefault("X-Amz-Signature")
  valid_609057 = validateParameter(valid_609057, JString, required = false,
                                 default = nil)
  if valid_609057 != nil:
    section.add "X-Amz-Signature", valid_609057
  var valid_609058 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609058 = validateParameter(valid_609058, JString, required = false,
                                 default = nil)
  if valid_609058 != nil:
    section.add "X-Amz-Content-Sha256", valid_609058
  var valid_609059 = header.getOrDefault("X-Amz-Date")
  valid_609059 = validateParameter(valid_609059, JString, required = false,
                                 default = nil)
  if valid_609059 != nil:
    section.add "X-Amz-Date", valid_609059
  var valid_609060 = header.getOrDefault("X-Amz-Credential")
  valid_609060 = validateParameter(valid_609060, JString, required = false,
                                 default = nil)
  if valid_609060 != nil:
    section.add "X-Amz-Credential", valid_609060
  var valid_609061 = header.getOrDefault("X-Amz-Security-Token")
  valid_609061 = validateParameter(valid_609061, JString, required = false,
                                 default = nil)
  if valid_609061 != nil:
    section.add "X-Amz-Security-Token", valid_609061
  var valid_609062 = header.getOrDefault("X-Amz-Algorithm")
  valid_609062 = validateParameter(valid_609062, JString, required = false,
                                 default = nil)
  if valid_609062 != nil:
    section.add "X-Amz-Algorithm", valid_609062
  var valid_609063 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609063 = validateParameter(valid_609063, JString, required = false,
                                 default = nil)
  if valid_609063 != nil:
    section.add "X-Amz-SignedHeaders", valid_609063
  result.add "header", section
  ## parameters in `formData` object:
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_609064 = formData.getOrDefault("EntityFilter")
  valid_609064 = validateParameter(valid_609064, JString, required = false,
                                 default = newJString("User"))
  if valid_609064 != nil:
    section.add "EntityFilter", valid_609064
  var valid_609065 = formData.getOrDefault("Marker")
  valid_609065 = validateParameter(valid_609065, JString, required = false,
                                 default = nil)
  if valid_609065 != nil:
    section.add "Marker", valid_609065
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_609066 = formData.getOrDefault("PolicyArn")
  valid_609066 = validateParameter(valid_609066, JString, required = true,
                                 default = nil)
  if valid_609066 != nil:
    section.add "PolicyArn", valid_609066
  var valid_609067 = formData.getOrDefault("PathPrefix")
  valid_609067 = validateParameter(valid_609067, JString, required = false,
                                 default = nil)
  if valid_609067 != nil:
    section.add "PathPrefix", valid_609067
  var valid_609068 = formData.getOrDefault("MaxItems")
  valid_609068 = validateParameter(valid_609068, JInt, required = false, default = nil)
  if valid_609068 != nil:
    section.add "MaxItems", valid_609068
  var valid_609069 = formData.getOrDefault("PolicyUsageFilter")
  valid_609069 = validateParameter(valid_609069, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_609069 != nil:
    section.add "PolicyUsageFilter", valid_609069
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609070: Call_PostListEntitiesForPolicy_609052; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609070.validator(path, query, header, formData, body)
  let scheme = call_609070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609070.url(scheme.get, call_609070.host, call_609070.base,
                         call_609070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609070, url, valid)

proc call*(call_609071: Call_PostListEntitiesForPolicy_609052; PolicyArn: string;
          EntityFilter: string = "User"; Marker: string = ""; PathPrefix: string = "";
          MaxItems: int = 0; Action: string = "ListEntitiesForPolicy";
          Version: string = "2010-05-08";
          PolicyUsageFilter: string = "PermissionsPolicy"): Recallable =
  ## postListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  var query_609072 = newJObject()
  var formData_609073 = newJObject()
  add(formData_609073, "EntityFilter", newJString(EntityFilter))
  add(formData_609073, "Marker", newJString(Marker))
  add(formData_609073, "PolicyArn", newJString(PolicyArn))
  add(formData_609073, "PathPrefix", newJString(PathPrefix))
  add(formData_609073, "MaxItems", newJInt(MaxItems))
  add(query_609072, "Action", newJString(Action))
  add(query_609072, "Version", newJString(Version))
  add(formData_609073, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  result = call_609071.call(nil, query_609072, nil, formData_609073, nil)

var postListEntitiesForPolicy* = Call_PostListEntitiesForPolicy_609052(
    name: "postListEntitiesForPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_PostListEntitiesForPolicy_609053, base: "/",
    url: url_PostListEntitiesForPolicy_609054,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListEntitiesForPolicy_609031 = ref object of OpenApiRestCall_605589
proc url_GetListEntitiesForPolicy_609033(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListEntitiesForPolicy_609032(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609034 = query.getOrDefault("Marker")
  valid_609034 = validateParameter(valid_609034, JString, required = false,
                                 default = nil)
  if valid_609034 != nil:
    section.add "Marker", valid_609034
  var valid_609035 = query.getOrDefault("PolicyUsageFilter")
  valid_609035 = validateParameter(valid_609035, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_609035 != nil:
    section.add "PolicyUsageFilter", valid_609035
  var valid_609036 = query.getOrDefault("EntityFilter")
  valid_609036 = validateParameter(valid_609036, JString, required = false,
                                 default = newJString("User"))
  if valid_609036 != nil:
    section.add "EntityFilter", valid_609036
  var valid_609037 = query.getOrDefault("MaxItems")
  valid_609037 = validateParameter(valid_609037, JInt, required = false, default = nil)
  if valid_609037 != nil:
    section.add "MaxItems", valid_609037
  var valid_609038 = query.getOrDefault("PathPrefix")
  valid_609038 = validateParameter(valid_609038, JString, required = false,
                                 default = nil)
  if valid_609038 != nil:
    section.add "PathPrefix", valid_609038
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_609039 = query.getOrDefault("PolicyArn")
  valid_609039 = validateParameter(valid_609039, JString, required = true,
                                 default = nil)
  if valid_609039 != nil:
    section.add "PolicyArn", valid_609039
  var valid_609040 = query.getOrDefault("Action")
  valid_609040 = validateParameter(valid_609040, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_609040 != nil:
    section.add "Action", valid_609040
  var valid_609041 = query.getOrDefault("Version")
  valid_609041 = validateParameter(valid_609041, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609041 != nil:
    section.add "Version", valid_609041
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609042 = header.getOrDefault("X-Amz-Signature")
  valid_609042 = validateParameter(valid_609042, JString, required = false,
                                 default = nil)
  if valid_609042 != nil:
    section.add "X-Amz-Signature", valid_609042
  var valid_609043 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609043 = validateParameter(valid_609043, JString, required = false,
                                 default = nil)
  if valid_609043 != nil:
    section.add "X-Amz-Content-Sha256", valid_609043
  var valid_609044 = header.getOrDefault("X-Amz-Date")
  valid_609044 = validateParameter(valid_609044, JString, required = false,
                                 default = nil)
  if valid_609044 != nil:
    section.add "X-Amz-Date", valid_609044
  var valid_609045 = header.getOrDefault("X-Amz-Credential")
  valid_609045 = validateParameter(valid_609045, JString, required = false,
                                 default = nil)
  if valid_609045 != nil:
    section.add "X-Amz-Credential", valid_609045
  var valid_609046 = header.getOrDefault("X-Amz-Security-Token")
  valid_609046 = validateParameter(valid_609046, JString, required = false,
                                 default = nil)
  if valid_609046 != nil:
    section.add "X-Amz-Security-Token", valid_609046
  var valid_609047 = header.getOrDefault("X-Amz-Algorithm")
  valid_609047 = validateParameter(valid_609047, JString, required = false,
                                 default = nil)
  if valid_609047 != nil:
    section.add "X-Amz-Algorithm", valid_609047
  var valid_609048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609048 = validateParameter(valid_609048, JString, required = false,
                                 default = nil)
  if valid_609048 != nil:
    section.add "X-Amz-SignedHeaders", valid_609048
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609049: Call_GetListEntitiesForPolicy_609031; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609049.validator(path, query, header, formData, body)
  let scheme = call_609049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609049.url(scheme.get, call_609049.host, call_609049.base,
                         call_609049.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609049, url, valid)

proc call*(call_609050: Call_GetListEntitiesForPolicy_609031; PolicyArn: string;
          Marker: string = ""; PolicyUsageFilter: string = "PermissionsPolicy";
          EntityFilter: string = "User"; MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListEntitiesForPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609051 = newJObject()
  add(query_609051, "Marker", newJString(Marker))
  add(query_609051, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_609051, "EntityFilter", newJString(EntityFilter))
  add(query_609051, "MaxItems", newJInt(MaxItems))
  add(query_609051, "PathPrefix", newJString(PathPrefix))
  add(query_609051, "PolicyArn", newJString(PolicyArn))
  add(query_609051, "Action", newJString(Action))
  add(query_609051, "Version", newJString(Version))
  result = call_609050.call(nil, query_609051, nil, nil, nil)

var getListEntitiesForPolicy* = Call_GetListEntitiesForPolicy_609031(
    name: "getListEntitiesForPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_GetListEntitiesForPolicy_609032, base: "/",
    url: url_GetListEntitiesForPolicy_609033, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupPolicies_609092 = ref object of OpenApiRestCall_605589
proc url_PostListGroupPolicies_609094(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroupPolicies_609093(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609095 = query.getOrDefault("Action")
  valid_609095 = validateParameter(valid_609095, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_609095 != nil:
    section.add "Action", valid_609095
  var valid_609096 = query.getOrDefault("Version")
  valid_609096 = validateParameter(valid_609096, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609096 != nil:
    section.add "Version", valid_609096
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609097 = header.getOrDefault("X-Amz-Signature")
  valid_609097 = validateParameter(valid_609097, JString, required = false,
                                 default = nil)
  if valid_609097 != nil:
    section.add "X-Amz-Signature", valid_609097
  var valid_609098 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609098 = validateParameter(valid_609098, JString, required = false,
                                 default = nil)
  if valid_609098 != nil:
    section.add "X-Amz-Content-Sha256", valid_609098
  var valid_609099 = header.getOrDefault("X-Amz-Date")
  valid_609099 = validateParameter(valid_609099, JString, required = false,
                                 default = nil)
  if valid_609099 != nil:
    section.add "X-Amz-Date", valid_609099
  var valid_609100 = header.getOrDefault("X-Amz-Credential")
  valid_609100 = validateParameter(valid_609100, JString, required = false,
                                 default = nil)
  if valid_609100 != nil:
    section.add "X-Amz-Credential", valid_609100
  var valid_609101 = header.getOrDefault("X-Amz-Security-Token")
  valid_609101 = validateParameter(valid_609101, JString, required = false,
                                 default = nil)
  if valid_609101 != nil:
    section.add "X-Amz-Security-Token", valid_609101
  var valid_609102 = header.getOrDefault("X-Amz-Algorithm")
  valid_609102 = validateParameter(valid_609102, JString, required = false,
                                 default = nil)
  if valid_609102 != nil:
    section.add "X-Amz-Algorithm", valid_609102
  var valid_609103 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609103 = validateParameter(valid_609103, JString, required = false,
                                 default = nil)
  if valid_609103 != nil:
    section.add "X-Amz-SignedHeaders", valid_609103
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609104 = formData.getOrDefault("Marker")
  valid_609104 = validateParameter(valid_609104, JString, required = false,
                                 default = nil)
  if valid_609104 != nil:
    section.add "Marker", valid_609104
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_609105 = formData.getOrDefault("GroupName")
  valid_609105 = validateParameter(valid_609105, JString, required = true,
                                 default = nil)
  if valid_609105 != nil:
    section.add "GroupName", valid_609105
  var valid_609106 = formData.getOrDefault("MaxItems")
  valid_609106 = validateParameter(valid_609106, JInt, required = false, default = nil)
  if valid_609106 != nil:
    section.add "MaxItems", valid_609106
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609107: Call_PostListGroupPolicies_609092; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_609107.validator(path, query, header, formData, body)
  let scheme = call_609107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609107.url(scheme.get, call_609107.host, call_609107.base,
                         call_609107.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609107, url, valid)

proc call*(call_609108: Call_PostListGroupPolicies_609092; GroupName: string;
          Marker: string = ""; Action: string = "ListGroupPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_609109 = newJObject()
  var formData_609110 = newJObject()
  add(formData_609110, "Marker", newJString(Marker))
  add(formData_609110, "GroupName", newJString(GroupName))
  add(query_609109, "Action", newJString(Action))
  add(formData_609110, "MaxItems", newJInt(MaxItems))
  add(query_609109, "Version", newJString(Version))
  result = call_609108.call(nil, query_609109, nil, formData_609110, nil)

var postListGroupPolicies* = Call_PostListGroupPolicies_609092(
    name: "postListGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_PostListGroupPolicies_609093, base: "/",
    url: url_PostListGroupPolicies_609094, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupPolicies_609074 = ref object of OpenApiRestCall_605589
proc url_GetListGroupPolicies_609076(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroupPolicies_609075(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609077 = query.getOrDefault("Marker")
  valid_609077 = validateParameter(valid_609077, JString, required = false,
                                 default = nil)
  if valid_609077 != nil:
    section.add "Marker", valid_609077
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_609078 = query.getOrDefault("GroupName")
  valid_609078 = validateParameter(valid_609078, JString, required = true,
                                 default = nil)
  if valid_609078 != nil:
    section.add "GroupName", valid_609078
  var valid_609079 = query.getOrDefault("MaxItems")
  valid_609079 = validateParameter(valid_609079, JInt, required = false, default = nil)
  if valid_609079 != nil:
    section.add "MaxItems", valid_609079
  var valid_609080 = query.getOrDefault("Action")
  valid_609080 = validateParameter(valid_609080, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_609080 != nil:
    section.add "Action", valid_609080
  var valid_609081 = query.getOrDefault("Version")
  valid_609081 = validateParameter(valid_609081, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609081 != nil:
    section.add "Version", valid_609081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609082 = header.getOrDefault("X-Amz-Signature")
  valid_609082 = validateParameter(valid_609082, JString, required = false,
                                 default = nil)
  if valid_609082 != nil:
    section.add "X-Amz-Signature", valid_609082
  var valid_609083 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609083 = validateParameter(valid_609083, JString, required = false,
                                 default = nil)
  if valid_609083 != nil:
    section.add "X-Amz-Content-Sha256", valid_609083
  var valid_609084 = header.getOrDefault("X-Amz-Date")
  valid_609084 = validateParameter(valid_609084, JString, required = false,
                                 default = nil)
  if valid_609084 != nil:
    section.add "X-Amz-Date", valid_609084
  var valid_609085 = header.getOrDefault("X-Amz-Credential")
  valid_609085 = validateParameter(valid_609085, JString, required = false,
                                 default = nil)
  if valid_609085 != nil:
    section.add "X-Amz-Credential", valid_609085
  var valid_609086 = header.getOrDefault("X-Amz-Security-Token")
  valid_609086 = validateParameter(valid_609086, JString, required = false,
                                 default = nil)
  if valid_609086 != nil:
    section.add "X-Amz-Security-Token", valid_609086
  var valid_609087 = header.getOrDefault("X-Amz-Algorithm")
  valid_609087 = validateParameter(valid_609087, JString, required = false,
                                 default = nil)
  if valid_609087 != nil:
    section.add "X-Amz-Algorithm", valid_609087
  var valid_609088 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609088 = validateParameter(valid_609088, JString, required = false,
                                 default = nil)
  if valid_609088 != nil:
    section.add "X-Amz-SignedHeaders", valid_609088
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609089: Call_GetListGroupPolicies_609074; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_609089.validator(path, query, header, formData, body)
  let scheme = call_609089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609089.url(scheme.get, call_609089.host, call_609089.base,
                         call_609089.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609089, url, valid)

proc call*(call_609090: Call_GetListGroupPolicies_609074; GroupName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListGroupPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609091 = newJObject()
  add(query_609091, "Marker", newJString(Marker))
  add(query_609091, "GroupName", newJString(GroupName))
  add(query_609091, "MaxItems", newJInt(MaxItems))
  add(query_609091, "Action", newJString(Action))
  add(query_609091, "Version", newJString(Version))
  result = call_609090.call(nil, query_609091, nil, nil, nil)

var getListGroupPolicies* = Call_GetListGroupPolicies_609074(
    name: "getListGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_GetListGroupPolicies_609075, base: "/",
    url: url_GetListGroupPolicies_609076, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroups_609129 = ref object of OpenApiRestCall_605589
proc url_PostListGroups_609131(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroups_609130(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609132 = query.getOrDefault("Action")
  valid_609132 = validateParameter(valid_609132, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_609132 != nil:
    section.add "Action", valid_609132
  var valid_609133 = query.getOrDefault("Version")
  valid_609133 = validateParameter(valid_609133, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609133 != nil:
    section.add "Version", valid_609133
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609134 = header.getOrDefault("X-Amz-Signature")
  valid_609134 = validateParameter(valid_609134, JString, required = false,
                                 default = nil)
  if valid_609134 != nil:
    section.add "X-Amz-Signature", valid_609134
  var valid_609135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609135 = validateParameter(valid_609135, JString, required = false,
                                 default = nil)
  if valid_609135 != nil:
    section.add "X-Amz-Content-Sha256", valid_609135
  var valid_609136 = header.getOrDefault("X-Amz-Date")
  valid_609136 = validateParameter(valid_609136, JString, required = false,
                                 default = nil)
  if valid_609136 != nil:
    section.add "X-Amz-Date", valid_609136
  var valid_609137 = header.getOrDefault("X-Amz-Credential")
  valid_609137 = validateParameter(valid_609137, JString, required = false,
                                 default = nil)
  if valid_609137 != nil:
    section.add "X-Amz-Credential", valid_609137
  var valid_609138 = header.getOrDefault("X-Amz-Security-Token")
  valid_609138 = validateParameter(valid_609138, JString, required = false,
                                 default = nil)
  if valid_609138 != nil:
    section.add "X-Amz-Security-Token", valid_609138
  var valid_609139 = header.getOrDefault("X-Amz-Algorithm")
  valid_609139 = validateParameter(valid_609139, JString, required = false,
                                 default = nil)
  if valid_609139 != nil:
    section.add "X-Amz-Algorithm", valid_609139
  var valid_609140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609140 = validateParameter(valid_609140, JString, required = false,
                                 default = nil)
  if valid_609140 != nil:
    section.add "X-Amz-SignedHeaders", valid_609140
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609141 = formData.getOrDefault("Marker")
  valid_609141 = validateParameter(valid_609141, JString, required = false,
                                 default = nil)
  if valid_609141 != nil:
    section.add "Marker", valid_609141
  var valid_609142 = formData.getOrDefault("PathPrefix")
  valid_609142 = validateParameter(valid_609142, JString, required = false,
                                 default = nil)
  if valid_609142 != nil:
    section.add "PathPrefix", valid_609142
  var valid_609143 = formData.getOrDefault("MaxItems")
  valid_609143 = validateParameter(valid_609143, JInt, required = false, default = nil)
  if valid_609143 != nil:
    section.add "MaxItems", valid_609143
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609144: Call_PostListGroups_609129; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609144.validator(path, query, header, formData, body)
  let scheme = call_609144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609144.url(scheme.get, call_609144.host, call_609144.base,
                         call_609144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609144, url, valid)

proc call*(call_609145: Call_PostListGroups_609129; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0; Action: string = "ListGroups";
          Version: string = "2010-05-08"): Recallable =
  ## postListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609146 = newJObject()
  var formData_609147 = newJObject()
  add(formData_609147, "Marker", newJString(Marker))
  add(formData_609147, "PathPrefix", newJString(PathPrefix))
  add(formData_609147, "MaxItems", newJInt(MaxItems))
  add(query_609146, "Action", newJString(Action))
  add(query_609146, "Version", newJString(Version))
  result = call_609145.call(nil, query_609146, nil, formData_609147, nil)

var postListGroups* = Call_PostListGroups_609129(name: "postListGroups",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_PostListGroups_609130,
    base: "/", url: url_PostListGroups_609131, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroups_609111 = ref object of OpenApiRestCall_605589
proc url_GetListGroups_609113(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroups_609112(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609114 = query.getOrDefault("Marker")
  valid_609114 = validateParameter(valid_609114, JString, required = false,
                                 default = nil)
  if valid_609114 != nil:
    section.add "Marker", valid_609114
  var valid_609115 = query.getOrDefault("MaxItems")
  valid_609115 = validateParameter(valid_609115, JInt, required = false, default = nil)
  if valid_609115 != nil:
    section.add "MaxItems", valid_609115
  var valid_609116 = query.getOrDefault("PathPrefix")
  valid_609116 = validateParameter(valid_609116, JString, required = false,
                                 default = nil)
  if valid_609116 != nil:
    section.add "PathPrefix", valid_609116
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609117 = query.getOrDefault("Action")
  valid_609117 = validateParameter(valid_609117, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_609117 != nil:
    section.add "Action", valid_609117
  var valid_609118 = query.getOrDefault("Version")
  valid_609118 = validateParameter(valid_609118, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609118 != nil:
    section.add "Version", valid_609118
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609119 = header.getOrDefault("X-Amz-Signature")
  valid_609119 = validateParameter(valid_609119, JString, required = false,
                                 default = nil)
  if valid_609119 != nil:
    section.add "X-Amz-Signature", valid_609119
  var valid_609120 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609120 = validateParameter(valid_609120, JString, required = false,
                                 default = nil)
  if valid_609120 != nil:
    section.add "X-Amz-Content-Sha256", valid_609120
  var valid_609121 = header.getOrDefault("X-Amz-Date")
  valid_609121 = validateParameter(valid_609121, JString, required = false,
                                 default = nil)
  if valid_609121 != nil:
    section.add "X-Amz-Date", valid_609121
  var valid_609122 = header.getOrDefault("X-Amz-Credential")
  valid_609122 = validateParameter(valid_609122, JString, required = false,
                                 default = nil)
  if valid_609122 != nil:
    section.add "X-Amz-Credential", valid_609122
  var valid_609123 = header.getOrDefault("X-Amz-Security-Token")
  valid_609123 = validateParameter(valid_609123, JString, required = false,
                                 default = nil)
  if valid_609123 != nil:
    section.add "X-Amz-Security-Token", valid_609123
  var valid_609124 = header.getOrDefault("X-Amz-Algorithm")
  valid_609124 = validateParameter(valid_609124, JString, required = false,
                                 default = nil)
  if valid_609124 != nil:
    section.add "X-Amz-Algorithm", valid_609124
  var valid_609125 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609125 = validateParameter(valid_609125, JString, required = false,
                                 default = nil)
  if valid_609125 != nil:
    section.add "X-Amz-SignedHeaders", valid_609125
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609126: Call_GetListGroups_609111; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609126.validator(path, query, header, formData, body)
  let scheme = call_609126.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609126.url(scheme.get, call_609126.host, call_609126.base,
                         call_609126.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609126, url, valid)

proc call*(call_609127: Call_GetListGroups_609111; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = ""; Action: string = "ListGroups";
          Version: string = "2010-05-08"): Recallable =
  ## getListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609128 = newJObject()
  add(query_609128, "Marker", newJString(Marker))
  add(query_609128, "MaxItems", newJInt(MaxItems))
  add(query_609128, "PathPrefix", newJString(PathPrefix))
  add(query_609128, "Action", newJString(Action))
  add(query_609128, "Version", newJString(Version))
  result = call_609127.call(nil, query_609128, nil, nil, nil)

var getListGroups* = Call_GetListGroups_609111(name: "getListGroups",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_GetListGroups_609112,
    base: "/", url: url_GetListGroups_609113, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupsForUser_609166 = ref object of OpenApiRestCall_605589
proc url_PostListGroupsForUser_609168(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroupsForUser_609167(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609169 = query.getOrDefault("Action")
  valid_609169 = validateParameter(valid_609169, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_609169 != nil:
    section.add "Action", valid_609169
  var valid_609170 = query.getOrDefault("Version")
  valid_609170 = validateParameter(valid_609170, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609170 != nil:
    section.add "Version", valid_609170
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609171 = header.getOrDefault("X-Amz-Signature")
  valid_609171 = validateParameter(valid_609171, JString, required = false,
                                 default = nil)
  if valid_609171 != nil:
    section.add "X-Amz-Signature", valid_609171
  var valid_609172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609172 = validateParameter(valid_609172, JString, required = false,
                                 default = nil)
  if valid_609172 != nil:
    section.add "X-Amz-Content-Sha256", valid_609172
  var valid_609173 = header.getOrDefault("X-Amz-Date")
  valid_609173 = validateParameter(valid_609173, JString, required = false,
                                 default = nil)
  if valid_609173 != nil:
    section.add "X-Amz-Date", valid_609173
  var valid_609174 = header.getOrDefault("X-Amz-Credential")
  valid_609174 = validateParameter(valid_609174, JString, required = false,
                                 default = nil)
  if valid_609174 != nil:
    section.add "X-Amz-Credential", valid_609174
  var valid_609175 = header.getOrDefault("X-Amz-Security-Token")
  valid_609175 = validateParameter(valid_609175, JString, required = false,
                                 default = nil)
  if valid_609175 != nil:
    section.add "X-Amz-Security-Token", valid_609175
  var valid_609176 = header.getOrDefault("X-Amz-Algorithm")
  valid_609176 = validateParameter(valid_609176, JString, required = false,
                                 default = nil)
  if valid_609176 != nil:
    section.add "X-Amz-Algorithm", valid_609176
  var valid_609177 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609177 = validateParameter(valid_609177, JString, required = false,
                                 default = nil)
  if valid_609177 != nil:
    section.add "X-Amz-SignedHeaders", valid_609177
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609178 = formData.getOrDefault("Marker")
  valid_609178 = validateParameter(valid_609178, JString, required = false,
                                 default = nil)
  if valid_609178 != nil:
    section.add "Marker", valid_609178
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_609179 = formData.getOrDefault("UserName")
  valid_609179 = validateParameter(valid_609179, JString, required = true,
                                 default = nil)
  if valid_609179 != nil:
    section.add "UserName", valid_609179
  var valid_609180 = formData.getOrDefault("MaxItems")
  valid_609180 = validateParameter(valid_609180, JInt, required = false, default = nil)
  if valid_609180 != nil:
    section.add "MaxItems", valid_609180
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609181: Call_PostListGroupsForUser_609166; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609181.validator(path, query, header, formData, body)
  let scheme = call_609181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609181.url(scheme.get, call_609181.host, call_609181.base,
                         call_609181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609181, url, valid)

proc call*(call_609182: Call_PostListGroupsForUser_609166; UserName: string;
          Marker: string = ""; Action: string = "ListGroupsForUser"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_609183 = newJObject()
  var formData_609184 = newJObject()
  add(formData_609184, "Marker", newJString(Marker))
  add(formData_609184, "UserName", newJString(UserName))
  add(query_609183, "Action", newJString(Action))
  add(formData_609184, "MaxItems", newJInt(MaxItems))
  add(query_609183, "Version", newJString(Version))
  result = call_609182.call(nil, query_609183, nil, formData_609184, nil)

var postListGroupsForUser* = Call_PostListGroupsForUser_609166(
    name: "postListGroupsForUser", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_PostListGroupsForUser_609167, base: "/",
    url: url_PostListGroupsForUser_609168, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupsForUser_609148 = ref object of OpenApiRestCall_605589
proc url_GetListGroupsForUser_609150(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroupsForUser_609149(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609151 = query.getOrDefault("Marker")
  valid_609151 = validateParameter(valid_609151, JString, required = false,
                                 default = nil)
  if valid_609151 != nil:
    section.add "Marker", valid_609151
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_609152 = query.getOrDefault("UserName")
  valid_609152 = validateParameter(valid_609152, JString, required = true,
                                 default = nil)
  if valid_609152 != nil:
    section.add "UserName", valid_609152
  var valid_609153 = query.getOrDefault("MaxItems")
  valid_609153 = validateParameter(valid_609153, JInt, required = false, default = nil)
  if valid_609153 != nil:
    section.add "MaxItems", valid_609153
  var valid_609154 = query.getOrDefault("Action")
  valid_609154 = validateParameter(valid_609154, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_609154 != nil:
    section.add "Action", valid_609154
  var valid_609155 = query.getOrDefault("Version")
  valid_609155 = validateParameter(valid_609155, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609155 != nil:
    section.add "Version", valid_609155
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609156 = header.getOrDefault("X-Amz-Signature")
  valid_609156 = validateParameter(valid_609156, JString, required = false,
                                 default = nil)
  if valid_609156 != nil:
    section.add "X-Amz-Signature", valid_609156
  var valid_609157 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609157 = validateParameter(valid_609157, JString, required = false,
                                 default = nil)
  if valid_609157 != nil:
    section.add "X-Amz-Content-Sha256", valid_609157
  var valid_609158 = header.getOrDefault("X-Amz-Date")
  valid_609158 = validateParameter(valid_609158, JString, required = false,
                                 default = nil)
  if valid_609158 != nil:
    section.add "X-Amz-Date", valid_609158
  var valid_609159 = header.getOrDefault("X-Amz-Credential")
  valid_609159 = validateParameter(valid_609159, JString, required = false,
                                 default = nil)
  if valid_609159 != nil:
    section.add "X-Amz-Credential", valid_609159
  var valid_609160 = header.getOrDefault("X-Amz-Security-Token")
  valid_609160 = validateParameter(valid_609160, JString, required = false,
                                 default = nil)
  if valid_609160 != nil:
    section.add "X-Amz-Security-Token", valid_609160
  var valid_609161 = header.getOrDefault("X-Amz-Algorithm")
  valid_609161 = validateParameter(valid_609161, JString, required = false,
                                 default = nil)
  if valid_609161 != nil:
    section.add "X-Amz-Algorithm", valid_609161
  var valid_609162 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609162 = validateParameter(valid_609162, JString, required = false,
                                 default = nil)
  if valid_609162 != nil:
    section.add "X-Amz-SignedHeaders", valid_609162
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609163: Call_GetListGroupsForUser_609148; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609163.validator(path, query, header, formData, body)
  let scheme = call_609163.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609163.url(scheme.get, call_609163.host, call_609163.base,
                         call_609163.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609163, url, valid)

proc call*(call_609164: Call_GetListGroupsForUser_609148; UserName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListGroupsForUser";
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609165 = newJObject()
  add(query_609165, "Marker", newJString(Marker))
  add(query_609165, "UserName", newJString(UserName))
  add(query_609165, "MaxItems", newJInt(MaxItems))
  add(query_609165, "Action", newJString(Action))
  add(query_609165, "Version", newJString(Version))
  result = call_609164.call(nil, query_609165, nil, nil, nil)

var getListGroupsForUser* = Call_GetListGroupsForUser_609148(
    name: "getListGroupsForUser", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_GetListGroupsForUser_609149, base: "/",
    url: url_GetListGroupsForUser_609150, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfiles_609203 = ref object of OpenApiRestCall_605589
proc url_PostListInstanceProfiles_609205(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListInstanceProfiles_609204(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609206 = query.getOrDefault("Action")
  valid_609206 = validateParameter(valid_609206, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_609206 != nil:
    section.add "Action", valid_609206
  var valid_609207 = query.getOrDefault("Version")
  valid_609207 = validateParameter(valid_609207, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609207 != nil:
    section.add "Version", valid_609207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609208 = header.getOrDefault("X-Amz-Signature")
  valid_609208 = validateParameter(valid_609208, JString, required = false,
                                 default = nil)
  if valid_609208 != nil:
    section.add "X-Amz-Signature", valid_609208
  var valid_609209 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609209 = validateParameter(valid_609209, JString, required = false,
                                 default = nil)
  if valid_609209 != nil:
    section.add "X-Amz-Content-Sha256", valid_609209
  var valid_609210 = header.getOrDefault("X-Amz-Date")
  valid_609210 = validateParameter(valid_609210, JString, required = false,
                                 default = nil)
  if valid_609210 != nil:
    section.add "X-Amz-Date", valid_609210
  var valid_609211 = header.getOrDefault("X-Amz-Credential")
  valid_609211 = validateParameter(valid_609211, JString, required = false,
                                 default = nil)
  if valid_609211 != nil:
    section.add "X-Amz-Credential", valid_609211
  var valid_609212 = header.getOrDefault("X-Amz-Security-Token")
  valid_609212 = validateParameter(valid_609212, JString, required = false,
                                 default = nil)
  if valid_609212 != nil:
    section.add "X-Amz-Security-Token", valid_609212
  var valid_609213 = header.getOrDefault("X-Amz-Algorithm")
  valid_609213 = validateParameter(valid_609213, JString, required = false,
                                 default = nil)
  if valid_609213 != nil:
    section.add "X-Amz-Algorithm", valid_609213
  var valid_609214 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609214 = validateParameter(valid_609214, JString, required = false,
                                 default = nil)
  if valid_609214 != nil:
    section.add "X-Amz-SignedHeaders", valid_609214
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609215 = formData.getOrDefault("Marker")
  valid_609215 = validateParameter(valid_609215, JString, required = false,
                                 default = nil)
  if valid_609215 != nil:
    section.add "Marker", valid_609215
  var valid_609216 = formData.getOrDefault("PathPrefix")
  valid_609216 = validateParameter(valid_609216, JString, required = false,
                                 default = nil)
  if valid_609216 != nil:
    section.add "PathPrefix", valid_609216
  var valid_609217 = formData.getOrDefault("MaxItems")
  valid_609217 = validateParameter(valid_609217, JInt, required = false, default = nil)
  if valid_609217 != nil:
    section.add "MaxItems", valid_609217
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609218: Call_PostListInstanceProfiles_609203; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609218.validator(path, query, header, formData, body)
  let scheme = call_609218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609218.url(scheme.get, call_609218.host, call_609218.base,
                         call_609218.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609218, url, valid)

proc call*(call_609219: Call_PostListInstanceProfiles_609203; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListInstanceProfiles"; Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609220 = newJObject()
  var formData_609221 = newJObject()
  add(formData_609221, "Marker", newJString(Marker))
  add(formData_609221, "PathPrefix", newJString(PathPrefix))
  add(formData_609221, "MaxItems", newJInt(MaxItems))
  add(query_609220, "Action", newJString(Action))
  add(query_609220, "Version", newJString(Version))
  result = call_609219.call(nil, query_609220, nil, formData_609221, nil)

var postListInstanceProfiles* = Call_PostListInstanceProfiles_609203(
    name: "postListInstanceProfiles", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_PostListInstanceProfiles_609204, base: "/",
    url: url_PostListInstanceProfiles_609205, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfiles_609185 = ref object of OpenApiRestCall_605589
proc url_GetListInstanceProfiles_609187(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListInstanceProfiles_609186(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609188 = query.getOrDefault("Marker")
  valid_609188 = validateParameter(valid_609188, JString, required = false,
                                 default = nil)
  if valid_609188 != nil:
    section.add "Marker", valid_609188
  var valid_609189 = query.getOrDefault("MaxItems")
  valid_609189 = validateParameter(valid_609189, JInt, required = false, default = nil)
  if valid_609189 != nil:
    section.add "MaxItems", valid_609189
  var valid_609190 = query.getOrDefault("PathPrefix")
  valid_609190 = validateParameter(valid_609190, JString, required = false,
                                 default = nil)
  if valid_609190 != nil:
    section.add "PathPrefix", valid_609190
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609191 = query.getOrDefault("Action")
  valid_609191 = validateParameter(valid_609191, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_609191 != nil:
    section.add "Action", valid_609191
  var valid_609192 = query.getOrDefault("Version")
  valid_609192 = validateParameter(valid_609192, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609192 != nil:
    section.add "Version", valid_609192
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609193 = header.getOrDefault("X-Amz-Signature")
  valid_609193 = validateParameter(valid_609193, JString, required = false,
                                 default = nil)
  if valid_609193 != nil:
    section.add "X-Amz-Signature", valid_609193
  var valid_609194 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609194 = validateParameter(valid_609194, JString, required = false,
                                 default = nil)
  if valid_609194 != nil:
    section.add "X-Amz-Content-Sha256", valid_609194
  var valid_609195 = header.getOrDefault("X-Amz-Date")
  valid_609195 = validateParameter(valid_609195, JString, required = false,
                                 default = nil)
  if valid_609195 != nil:
    section.add "X-Amz-Date", valid_609195
  var valid_609196 = header.getOrDefault("X-Amz-Credential")
  valid_609196 = validateParameter(valid_609196, JString, required = false,
                                 default = nil)
  if valid_609196 != nil:
    section.add "X-Amz-Credential", valid_609196
  var valid_609197 = header.getOrDefault("X-Amz-Security-Token")
  valid_609197 = validateParameter(valid_609197, JString, required = false,
                                 default = nil)
  if valid_609197 != nil:
    section.add "X-Amz-Security-Token", valid_609197
  var valid_609198 = header.getOrDefault("X-Amz-Algorithm")
  valid_609198 = validateParameter(valid_609198, JString, required = false,
                                 default = nil)
  if valid_609198 != nil:
    section.add "X-Amz-Algorithm", valid_609198
  var valid_609199 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609199 = validateParameter(valid_609199, JString, required = false,
                                 default = nil)
  if valid_609199 != nil:
    section.add "X-Amz-SignedHeaders", valid_609199
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609200: Call_GetListInstanceProfiles_609185; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609200.validator(path, query, header, formData, body)
  let scheme = call_609200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609200.url(scheme.get, call_609200.host, call_609200.base,
                         call_609200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609200, url, valid)

proc call*(call_609201: Call_GetListInstanceProfiles_609185; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListInstanceProfiles"; Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609202 = newJObject()
  add(query_609202, "Marker", newJString(Marker))
  add(query_609202, "MaxItems", newJInt(MaxItems))
  add(query_609202, "PathPrefix", newJString(PathPrefix))
  add(query_609202, "Action", newJString(Action))
  add(query_609202, "Version", newJString(Version))
  result = call_609201.call(nil, query_609202, nil, nil, nil)

var getListInstanceProfiles* = Call_GetListInstanceProfiles_609185(
    name: "getListInstanceProfiles", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_GetListInstanceProfiles_609186, base: "/",
    url: url_GetListInstanceProfiles_609187, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfilesForRole_609240 = ref object of OpenApiRestCall_605589
proc url_PostListInstanceProfilesForRole_609242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListInstanceProfilesForRole_609241(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609243 = query.getOrDefault("Action")
  valid_609243 = validateParameter(valid_609243, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_609243 != nil:
    section.add "Action", valid_609243
  var valid_609244 = query.getOrDefault("Version")
  valid_609244 = validateParameter(valid_609244, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609244 != nil:
    section.add "Version", valid_609244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609245 = header.getOrDefault("X-Amz-Signature")
  valid_609245 = validateParameter(valid_609245, JString, required = false,
                                 default = nil)
  if valid_609245 != nil:
    section.add "X-Amz-Signature", valid_609245
  var valid_609246 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609246 = validateParameter(valid_609246, JString, required = false,
                                 default = nil)
  if valid_609246 != nil:
    section.add "X-Amz-Content-Sha256", valid_609246
  var valid_609247 = header.getOrDefault("X-Amz-Date")
  valid_609247 = validateParameter(valid_609247, JString, required = false,
                                 default = nil)
  if valid_609247 != nil:
    section.add "X-Amz-Date", valid_609247
  var valid_609248 = header.getOrDefault("X-Amz-Credential")
  valid_609248 = validateParameter(valid_609248, JString, required = false,
                                 default = nil)
  if valid_609248 != nil:
    section.add "X-Amz-Credential", valid_609248
  var valid_609249 = header.getOrDefault("X-Amz-Security-Token")
  valid_609249 = validateParameter(valid_609249, JString, required = false,
                                 default = nil)
  if valid_609249 != nil:
    section.add "X-Amz-Security-Token", valid_609249
  var valid_609250 = header.getOrDefault("X-Amz-Algorithm")
  valid_609250 = validateParameter(valid_609250, JString, required = false,
                                 default = nil)
  if valid_609250 != nil:
    section.add "X-Amz-Algorithm", valid_609250
  var valid_609251 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609251 = validateParameter(valid_609251, JString, required = false,
                                 default = nil)
  if valid_609251 != nil:
    section.add "X-Amz-SignedHeaders", valid_609251
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_609252 = formData.getOrDefault("RoleName")
  valid_609252 = validateParameter(valid_609252, JString, required = true,
                                 default = nil)
  if valid_609252 != nil:
    section.add "RoleName", valid_609252
  var valid_609253 = formData.getOrDefault("Marker")
  valid_609253 = validateParameter(valid_609253, JString, required = false,
                                 default = nil)
  if valid_609253 != nil:
    section.add "Marker", valid_609253
  var valid_609254 = formData.getOrDefault("MaxItems")
  valid_609254 = validateParameter(valid_609254, JInt, required = false, default = nil)
  if valid_609254 != nil:
    section.add "MaxItems", valid_609254
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609255: Call_PostListInstanceProfilesForRole_609240;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609255.validator(path, query, header, formData, body)
  let scheme = call_609255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609255.url(scheme.get, call_609255.host, call_609255.base,
                         call_609255.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609255, url, valid)

proc call*(call_609256: Call_PostListInstanceProfilesForRole_609240;
          RoleName: string; Marker: string = "";
          Action: string = "ListInstanceProfilesForRole"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_609257 = newJObject()
  var formData_609258 = newJObject()
  add(formData_609258, "RoleName", newJString(RoleName))
  add(formData_609258, "Marker", newJString(Marker))
  add(query_609257, "Action", newJString(Action))
  add(formData_609258, "MaxItems", newJInt(MaxItems))
  add(query_609257, "Version", newJString(Version))
  result = call_609256.call(nil, query_609257, nil, formData_609258, nil)

var postListInstanceProfilesForRole* = Call_PostListInstanceProfilesForRole_609240(
    name: "postListInstanceProfilesForRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_PostListInstanceProfilesForRole_609241, base: "/",
    url: url_PostListInstanceProfilesForRole_609242,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfilesForRole_609222 = ref object of OpenApiRestCall_605589
proc url_GetListInstanceProfilesForRole_609224(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListInstanceProfilesForRole_609223(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609225 = query.getOrDefault("Marker")
  valid_609225 = validateParameter(valid_609225, JString, required = false,
                                 default = nil)
  if valid_609225 != nil:
    section.add "Marker", valid_609225
  var valid_609226 = query.getOrDefault("MaxItems")
  valid_609226 = validateParameter(valid_609226, JInt, required = false, default = nil)
  if valid_609226 != nil:
    section.add "MaxItems", valid_609226
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_609227 = query.getOrDefault("RoleName")
  valid_609227 = validateParameter(valid_609227, JString, required = true,
                                 default = nil)
  if valid_609227 != nil:
    section.add "RoleName", valid_609227
  var valid_609228 = query.getOrDefault("Action")
  valid_609228 = validateParameter(valid_609228, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_609228 != nil:
    section.add "Action", valid_609228
  var valid_609229 = query.getOrDefault("Version")
  valid_609229 = validateParameter(valid_609229, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609229 != nil:
    section.add "Version", valid_609229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609230 = header.getOrDefault("X-Amz-Signature")
  valid_609230 = validateParameter(valid_609230, JString, required = false,
                                 default = nil)
  if valid_609230 != nil:
    section.add "X-Amz-Signature", valid_609230
  var valid_609231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609231 = validateParameter(valid_609231, JString, required = false,
                                 default = nil)
  if valid_609231 != nil:
    section.add "X-Amz-Content-Sha256", valid_609231
  var valid_609232 = header.getOrDefault("X-Amz-Date")
  valid_609232 = validateParameter(valid_609232, JString, required = false,
                                 default = nil)
  if valid_609232 != nil:
    section.add "X-Amz-Date", valid_609232
  var valid_609233 = header.getOrDefault("X-Amz-Credential")
  valid_609233 = validateParameter(valid_609233, JString, required = false,
                                 default = nil)
  if valid_609233 != nil:
    section.add "X-Amz-Credential", valid_609233
  var valid_609234 = header.getOrDefault("X-Amz-Security-Token")
  valid_609234 = validateParameter(valid_609234, JString, required = false,
                                 default = nil)
  if valid_609234 != nil:
    section.add "X-Amz-Security-Token", valid_609234
  var valid_609235 = header.getOrDefault("X-Amz-Algorithm")
  valid_609235 = validateParameter(valid_609235, JString, required = false,
                                 default = nil)
  if valid_609235 != nil:
    section.add "X-Amz-Algorithm", valid_609235
  var valid_609236 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609236 = validateParameter(valid_609236, JString, required = false,
                                 default = nil)
  if valid_609236 != nil:
    section.add "X-Amz-SignedHeaders", valid_609236
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609237: Call_GetListInstanceProfilesForRole_609222; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609237.validator(path, query, header, formData, body)
  let scheme = call_609237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609237.url(scheme.get, call_609237.host, call_609237.base,
                         call_609237.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609237, url, valid)

proc call*(call_609238: Call_GetListInstanceProfilesForRole_609222;
          RoleName: string; Marker: string = ""; MaxItems: int = 0;
          Action: string = "ListInstanceProfilesForRole";
          Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609239 = newJObject()
  add(query_609239, "Marker", newJString(Marker))
  add(query_609239, "MaxItems", newJInt(MaxItems))
  add(query_609239, "RoleName", newJString(RoleName))
  add(query_609239, "Action", newJString(Action))
  add(query_609239, "Version", newJString(Version))
  result = call_609238.call(nil, query_609239, nil, nil, nil)

var getListInstanceProfilesForRole* = Call_GetListInstanceProfilesForRole_609222(
    name: "getListInstanceProfilesForRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_GetListInstanceProfilesForRole_609223, base: "/",
    url: url_GetListInstanceProfilesForRole_609224,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListMFADevices_609277 = ref object of OpenApiRestCall_605589
proc url_PostListMFADevices_609279(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListMFADevices_609278(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609280 = query.getOrDefault("Action")
  valid_609280 = validateParameter(valid_609280, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_609280 != nil:
    section.add "Action", valid_609280
  var valid_609281 = query.getOrDefault("Version")
  valid_609281 = validateParameter(valid_609281, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609281 != nil:
    section.add "Version", valid_609281
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609282 = header.getOrDefault("X-Amz-Signature")
  valid_609282 = validateParameter(valid_609282, JString, required = false,
                                 default = nil)
  if valid_609282 != nil:
    section.add "X-Amz-Signature", valid_609282
  var valid_609283 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609283 = validateParameter(valid_609283, JString, required = false,
                                 default = nil)
  if valid_609283 != nil:
    section.add "X-Amz-Content-Sha256", valid_609283
  var valid_609284 = header.getOrDefault("X-Amz-Date")
  valid_609284 = validateParameter(valid_609284, JString, required = false,
                                 default = nil)
  if valid_609284 != nil:
    section.add "X-Amz-Date", valid_609284
  var valid_609285 = header.getOrDefault("X-Amz-Credential")
  valid_609285 = validateParameter(valid_609285, JString, required = false,
                                 default = nil)
  if valid_609285 != nil:
    section.add "X-Amz-Credential", valid_609285
  var valid_609286 = header.getOrDefault("X-Amz-Security-Token")
  valid_609286 = validateParameter(valid_609286, JString, required = false,
                                 default = nil)
  if valid_609286 != nil:
    section.add "X-Amz-Security-Token", valid_609286
  var valid_609287 = header.getOrDefault("X-Amz-Algorithm")
  valid_609287 = validateParameter(valid_609287, JString, required = false,
                                 default = nil)
  if valid_609287 != nil:
    section.add "X-Amz-Algorithm", valid_609287
  var valid_609288 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609288 = validateParameter(valid_609288, JString, required = false,
                                 default = nil)
  if valid_609288 != nil:
    section.add "X-Amz-SignedHeaders", valid_609288
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609289 = formData.getOrDefault("Marker")
  valid_609289 = validateParameter(valid_609289, JString, required = false,
                                 default = nil)
  if valid_609289 != nil:
    section.add "Marker", valid_609289
  var valid_609290 = formData.getOrDefault("UserName")
  valid_609290 = validateParameter(valid_609290, JString, required = false,
                                 default = nil)
  if valid_609290 != nil:
    section.add "UserName", valid_609290
  var valid_609291 = formData.getOrDefault("MaxItems")
  valid_609291 = validateParameter(valid_609291, JInt, required = false, default = nil)
  if valid_609291 != nil:
    section.add "MaxItems", valid_609291
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609292: Call_PostListMFADevices_609277; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609292.validator(path, query, header, formData, body)
  let scheme = call_609292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609292.url(scheme.get, call_609292.host, call_609292.base,
                         call_609292.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609292, url, valid)

proc call*(call_609293: Call_PostListMFADevices_609277; Marker: string = "";
          UserName: string = ""; Action: string = "ListMFADevices"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_609294 = newJObject()
  var formData_609295 = newJObject()
  add(formData_609295, "Marker", newJString(Marker))
  add(formData_609295, "UserName", newJString(UserName))
  add(query_609294, "Action", newJString(Action))
  add(formData_609295, "MaxItems", newJInt(MaxItems))
  add(query_609294, "Version", newJString(Version))
  result = call_609293.call(nil, query_609294, nil, formData_609295, nil)

var postListMFADevices* = Call_PostListMFADevices_609277(
    name: "postListMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListMFADevices",
    validator: validate_PostListMFADevices_609278, base: "/",
    url: url_PostListMFADevices_609279, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListMFADevices_609259 = ref object of OpenApiRestCall_605589
proc url_GetListMFADevices_609261(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListMFADevices_609260(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609262 = query.getOrDefault("Marker")
  valid_609262 = validateParameter(valid_609262, JString, required = false,
                                 default = nil)
  if valid_609262 != nil:
    section.add "Marker", valid_609262
  var valid_609263 = query.getOrDefault("UserName")
  valid_609263 = validateParameter(valid_609263, JString, required = false,
                                 default = nil)
  if valid_609263 != nil:
    section.add "UserName", valid_609263
  var valid_609264 = query.getOrDefault("MaxItems")
  valid_609264 = validateParameter(valid_609264, JInt, required = false, default = nil)
  if valid_609264 != nil:
    section.add "MaxItems", valid_609264
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609265 = query.getOrDefault("Action")
  valid_609265 = validateParameter(valid_609265, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_609265 != nil:
    section.add "Action", valid_609265
  var valid_609266 = query.getOrDefault("Version")
  valid_609266 = validateParameter(valid_609266, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609266 != nil:
    section.add "Version", valid_609266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609267 = header.getOrDefault("X-Amz-Signature")
  valid_609267 = validateParameter(valid_609267, JString, required = false,
                                 default = nil)
  if valid_609267 != nil:
    section.add "X-Amz-Signature", valid_609267
  var valid_609268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609268 = validateParameter(valid_609268, JString, required = false,
                                 default = nil)
  if valid_609268 != nil:
    section.add "X-Amz-Content-Sha256", valid_609268
  var valid_609269 = header.getOrDefault("X-Amz-Date")
  valid_609269 = validateParameter(valid_609269, JString, required = false,
                                 default = nil)
  if valid_609269 != nil:
    section.add "X-Amz-Date", valid_609269
  var valid_609270 = header.getOrDefault("X-Amz-Credential")
  valid_609270 = validateParameter(valid_609270, JString, required = false,
                                 default = nil)
  if valid_609270 != nil:
    section.add "X-Amz-Credential", valid_609270
  var valid_609271 = header.getOrDefault("X-Amz-Security-Token")
  valid_609271 = validateParameter(valid_609271, JString, required = false,
                                 default = nil)
  if valid_609271 != nil:
    section.add "X-Amz-Security-Token", valid_609271
  var valid_609272 = header.getOrDefault("X-Amz-Algorithm")
  valid_609272 = validateParameter(valid_609272, JString, required = false,
                                 default = nil)
  if valid_609272 != nil:
    section.add "X-Amz-Algorithm", valid_609272
  var valid_609273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609273 = validateParameter(valid_609273, JString, required = false,
                                 default = nil)
  if valid_609273 != nil:
    section.add "X-Amz-SignedHeaders", valid_609273
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609274: Call_GetListMFADevices_609259; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609274.validator(path, query, header, formData, body)
  let scheme = call_609274.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609274.url(scheme.get, call_609274.host, call_609274.base,
                         call_609274.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609274, url, valid)

proc call*(call_609275: Call_GetListMFADevices_609259; Marker: string = "";
          UserName: string = ""; MaxItems: int = 0; Action: string = "ListMFADevices";
          Version: string = "2010-05-08"): Recallable =
  ## getListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609276 = newJObject()
  add(query_609276, "Marker", newJString(Marker))
  add(query_609276, "UserName", newJString(UserName))
  add(query_609276, "MaxItems", newJInt(MaxItems))
  add(query_609276, "Action", newJString(Action))
  add(query_609276, "Version", newJString(Version))
  result = call_609275.call(nil, query_609276, nil, nil, nil)

var getListMFADevices* = Call_GetListMFADevices_609259(name: "getListMFADevices",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListMFADevices", validator: validate_GetListMFADevices_609260,
    base: "/", url: url_GetListMFADevices_609261,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListOpenIDConnectProviders_609311 = ref object of OpenApiRestCall_605589
proc url_PostListOpenIDConnectProviders_609313(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListOpenIDConnectProviders_609312(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609314 = query.getOrDefault("Action")
  valid_609314 = validateParameter(valid_609314, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_609314 != nil:
    section.add "Action", valid_609314
  var valid_609315 = query.getOrDefault("Version")
  valid_609315 = validateParameter(valid_609315, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609315 != nil:
    section.add "Version", valid_609315
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609316 = header.getOrDefault("X-Amz-Signature")
  valid_609316 = validateParameter(valid_609316, JString, required = false,
                                 default = nil)
  if valid_609316 != nil:
    section.add "X-Amz-Signature", valid_609316
  var valid_609317 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609317 = validateParameter(valid_609317, JString, required = false,
                                 default = nil)
  if valid_609317 != nil:
    section.add "X-Amz-Content-Sha256", valid_609317
  var valid_609318 = header.getOrDefault("X-Amz-Date")
  valid_609318 = validateParameter(valid_609318, JString, required = false,
                                 default = nil)
  if valid_609318 != nil:
    section.add "X-Amz-Date", valid_609318
  var valid_609319 = header.getOrDefault("X-Amz-Credential")
  valid_609319 = validateParameter(valid_609319, JString, required = false,
                                 default = nil)
  if valid_609319 != nil:
    section.add "X-Amz-Credential", valid_609319
  var valid_609320 = header.getOrDefault("X-Amz-Security-Token")
  valid_609320 = validateParameter(valid_609320, JString, required = false,
                                 default = nil)
  if valid_609320 != nil:
    section.add "X-Amz-Security-Token", valid_609320
  var valid_609321 = header.getOrDefault("X-Amz-Algorithm")
  valid_609321 = validateParameter(valid_609321, JString, required = false,
                                 default = nil)
  if valid_609321 != nil:
    section.add "X-Amz-Algorithm", valid_609321
  var valid_609322 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609322 = validateParameter(valid_609322, JString, required = false,
                                 default = nil)
  if valid_609322 != nil:
    section.add "X-Amz-SignedHeaders", valid_609322
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609323: Call_PostListOpenIDConnectProviders_609311; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_609323.validator(path, query, header, formData, body)
  let scheme = call_609323.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609323.url(scheme.get, call_609323.host, call_609323.base,
                         call_609323.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609323, url, valid)

proc call*(call_609324: Call_PostListOpenIDConnectProviders_609311;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## postListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609325 = newJObject()
  add(query_609325, "Action", newJString(Action))
  add(query_609325, "Version", newJString(Version))
  result = call_609324.call(nil, query_609325, nil, nil, nil)

var postListOpenIDConnectProviders* = Call_PostListOpenIDConnectProviders_609311(
    name: "postListOpenIDConnectProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_PostListOpenIDConnectProviders_609312, base: "/",
    url: url_PostListOpenIDConnectProviders_609313,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListOpenIDConnectProviders_609296 = ref object of OpenApiRestCall_605589
proc url_GetListOpenIDConnectProviders_609298(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListOpenIDConnectProviders_609297(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609299 = query.getOrDefault("Action")
  valid_609299 = validateParameter(valid_609299, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_609299 != nil:
    section.add "Action", valid_609299
  var valid_609300 = query.getOrDefault("Version")
  valid_609300 = validateParameter(valid_609300, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609300 != nil:
    section.add "Version", valid_609300
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609301 = header.getOrDefault("X-Amz-Signature")
  valid_609301 = validateParameter(valid_609301, JString, required = false,
                                 default = nil)
  if valid_609301 != nil:
    section.add "X-Amz-Signature", valid_609301
  var valid_609302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609302 = validateParameter(valid_609302, JString, required = false,
                                 default = nil)
  if valid_609302 != nil:
    section.add "X-Amz-Content-Sha256", valid_609302
  var valid_609303 = header.getOrDefault("X-Amz-Date")
  valid_609303 = validateParameter(valid_609303, JString, required = false,
                                 default = nil)
  if valid_609303 != nil:
    section.add "X-Amz-Date", valid_609303
  var valid_609304 = header.getOrDefault("X-Amz-Credential")
  valid_609304 = validateParameter(valid_609304, JString, required = false,
                                 default = nil)
  if valid_609304 != nil:
    section.add "X-Amz-Credential", valid_609304
  var valid_609305 = header.getOrDefault("X-Amz-Security-Token")
  valid_609305 = validateParameter(valid_609305, JString, required = false,
                                 default = nil)
  if valid_609305 != nil:
    section.add "X-Amz-Security-Token", valid_609305
  var valid_609306 = header.getOrDefault("X-Amz-Algorithm")
  valid_609306 = validateParameter(valid_609306, JString, required = false,
                                 default = nil)
  if valid_609306 != nil:
    section.add "X-Amz-Algorithm", valid_609306
  var valid_609307 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609307 = validateParameter(valid_609307, JString, required = false,
                                 default = nil)
  if valid_609307 != nil:
    section.add "X-Amz-SignedHeaders", valid_609307
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609308: Call_GetListOpenIDConnectProviders_609296; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_609308.validator(path, query, header, formData, body)
  let scheme = call_609308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609308.url(scheme.get, call_609308.host, call_609308.base,
                         call_609308.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609308, url, valid)

proc call*(call_609309: Call_GetListOpenIDConnectProviders_609296;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## getListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609310 = newJObject()
  add(query_609310, "Action", newJString(Action))
  add(query_609310, "Version", newJString(Version))
  result = call_609309.call(nil, query_609310, nil, nil, nil)

var getListOpenIDConnectProviders* = Call_GetListOpenIDConnectProviders_609296(
    name: "getListOpenIDConnectProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_GetListOpenIDConnectProviders_609297, base: "/",
    url: url_GetListOpenIDConnectProviders_609298,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicies_609347 = ref object of OpenApiRestCall_605589
proc url_PostListPolicies_609349(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPolicies_609348(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609350 = query.getOrDefault("Action")
  valid_609350 = validateParameter(valid_609350, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_609350 != nil:
    section.add "Action", valid_609350
  var valid_609351 = query.getOrDefault("Version")
  valid_609351 = validateParameter(valid_609351, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609351 != nil:
    section.add "Version", valid_609351
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609352 = header.getOrDefault("X-Amz-Signature")
  valid_609352 = validateParameter(valid_609352, JString, required = false,
                                 default = nil)
  if valid_609352 != nil:
    section.add "X-Amz-Signature", valid_609352
  var valid_609353 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609353 = validateParameter(valid_609353, JString, required = false,
                                 default = nil)
  if valid_609353 != nil:
    section.add "X-Amz-Content-Sha256", valid_609353
  var valid_609354 = header.getOrDefault("X-Amz-Date")
  valid_609354 = validateParameter(valid_609354, JString, required = false,
                                 default = nil)
  if valid_609354 != nil:
    section.add "X-Amz-Date", valid_609354
  var valid_609355 = header.getOrDefault("X-Amz-Credential")
  valid_609355 = validateParameter(valid_609355, JString, required = false,
                                 default = nil)
  if valid_609355 != nil:
    section.add "X-Amz-Credential", valid_609355
  var valid_609356 = header.getOrDefault("X-Amz-Security-Token")
  valid_609356 = validateParameter(valid_609356, JString, required = false,
                                 default = nil)
  if valid_609356 != nil:
    section.add "X-Amz-Security-Token", valid_609356
  var valid_609357 = header.getOrDefault("X-Amz-Algorithm")
  valid_609357 = validateParameter(valid_609357, JString, required = false,
                                 default = nil)
  if valid_609357 != nil:
    section.add "X-Amz-Algorithm", valid_609357
  var valid_609358 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609358 = validateParameter(valid_609358, JString, required = false,
                                 default = nil)
  if valid_609358 != nil:
    section.add "X-Amz-SignedHeaders", valid_609358
  result.add "header", section
  ## parameters in `formData` object:
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_609359 = formData.getOrDefault("Scope")
  valid_609359 = validateParameter(valid_609359, JString, required = false,
                                 default = newJString("All"))
  if valid_609359 != nil:
    section.add "Scope", valid_609359
  var valid_609360 = formData.getOrDefault("Marker")
  valid_609360 = validateParameter(valid_609360, JString, required = false,
                                 default = nil)
  if valid_609360 != nil:
    section.add "Marker", valid_609360
  var valid_609361 = formData.getOrDefault("PathPrefix")
  valid_609361 = validateParameter(valid_609361, JString, required = false,
                                 default = nil)
  if valid_609361 != nil:
    section.add "PathPrefix", valid_609361
  var valid_609362 = formData.getOrDefault("MaxItems")
  valid_609362 = validateParameter(valid_609362, JInt, required = false, default = nil)
  if valid_609362 != nil:
    section.add "MaxItems", valid_609362
  var valid_609363 = formData.getOrDefault("OnlyAttached")
  valid_609363 = validateParameter(valid_609363, JBool, required = false, default = nil)
  if valid_609363 != nil:
    section.add "OnlyAttached", valid_609363
  var valid_609364 = formData.getOrDefault("PolicyUsageFilter")
  valid_609364 = validateParameter(valid_609364, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_609364 != nil:
    section.add "PolicyUsageFilter", valid_609364
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609365: Call_PostListPolicies_609347; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_609365.validator(path, query, header, formData, body)
  let scheme = call_609365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609365.url(scheme.get, call_609365.host, call_609365.base,
                         call_609365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609365, url, valid)

proc call*(call_609366: Call_PostListPolicies_609347; Scope: string = "All";
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListPolicies"; OnlyAttached: bool = false;
          Version: string = "2010-05-08";
          PolicyUsageFilter: string = "PermissionsPolicy"): Recallable =
  ## postListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   Version: string (required)
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  var query_609367 = newJObject()
  var formData_609368 = newJObject()
  add(formData_609368, "Scope", newJString(Scope))
  add(formData_609368, "Marker", newJString(Marker))
  add(formData_609368, "PathPrefix", newJString(PathPrefix))
  add(formData_609368, "MaxItems", newJInt(MaxItems))
  add(query_609367, "Action", newJString(Action))
  add(formData_609368, "OnlyAttached", newJBool(OnlyAttached))
  add(query_609367, "Version", newJString(Version))
  add(formData_609368, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  result = call_609366.call(nil, query_609367, nil, formData_609368, nil)

var postListPolicies* = Call_PostListPolicies_609347(name: "postListPolicies",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_PostListPolicies_609348,
    base: "/", url: url_PostListPolicies_609349,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicies_609326 = ref object of OpenApiRestCall_605589
proc url_GetListPolicies_609328(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPolicies_609327(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609329 = query.getOrDefault("Marker")
  valid_609329 = validateParameter(valid_609329, JString, required = false,
                                 default = nil)
  if valid_609329 != nil:
    section.add "Marker", valid_609329
  var valid_609330 = query.getOrDefault("PolicyUsageFilter")
  valid_609330 = validateParameter(valid_609330, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_609330 != nil:
    section.add "PolicyUsageFilter", valid_609330
  var valid_609331 = query.getOrDefault("OnlyAttached")
  valid_609331 = validateParameter(valid_609331, JBool, required = false, default = nil)
  if valid_609331 != nil:
    section.add "OnlyAttached", valid_609331
  var valid_609332 = query.getOrDefault("MaxItems")
  valid_609332 = validateParameter(valid_609332, JInt, required = false, default = nil)
  if valid_609332 != nil:
    section.add "MaxItems", valid_609332
  var valid_609333 = query.getOrDefault("Scope")
  valid_609333 = validateParameter(valid_609333, JString, required = false,
                                 default = newJString("All"))
  if valid_609333 != nil:
    section.add "Scope", valid_609333
  var valid_609334 = query.getOrDefault("PathPrefix")
  valid_609334 = validateParameter(valid_609334, JString, required = false,
                                 default = nil)
  if valid_609334 != nil:
    section.add "PathPrefix", valid_609334
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609335 = query.getOrDefault("Action")
  valid_609335 = validateParameter(valid_609335, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_609335 != nil:
    section.add "Action", valid_609335
  var valid_609336 = query.getOrDefault("Version")
  valid_609336 = validateParameter(valid_609336, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609336 != nil:
    section.add "Version", valid_609336
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609337 = header.getOrDefault("X-Amz-Signature")
  valid_609337 = validateParameter(valid_609337, JString, required = false,
                                 default = nil)
  if valid_609337 != nil:
    section.add "X-Amz-Signature", valid_609337
  var valid_609338 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609338 = validateParameter(valid_609338, JString, required = false,
                                 default = nil)
  if valid_609338 != nil:
    section.add "X-Amz-Content-Sha256", valid_609338
  var valid_609339 = header.getOrDefault("X-Amz-Date")
  valid_609339 = validateParameter(valid_609339, JString, required = false,
                                 default = nil)
  if valid_609339 != nil:
    section.add "X-Amz-Date", valid_609339
  var valid_609340 = header.getOrDefault("X-Amz-Credential")
  valid_609340 = validateParameter(valid_609340, JString, required = false,
                                 default = nil)
  if valid_609340 != nil:
    section.add "X-Amz-Credential", valid_609340
  var valid_609341 = header.getOrDefault("X-Amz-Security-Token")
  valid_609341 = validateParameter(valid_609341, JString, required = false,
                                 default = nil)
  if valid_609341 != nil:
    section.add "X-Amz-Security-Token", valid_609341
  var valid_609342 = header.getOrDefault("X-Amz-Algorithm")
  valid_609342 = validateParameter(valid_609342, JString, required = false,
                                 default = nil)
  if valid_609342 != nil:
    section.add "X-Amz-Algorithm", valid_609342
  var valid_609343 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609343 = validateParameter(valid_609343, JString, required = false,
                                 default = nil)
  if valid_609343 != nil:
    section.add "X-Amz-SignedHeaders", valid_609343
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609344: Call_GetListPolicies_609326; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_609344.validator(path, query, header, formData, body)
  let scheme = call_609344.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609344.url(scheme.get, call_609344.host, call_609344.base,
                         call_609344.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609344, url, valid)

proc call*(call_609345: Call_GetListPolicies_609326; Marker: string = "";
          PolicyUsageFilter: string = "PermissionsPolicy";
          OnlyAttached: bool = false; MaxItems: int = 0; Scope: string = "All";
          PathPrefix: string = ""; Action: string = "ListPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609346 = newJObject()
  add(query_609346, "Marker", newJString(Marker))
  add(query_609346, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_609346, "OnlyAttached", newJBool(OnlyAttached))
  add(query_609346, "MaxItems", newJInt(MaxItems))
  add(query_609346, "Scope", newJString(Scope))
  add(query_609346, "PathPrefix", newJString(PathPrefix))
  add(query_609346, "Action", newJString(Action))
  add(query_609346, "Version", newJString(Version))
  result = call_609345.call(nil, query_609346, nil, nil, nil)

var getListPolicies* = Call_GetListPolicies_609326(name: "getListPolicies",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_GetListPolicies_609327,
    base: "/", url: url_GetListPolicies_609328, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPoliciesGrantingServiceAccess_609387 = ref object of OpenApiRestCall_605589
proc url_PostListPoliciesGrantingServiceAccess_609389(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPoliciesGrantingServiceAccess_609388(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609390 = query.getOrDefault("Action")
  valid_609390 = validateParameter(valid_609390, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_609390 != nil:
    section.add "Action", valid_609390
  var valid_609391 = query.getOrDefault("Version")
  valid_609391 = validateParameter(valid_609391, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609391 != nil:
    section.add "Version", valid_609391
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609392 = header.getOrDefault("X-Amz-Signature")
  valid_609392 = validateParameter(valid_609392, JString, required = false,
                                 default = nil)
  if valid_609392 != nil:
    section.add "X-Amz-Signature", valid_609392
  var valid_609393 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609393 = validateParameter(valid_609393, JString, required = false,
                                 default = nil)
  if valid_609393 != nil:
    section.add "X-Amz-Content-Sha256", valid_609393
  var valid_609394 = header.getOrDefault("X-Amz-Date")
  valid_609394 = validateParameter(valid_609394, JString, required = false,
                                 default = nil)
  if valid_609394 != nil:
    section.add "X-Amz-Date", valid_609394
  var valid_609395 = header.getOrDefault("X-Amz-Credential")
  valid_609395 = validateParameter(valid_609395, JString, required = false,
                                 default = nil)
  if valid_609395 != nil:
    section.add "X-Amz-Credential", valid_609395
  var valid_609396 = header.getOrDefault("X-Amz-Security-Token")
  valid_609396 = validateParameter(valid_609396, JString, required = false,
                                 default = nil)
  if valid_609396 != nil:
    section.add "X-Amz-Security-Token", valid_609396
  var valid_609397 = header.getOrDefault("X-Amz-Algorithm")
  valid_609397 = validateParameter(valid_609397, JString, required = false,
                                 default = nil)
  if valid_609397 != nil:
    section.add "X-Amz-Algorithm", valid_609397
  var valid_609398 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609398 = validateParameter(valid_609398, JString, required = false,
                                 default = nil)
  if valid_609398 != nil:
    section.add "X-Amz-SignedHeaders", valid_609398
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceNamespaces` field"
  var valid_609399 = formData.getOrDefault("ServiceNamespaces")
  valid_609399 = validateParameter(valid_609399, JArray, required = true, default = nil)
  if valid_609399 != nil:
    section.add "ServiceNamespaces", valid_609399
  var valid_609400 = formData.getOrDefault("Arn")
  valid_609400 = validateParameter(valid_609400, JString, required = true,
                                 default = nil)
  if valid_609400 != nil:
    section.add "Arn", valid_609400
  var valid_609401 = formData.getOrDefault("Marker")
  valid_609401 = validateParameter(valid_609401, JString, required = false,
                                 default = nil)
  if valid_609401 != nil:
    section.add "Marker", valid_609401
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609402: Call_PostListPoliciesGrantingServiceAccess_609387;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_609402.validator(path, query, header, formData, body)
  let scheme = call_609402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609402.url(scheme.get, call_609402.host, call_609402.base,
                         call_609402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609402, url, valid)

proc call*(call_609403: Call_PostListPoliciesGrantingServiceAccess_609387;
          ServiceNamespaces: JsonNode; Arn: string; Marker: string = "";
          Action: string = "ListPoliciesGrantingServiceAccess";
          Version: string = "2010-05-08"): Recallable =
  ## postListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609404 = newJObject()
  var formData_609405 = newJObject()
  if ServiceNamespaces != nil:
    formData_609405.add "ServiceNamespaces", ServiceNamespaces
  add(formData_609405, "Arn", newJString(Arn))
  add(formData_609405, "Marker", newJString(Marker))
  add(query_609404, "Action", newJString(Action))
  add(query_609404, "Version", newJString(Version))
  result = call_609403.call(nil, query_609404, nil, formData_609405, nil)

var postListPoliciesGrantingServiceAccess* = Call_PostListPoliciesGrantingServiceAccess_609387(
    name: "postListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_PostListPoliciesGrantingServiceAccess_609388, base: "/",
    url: url_PostListPoliciesGrantingServiceAccess_609389,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPoliciesGrantingServiceAccess_609369 = ref object of OpenApiRestCall_605589
proc url_GetListPoliciesGrantingServiceAccess_609371(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPoliciesGrantingServiceAccess_609370(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  var valid_609372 = query.getOrDefault("Marker")
  valid_609372 = validateParameter(valid_609372, JString, required = false,
                                 default = nil)
  if valid_609372 != nil:
    section.add "Marker", valid_609372
  assert query != nil,
        "query argument is necessary due to required `ServiceNamespaces` field"
  var valid_609373 = query.getOrDefault("ServiceNamespaces")
  valid_609373 = validateParameter(valid_609373, JArray, required = true, default = nil)
  if valid_609373 != nil:
    section.add "ServiceNamespaces", valid_609373
  var valid_609374 = query.getOrDefault("Action")
  valid_609374 = validateParameter(valid_609374, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_609374 != nil:
    section.add "Action", valid_609374
  var valid_609375 = query.getOrDefault("Version")
  valid_609375 = validateParameter(valid_609375, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609375 != nil:
    section.add "Version", valid_609375
  var valid_609376 = query.getOrDefault("Arn")
  valid_609376 = validateParameter(valid_609376, JString, required = true,
                                 default = nil)
  if valid_609376 != nil:
    section.add "Arn", valid_609376
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609377 = header.getOrDefault("X-Amz-Signature")
  valid_609377 = validateParameter(valid_609377, JString, required = false,
                                 default = nil)
  if valid_609377 != nil:
    section.add "X-Amz-Signature", valid_609377
  var valid_609378 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609378 = validateParameter(valid_609378, JString, required = false,
                                 default = nil)
  if valid_609378 != nil:
    section.add "X-Amz-Content-Sha256", valid_609378
  var valid_609379 = header.getOrDefault("X-Amz-Date")
  valid_609379 = validateParameter(valid_609379, JString, required = false,
                                 default = nil)
  if valid_609379 != nil:
    section.add "X-Amz-Date", valid_609379
  var valid_609380 = header.getOrDefault("X-Amz-Credential")
  valid_609380 = validateParameter(valid_609380, JString, required = false,
                                 default = nil)
  if valid_609380 != nil:
    section.add "X-Amz-Credential", valid_609380
  var valid_609381 = header.getOrDefault("X-Amz-Security-Token")
  valid_609381 = validateParameter(valid_609381, JString, required = false,
                                 default = nil)
  if valid_609381 != nil:
    section.add "X-Amz-Security-Token", valid_609381
  var valid_609382 = header.getOrDefault("X-Amz-Algorithm")
  valid_609382 = validateParameter(valid_609382, JString, required = false,
                                 default = nil)
  if valid_609382 != nil:
    section.add "X-Amz-Algorithm", valid_609382
  var valid_609383 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609383 = validateParameter(valid_609383, JString, required = false,
                                 default = nil)
  if valid_609383 != nil:
    section.add "X-Amz-SignedHeaders", valid_609383
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609384: Call_GetListPoliciesGrantingServiceAccess_609369;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_609384.validator(path, query, header, formData, body)
  let scheme = call_609384.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609384.url(scheme.get, call_609384.host, call_609384.base,
                         call_609384.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609384, url, valid)

proc call*(call_609385: Call_GetListPoliciesGrantingServiceAccess_609369;
          ServiceNamespaces: JsonNode; Arn: string; Marker: string = "";
          Action: string = "ListPoliciesGrantingServiceAccess";
          Version: string = "2010-05-08"): Recallable =
  ## getListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_609386 = newJObject()
  add(query_609386, "Marker", newJString(Marker))
  if ServiceNamespaces != nil:
    query_609386.add "ServiceNamespaces", ServiceNamespaces
  add(query_609386, "Action", newJString(Action))
  add(query_609386, "Version", newJString(Version))
  add(query_609386, "Arn", newJString(Arn))
  result = call_609385.call(nil, query_609386, nil, nil, nil)

var getListPoliciesGrantingServiceAccess* = Call_GetListPoliciesGrantingServiceAccess_609369(
    name: "getListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_GetListPoliciesGrantingServiceAccess_609370, base: "/",
    url: url_GetListPoliciesGrantingServiceAccess_609371,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicyVersions_609424 = ref object of OpenApiRestCall_605589
proc url_PostListPolicyVersions_609426(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPolicyVersions_609425(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609427 = query.getOrDefault("Action")
  valid_609427 = validateParameter(valid_609427, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_609427 != nil:
    section.add "Action", valid_609427
  var valid_609428 = query.getOrDefault("Version")
  valid_609428 = validateParameter(valid_609428, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609428 != nil:
    section.add "Version", valid_609428
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609429 = header.getOrDefault("X-Amz-Signature")
  valid_609429 = validateParameter(valid_609429, JString, required = false,
                                 default = nil)
  if valid_609429 != nil:
    section.add "X-Amz-Signature", valid_609429
  var valid_609430 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609430 = validateParameter(valid_609430, JString, required = false,
                                 default = nil)
  if valid_609430 != nil:
    section.add "X-Amz-Content-Sha256", valid_609430
  var valid_609431 = header.getOrDefault("X-Amz-Date")
  valid_609431 = validateParameter(valid_609431, JString, required = false,
                                 default = nil)
  if valid_609431 != nil:
    section.add "X-Amz-Date", valid_609431
  var valid_609432 = header.getOrDefault("X-Amz-Credential")
  valid_609432 = validateParameter(valid_609432, JString, required = false,
                                 default = nil)
  if valid_609432 != nil:
    section.add "X-Amz-Credential", valid_609432
  var valid_609433 = header.getOrDefault("X-Amz-Security-Token")
  valid_609433 = validateParameter(valid_609433, JString, required = false,
                                 default = nil)
  if valid_609433 != nil:
    section.add "X-Amz-Security-Token", valid_609433
  var valid_609434 = header.getOrDefault("X-Amz-Algorithm")
  valid_609434 = validateParameter(valid_609434, JString, required = false,
                                 default = nil)
  if valid_609434 != nil:
    section.add "X-Amz-Algorithm", valid_609434
  var valid_609435 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609435 = validateParameter(valid_609435, JString, required = false,
                                 default = nil)
  if valid_609435 != nil:
    section.add "X-Amz-SignedHeaders", valid_609435
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609436 = formData.getOrDefault("Marker")
  valid_609436 = validateParameter(valid_609436, JString, required = false,
                                 default = nil)
  if valid_609436 != nil:
    section.add "Marker", valid_609436
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_609437 = formData.getOrDefault("PolicyArn")
  valid_609437 = validateParameter(valid_609437, JString, required = true,
                                 default = nil)
  if valid_609437 != nil:
    section.add "PolicyArn", valid_609437
  var valid_609438 = formData.getOrDefault("MaxItems")
  valid_609438 = validateParameter(valid_609438, JInt, required = false, default = nil)
  if valid_609438 != nil:
    section.add "MaxItems", valid_609438
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609439: Call_PostListPolicyVersions_609424; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_609439.validator(path, query, header, formData, body)
  let scheme = call_609439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609439.url(scheme.get, call_609439.host, call_609439.base,
                         call_609439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609439, url, valid)

proc call*(call_609440: Call_PostListPolicyVersions_609424; PolicyArn: string;
          Marker: string = ""; Action: string = "ListPolicyVersions"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_609441 = newJObject()
  var formData_609442 = newJObject()
  add(formData_609442, "Marker", newJString(Marker))
  add(formData_609442, "PolicyArn", newJString(PolicyArn))
  add(query_609441, "Action", newJString(Action))
  add(formData_609442, "MaxItems", newJInt(MaxItems))
  add(query_609441, "Version", newJString(Version))
  result = call_609440.call(nil, query_609441, nil, formData_609442, nil)

var postListPolicyVersions* = Call_PostListPolicyVersions_609424(
    name: "postListPolicyVersions", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_PostListPolicyVersions_609425, base: "/",
    url: url_PostListPolicyVersions_609426, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicyVersions_609406 = ref object of OpenApiRestCall_605589
proc url_GetListPolicyVersions_609408(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPolicyVersions_609407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609409 = query.getOrDefault("Marker")
  valid_609409 = validateParameter(valid_609409, JString, required = false,
                                 default = nil)
  if valid_609409 != nil:
    section.add "Marker", valid_609409
  var valid_609410 = query.getOrDefault("MaxItems")
  valid_609410 = validateParameter(valid_609410, JInt, required = false, default = nil)
  if valid_609410 != nil:
    section.add "MaxItems", valid_609410
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_609411 = query.getOrDefault("PolicyArn")
  valid_609411 = validateParameter(valid_609411, JString, required = true,
                                 default = nil)
  if valid_609411 != nil:
    section.add "PolicyArn", valid_609411
  var valid_609412 = query.getOrDefault("Action")
  valid_609412 = validateParameter(valid_609412, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_609412 != nil:
    section.add "Action", valid_609412
  var valid_609413 = query.getOrDefault("Version")
  valid_609413 = validateParameter(valid_609413, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609413 != nil:
    section.add "Version", valid_609413
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609414 = header.getOrDefault("X-Amz-Signature")
  valid_609414 = validateParameter(valid_609414, JString, required = false,
                                 default = nil)
  if valid_609414 != nil:
    section.add "X-Amz-Signature", valid_609414
  var valid_609415 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609415 = validateParameter(valid_609415, JString, required = false,
                                 default = nil)
  if valid_609415 != nil:
    section.add "X-Amz-Content-Sha256", valid_609415
  var valid_609416 = header.getOrDefault("X-Amz-Date")
  valid_609416 = validateParameter(valid_609416, JString, required = false,
                                 default = nil)
  if valid_609416 != nil:
    section.add "X-Amz-Date", valid_609416
  var valid_609417 = header.getOrDefault("X-Amz-Credential")
  valid_609417 = validateParameter(valid_609417, JString, required = false,
                                 default = nil)
  if valid_609417 != nil:
    section.add "X-Amz-Credential", valid_609417
  var valid_609418 = header.getOrDefault("X-Amz-Security-Token")
  valid_609418 = validateParameter(valid_609418, JString, required = false,
                                 default = nil)
  if valid_609418 != nil:
    section.add "X-Amz-Security-Token", valid_609418
  var valid_609419 = header.getOrDefault("X-Amz-Algorithm")
  valid_609419 = validateParameter(valid_609419, JString, required = false,
                                 default = nil)
  if valid_609419 != nil:
    section.add "X-Amz-Algorithm", valid_609419
  var valid_609420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609420 = validateParameter(valid_609420, JString, required = false,
                                 default = nil)
  if valid_609420 != nil:
    section.add "X-Amz-SignedHeaders", valid_609420
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609421: Call_GetListPolicyVersions_609406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_609421.validator(path, query, header, formData, body)
  let scheme = call_609421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609421.url(scheme.get, call_609421.host, call_609421.base,
                         call_609421.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609421, url, valid)

proc call*(call_609422: Call_GetListPolicyVersions_609406; PolicyArn: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListPolicyVersions";
          Version: string = "2010-05-08"): Recallable =
  ## getListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609423 = newJObject()
  add(query_609423, "Marker", newJString(Marker))
  add(query_609423, "MaxItems", newJInt(MaxItems))
  add(query_609423, "PolicyArn", newJString(PolicyArn))
  add(query_609423, "Action", newJString(Action))
  add(query_609423, "Version", newJString(Version))
  result = call_609422.call(nil, query_609423, nil, nil, nil)

var getListPolicyVersions* = Call_GetListPolicyVersions_609406(
    name: "getListPolicyVersions", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_GetListPolicyVersions_609407, base: "/",
    url: url_GetListPolicyVersions_609408, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRolePolicies_609461 = ref object of OpenApiRestCall_605589
proc url_PostListRolePolicies_609463(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRolePolicies_609462(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609464 = query.getOrDefault("Action")
  valid_609464 = validateParameter(valid_609464, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_609464 != nil:
    section.add "Action", valid_609464
  var valid_609465 = query.getOrDefault("Version")
  valid_609465 = validateParameter(valid_609465, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609465 != nil:
    section.add "Version", valid_609465
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609466 = header.getOrDefault("X-Amz-Signature")
  valid_609466 = validateParameter(valid_609466, JString, required = false,
                                 default = nil)
  if valid_609466 != nil:
    section.add "X-Amz-Signature", valid_609466
  var valid_609467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609467 = validateParameter(valid_609467, JString, required = false,
                                 default = nil)
  if valid_609467 != nil:
    section.add "X-Amz-Content-Sha256", valid_609467
  var valid_609468 = header.getOrDefault("X-Amz-Date")
  valid_609468 = validateParameter(valid_609468, JString, required = false,
                                 default = nil)
  if valid_609468 != nil:
    section.add "X-Amz-Date", valid_609468
  var valid_609469 = header.getOrDefault("X-Amz-Credential")
  valid_609469 = validateParameter(valid_609469, JString, required = false,
                                 default = nil)
  if valid_609469 != nil:
    section.add "X-Amz-Credential", valid_609469
  var valid_609470 = header.getOrDefault("X-Amz-Security-Token")
  valid_609470 = validateParameter(valid_609470, JString, required = false,
                                 default = nil)
  if valid_609470 != nil:
    section.add "X-Amz-Security-Token", valid_609470
  var valid_609471 = header.getOrDefault("X-Amz-Algorithm")
  valid_609471 = validateParameter(valid_609471, JString, required = false,
                                 default = nil)
  if valid_609471 != nil:
    section.add "X-Amz-Algorithm", valid_609471
  var valid_609472 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609472 = validateParameter(valid_609472, JString, required = false,
                                 default = nil)
  if valid_609472 != nil:
    section.add "X-Amz-SignedHeaders", valid_609472
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_609473 = formData.getOrDefault("RoleName")
  valid_609473 = validateParameter(valid_609473, JString, required = true,
                                 default = nil)
  if valid_609473 != nil:
    section.add "RoleName", valid_609473
  var valid_609474 = formData.getOrDefault("Marker")
  valid_609474 = validateParameter(valid_609474, JString, required = false,
                                 default = nil)
  if valid_609474 != nil:
    section.add "Marker", valid_609474
  var valid_609475 = formData.getOrDefault("MaxItems")
  valid_609475 = validateParameter(valid_609475, JInt, required = false, default = nil)
  if valid_609475 != nil:
    section.add "MaxItems", valid_609475
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609476: Call_PostListRolePolicies_609461; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_609476.validator(path, query, header, formData, body)
  let scheme = call_609476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609476.url(scheme.get, call_609476.host, call_609476.base,
                         call_609476.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609476, url, valid)

proc call*(call_609477: Call_PostListRolePolicies_609461; RoleName: string;
          Marker: string = ""; Action: string = "ListRolePolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_609478 = newJObject()
  var formData_609479 = newJObject()
  add(formData_609479, "RoleName", newJString(RoleName))
  add(formData_609479, "Marker", newJString(Marker))
  add(query_609478, "Action", newJString(Action))
  add(formData_609479, "MaxItems", newJInt(MaxItems))
  add(query_609478, "Version", newJString(Version))
  result = call_609477.call(nil, query_609478, nil, formData_609479, nil)

var postListRolePolicies* = Call_PostListRolePolicies_609461(
    name: "postListRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_PostListRolePolicies_609462, base: "/",
    url: url_PostListRolePolicies_609463, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRolePolicies_609443 = ref object of OpenApiRestCall_605589
proc url_GetListRolePolicies_609445(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRolePolicies_609444(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609446 = query.getOrDefault("Marker")
  valid_609446 = validateParameter(valid_609446, JString, required = false,
                                 default = nil)
  if valid_609446 != nil:
    section.add "Marker", valid_609446
  var valid_609447 = query.getOrDefault("MaxItems")
  valid_609447 = validateParameter(valid_609447, JInt, required = false, default = nil)
  if valid_609447 != nil:
    section.add "MaxItems", valid_609447
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_609448 = query.getOrDefault("RoleName")
  valid_609448 = validateParameter(valid_609448, JString, required = true,
                                 default = nil)
  if valid_609448 != nil:
    section.add "RoleName", valid_609448
  var valid_609449 = query.getOrDefault("Action")
  valid_609449 = validateParameter(valid_609449, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_609449 != nil:
    section.add "Action", valid_609449
  var valid_609450 = query.getOrDefault("Version")
  valid_609450 = validateParameter(valid_609450, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609450 != nil:
    section.add "Version", valid_609450
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609451 = header.getOrDefault("X-Amz-Signature")
  valid_609451 = validateParameter(valid_609451, JString, required = false,
                                 default = nil)
  if valid_609451 != nil:
    section.add "X-Amz-Signature", valid_609451
  var valid_609452 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609452 = validateParameter(valid_609452, JString, required = false,
                                 default = nil)
  if valid_609452 != nil:
    section.add "X-Amz-Content-Sha256", valid_609452
  var valid_609453 = header.getOrDefault("X-Amz-Date")
  valid_609453 = validateParameter(valid_609453, JString, required = false,
                                 default = nil)
  if valid_609453 != nil:
    section.add "X-Amz-Date", valid_609453
  var valid_609454 = header.getOrDefault("X-Amz-Credential")
  valid_609454 = validateParameter(valid_609454, JString, required = false,
                                 default = nil)
  if valid_609454 != nil:
    section.add "X-Amz-Credential", valid_609454
  var valid_609455 = header.getOrDefault("X-Amz-Security-Token")
  valid_609455 = validateParameter(valid_609455, JString, required = false,
                                 default = nil)
  if valid_609455 != nil:
    section.add "X-Amz-Security-Token", valid_609455
  var valid_609456 = header.getOrDefault("X-Amz-Algorithm")
  valid_609456 = validateParameter(valid_609456, JString, required = false,
                                 default = nil)
  if valid_609456 != nil:
    section.add "X-Amz-Algorithm", valid_609456
  var valid_609457 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609457 = validateParameter(valid_609457, JString, required = false,
                                 default = nil)
  if valid_609457 != nil:
    section.add "X-Amz-SignedHeaders", valid_609457
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609458: Call_GetListRolePolicies_609443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_609458.validator(path, query, header, formData, body)
  let scheme = call_609458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609458.url(scheme.get, call_609458.host, call_609458.base,
                         call_609458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609458, url, valid)

proc call*(call_609459: Call_GetListRolePolicies_609443; RoleName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListRolePolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609460 = newJObject()
  add(query_609460, "Marker", newJString(Marker))
  add(query_609460, "MaxItems", newJInt(MaxItems))
  add(query_609460, "RoleName", newJString(RoleName))
  add(query_609460, "Action", newJString(Action))
  add(query_609460, "Version", newJString(Version))
  result = call_609459.call(nil, query_609460, nil, nil, nil)

var getListRolePolicies* = Call_GetListRolePolicies_609443(
    name: "getListRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_GetListRolePolicies_609444, base: "/",
    url: url_GetListRolePolicies_609445, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoleTags_609498 = ref object of OpenApiRestCall_605589
proc url_PostListRoleTags_609500(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRoleTags_609499(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609501 = query.getOrDefault("Action")
  valid_609501 = validateParameter(valid_609501, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_609501 != nil:
    section.add "Action", valid_609501
  var valid_609502 = query.getOrDefault("Version")
  valid_609502 = validateParameter(valid_609502, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609502 != nil:
    section.add "Version", valid_609502
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609503 = header.getOrDefault("X-Amz-Signature")
  valid_609503 = validateParameter(valid_609503, JString, required = false,
                                 default = nil)
  if valid_609503 != nil:
    section.add "X-Amz-Signature", valid_609503
  var valid_609504 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609504 = validateParameter(valid_609504, JString, required = false,
                                 default = nil)
  if valid_609504 != nil:
    section.add "X-Amz-Content-Sha256", valid_609504
  var valid_609505 = header.getOrDefault("X-Amz-Date")
  valid_609505 = validateParameter(valid_609505, JString, required = false,
                                 default = nil)
  if valid_609505 != nil:
    section.add "X-Amz-Date", valid_609505
  var valid_609506 = header.getOrDefault("X-Amz-Credential")
  valid_609506 = validateParameter(valid_609506, JString, required = false,
                                 default = nil)
  if valid_609506 != nil:
    section.add "X-Amz-Credential", valid_609506
  var valid_609507 = header.getOrDefault("X-Amz-Security-Token")
  valid_609507 = validateParameter(valid_609507, JString, required = false,
                                 default = nil)
  if valid_609507 != nil:
    section.add "X-Amz-Security-Token", valid_609507
  var valid_609508 = header.getOrDefault("X-Amz-Algorithm")
  valid_609508 = validateParameter(valid_609508, JString, required = false,
                                 default = nil)
  if valid_609508 != nil:
    section.add "X-Amz-Algorithm", valid_609508
  var valid_609509 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609509 = validateParameter(valid_609509, JString, required = false,
                                 default = nil)
  if valid_609509 != nil:
    section.add "X-Amz-SignedHeaders", valid_609509
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_609510 = formData.getOrDefault("RoleName")
  valid_609510 = validateParameter(valid_609510, JString, required = true,
                                 default = nil)
  if valid_609510 != nil:
    section.add "RoleName", valid_609510
  var valid_609511 = formData.getOrDefault("Marker")
  valid_609511 = validateParameter(valid_609511, JString, required = false,
                                 default = nil)
  if valid_609511 != nil:
    section.add "Marker", valid_609511
  var valid_609512 = formData.getOrDefault("MaxItems")
  valid_609512 = validateParameter(valid_609512, JInt, required = false, default = nil)
  if valid_609512 != nil:
    section.add "MaxItems", valid_609512
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609513: Call_PostListRoleTags_609498; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_609513.validator(path, query, header, formData, body)
  let scheme = call_609513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609513.url(scheme.get, call_609513.host, call_609513.base,
                         call_609513.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609513, url, valid)

proc call*(call_609514: Call_PostListRoleTags_609498; RoleName: string;
          Marker: string = ""; Action: string = "ListRoleTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_609515 = newJObject()
  var formData_609516 = newJObject()
  add(formData_609516, "RoleName", newJString(RoleName))
  add(formData_609516, "Marker", newJString(Marker))
  add(query_609515, "Action", newJString(Action))
  add(formData_609516, "MaxItems", newJInt(MaxItems))
  add(query_609515, "Version", newJString(Version))
  result = call_609514.call(nil, query_609515, nil, formData_609516, nil)

var postListRoleTags* = Call_PostListRoleTags_609498(name: "postListRoleTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_PostListRoleTags_609499,
    base: "/", url: url_PostListRoleTags_609500,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoleTags_609480 = ref object of OpenApiRestCall_605589
proc url_GetListRoleTags_609482(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRoleTags_609481(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609483 = query.getOrDefault("Marker")
  valid_609483 = validateParameter(valid_609483, JString, required = false,
                                 default = nil)
  if valid_609483 != nil:
    section.add "Marker", valid_609483
  var valid_609484 = query.getOrDefault("MaxItems")
  valid_609484 = validateParameter(valid_609484, JInt, required = false, default = nil)
  if valid_609484 != nil:
    section.add "MaxItems", valid_609484
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_609485 = query.getOrDefault("RoleName")
  valid_609485 = validateParameter(valid_609485, JString, required = true,
                                 default = nil)
  if valid_609485 != nil:
    section.add "RoleName", valid_609485
  var valid_609486 = query.getOrDefault("Action")
  valid_609486 = validateParameter(valid_609486, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_609486 != nil:
    section.add "Action", valid_609486
  var valid_609487 = query.getOrDefault("Version")
  valid_609487 = validateParameter(valid_609487, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609487 != nil:
    section.add "Version", valid_609487
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609488 = header.getOrDefault("X-Amz-Signature")
  valid_609488 = validateParameter(valid_609488, JString, required = false,
                                 default = nil)
  if valid_609488 != nil:
    section.add "X-Amz-Signature", valid_609488
  var valid_609489 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609489 = validateParameter(valid_609489, JString, required = false,
                                 default = nil)
  if valid_609489 != nil:
    section.add "X-Amz-Content-Sha256", valid_609489
  var valid_609490 = header.getOrDefault("X-Amz-Date")
  valid_609490 = validateParameter(valid_609490, JString, required = false,
                                 default = nil)
  if valid_609490 != nil:
    section.add "X-Amz-Date", valid_609490
  var valid_609491 = header.getOrDefault("X-Amz-Credential")
  valid_609491 = validateParameter(valid_609491, JString, required = false,
                                 default = nil)
  if valid_609491 != nil:
    section.add "X-Amz-Credential", valid_609491
  var valid_609492 = header.getOrDefault("X-Amz-Security-Token")
  valid_609492 = validateParameter(valid_609492, JString, required = false,
                                 default = nil)
  if valid_609492 != nil:
    section.add "X-Amz-Security-Token", valid_609492
  var valid_609493 = header.getOrDefault("X-Amz-Algorithm")
  valid_609493 = validateParameter(valid_609493, JString, required = false,
                                 default = nil)
  if valid_609493 != nil:
    section.add "X-Amz-Algorithm", valid_609493
  var valid_609494 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609494 = validateParameter(valid_609494, JString, required = false,
                                 default = nil)
  if valid_609494 != nil:
    section.add "X-Amz-SignedHeaders", valid_609494
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609495: Call_GetListRoleTags_609480; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_609495.validator(path, query, header, formData, body)
  let scheme = call_609495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609495.url(scheme.get, call_609495.host, call_609495.base,
                         call_609495.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609495, url, valid)

proc call*(call_609496: Call_GetListRoleTags_609480; RoleName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListRoleTags";
          Version: string = "2010-05-08"): Recallable =
  ## getListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609497 = newJObject()
  add(query_609497, "Marker", newJString(Marker))
  add(query_609497, "MaxItems", newJInt(MaxItems))
  add(query_609497, "RoleName", newJString(RoleName))
  add(query_609497, "Action", newJString(Action))
  add(query_609497, "Version", newJString(Version))
  result = call_609496.call(nil, query_609497, nil, nil, nil)

var getListRoleTags* = Call_GetListRoleTags_609480(name: "getListRoleTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_GetListRoleTags_609481,
    base: "/", url: url_GetListRoleTags_609482, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoles_609535 = ref object of OpenApiRestCall_605589
proc url_PostListRoles_609537(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRoles_609536(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609538 = query.getOrDefault("Action")
  valid_609538 = validateParameter(valid_609538, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_609538 != nil:
    section.add "Action", valid_609538
  var valid_609539 = query.getOrDefault("Version")
  valid_609539 = validateParameter(valid_609539, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609539 != nil:
    section.add "Version", valid_609539
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609540 = header.getOrDefault("X-Amz-Signature")
  valid_609540 = validateParameter(valid_609540, JString, required = false,
                                 default = nil)
  if valid_609540 != nil:
    section.add "X-Amz-Signature", valid_609540
  var valid_609541 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609541 = validateParameter(valid_609541, JString, required = false,
                                 default = nil)
  if valid_609541 != nil:
    section.add "X-Amz-Content-Sha256", valid_609541
  var valid_609542 = header.getOrDefault("X-Amz-Date")
  valid_609542 = validateParameter(valid_609542, JString, required = false,
                                 default = nil)
  if valid_609542 != nil:
    section.add "X-Amz-Date", valid_609542
  var valid_609543 = header.getOrDefault("X-Amz-Credential")
  valid_609543 = validateParameter(valid_609543, JString, required = false,
                                 default = nil)
  if valid_609543 != nil:
    section.add "X-Amz-Credential", valid_609543
  var valid_609544 = header.getOrDefault("X-Amz-Security-Token")
  valid_609544 = validateParameter(valid_609544, JString, required = false,
                                 default = nil)
  if valid_609544 != nil:
    section.add "X-Amz-Security-Token", valid_609544
  var valid_609545 = header.getOrDefault("X-Amz-Algorithm")
  valid_609545 = validateParameter(valid_609545, JString, required = false,
                                 default = nil)
  if valid_609545 != nil:
    section.add "X-Amz-Algorithm", valid_609545
  var valid_609546 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609546 = validateParameter(valid_609546, JString, required = false,
                                 default = nil)
  if valid_609546 != nil:
    section.add "X-Amz-SignedHeaders", valid_609546
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609547 = formData.getOrDefault("Marker")
  valid_609547 = validateParameter(valid_609547, JString, required = false,
                                 default = nil)
  if valid_609547 != nil:
    section.add "Marker", valid_609547
  var valid_609548 = formData.getOrDefault("PathPrefix")
  valid_609548 = validateParameter(valid_609548, JString, required = false,
                                 default = nil)
  if valid_609548 != nil:
    section.add "PathPrefix", valid_609548
  var valid_609549 = formData.getOrDefault("MaxItems")
  valid_609549 = validateParameter(valid_609549, JInt, required = false, default = nil)
  if valid_609549 != nil:
    section.add "MaxItems", valid_609549
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609550: Call_PostListRoles_609535; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609550.validator(path, query, header, formData, body)
  let scheme = call_609550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609550.url(scheme.get, call_609550.host, call_609550.base,
                         call_609550.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609550, url, valid)

proc call*(call_609551: Call_PostListRoles_609535; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0; Action: string = "ListRoles";
          Version: string = "2010-05-08"): Recallable =
  ## postListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609552 = newJObject()
  var formData_609553 = newJObject()
  add(formData_609553, "Marker", newJString(Marker))
  add(formData_609553, "PathPrefix", newJString(PathPrefix))
  add(formData_609553, "MaxItems", newJInt(MaxItems))
  add(query_609552, "Action", newJString(Action))
  add(query_609552, "Version", newJString(Version))
  result = call_609551.call(nil, query_609552, nil, formData_609553, nil)

var postListRoles* = Call_PostListRoles_609535(name: "postListRoles",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_PostListRoles_609536,
    base: "/", url: url_PostListRoles_609537, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoles_609517 = ref object of OpenApiRestCall_605589
proc url_GetListRoles_609519(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRoles_609518(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609520 = query.getOrDefault("Marker")
  valid_609520 = validateParameter(valid_609520, JString, required = false,
                                 default = nil)
  if valid_609520 != nil:
    section.add "Marker", valid_609520
  var valid_609521 = query.getOrDefault("MaxItems")
  valid_609521 = validateParameter(valid_609521, JInt, required = false, default = nil)
  if valid_609521 != nil:
    section.add "MaxItems", valid_609521
  var valid_609522 = query.getOrDefault("PathPrefix")
  valid_609522 = validateParameter(valid_609522, JString, required = false,
                                 default = nil)
  if valid_609522 != nil:
    section.add "PathPrefix", valid_609522
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609523 = query.getOrDefault("Action")
  valid_609523 = validateParameter(valid_609523, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_609523 != nil:
    section.add "Action", valid_609523
  var valid_609524 = query.getOrDefault("Version")
  valid_609524 = validateParameter(valid_609524, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609524 != nil:
    section.add "Version", valid_609524
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609525 = header.getOrDefault("X-Amz-Signature")
  valid_609525 = validateParameter(valid_609525, JString, required = false,
                                 default = nil)
  if valid_609525 != nil:
    section.add "X-Amz-Signature", valid_609525
  var valid_609526 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609526 = validateParameter(valid_609526, JString, required = false,
                                 default = nil)
  if valid_609526 != nil:
    section.add "X-Amz-Content-Sha256", valid_609526
  var valid_609527 = header.getOrDefault("X-Amz-Date")
  valid_609527 = validateParameter(valid_609527, JString, required = false,
                                 default = nil)
  if valid_609527 != nil:
    section.add "X-Amz-Date", valid_609527
  var valid_609528 = header.getOrDefault("X-Amz-Credential")
  valid_609528 = validateParameter(valid_609528, JString, required = false,
                                 default = nil)
  if valid_609528 != nil:
    section.add "X-Amz-Credential", valid_609528
  var valid_609529 = header.getOrDefault("X-Amz-Security-Token")
  valid_609529 = validateParameter(valid_609529, JString, required = false,
                                 default = nil)
  if valid_609529 != nil:
    section.add "X-Amz-Security-Token", valid_609529
  var valid_609530 = header.getOrDefault("X-Amz-Algorithm")
  valid_609530 = validateParameter(valid_609530, JString, required = false,
                                 default = nil)
  if valid_609530 != nil:
    section.add "X-Amz-Algorithm", valid_609530
  var valid_609531 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609531 = validateParameter(valid_609531, JString, required = false,
                                 default = nil)
  if valid_609531 != nil:
    section.add "X-Amz-SignedHeaders", valid_609531
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609532: Call_GetListRoles_609517; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609532.validator(path, query, header, formData, body)
  let scheme = call_609532.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609532.url(scheme.get, call_609532.host, call_609532.base,
                         call_609532.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609532, url, valid)

proc call*(call_609533: Call_GetListRoles_609517; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = ""; Action: string = "ListRoles";
          Version: string = "2010-05-08"): Recallable =
  ## getListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609534 = newJObject()
  add(query_609534, "Marker", newJString(Marker))
  add(query_609534, "MaxItems", newJInt(MaxItems))
  add(query_609534, "PathPrefix", newJString(PathPrefix))
  add(query_609534, "Action", newJString(Action))
  add(query_609534, "Version", newJString(Version))
  result = call_609533.call(nil, query_609534, nil, nil, nil)

var getListRoles* = Call_GetListRoles_609517(name: "getListRoles",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_GetListRoles_609518, base: "/",
    url: url_GetListRoles_609519, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSAMLProviders_609569 = ref object of OpenApiRestCall_605589
proc url_PostListSAMLProviders_609571(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSAMLProviders_609570(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609572 = query.getOrDefault("Action")
  valid_609572 = validateParameter(valid_609572, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_609572 != nil:
    section.add "Action", valid_609572
  var valid_609573 = query.getOrDefault("Version")
  valid_609573 = validateParameter(valid_609573, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609573 != nil:
    section.add "Version", valid_609573
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609574 = header.getOrDefault("X-Amz-Signature")
  valid_609574 = validateParameter(valid_609574, JString, required = false,
                                 default = nil)
  if valid_609574 != nil:
    section.add "X-Amz-Signature", valid_609574
  var valid_609575 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609575 = validateParameter(valid_609575, JString, required = false,
                                 default = nil)
  if valid_609575 != nil:
    section.add "X-Amz-Content-Sha256", valid_609575
  var valid_609576 = header.getOrDefault("X-Amz-Date")
  valid_609576 = validateParameter(valid_609576, JString, required = false,
                                 default = nil)
  if valid_609576 != nil:
    section.add "X-Amz-Date", valid_609576
  var valid_609577 = header.getOrDefault("X-Amz-Credential")
  valid_609577 = validateParameter(valid_609577, JString, required = false,
                                 default = nil)
  if valid_609577 != nil:
    section.add "X-Amz-Credential", valid_609577
  var valid_609578 = header.getOrDefault("X-Amz-Security-Token")
  valid_609578 = validateParameter(valid_609578, JString, required = false,
                                 default = nil)
  if valid_609578 != nil:
    section.add "X-Amz-Security-Token", valid_609578
  var valid_609579 = header.getOrDefault("X-Amz-Algorithm")
  valid_609579 = validateParameter(valid_609579, JString, required = false,
                                 default = nil)
  if valid_609579 != nil:
    section.add "X-Amz-Algorithm", valid_609579
  var valid_609580 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609580 = validateParameter(valid_609580, JString, required = false,
                                 default = nil)
  if valid_609580 != nil:
    section.add "X-Amz-SignedHeaders", valid_609580
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609581: Call_PostListSAMLProviders_609569; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_609581.validator(path, query, header, formData, body)
  let scheme = call_609581.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609581.url(scheme.get, call_609581.host, call_609581.base,
                         call_609581.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609581, url, valid)

proc call*(call_609582: Call_PostListSAMLProviders_609569;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## postListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609583 = newJObject()
  add(query_609583, "Action", newJString(Action))
  add(query_609583, "Version", newJString(Version))
  result = call_609582.call(nil, query_609583, nil, nil, nil)

var postListSAMLProviders* = Call_PostListSAMLProviders_609569(
    name: "postListSAMLProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_PostListSAMLProviders_609570, base: "/",
    url: url_PostListSAMLProviders_609571, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSAMLProviders_609554 = ref object of OpenApiRestCall_605589
proc url_GetListSAMLProviders_609556(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSAMLProviders_609555(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609557 = query.getOrDefault("Action")
  valid_609557 = validateParameter(valid_609557, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_609557 != nil:
    section.add "Action", valid_609557
  var valid_609558 = query.getOrDefault("Version")
  valid_609558 = validateParameter(valid_609558, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609558 != nil:
    section.add "Version", valid_609558
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609559 = header.getOrDefault("X-Amz-Signature")
  valid_609559 = validateParameter(valid_609559, JString, required = false,
                                 default = nil)
  if valid_609559 != nil:
    section.add "X-Amz-Signature", valid_609559
  var valid_609560 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609560 = validateParameter(valid_609560, JString, required = false,
                                 default = nil)
  if valid_609560 != nil:
    section.add "X-Amz-Content-Sha256", valid_609560
  var valid_609561 = header.getOrDefault("X-Amz-Date")
  valid_609561 = validateParameter(valid_609561, JString, required = false,
                                 default = nil)
  if valid_609561 != nil:
    section.add "X-Amz-Date", valid_609561
  var valid_609562 = header.getOrDefault("X-Amz-Credential")
  valid_609562 = validateParameter(valid_609562, JString, required = false,
                                 default = nil)
  if valid_609562 != nil:
    section.add "X-Amz-Credential", valid_609562
  var valid_609563 = header.getOrDefault("X-Amz-Security-Token")
  valid_609563 = validateParameter(valid_609563, JString, required = false,
                                 default = nil)
  if valid_609563 != nil:
    section.add "X-Amz-Security-Token", valid_609563
  var valid_609564 = header.getOrDefault("X-Amz-Algorithm")
  valid_609564 = validateParameter(valid_609564, JString, required = false,
                                 default = nil)
  if valid_609564 != nil:
    section.add "X-Amz-Algorithm", valid_609564
  var valid_609565 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609565 = validateParameter(valid_609565, JString, required = false,
                                 default = nil)
  if valid_609565 != nil:
    section.add "X-Amz-SignedHeaders", valid_609565
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609566: Call_GetListSAMLProviders_609554; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_609566.validator(path, query, header, formData, body)
  let scheme = call_609566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609566.url(scheme.get, call_609566.host, call_609566.base,
                         call_609566.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609566, url, valid)

proc call*(call_609567: Call_GetListSAMLProviders_609554;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## getListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609568 = newJObject()
  add(query_609568, "Action", newJString(Action))
  add(query_609568, "Version", newJString(Version))
  result = call_609567.call(nil, query_609568, nil, nil, nil)

var getListSAMLProviders* = Call_GetListSAMLProviders_609554(
    name: "getListSAMLProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_GetListSAMLProviders_609555, base: "/",
    url: url_GetListSAMLProviders_609556, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSSHPublicKeys_609602 = ref object of OpenApiRestCall_605589
proc url_PostListSSHPublicKeys_609604(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSSHPublicKeys_609603(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609605 = query.getOrDefault("Action")
  valid_609605 = validateParameter(valid_609605, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_609605 != nil:
    section.add "Action", valid_609605
  var valid_609606 = query.getOrDefault("Version")
  valid_609606 = validateParameter(valid_609606, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609606 != nil:
    section.add "Version", valid_609606
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609607 = header.getOrDefault("X-Amz-Signature")
  valid_609607 = validateParameter(valid_609607, JString, required = false,
                                 default = nil)
  if valid_609607 != nil:
    section.add "X-Amz-Signature", valid_609607
  var valid_609608 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609608 = validateParameter(valid_609608, JString, required = false,
                                 default = nil)
  if valid_609608 != nil:
    section.add "X-Amz-Content-Sha256", valid_609608
  var valid_609609 = header.getOrDefault("X-Amz-Date")
  valid_609609 = validateParameter(valid_609609, JString, required = false,
                                 default = nil)
  if valid_609609 != nil:
    section.add "X-Amz-Date", valid_609609
  var valid_609610 = header.getOrDefault("X-Amz-Credential")
  valid_609610 = validateParameter(valid_609610, JString, required = false,
                                 default = nil)
  if valid_609610 != nil:
    section.add "X-Amz-Credential", valid_609610
  var valid_609611 = header.getOrDefault("X-Amz-Security-Token")
  valid_609611 = validateParameter(valid_609611, JString, required = false,
                                 default = nil)
  if valid_609611 != nil:
    section.add "X-Amz-Security-Token", valid_609611
  var valid_609612 = header.getOrDefault("X-Amz-Algorithm")
  valid_609612 = validateParameter(valid_609612, JString, required = false,
                                 default = nil)
  if valid_609612 != nil:
    section.add "X-Amz-Algorithm", valid_609612
  var valid_609613 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609613 = validateParameter(valid_609613, JString, required = false,
                                 default = nil)
  if valid_609613 != nil:
    section.add "X-Amz-SignedHeaders", valid_609613
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609614 = formData.getOrDefault("Marker")
  valid_609614 = validateParameter(valid_609614, JString, required = false,
                                 default = nil)
  if valid_609614 != nil:
    section.add "Marker", valid_609614
  var valid_609615 = formData.getOrDefault("UserName")
  valid_609615 = validateParameter(valid_609615, JString, required = false,
                                 default = nil)
  if valid_609615 != nil:
    section.add "UserName", valid_609615
  var valid_609616 = formData.getOrDefault("MaxItems")
  valid_609616 = validateParameter(valid_609616, JInt, required = false, default = nil)
  if valid_609616 != nil:
    section.add "MaxItems", valid_609616
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609617: Call_PostListSSHPublicKeys_609602; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609617.validator(path, query, header, formData, body)
  let scheme = call_609617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609617.url(scheme.get, call_609617.host, call_609617.base,
                         call_609617.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609617, url, valid)

proc call*(call_609618: Call_PostListSSHPublicKeys_609602; Marker: string = "";
          UserName: string = ""; Action: string = "ListSSHPublicKeys";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_609619 = newJObject()
  var formData_609620 = newJObject()
  add(formData_609620, "Marker", newJString(Marker))
  add(formData_609620, "UserName", newJString(UserName))
  add(query_609619, "Action", newJString(Action))
  add(formData_609620, "MaxItems", newJInt(MaxItems))
  add(query_609619, "Version", newJString(Version))
  result = call_609618.call(nil, query_609619, nil, formData_609620, nil)

var postListSSHPublicKeys* = Call_PostListSSHPublicKeys_609602(
    name: "postListSSHPublicKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_PostListSSHPublicKeys_609603, base: "/",
    url: url_PostListSSHPublicKeys_609604, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSSHPublicKeys_609584 = ref object of OpenApiRestCall_605589
proc url_GetListSSHPublicKeys_609586(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSSHPublicKeys_609585(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609587 = query.getOrDefault("Marker")
  valid_609587 = validateParameter(valid_609587, JString, required = false,
                                 default = nil)
  if valid_609587 != nil:
    section.add "Marker", valid_609587
  var valid_609588 = query.getOrDefault("UserName")
  valid_609588 = validateParameter(valid_609588, JString, required = false,
                                 default = nil)
  if valid_609588 != nil:
    section.add "UserName", valid_609588
  var valid_609589 = query.getOrDefault("MaxItems")
  valid_609589 = validateParameter(valid_609589, JInt, required = false, default = nil)
  if valid_609589 != nil:
    section.add "MaxItems", valid_609589
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609590 = query.getOrDefault("Action")
  valid_609590 = validateParameter(valid_609590, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_609590 != nil:
    section.add "Action", valid_609590
  var valid_609591 = query.getOrDefault("Version")
  valid_609591 = validateParameter(valid_609591, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609591 != nil:
    section.add "Version", valid_609591
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609592 = header.getOrDefault("X-Amz-Signature")
  valid_609592 = validateParameter(valid_609592, JString, required = false,
                                 default = nil)
  if valid_609592 != nil:
    section.add "X-Amz-Signature", valid_609592
  var valid_609593 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609593 = validateParameter(valid_609593, JString, required = false,
                                 default = nil)
  if valid_609593 != nil:
    section.add "X-Amz-Content-Sha256", valid_609593
  var valid_609594 = header.getOrDefault("X-Amz-Date")
  valid_609594 = validateParameter(valid_609594, JString, required = false,
                                 default = nil)
  if valid_609594 != nil:
    section.add "X-Amz-Date", valid_609594
  var valid_609595 = header.getOrDefault("X-Amz-Credential")
  valid_609595 = validateParameter(valid_609595, JString, required = false,
                                 default = nil)
  if valid_609595 != nil:
    section.add "X-Amz-Credential", valid_609595
  var valid_609596 = header.getOrDefault("X-Amz-Security-Token")
  valid_609596 = validateParameter(valid_609596, JString, required = false,
                                 default = nil)
  if valid_609596 != nil:
    section.add "X-Amz-Security-Token", valid_609596
  var valid_609597 = header.getOrDefault("X-Amz-Algorithm")
  valid_609597 = validateParameter(valid_609597, JString, required = false,
                                 default = nil)
  if valid_609597 != nil:
    section.add "X-Amz-Algorithm", valid_609597
  var valid_609598 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609598 = validateParameter(valid_609598, JString, required = false,
                                 default = nil)
  if valid_609598 != nil:
    section.add "X-Amz-SignedHeaders", valid_609598
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609599: Call_GetListSSHPublicKeys_609584; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609599.validator(path, query, header, formData, body)
  let scheme = call_609599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609599.url(scheme.get, call_609599.host, call_609599.base,
                         call_609599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609599, url, valid)

proc call*(call_609600: Call_GetListSSHPublicKeys_609584; Marker: string = "";
          UserName: string = ""; MaxItems: int = 0;
          Action: string = "ListSSHPublicKeys"; Version: string = "2010-05-08"): Recallable =
  ## getListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609601 = newJObject()
  add(query_609601, "Marker", newJString(Marker))
  add(query_609601, "UserName", newJString(UserName))
  add(query_609601, "MaxItems", newJInt(MaxItems))
  add(query_609601, "Action", newJString(Action))
  add(query_609601, "Version", newJString(Version))
  result = call_609600.call(nil, query_609601, nil, nil, nil)

var getListSSHPublicKeys* = Call_GetListSSHPublicKeys_609584(
    name: "getListSSHPublicKeys", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_GetListSSHPublicKeys_609585, base: "/",
    url: url_GetListSSHPublicKeys_609586, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServerCertificates_609639 = ref object of OpenApiRestCall_605589
proc url_PostListServerCertificates_609641(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListServerCertificates_609640(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609642 = query.getOrDefault("Action")
  valid_609642 = validateParameter(valid_609642, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_609642 != nil:
    section.add "Action", valid_609642
  var valid_609643 = query.getOrDefault("Version")
  valid_609643 = validateParameter(valid_609643, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609643 != nil:
    section.add "Version", valid_609643
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609644 = header.getOrDefault("X-Amz-Signature")
  valid_609644 = validateParameter(valid_609644, JString, required = false,
                                 default = nil)
  if valid_609644 != nil:
    section.add "X-Amz-Signature", valid_609644
  var valid_609645 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609645 = validateParameter(valid_609645, JString, required = false,
                                 default = nil)
  if valid_609645 != nil:
    section.add "X-Amz-Content-Sha256", valid_609645
  var valid_609646 = header.getOrDefault("X-Amz-Date")
  valid_609646 = validateParameter(valid_609646, JString, required = false,
                                 default = nil)
  if valid_609646 != nil:
    section.add "X-Amz-Date", valid_609646
  var valid_609647 = header.getOrDefault("X-Amz-Credential")
  valid_609647 = validateParameter(valid_609647, JString, required = false,
                                 default = nil)
  if valid_609647 != nil:
    section.add "X-Amz-Credential", valid_609647
  var valid_609648 = header.getOrDefault("X-Amz-Security-Token")
  valid_609648 = validateParameter(valid_609648, JString, required = false,
                                 default = nil)
  if valid_609648 != nil:
    section.add "X-Amz-Security-Token", valid_609648
  var valid_609649 = header.getOrDefault("X-Amz-Algorithm")
  valid_609649 = validateParameter(valid_609649, JString, required = false,
                                 default = nil)
  if valid_609649 != nil:
    section.add "X-Amz-Algorithm", valid_609649
  var valid_609650 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609650 = validateParameter(valid_609650, JString, required = false,
                                 default = nil)
  if valid_609650 != nil:
    section.add "X-Amz-SignedHeaders", valid_609650
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609651 = formData.getOrDefault("Marker")
  valid_609651 = validateParameter(valid_609651, JString, required = false,
                                 default = nil)
  if valid_609651 != nil:
    section.add "Marker", valid_609651
  var valid_609652 = formData.getOrDefault("PathPrefix")
  valid_609652 = validateParameter(valid_609652, JString, required = false,
                                 default = nil)
  if valid_609652 != nil:
    section.add "PathPrefix", valid_609652
  var valid_609653 = formData.getOrDefault("MaxItems")
  valid_609653 = validateParameter(valid_609653, JInt, required = false, default = nil)
  if valid_609653 != nil:
    section.add "MaxItems", valid_609653
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609654: Call_PostListServerCertificates_609639; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_609654.validator(path, query, header, formData, body)
  let scheme = call_609654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609654.url(scheme.get, call_609654.host, call_609654.base,
                         call_609654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609654, url, valid)

proc call*(call_609655: Call_PostListServerCertificates_609639;
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListServerCertificates"; Version: string = "2010-05-08"): Recallable =
  ## postListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609656 = newJObject()
  var formData_609657 = newJObject()
  add(formData_609657, "Marker", newJString(Marker))
  add(formData_609657, "PathPrefix", newJString(PathPrefix))
  add(formData_609657, "MaxItems", newJInt(MaxItems))
  add(query_609656, "Action", newJString(Action))
  add(query_609656, "Version", newJString(Version))
  result = call_609655.call(nil, query_609656, nil, formData_609657, nil)

var postListServerCertificates* = Call_PostListServerCertificates_609639(
    name: "postListServerCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_PostListServerCertificates_609640, base: "/",
    url: url_PostListServerCertificates_609641,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServerCertificates_609621 = ref object of OpenApiRestCall_605589
proc url_GetListServerCertificates_609623(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListServerCertificates_609622(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609624 = query.getOrDefault("Marker")
  valid_609624 = validateParameter(valid_609624, JString, required = false,
                                 default = nil)
  if valid_609624 != nil:
    section.add "Marker", valid_609624
  var valid_609625 = query.getOrDefault("MaxItems")
  valid_609625 = validateParameter(valid_609625, JInt, required = false, default = nil)
  if valid_609625 != nil:
    section.add "MaxItems", valid_609625
  var valid_609626 = query.getOrDefault("PathPrefix")
  valid_609626 = validateParameter(valid_609626, JString, required = false,
                                 default = nil)
  if valid_609626 != nil:
    section.add "PathPrefix", valid_609626
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609627 = query.getOrDefault("Action")
  valid_609627 = validateParameter(valid_609627, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_609627 != nil:
    section.add "Action", valid_609627
  var valid_609628 = query.getOrDefault("Version")
  valid_609628 = validateParameter(valid_609628, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609628 != nil:
    section.add "Version", valid_609628
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609629 = header.getOrDefault("X-Amz-Signature")
  valid_609629 = validateParameter(valid_609629, JString, required = false,
                                 default = nil)
  if valid_609629 != nil:
    section.add "X-Amz-Signature", valid_609629
  var valid_609630 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609630 = validateParameter(valid_609630, JString, required = false,
                                 default = nil)
  if valid_609630 != nil:
    section.add "X-Amz-Content-Sha256", valid_609630
  var valid_609631 = header.getOrDefault("X-Amz-Date")
  valid_609631 = validateParameter(valid_609631, JString, required = false,
                                 default = nil)
  if valid_609631 != nil:
    section.add "X-Amz-Date", valid_609631
  var valid_609632 = header.getOrDefault("X-Amz-Credential")
  valid_609632 = validateParameter(valid_609632, JString, required = false,
                                 default = nil)
  if valid_609632 != nil:
    section.add "X-Amz-Credential", valid_609632
  var valid_609633 = header.getOrDefault("X-Amz-Security-Token")
  valid_609633 = validateParameter(valid_609633, JString, required = false,
                                 default = nil)
  if valid_609633 != nil:
    section.add "X-Amz-Security-Token", valid_609633
  var valid_609634 = header.getOrDefault("X-Amz-Algorithm")
  valid_609634 = validateParameter(valid_609634, JString, required = false,
                                 default = nil)
  if valid_609634 != nil:
    section.add "X-Amz-Algorithm", valid_609634
  var valid_609635 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609635 = validateParameter(valid_609635, JString, required = false,
                                 default = nil)
  if valid_609635 != nil:
    section.add "X-Amz-SignedHeaders", valid_609635
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609636: Call_GetListServerCertificates_609621; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_609636.validator(path, query, header, formData, body)
  let scheme = call_609636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609636.url(scheme.get, call_609636.host, call_609636.base,
                         call_609636.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609636, url, valid)

proc call*(call_609637: Call_GetListServerCertificates_609621; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListServerCertificates"; Version: string = "2010-05-08"): Recallable =
  ## getListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609638 = newJObject()
  add(query_609638, "Marker", newJString(Marker))
  add(query_609638, "MaxItems", newJInt(MaxItems))
  add(query_609638, "PathPrefix", newJString(PathPrefix))
  add(query_609638, "Action", newJString(Action))
  add(query_609638, "Version", newJString(Version))
  result = call_609637.call(nil, query_609638, nil, nil, nil)

var getListServerCertificates* = Call_GetListServerCertificates_609621(
    name: "getListServerCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_GetListServerCertificates_609622, base: "/",
    url: url_GetListServerCertificates_609623,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServiceSpecificCredentials_609675 = ref object of OpenApiRestCall_605589
proc url_PostListServiceSpecificCredentials_609677(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListServiceSpecificCredentials_609676(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609678 = query.getOrDefault("Action")
  valid_609678 = validateParameter(valid_609678, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_609678 != nil:
    section.add "Action", valid_609678
  var valid_609679 = query.getOrDefault("Version")
  valid_609679 = validateParameter(valid_609679, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609679 != nil:
    section.add "Version", valid_609679
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609680 = header.getOrDefault("X-Amz-Signature")
  valid_609680 = validateParameter(valid_609680, JString, required = false,
                                 default = nil)
  if valid_609680 != nil:
    section.add "X-Amz-Signature", valid_609680
  var valid_609681 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609681 = validateParameter(valid_609681, JString, required = false,
                                 default = nil)
  if valid_609681 != nil:
    section.add "X-Amz-Content-Sha256", valid_609681
  var valid_609682 = header.getOrDefault("X-Amz-Date")
  valid_609682 = validateParameter(valid_609682, JString, required = false,
                                 default = nil)
  if valid_609682 != nil:
    section.add "X-Amz-Date", valid_609682
  var valid_609683 = header.getOrDefault("X-Amz-Credential")
  valid_609683 = validateParameter(valid_609683, JString, required = false,
                                 default = nil)
  if valid_609683 != nil:
    section.add "X-Amz-Credential", valid_609683
  var valid_609684 = header.getOrDefault("X-Amz-Security-Token")
  valid_609684 = validateParameter(valid_609684, JString, required = false,
                                 default = nil)
  if valid_609684 != nil:
    section.add "X-Amz-Security-Token", valid_609684
  var valid_609685 = header.getOrDefault("X-Amz-Algorithm")
  valid_609685 = validateParameter(valid_609685, JString, required = false,
                                 default = nil)
  if valid_609685 != nil:
    section.add "X-Amz-Algorithm", valid_609685
  var valid_609686 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609686 = validateParameter(valid_609686, JString, required = false,
                                 default = nil)
  if valid_609686 != nil:
    section.add "X-Amz-SignedHeaders", valid_609686
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_609687 = formData.getOrDefault("ServiceName")
  valid_609687 = validateParameter(valid_609687, JString, required = false,
                                 default = nil)
  if valid_609687 != nil:
    section.add "ServiceName", valid_609687
  var valid_609688 = formData.getOrDefault("UserName")
  valid_609688 = validateParameter(valid_609688, JString, required = false,
                                 default = nil)
  if valid_609688 != nil:
    section.add "UserName", valid_609688
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609689: Call_PostListServiceSpecificCredentials_609675;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_609689.validator(path, query, header, formData, body)
  let scheme = call_609689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609689.url(scheme.get, call_609689.host, call_609689.base,
                         call_609689.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609689, url, valid)

proc call*(call_609690: Call_PostListServiceSpecificCredentials_609675;
          ServiceName: string = ""; UserName: string = "";
          Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"): Recallable =
  ## postListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609691 = newJObject()
  var formData_609692 = newJObject()
  add(formData_609692, "ServiceName", newJString(ServiceName))
  add(formData_609692, "UserName", newJString(UserName))
  add(query_609691, "Action", newJString(Action))
  add(query_609691, "Version", newJString(Version))
  result = call_609690.call(nil, query_609691, nil, formData_609692, nil)

var postListServiceSpecificCredentials* = Call_PostListServiceSpecificCredentials_609675(
    name: "postListServiceSpecificCredentials", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_PostListServiceSpecificCredentials_609676, base: "/",
    url: url_PostListServiceSpecificCredentials_609677,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServiceSpecificCredentials_609658 = ref object of OpenApiRestCall_605589
proc url_GetListServiceSpecificCredentials_609660(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListServiceSpecificCredentials_609659(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609661 = query.getOrDefault("UserName")
  valid_609661 = validateParameter(valid_609661, JString, required = false,
                                 default = nil)
  if valid_609661 != nil:
    section.add "UserName", valid_609661
  var valid_609662 = query.getOrDefault("ServiceName")
  valid_609662 = validateParameter(valid_609662, JString, required = false,
                                 default = nil)
  if valid_609662 != nil:
    section.add "ServiceName", valid_609662
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609663 = query.getOrDefault("Action")
  valid_609663 = validateParameter(valid_609663, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_609663 != nil:
    section.add "Action", valid_609663
  var valid_609664 = query.getOrDefault("Version")
  valid_609664 = validateParameter(valid_609664, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609664 != nil:
    section.add "Version", valid_609664
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609665 = header.getOrDefault("X-Amz-Signature")
  valid_609665 = validateParameter(valid_609665, JString, required = false,
                                 default = nil)
  if valid_609665 != nil:
    section.add "X-Amz-Signature", valid_609665
  var valid_609666 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609666 = validateParameter(valid_609666, JString, required = false,
                                 default = nil)
  if valid_609666 != nil:
    section.add "X-Amz-Content-Sha256", valid_609666
  var valid_609667 = header.getOrDefault("X-Amz-Date")
  valid_609667 = validateParameter(valid_609667, JString, required = false,
                                 default = nil)
  if valid_609667 != nil:
    section.add "X-Amz-Date", valid_609667
  var valid_609668 = header.getOrDefault("X-Amz-Credential")
  valid_609668 = validateParameter(valid_609668, JString, required = false,
                                 default = nil)
  if valid_609668 != nil:
    section.add "X-Amz-Credential", valid_609668
  var valid_609669 = header.getOrDefault("X-Amz-Security-Token")
  valid_609669 = validateParameter(valid_609669, JString, required = false,
                                 default = nil)
  if valid_609669 != nil:
    section.add "X-Amz-Security-Token", valid_609669
  var valid_609670 = header.getOrDefault("X-Amz-Algorithm")
  valid_609670 = validateParameter(valid_609670, JString, required = false,
                                 default = nil)
  if valid_609670 != nil:
    section.add "X-Amz-Algorithm", valid_609670
  var valid_609671 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609671 = validateParameter(valid_609671, JString, required = false,
                                 default = nil)
  if valid_609671 != nil:
    section.add "X-Amz-SignedHeaders", valid_609671
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609672: Call_GetListServiceSpecificCredentials_609658;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_609672.validator(path, query, header, formData, body)
  let scheme = call_609672.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609672.url(scheme.get, call_609672.host, call_609672.base,
                         call_609672.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609672, url, valid)

proc call*(call_609673: Call_GetListServiceSpecificCredentials_609658;
          UserName: string = ""; ServiceName: string = "";
          Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"): Recallable =
  ## getListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609674 = newJObject()
  add(query_609674, "UserName", newJString(UserName))
  add(query_609674, "ServiceName", newJString(ServiceName))
  add(query_609674, "Action", newJString(Action))
  add(query_609674, "Version", newJString(Version))
  result = call_609673.call(nil, query_609674, nil, nil, nil)

var getListServiceSpecificCredentials* = Call_GetListServiceSpecificCredentials_609658(
    name: "getListServiceSpecificCredentials", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_GetListServiceSpecificCredentials_609659, base: "/",
    url: url_GetListServiceSpecificCredentials_609660,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSigningCertificates_609711 = ref object of OpenApiRestCall_605589
proc url_PostListSigningCertificates_609713(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSigningCertificates_609712(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609714 = query.getOrDefault("Action")
  valid_609714 = validateParameter(valid_609714, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_609714 != nil:
    section.add "Action", valid_609714
  var valid_609715 = query.getOrDefault("Version")
  valid_609715 = validateParameter(valid_609715, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609715 != nil:
    section.add "Version", valid_609715
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609716 = header.getOrDefault("X-Amz-Signature")
  valid_609716 = validateParameter(valid_609716, JString, required = false,
                                 default = nil)
  if valid_609716 != nil:
    section.add "X-Amz-Signature", valid_609716
  var valid_609717 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609717 = validateParameter(valid_609717, JString, required = false,
                                 default = nil)
  if valid_609717 != nil:
    section.add "X-Amz-Content-Sha256", valid_609717
  var valid_609718 = header.getOrDefault("X-Amz-Date")
  valid_609718 = validateParameter(valid_609718, JString, required = false,
                                 default = nil)
  if valid_609718 != nil:
    section.add "X-Amz-Date", valid_609718
  var valid_609719 = header.getOrDefault("X-Amz-Credential")
  valid_609719 = validateParameter(valid_609719, JString, required = false,
                                 default = nil)
  if valid_609719 != nil:
    section.add "X-Amz-Credential", valid_609719
  var valid_609720 = header.getOrDefault("X-Amz-Security-Token")
  valid_609720 = validateParameter(valid_609720, JString, required = false,
                                 default = nil)
  if valid_609720 != nil:
    section.add "X-Amz-Security-Token", valid_609720
  var valid_609721 = header.getOrDefault("X-Amz-Algorithm")
  valid_609721 = validateParameter(valid_609721, JString, required = false,
                                 default = nil)
  if valid_609721 != nil:
    section.add "X-Amz-Algorithm", valid_609721
  var valid_609722 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609722 = validateParameter(valid_609722, JString, required = false,
                                 default = nil)
  if valid_609722 != nil:
    section.add "X-Amz-SignedHeaders", valid_609722
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609723 = formData.getOrDefault("Marker")
  valid_609723 = validateParameter(valid_609723, JString, required = false,
                                 default = nil)
  if valid_609723 != nil:
    section.add "Marker", valid_609723
  var valid_609724 = formData.getOrDefault("UserName")
  valid_609724 = validateParameter(valid_609724, JString, required = false,
                                 default = nil)
  if valid_609724 != nil:
    section.add "UserName", valid_609724
  var valid_609725 = formData.getOrDefault("MaxItems")
  valid_609725 = validateParameter(valid_609725, JInt, required = false, default = nil)
  if valid_609725 != nil:
    section.add "MaxItems", valid_609725
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609726: Call_PostListSigningCertificates_609711; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_609726.validator(path, query, header, formData, body)
  let scheme = call_609726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609726.url(scheme.get, call_609726.host, call_609726.base,
                         call_609726.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609726, url, valid)

proc call*(call_609727: Call_PostListSigningCertificates_609711;
          Marker: string = ""; UserName: string = "";
          Action: string = "ListSigningCertificates"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_609728 = newJObject()
  var formData_609729 = newJObject()
  add(formData_609729, "Marker", newJString(Marker))
  add(formData_609729, "UserName", newJString(UserName))
  add(query_609728, "Action", newJString(Action))
  add(formData_609729, "MaxItems", newJInt(MaxItems))
  add(query_609728, "Version", newJString(Version))
  result = call_609727.call(nil, query_609728, nil, formData_609729, nil)

var postListSigningCertificates* = Call_PostListSigningCertificates_609711(
    name: "postListSigningCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_PostListSigningCertificates_609712, base: "/",
    url: url_PostListSigningCertificates_609713,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSigningCertificates_609693 = ref object of OpenApiRestCall_605589
proc url_GetListSigningCertificates_609695(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSigningCertificates_609694(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609696 = query.getOrDefault("Marker")
  valid_609696 = validateParameter(valid_609696, JString, required = false,
                                 default = nil)
  if valid_609696 != nil:
    section.add "Marker", valid_609696
  var valid_609697 = query.getOrDefault("UserName")
  valid_609697 = validateParameter(valid_609697, JString, required = false,
                                 default = nil)
  if valid_609697 != nil:
    section.add "UserName", valid_609697
  var valid_609698 = query.getOrDefault("MaxItems")
  valid_609698 = validateParameter(valid_609698, JInt, required = false, default = nil)
  if valid_609698 != nil:
    section.add "MaxItems", valid_609698
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609699 = query.getOrDefault("Action")
  valid_609699 = validateParameter(valid_609699, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_609699 != nil:
    section.add "Action", valid_609699
  var valid_609700 = query.getOrDefault("Version")
  valid_609700 = validateParameter(valid_609700, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609700 != nil:
    section.add "Version", valid_609700
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609701 = header.getOrDefault("X-Amz-Signature")
  valid_609701 = validateParameter(valid_609701, JString, required = false,
                                 default = nil)
  if valid_609701 != nil:
    section.add "X-Amz-Signature", valid_609701
  var valid_609702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609702 = validateParameter(valid_609702, JString, required = false,
                                 default = nil)
  if valid_609702 != nil:
    section.add "X-Amz-Content-Sha256", valid_609702
  var valid_609703 = header.getOrDefault("X-Amz-Date")
  valid_609703 = validateParameter(valid_609703, JString, required = false,
                                 default = nil)
  if valid_609703 != nil:
    section.add "X-Amz-Date", valid_609703
  var valid_609704 = header.getOrDefault("X-Amz-Credential")
  valid_609704 = validateParameter(valid_609704, JString, required = false,
                                 default = nil)
  if valid_609704 != nil:
    section.add "X-Amz-Credential", valid_609704
  var valid_609705 = header.getOrDefault("X-Amz-Security-Token")
  valid_609705 = validateParameter(valid_609705, JString, required = false,
                                 default = nil)
  if valid_609705 != nil:
    section.add "X-Amz-Security-Token", valid_609705
  var valid_609706 = header.getOrDefault("X-Amz-Algorithm")
  valid_609706 = validateParameter(valid_609706, JString, required = false,
                                 default = nil)
  if valid_609706 != nil:
    section.add "X-Amz-Algorithm", valid_609706
  var valid_609707 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609707 = validateParameter(valid_609707, JString, required = false,
                                 default = nil)
  if valid_609707 != nil:
    section.add "X-Amz-SignedHeaders", valid_609707
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609708: Call_GetListSigningCertificates_609693; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_609708.validator(path, query, header, formData, body)
  let scheme = call_609708.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609708.url(scheme.get, call_609708.host, call_609708.base,
                         call_609708.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609708, url, valid)

proc call*(call_609709: Call_GetListSigningCertificates_609693;
          Marker: string = ""; UserName: string = ""; MaxItems: int = 0;
          Action: string = "ListSigningCertificates"; Version: string = "2010-05-08"): Recallable =
  ## getListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609710 = newJObject()
  add(query_609710, "Marker", newJString(Marker))
  add(query_609710, "UserName", newJString(UserName))
  add(query_609710, "MaxItems", newJInt(MaxItems))
  add(query_609710, "Action", newJString(Action))
  add(query_609710, "Version", newJString(Version))
  result = call_609709.call(nil, query_609710, nil, nil, nil)

var getListSigningCertificates* = Call_GetListSigningCertificates_609693(
    name: "getListSigningCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_GetListSigningCertificates_609694, base: "/",
    url: url_GetListSigningCertificates_609695,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserPolicies_609748 = ref object of OpenApiRestCall_605589
proc url_PostListUserPolicies_609750(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUserPolicies_609749(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609751 = query.getOrDefault("Action")
  valid_609751 = validateParameter(valid_609751, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_609751 != nil:
    section.add "Action", valid_609751
  var valid_609752 = query.getOrDefault("Version")
  valid_609752 = validateParameter(valid_609752, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609752 != nil:
    section.add "Version", valid_609752
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609753 = header.getOrDefault("X-Amz-Signature")
  valid_609753 = validateParameter(valid_609753, JString, required = false,
                                 default = nil)
  if valid_609753 != nil:
    section.add "X-Amz-Signature", valid_609753
  var valid_609754 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609754 = validateParameter(valid_609754, JString, required = false,
                                 default = nil)
  if valid_609754 != nil:
    section.add "X-Amz-Content-Sha256", valid_609754
  var valid_609755 = header.getOrDefault("X-Amz-Date")
  valid_609755 = validateParameter(valid_609755, JString, required = false,
                                 default = nil)
  if valid_609755 != nil:
    section.add "X-Amz-Date", valid_609755
  var valid_609756 = header.getOrDefault("X-Amz-Credential")
  valid_609756 = validateParameter(valid_609756, JString, required = false,
                                 default = nil)
  if valid_609756 != nil:
    section.add "X-Amz-Credential", valid_609756
  var valid_609757 = header.getOrDefault("X-Amz-Security-Token")
  valid_609757 = validateParameter(valid_609757, JString, required = false,
                                 default = nil)
  if valid_609757 != nil:
    section.add "X-Amz-Security-Token", valid_609757
  var valid_609758 = header.getOrDefault("X-Amz-Algorithm")
  valid_609758 = validateParameter(valid_609758, JString, required = false,
                                 default = nil)
  if valid_609758 != nil:
    section.add "X-Amz-Algorithm", valid_609758
  var valid_609759 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609759 = validateParameter(valid_609759, JString, required = false,
                                 default = nil)
  if valid_609759 != nil:
    section.add "X-Amz-SignedHeaders", valid_609759
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609760 = formData.getOrDefault("Marker")
  valid_609760 = validateParameter(valid_609760, JString, required = false,
                                 default = nil)
  if valid_609760 != nil:
    section.add "Marker", valid_609760
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_609761 = formData.getOrDefault("UserName")
  valid_609761 = validateParameter(valid_609761, JString, required = true,
                                 default = nil)
  if valid_609761 != nil:
    section.add "UserName", valid_609761
  var valid_609762 = formData.getOrDefault("MaxItems")
  valid_609762 = validateParameter(valid_609762, JInt, required = false, default = nil)
  if valid_609762 != nil:
    section.add "MaxItems", valid_609762
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609763: Call_PostListUserPolicies_609748; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_609763.validator(path, query, header, formData, body)
  let scheme = call_609763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609763.url(scheme.get, call_609763.host, call_609763.base,
                         call_609763.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609763, url, valid)

proc call*(call_609764: Call_PostListUserPolicies_609748; UserName: string;
          Marker: string = ""; Action: string = "ListUserPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_609765 = newJObject()
  var formData_609766 = newJObject()
  add(formData_609766, "Marker", newJString(Marker))
  add(formData_609766, "UserName", newJString(UserName))
  add(query_609765, "Action", newJString(Action))
  add(formData_609766, "MaxItems", newJInt(MaxItems))
  add(query_609765, "Version", newJString(Version))
  result = call_609764.call(nil, query_609765, nil, formData_609766, nil)

var postListUserPolicies* = Call_PostListUserPolicies_609748(
    name: "postListUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_PostListUserPolicies_609749, base: "/",
    url: url_PostListUserPolicies_609750, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserPolicies_609730 = ref object of OpenApiRestCall_605589
proc url_GetListUserPolicies_609732(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUserPolicies_609731(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609733 = query.getOrDefault("Marker")
  valid_609733 = validateParameter(valid_609733, JString, required = false,
                                 default = nil)
  if valid_609733 != nil:
    section.add "Marker", valid_609733
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_609734 = query.getOrDefault("UserName")
  valid_609734 = validateParameter(valid_609734, JString, required = true,
                                 default = nil)
  if valid_609734 != nil:
    section.add "UserName", valid_609734
  var valid_609735 = query.getOrDefault("MaxItems")
  valid_609735 = validateParameter(valid_609735, JInt, required = false, default = nil)
  if valid_609735 != nil:
    section.add "MaxItems", valid_609735
  var valid_609736 = query.getOrDefault("Action")
  valid_609736 = validateParameter(valid_609736, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_609736 != nil:
    section.add "Action", valid_609736
  var valid_609737 = query.getOrDefault("Version")
  valid_609737 = validateParameter(valid_609737, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609737 != nil:
    section.add "Version", valid_609737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609738 = header.getOrDefault("X-Amz-Signature")
  valid_609738 = validateParameter(valid_609738, JString, required = false,
                                 default = nil)
  if valid_609738 != nil:
    section.add "X-Amz-Signature", valid_609738
  var valid_609739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609739 = validateParameter(valid_609739, JString, required = false,
                                 default = nil)
  if valid_609739 != nil:
    section.add "X-Amz-Content-Sha256", valid_609739
  var valid_609740 = header.getOrDefault("X-Amz-Date")
  valid_609740 = validateParameter(valid_609740, JString, required = false,
                                 default = nil)
  if valid_609740 != nil:
    section.add "X-Amz-Date", valid_609740
  var valid_609741 = header.getOrDefault("X-Amz-Credential")
  valid_609741 = validateParameter(valid_609741, JString, required = false,
                                 default = nil)
  if valid_609741 != nil:
    section.add "X-Amz-Credential", valid_609741
  var valid_609742 = header.getOrDefault("X-Amz-Security-Token")
  valid_609742 = validateParameter(valid_609742, JString, required = false,
                                 default = nil)
  if valid_609742 != nil:
    section.add "X-Amz-Security-Token", valid_609742
  var valid_609743 = header.getOrDefault("X-Amz-Algorithm")
  valid_609743 = validateParameter(valid_609743, JString, required = false,
                                 default = nil)
  if valid_609743 != nil:
    section.add "X-Amz-Algorithm", valid_609743
  var valid_609744 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609744 = validateParameter(valid_609744, JString, required = false,
                                 default = nil)
  if valid_609744 != nil:
    section.add "X-Amz-SignedHeaders", valid_609744
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609745: Call_GetListUserPolicies_609730; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_609745.validator(path, query, header, formData, body)
  let scheme = call_609745.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609745.url(scheme.get, call_609745.host, call_609745.base,
                         call_609745.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609745, url, valid)

proc call*(call_609746: Call_GetListUserPolicies_609730; UserName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListUserPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609747 = newJObject()
  add(query_609747, "Marker", newJString(Marker))
  add(query_609747, "UserName", newJString(UserName))
  add(query_609747, "MaxItems", newJInt(MaxItems))
  add(query_609747, "Action", newJString(Action))
  add(query_609747, "Version", newJString(Version))
  result = call_609746.call(nil, query_609747, nil, nil, nil)

var getListUserPolicies* = Call_GetListUserPolicies_609730(
    name: "getListUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_GetListUserPolicies_609731, base: "/",
    url: url_GetListUserPolicies_609732, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserTags_609785 = ref object of OpenApiRestCall_605589
proc url_PostListUserTags_609787(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUserTags_609786(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609788 = query.getOrDefault("Action")
  valid_609788 = validateParameter(valid_609788, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_609788 != nil:
    section.add "Action", valid_609788
  var valid_609789 = query.getOrDefault("Version")
  valid_609789 = validateParameter(valid_609789, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609789 != nil:
    section.add "Version", valid_609789
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609790 = header.getOrDefault("X-Amz-Signature")
  valid_609790 = validateParameter(valid_609790, JString, required = false,
                                 default = nil)
  if valid_609790 != nil:
    section.add "X-Amz-Signature", valid_609790
  var valid_609791 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609791 = validateParameter(valid_609791, JString, required = false,
                                 default = nil)
  if valid_609791 != nil:
    section.add "X-Amz-Content-Sha256", valid_609791
  var valid_609792 = header.getOrDefault("X-Amz-Date")
  valid_609792 = validateParameter(valid_609792, JString, required = false,
                                 default = nil)
  if valid_609792 != nil:
    section.add "X-Amz-Date", valid_609792
  var valid_609793 = header.getOrDefault("X-Amz-Credential")
  valid_609793 = validateParameter(valid_609793, JString, required = false,
                                 default = nil)
  if valid_609793 != nil:
    section.add "X-Amz-Credential", valid_609793
  var valid_609794 = header.getOrDefault("X-Amz-Security-Token")
  valid_609794 = validateParameter(valid_609794, JString, required = false,
                                 default = nil)
  if valid_609794 != nil:
    section.add "X-Amz-Security-Token", valid_609794
  var valid_609795 = header.getOrDefault("X-Amz-Algorithm")
  valid_609795 = validateParameter(valid_609795, JString, required = false,
                                 default = nil)
  if valid_609795 != nil:
    section.add "X-Amz-Algorithm", valid_609795
  var valid_609796 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609796 = validateParameter(valid_609796, JString, required = false,
                                 default = nil)
  if valid_609796 != nil:
    section.add "X-Amz-SignedHeaders", valid_609796
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609797 = formData.getOrDefault("Marker")
  valid_609797 = validateParameter(valid_609797, JString, required = false,
                                 default = nil)
  if valid_609797 != nil:
    section.add "Marker", valid_609797
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_609798 = formData.getOrDefault("UserName")
  valid_609798 = validateParameter(valid_609798, JString, required = true,
                                 default = nil)
  if valid_609798 != nil:
    section.add "UserName", valid_609798
  var valid_609799 = formData.getOrDefault("MaxItems")
  valid_609799 = validateParameter(valid_609799, JInt, required = false, default = nil)
  if valid_609799 != nil:
    section.add "MaxItems", valid_609799
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609800: Call_PostListUserTags_609785; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_609800.validator(path, query, header, formData, body)
  let scheme = call_609800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609800.url(scheme.get, call_609800.host, call_609800.base,
                         call_609800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609800, url, valid)

proc call*(call_609801: Call_PostListUserTags_609785; UserName: string;
          Marker: string = ""; Action: string = "ListUserTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_609802 = newJObject()
  var formData_609803 = newJObject()
  add(formData_609803, "Marker", newJString(Marker))
  add(formData_609803, "UserName", newJString(UserName))
  add(query_609802, "Action", newJString(Action))
  add(formData_609803, "MaxItems", newJInt(MaxItems))
  add(query_609802, "Version", newJString(Version))
  result = call_609801.call(nil, query_609802, nil, formData_609803, nil)

var postListUserTags* = Call_PostListUserTags_609785(name: "postListUserTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_PostListUserTags_609786,
    base: "/", url: url_PostListUserTags_609787,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserTags_609767 = ref object of OpenApiRestCall_605589
proc url_GetListUserTags_609769(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUserTags_609768(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609770 = query.getOrDefault("Marker")
  valid_609770 = validateParameter(valid_609770, JString, required = false,
                                 default = nil)
  if valid_609770 != nil:
    section.add "Marker", valid_609770
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_609771 = query.getOrDefault("UserName")
  valid_609771 = validateParameter(valid_609771, JString, required = true,
                                 default = nil)
  if valid_609771 != nil:
    section.add "UserName", valid_609771
  var valid_609772 = query.getOrDefault("MaxItems")
  valid_609772 = validateParameter(valid_609772, JInt, required = false, default = nil)
  if valid_609772 != nil:
    section.add "MaxItems", valid_609772
  var valid_609773 = query.getOrDefault("Action")
  valid_609773 = validateParameter(valid_609773, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_609773 != nil:
    section.add "Action", valid_609773
  var valid_609774 = query.getOrDefault("Version")
  valid_609774 = validateParameter(valid_609774, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609774 != nil:
    section.add "Version", valid_609774
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609775 = header.getOrDefault("X-Amz-Signature")
  valid_609775 = validateParameter(valid_609775, JString, required = false,
                                 default = nil)
  if valid_609775 != nil:
    section.add "X-Amz-Signature", valid_609775
  var valid_609776 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609776 = validateParameter(valid_609776, JString, required = false,
                                 default = nil)
  if valid_609776 != nil:
    section.add "X-Amz-Content-Sha256", valid_609776
  var valid_609777 = header.getOrDefault("X-Amz-Date")
  valid_609777 = validateParameter(valid_609777, JString, required = false,
                                 default = nil)
  if valid_609777 != nil:
    section.add "X-Amz-Date", valid_609777
  var valid_609778 = header.getOrDefault("X-Amz-Credential")
  valid_609778 = validateParameter(valid_609778, JString, required = false,
                                 default = nil)
  if valid_609778 != nil:
    section.add "X-Amz-Credential", valid_609778
  var valid_609779 = header.getOrDefault("X-Amz-Security-Token")
  valid_609779 = validateParameter(valid_609779, JString, required = false,
                                 default = nil)
  if valid_609779 != nil:
    section.add "X-Amz-Security-Token", valid_609779
  var valid_609780 = header.getOrDefault("X-Amz-Algorithm")
  valid_609780 = validateParameter(valid_609780, JString, required = false,
                                 default = nil)
  if valid_609780 != nil:
    section.add "X-Amz-Algorithm", valid_609780
  var valid_609781 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609781 = validateParameter(valid_609781, JString, required = false,
                                 default = nil)
  if valid_609781 != nil:
    section.add "X-Amz-SignedHeaders", valid_609781
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609782: Call_GetListUserTags_609767; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_609782.validator(path, query, header, formData, body)
  let scheme = call_609782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609782.url(scheme.get, call_609782.host, call_609782.base,
                         call_609782.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609782, url, valid)

proc call*(call_609783: Call_GetListUserTags_609767; UserName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListUserTags";
          Version: string = "2010-05-08"): Recallable =
  ## getListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609784 = newJObject()
  add(query_609784, "Marker", newJString(Marker))
  add(query_609784, "UserName", newJString(UserName))
  add(query_609784, "MaxItems", newJInt(MaxItems))
  add(query_609784, "Action", newJString(Action))
  add(query_609784, "Version", newJString(Version))
  result = call_609783.call(nil, query_609784, nil, nil, nil)

var getListUserTags* = Call_GetListUserTags_609767(name: "getListUserTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_GetListUserTags_609768,
    base: "/", url: url_GetListUserTags_609769, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUsers_609822 = ref object of OpenApiRestCall_605589
proc url_PostListUsers_609824(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUsers_609823(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609825 = query.getOrDefault("Action")
  valid_609825 = validateParameter(valid_609825, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_609825 != nil:
    section.add "Action", valid_609825
  var valid_609826 = query.getOrDefault("Version")
  valid_609826 = validateParameter(valid_609826, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609826 != nil:
    section.add "Version", valid_609826
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609827 = header.getOrDefault("X-Amz-Signature")
  valid_609827 = validateParameter(valid_609827, JString, required = false,
                                 default = nil)
  if valid_609827 != nil:
    section.add "X-Amz-Signature", valid_609827
  var valid_609828 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609828 = validateParameter(valid_609828, JString, required = false,
                                 default = nil)
  if valid_609828 != nil:
    section.add "X-Amz-Content-Sha256", valid_609828
  var valid_609829 = header.getOrDefault("X-Amz-Date")
  valid_609829 = validateParameter(valid_609829, JString, required = false,
                                 default = nil)
  if valid_609829 != nil:
    section.add "X-Amz-Date", valid_609829
  var valid_609830 = header.getOrDefault("X-Amz-Credential")
  valid_609830 = validateParameter(valid_609830, JString, required = false,
                                 default = nil)
  if valid_609830 != nil:
    section.add "X-Amz-Credential", valid_609830
  var valid_609831 = header.getOrDefault("X-Amz-Security-Token")
  valid_609831 = validateParameter(valid_609831, JString, required = false,
                                 default = nil)
  if valid_609831 != nil:
    section.add "X-Amz-Security-Token", valid_609831
  var valid_609832 = header.getOrDefault("X-Amz-Algorithm")
  valid_609832 = validateParameter(valid_609832, JString, required = false,
                                 default = nil)
  if valid_609832 != nil:
    section.add "X-Amz-Algorithm", valid_609832
  var valid_609833 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609833 = validateParameter(valid_609833, JString, required = false,
                                 default = nil)
  if valid_609833 != nil:
    section.add "X-Amz-SignedHeaders", valid_609833
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609834 = formData.getOrDefault("Marker")
  valid_609834 = validateParameter(valid_609834, JString, required = false,
                                 default = nil)
  if valid_609834 != nil:
    section.add "Marker", valid_609834
  var valid_609835 = formData.getOrDefault("PathPrefix")
  valid_609835 = validateParameter(valid_609835, JString, required = false,
                                 default = nil)
  if valid_609835 != nil:
    section.add "PathPrefix", valid_609835
  var valid_609836 = formData.getOrDefault("MaxItems")
  valid_609836 = validateParameter(valid_609836, JInt, required = false, default = nil)
  if valid_609836 != nil:
    section.add "MaxItems", valid_609836
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609837: Call_PostListUsers_609822; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609837.validator(path, query, header, formData, body)
  let scheme = call_609837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609837.url(scheme.get, call_609837.host, call_609837.base,
                         call_609837.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609837, url, valid)

proc call*(call_609838: Call_PostListUsers_609822; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0; Action: string = "ListUsers";
          Version: string = "2010-05-08"): Recallable =
  ## postListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609839 = newJObject()
  var formData_609840 = newJObject()
  add(formData_609840, "Marker", newJString(Marker))
  add(formData_609840, "PathPrefix", newJString(PathPrefix))
  add(formData_609840, "MaxItems", newJInt(MaxItems))
  add(query_609839, "Action", newJString(Action))
  add(query_609839, "Version", newJString(Version))
  result = call_609838.call(nil, query_609839, nil, formData_609840, nil)

var postListUsers* = Call_PostListUsers_609822(name: "postListUsers",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_PostListUsers_609823,
    base: "/", url: url_PostListUsers_609824, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUsers_609804 = ref object of OpenApiRestCall_605589
proc url_GetListUsers_609806(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUsers_609805(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609807 = query.getOrDefault("Marker")
  valid_609807 = validateParameter(valid_609807, JString, required = false,
                                 default = nil)
  if valid_609807 != nil:
    section.add "Marker", valid_609807
  var valid_609808 = query.getOrDefault("MaxItems")
  valid_609808 = validateParameter(valid_609808, JInt, required = false, default = nil)
  if valid_609808 != nil:
    section.add "MaxItems", valid_609808
  var valid_609809 = query.getOrDefault("PathPrefix")
  valid_609809 = validateParameter(valid_609809, JString, required = false,
                                 default = nil)
  if valid_609809 != nil:
    section.add "PathPrefix", valid_609809
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609810 = query.getOrDefault("Action")
  valid_609810 = validateParameter(valid_609810, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_609810 != nil:
    section.add "Action", valid_609810
  var valid_609811 = query.getOrDefault("Version")
  valid_609811 = validateParameter(valid_609811, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609811 != nil:
    section.add "Version", valid_609811
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609812 = header.getOrDefault("X-Amz-Signature")
  valid_609812 = validateParameter(valid_609812, JString, required = false,
                                 default = nil)
  if valid_609812 != nil:
    section.add "X-Amz-Signature", valid_609812
  var valid_609813 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609813 = validateParameter(valid_609813, JString, required = false,
                                 default = nil)
  if valid_609813 != nil:
    section.add "X-Amz-Content-Sha256", valid_609813
  var valid_609814 = header.getOrDefault("X-Amz-Date")
  valid_609814 = validateParameter(valid_609814, JString, required = false,
                                 default = nil)
  if valid_609814 != nil:
    section.add "X-Amz-Date", valid_609814
  var valid_609815 = header.getOrDefault("X-Amz-Credential")
  valid_609815 = validateParameter(valid_609815, JString, required = false,
                                 default = nil)
  if valid_609815 != nil:
    section.add "X-Amz-Credential", valid_609815
  var valid_609816 = header.getOrDefault("X-Amz-Security-Token")
  valid_609816 = validateParameter(valid_609816, JString, required = false,
                                 default = nil)
  if valid_609816 != nil:
    section.add "X-Amz-Security-Token", valid_609816
  var valid_609817 = header.getOrDefault("X-Amz-Algorithm")
  valid_609817 = validateParameter(valid_609817, JString, required = false,
                                 default = nil)
  if valid_609817 != nil:
    section.add "X-Amz-Algorithm", valid_609817
  var valid_609818 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609818 = validateParameter(valid_609818, JString, required = false,
                                 default = nil)
  if valid_609818 != nil:
    section.add "X-Amz-SignedHeaders", valid_609818
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609819: Call_GetListUsers_609804; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609819.validator(path, query, header, formData, body)
  let scheme = call_609819.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609819.url(scheme.get, call_609819.host, call_609819.base,
                         call_609819.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609819, url, valid)

proc call*(call_609820: Call_GetListUsers_609804; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = ""; Action: string = "ListUsers";
          Version: string = "2010-05-08"): Recallable =
  ## getListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609821 = newJObject()
  add(query_609821, "Marker", newJString(Marker))
  add(query_609821, "MaxItems", newJInt(MaxItems))
  add(query_609821, "PathPrefix", newJString(PathPrefix))
  add(query_609821, "Action", newJString(Action))
  add(query_609821, "Version", newJString(Version))
  result = call_609820.call(nil, query_609821, nil, nil, nil)

var getListUsers* = Call_GetListUsers_609804(name: "getListUsers",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_GetListUsers_609805, base: "/",
    url: url_GetListUsers_609806, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVirtualMFADevices_609859 = ref object of OpenApiRestCall_605589
proc url_PostListVirtualMFADevices_609861(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListVirtualMFADevices_609860(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609862 = query.getOrDefault("Action")
  valid_609862 = validateParameter(valid_609862, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_609862 != nil:
    section.add "Action", valid_609862
  var valid_609863 = query.getOrDefault("Version")
  valid_609863 = validateParameter(valid_609863, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609863 != nil:
    section.add "Version", valid_609863
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609864 = header.getOrDefault("X-Amz-Signature")
  valid_609864 = validateParameter(valid_609864, JString, required = false,
                                 default = nil)
  if valid_609864 != nil:
    section.add "X-Amz-Signature", valid_609864
  var valid_609865 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609865 = validateParameter(valid_609865, JString, required = false,
                                 default = nil)
  if valid_609865 != nil:
    section.add "X-Amz-Content-Sha256", valid_609865
  var valid_609866 = header.getOrDefault("X-Amz-Date")
  valid_609866 = validateParameter(valid_609866, JString, required = false,
                                 default = nil)
  if valid_609866 != nil:
    section.add "X-Amz-Date", valid_609866
  var valid_609867 = header.getOrDefault("X-Amz-Credential")
  valid_609867 = validateParameter(valid_609867, JString, required = false,
                                 default = nil)
  if valid_609867 != nil:
    section.add "X-Amz-Credential", valid_609867
  var valid_609868 = header.getOrDefault("X-Amz-Security-Token")
  valid_609868 = validateParameter(valid_609868, JString, required = false,
                                 default = nil)
  if valid_609868 != nil:
    section.add "X-Amz-Security-Token", valid_609868
  var valid_609869 = header.getOrDefault("X-Amz-Algorithm")
  valid_609869 = validateParameter(valid_609869, JString, required = false,
                                 default = nil)
  if valid_609869 != nil:
    section.add "X-Amz-Algorithm", valid_609869
  var valid_609870 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609870 = validateParameter(valid_609870, JString, required = false,
                                 default = nil)
  if valid_609870 != nil:
    section.add "X-Amz-SignedHeaders", valid_609870
  result.add "header", section
  ## parameters in `formData` object:
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_609871 = formData.getOrDefault("AssignmentStatus")
  valid_609871 = validateParameter(valid_609871, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_609871 != nil:
    section.add "AssignmentStatus", valid_609871
  var valid_609872 = formData.getOrDefault("Marker")
  valid_609872 = validateParameter(valid_609872, JString, required = false,
                                 default = nil)
  if valid_609872 != nil:
    section.add "Marker", valid_609872
  var valid_609873 = formData.getOrDefault("MaxItems")
  valid_609873 = validateParameter(valid_609873, JInt, required = false, default = nil)
  if valid_609873 != nil:
    section.add "MaxItems", valid_609873
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609874: Call_PostListVirtualMFADevices_609859; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609874.validator(path, query, header, formData, body)
  let scheme = call_609874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609874.url(scheme.get, call_609874.host, call_609874.base,
                         call_609874.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609874, url, valid)

proc call*(call_609875: Call_PostListVirtualMFADevices_609859;
          AssignmentStatus: string = "Assigned"; Marker: string = "";
          Action: string = "ListVirtualMFADevices"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_609876 = newJObject()
  var formData_609877 = newJObject()
  add(formData_609877, "AssignmentStatus", newJString(AssignmentStatus))
  add(formData_609877, "Marker", newJString(Marker))
  add(query_609876, "Action", newJString(Action))
  add(formData_609877, "MaxItems", newJInt(MaxItems))
  add(query_609876, "Version", newJString(Version))
  result = call_609875.call(nil, query_609876, nil, formData_609877, nil)

var postListVirtualMFADevices* = Call_PostListVirtualMFADevices_609859(
    name: "postListVirtualMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_PostListVirtualMFADevices_609860, base: "/",
    url: url_PostListVirtualMFADevices_609861,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVirtualMFADevices_609841 = ref object of OpenApiRestCall_605589
proc url_GetListVirtualMFADevices_609843(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListVirtualMFADevices_609842(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609844 = query.getOrDefault("Marker")
  valid_609844 = validateParameter(valid_609844, JString, required = false,
                                 default = nil)
  if valid_609844 != nil:
    section.add "Marker", valid_609844
  var valid_609845 = query.getOrDefault("MaxItems")
  valid_609845 = validateParameter(valid_609845, JInt, required = false, default = nil)
  if valid_609845 != nil:
    section.add "MaxItems", valid_609845
  var valid_609846 = query.getOrDefault("AssignmentStatus")
  valid_609846 = validateParameter(valid_609846, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_609846 != nil:
    section.add "AssignmentStatus", valid_609846
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609847 = query.getOrDefault("Action")
  valid_609847 = validateParameter(valid_609847, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_609847 != nil:
    section.add "Action", valid_609847
  var valid_609848 = query.getOrDefault("Version")
  valid_609848 = validateParameter(valid_609848, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609848 != nil:
    section.add "Version", valid_609848
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609849 = header.getOrDefault("X-Amz-Signature")
  valid_609849 = validateParameter(valid_609849, JString, required = false,
                                 default = nil)
  if valid_609849 != nil:
    section.add "X-Amz-Signature", valid_609849
  var valid_609850 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609850 = validateParameter(valid_609850, JString, required = false,
                                 default = nil)
  if valid_609850 != nil:
    section.add "X-Amz-Content-Sha256", valid_609850
  var valid_609851 = header.getOrDefault("X-Amz-Date")
  valid_609851 = validateParameter(valid_609851, JString, required = false,
                                 default = nil)
  if valid_609851 != nil:
    section.add "X-Amz-Date", valid_609851
  var valid_609852 = header.getOrDefault("X-Amz-Credential")
  valid_609852 = validateParameter(valid_609852, JString, required = false,
                                 default = nil)
  if valid_609852 != nil:
    section.add "X-Amz-Credential", valid_609852
  var valid_609853 = header.getOrDefault("X-Amz-Security-Token")
  valid_609853 = validateParameter(valid_609853, JString, required = false,
                                 default = nil)
  if valid_609853 != nil:
    section.add "X-Amz-Security-Token", valid_609853
  var valid_609854 = header.getOrDefault("X-Amz-Algorithm")
  valid_609854 = validateParameter(valid_609854, JString, required = false,
                                 default = nil)
  if valid_609854 != nil:
    section.add "X-Amz-Algorithm", valid_609854
  var valid_609855 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609855 = validateParameter(valid_609855, JString, required = false,
                                 default = nil)
  if valid_609855 != nil:
    section.add "X-Amz-SignedHeaders", valid_609855
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609856: Call_GetListVirtualMFADevices_609841; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_609856.validator(path, query, header, formData, body)
  let scheme = call_609856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609856.url(scheme.get, call_609856.host, call_609856.base,
                         call_609856.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609856, url, valid)

proc call*(call_609857: Call_GetListVirtualMFADevices_609841; Marker: string = "";
          MaxItems: int = 0; AssignmentStatus: string = "Assigned";
          Action: string = "ListVirtualMFADevices"; Version: string = "2010-05-08"): Recallable =
  ## getListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609858 = newJObject()
  add(query_609858, "Marker", newJString(Marker))
  add(query_609858, "MaxItems", newJInt(MaxItems))
  add(query_609858, "AssignmentStatus", newJString(AssignmentStatus))
  add(query_609858, "Action", newJString(Action))
  add(query_609858, "Version", newJString(Version))
  result = call_609857.call(nil, query_609858, nil, nil, nil)

var getListVirtualMFADevices* = Call_GetListVirtualMFADevices_609841(
    name: "getListVirtualMFADevices", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_GetListVirtualMFADevices_609842, base: "/",
    url: url_GetListVirtualMFADevices_609843, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutGroupPolicy_609896 = ref object of OpenApiRestCall_605589
proc url_PostPutGroupPolicy_609898(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutGroupPolicy_609897(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609899 = query.getOrDefault("Action")
  valid_609899 = validateParameter(valid_609899, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_609899 != nil:
    section.add "Action", valid_609899
  var valid_609900 = query.getOrDefault("Version")
  valid_609900 = validateParameter(valid_609900, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609900 != nil:
    section.add "Version", valid_609900
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609901 = header.getOrDefault("X-Amz-Signature")
  valid_609901 = validateParameter(valid_609901, JString, required = false,
                                 default = nil)
  if valid_609901 != nil:
    section.add "X-Amz-Signature", valid_609901
  var valid_609902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609902 = validateParameter(valid_609902, JString, required = false,
                                 default = nil)
  if valid_609902 != nil:
    section.add "X-Amz-Content-Sha256", valid_609902
  var valid_609903 = header.getOrDefault("X-Amz-Date")
  valid_609903 = validateParameter(valid_609903, JString, required = false,
                                 default = nil)
  if valid_609903 != nil:
    section.add "X-Amz-Date", valid_609903
  var valid_609904 = header.getOrDefault("X-Amz-Credential")
  valid_609904 = validateParameter(valid_609904, JString, required = false,
                                 default = nil)
  if valid_609904 != nil:
    section.add "X-Amz-Credential", valid_609904
  var valid_609905 = header.getOrDefault("X-Amz-Security-Token")
  valid_609905 = validateParameter(valid_609905, JString, required = false,
                                 default = nil)
  if valid_609905 != nil:
    section.add "X-Amz-Security-Token", valid_609905
  var valid_609906 = header.getOrDefault("X-Amz-Algorithm")
  valid_609906 = validateParameter(valid_609906, JString, required = false,
                                 default = nil)
  if valid_609906 != nil:
    section.add "X-Amz-Algorithm", valid_609906
  var valid_609907 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609907 = validateParameter(valid_609907, JString, required = false,
                                 default = nil)
  if valid_609907 != nil:
    section.add "X-Amz-SignedHeaders", valid_609907
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_609908 = formData.getOrDefault("PolicyDocument")
  valid_609908 = validateParameter(valid_609908, JString, required = true,
                                 default = nil)
  if valid_609908 != nil:
    section.add "PolicyDocument", valid_609908
  var valid_609909 = formData.getOrDefault("GroupName")
  valid_609909 = validateParameter(valid_609909, JString, required = true,
                                 default = nil)
  if valid_609909 != nil:
    section.add "GroupName", valid_609909
  var valid_609910 = formData.getOrDefault("PolicyName")
  valid_609910 = validateParameter(valid_609910, JString, required = true,
                                 default = nil)
  if valid_609910 != nil:
    section.add "PolicyName", valid_609910
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609911: Call_PostPutGroupPolicy_609896; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_609911.validator(path, query, header, formData, body)
  let scheme = call_609911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609911.url(scheme.get, call_609911.host, call_609911.base,
                         call_609911.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609911, url, valid)

proc call*(call_609912: Call_PostPutGroupPolicy_609896; PolicyDocument: string;
          GroupName: string; PolicyName: string; Action: string = "PutGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_609913 = newJObject()
  var formData_609914 = newJObject()
  add(formData_609914, "PolicyDocument", newJString(PolicyDocument))
  add(formData_609914, "GroupName", newJString(GroupName))
  add(query_609913, "Action", newJString(Action))
  add(query_609913, "Version", newJString(Version))
  add(formData_609914, "PolicyName", newJString(PolicyName))
  result = call_609912.call(nil, query_609913, nil, formData_609914, nil)

var postPutGroupPolicy* = Call_PostPutGroupPolicy_609896(
    name: "postPutGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutGroupPolicy",
    validator: validate_PostPutGroupPolicy_609897, base: "/",
    url: url_PostPutGroupPolicy_609898, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutGroupPolicy_609878 = ref object of OpenApiRestCall_605589
proc url_GetPutGroupPolicy_609880(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutGroupPolicy_609879(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_609881 = query.getOrDefault("GroupName")
  valid_609881 = validateParameter(valid_609881, JString, required = true,
                                 default = nil)
  if valid_609881 != nil:
    section.add "GroupName", valid_609881
  var valid_609882 = query.getOrDefault("PolicyName")
  valid_609882 = validateParameter(valid_609882, JString, required = true,
                                 default = nil)
  if valid_609882 != nil:
    section.add "PolicyName", valid_609882
  var valid_609883 = query.getOrDefault("PolicyDocument")
  valid_609883 = validateParameter(valid_609883, JString, required = true,
                                 default = nil)
  if valid_609883 != nil:
    section.add "PolicyDocument", valid_609883
  var valid_609884 = query.getOrDefault("Action")
  valid_609884 = validateParameter(valid_609884, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_609884 != nil:
    section.add "Action", valid_609884
  var valid_609885 = query.getOrDefault("Version")
  valid_609885 = validateParameter(valid_609885, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609885 != nil:
    section.add "Version", valid_609885
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609886 = header.getOrDefault("X-Amz-Signature")
  valid_609886 = validateParameter(valid_609886, JString, required = false,
                                 default = nil)
  if valid_609886 != nil:
    section.add "X-Amz-Signature", valid_609886
  var valid_609887 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609887 = validateParameter(valid_609887, JString, required = false,
                                 default = nil)
  if valid_609887 != nil:
    section.add "X-Amz-Content-Sha256", valid_609887
  var valid_609888 = header.getOrDefault("X-Amz-Date")
  valid_609888 = validateParameter(valid_609888, JString, required = false,
                                 default = nil)
  if valid_609888 != nil:
    section.add "X-Amz-Date", valid_609888
  var valid_609889 = header.getOrDefault("X-Amz-Credential")
  valid_609889 = validateParameter(valid_609889, JString, required = false,
                                 default = nil)
  if valid_609889 != nil:
    section.add "X-Amz-Credential", valid_609889
  var valid_609890 = header.getOrDefault("X-Amz-Security-Token")
  valid_609890 = validateParameter(valid_609890, JString, required = false,
                                 default = nil)
  if valid_609890 != nil:
    section.add "X-Amz-Security-Token", valid_609890
  var valid_609891 = header.getOrDefault("X-Amz-Algorithm")
  valid_609891 = validateParameter(valid_609891, JString, required = false,
                                 default = nil)
  if valid_609891 != nil:
    section.add "X-Amz-Algorithm", valid_609891
  var valid_609892 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609892 = validateParameter(valid_609892, JString, required = false,
                                 default = nil)
  if valid_609892 != nil:
    section.add "X-Amz-SignedHeaders", valid_609892
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609893: Call_GetPutGroupPolicy_609878; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_609893.validator(path, query, header, formData, body)
  let scheme = call_609893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609893.url(scheme.get, call_609893.host, call_609893.base,
                         call_609893.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609893, url, valid)

proc call*(call_609894: Call_GetPutGroupPolicy_609878; GroupName: string;
          PolicyName: string; PolicyDocument: string;
          Action: string = "PutGroupPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609895 = newJObject()
  add(query_609895, "GroupName", newJString(GroupName))
  add(query_609895, "PolicyName", newJString(PolicyName))
  add(query_609895, "PolicyDocument", newJString(PolicyDocument))
  add(query_609895, "Action", newJString(Action))
  add(query_609895, "Version", newJString(Version))
  result = call_609894.call(nil, query_609895, nil, nil, nil)

var getPutGroupPolicy* = Call_GetPutGroupPolicy_609878(name: "getPutGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutGroupPolicy", validator: validate_GetPutGroupPolicy_609879,
    base: "/", url: url_GetPutGroupPolicy_609880,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePermissionsBoundary_609932 = ref object of OpenApiRestCall_605589
proc url_PostPutRolePermissionsBoundary_609934(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutRolePermissionsBoundary_609933(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609935 = query.getOrDefault("Action")
  valid_609935 = validateParameter(valid_609935, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_609935 != nil:
    section.add "Action", valid_609935
  var valid_609936 = query.getOrDefault("Version")
  valid_609936 = validateParameter(valid_609936, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609936 != nil:
    section.add "Version", valid_609936
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609937 = header.getOrDefault("X-Amz-Signature")
  valid_609937 = validateParameter(valid_609937, JString, required = false,
                                 default = nil)
  if valid_609937 != nil:
    section.add "X-Amz-Signature", valid_609937
  var valid_609938 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609938 = validateParameter(valid_609938, JString, required = false,
                                 default = nil)
  if valid_609938 != nil:
    section.add "X-Amz-Content-Sha256", valid_609938
  var valid_609939 = header.getOrDefault("X-Amz-Date")
  valid_609939 = validateParameter(valid_609939, JString, required = false,
                                 default = nil)
  if valid_609939 != nil:
    section.add "X-Amz-Date", valid_609939
  var valid_609940 = header.getOrDefault("X-Amz-Credential")
  valid_609940 = validateParameter(valid_609940, JString, required = false,
                                 default = nil)
  if valid_609940 != nil:
    section.add "X-Amz-Credential", valid_609940
  var valid_609941 = header.getOrDefault("X-Amz-Security-Token")
  valid_609941 = validateParameter(valid_609941, JString, required = false,
                                 default = nil)
  if valid_609941 != nil:
    section.add "X-Amz-Security-Token", valid_609941
  var valid_609942 = header.getOrDefault("X-Amz-Algorithm")
  valid_609942 = validateParameter(valid_609942, JString, required = false,
                                 default = nil)
  if valid_609942 != nil:
    section.add "X-Amz-Algorithm", valid_609942
  var valid_609943 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609943 = validateParameter(valid_609943, JString, required = false,
                                 default = nil)
  if valid_609943 != nil:
    section.add "X-Amz-SignedHeaders", valid_609943
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_609944 = formData.getOrDefault("RoleName")
  valid_609944 = validateParameter(valid_609944, JString, required = true,
                                 default = nil)
  if valid_609944 != nil:
    section.add "RoleName", valid_609944
  var valid_609945 = formData.getOrDefault("PermissionsBoundary")
  valid_609945 = validateParameter(valid_609945, JString, required = true,
                                 default = nil)
  if valid_609945 != nil:
    section.add "PermissionsBoundary", valid_609945
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609946: Call_PostPutRolePermissionsBoundary_609932; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_609946.validator(path, query, header, formData, body)
  let scheme = call_609946.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609946.url(scheme.get, call_609946.host, call_609946.base,
                         call_609946.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609946, url, valid)

proc call*(call_609947: Call_PostPutRolePermissionsBoundary_609932;
          RoleName: string; PermissionsBoundary: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_609948 = newJObject()
  var formData_609949 = newJObject()
  add(formData_609949, "RoleName", newJString(RoleName))
  add(query_609948, "Action", newJString(Action))
  add(formData_609949, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_609948, "Version", newJString(Version))
  result = call_609947.call(nil, query_609948, nil, formData_609949, nil)

var postPutRolePermissionsBoundary* = Call_PostPutRolePermissionsBoundary_609932(
    name: "postPutRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_PostPutRolePermissionsBoundary_609933, base: "/",
    url: url_PostPutRolePermissionsBoundary_609934,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePermissionsBoundary_609915 = ref object of OpenApiRestCall_605589
proc url_GetPutRolePermissionsBoundary_609917(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutRolePermissionsBoundary_609916(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `PermissionsBoundary` field"
  var valid_609918 = query.getOrDefault("PermissionsBoundary")
  valid_609918 = validateParameter(valid_609918, JString, required = true,
                                 default = nil)
  if valid_609918 != nil:
    section.add "PermissionsBoundary", valid_609918
  var valid_609919 = query.getOrDefault("RoleName")
  valid_609919 = validateParameter(valid_609919, JString, required = true,
                                 default = nil)
  if valid_609919 != nil:
    section.add "RoleName", valid_609919
  var valid_609920 = query.getOrDefault("Action")
  valid_609920 = validateParameter(valid_609920, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_609920 != nil:
    section.add "Action", valid_609920
  var valid_609921 = query.getOrDefault("Version")
  valid_609921 = validateParameter(valid_609921, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609921 != nil:
    section.add "Version", valid_609921
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609922 = header.getOrDefault("X-Amz-Signature")
  valid_609922 = validateParameter(valid_609922, JString, required = false,
                                 default = nil)
  if valid_609922 != nil:
    section.add "X-Amz-Signature", valid_609922
  var valid_609923 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609923 = validateParameter(valid_609923, JString, required = false,
                                 default = nil)
  if valid_609923 != nil:
    section.add "X-Amz-Content-Sha256", valid_609923
  var valid_609924 = header.getOrDefault("X-Amz-Date")
  valid_609924 = validateParameter(valid_609924, JString, required = false,
                                 default = nil)
  if valid_609924 != nil:
    section.add "X-Amz-Date", valid_609924
  var valid_609925 = header.getOrDefault("X-Amz-Credential")
  valid_609925 = validateParameter(valid_609925, JString, required = false,
                                 default = nil)
  if valid_609925 != nil:
    section.add "X-Amz-Credential", valid_609925
  var valid_609926 = header.getOrDefault("X-Amz-Security-Token")
  valid_609926 = validateParameter(valid_609926, JString, required = false,
                                 default = nil)
  if valid_609926 != nil:
    section.add "X-Amz-Security-Token", valid_609926
  var valid_609927 = header.getOrDefault("X-Amz-Algorithm")
  valid_609927 = validateParameter(valid_609927, JString, required = false,
                                 default = nil)
  if valid_609927 != nil:
    section.add "X-Amz-Algorithm", valid_609927
  var valid_609928 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609928 = validateParameter(valid_609928, JString, required = false,
                                 default = nil)
  if valid_609928 != nil:
    section.add "X-Amz-SignedHeaders", valid_609928
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609929: Call_GetPutRolePermissionsBoundary_609915; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_609929.validator(path, query, header, formData, body)
  let scheme = call_609929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609929.url(scheme.get, call_609929.host, call_609929.base,
                         call_609929.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609929, url, valid)

proc call*(call_609930: Call_GetPutRolePermissionsBoundary_609915;
          PermissionsBoundary: string; RoleName: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609931 = newJObject()
  add(query_609931, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_609931, "RoleName", newJString(RoleName))
  add(query_609931, "Action", newJString(Action))
  add(query_609931, "Version", newJString(Version))
  result = call_609930.call(nil, query_609931, nil, nil, nil)

var getPutRolePermissionsBoundary* = Call_GetPutRolePermissionsBoundary_609915(
    name: "getPutRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_GetPutRolePermissionsBoundary_609916, base: "/",
    url: url_GetPutRolePermissionsBoundary_609917,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePolicy_609968 = ref object of OpenApiRestCall_605589
proc url_PostPutRolePolicy_609970(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutRolePolicy_609969(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609971 = query.getOrDefault("Action")
  valid_609971 = validateParameter(valid_609971, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_609971 != nil:
    section.add "Action", valid_609971
  var valid_609972 = query.getOrDefault("Version")
  valid_609972 = validateParameter(valid_609972, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609972 != nil:
    section.add "Version", valid_609972
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609973 = header.getOrDefault("X-Amz-Signature")
  valid_609973 = validateParameter(valid_609973, JString, required = false,
                                 default = nil)
  if valid_609973 != nil:
    section.add "X-Amz-Signature", valid_609973
  var valid_609974 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609974 = validateParameter(valid_609974, JString, required = false,
                                 default = nil)
  if valid_609974 != nil:
    section.add "X-Amz-Content-Sha256", valid_609974
  var valid_609975 = header.getOrDefault("X-Amz-Date")
  valid_609975 = validateParameter(valid_609975, JString, required = false,
                                 default = nil)
  if valid_609975 != nil:
    section.add "X-Amz-Date", valid_609975
  var valid_609976 = header.getOrDefault("X-Amz-Credential")
  valid_609976 = validateParameter(valid_609976, JString, required = false,
                                 default = nil)
  if valid_609976 != nil:
    section.add "X-Amz-Credential", valid_609976
  var valid_609977 = header.getOrDefault("X-Amz-Security-Token")
  valid_609977 = validateParameter(valid_609977, JString, required = false,
                                 default = nil)
  if valid_609977 != nil:
    section.add "X-Amz-Security-Token", valid_609977
  var valid_609978 = header.getOrDefault("X-Amz-Algorithm")
  valid_609978 = validateParameter(valid_609978, JString, required = false,
                                 default = nil)
  if valid_609978 != nil:
    section.add "X-Amz-Algorithm", valid_609978
  var valid_609979 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609979 = validateParameter(valid_609979, JString, required = false,
                                 default = nil)
  if valid_609979 != nil:
    section.add "X-Amz-SignedHeaders", valid_609979
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_609980 = formData.getOrDefault("PolicyDocument")
  valid_609980 = validateParameter(valid_609980, JString, required = true,
                                 default = nil)
  if valid_609980 != nil:
    section.add "PolicyDocument", valid_609980
  var valid_609981 = formData.getOrDefault("RoleName")
  valid_609981 = validateParameter(valid_609981, JString, required = true,
                                 default = nil)
  if valid_609981 != nil:
    section.add "RoleName", valid_609981
  var valid_609982 = formData.getOrDefault("PolicyName")
  valid_609982 = validateParameter(valid_609982, JString, required = true,
                                 default = nil)
  if valid_609982 != nil:
    section.add "PolicyName", valid_609982
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609983: Call_PostPutRolePolicy_609968; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_609983.validator(path, query, header, formData, body)
  let scheme = call_609983.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609983.url(scheme.get, call_609983.host, call_609983.base,
                         call_609983.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609983, url, valid)

proc call*(call_609984: Call_PostPutRolePolicy_609968; PolicyDocument: string;
          RoleName: string; PolicyName: string; Action: string = "PutRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_609985 = newJObject()
  var formData_609986 = newJObject()
  add(formData_609986, "PolicyDocument", newJString(PolicyDocument))
  add(formData_609986, "RoleName", newJString(RoleName))
  add(query_609985, "Action", newJString(Action))
  add(query_609985, "Version", newJString(Version))
  add(formData_609986, "PolicyName", newJString(PolicyName))
  result = call_609984.call(nil, query_609985, nil, formData_609986, nil)

var postPutRolePolicy* = Call_PostPutRolePolicy_609968(name: "postPutRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_PostPutRolePolicy_609969,
    base: "/", url: url_PostPutRolePolicy_609970,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePolicy_609950 = ref object of OpenApiRestCall_605589
proc url_GetPutRolePolicy_609952(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutRolePolicy_609951(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_609953 = query.getOrDefault("PolicyName")
  valid_609953 = validateParameter(valid_609953, JString, required = true,
                                 default = nil)
  if valid_609953 != nil:
    section.add "PolicyName", valid_609953
  var valid_609954 = query.getOrDefault("RoleName")
  valid_609954 = validateParameter(valid_609954, JString, required = true,
                                 default = nil)
  if valid_609954 != nil:
    section.add "RoleName", valid_609954
  var valid_609955 = query.getOrDefault("PolicyDocument")
  valid_609955 = validateParameter(valid_609955, JString, required = true,
                                 default = nil)
  if valid_609955 != nil:
    section.add "PolicyDocument", valid_609955
  var valid_609956 = query.getOrDefault("Action")
  valid_609956 = validateParameter(valid_609956, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_609956 != nil:
    section.add "Action", valid_609956
  var valid_609957 = query.getOrDefault("Version")
  valid_609957 = validateParameter(valid_609957, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609957 != nil:
    section.add "Version", valid_609957
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609958 = header.getOrDefault("X-Amz-Signature")
  valid_609958 = validateParameter(valid_609958, JString, required = false,
                                 default = nil)
  if valid_609958 != nil:
    section.add "X-Amz-Signature", valid_609958
  var valid_609959 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609959 = validateParameter(valid_609959, JString, required = false,
                                 default = nil)
  if valid_609959 != nil:
    section.add "X-Amz-Content-Sha256", valid_609959
  var valid_609960 = header.getOrDefault("X-Amz-Date")
  valid_609960 = validateParameter(valid_609960, JString, required = false,
                                 default = nil)
  if valid_609960 != nil:
    section.add "X-Amz-Date", valid_609960
  var valid_609961 = header.getOrDefault("X-Amz-Credential")
  valid_609961 = validateParameter(valid_609961, JString, required = false,
                                 default = nil)
  if valid_609961 != nil:
    section.add "X-Amz-Credential", valid_609961
  var valid_609962 = header.getOrDefault("X-Amz-Security-Token")
  valid_609962 = validateParameter(valid_609962, JString, required = false,
                                 default = nil)
  if valid_609962 != nil:
    section.add "X-Amz-Security-Token", valid_609962
  var valid_609963 = header.getOrDefault("X-Amz-Algorithm")
  valid_609963 = validateParameter(valid_609963, JString, required = false,
                                 default = nil)
  if valid_609963 != nil:
    section.add "X-Amz-Algorithm", valid_609963
  var valid_609964 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609964 = validateParameter(valid_609964, JString, required = false,
                                 default = nil)
  if valid_609964 != nil:
    section.add "X-Amz-SignedHeaders", valid_609964
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609965: Call_GetPutRolePolicy_609950; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_609965.validator(path, query, header, formData, body)
  let scheme = call_609965.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609965.url(scheme.get, call_609965.host, call_609965.base,
                         call_609965.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609965, url, valid)

proc call*(call_609966: Call_GetPutRolePolicy_609950; PolicyName: string;
          RoleName: string; PolicyDocument: string;
          Action: string = "PutRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609967 = newJObject()
  add(query_609967, "PolicyName", newJString(PolicyName))
  add(query_609967, "RoleName", newJString(RoleName))
  add(query_609967, "PolicyDocument", newJString(PolicyDocument))
  add(query_609967, "Action", newJString(Action))
  add(query_609967, "Version", newJString(Version))
  result = call_609966.call(nil, query_609967, nil, nil, nil)

var getPutRolePolicy* = Call_GetPutRolePolicy_609950(name: "getPutRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_GetPutRolePolicy_609951,
    base: "/", url: url_GetPutRolePolicy_609952,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPermissionsBoundary_610004 = ref object of OpenApiRestCall_605589
proc url_PostPutUserPermissionsBoundary_610006(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutUserPermissionsBoundary_610005(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610007 = query.getOrDefault("Action")
  valid_610007 = validateParameter(valid_610007, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_610007 != nil:
    section.add "Action", valid_610007
  var valid_610008 = query.getOrDefault("Version")
  valid_610008 = validateParameter(valid_610008, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610008 != nil:
    section.add "Version", valid_610008
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610009 = header.getOrDefault("X-Amz-Signature")
  valid_610009 = validateParameter(valid_610009, JString, required = false,
                                 default = nil)
  if valid_610009 != nil:
    section.add "X-Amz-Signature", valid_610009
  var valid_610010 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610010 = validateParameter(valid_610010, JString, required = false,
                                 default = nil)
  if valid_610010 != nil:
    section.add "X-Amz-Content-Sha256", valid_610010
  var valid_610011 = header.getOrDefault("X-Amz-Date")
  valid_610011 = validateParameter(valid_610011, JString, required = false,
                                 default = nil)
  if valid_610011 != nil:
    section.add "X-Amz-Date", valid_610011
  var valid_610012 = header.getOrDefault("X-Amz-Credential")
  valid_610012 = validateParameter(valid_610012, JString, required = false,
                                 default = nil)
  if valid_610012 != nil:
    section.add "X-Amz-Credential", valid_610012
  var valid_610013 = header.getOrDefault("X-Amz-Security-Token")
  valid_610013 = validateParameter(valid_610013, JString, required = false,
                                 default = nil)
  if valid_610013 != nil:
    section.add "X-Amz-Security-Token", valid_610013
  var valid_610014 = header.getOrDefault("X-Amz-Algorithm")
  valid_610014 = validateParameter(valid_610014, JString, required = false,
                                 default = nil)
  if valid_610014 != nil:
    section.add "X-Amz-Algorithm", valid_610014
  var valid_610015 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610015 = validateParameter(valid_610015, JString, required = false,
                                 default = nil)
  if valid_610015 != nil:
    section.add "X-Amz-SignedHeaders", valid_610015
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_610016 = formData.getOrDefault("UserName")
  valid_610016 = validateParameter(valid_610016, JString, required = true,
                                 default = nil)
  if valid_610016 != nil:
    section.add "UserName", valid_610016
  var valid_610017 = formData.getOrDefault("PermissionsBoundary")
  valid_610017 = validateParameter(valid_610017, JString, required = true,
                                 default = nil)
  if valid_610017 != nil:
    section.add "PermissionsBoundary", valid_610017
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610018: Call_PostPutUserPermissionsBoundary_610004; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_610018.validator(path, query, header, formData, body)
  let scheme = call_610018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610018.url(scheme.get, call_610018.host, call_610018.base,
                         call_610018.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610018, url, valid)

proc call*(call_610019: Call_PostPutUserPermissionsBoundary_610004;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_610020 = newJObject()
  var formData_610021 = newJObject()
  add(formData_610021, "UserName", newJString(UserName))
  add(query_610020, "Action", newJString(Action))
  add(formData_610021, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_610020, "Version", newJString(Version))
  result = call_610019.call(nil, query_610020, nil, formData_610021, nil)

var postPutUserPermissionsBoundary* = Call_PostPutUserPermissionsBoundary_610004(
    name: "postPutUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_PostPutUserPermissionsBoundary_610005, base: "/",
    url: url_PostPutUserPermissionsBoundary_610006,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPermissionsBoundary_609987 = ref object of OpenApiRestCall_605589
proc url_GetPutUserPermissionsBoundary_609989(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutUserPermissionsBoundary_609988(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_609990 = query.getOrDefault("UserName")
  valid_609990 = validateParameter(valid_609990, JString, required = true,
                                 default = nil)
  if valid_609990 != nil:
    section.add "UserName", valid_609990
  var valid_609991 = query.getOrDefault("PermissionsBoundary")
  valid_609991 = validateParameter(valid_609991, JString, required = true,
                                 default = nil)
  if valid_609991 != nil:
    section.add "PermissionsBoundary", valid_609991
  var valid_609992 = query.getOrDefault("Action")
  valid_609992 = validateParameter(valid_609992, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_609992 != nil:
    section.add "Action", valid_609992
  var valid_609993 = query.getOrDefault("Version")
  valid_609993 = validateParameter(valid_609993, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_609993 != nil:
    section.add "Version", valid_609993
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609994 = header.getOrDefault("X-Amz-Signature")
  valid_609994 = validateParameter(valid_609994, JString, required = false,
                                 default = nil)
  if valid_609994 != nil:
    section.add "X-Amz-Signature", valid_609994
  var valid_609995 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609995 = validateParameter(valid_609995, JString, required = false,
                                 default = nil)
  if valid_609995 != nil:
    section.add "X-Amz-Content-Sha256", valid_609995
  var valid_609996 = header.getOrDefault("X-Amz-Date")
  valid_609996 = validateParameter(valid_609996, JString, required = false,
                                 default = nil)
  if valid_609996 != nil:
    section.add "X-Amz-Date", valid_609996
  var valid_609997 = header.getOrDefault("X-Amz-Credential")
  valid_609997 = validateParameter(valid_609997, JString, required = false,
                                 default = nil)
  if valid_609997 != nil:
    section.add "X-Amz-Credential", valid_609997
  var valid_609998 = header.getOrDefault("X-Amz-Security-Token")
  valid_609998 = validateParameter(valid_609998, JString, required = false,
                                 default = nil)
  if valid_609998 != nil:
    section.add "X-Amz-Security-Token", valid_609998
  var valid_609999 = header.getOrDefault("X-Amz-Algorithm")
  valid_609999 = validateParameter(valid_609999, JString, required = false,
                                 default = nil)
  if valid_609999 != nil:
    section.add "X-Amz-Algorithm", valid_609999
  var valid_610000 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610000 = validateParameter(valid_610000, JString, required = false,
                                 default = nil)
  if valid_610000 != nil:
    section.add "X-Amz-SignedHeaders", valid_610000
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610001: Call_GetPutUserPermissionsBoundary_609987; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_610001.validator(path, query, header, formData, body)
  let scheme = call_610001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610001.url(scheme.get, call_610001.host, call_610001.base,
                         call_610001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610001, url, valid)

proc call*(call_610002: Call_GetPutUserPermissionsBoundary_609987;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610003 = newJObject()
  add(query_610003, "UserName", newJString(UserName))
  add(query_610003, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_610003, "Action", newJString(Action))
  add(query_610003, "Version", newJString(Version))
  result = call_610002.call(nil, query_610003, nil, nil, nil)

var getPutUserPermissionsBoundary* = Call_GetPutUserPermissionsBoundary_609987(
    name: "getPutUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_GetPutUserPermissionsBoundary_609988, base: "/",
    url: url_GetPutUserPermissionsBoundary_609989,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPolicy_610040 = ref object of OpenApiRestCall_605589
proc url_PostPutUserPolicy_610042(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutUserPolicy_610041(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610043 = query.getOrDefault("Action")
  valid_610043 = validateParameter(valid_610043, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_610043 != nil:
    section.add "Action", valid_610043
  var valid_610044 = query.getOrDefault("Version")
  valid_610044 = validateParameter(valid_610044, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610044 != nil:
    section.add "Version", valid_610044
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610045 = header.getOrDefault("X-Amz-Signature")
  valid_610045 = validateParameter(valid_610045, JString, required = false,
                                 default = nil)
  if valid_610045 != nil:
    section.add "X-Amz-Signature", valid_610045
  var valid_610046 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610046 = validateParameter(valid_610046, JString, required = false,
                                 default = nil)
  if valid_610046 != nil:
    section.add "X-Amz-Content-Sha256", valid_610046
  var valid_610047 = header.getOrDefault("X-Amz-Date")
  valid_610047 = validateParameter(valid_610047, JString, required = false,
                                 default = nil)
  if valid_610047 != nil:
    section.add "X-Amz-Date", valid_610047
  var valid_610048 = header.getOrDefault("X-Amz-Credential")
  valid_610048 = validateParameter(valid_610048, JString, required = false,
                                 default = nil)
  if valid_610048 != nil:
    section.add "X-Amz-Credential", valid_610048
  var valid_610049 = header.getOrDefault("X-Amz-Security-Token")
  valid_610049 = validateParameter(valid_610049, JString, required = false,
                                 default = nil)
  if valid_610049 != nil:
    section.add "X-Amz-Security-Token", valid_610049
  var valid_610050 = header.getOrDefault("X-Amz-Algorithm")
  valid_610050 = validateParameter(valid_610050, JString, required = false,
                                 default = nil)
  if valid_610050 != nil:
    section.add "X-Amz-Algorithm", valid_610050
  var valid_610051 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610051 = validateParameter(valid_610051, JString, required = false,
                                 default = nil)
  if valid_610051 != nil:
    section.add "X-Amz-SignedHeaders", valid_610051
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_610052 = formData.getOrDefault("PolicyDocument")
  valid_610052 = validateParameter(valid_610052, JString, required = true,
                                 default = nil)
  if valid_610052 != nil:
    section.add "PolicyDocument", valid_610052
  var valid_610053 = formData.getOrDefault("UserName")
  valid_610053 = validateParameter(valid_610053, JString, required = true,
                                 default = nil)
  if valid_610053 != nil:
    section.add "UserName", valid_610053
  var valid_610054 = formData.getOrDefault("PolicyName")
  valid_610054 = validateParameter(valid_610054, JString, required = true,
                                 default = nil)
  if valid_610054 != nil:
    section.add "PolicyName", valid_610054
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610055: Call_PostPutUserPolicy_610040; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_610055.validator(path, query, header, formData, body)
  let scheme = call_610055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610055.url(scheme.get, call_610055.host, call_610055.base,
                         call_610055.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610055, url, valid)

proc call*(call_610056: Call_PostPutUserPolicy_610040; PolicyDocument: string;
          UserName: string; PolicyName: string; Action: string = "PutUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_610057 = newJObject()
  var formData_610058 = newJObject()
  add(formData_610058, "PolicyDocument", newJString(PolicyDocument))
  add(formData_610058, "UserName", newJString(UserName))
  add(query_610057, "Action", newJString(Action))
  add(query_610057, "Version", newJString(Version))
  add(formData_610058, "PolicyName", newJString(PolicyName))
  result = call_610056.call(nil, query_610057, nil, formData_610058, nil)

var postPutUserPolicy* = Call_PostPutUserPolicy_610040(name: "postPutUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_PostPutUserPolicy_610041,
    base: "/", url: url_PostPutUserPolicy_610042,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPolicy_610022 = ref object of OpenApiRestCall_605589
proc url_GetPutUserPolicy_610024(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutUserPolicy_610023(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_610025 = query.getOrDefault("UserName")
  valid_610025 = validateParameter(valid_610025, JString, required = true,
                                 default = nil)
  if valid_610025 != nil:
    section.add "UserName", valid_610025
  var valid_610026 = query.getOrDefault("PolicyName")
  valid_610026 = validateParameter(valid_610026, JString, required = true,
                                 default = nil)
  if valid_610026 != nil:
    section.add "PolicyName", valid_610026
  var valid_610027 = query.getOrDefault("PolicyDocument")
  valid_610027 = validateParameter(valid_610027, JString, required = true,
                                 default = nil)
  if valid_610027 != nil:
    section.add "PolicyDocument", valid_610027
  var valid_610028 = query.getOrDefault("Action")
  valid_610028 = validateParameter(valid_610028, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_610028 != nil:
    section.add "Action", valid_610028
  var valid_610029 = query.getOrDefault("Version")
  valid_610029 = validateParameter(valid_610029, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610029 != nil:
    section.add "Version", valid_610029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610030 = header.getOrDefault("X-Amz-Signature")
  valid_610030 = validateParameter(valid_610030, JString, required = false,
                                 default = nil)
  if valid_610030 != nil:
    section.add "X-Amz-Signature", valid_610030
  var valid_610031 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610031 = validateParameter(valid_610031, JString, required = false,
                                 default = nil)
  if valid_610031 != nil:
    section.add "X-Amz-Content-Sha256", valid_610031
  var valid_610032 = header.getOrDefault("X-Amz-Date")
  valid_610032 = validateParameter(valid_610032, JString, required = false,
                                 default = nil)
  if valid_610032 != nil:
    section.add "X-Amz-Date", valid_610032
  var valid_610033 = header.getOrDefault("X-Amz-Credential")
  valid_610033 = validateParameter(valid_610033, JString, required = false,
                                 default = nil)
  if valid_610033 != nil:
    section.add "X-Amz-Credential", valid_610033
  var valid_610034 = header.getOrDefault("X-Amz-Security-Token")
  valid_610034 = validateParameter(valid_610034, JString, required = false,
                                 default = nil)
  if valid_610034 != nil:
    section.add "X-Amz-Security-Token", valid_610034
  var valid_610035 = header.getOrDefault("X-Amz-Algorithm")
  valid_610035 = validateParameter(valid_610035, JString, required = false,
                                 default = nil)
  if valid_610035 != nil:
    section.add "X-Amz-Algorithm", valid_610035
  var valid_610036 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610036 = validateParameter(valid_610036, JString, required = false,
                                 default = nil)
  if valid_610036 != nil:
    section.add "X-Amz-SignedHeaders", valid_610036
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610037: Call_GetPutUserPolicy_610022; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_610037.validator(path, query, header, formData, body)
  let scheme = call_610037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610037.url(scheme.get, call_610037.host, call_610037.base,
                         call_610037.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610037, url, valid)

proc call*(call_610038: Call_GetPutUserPolicy_610022; UserName: string;
          PolicyName: string; PolicyDocument: string;
          Action: string = "PutUserPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610039 = newJObject()
  add(query_610039, "UserName", newJString(UserName))
  add(query_610039, "PolicyName", newJString(PolicyName))
  add(query_610039, "PolicyDocument", newJString(PolicyDocument))
  add(query_610039, "Action", newJString(Action))
  add(query_610039, "Version", newJString(Version))
  result = call_610038.call(nil, query_610039, nil, nil, nil)

var getPutUserPolicy* = Call_GetPutUserPolicy_610022(name: "getPutUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_GetPutUserPolicy_610023,
    base: "/", url: url_GetPutUserPolicy_610024,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveClientIDFromOpenIDConnectProvider_610076 = ref object of OpenApiRestCall_605589
proc url_PostRemoveClientIDFromOpenIDConnectProvider_610078(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveClientIDFromOpenIDConnectProvider_610077(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610079 = query.getOrDefault("Action")
  valid_610079 = validateParameter(valid_610079, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_610079 != nil:
    section.add "Action", valid_610079
  var valid_610080 = query.getOrDefault("Version")
  valid_610080 = validateParameter(valid_610080, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610080 != nil:
    section.add "Version", valid_610080
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610081 = header.getOrDefault("X-Amz-Signature")
  valid_610081 = validateParameter(valid_610081, JString, required = false,
                                 default = nil)
  if valid_610081 != nil:
    section.add "X-Amz-Signature", valid_610081
  var valid_610082 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610082 = validateParameter(valid_610082, JString, required = false,
                                 default = nil)
  if valid_610082 != nil:
    section.add "X-Amz-Content-Sha256", valid_610082
  var valid_610083 = header.getOrDefault("X-Amz-Date")
  valid_610083 = validateParameter(valid_610083, JString, required = false,
                                 default = nil)
  if valid_610083 != nil:
    section.add "X-Amz-Date", valid_610083
  var valid_610084 = header.getOrDefault("X-Amz-Credential")
  valid_610084 = validateParameter(valid_610084, JString, required = false,
                                 default = nil)
  if valid_610084 != nil:
    section.add "X-Amz-Credential", valid_610084
  var valid_610085 = header.getOrDefault("X-Amz-Security-Token")
  valid_610085 = validateParameter(valid_610085, JString, required = false,
                                 default = nil)
  if valid_610085 != nil:
    section.add "X-Amz-Security-Token", valid_610085
  var valid_610086 = header.getOrDefault("X-Amz-Algorithm")
  valid_610086 = validateParameter(valid_610086, JString, required = false,
                                 default = nil)
  if valid_610086 != nil:
    section.add "X-Amz-Algorithm", valid_610086
  var valid_610087 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610087 = validateParameter(valid_610087, JString, required = false,
                                 default = nil)
  if valid_610087 != nil:
    section.add "X-Amz-SignedHeaders", valid_610087
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ClientID` field"
  var valid_610088 = formData.getOrDefault("ClientID")
  valid_610088 = validateParameter(valid_610088, JString, required = true,
                                 default = nil)
  if valid_610088 != nil:
    section.add "ClientID", valid_610088
  var valid_610089 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_610089 = validateParameter(valid_610089, JString, required = true,
                                 default = nil)
  if valid_610089 != nil:
    section.add "OpenIDConnectProviderArn", valid_610089
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610090: Call_PostRemoveClientIDFromOpenIDConnectProvider_610076;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_610090.validator(path, query, header, formData, body)
  let scheme = call_610090.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610090.url(scheme.get, call_610090.host, call_610090.base,
                         call_610090.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610090, url, valid)

proc call*(call_610091: Call_PostRemoveClientIDFromOpenIDConnectProvider_610076;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_610092 = newJObject()
  var formData_610093 = newJObject()
  add(formData_610093, "ClientID", newJString(ClientID))
  add(query_610092, "Action", newJString(Action))
  add(query_610092, "Version", newJString(Version))
  add(formData_610093, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_610091.call(nil, query_610092, nil, formData_610093, nil)

var postRemoveClientIDFromOpenIDConnectProvider* = Call_PostRemoveClientIDFromOpenIDConnectProvider_610076(
    name: "postRemoveClientIDFromOpenIDConnectProvider",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_PostRemoveClientIDFromOpenIDConnectProvider_610077,
    base: "/", url: url_PostRemoveClientIDFromOpenIDConnectProvider_610078,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveClientIDFromOpenIDConnectProvider_610059 = ref object of OpenApiRestCall_605589
proc url_GetRemoveClientIDFromOpenIDConnectProvider_610061(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveClientIDFromOpenIDConnectProvider_610060(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ClientID` field"
  var valid_610062 = query.getOrDefault("ClientID")
  valid_610062 = validateParameter(valid_610062, JString, required = true,
                                 default = nil)
  if valid_610062 != nil:
    section.add "ClientID", valid_610062
  var valid_610063 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_610063 = validateParameter(valid_610063, JString, required = true,
                                 default = nil)
  if valid_610063 != nil:
    section.add "OpenIDConnectProviderArn", valid_610063
  var valid_610064 = query.getOrDefault("Action")
  valid_610064 = validateParameter(valid_610064, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_610064 != nil:
    section.add "Action", valid_610064
  var valid_610065 = query.getOrDefault("Version")
  valid_610065 = validateParameter(valid_610065, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610065 != nil:
    section.add "Version", valid_610065
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610066 = header.getOrDefault("X-Amz-Signature")
  valid_610066 = validateParameter(valid_610066, JString, required = false,
                                 default = nil)
  if valid_610066 != nil:
    section.add "X-Amz-Signature", valid_610066
  var valid_610067 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610067 = validateParameter(valid_610067, JString, required = false,
                                 default = nil)
  if valid_610067 != nil:
    section.add "X-Amz-Content-Sha256", valid_610067
  var valid_610068 = header.getOrDefault("X-Amz-Date")
  valid_610068 = validateParameter(valid_610068, JString, required = false,
                                 default = nil)
  if valid_610068 != nil:
    section.add "X-Amz-Date", valid_610068
  var valid_610069 = header.getOrDefault("X-Amz-Credential")
  valid_610069 = validateParameter(valid_610069, JString, required = false,
                                 default = nil)
  if valid_610069 != nil:
    section.add "X-Amz-Credential", valid_610069
  var valid_610070 = header.getOrDefault("X-Amz-Security-Token")
  valid_610070 = validateParameter(valid_610070, JString, required = false,
                                 default = nil)
  if valid_610070 != nil:
    section.add "X-Amz-Security-Token", valid_610070
  var valid_610071 = header.getOrDefault("X-Amz-Algorithm")
  valid_610071 = validateParameter(valid_610071, JString, required = false,
                                 default = nil)
  if valid_610071 != nil:
    section.add "X-Amz-Algorithm", valid_610071
  var valid_610072 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610072 = validateParameter(valid_610072, JString, required = false,
                                 default = nil)
  if valid_610072 != nil:
    section.add "X-Amz-SignedHeaders", valid_610072
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610073: Call_GetRemoveClientIDFromOpenIDConnectProvider_610059;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_610073.validator(path, query, header, formData, body)
  let scheme = call_610073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610073.url(scheme.get, call_610073.host, call_610073.base,
                         call_610073.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610073, url, valid)

proc call*(call_610074: Call_GetRemoveClientIDFromOpenIDConnectProvider_610059;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610075 = newJObject()
  add(query_610075, "ClientID", newJString(ClientID))
  add(query_610075, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_610075, "Action", newJString(Action))
  add(query_610075, "Version", newJString(Version))
  result = call_610074.call(nil, query_610075, nil, nil, nil)

var getRemoveClientIDFromOpenIDConnectProvider* = Call_GetRemoveClientIDFromOpenIDConnectProvider_610059(
    name: "getRemoveClientIDFromOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_GetRemoveClientIDFromOpenIDConnectProvider_610060,
    base: "/", url: url_GetRemoveClientIDFromOpenIDConnectProvider_610061,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromInstanceProfile_610111 = ref object of OpenApiRestCall_605589
proc url_PostRemoveRoleFromInstanceProfile_610113(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromInstanceProfile_610112(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610114 = query.getOrDefault("Action")
  valid_610114 = validateParameter(valid_610114, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_610114 != nil:
    section.add "Action", valid_610114
  var valid_610115 = query.getOrDefault("Version")
  valid_610115 = validateParameter(valid_610115, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610115 != nil:
    section.add "Version", valid_610115
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610116 = header.getOrDefault("X-Amz-Signature")
  valid_610116 = validateParameter(valid_610116, JString, required = false,
                                 default = nil)
  if valid_610116 != nil:
    section.add "X-Amz-Signature", valid_610116
  var valid_610117 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610117 = validateParameter(valid_610117, JString, required = false,
                                 default = nil)
  if valid_610117 != nil:
    section.add "X-Amz-Content-Sha256", valid_610117
  var valid_610118 = header.getOrDefault("X-Amz-Date")
  valid_610118 = validateParameter(valid_610118, JString, required = false,
                                 default = nil)
  if valid_610118 != nil:
    section.add "X-Amz-Date", valid_610118
  var valid_610119 = header.getOrDefault("X-Amz-Credential")
  valid_610119 = validateParameter(valid_610119, JString, required = false,
                                 default = nil)
  if valid_610119 != nil:
    section.add "X-Amz-Credential", valid_610119
  var valid_610120 = header.getOrDefault("X-Amz-Security-Token")
  valid_610120 = validateParameter(valid_610120, JString, required = false,
                                 default = nil)
  if valid_610120 != nil:
    section.add "X-Amz-Security-Token", valid_610120
  var valid_610121 = header.getOrDefault("X-Amz-Algorithm")
  valid_610121 = validateParameter(valid_610121, JString, required = false,
                                 default = nil)
  if valid_610121 != nil:
    section.add "X-Amz-Algorithm", valid_610121
  var valid_610122 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610122 = validateParameter(valid_610122, JString, required = false,
                                 default = nil)
  if valid_610122 != nil:
    section.add "X-Amz-SignedHeaders", valid_610122
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_610123 = formData.getOrDefault("RoleName")
  valid_610123 = validateParameter(valid_610123, JString, required = true,
                                 default = nil)
  if valid_610123 != nil:
    section.add "RoleName", valid_610123
  var valid_610124 = formData.getOrDefault("InstanceProfileName")
  valid_610124 = validateParameter(valid_610124, JString, required = true,
                                 default = nil)
  if valid_610124 != nil:
    section.add "InstanceProfileName", valid_610124
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610125: Call_PostRemoveRoleFromInstanceProfile_610111;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_610125.validator(path, query, header, formData, body)
  let scheme = call_610125.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610125.url(scheme.get, call_610125.host, call_610125.base,
                         call_610125.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610125, url, valid)

proc call*(call_610126: Call_PostRemoveRoleFromInstanceProfile_610111;
          RoleName: string; InstanceProfileName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_610127 = newJObject()
  var formData_610128 = newJObject()
  add(formData_610128, "RoleName", newJString(RoleName))
  add(query_610127, "Action", newJString(Action))
  add(formData_610128, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_610127, "Version", newJString(Version))
  result = call_610126.call(nil, query_610127, nil, formData_610128, nil)

var postRemoveRoleFromInstanceProfile* = Call_PostRemoveRoleFromInstanceProfile_610111(
    name: "postRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_PostRemoveRoleFromInstanceProfile_610112, base: "/",
    url: url_PostRemoveRoleFromInstanceProfile_610113,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromInstanceProfile_610094 = ref object of OpenApiRestCall_605589
proc url_GetRemoveRoleFromInstanceProfile_610096(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromInstanceProfile_610095(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_610097 = query.getOrDefault("RoleName")
  valid_610097 = validateParameter(valid_610097, JString, required = true,
                                 default = nil)
  if valid_610097 != nil:
    section.add "RoleName", valid_610097
  var valid_610098 = query.getOrDefault("Action")
  valid_610098 = validateParameter(valid_610098, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_610098 != nil:
    section.add "Action", valid_610098
  var valid_610099 = query.getOrDefault("InstanceProfileName")
  valid_610099 = validateParameter(valid_610099, JString, required = true,
                                 default = nil)
  if valid_610099 != nil:
    section.add "InstanceProfileName", valid_610099
  var valid_610100 = query.getOrDefault("Version")
  valid_610100 = validateParameter(valid_610100, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610100 != nil:
    section.add "Version", valid_610100
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610101 = header.getOrDefault("X-Amz-Signature")
  valid_610101 = validateParameter(valid_610101, JString, required = false,
                                 default = nil)
  if valid_610101 != nil:
    section.add "X-Amz-Signature", valid_610101
  var valid_610102 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610102 = validateParameter(valid_610102, JString, required = false,
                                 default = nil)
  if valid_610102 != nil:
    section.add "X-Amz-Content-Sha256", valid_610102
  var valid_610103 = header.getOrDefault("X-Amz-Date")
  valid_610103 = validateParameter(valid_610103, JString, required = false,
                                 default = nil)
  if valid_610103 != nil:
    section.add "X-Amz-Date", valid_610103
  var valid_610104 = header.getOrDefault("X-Amz-Credential")
  valid_610104 = validateParameter(valid_610104, JString, required = false,
                                 default = nil)
  if valid_610104 != nil:
    section.add "X-Amz-Credential", valid_610104
  var valid_610105 = header.getOrDefault("X-Amz-Security-Token")
  valid_610105 = validateParameter(valid_610105, JString, required = false,
                                 default = nil)
  if valid_610105 != nil:
    section.add "X-Amz-Security-Token", valid_610105
  var valid_610106 = header.getOrDefault("X-Amz-Algorithm")
  valid_610106 = validateParameter(valid_610106, JString, required = false,
                                 default = nil)
  if valid_610106 != nil:
    section.add "X-Amz-Algorithm", valid_610106
  var valid_610107 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610107 = validateParameter(valid_610107, JString, required = false,
                                 default = nil)
  if valid_610107 != nil:
    section.add "X-Amz-SignedHeaders", valid_610107
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610108: Call_GetRemoveRoleFromInstanceProfile_610094;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_610108.validator(path, query, header, formData, body)
  let scheme = call_610108.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610108.url(scheme.get, call_610108.host, call_610108.base,
                         call_610108.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610108, url, valid)

proc call*(call_610109: Call_GetRemoveRoleFromInstanceProfile_610094;
          RoleName: string; InstanceProfileName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_610110 = newJObject()
  add(query_610110, "RoleName", newJString(RoleName))
  add(query_610110, "Action", newJString(Action))
  add(query_610110, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_610110, "Version", newJString(Version))
  result = call_610109.call(nil, query_610110, nil, nil, nil)

var getRemoveRoleFromInstanceProfile* = Call_GetRemoveRoleFromInstanceProfile_610094(
    name: "getRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_GetRemoveRoleFromInstanceProfile_610095, base: "/",
    url: url_GetRemoveRoleFromInstanceProfile_610096,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveUserFromGroup_610146 = ref object of OpenApiRestCall_605589
proc url_PostRemoveUserFromGroup_610148(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveUserFromGroup_610147(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610149 = query.getOrDefault("Action")
  valid_610149 = validateParameter(valid_610149, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_610149 != nil:
    section.add "Action", valid_610149
  var valid_610150 = query.getOrDefault("Version")
  valid_610150 = validateParameter(valid_610150, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610150 != nil:
    section.add "Version", valid_610150
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610151 = header.getOrDefault("X-Amz-Signature")
  valid_610151 = validateParameter(valid_610151, JString, required = false,
                                 default = nil)
  if valid_610151 != nil:
    section.add "X-Amz-Signature", valid_610151
  var valid_610152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610152 = validateParameter(valid_610152, JString, required = false,
                                 default = nil)
  if valid_610152 != nil:
    section.add "X-Amz-Content-Sha256", valid_610152
  var valid_610153 = header.getOrDefault("X-Amz-Date")
  valid_610153 = validateParameter(valid_610153, JString, required = false,
                                 default = nil)
  if valid_610153 != nil:
    section.add "X-Amz-Date", valid_610153
  var valid_610154 = header.getOrDefault("X-Amz-Credential")
  valid_610154 = validateParameter(valid_610154, JString, required = false,
                                 default = nil)
  if valid_610154 != nil:
    section.add "X-Amz-Credential", valid_610154
  var valid_610155 = header.getOrDefault("X-Amz-Security-Token")
  valid_610155 = validateParameter(valid_610155, JString, required = false,
                                 default = nil)
  if valid_610155 != nil:
    section.add "X-Amz-Security-Token", valid_610155
  var valid_610156 = header.getOrDefault("X-Amz-Algorithm")
  valid_610156 = validateParameter(valid_610156, JString, required = false,
                                 default = nil)
  if valid_610156 != nil:
    section.add "X-Amz-Algorithm", valid_610156
  var valid_610157 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610157 = validateParameter(valid_610157, JString, required = false,
                                 default = nil)
  if valid_610157 != nil:
    section.add "X-Amz-SignedHeaders", valid_610157
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_610158 = formData.getOrDefault("GroupName")
  valid_610158 = validateParameter(valid_610158, JString, required = true,
                                 default = nil)
  if valid_610158 != nil:
    section.add "GroupName", valid_610158
  var valid_610159 = formData.getOrDefault("UserName")
  valid_610159 = validateParameter(valid_610159, JString, required = true,
                                 default = nil)
  if valid_610159 != nil:
    section.add "UserName", valid_610159
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610160: Call_PostRemoveUserFromGroup_610146; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_610160.validator(path, query, header, formData, body)
  let scheme = call_610160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610160.url(scheme.get, call_610160.host, call_610160.base,
                         call_610160.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610160, url, valid)

proc call*(call_610161: Call_PostRemoveUserFromGroup_610146; GroupName: string;
          UserName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610162 = newJObject()
  var formData_610163 = newJObject()
  add(formData_610163, "GroupName", newJString(GroupName))
  add(formData_610163, "UserName", newJString(UserName))
  add(query_610162, "Action", newJString(Action))
  add(query_610162, "Version", newJString(Version))
  result = call_610161.call(nil, query_610162, nil, formData_610163, nil)

var postRemoveUserFromGroup* = Call_PostRemoveUserFromGroup_610146(
    name: "postRemoveUserFromGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_PostRemoveUserFromGroup_610147, base: "/",
    url: url_PostRemoveUserFromGroup_610148, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveUserFromGroup_610129 = ref object of OpenApiRestCall_605589
proc url_GetRemoveUserFromGroup_610131(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveUserFromGroup_610130(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_610132 = query.getOrDefault("UserName")
  valid_610132 = validateParameter(valid_610132, JString, required = true,
                                 default = nil)
  if valid_610132 != nil:
    section.add "UserName", valid_610132
  var valid_610133 = query.getOrDefault("GroupName")
  valid_610133 = validateParameter(valid_610133, JString, required = true,
                                 default = nil)
  if valid_610133 != nil:
    section.add "GroupName", valid_610133
  var valid_610134 = query.getOrDefault("Action")
  valid_610134 = validateParameter(valid_610134, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_610134 != nil:
    section.add "Action", valid_610134
  var valid_610135 = query.getOrDefault("Version")
  valid_610135 = validateParameter(valid_610135, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610135 != nil:
    section.add "Version", valid_610135
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610136 = header.getOrDefault("X-Amz-Signature")
  valid_610136 = validateParameter(valid_610136, JString, required = false,
                                 default = nil)
  if valid_610136 != nil:
    section.add "X-Amz-Signature", valid_610136
  var valid_610137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610137 = validateParameter(valid_610137, JString, required = false,
                                 default = nil)
  if valid_610137 != nil:
    section.add "X-Amz-Content-Sha256", valid_610137
  var valid_610138 = header.getOrDefault("X-Amz-Date")
  valid_610138 = validateParameter(valid_610138, JString, required = false,
                                 default = nil)
  if valid_610138 != nil:
    section.add "X-Amz-Date", valid_610138
  var valid_610139 = header.getOrDefault("X-Amz-Credential")
  valid_610139 = validateParameter(valid_610139, JString, required = false,
                                 default = nil)
  if valid_610139 != nil:
    section.add "X-Amz-Credential", valid_610139
  var valid_610140 = header.getOrDefault("X-Amz-Security-Token")
  valid_610140 = validateParameter(valid_610140, JString, required = false,
                                 default = nil)
  if valid_610140 != nil:
    section.add "X-Amz-Security-Token", valid_610140
  var valid_610141 = header.getOrDefault("X-Amz-Algorithm")
  valid_610141 = validateParameter(valid_610141, JString, required = false,
                                 default = nil)
  if valid_610141 != nil:
    section.add "X-Amz-Algorithm", valid_610141
  var valid_610142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610142 = validateParameter(valid_610142, JString, required = false,
                                 default = nil)
  if valid_610142 != nil:
    section.add "X-Amz-SignedHeaders", valid_610142
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610143: Call_GetRemoveUserFromGroup_610129; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_610143.validator(path, query, header, formData, body)
  let scheme = call_610143.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610143.url(scheme.get, call_610143.host, call_610143.base,
                         call_610143.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610143, url, valid)

proc call*(call_610144: Call_GetRemoveUserFromGroup_610129; UserName: string;
          GroupName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610145 = newJObject()
  add(query_610145, "UserName", newJString(UserName))
  add(query_610145, "GroupName", newJString(GroupName))
  add(query_610145, "Action", newJString(Action))
  add(query_610145, "Version", newJString(Version))
  result = call_610144.call(nil, query_610145, nil, nil, nil)

var getRemoveUserFromGroup* = Call_GetRemoveUserFromGroup_610129(
    name: "getRemoveUserFromGroup", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_GetRemoveUserFromGroup_610130, base: "/",
    url: url_GetRemoveUserFromGroup_610131, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetServiceSpecificCredential_610181 = ref object of OpenApiRestCall_605589
proc url_PostResetServiceSpecificCredential_610183(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetServiceSpecificCredential_610182(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610184 = query.getOrDefault("Action")
  valid_610184 = validateParameter(valid_610184, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_610184 != nil:
    section.add "Action", valid_610184
  var valid_610185 = query.getOrDefault("Version")
  valid_610185 = validateParameter(valid_610185, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610185 != nil:
    section.add "Version", valid_610185
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610186 = header.getOrDefault("X-Amz-Signature")
  valid_610186 = validateParameter(valid_610186, JString, required = false,
                                 default = nil)
  if valid_610186 != nil:
    section.add "X-Amz-Signature", valid_610186
  var valid_610187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610187 = validateParameter(valid_610187, JString, required = false,
                                 default = nil)
  if valid_610187 != nil:
    section.add "X-Amz-Content-Sha256", valid_610187
  var valid_610188 = header.getOrDefault("X-Amz-Date")
  valid_610188 = validateParameter(valid_610188, JString, required = false,
                                 default = nil)
  if valid_610188 != nil:
    section.add "X-Amz-Date", valid_610188
  var valid_610189 = header.getOrDefault("X-Amz-Credential")
  valid_610189 = validateParameter(valid_610189, JString, required = false,
                                 default = nil)
  if valid_610189 != nil:
    section.add "X-Amz-Credential", valid_610189
  var valid_610190 = header.getOrDefault("X-Amz-Security-Token")
  valid_610190 = validateParameter(valid_610190, JString, required = false,
                                 default = nil)
  if valid_610190 != nil:
    section.add "X-Amz-Security-Token", valid_610190
  var valid_610191 = header.getOrDefault("X-Amz-Algorithm")
  valid_610191 = validateParameter(valid_610191, JString, required = false,
                                 default = nil)
  if valid_610191 != nil:
    section.add "X-Amz-Algorithm", valid_610191
  var valid_610192 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610192 = validateParameter(valid_610192, JString, required = false,
                                 default = nil)
  if valid_610192 != nil:
    section.add "X-Amz-SignedHeaders", valid_610192
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_610193 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_610193 = validateParameter(valid_610193, JString, required = true,
                                 default = nil)
  if valid_610193 != nil:
    section.add "ServiceSpecificCredentialId", valid_610193
  var valid_610194 = formData.getOrDefault("UserName")
  valid_610194 = validateParameter(valid_610194, JString, required = false,
                                 default = nil)
  if valid_610194 != nil:
    section.add "UserName", valid_610194
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610195: Call_PostResetServiceSpecificCredential_610181;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_610195.validator(path, query, header, formData, body)
  let scheme = call_610195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610195.url(scheme.get, call_610195.host, call_610195.base,
                         call_610195.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610195, url, valid)

proc call*(call_610196: Call_PostResetServiceSpecificCredential_610181;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610197 = newJObject()
  var formData_610198 = newJObject()
  add(formData_610198, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_610198, "UserName", newJString(UserName))
  add(query_610197, "Action", newJString(Action))
  add(query_610197, "Version", newJString(Version))
  result = call_610196.call(nil, query_610197, nil, formData_610198, nil)

var postResetServiceSpecificCredential* = Call_PostResetServiceSpecificCredential_610181(
    name: "postResetServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_PostResetServiceSpecificCredential_610182, base: "/",
    url: url_PostResetServiceSpecificCredential_610183,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetServiceSpecificCredential_610164 = ref object of OpenApiRestCall_605589
proc url_GetResetServiceSpecificCredential_610166(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetServiceSpecificCredential_610165(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610167 = query.getOrDefault("UserName")
  valid_610167 = validateParameter(valid_610167, JString, required = false,
                                 default = nil)
  if valid_610167 != nil:
    section.add "UserName", valid_610167
  assert query != nil, "query argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_610168 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_610168 = validateParameter(valid_610168, JString, required = true,
                                 default = nil)
  if valid_610168 != nil:
    section.add "ServiceSpecificCredentialId", valid_610168
  var valid_610169 = query.getOrDefault("Action")
  valid_610169 = validateParameter(valid_610169, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_610169 != nil:
    section.add "Action", valid_610169
  var valid_610170 = query.getOrDefault("Version")
  valid_610170 = validateParameter(valid_610170, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610170 != nil:
    section.add "Version", valid_610170
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610171 = header.getOrDefault("X-Amz-Signature")
  valid_610171 = validateParameter(valid_610171, JString, required = false,
                                 default = nil)
  if valid_610171 != nil:
    section.add "X-Amz-Signature", valid_610171
  var valid_610172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610172 = validateParameter(valid_610172, JString, required = false,
                                 default = nil)
  if valid_610172 != nil:
    section.add "X-Amz-Content-Sha256", valid_610172
  var valid_610173 = header.getOrDefault("X-Amz-Date")
  valid_610173 = validateParameter(valid_610173, JString, required = false,
                                 default = nil)
  if valid_610173 != nil:
    section.add "X-Amz-Date", valid_610173
  var valid_610174 = header.getOrDefault("X-Amz-Credential")
  valid_610174 = validateParameter(valid_610174, JString, required = false,
                                 default = nil)
  if valid_610174 != nil:
    section.add "X-Amz-Credential", valid_610174
  var valid_610175 = header.getOrDefault("X-Amz-Security-Token")
  valid_610175 = validateParameter(valid_610175, JString, required = false,
                                 default = nil)
  if valid_610175 != nil:
    section.add "X-Amz-Security-Token", valid_610175
  var valid_610176 = header.getOrDefault("X-Amz-Algorithm")
  valid_610176 = validateParameter(valid_610176, JString, required = false,
                                 default = nil)
  if valid_610176 != nil:
    section.add "X-Amz-Algorithm", valid_610176
  var valid_610177 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610177 = validateParameter(valid_610177, JString, required = false,
                                 default = nil)
  if valid_610177 != nil:
    section.add "X-Amz-SignedHeaders", valid_610177
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610178: Call_GetResetServiceSpecificCredential_610164;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_610178.validator(path, query, header, formData, body)
  let scheme = call_610178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610178.url(scheme.get, call_610178.host, call_610178.base,
                         call_610178.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610178, url, valid)

proc call*(call_610179: Call_GetResetServiceSpecificCredential_610164;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610180 = newJObject()
  add(query_610180, "UserName", newJString(UserName))
  add(query_610180, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_610180, "Action", newJString(Action))
  add(query_610180, "Version", newJString(Version))
  result = call_610179.call(nil, query_610180, nil, nil, nil)

var getResetServiceSpecificCredential* = Call_GetResetServiceSpecificCredential_610164(
    name: "getResetServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_GetResetServiceSpecificCredential_610165, base: "/",
    url: url_GetResetServiceSpecificCredential_610166,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResyncMFADevice_610218 = ref object of OpenApiRestCall_605589
proc url_PostResyncMFADevice_610220(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResyncMFADevice_610219(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610221 = query.getOrDefault("Action")
  valid_610221 = validateParameter(valid_610221, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_610221 != nil:
    section.add "Action", valid_610221
  var valid_610222 = query.getOrDefault("Version")
  valid_610222 = validateParameter(valid_610222, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610222 != nil:
    section.add "Version", valid_610222
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610223 = header.getOrDefault("X-Amz-Signature")
  valid_610223 = validateParameter(valid_610223, JString, required = false,
                                 default = nil)
  if valid_610223 != nil:
    section.add "X-Amz-Signature", valid_610223
  var valid_610224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610224 = validateParameter(valid_610224, JString, required = false,
                                 default = nil)
  if valid_610224 != nil:
    section.add "X-Amz-Content-Sha256", valid_610224
  var valid_610225 = header.getOrDefault("X-Amz-Date")
  valid_610225 = validateParameter(valid_610225, JString, required = false,
                                 default = nil)
  if valid_610225 != nil:
    section.add "X-Amz-Date", valid_610225
  var valid_610226 = header.getOrDefault("X-Amz-Credential")
  valid_610226 = validateParameter(valid_610226, JString, required = false,
                                 default = nil)
  if valid_610226 != nil:
    section.add "X-Amz-Credential", valid_610226
  var valid_610227 = header.getOrDefault("X-Amz-Security-Token")
  valid_610227 = validateParameter(valid_610227, JString, required = false,
                                 default = nil)
  if valid_610227 != nil:
    section.add "X-Amz-Security-Token", valid_610227
  var valid_610228 = header.getOrDefault("X-Amz-Algorithm")
  valid_610228 = validateParameter(valid_610228, JString, required = false,
                                 default = nil)
  if valid_610228 != nil:
    section.add "X-Amz-Algorithm", valid_610228
  var valid_610229 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610229 = validateParameter(valid_610229, JString, required = false,
                                 default = nil)
  if valid_610229 != nil:
    section.add "X-Amz-SignedHeaders", valid_610229
  result.add "header", section
  ## parameters in `formData` object:
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AuthenticationCode2` field"
  var valid_610230 = formData.getOrDefault("AuthenticationCode2")
  valid_610230 = validateParameter(valid_610230, JString, required = true,
                                 default = nil)
  if valid_610230 != nil:
    section.add "AuthenticationCode2", valid_610230
  var valid_610231 = formData.getOrDefault("SerialNumber")
  valid_610231 = validateParameter(valid_610231, JString, required = true,
                                 default = nil)
  if valid_610231 != nil:
    section.add "SerialNumber", valid_610231
  var valid_610232 = formData.getOrDefault("UserName")
  valid_610232 = validateParameter(valid_610232, JString, required = true,
                                 default = nil)
  if valid_610232 != nil:
    section.add "UserName", valid_610232
  var valid_610233 = formData.getOrDefault("AuthenticationCode1")
  valid_610233 = validateParameter(valid_610233, JString, required = true,
                                 default = nil)
  if valid_610233 != nil:
    section.add "AuthenticationCode1", valid_610233
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610234: Call_PostResyncMFADevice_610218; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610234.validator(path, query, header, formData, body)
  let scheme = call_610234.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610234.url(scheme.get, call_610234.host, call_610234.base,
                         call_610234.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610234, url, valid)

proc call*(call_610235: Call_PostResyncMFADevice_610218;
          AuthenticationCode2: string; SerialNumber: string; UserName: string;
          AuthenticationCode1: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   Version: string (required)
  var query_610236 = newJObject()
  var formData_610237 = newJObject()
  add(formData_610237, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(formData_610237, "SerialNumber", newJString(SerialNumber))
  add(formData_610237, "UserName", newJString(UserName))
  add(query_610236, "Action", newJString(Action))
  add(formData_610237, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_610236, "Version", newJString(Version))
  result = call_610235.call(nil, query_610236, nil, formData_610237, nil)

var postResyncMFADevice* = Call_PostResyncMFADevice_610218(
    name: "postResyncMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResyncMFADevice",
    validator: validate_PostResyncMFADevice_610219, base: "/",
    url: url_PostResyncMFADevice_610220, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResyncMFADevice_610199 = ref object of OpenApiRestCall_605589
proc url_GetResyncMFADevice_610201(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResyncMFADevice_610200(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_610202 = query.getOrDefault("UserName")
  valid_610202 = validateParameter(valid_610202, JString, required = true,
                                 default = nil)
  if valid_610202 != nil:
    section.add "UserName", valid_610202
  var valid_610203 = query.getOrDefault("AuthenticationCode1")
  valid_610203 = validateParameter(valid_610203, JString, required = true,
                                 default = nil)
  if valid_610203 != nil:
    section.add "AuthenticationCode1", valid_610203
  var valid_610204 = query.getOrDefault("AuthenticationCode2")
  valid_610204 = validateParameter(valid_610204, JString, required = true,
                                 default = nil)
  if valid_610204 != nil:
    section.add "AuthenticationCode2", valid_610204
  var valid_610205 = query.getOrDefault("SerialNumber")
  valid_610205 = validateParameter(valid_610205, JString, required = true,
                                 default = nil)
  if valid_610205 != nil:
    section.add "SerialNumber", valid_610205
  var valid_610206 = query.getOrDefault("Action")
  valid_610206 = validateParameter(valid_610206, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_610206 != nil:
    section.add "Action", valid_610206
  var valid_610207 = query.getOrDefault("Version")
  valid_610207 = validateParameter(valid_610207, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610207 != nil:
    section.add "Version", valid_610207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610208 = header.getOrDefault("X-Amz-Signature")
  valid_610208 = validateParameter(valid_610208, JString, required = false,
                                 default = nil)
  if valid_610208 != nil:
    section.add "X-Amz-Signature", valid_610208
  var valid_610209 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610209 = validateParameter(valid_610209, JString, required = false,
                                 default = nil)
  if valid_610209 != nil:
    section.add "X-Amz-Content-Sha256", valid_610209
  var valid_610210 = header.getOrDefault("X-Amz-Date")
  valid_610210 = validateParameter(valid_610210, JString, required = false,
                                 default = nil)
  if valid_610210 != nil:
    section.add "X-Amz-Date", valid_610210
  var valid_610211 = header.getOrDefault("X-Amz-Credential")
  valid_610211 = validateParameter(valid_610211, JString, required = false,
                                 default = nil)
  if valid_610211 != nil:
    section.add "X-Amz-Credential", valid_610211
  var valid_610212 = header.getOrDefault("X-Amz-Security-Token")
  valid_610212 = validateParameter(valid_610212, JString, required = false,
                                 default = nil)
  if valid_610212 != nil:
    section.add "X-Amz-Security-Token", valid_610212
  var valid_610213 = header.getOrDefault("X-Amz-Algorithm")
  valid_610213 = validateParameter(valid_610213, JString, required = false,
                                 default = nil)
  if valid_610213 != nil:
    section.add "X-Amz-Algorithm", valid_610213
  var valid_610214 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610214 = validateParameter(valid_610214, JString, required = false,
                                 default = nil)
  if valid_610214 != nil:
    section.add "X-Amz-SignedHeaders", valid_610214
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610215: Call_GetResyncMFADevice_610199; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610215.validator(path, query, header, formData, body)
  let scheme = call_610215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610215.url(scheme.get, call_610215.host, call_610215.base,
                         call_610215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610215, url, valid)

proc call*(call_610216: Call_GetResyncMFADevice_610199; UserName: string;
          AuthenticationCode1: string; AuthenticationCode2: string;
          SerialNumber: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610217 = newJObject()
  add(query_610217, "UserName", newJString(UserName))
  add(query_610217, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_610217, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_610217, "SerialNumber", newJString(SerialNumber))
  add(query_610217, "Action", newJString(Action))
  add(query_610217, "Version", newJString(Version))
  result = call_610216.call(nil, query_610217, nil, nil, nil)

var getResyncMFADevice* = Call_GetResyncMFADevice_610199(
    name: "getResyncMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ResyncMFADevice", validator: validate_GetResyncMFADevice_610200,
    base: "/", url: url_GetResyncMFADevice_610201,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDefaultPolicyVersion_610255 = ref object of OpenApiRestCall_605589
proc url_PostSetDefaultPolicyVersion_610257(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetDefaultPolicyVersion_610256(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610258 = query.getOrDefault("Action")
  valid_610258 = validateParameter(valid_610258, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_610258 != nil:
    section.add "Action", valid_610258
  var valid_610259 = query.getOrDefault("Version")
  valid_610259 = validateParameter(valid_610259, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610259 != nil:
    section.add "Version", valid_610259
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610260 = header.getOrDefault("X-Amz-Signature")
  valid_610260 = validateParameter(valid_610260, JString, required = false,
                                 default = nil)
  if valid_610260 != nil:
    section.add "X-Amz-Signature", valid_610260
  var valid_610261 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610261 = validateParameter(valid_610261, JString, required = false,
                                 default = nil)
  if valid_610261 != nil:
    section.add "X-Amz-Content-Sha256", valid_610261
  var valid_610262 = header.getOrDefault("X-Amz-Date")
  valid_610262 = validateParameter(valid_610262, JString, required = false,
                                 default = nil)
  if valid_610262 != nil:
    section.add "X-Amz-Date", valid_610262
  var valid_610263 = header.getOrDefault("X-Amz-Credential")
  valid_610263 = validateParameter(valid_610263, JString, required = false,
                                 default = nil)
  if valid_610263 != nil:
    section.add "X-Amz-Credential", valid_610263
  var valid_610264 = header.getOrDefault("X-Amz-Security-Token")
  valid_610264 = validateParameter(valid_610264, JString, required = false,
                                 default = nil)
  if valid_610264 != nil:
    section.add "X-Amz-Security-Token", valid_610264
  var valid_610265 = header.getOrDefault("X-Amz-Algorithm")
  valid_610265 = validateParameter(valid_610265, JString, required = false,
                                 default = nil)
  if valid_610265 != nil:
    section.add "X-Amz-Algorithm", valid_610265
  var valid_610266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610266 = validateParameter(valid_610266, JString, required = false,
                                 default = nil)
  if valid_610266 != nil:
    section.add "X-Amz-SignedHeaders", valid_610266
  result.add "header", section
  ## parameters in `formData` object:
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `VersionId` field"
  var valid_610267 = formData.getOrDefault("VersionId")
  valid_610267 = validateParameter(valid_610267, JString, required = true,
                                 default = nil)
  if valid_610267 != nil:
    section.add "VersionId", valid_610267
  var valid_610268 = formData.getOrDefault("PolicyArn")
  valid_610268 = validateParameter(valid_610268, JString, required = true,
                                 default = nil)
  if valid_610268 != nil:
    section.add "PolicyArn", valid_610268
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610269: Call_PostSetDefaultPolicyVersion_610255; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610269.validator(path, query, header, formData, body)
  let scheme = call_610269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610269.url(scheme.get, call_610269.host, call_610269.base,
                         call_610269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610269, url, valid)

proc call*(call_610270: Call_PostSetDefaultPolicyVersion_610255; VersionId: string;
          PolicyArn: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610271 = newJObject()
  var formData_610272 = newJObject()
  add(formData_610272, "VersionId", newJString(VersionId))
  add(formData_610272, "PolicyArn", newJString(PolicyArn))
  add(query_610271, "Action", newJString(Action))
  add(query_610271, "Version", newJString(Version))
  result = call_610270.call(nil, query_610271, nil, formData_610272, nil)

var postSetDefaultPolicyVersion* = Call_PostSetDefaultPolicyVersion_610255(
    name: "postSetDefaultPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_PostSetDefaultPolicyVersion_610256, base: "/",
    url: url_PostSetDefaultPolicyVersion_610257,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDefaultPolicyVersion_610238 = ref object of OpenApiRestCall_605589
proc url_GetSetDefaultPolicyVersion_610240(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetDefaultPolicyVersion_610239(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `VersionId` field"
  var valid_610241 = query.getOrDefault("VersionId")
  valid_610241 = validateParameter(valid_610241, JString, required = true,
                                 default = nil)
  if valid_610241 != nil:
    section.add "VersionId", valid_610241
  var valid_610242 = query.getOrDefault("PolicyArn")
  valid_610242 = validateParameter(valid_610242, JString, required = true,
                                 default = nil)
  if valid_610242 != nil:
    section.add "PolicyArn", valid_610242
  var valid_610243 = query.getOrDefault("Action")
  valid_610243 = validateParameter(valid_610243, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_610243 != nil:
    section.add "Action", valid_610243
  var valid_610244 = query.getOrDefault("Version")
  valid_610244 = validateParameter(valid_610244, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610244 != nil:
    section.add "Version", valid_610244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610245 = header.getOrDefault("X-Amz-Signature")
  valid_610245 = validateParameter(valid_610245, JString, required = false,
                                 default = nil)
  if valid_610245 != nil:
    section.add "X-Amz-Signature", valid_610245
  var valid_610246 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610246 = validateParameter(valid_610246, JString, required = false,
                                 default = nil)
  if valid_610246 != nil:
    section.add "X-Amz-Content-Sha256", valid_610246
  var valid_610247 = header.getOrDefault("X-Amz-Date")
  valid_610247 = validateParameter(valid_610247, JString, required = false,
                                 default = nil)
  if valid_610247 != nil:
    section.add "X-Amz-Date", valid_610247
  var valid_610248 = header.getOrDefault("X-Amz-Credential")
  valid_610248 = validateParameter(valid_610248, JString, required = false,
                                 default = nil)
  if valid_610248 != nil:
    section.add "X-Amz-Credential", valid_610248
  var valid_610249 = header.getOrDefault("X-Amz-Security-Token")
  valid_610249 = validateParameter(valid_610249, JString, required = false,
                                 default = nil)
  if valid_610249 != nil:
    section.add "X-Amz-Security-Token", valid_610249
  var valid_610250 = header.getOrDefault("X-Amz-Algorithm")
  valid_610250 = validateParameter(valid_610250, JString, required = false,
                                 default = nil)
  if valid_610250 != nil:
    section.add "X-Amz-Algorithm", valid_610250
  var valid_610251 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610251 = validateParameter(valid_610251, JString, required = false,
                                 default = nil)
  if valid_610251 != nil:
    section.add "X-Amz-SignedHeaders", valid_610251
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610252: Call_GetSetDefaultPolicyVersion_610238; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610252.validator(path, query, header, formData, body)
  let scheme = call_610252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610252.url(scheme.get, call_610252.host, call_610252.base,
                         call_610252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610252, url, valid)

proc call*(call_610253: Call_GetSetDefaultPolicyVersion_610238; VersionId: string;
          PolicyArn: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610254 = newJObject()
  add(query_610254, "VersionId", newJString(VersionId))
  add(query_610254, "PolicyArn", newJString(PolicyArn))
  add(query_610254, "Action", newJString(Action))
  add(query_610254, "Version", newJString(Version))
  result = call_610253.call(nil, query_610254, nil, nil, nil)

var getSetDefaultPolicyVersion* = Call_GetSetDefaultPolicyVersion_610238(
    name: "getSetDefaultPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_GetSetDefaultPolicyVersion_610239, base: "/",
    url: url_GetSetDefaultPolicyVersion_610240,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetSecurityTokenServicePreferences_610289 = ref object of OpenApiRestCall_605589
proc url_PostSetSecurityTokenServicePreferences_610291(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetSecurityTokenServicePreferences_610290(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610292 = query.getOrDefault("Action")
  valid_610292 = validateParameter(valid_610292, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_610292 != nil:
    section.add "Action", valid_610292
  var valid_610293 = query.getOrDefault("Version")
  valid_610293 = validateParameter(valid_610293, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610293 != nil:
    section.add "Version", valid_610293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610294 = header.getOrDefault("X-Amz-Signature")
  valid_610294 = validateParameter(valid_610294, JString, required = false,
                                 default = nil)
  if valid_610294 != nil:
    section.add "X-Amz-Signature", valid_610294
  var valid_610295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610295 = validateParameter(valid_610295, JString, required = false,
                                 default = nil)
  if valid_610295 != nil:
    section.add "X-Amz-Content-Sha256", valid_610295
  var valid_610296 = header.getOrDefault("X-Amz-Date")
  valid_610296 = validateParameter(valid_610296, JString, required = false,
                                 default = nil)
  if valid_610296 != nil:
    section.add "X-Amz-Date", valid_610296
  var valid_610297 = header.getOrDefault("X-Amz-Credential")
  valid_610297 = validateParameter(valid_610297, JString, required = false,
                                 default = nil)
  if valid_610297 != nil:
    section.add "X-Amz-Credential", valid_610297
  var valid_610298 = header.getOrDefault("X-Amz-Security-Token")
  valid_610298 = validateParameter(valid_610298, JString, required = false,
                                 default = nil)
  if valid_610298 != nil:
    section.add "X-Amz-Security-Token", valid_610298
  var valid_610299 = header.getOrDefault("X-Amz-Algorithm")
  valid_610299 = validateParameter(valid_610299, JString, required = false,
                                 default = nil)
  if valid_610299 != nil:
    section.add "X-Amz-Algorithm", valid_610299
  var valid_610300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610300 = validateParameter(valid_610300, JString, required = false,
                                 default = nil)
  if valid_610300 != nil:
    section.add "X-Amz-SignedHeaders", valid_610300
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalEndpointTokenVersion` field"
  var valid_610301 = formData.getOrDefault("GlobalEndpointTokenVersion")
  valid_610301 = validateParameter(valid_610301, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_610301 != nil:
    section.add "GlobalEndpointTokenVersion", valid_610301
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610302: Call_PostSetSecurityTokenServicePreferences_610289;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_610302.validator(path, query, header, formData, body)
  let scheme = call_610302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610302.url(scheme.get, call_610302.host, call_610302.base,
                         call_610302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610302, url, valid)

proc call*(call_610303: Call_PostSetSecurityTokenServicePreferences_610289;
          GlobalEndpointTokenVersion: string = "v1Token";
          Action: string = "SetSecurityTokenServicePreferences";
          Version: string = "2010-05-08"): Recallable =
  ## postSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610304 = newJObject()
  var formData_610305 = newJObject()
  add(formData_610305, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_610304, "Action", newJString(Action))
  add(query_610304, "Version", newJString(Version))
  result = call_610303.call(nil, query_610304, nil, formData_610305, nil)

var postSetSecurityTokenServicePreferences* = Call_PostSetSecurityTokenServicePreferences_610289(
    name: "postSetSecurityTokenServicePreferences", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_PostSetSecurityTokenServicePreferences_610290, base: "/",
    url: url_PostSetSecurityTokenServicePreferences_610291,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetSecurityTokenServicePreferences_610273 = ref object of OpenApiRestCall_605589
proc url_GetSetSecurityTokenServicePreferences_610275(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetSecurityTokenServicePreferences_610274(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `GlobalEndpointTokenVersion` field"
  var valid_610276 = query.getOrDefault("GlobalEndpointTokenVersion")
  valid_610276 = validateParameter(valid_610276, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_610276 != nil:
    section.add "GlobalEndpointTokenVersion", valid_610276
  var valid_610277 = query.getOrDefault("Action")
  valid_610277 = validateParameter(valid_610277, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_610277 != nil:
    section.add "Action", valid_610277
  var valid_610278 = query.getOrDefault("Version")
  valid_610278 = validateParameter(valid_610278, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610278 != nil:
    section.add "Version", valid_610278
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610279 = header.getOrDefault("X-Amz-Signature")
  valid_610279 = validateParameter(valid_610279, JString, required = false,
                                 default = nil)
  if valid_610279 != nil:
    section.add "X-Amz-Signature", valid_610279
  var valid_610280 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610280 = validateParameter(valid_610280, JString, required = false,
                                 default = nil)
  if valid_610280 != nil:
    section.add "X-Amz-Content-Sha256", valid_610280
  var valid_610281 = header.getOrDefault("X-Amz-Date")
  valid_610281 = validateParameter(valid_610281, JString, required = false,
                                 default = nil)
  if valid_610281 != nil:
    section.add "X-Amz-Date", valid_610281
  var valid_610282 = header.getOrDefault("X-Amz-Credential")
  valid_610282 = validateParameter(valid_610282, JString, required = false,
                                 default = nil)
  if valid_610282 != nil:
    section.add "X-Amz-Credential", valid_610282
  var valid_610283 = header.getOrDefault("X-Amz-Security-Token")
  valid_610283 = validateParameter(valid_610283, JString, required = false,
                                 default = nil)
  if valid_610283 != nil:
    section.add "X-Amz-Security-Token", valid_610283
  var valid_610284 = header.getOrDefault("X-Amz-Algorithm")
  valid_610284 = validateParameter(valid_610284, JString, required = false,
                                 default = nil)
  if valid_610284 != nil:
    section.add "X-Amz-Algorithm", valid_610284
  var valid_610285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610285 = validateParameter(valid_610285, JString, required = false,
                                 default = nil)
  if valid_610285 != nil:
    section.add "X-Amz-SignedHeaders", valid_610285
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610286: Call_GetSetSecurityTokenServicePreferences_610273;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_610286.validator(path, query, header, formData, body)
  let scheme = call_610286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610286.url(scheme.get, call_610286.host, call_610286.base,
                         call_610286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610286, url, valid)

proc call*(call_610287: Call_GetSetSecurityTokenServicePreferences_610273;
          GlobalEndpointTokenVersion: string = "v1Token";
          Action: string = "SetSecurityTokenServicePreferences";
          Version: string = "2010-05-08"): Recallable =
  ## getSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610288 = newJObject()
  add(query_610288, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_610288, "Action", newJString(Action))
  add(query_610288, "Version", newJString(Version))
  result = call_610287.call(nil, query_610288, nil, nil, nil)

var getSetSecurityTokenServicePreferences* = Call_GetSetSecurityTokenServicePreferences_610273(
    name: "getSetSecurityTokenServicePreferences", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_GetSetSecurityTokenServicePreferences_610274, base: "/",
    url: url_GetSetSecurityTokenServicePreferences_610275,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulateCustomPolicy_610331 = ref object of OpenApiRestCall_605589
proc url_PostSimulateCustomPolicy_610333(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSimulateCustomPolicy_610332(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610334 = query.getOrDefault("Action")
  valid_610334 = validateParameter(valid_610334, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_610334 != nil:
    section.add "Action", valid_610334
  var valid_610335 = query.getOrDefault("Version")
  valid_610335 = validateParameter(valid_610335, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610335 != nil:
    section.add "Version", valid_610335
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610336 = header.getOrDefault("X-Amz-Signature")
  valid_610336 = validateParameter(valid_610336, JString, required = false,
                                 default = nil)
  if valid_610336 != nil:
    section.add "X-Amz-Signature", valid_610336
  var valid_610337 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610337 = validateParameter(valid_610337, JString, required = false,
                                 default = nil)
  if valid_610337 != nil:
    section.add "X-Amz-Content-Sha256", valid_610337
  var valid_610338 = header.getOrDefault("X-Amz-Date")
  valid_610338 = validateParameter(valid_610338, JString, required = false,
                                 default = nil)
  if valid_610338 != nil:
    section.add "X-Amz-Date", valid_610338
  var valid_610339 = header.getOrDefault("X-Amz-Credential")
  valid_610339 = validateParameter(valid_610339, JString, required = false,
                                 default = nil)
  if valid_610339 != nil:
    section.add "X-Amz-Credential", valid_610339
  var valid_610340 = header.getOrDefault("X-Amz-Security-Token")
  valid_610340 = validateParameter(valid_610340, JString, required = false,
                                 default = nil)
  if valid_610340 != nil:
    section.add "X-Amz-Security-Token", valid_610340
  var valid_610341 = header.getOrDefault("X-Amz-Algorithm")
  valid_610341 = validateParameter(valid_610341, JString, required = false,
                                 default = nil)
  if valid_610341 != nil:
    section.add "X-Amz-Algorithm", valid_610341
  var valid_610342 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610342 = validateParameter(valid_610342, JString, required = false,
                                 default = nil)
  if valid_610342 != nil:
    section.add "X-Amz-SignedHeaders", valid_610342
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  section = newJObject()
  var valid_610343 = formData.getOrDefault("ResourceArns")
  valid_610343 = validateParameter(valid_610343, JArray, required = false,
                                 default = nil)
  if valid_610343 != nil:
    section.add "ResourceArns", valid_610343
  var valid_610344 = formData.getOrDefault("ContextEntries")
  valid_610344 = validateParameter(valid_610344, JArray, required = false,
                                 default = nil)
  if valid_610344 != nil:
    section.add "ContextEntries", valid_610344
  var valid_610345 = formData.getOrDefault("CallerArn")
  valid_610345 = validateParameter(valid_610345, JString, required = false,
                                 default = nil)
  if valid_610345 != nil:
    section.add "CallerArn", valid_610345
  var valid_610346 = formData.getOrDefault("ResourceHandlingOption")
  valid_610346 = validateParameter(valid_610346, JString, required = false,
                                 default = nil)
  if valid_610346 != nil:
    section.add "ResourceHandlingOption", valid_610346
  var valid_610347 = formData.getOrDefault("Marker")
  valid_610347 = validateParameter(valid_610347, JString, required = false,
                                 default = nil)
  if valid_610347 != nil:
    section.add "Marker", valid_610347
  assert formData != nil,
        "formData argument is necessary due to required `ActionNames` field"
  var valid_610348 = formData.getOrDefault("ActionNames")
  valid_610348 = validateParameter(valid_610348, JArray, required = true, default = nil)
  if valid_610348 != nil:
    section.add "ActionNames", valid_610348
  var valid_610349 = formData.getOrDefault("MaxItems")
  valid_610349 = validateParameter(valid_610349, JInt, required = false, default = nil)
  if valid_610349 != nil:
    section.add "MaxItems", valid_610349
  var valid_610350 = formData.getOrDefault("ResourcePolicy")
  valid_610350 = validateParameter(valid_610350, JString, required = false,
                                 default = nil)
  if valid_610350 != nil:
    section.add "ResourcePolicy", valid_610350
  var valid_610351 = formData.getOrDefault("PolicyInputList")
  valid_610351 = validateParameter(valid_610351, JArray, required = true, default = nil)
  if valid_610351 != nil:
    section.add "PolicyInputList", valid_610351
  var valid_610352 = formData.getOrDefault("ResourceOwner")
  valid_610352 = validateParameter(valid_610352, JString, required = false,
                                 default = nil)
  if valid_610352 != nil:
    section.add "ResourceOwner", valid_610352
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610353: Call_PostSimulateCustomPolicy_610331; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_610353.validator(path, query, header, formData, body)
  let scheme = call_610353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610353.url(scheme.get, call_610353.host, call_610353.base,
                         call_610353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610353, url, valid)

proc call*(call_610354: Call_PostSimulateCustomPolicy_610331;
          ActionNames: JsonNode; PolicyInputList: JsonNode;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceHandlingOption: string = "";
          Marker: string = ""; Action: string = "SimulateCustomPolicy";
          MaxItems: int = 0; ResourcePolicy: string = "";
          Version: string = "2010-05-08"; ResourceOwner: string = ""): Recallable =
  ## postSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  var query_610355 = newJObject()
  var formData_610356 = newJObject()
  if ResourceArns != nil:
    formData_610356.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_610356.add "ContextEntries", ContextEntries
  add(formData_610356, "CallerArn", newJString(CallerArn))
  add(formData_610356, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  add(formData_610356, "Marker", newJString(Marker))
  if ActionNames != nil:
    formData_610356.add "ActionNames", ActionNames
  add(query_610355, "Action", newJString(Action))
  add(formData_610356, "MaxItems", newJInt(MaxItems))
  add(formData_610356, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_610355, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_610356.add "PolicyInputList", PolicyInputList
  add(formData_610356, "ResourceOwner", newJString(ResourceOwner))
  result = call_610354.call(nil, query_610355, nil, formData_610356, nil)

var postSimulateCustomPolicy* = Call_PostSimulateCustomPolicy_610331(
    name: "postSimulateCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_PostSimulateCustomPolicy_610332, base: "/",
    url: url_PostSimulateCustomPolicy_610333, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulateCustomPolicy_610306 = ref object of OpenApiRestCall_605589
proc url_GetSimulateCustomPolicy_610308(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSimulateCustomPolicy_610307(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  section = newJObject()
  var valid_610309 = query.getOrDefault("Marker")
  valid_610309 = validateParameter(valid_610309, JString, required = false,
                                 default = nil)
  if valid_610309 != nil:
    section.add "Marker", valid_610309
  var valid_610310 = query.getOrDefault("ResourceOwner")
  valid_610310 = validateParameter(valid_610310, JString, required = false,
                                 default = nil)
  if valid_610310 != nil:
    section.add "ResourceOwner", valid_610310
  var valid_610311 = query.getOrDefault("MaxItems")
  valid_610311 = validateParameter(valid_610311, JInt, required = false, default = nil)
  if valid_610311 != nil:
    section.add "MaxItems", valid_610311
  var valid_610312 = query.getOrDefault("ResourceArns")
  valid_610312 = validateParameter(valid_610312, JArray, required = false,
                                 default = nil)
  if valid_610312 != nil:
    section.add "ResourceArns", valid_610312
  var valid_610313 = query.getOrDefault("ResourcePolicy")
  valid_610313 = validateParameter(valid_610313, JString, required = false,
                                 default = nil)
  if valid_610313 != nil:
    section.add "ResourcePolicy", valid_610313
  assert query != nil,
        "query argument is necessary due to required `PolicyInputList` field"
  var valid_610314 = query.getOrDefault("PolicyInputList")
  valid_610314 = validateParameter(valid_610314, JArray, required = true, default = nil)
  if valid_610314 != nil:
    section.add "PolicyInputList", valid_610314
  var valid_610315 = query.getOrDefault("CallerArn")
  valid_610315 = validateParameter(valid_610315, JString, required = false,
                                 default = nil)
  if valid_610315 != nil:
    section.add "CallerArn", valid_610315
  var valid_610316 = query.getOrDefault("ResourceHandlingOption")
  valid_610316 = validateParameter(valid_610316, JString, required = false,
                                 default = nil)
  if valid_610316 != nil:
    section.add "ResourceHandlingOption", valid_610316
  var valid_610317 = query.getOrDefault("Action")
  valid_610317 = validateParameter(valid_610317, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_610317 != nil:
    section.add "Action", valid_610317
  var valid_610318 = query.getOrDefault("Version")
  valid_610318 = validateParameter(valid_610318, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610318 != nil:
    section.add "Version", valid_610318
  var valid_610319 = query.getOrDefault("ActionNames")
  valid_610319 = validateParameter(valid_610319, JArray, required = true, default = nil)
  if valid_610319 != nil:
    section.add "ActionNames", valid_610319
  var valid_610320 = query.getOrDefault("ContextEntries")
  valid_610320 = validateParameter(valid_610320, JArray, required = false,
                                 default = nil)
  if valid_610320 != nil:
    section.add "ContextEntries", valid_610320
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610321 = header.getOrDefault("X-Amz-Signature")
  valid_610321 = validateParameter(valid_610321, JString, required = false,
                                 default = nil)
  if valid_610321 != nil:
    section.add "X-Amz-Signature", valid_610321
  var valid_610322 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610322 = validateParameter(valid_610322, JString, required = false,
                                 default = nil)
  if valid_610322 != nil:
    section.add "X-Amz-Content-Sha256", valid_610322
  var valid_610323 = header.getOrDefault("X-Amz-Date")
  valid_610323 = validateParameter(valid_610323, JString, required = false,
                                 default = nil)
  if valid_610323 != nil:
    section.add "X-Amz-Date", valid_610323
  var valid_610324 = header.getOrDefault("X-Amz-Credential")
  valid_610324 = validateParameter(valid_610324, JString, required = false,
                                 default = nil)
  if valid_610324 != nil:
    section.add "X-Amz-Credential", valid_610324
  var valid_610325 = header.getOrDefault("X-Amz-Security-Token")
  valid_610325 = validateParameter(valid_610325, JString, required = false,
                                 default = nil)
  if valid_610325 != nil:
    section.add "X-Amz-Security-Token", valid_610325
  var valid_610326 = header.getOrDefault("X-Amz-Algorithm")
  valid_610326 = validateParameter(valid_610326, JString, required = false,
                                 default = nil)
  if valid_610326 != nil:
    section.add "X-Amz-Algorithm", valid_610326
  var valid_610327 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610327 = validateParameter(valid_610327, JString, required = false,
                                 default = nil)
  if valid_610327 != nil:
    section.add "X-Amz-SignedHeaders", valid_610327
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610328: Call_GetSimulateCustomPolicy_610306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_610328.validator(path, query, header, formData, body)
  let scheme = call_610328.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610328.url(scheme.get, call_610328.host, call_610328.base,
                         call_610328.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610328, url, valid)

proc call*(call_610329: Call_GetSimulateCustomPolicy_610306;
          PolicyInputList: JsonNode; ActionNames: JsonNode; Marker: string = "";
          ResourceOwner: string = ""; MaxItems: int = 0; ResourceArns: JsonNode = nil;
          ResourcePolicy: string = ""; CallerArn: string = "";
          ResourceHandlingOption: string = "";
          Action: string = "SimulateCustomPolicy"; Version: string = "2010-05-08";
          ContextEntries: JsonNode = nil): Recallable =
  ## getSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  var query_610330 = newJObject()
  add(query_610330, "Marker", newJString(Marker))
  add(query_610330, "ResourceOwner", newJString(ResourceOwner))
  add(query_610330, "MaxItems", newJInt(MaxItems))
  if ResourceArns != nil:
    query_610330.add "ResourceArns", ResourceArns
  add(query_610330, "ResourcePolicy", newJString(ResourcePolicy))
  if PolicyInputList != nil:
    query_610330.add "PolicyInputList", PolicyInputList
  add(query_610330, "CallerArn", newJString(CallerArn))
  add(query_610330, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_610330, "Action", newJString(Action))
  add(query_610330, "Version", newJString(Version))
  if ActionNames != nil:
    query_610330.add "ActionNames", ActionNames
  if ContextEntries != nil:
    query_610330.add "ContextEntries", ContextEntries
  result = call_610329.call(nil, query_610330, nil, nil, nil)

var getSimulateCustomPolicy* = Call_GetSimulateCustomPolicy_610306(
    name: "getSimulateCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_GetSimulateCustomPolicy_610307, base: "/",
    url: url_GetSimulateCustomPolicy_610308, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulatePrincipalPolicy_610383 = ref object of OpenApiRestCall_605589
proc url_PostSimulatePrincipalPolicy_610385(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSimulatePrincipalPolicy_610384(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610386 = query.getOrDefault("Action")
  valid_610386 = validateParameter(valid_610386, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_610386 != nil:
    section.add "Action", valid_610386
  var valid_610387 = query.getOrDefault("Version")
  valid_610387 = validateParameter(valid_610387, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610387 != nil:
    section.add "Version", valid_610387
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610388 = header.getOrDefault("X-Amz-Signature")
  valid_610388 = validateParameter(valid_610388, JString, required = false,
                                 default = nil)
  if valid_610388 != nil:
    section.add "X-Amz-Signature", valid_610388
  var valid_610389 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610389 = validateParameter(valid_610389, JString, required = false,
                                 default = nil)
  if valid_610389 != nil:
    section.add "X-Amz-Content-Sha256", valid_610389
  var valid_610390 = header.getOrDefault("X-Amz-Date")
  valid_610390 = validateParameter(valid_610390, JString, required = false,
                                 default = nil)
  if valid_610390 != nil:
    section.add "X-Amz-Date", valid_610390
  var valid_610391 = header.getOrDefault("X-Amz-Credential")
  valid_610391 = validateParameter(valid_610391, JString, required = false,
                                 default = nil)
  if valid_610391 != nil:
    section.add "X-Amz-Credential", valid_610391
  var valid_610392 = header.getOrDefault("X-Amz-Security-Token")
  valid_610392 = validateParameter(valid_610392, JString, required = false,
                                 default = nil)
  if valid_610392 != nil:
    section.add "X-Amz-Security-Token", valid_610392
  var valid_610393 = header.getOrDefault("X-Amz-Algorithm")
  valid_610393 = validateParameter(valid_610393, JString, required = false,
                                 default = nil)
  if valid_610393 != nil:
    section.add "X-Amz-Algorithm", valid_610393
  var valid_610394 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610394 = validateParameter(valid_610394, JString, required = false,
                                 default = nil)
  if valid_610394 != nil:
    section.add "X-Amz-SignedHeaders", valid_610394
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  section = newJObject()
  var valid_610395 = formData.getOrDefault("ResourceArns")
  valid_610395 = validateParameter(valid_610395, JArray, required = false,
                                 default = nil)
  if valid_610395 != nil:
    section.add "ResourceArns", valid_610395
  var valid_610396 = formData.getOrDefault("ContextEntries")
  valid_610396 = validateParameter(valid_610396, JArray, required = false,
                                 default = nil)
  if valid_610396 != nil:
    section.add "ContextEntries", valid_610396
  var valid_610397 = formData.getOrDefault("CallerArn")
  valid_610397 = validateParameter(valid_610397, JString, required = false,
                                 default = nil)
  if valid_610397 != nil:
    section.add "CallerArn", valid_610397
  var valid_610398 = formData.getOrDefault("ResourceHandlingOption")
  valid_610398 = validateParameter(valid_610398, JString, required = false,
                                 default = nil)
  if valid_610398 != nil:
    section.add "ResourceHandlingOption", valid_610398
  var valid_610399 = formData.getOrDefault("Marker")
  valid_610399 = validateParameter(valid_610399, JString, required = false,
                                 default = nil)
  if valid_610399 != nil:
    section.add "Marker", valid_610399
  assert formData != nil, "formData argument is necessary due to required `PolicySourceArn` field"
  var valid_610400 = formData.getOrDefault("PolicySourceArn")
  valid_610400 = validateParameter(valid_610400, JString, required = true,
                                 default = nil)
  if valid_610400 != nil:
    section.add "PolicySourceArn", valid_610400
  var valid_610401 = formData.getOrDefault("ActionNames")
  valid_610401 = validateParameter(valid_610401, JArray, required = true, default = nil)
  if valid_610401 != nil:
    section.add "ActionNames", valid_610401
  var valid_610402 = formData.getOrDefault("MaxItems")
  valid_610402 = validateParameter(valid_610402, JInt, required = false, default = nil)
  if valid_610402 != nil:
    section.add "MaxItems", valid_610402
  var valid_610403 = formData.getOrDefault("ResourcePolicy")
  valid_610403 = validateParameter(valid_610403, JString, required = false,
                                 default = nil)
  if valid_610403 != nil:
    section.add "ResourcePolicy", valid_610403
  var valid_610404 = formData.getOrDefault("PolicyInputList")
  valid_610404 = validateParameter(valid_610404, JArray, required = false,
                                 default = nil)
  if valid_610404 != nil:
    section.add "PolicyInputList", valid_610404
  var valid_610405 = formData.getOrDefault("ResourceOwner")
  valid_610405 = validateParameter(valid_610405, JString, required = false,
                                 default = nil)
  if valid_610405 != nil:
    section.add "ResourceOwner", valid_610405
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610406: Call_PostSimulatePrincipalPolicy_610383; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_610406.validator(path, query, header, formData, body)
  let scheme = call_610406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610406.url(scheme.get, call_610406.host, call_610406.base,
                         call_610406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610406, url, valid)

proc call*(call_610407: Call_PostSimulatePrincipalPolicy_610383;
          PolicySourceArn: string; ActionNames: JsonNode;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceHandlingOption: string = "";
          Marker: string = ""; Action: string = "SimulatePrincipalPolicy";
          MaxItems: int = 0; ResourcePolicy: string = "";
          Version: string = "2010-05-08"; PolicyInputList: JsonNode = nil;
          ResourceOwner: string = ""): Recallable =
  ## postSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  var query_610408 = newJObject()
  var formData_610409 = newJObject()
  if ResourceArns != nil:
    formData_610409.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_610409.add "ContextEntries", ContextEntries
  add(formData_610409, "CallerArn", newJString(CallerArn))
  add(formData_610409, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  add(formData_610409, "Marker", newJString(Marker))
  add(formData_610409, "PolicySourceArn", newJString(PolicySourceArn))
  if ActionNames != nil:
    formData_610409.add "ActionNames", ActionNames
  add(query_610408, "Action", newJString(Action))
  add(formData_610409, "MaxItems", newJInt(MaxItems))
  add(formData_610409, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_610408, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_610409.add "PolicyInputList", PolicyInputList
  add(formData_610409, "ResourceOwner", newJString(ResourceOwner))
  result = call_610407.call(nil, query_610408, nil, formData_610409, nil)

var postSimulatePrincipalPolicy* = Call_PostSimulatePrincipalPolicy_610383(
    name: "postSimulatePrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_PostSimulatePrincipalPolicy_610384, base: "/",
    url: url_PostSimulatePrincipalPolicy_610385,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulatePrincipalPolicy_610357 = ref object of OpenApiRestCall_605589
proc url_GetSimulatePrincipalPolicy_610359(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSimulatePrincipalPolicy_610358(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  section = newJObject()
  var valid_610360 = query.getOrDefault("Marker")
  valid_610360 = validateParameter(valid_610360, JString, required = false,
                                 default = nil)
  if valid_610360 != nil:
    section.add "Marker", valid_610360
  var valid_610361 = query.getOrDefault("ResourceOwner")
  valid_610361 = validateParameter(valid_610361, JString, required = false,
                                 default = nil)
  if valid_610361 != nil:
    section.add "ResourceOwner", valid_610361
  assert query != nil,
        "query argument is necessary due to required `PolicySourceArn` field"
  var valid_610362 = query.getOrDefault("PolicySourceArn")
  valid_610362 = validateParameter(valid_610362, JString, required = true,
                                 default = nil)
  if valid_610362 != nil:
    section.add "PolicySourceArn", valid_610362
  var valid_610363 = query.getOrDefault("MaxItems")
  valid_610363 = validateParameter(valid_610363, JInt, required = false, default = nil)
  if valid_610363 != nil:
    section.add "MaxItems", valid_610363
  var valid_610364 = query.getOrDefault("ResourceArns")
  valid_610364 = validateParameter(valid_610364, JArray, required = false,
                                 default = nil)
  if valid_610364 != nil:
    section.add "ResourceArns", valid_610364
  var valid_610365 = query.getOrDefault("ResourcePolicy")
  valid_610365 = validateParameter(valid_610365, JString, required = false,
                                 default = nil)
  if valid_610365 != nil:
    section.add "ResourcePolicy", valid_610365
  var valid_610366 = query.getOrDefault("PolicyInputList")
  valid_610366 = validateParameter(valid_610366, JArray, required = false,
                                 default = nil)
  if valid_610366 != nil:
    section.add "PolicyInputList", valid_610366
  var valid_610367 = query.getOrDefault("CallerArn")
  valid_610367 = validateParameter(valid_610367, JString, required = false,
                                 default = nil)
  if valid_610367 != nil:
    section.add "CallerArn", valid_610367
  var valid_610368 = query.getOrDefault("ResourceHandlingOption")
  valid_610368 = validateParameter(valid_610368, JString, required = false,
                                 default = nil)
  if valid_610368 != nil:
    section.add "ResourceHandlingOption", valid_610368
  var valid_610369 = query.getOrDefault("Action")
  valid_610369 = validateParameter(valid_610369, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_610369 != nil:
    section.add "Action", valid_610369
  var valid_610370 = query.getOrDefault("Version")
  valid_610370 = validateParameter(valid_610370, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610370 != nil:
    section.add "Version", valid_610370
  var valid_610371 = query.getOrDefault("ActionNames")
  valid_610371 = validateParameter(valid_610371, JArray, required = true, default = nil)
  if valid_610371 != nil:
    section.add "ActionNames", valid_610371
  var valid_610372 = query.getOrDefault("ContextEntries")
  valid_610372 = validateParameter(valid_610372, JArray, required = false,
                                 default = nil)
  if valid_610372 != nil:
    section.add "ContextEntries", valid_610372
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610373 = header.getOrDefault("X-Amz-Signature")
  valid_610373 = validateParameter(valid_610373, JString, required = false,
                                 default = nil)
  if valid_610373 != nil:
    section.add "X-Amz-Signature", valid_610373
  var valid_610374 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610374 = validateParameter(valid_610374, JString, required = false,
                                 default = nil)
  if valid_610374 != nil:
    section.add "X-Amz-Content-Sha256", valid_610374
  var valid_610375 = header.getOrDefault("X-Amz-Date")
  valid_610375 = validateParameter(valid_610375, JString, required = false,
                                 default = nil)
  if valid_610375 != nil:
    section.add "X-Amz-Date", valid_610375
  var valid_610376 = header.getOrDefault("X-Amz-Credential")
  valid_610376 = validateParameter(valid_610376, JString, required = false,
                                 default = nil)
  if valid_610376 != nil:
    section.add "X-Amz-Credential", valid_610376
  var valid_610377 = header.getOrDefault("X-Amz-Security-Token")
  valid_610377 = validateParameter(valid_610377, JString, required = false,
                                 default = nil)
  if valid_610377 != nil:
    section.add "X-Amz-Security-Token", valid_610377
  var valid_610378 = header.getOrDefault("X-Amz-Algorithm")
  valid_610378 = validateParameter(valid_610378, JString, required = false,
                                 default = nil)
  if valid_610378 != nil:
    section.add "X-Amz-Algorithm", valid_610378
  var valid_610379 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610379 = validateParameter(valid_610379, JString, required = false,
                                 default = nil)
  if valid_610379 != nil:
    section.add "X-Amz-SignedHeaders", valid_610379
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610380: Call_GetSimulatePrincipalPolicy_610357; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_610380.validator(path, query, header, formData, body)
  let scheme = call_610380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610380.url(scheme.get, call_610380.host, call_610380.base,
                         call_610380.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610380, url, valid)

proc call*(call_610381: Call_GetSimulatePrincipalPolicy_610357;
          PolicySourceArn: string; ActionNames: JsonNode; Marker: string = "";
          ResourceOwner: string = ""; MaxItems: int = 0; ResourceArns: JsonNode = nil;
          ResourcePolicy: string = ""; PolicyInputList: JsonNode = nil;
          CallerArn: string = ""; ResourceHandlingOption: string = "";
          Action: string = "SimulatePrincipalPolicy";
          Version: string = "2010-05-08"; ContextEntries: JsonNode = nil): Recallable =
  ## getSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  var query_610382 = newJObject()
  add(query_610382, "Marker", newJString(Marker))
  add(query_610382, "ResourceOwner", newJString(ResourceOwner))
  add(query_610382, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_610382, "MaxItems", newJInt(MaxItems))
  if ResourceArns != nil:
    query_610382.add "ResourceArns", ResourceArns
  add(query_610382, "ResourcePolicy", newJString(ResourcePolicy))
  if PolicyInputList != nil:
    query_610382.add "PolicyInputList", PolicyInputList
  add(query_610382, "CallerArn", newJString(CallerArn))
  add(query_610382, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_610382, "Action", newJString(Action))
  add(query_610382, "Version", newJString(Version))
  if ActionNames != nil:
    query_610382.add "ActionNames", ActionNames
  if ContextEntries != nil:
    query_610382.add "ContextEntries", ContextEntries
  result = call_610381.call(nil, query_610382, nil, nil, nil)

var getSimulatePrincipalPolicy* = Call_GetSimulatePrincipalPolicy_610357(
    name: "getSimulatePrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_GetSimulatePrincipalPolicy_610358, base: "/",
    url: url_GetSimulatePrincipalPolicy_610359,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagRole_610427 = ref object of OpenApiRestCall_605589
proc url_PostTagRole_610429(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTagRole_610428(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610430 = query.getOrDefault("Action")
  valid_610430 = validateParameter(valid_610430, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_610430 != nil:
    section.add "Action", valid_610430
  var valid_610431 = query.getOrDefault("Version")
  valid_610431 = validateParameter(valid_610431, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610431 != nil:
    section.add "Version", valid_610431
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610432 = header.getOrDefault("X-Amz-Signature")
  valid_610432 = validateParameter(valid_610432, JString, required = false,
                                 default = nil)
  if valid_610432 != nil:
    section.add "X-Amz-Signature", valid_610432
  var valid_610433 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610433 = validateParameter(valid_610433, JString, required = false,
                                 default = nil)
  if valid_610433 != nil:
    section.add "X-Amz-Content-Sha256", valid_610433
  var valid_610434 = header.getOrDefault("X-Amz-Date")
  valid_610434 = validateParameter(valid_610434, JString, required = false,
                                 default = nil)
  if valid_610434 != nil:
    section.add "X-Amz-Date", valid_610434
  var valid_610435 = header.getOrDefault("X-Amz-Credential")
  valid_610435 = validateParameter(valid_610435, JString, required = false,
                                 default = nil)
  if valid_610435 != nil:
    section.add "X-Amz-Credential", valid_610435
  var valid_610436 = header.getOrDefault("X-Amz-Security-Token")
  valid_610436 = validateParameter(valid_610436, JString, required = false,
                                 default = nil)
  if valid_610436 != nil:
    section.add "X-Amz-Security-Token", valid_610436
  var valid_610437 = header.getOrDefault("X-Amz-Algorithm")
  valid_610437 = validateParameter(valid_610437, JString, required = false,
                                 default = nil)
  if valid_610437 != nil:
    section.add "X-Amz-Algorithm", valid_610437
  var valid_610438 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610438 = validateParameter(valid_610438, JString, required = false,
                                 default = nil)
  if valid_610438 != nil:
    section.add "X-Amz-SignedHeaders", valid_610438
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_610439 = formData.getOrDefault("RoleName")
  valid_610439 = validateParameter(valid_610439, JString, required = true,
                                 default = nil)
  if valid_610439 != nil:
    section.add "RoleName", valid_610439
  var valid_610440 = formData.getOrDefault("Tags")
  valid_610440 = validateParameter(valid_610440, JArray, required = true, default = nil)
  if valid_610440 != nil:
    section.add "Tags", valid_610440
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610441: Call_PostTagRole_610427; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610441.validator(path, query, header, formData, body)
  let scheme = call_610441.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610441.url(scheme.get, call_610441.host, call_610441.base,
                         call_610441.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610441, url, valid)

proc call*(call_610442: Call_PostTagRole_610427; RoleName: string; Tags: JsonNode;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## postTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Version: string (required)
  var query_610443 = newJObject()
  var formData_610444 = newJObject()
  add(formData_610444, "RoleName", newJString(RoleName))
  add(query_610443, "Action", newJString(Action))
  if Tags != nil:
    formData_610444.add "Tags", Tags
  add(query_610443, "Version", newJString(Version))
  result = call_610442.call(nil, query_610443, nil, formData_610444, nil)

var postTagRole* = Call_PostTagRole_610427(name: "postTagRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagRole",
                                        validator: validate_PostTagRole_610428,
                                        base: "/", url: url_PostTagRole_610429,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagRole_610410 = ref object of OpenApiRestCall_605589
proc url_GetTagRole_610412(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTagRole_610411(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_610413 = query.getOrDefault("Tags")
  valid_610413 = validateParameter(valid_610413, JArray, required = true, default = nil)
  if valid_610413 != nil:
    section.add "Tags", valid_610413
  var valid_610414 = query.getOrDefault("RoleName")
  valid_610414 = validateParameter(valid_610414, JString, required = true,
                                 default = nil)
  if valid_610414 != nil:
    section.add "RoleName", valid_610414
  var valid_610415 = query.getOrDefault("Action")
  valid_610415 = validateParameter(valid_610415, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_610415 != nil:
    section.add "Action", valid_610415
  var valid_610416 = query.getOrDefault("Version")
  valid_610416 = validateParameter(valid_610416, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610416 != nil:
    section.add "Version", valid_610416
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610417 = header.getOrDefault("X-Amz-Signature")
  valid_610417 = validateParameter(valid_610417, JString, required = false,
                                 default = nil)
  if valid_610417 != nil:
    section.add "X-Amz-Signature", valid_610417
  var valid_610418 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610418 = validateParameter(valid_610418, JString, required = false,
                                 default = nil)
  if valid_610418 != nil:
    section.add "X-Amz-Content-Sha256", valid_610418
  var valid_610419 = header.getOrDefault("X-Amz-Date")
  valid_610419 = validateParameter(valid_610419, JString, required = false,
                                 default = nil)
  if valid_610419 != nil:
    section.add "X-Amz-Date", valid_610419
  var valid_610420 = header.getOrDefault("X-Amz-Credential")
  valid_610420 = validateParameter(valid_610420, JString, required = false,
                                 default = nil)
  if valid_610420 != nil:
    section.add "X-Amz-Credential", valid_610420
  var valid_610421 = header.getOrDefault("X-Amz-Security-Token")
  valid_610421 = validateParameter(valid_610421, JString, required = false,
                                 default = nil)
  if valid_610421 != nil:
    section.add "X-Amz-Security-Token", valid_610421
  var valid_610422 = header.getOrDefault("X-Amz-Algorithm")
  valid_610422 = validateParameter(valid_610422, JString, required = false,
                                 default = nil)
  if valid_610422 != nil:
    section.add "X-Amz-Algorithm", valid_610422
  var valid_610423 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610423 = validateParameter(valid_610423, JString, required = false,
                                 default = nil)
  if valid_610423 != nil:
    section.add "X-Amz-SignedHeaders", valid_610423
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610424: Call_GetTagRole_610410; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610424.validator(path, query, header, formData, body)
  let scheme = call_610424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610424.url(scheme.get, call_610424.host, call_610424.base,
                         call_610424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610424, url, valid)

proc call*(call_610425: Call_GetTagRole_610410; Tags: JsonNode; RoleName: string;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## getTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610426 = newJObject()
  if Tags != nil:
    query_610426.add "Tags", Tags
  add(query_610426, "RoleName", newJString(RoleName))
  add(query_610426, "Action", newJString(Action))
  add(query_610426, "Version", newJString(Version))
  result = call_610425.call(nil, query_610426, nil, nil, nil)

var getTagRole* = Call_GetTagRole_610410(name: "getTagRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagRole",
                                      validator: validate_GetTagRole_610411,
                                      base: "/", url: url_GetTagRole_610412,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagUser_610462 = ref object of OpenApiRestCall_605589
proc url_PostTagUser_610464(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTagUser_610463(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610465 = query.getOrDefault("Action")
  valid_610465 = validateParameter(valid_610465, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_610465 != nil:
    section.add "Action", valid_610465
  var valid_610466 = query.getOrDefault("Version")
  valid_610466 = validateParameter(valid_610466, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610466 != nil:
    section.add "Version", valid_610466
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610467 = header.getOrDefault("X-Amz-Signature")
  valid_610467 = validateParameter(valid_610467, JString, required = false,
                                 default = nil)
  if valid_610467 != nil:
    section.add "X-Amz-Signature", valid_610467
  var valid_610468 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610468 = validateParameter(valid_610468, JString, required = false,
                                 default = nil)
  if valid_610468 != nil:
    section.add "X-Amz-Content-Sha256", valid_610468
  var valid_610469 = header.getOrDefault("X-Amz-Date")
  valid_610469 = validateParameter(valid_610469, JString, required = false,
                                 default = nil)
  if valid_610469 != nil:
    section.add "X-Amz-Date", valid_610469
  var valid_610470 = header.getOrDefault("X-Amz-Credential")
  valid_610470 = validateParameter(valid_610470, JString, required = false,
                                 default = nil)
  if valid_610470 != nil:
    section.add "X-Amz-Credential", valid_610470
  var valid_610471 = header.getOrDefault("X-Amz-Security-Token")
  valid_610471 = validateParameter(valid_610471, JString, required = false,
                                 default = nil)
  if valid_610471 != nil:
    section.add "X-Amz-Security-Token", valid_610471
  var valid_610472 = header.getOrDefault("X-Amz-Algorithm")
  valid_610472 = validateParameter(valid_610472, JString, required = false,
                                 default = nil)
  if valid_610472 != nil:
    section.add "X-Amz-Algorithm", valid_610472
  var valid_610473 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610473 = validateParameter(valid_610473, JString, required = false,
                                 default = nil)
  if valid_610473 != nil:
    section.add "X-Amz-SignedHeaders", valid_610473
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_610474 = formData.getOrDefault("UserName")
  valid_610474 = validateParameter(valid_610474, JString, required = true,
                                 default = nil)
  if valid_610474 != nil:
    section.add "UserName", valid_610474
  var valid_610475 = formData.getOrDefault("Tags")
  valid_610475 = validateParameter(valid_610475, JArray, required = true, default = nil)
  if valid_610475 != nil:
    section.add "Tags", valid_610475
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610476: Call_PostTagUser_610462; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610476.validator(path, query, header, formData, body)
  let scheme = call_610476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610476.url(scheme.get, call_610476.host, call_610476.base,
                         call_610476.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610476, url, valid)

proc call*(call_610477: Call_PostTagUser_610462; UserName: string; Tags: JsonNode;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## postTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Version: string (required)
  var query_610478 = newJObject()
  var formData_610479 = newJObject()
  add(formData_610479, "UserName", newJString(UserName))
  add(query_610478, "Action", newJString(Action))
  if Tags != nil:
    formData_610479.add "Tags", Tags
  add(query_610478, "Version", newJString(Version))
  result = call_610477.call(nil, query_610478, nil, formData_610479, nil)

var postTagUser* = Call_PostTagUser_610462(name: "postTagUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagUser",
                                        validator: validate_PostTagUser_610463,
                                        base: "/", url: url_PostTagUser_610464,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagUser_610445 = ref object of OpenApiRestCall_605589
proc url_GetTagUser_610447(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTagUser_610446(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_610448 = query.getOrDefault("UserName")
  valid_610448 = validateParameter(valid_610448, JString, required = true,
                                 default = nil)
  if valid_610448 != nil:
    section.add "UserName", valid_610448
  var valid_610449 = query.getOrDefault("Tags")
  valid_610449 = validateParameter(valid_610449, JArray, required = true, default = nil)
  if valid_610449 != nil:
    section.add "Tags", valid_610449
  var valid_610450 = query.getOrDefault("Action")
  valid_610450 = validateParameter(valid_610450, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_610450 != nil:
    section.add "Action", valid_610450
  var valid_610451 = query.getOrDefault("Version")
  valid_610451 = validateParameter(valid_610451, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610451 != nil:
    section.add "Version", valid_610451
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610452 = header.getOrDefault("X-Amz-Signature")
  valid_610452 = validateParameter(valid_610452, JString, required = false,
                                 default = nil)
  if valid_610452 != nil:
    section.add "X-Amz-Signature", valid_610452
  var valid_610453 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610453 = validateParameter(valid_610453, JString, required = false,
                                 default = nil)
  if valid_610453 != nil:
    section.add "X-Amz-Content-Sha256", valid_610453
  var valid_610454 = header.getOrDefault("X-Amz-Date")
  valid_610454 = validateParameter(valid_610454, JString, required = false,
                                 default = nil)
  if valid_610454 != nil:
    section.add "X-Amz-Date", valid_610454
  var valid_610455 = header.getOrDefault("X-Amz-Credential")
  valid_610455 = validateParameter(valid_610455, JString, required = false,
                                 default = nil)
  if valid_610455 != nil:
    section.add "X-Amz-Credential", valid_610455
  var valid_610456 = header.getOrDefault("X-Amz-Security-Token")
  valid_610456 = validateParameter(valid_610456, JString, required = false,
                                 default = nil)
  if valid_610456 != nil:
    section.add "X-Amz-Security-Token", valid_610456
  var valid_610457 = header.getOrDefault("X-Amz-Algorithm")
  valid_610457 = validateParameter(valid_610457, JString, required = false,
                                 default = nil)
  if valid_610457 != nil:
    section.add "X-Amz-Algorithm", valid_610457
  var valid_610458 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610458 = validateParameter(valid_610458, JString, required = false,
                                 default = nil)
  if valid_610458 != nil:
    section.add "X-Amz-SignedHeaders", valid_610458
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610459: Call_GetTagUser_610445; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610459.validator(path, query, header, formData, body)
  let scheme = call_610459.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610459.url(scheme.get, call_610459.host, call_610459.base,
                         call_610459.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610459, url, valid)

proc call*(call_610460: Call_GetTagUser_610445; UserName: string; Tags: JsonNode;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## getTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610461 = newJObject()
  add(query_610461, "UserName", newJString(UserName))
  if Tags != nil:
    query_610461.add "Tags", Tags
  add(query_610461, "Action", newJString(Action))
  add(query_610461, "Version", newJString(Version))
  result = call_610460.call(nil, query_610461, nil, nil, nil)

var getTagUser* = Call_GetTagUser_610445(name: "getTagUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagUser",
                                      validator: validate_GetTagUser_610446,
                                      base: "/", url: url_GetTagUser_610447,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagRole_610497 = ref object of OpenApiRestCall_605589
proc url_PostUntagRole_610499(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUntagRole_610498(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610500 = query.getOrDefault("Action")
  valid_610500 = validateParameter(valid_610500, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_610500 != nil:
    section.add "Action", valid_610500
  var valid_610501 = query.getOrDefault("Version")
  valid_610501 = validateParameter(valid_610501, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610501 != nil:
    section.add "Version", valid_610501
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610502 = header.getOrDefault("X-Amz-Signature")
  valid_610502 = validateParameter(valid_610502, JString, required = false,
                                 default = nil)
  if valid_610502 != nil:
    section.add "X-Amz-Signature", valid_610502
  var valid_610503 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610503 = validateParameter(valid_610503, JString, required = false,
                                 default = nil)
  if valid_610503 != nil:
    section.add "X-Amz-Content-Sha256", valid_610503
  var valid_610504 = header.getOrDefault("X-Amz-Date")
  valid_610504 = validateParameter(valid_610504, JString, required = false,
                                 default = nil)
  if valid_610504 != nil:
    section.add "X-Amz-Date", valid_610504
  var valid_610505 = header.getOrDefault("X-Amz-Credential")
  valid_610505 = validateParameter(valid_610505, JString, required = false,
                                 default = nil)
  if valid_610505 != nil:
    section.add "X-Amz-Credential", valid_610505
  var valid_610506 = header.getOrDefault("X-Amz-Security-Token")
  valid_610506 = validateParameter(valid_610506, JString, required = false,
                                 default = nil)
  if valid_610506 != nil:
    section.add "X-Amz-Security-Token", valid_610506
  var valid_610507 = header.getOrDefault("X-Amz-Algorithm")
  valid_610507 = validateParameter(valid_610507, JString, required = false,
                                 default = nil)
  if valid_610507 != nil:
    section.add "X-Amz-Algorithm", valid_610507
  var valid_610508 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610508 = validateParameter(valid_610508, JString, required = false,
                                 default = nil)
  if valid_610508 != nil:
    section.add "X-Amz-SignedHeaders", valid_610508
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_610509 = formData.getOrDefault("TagKeys")
  valid_610509 = validateParameter(valid_610509, JArray, required = true, default = nil)
  if valid_610509 != nil:
    section.add "TagKeys", valid_610509
  var valid_610510 = formData.getOrDefault("RoleName")
  valid_610510 = validateParameter(valid_610510, JString, required = true,
                                 default = nil)
  if valid_610510 != nil:
    section.add "RoleName", valid_610510
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610511: Call_PostUntagRole_610497; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_610511.validator(path, query, header, formData, body)
  let scheme = call_610511.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610511.url(scheme.get, call_610511.host, call_610511.base,
                         call_610511.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610511, url, valid)

proc call*(call_610512: Call_PostUntagRole_610497; TagKeys: JsonNode;
          RoleName: string; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610513 = newJObject()
  var formData_610514 = newJObject()
  if TagKeys != nil:
    formData_610514.add "TagKeys", TagKeys
  add(formData_610514, "RoleName", newJString(RoleName))
  add(query_610513, "Action", newJString(Action))
  add(query_610513, "Version", newJString(Version))
  result = call_610512.call(nil, query_610513, nil, formData_610514, nil)

var postUntagRole* = Call_PostUntagRole_610497(name: "postUntagRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_PostUntagRole_610498,
    base: "/", url: url_PostUntagRole_610499, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagRole_610480 = ref object of OpenApiRestCall_605589
proc url_GetUntagRole_610482(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUntagRole_610481(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `TagKeys` field"
  var valid_610483 = query.getOrDefault("TagKeys")
  valid_610483 = validateParameter(valid_610483, JArray, required = true, default = nil)
  if valid_610483 != nil:
    section.add "TagKeys", valid_610483
  var valid_610484 = query.getOrDefault("RoleName")
  valid_610484 = validateParameter(valid_610484, JString, required = true,
                                 default = nil)
  if valid_610484 != nil:
    section.add "RoleName", valid_610484
  var valid_610485 = query.getOrDefault("Action")
  valid_610485 = validateParameter(valid_610485, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_610485 != nil:
    section.add "Action", valid_610485
  var valid_610486 = query.getOrDefault("Version")
  valid_610486 = validateParameter(valid_610486, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610486 != nil:
    section.add "Version", valid_610486
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610487 = header.getOrDefault("X-Amz-Signature")
  valid_610487 = validateParameter(valid_610487, JString, required = false,
                                 default = nil)
  if valid_610487 != nil:
    section.add "X-Amz-Signature", valid_610487
  var valid_610488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610488 = validateParameter(valid_610488, JString, required = false,
                                 default = nil)
  if valid_610488 != nil:
    section.add "X-Amz-Content-Sha256", valid_610488
  var valid_610489 = header.getOrDefault("X-Amz-Date")
  valid_610489 = validateParameter(valid_610489, JString, required = false,
                                 default = nil)
  if valid_610489 != nil:
    section.add "X-Amz-Date", valid_610489
  var valid_610490 = header.getOrDefault("X-Amz-Credential")
  valid_610490 = validateParameter(valid_610490, JString, required = false,
                                 default = nil)
  if valid_610490 != nil:
    section.add "X-Amz-Credential", valid_610490
  var valid_610491 = header.getOrDefault("X-Amz-Security-Token")
  valid_610491 = validateParameter(valid_610491, JString, required = false,
                                 default = nil)
  if valid_610491 != nil:
    section.add "X-Amz-Security-Token", valid_610491
  var valid_610492 = header.getOrDefault("X-Amz-Algorithm")
  valid_610492 = validateParameter(valid_610492, JString, required = false,
                                 default = nil)
  if valid_610492 != nil:
    section.add "X-Amz-Algorithm", valid_610492
  var valid_610493 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610493 = validateParameter(valid_610493, JString, required = false,
                                 default = nil)
  if valid_610493 != nil:
    section.add "X-Amz-SignedHeaders", valid_610493
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610494: Call_GetUntagRole_610480; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_610494.validator(path, query, header, formData, body)
  let scheme = call_610494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610494.url(scheme.get, call_610494.host, call_610494.base,
                         call_610494.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610494, url, valid)

proc call*(call_610495: Call_GetUntagRole_610480; TagKeys: JsonNode;
          RoleName: string; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610496 = newJObject()
  if TagKeys != nil:
    query_610496.add "TagKeys", TagKeys
  add(query_610496, "RoleName", newJString(RoleName))
  add(query_610496, "Action", newJString(Action))
  add(query_610496, "Version", newJString(Version))
  result = call_610495.call(nil, query_610496, nil, nil, nil)

var getUntagRole* = Call_GetUntagRole_610480(name: "getUntagRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_GetUntagRole_610481, base: "/",
    url: url_GetUntagRole_610482, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagUser_610532 = ref object of OpenApiRestCall_605589
proc url_PostUntagUser_610534(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUntagUser_610533(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610535 = query.getOrDefault("Action")
  valid_610535 = validateParameter(valid_610535, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_610535 != nil:
    section.add "Action", valid_610535
  var valid_610536 = query.getOrDefault("Version")
  valid_610536 = validateParameter(valid_610536, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610536 != nil:
    section.add "Version", valid_610536
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610537 = header.getOrDefault("X-Amz-Signature")
  valid_610537 = validateParameter(valid_610537, JString, required = false,
                                 default = nil)
  if valid_610537 != nil:
    section.add "X-Amz-Signature", valid_610537
  var valid_610538 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610538 = validateParameter(valid_610538, JString, required = false,
                                 default = nil)
  if valid_610538 != nil:
    section.add "X-Amz-Content-Sha256", valid_610538
  var valid_610539 = header.getOrDefault("X-Amz-Date")
  valid_610539 = validateParameter(valid_610539, JString, required = false,
                                 default = nil)
  if valid_610539 != nil:
    section.add "X-Amz-Date", valid_610539
  var valid_610540 = header.getOrDefault("X-Amz-Credential")
  valid_610540 = validateParameter(valid_610540, JString, required = false,
                                 default = nil)
  if valid_610540 != nil:
    section.add "X-Amz-Credential", valid_610540
  var valid_610541 = header.getOrDefault("X-Amz-Security-Token")
  valid_610541 = validateParameter(valid_610541, JString, required = false,
                                 default = nil)
  if valid_610541 != nil:
    section.add "X-Amz-Security-Token", valid_610541
  var valid_610542 = header.getOrDefault("X-Amz-Algorithm")
  valid_610542 = validateParameter(valid_610542, JString, required = false,
                                 default = nil)
  if valid_610542 != nil:
    section.add "X-Amz-Algorithm", valid_610542
  var valid_610543 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610543 = validateParameter(valid_610543, JString, required = false,
                                 default = nil)
  if valid_610543 != nil:
    section.add "X-Amz-SignedHeaders", valid_610543
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_610544 = formData.getOrDefault("TagKeys")
  valid_610544 = validateParameter(valid_610544, JArray, required = true, default = nil)
  if valid_610544 != nil:
    section.add "TagKeys", valid_610544
  var valid_610545 = formData.getOrDefault("UserName")
  valid_610545 = validateParameter(valid_610545, JString, required = true,
                                 default = nil)
  if valid_610545 != nil:
    section.add "UserName", valid_610545
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610546: Call_PostUntagUser_610532; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_610546.validator(path, query, header, formData, body)
  let scheme = call_610546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610546.url(scheme.get, call_610546.host, call_610546.base,
                         call_610546.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610546, url, valid)

proc call*(call_610547: Call_PostUntagUser_610532; TagKeys: JsonNode;
          UserName: string; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610548 = newJObject()
  var formData_610549 = newJObject()
  if TagKeys != nil:
    formData_610549.add "TagKeys", TagKeys
  add(formData_610549, "UserName", newJString(UserName))
  add(query_610548, "Action", newJString(Action))
  add(query_610548, "Version", newJString(Version))
  result = call_610547.call(nil, query_610548, nil, formData_610549, nil)

var postUntagUser* = Call_PostUntagUser_610532(name: "postUntagUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_PostUntagUser_610533,
    base: "/", url: url_PostUntagUser_610534, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagUser_610515 = ref object of OpenApiRestCall_605589
proc url_GetUntagUser_610517(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUntagUser_610516(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_610518 = query.getOrDefault("UserName")
  valid_610518 = validateParameter(valid_610518, JString, required = true,
                                 default = nil)
  if valid_610518 != nil:
    section.add "UserName", valid_610518
  var valid_610519 = query.getOrDefault("TagKeys")
  valid_610519 = validateParameter(valid_610519, JArray, required = true, default = nil)
  if valid_610519 != nil:
    section.add "TagKeys", valid_610519
  var valid_610520 = query.getOrDefault("Action")
  valid_610520 = validateParameter(valid_610520, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_610520 != nil:
    section.add "Action", valid_610520
  var valid_610521 = query.getOrDefault("Version")
  valid_610521 = validateParameter(valid_610521, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610521 != nil:
    section.add "Version", valid_610521
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610522 = header.getOrDefault("X-Amz-Signature")
  valid_610522 = validateParameter(valid_610522, JString, required = false,
                                 default = nil)
  if valid_610522 != nil:
    section.add "X-Amz-Signature", valid_610522
  var valid_610523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610523 = validateParameter(valid_610523, JString, required = false,
                                 default = nil)
  if valid_610523 != nil:
    section.add "X-Amz-Content-Sha256", valid_610523
  var valid_610524 = header.getOrDefault("X-Amz-Date")
  valid_610524 = validateParameter(valid_610524, JString, required = false,
                                 default = nil)
  if valid_610524 != nil:
    section.add "X-Amz-Date", valid_610524
  var valid_610525 = header.getOrDefault("X-Amz-Credential")
  valid_610525 = validateParameter(valid_610525, JString, required = false,
                                 default = nil)
  if valid_610525 != nil:
    section.add "X-Amz-Credential", valid_610525
  var valid_610526 = header.getOrDefault("X-Amz-Security-Token")
  valid_610526 = validateParameter(valid_610526, JString, required = false,
                                 default = nil)
  if valid_610526 != nil:
    section.add "X-Amz-Security-Token", valid_610526
  var valid_610527 = header.getOrDefault("X-Amz-Algorithm")
  valid_610527 = validateParameter(valid_610527, JString, required = false,
                                 default = nil)
  if valid_610527 != nil:
    section.add "X-Amz-Algorithm", valid_610527
  var valid_610528 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610528 = validateParameter(valid_610528, JString, required = false,
                                 default = nil)
  if valid_610528 != nil:
    section.add "X-Amz-SignedHeaders", valid_610528
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610529: Call_GetUntagUser_610515; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_610529.validator(path, query, header, formData, body)
  let scheme = call_610529.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610529.url(scheme.get, call_610529.host, call_610529.base,
                         call_610529.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610529, url, valid)

proc call*(call_610530: Call_GetUntagUser_610515; UserName: string;
          TagKeys: JsonNode; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610531 = newJObject()
  add(query_610531, "UserName", newJString(UserName))
  if TagKeys != nil:
    query_610531.add "TagKeys", TagKeys
  add(query_610531, "Action", newJString(Action))
  add(query_610531, "Version", newJString(Version))
  result = call_610530.call(nil, query_610531, nil, nil, nil)

var getUntagUser* = Call_GetUntagUser_610515(name: "getUntagUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_GetUntagUser_610516, base: "/",
    url: url_GetUntagUser_610517, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccessKey_610568 = ref object of OpenApiRestCall_605589
proc url_PostUpdateAccessKey_610570(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAccessKey_610569(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610571 = query.getOrDefault("Action")
  valid_610571 = validateParameter(valid_610571, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_610571 != nil:
    section.add "Action", valid_610571
  var valid_610572 = query.getOrDefault("Version")
  valid_610572 = validateParameter(valid_610572, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610572 != nil:
    section.add "Version", valid_610572
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610573 = header.getOrDefault("X-Amz-Signature")
  valid_610573 = validateParameter(valid_610573, JString, required = false,
                                 default = nil)
  if valid_610573 != nil:
    section.add "X-Amz-Signature", valid_610573
  var valid_610574 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610574 = validateParameter(valid_610574, JString, required = false,
                                 default = nil)
  if valid_610574 != nil:
    section.add "X-Amz-Content-Sha256", valid_610574
  var valid_610575 = header.getOrDefault("X-Amz-Date")
  valid_610575 = validateParameter(valid_610575, JString, required = false,
                                 default = nil)
  if valid_610575 != nil:
    section.add "X-Amz-Date", valid_610575
  var valid_610576 = header.getOrDefault("X-Amz-Credential")
  valid_610576 = validateParameter(valid_610576, JString, required = false,
                                 default = nil)
  if valid_610576 != nil:
    section.add "X-Amz-Credential", valid_610576
  var valid_610577 = header.getOrDefault("X-Amz-Security-Token")
  valid_610577 = validateParameter(valid_610577, JString, required = false,
                                 default = nil)
  if valid_610577 != nil:
    section.add "X-Amz-Security-Token", valid_610577
  var valid_610578 = header.getOrDefault("X-Amz-Algorithm")
  valid_610578 = validateParameter(valid_610578, JString, required = false,
                                 default = nil)
  if valid_610578 != nil:
    section.add "X-Amz-Algorithm", valid_610578
  var valid_610579 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610579 = validateParameter(valid_610579, JString, required = false,
                                 default = nil)
  if valid_610579 != nil:
    section.add "X-Amz-SignedHeaders", valid_610579
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_610580 = formData.getOrDefault("AccessKeyId")
  valid_610580 = validateParameter(valid_610580, JString, required = true,
                                 default = nil)
  if valid_610580 != nil:
    section.add "AccessKeyId", valid_610580
  var valid_610581 = formData.getOrDefault("UserName")
  valid_610581 = validateParameter(valid_610581, JString, required = false,
                                 default = nil)
  if valid_610581 != nil:
    section.add "UserName", valid_610581
  var valid_610582 = formData.getOrDefault("Status")
  valid_610582 = validateParameter(valid_610582, JString, required = true,
                                 default = newJString("Active"))
  if valid_610582 != nil:
    section.add "Status", valid_610582
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610583: Call_PostUpdateAccessKey_610568; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610583.validator(path, query, header, formData, body)
  let scheme = call_610583.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610583.url(scheme.get, call_610583.host, call_610583.base,
                         call_610583.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610583, url, valid)

proc call*(call_610584: Call_PostUpdateAccessKey_610568; AccessKeyId: string;
          UserName: string = ""; Action: string = "UpdateAccessKey";
          Status: string = "Active"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Version: string (required)
  var query_610585 = newJObject()
  var formData_610586 = newJObject()
  add(formData_610586, "AccessKeyId", newJString(AccessKeyId))
  add(formData_610586, "UserName", newJString(UserName))
  add(query_610585, "Action", newJString(Action))
  add(formData_610586, "Status", newJString(Status))
  add(query_610585, "Version", newJString(Version))
  result = call_610584.call(nil, query_610585, nil, formData_610586, nil)

var postUpdateAccessKey* = Call_PostUpdateAccessKey_610568(
    name: "postUpdateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccessKey",
    validator: validate_PostUpdateAccessKey_610569, base: "/",
    url: url_PostUpdateAccessKey_610570, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccessKey_610550 = ref object of OpenApiRestCall_605589
proc url_GetUpdateAccessKey_610552(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAccessKey_610551(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Action: JString (required)
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_610553 = query.getOrDefault("UserName")
  valid_610553 = validateParameter(valid_610553, JString, required = false,
                                 default = nil)
  if valid_610553 != nil:
    section.add "UserName", valid_610553
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_610554 = query.getOrDefault("Status")
  valid_610554 = validateParameter(valid_610554, JString, required = true,
                                 default = newJString("Active"))
  if valid_610554 != nil:
    section.add "Status", valid_610554
  var valid_610555 = query.getOrDefault("Action")
  valid_610555 = validateParameter(valid_610555, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_610555 != nil:
    section.add "Action", valid_610555
  var valid_610556 = query.getOrDefault("AccessKeyId")
  valid_610556 = validateParameter(valid_610556, JString, required = true,
                                 default = nil)
  if valid_610556 != nil:
    section.add "AccessKeyId", valid_610556
  var valid_610557 = query.getOrDefault("Version")
  valid_610557 = validateParameter(valid_610557, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610557 != nil:
    section.add "Version", valid_610557
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610558 = header.getOrDefault("X-Amz-Signature")
  valid_610558 = validateParameter(valid_610558, JString, required = false,
                                 default = nil)
  if valid_610558 != nil:
    section.add "X-Amz-Signature", valid_610558
  var valid_610559 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610559 = validateParameter(valid_610559, JString, required = false,
                                 default = nil)
  if valid_610559 != nil:
    section.add "X-Amz-Content-Sha256", valid_610559
  var valid_610560 = header.getOrDefault("X-Amz-Date")
  valid_610560 = validateParameter(valid_610560, JString, required = false,
                                 default = nil)
  if valid_610560 != nil:
    section.add "X-Amz-Date", valid_610560
  var valid_610561 = header.getOrDefault("X-Amz-Credential")
  valid_610561 = validateParameter(valid_610561, JString, required = false,
                                 default = nil)
  if valid_610561 != nil:
    section.add "X-Amz-Credential", valid_610561
  var valid_610562 = header.getOrDefault("X-Amz-Security-Token")
  valid_610562 = validateParameter(valid_610562, JString, required = false,
                                 default = nil)
  if valid_610562 != nil:
    section.add "X-Amz-Security-Token", valid_610562
  var valid_610563 = header.getOrDefault("X-Amz-Algorithm")
  valid_610563 = validateParameter(valid_610563, JString, required = false,
                                 default = nil)
  if valid_610563 != nil:
    section.add "X-Amz-Algorithm", valid_610563
  var valid_610564 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610564 = validateParameter(valid_610564, JString, required = false,
                                 default = nil)
  if valid_610564 != nil:
    section.add "X-Amz-SignedHeaders", valid_610564
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610565: Call_GetUpdateAccessKey_610550; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610565.validator(path, query, header, formData, body)
  let scheme = call_610565.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610565.url(scheme.get, call_610565.host, call_610565.base,
                         call_610565.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610565, url, valid)

proc call*(call_610566: Call_GetUpdateAccessKey_610550; AccessKeyId: string;
          UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_610567 = newJObject()
  add(query_610567, "UserName", newJString(UserName))
  add(query_610567, "Status", newJString(Status))
  add(query_610567, "Action", newJString(Action))
  add(query_610567, "AccessKeyId", newJString(AccessKeyId))
  add(query_610567, "Version", newJString(Version))
  result = call_610566.call(nil, query_610567, nil, nil, nil)

var getUpdateAccessKey* = Call_GetUpdateAccessKey_610550(
    name: "getUpdateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateAccessKey", validator: validate_GetUpdateAccessKey_610551,
    base: "/", url: url_GetUpdateAccessKey_610552,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountPasswordPolicy_610611 = ref object of OpenApiRestCall_605589
proc url_PostUpdateAccountPasswordPolicy_610613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAccountPasswordPolicy_610612(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610614 = query.getOrDefault("Action")
  valid_610614 = validateParameter(valid_610614, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_610614 != nil:
    section.add "Action", valid_610614
  var valid_610615 = query.getOrDefault("Version")
  valid_610615 = validateParameter(valid_610615, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610615 != nil:
    section.add "Version", valid_610615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610616 = header.getOrDefault("X-Amz-Signature")
  valid_610616 = validateParameter(valid_610616, JString, required = false,
                                 default = nil)
  if valid_610616 != nil:
    section.add "X-Amz-Signature", valid_610616
  var valid_610617 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610617 = validateParameter(valid_610617, JString, required = false,
                                 default = nil)
  if valid_610617 != nil:
    section.add "X-Amz-Content-Sha256", valid_610617
  var valid_610618 = header.getOrDefault("X-Amz-Date")
  valid_610618 = validateParameter(valid_610618, JString, required = false,
                                 default = nil)
  if valid_610618 != nil:
    section.add "X-Amz-Date", valid_610618
  var valid_610619 = header.getOrDefault("X-Amz-Credential")
  valid_610619 = validateParameter(valid_610619, JString, required = false,
                                 default = nil)
  if valid_610619 != nil:
    section.add "X-Amz-Credential", valid_610619
  var valid_610620 = header.getOrDefault("X-Amz-Security-Token")
  valid_610620 = validateParameter(valid_610620, JString, required = false,
                                 default = nil)
  if valid_610620 != nil:
    section.add "X-Amz-Security-Token", valid_610620
  var valid_610621 = header.getOrDefault("X-Amz-Algorithm")
  valid_610621 = validateParameter(valid_610621, JString, required = false,
                                 default = nil)
  if valid_610621 != nil:
    section.add "X-Amz-Algorithm", valid_610621
  var valid_610622 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610622 = validateParameter(valid_610622, JString, required = false,
                                 default = nil)
  if valid_610622 != nil:
    section.add "X-Amz-SignedHeaders", valid_610622
  result.add "header", section
  ## parameters in `formData` object:
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  section = newJObject()
  var valid_610623 = formData.getOrDefault("HardExpiry")
  valid_610623 = validateParameter(valid_610623, JBool, required = false, default = nil)
  if valid_610623 != nil:
    section.add "HardExpiry", valid_610623
  var valid_610624 = formData.getOrDefault("AllowUsersToChangePassword")
  valid_610624 = validateParameter(valid_610624, JBool, required = false, default = nil)
  if valid_610624 != nil:
    section.add "AllowUsersToChangePassword", valid_610624
  var valid_610625 = formData.getOrDefault("RequireLowercaseCharacters")
  valid_610625 = validateParameter(valid_610625, JBool, required = false, default = nil)
  if valid_610625 != nil:
    section.add "RequireLowercaseCharacters", valid_610625
  var valid_610626 = formData.getOrDefault("RequireNumbers")
  valid_610626 = validateParameter(valid_610626, JBool, required = false, default = nil)
  if valid_610626 != nil:
    section.add "RequireNumbers", valid_610626
  var valid_610627 = formData.getOrDefault("RequireUppercaseCharacters")
  valid_610627 = validateParameter(valid_610627, JBool, required = false, default = nil)
  if valid_610627 != nil:
    section.add "RequireUppercaseCharacters", valid_610627
  var valid_610628 = formData.getOrDefault("MaxPasswordAge")
  valid_610628 = validateParameter(valid_610628, JInt, required = false, default = nil)
  if valid_610628 != nil:
    section.add "MaxPasswordAge", valid_610628
  var valid_610629 = formData.getOrDefault("PasswordReusePrevention")
  valid_610629 = validateParameter(valid_610629, JInt, required = false, default = nil)
  if valid_610629 != nil:
    section.add "PasswordReusePrevention", valid_610629
  var valid_610630 = formData.getOrDefault("RequireSymbols")
  valid_610630 = validateParameter(valid_610630, JBool, required = false, default = nil)
  if valid_610630 != nil:
    section.add "RequireSymbols", valid_610630
  var valid_610631 = formData.getOrDefault("MinimumPasswordLength")
  valid_610631 = validateParameter(valid_610631, JInt, required = false, default = nil)
  if valid_610631 != nil:
    section.add "MinimumPasswordLength", valid_610631
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610632: Call_PostUpdateAccountPasswordPolicy_610611;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610632.validator(path, query, header, formData, body)
  let scheme = call_610632.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610632.url(scheme.get, call_610632.host, call_610632.base,
                         call_610632.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610632, url, valid)

proc call*(call_610633: Call_PostUpdateAccountPasswordPolicy_610611;
          HardExpiry: bool = false; AllowUsersToChangePassword: bool = false;
          RequireLowercaseCharacters: bool = false; RequireNumbers: bool = false;
          RequireUppercaseCharacters: bool = false; MaxPasswordAge: int = 0;
          Action: string = "UpdateAccountPasswordPolicy";
          PasswordReusePrevention: int = 0; Version: string = "2010-05-08";
          RequireSymbols: bool = false; MinimumPasswordLength: int = 0): Recallable =
  ## postUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Action: string (required)
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   Version: string (required)
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  var query_610634 = newJObject()
  var formData_610635 = newJObject()
  add(formData_610635, "HardExpiry", newJBool(HardExpiry))
  add(formData_610635, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(formData_610635, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(formData_610635, "RequireNumbers", newJBool(RequireNumbers))
  add(formData_610635, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(formData_610635, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_610634, "Action", newJString(Action))
  add(formData_610635, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_610634, "Version", newJString(Version))
  add(formData_610635, "RequireSymbols", newJBool(RequireSymbols))
  add(formData_610635, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  result = call_610633.call(nil, query_610634, nil, formData_610635, nil)

var postUpdateAccountPasswordPolicy* = Call_PostUpdateAccountPasswordPolicy_610611(
    name: "postUpdateAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_PostUpdateAccountPasswordPolicy_610612, base: "/",
    url: url_PostUpdateAccountPasswordPolicy_610613,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountPasswordPolicy_610587 = ref object of OpenApiRestCall_605589
proc url_GetUpdateAccountPasswordPolicy_610589(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAccountPasswordPolicy_610588(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   Action: JString (required)
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_610590 = query.getOrDefault("RequireUppercaseCharacters")
  valid_610590 = validateParameter(valid_610590, JBool, required = false, default = nil)
  if valid_610590 != nil:
    section.add "RequireUppercaseCharacters", valid_610590
  var valid_610591 = query.getOrDefault("MinimumPasswordLength")
  valid_610591 = validateParameter(valid_610591, JInt, required = false, default = nil)
  if valid_610591 != nil:
    section.add "MinimumPasswordLength", valid_610591
  var valid_610592 = query.getOrDefault("RequireNumbers")
  valid_610592 = validateParameter(valid_610592, JBool, required = false, default = nil)
  if valid_610592 != nil:
    section.add "RequireNumbers", valid_610592
  var valid_610593 = query.getOrDefault("AllowUsersToChangePassword")
  valid_610593 = validateParameter(valid_610593, JBool, required = false, default = nil)
  if valid_610593 != nil:
    section.add "AllowUsersToChangePassword", valid_610593
  var valid_610594 = query.getOrDefault("MaxPasswordAge")
  valid_610594 = validateParameter(valid_610594, JInt, required = false, default = nil)
  if valid_610594 != nil:
    section.add "MaxPasswordAge", valid_610594
  var valid_610595 = query.getOrDefault("RequireSymbols")
  valid_610595 = validateParameter(valid_610595, JBool, required = false, default = nil)
  if valid_610595 != nil:
    section.add "RequireSymbols", valid_610595
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610596 = query.getOrDefault("Action")
  valid_610596 = validateParameter(valid_610596, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_610596 != nil:
    section.add "Action", valid_610596
  var valid_610597 = query.getOrDefault("PasswordReusePrevention")
  valid_610597 = validateParameter(valid_610597, JInt, required = false, default = nil)
  if valid_610597 != nil:
    section.add "PasswordReusePrevention", valid_610597
  var valid_610598 = query.getOrDefault("RequireLowercaseCharacters")
  valid_610598 = validateParameter(valid_610598, JBool, required = false, default = nil)
  if valid_610598 != nil:
    section.add "RequireLowercaseCharacters", valid_610598
  var valid_610599 = query.getOrDefault("HardExpiry")
  valid_610599 = validateParameter(valid_610599, JBool, required = false, default = nil)
  if valid_610599 != nil:
    section.add "HardExpiry", valid_610599
  var valid_610600 = query.getOrDefault("Version")
  valid_610600 = validateParameter(valid_610600, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610600 != nil:
    section.add "Version", valid_610600
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610601 = header.getOrDefault("X-Amz-Signature")
  valid_610601 = validateParameter(valid_610601, JString, required = false,
                                 default = nil)
  if valid_610601 != nil:
    section.add "X-Amz-Signature", valid_610601
  var valid_610602 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610602 = validateParameter(valid_610602, JString, required = false,
                                 default = nil)
  if valid_610602 != nil:
    section.add "X-Amz-Content-Sha256", valid_610602
  var valid_610603 = header.getOrDefault("X-Amz-Date")
  valid_610603 = validateParameter(valid_610603, JString, required = false,
                                 default = nil)
  if valid_610603 != nil:
    section.add "X-Amz-Date", valid_610603
  var valid_610604 = header.getOrDefault("X-Amz-Credential")
  valid_610604 = validateParameter(valid_610604, JString, required = false,
                                 default = nil)
  if valid_610604 != nil:
    section.add "X-Amz-Credential", valid_610604
  var valid_610605 = header.getOrDefault("X-Amz-Security-Token")
  valid_610605 = validateParameter(valid_610605, JString, required = false,
                                 default = nil)
  if valid_610605 != nil:
    section.add "X-Amz-Security-Token", valid_610605
  var valid_610606 = header.getOrDefault("X-Amz-Algorithm")
  valid_610606 = validateParameter(valid_610606, JString, required = false,
                                 default = nil)
  if valid_610606 != nil:
    section.add "X-Amz-Algorithm", valid_610606
  var valid_610607 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610607 = validateParameter(valid_610607, JString, required = false,
                                 default = nil)
  if valid_610607 != nil:
    section.add "X-Amz-SignedHeaders", valid_610607
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610608: Call_GetUpdateAccountPasswordPolicy_610587; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610608.validator(path, query, header, formData, body)
  let scheme = call_610608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610608.url(scheme.get, call_610608.host, call_610608.base,
                         call_610608.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610608, url, valid)

proc call*(call_610609: Call_GetUpdateAccountPasswordPolicy_610587;
          RequireUppercaseCharacters: bool = false; MinimumPasswordLength: int = 0;
          RequireNumbers: bool = false; AllowUsersToChangePassword: bool = false;
          MaxPasswordAge: int = 0; RequireSymbols: bool = false;
          Action: string = "UpdateAccountPasswordPolicy";
          PasswordReusePrevention: int = 0;
          RequireLowercaseCharacters: bool = false; HardExpiry: bool = false;
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   Action: string (required)
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Version: string (required)
  var query_610610 = newJObject()
  add(query_610610, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(query_610610, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  add(query_610610, "RequireNumbers", newJBool(RequireNumbers))
  add(query_610610, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(query_610610, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_610610, "RequireSymbols", newJBool(RequireSymbols))
  add(query_610610, "Action", newJString(Action))
  add(query_610610, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_610610, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(query_610610, "HardExpiry", newJBool(HardExpiry))
  add(query_610610, "Version", newJString(Version))
  result = call_610609.call(nil, query_610610, nil, nil, nil)

var getUpdateAccountPasswordPolicy* = Call_GetUpdateAccountPasswordPolicy_610587(
    name: "getUpdateAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_GetUpdateAccountPasswordPolicy_610588, base: "/",
    url: url_GetUpdateAccountPasswordPolicy_610589,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAssumeRolePolicy_610653 = ref object of OpenApiRestCall_605589
proc url_PostUpdateAssumeRolePolicy_610655(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAssumeRolePolicy_610654(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610656 = query.getOrDefault("Action")
  valid_610656 = validateParameter(valid_610656, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_610656 != nil:
    section.add "Action", valid_610656
  var valid_610657 = query.getOrDefault("Version")
  valid_610657 = validateParameter(valid_610657, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610657 != nil:
    section.add "Version", valid_610657
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610658 = header.getOrDefault("X-Amz-Signature")
  valid_610658 = validateParameter(valid_610658, JString, required = false,
                                 default = nil)
  if valid_610658 != nil:
    section.add "X-Amz-Signature", valid_610658
  var valid_610659 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610659 = validateParameter(valid_610659, JString, required = false,
                                 default = nil)
  if valid_610659 != nil:
    section.add "X-Amz-Content-Sha256", valid_610659
  var valid_610660 = header.getOrDefault("X-Amz-Date")
  valid_610660 = validateParameter(valid_610660, JString, required = false,
                                 default = nil)
  if valid_610660 != nil:
    section.add "X-Amz-Date", valid_610660
  var valid_610661 = header.getOrDefault("X-Amz-Credential")
  valid_610661 = validateParameter(valid_610661, JString, required = false,
                                 default = nil)
  if valid_610661 != nil:
    section.add "X-Amz-Credential", valid_610661
  var valid_610662 = header.getOrDefault("X-Amz-Security-Token")
  valid_610662 = validateParameter(valid_610662, JString, required = false,
                                 default = nil)
  if valid_610662 != nil:
    section.add "X-Amz-Security-Token", valid_610662
  var valid_610663 = header.getOrDefault("X-Amz-Algorithm")
  valid_610663 = validateParameter(valid_610663, JString, required = false,
                                 default = nil)
  if valid_610663 != nil:
    section.add "X-Amz-Algorithm", valid_610663
  var valid_610664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610664 = validateParameter(valid_610664, JString, required = false,
                                 default = nil)
  if valid_610664 != nil:
    section.add "X-Amz-SignedHeaders", valid_610664
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_610665 = formData.getOrDefault("PolicyDocument")
  valid_610665 = validateParameter(valid_610665, JString, required = true,
                                 default = nil)
  if valid_610665 != nil:
    section.add "PolicyDocument", valid_610665
  var valid_610666 = formData.getOrDefault("RoleName")
  valid_610666 = validateParameter(valid_610666, JString, required = true,
                                 default = nil)
  if valid_610666 != nil:
    section.add "RoleName", valid_610666
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610667: Call_PostUpdateAssumeRolePolicy_610653; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_610667.validator(path, query, header, formData, body)
  let scheme = call_610667.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610667.url(scheme.get, call_610667.host, call_610667.base,
                         call_610667.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610667, url, valid)

proc call*(call_610668: Call_PostUpdateAssumeRolePolicy_610653;
          PolicyDocument: string; RoleName: string;
          Action: string = "UpdateAssumeRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610669 = newJObject()
  var formData_610670 = newJObject()
  add(formData_610670, "PolicyDocument", newJString(PolicyDocument))
  add(formData_610670, "RoleName", newJString(RoleName))
  add(query_610669, "Action", newJString(Action))
  add(query_610669, "Version", newJString(Version))
  result = call_610668.call(nil, query_610669, nil, formData_610670, nil)

var postUpdateAssumeRolePolicy* = Call_PostUpdateAssumeRolePolicy_610653(
    name: "postUpdateAssumeRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_PostUpdateAssumeRolePolicy_610654, base: "/",
    url: url_PostUpdateAssumeRolePolicy_610655,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAssumeRolePolicy_610636 = ref object of OpenApiRestCall_605589
proc url_GetUpdateAssumeRolePolicy_610638(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAssumeRolePolicy_610637(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_610639 = query.getOrDefault("RoleName")
  valid_610639 = validateParameter(valid_610639, JString, required = true,
                                 default = nil)
  if valid_610639 != nil:
    section.add "RoleName", valid_610639
  var valid_610640 = query.getOrDefault("PolicyDocument")
  valid_610640 = validateParameter(valid_610640, JString, required = true,
                                 default = nil)
  if valid_610640 != nil:
    section.add "PolicyDocument", valid_610640
  var valid_610641 = query.getOrDefault("Action")
  valid_610641 = validateParameter(valid_610641, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_610641 != nil:
    section.add "Action", valid_610641
  var valid_610642 = query.getOrDefault("Version")
  valid_610642 = validateParameter(valid_610642, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610642 != nil:
    section.add "Version", valid_610642
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610643 = header.getOrDefault("X-Amz-Signature")
  valid_610643 = validateParameter(valid_610643, JString, required = false,
                                 default = nil)
  if valid_610643 != nil:
    section.add "X-Amz-Signature", valid_610643
  var valid_610644 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610644 = validateParameter(valid_610644, JString, required = false,
                                 default = nil)
  if valid_610644 != nil:
    section.add "X-Amz-Content-Sha256", valid_610644
  var valid_610645 = header.getOrDefault("X-Amz-Date")
  valid_610645 = validateParameter(valid_610645, JString, required = false,
                                 default = nil)
  if valid_610645 != nil:
    section.add "X-Amz-Date", valid_610645
  var valid_610646 = header.getOrDefault("X-Amz-Credential")
  valid_610646 = validateParameter(valid_610646, JString, required = false,
                                 default = nil)
  if valid_610646 != nil:
    section.add "X-Amz-Credential", valid_610646
  var valid_610647 = header.getOrDefault("X-Amz-Security-Token")
  valid_610647 = validateParameter(valid_610647, JString, required = false,
                                 default = nil)
  if valid_610647 != nil:
    section.add "X-Amz-Security-Token", valid_610647
  var valid_610648 = header.getOrDefault("X-Amz-Algorithm")
  valid_610648 = validateParameter(valid_610648, JString, required = false,
                                 default = nil)
  if valid_610648 != nil:
    section.add "X-Amz-Algorithm", valid_610648
  var valid_610649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610649 = validateParameter(valid_610649, JString, required = false,
                                 default = nil)
  if valid_610649 != nil:
    section.add "X-Amz-SignedHeaders", valid_610649
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610650: Call_GetUpdateAssumeRolePolicy_610636; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_610650.validator(path, query, header, formData, body)
  let scheme = call_610650.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610650.url(scheme.get, call_610650.host, call_610650.base,
                         call_610650.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610650, url, valid)

proc call*(call_610651: Call_GetUpdateAssumeRolePolicy_610636; RoleName: string;
          PolicyDocument: string; Action: string = "UpdateAssumeRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610652 = newJObject()
  add(query_610652, "RoleName", newJString(RoleName))
  add(query_610652, "PolicyDocument", newJString(PolicyDocument))
  add(query_610652, "Action", newJString(Action))
  add(query_610652, "Version", newJString(Version))
  result = call_610651.call(nil, query_610652, nil, nil, nil)

var getUpdateAssumeRolePolicy* = Call_GetUpdateAssumeRolePolicy_610636(
    name: "getUpdateAssumeRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_GetUpdateAssumeRolePolicy_610637, base: "/",
    url: url_GetUpdateAssumeRolePolicy_610638,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateGroup_610689 = ref object of OpenApiRestCall_605589
proc url_PostUpdateGroup_610691(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateGroup_610690(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610692 = query.getOrDefault("Action")
  valid_610692 = validateParameter(valid_610692, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_610692 != nil:
    section.add "Action", valid_610692
  var valid_610693 = query.getOrDefault("Version")
  valid_610693 = validateParameter(valid_610693, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610693 != nil:
    section.add "Version", valid_610693
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610694 = header.getOrDefault("X-Amz-Signature")
  valid_610694 = validateParameter(valid_610694, JString, required = false,
                                 default = nil)
  if valid_610694 != nil:
    section.add "X-Amz-Signature", valid_610694
  var valid_610695 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610695 = validateParameter(valid_610695, JString, required = false,
                                 default = nil)
  if valid_610695 != nil:
    section.add "X-Amz-Content-Sha256", valid_610695
  var valid_610696 = header.getOrDefault("X-Amz-Date")
  valid_610696 = validateParameter(valid_610696, JString, required = false,
                                 default = nil)
  if valid_610696 != nil:
    section.add "X-Amz-Date", valid_610696
  var valid_610697 = header.getOrDefault("X-Amz-Credential")
  valid_610697 = validateParameter(valid_610697, JString, required = false,
                                 default = nil)
  if valid_610697 != nil:
    section.add "X-Amz-Credential", valid_610697
  var valid_610698 = header.getOrDefault("X-Amz-Security-Token")
  valid_610698 = validateParameter(valid_610698, JString, required = false,
                                 default = nil)
  if valid_610698 != nil:
    section.add "X-Amz-Security-Token", valid_610698
  var valid_610699 = header.getOrDefault("X-Amz-Algorithm")
  valid_610699 = validateParameter(valid_610699, JString, required = false,
                                 default = nil)
  if valid_610699 != nil:
    section.add "X-Amz-Algorithm", valid_610699
  var valid_610700 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610700 = validateParameter(valid_610700, JString, required = false,
                                 default = nil)
  if valid_610700 != nil:
    section.add "X-Amz-SignedHeaders", valid_610700
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  var valid_610701 = formData.getOrDefault("NewGroupName")
  valid_610701 = validateParameter(valid_610701, JString, required = false,
                                 default = nil)
  if valid_610701 != nil:
    section.add "NewGroupName", valid_610701
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_610702 = formData.getOrDefault("GroupName")
  valid_610702 = validateParameter(valid_610702, JString, required = true,
                                 default = nil)
  if valid_610702 != nil:
    section.add "GroupName", valid_610702
  var valid_610703 = formData.getOrDefault("NewPath")
  valid_610703 = validateParameter(valid_610703, JString, required = false,
                                 default = nil)
  if valid_610703 != nil:
    section.add "NewPath", valid_610703
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610704: Call_PostUpdateGroup_610689; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_610704.validator(path, query, header, formData, body)
  let scheme = call_610704.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610704.url(scheme.get, call_610704.host, call_610704.base,
                         call_610704.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610704, url, valid)

proc call*(call_610705: Call_PostUpdateGroup_610689; GroupName: string;
          NewGroupName: string = ""; NewPath: string = "";
          Action: string = "UpdateGroup"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610706 = newJObject()
  var formData_610707 = newJObject()
  add(formData_610707, "NewGroupName", newJString(NewGroupName))
  add(formData_610707, "GroupName", newJString(GroupName))
  add(formData_610707, "NewPath", newJString(NewPath))
  add(query_610706, "Action", newJString(Action))
  add(query_610706, "Version", newJString(Version))
  result = call_610705.call(nil, query_610706, nil, formData_610707, nil)

var postUpdateGroup* = Call_PostUpdateGroup_610689(name: "postUpdateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_PostUpdateGroup_610690,
    base: "/", url: url_PostUpdateGroup_610691, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateGroup_610671 = ref object of OpenApiRestCall_605589
proc url_GetUpdateGroup_610673(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateGroup_610672(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_610674 = query.getOrDefault("GroupName")
  valid_610674 = validateParameter(valid_610674, JString, required = true,
                                 default = nil)
  if valid_610674 != nil:
    section.add "GroupName", valid_610674
  var valid_610675 = query.getOrDefault("NewPath")
  valid_610675 = validateParameter(valid_610675, JString, required = false,
                                 default = nil)
  if valid_610675 != nil:
    section.add "NewPath", valid_610675
  var valid_610676 = query.getOrDefault("Action")
  valid_610676 = validateParameter(valid_610676, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_610676 != nil:
    section.add "Action", valid_610676
  var valid_610677 = query.getOrDefault("NewGroupName")
  valid_610677 = validateParameter(valid_610677, JString, required = false,
                                 default = nil)
  if valid_610677 != nil:
    section.add "NewGroupName", valid_610677
  var valid_610678 = query.getOrDefault("Version")
  valid_610678 = validateParameter(valid_610678, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610678 != nil:
    section.add "Version", valid_610678
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610679 = header.getOrDefault("X-Amz-Signature")
  valid_610679 = validateParameter(valid_610679, JString, required = false,
                                 default = nil)
  if valid_610679 != nil:
    section.add "X-Amz-Signature", valid_610679
  var valid_610680 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610680 = validateParameter(valid_610680, JString, required = false,
                                 default = nil)
  if valid_610680 != nil:
    section.add "X-Amz-Content-Sha256", valid_610680
  var valid_610681 = header.getOrDefault("X-Amz-Date")
  valid_610681 = validateParameter(valid_610681, JString, required = false,
                                 default = nil)
  if valid_610681 != nil:
    section.add "X-Amz-Date", valid_610681
  var valid_610682 = header.getOrDefault("X-Amz-Credential")
  valid_610682 = validateParameter(valid_610682, JString, required = false,
                                 default = nil)
  if valid_610682 != nil:
    section.add "X-Amz-Credential", valid_610682
  var valid_610683 = header.getOrDefault("X-Amz-Security-Token")
  valid_610683 = validateParameter(valid_610683, JString, required = false,
                                 default = nil)
  if valid_610683 != nil:
    section.add "X-Amz-Security-Token", valid_610683
  var valid_610684 = header.getOrDefault("X-Amz-Algorithm")
  valid_610684 = validateParameter(valid_610684, JString, required = false,
                                 default = nil)
  if valid_610684 != nil:
    section.add "X-Amz-Algorithm", valid_610684
  var valid_610685 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610685 = validateParameter(valid_610685, JString, required = false,
                                 default = nil)
  if valid_610685 != nil:
    section.add "X-Amz-SignedHeaders", valid_610685
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610686: Call_GetUpdateGroup_610671; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_610686.validator(path, query, header, formData, body)
  let scheme = call_610686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610686.url(scheme.get, call_610686.host, call_610686.base,
                         call_610686.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610686, url, valid)

proc call*(call_610687: Call_GetUpdateGroup_610671; GroupName: string;
          NewPath: string = ""; Action: string = "UpdateGroup";
          NewGroupName: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: string (required)
  var query_610688 = newJObject()
  add(query_610688, "GroupName", newJString(GroupName))
  add(query_610688, "NewPath", newJString(NewPath))
  add(query_610688, "Action", newJString(Action))
  add(query_610688, "NewGroupName", newJString(NewGroupName))
  add(query_610688, "Version", newJString(Version))
  result = call_610687.call(nil, query_610688, nil, nil, nil)

var getUpdateGroup* = Call_GetUpdateGroup_610671(name: "getUpdateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_GetUpdateGroup_610672,
    base: "/", url: url_GetUpdateGroup_610673, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateLoginProfile_610726 = ref object of OpenApiRestCall_605589
proc url_PostUpdateLoginProfile_610728(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateLoginProfile_610727(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610729 = query.getOrDefault("Action")
  valid_610729 = validateParameter(valid_610729, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_610729 != nil:
    section.add "Action", valid_610729
  var valid_610730 = query.getOrDefault("Version")
  valid_610730 = validateParameter(valid_610730, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610730 != nil:
    section.add "Version", valid_610730
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610731 = header.getOrDefault("X-Amz-Signature")
  valid_610731 = validateParameter(valid_610731, JString, required = false,
                                 default = nil)
  if valid_610731 != nil:
    section.add "X-Amz-Signature", valid_610731
  var valid_610732 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610732 = validateParameter(valid_610732, JString, required = false,
                                 default = nil)
  if valid_610732 != nil:
    section.add "X-Amz-Content-Sha256", valid_610732
  var valid_610733 = header.getOrDefault("X-Amz-Date")
  valid_610733 = validateParameter(valid_610733, JString, required = false,
                                 default = nil)
  if valid_610733 != nil:
    section.add "X-Amz-Date", valid_610733
  var valid_610734 = header.getOrDefault("X-Amz-Credential")
  valid_610734 = validateParameter(valid_610734, JString, required = false,
                                 default = nil)
  if valid_610734 != nil:
    section.add "X-Amz-Credential", valid_610734
  var valid_610735 = header.getOrDefault("X-Amz-Security-Token")
  valid_610735 = validateParameter(valid_610735, JString, required = false,
                                 default = nil)
  if valid_610735 != nil:
    section.add "X-Amz-Security-Token", valid_610735
  var valid_610736 = header.getOrDefault("X-Amz-Algorithm")
  valid_610736 = validateParameter(valid_610736, JString, required = false,
                                 default = nil)
  if valid_610736 != nil:
    section.add "X-Amz-Algorithm", valid_610736
  var valid_610737 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610737 = validateParameter(valid_610737, JString, required = false,
                                 default = nil)
  if valid_610737 != nil:
    section.add "X-Amz-SignedHeaders", valid_610737
  result.add "header", section
  ## parameters in `formData` object:
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  section = newJObject()
  var valid_610738 = formData.getOrDefault("Password")
  valid_610738 = validateParameter(valid_610738, JString, required = false,
                                 default = nil)
  if valid_610738 != nil:
    section.add "Password", valid_610738
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_610739 = formData.getOrDefault("UserName")
  valid_610739 = validateParameter(valid_610739, JString, required = true,
                                 default = nil)
  if valid_610739 != nil:
    section.add "UserName", valid_610739
  var valid_610740 = formData.getOrDefault("PasswordResetRequired")
  valid_610740 = validateParameter(valid_610740, JBool, required = false, default = nil)
  if valid_610740 != nil:
    section.add "PasswordResetRequired", valid_610740
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610741: Call_PostUpdateLoginProfile_610726; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610741.validator(path, query, header, formData, body)
  let scheme = call_610741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610741.url(scheme.get, call_610741.host, call_610741.base,
                         call_610741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610741, url, valid)

proc call*(call_610742: Call_PostUpdateLoginProfile_610726; UserName: string;
          Password: string = ""; Action: string = "UpdateLoginProfile";
          PasswordResetRequired: bool = false; Version: string = "2010-05-08"): Recallable =
  ## postUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Version: string (required)
  var query_610743 = newJObject()
  var formData_610744 = newJObject()
  add(formData_610744, "Password", newJString(Password))
  add(formData_610744, "UserName", newJString(UserName))
  add(query_610743, "Action", newJString(Action))
  add(formData_610744, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_610743, "Version", newJString(Version))
  result = call_610742.call(nil, query_610743, nil, formData_610744, nil)

var postUpdateLoginProfile* = Call_PostUpdateLoginProfile_610726(
    name: "postUpdateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_PostUpdateLoginProfile_610727, base: "/",
    url: url_PostUpdateLoginProfile_610728, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateLoginProfile_610708 = ref object of OpenApiRestCall_605589
proc url_GetUpdateLoginProfile_610710(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateLoginProfile_610709(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610711 = query.getOrDefault("Password")
  valid_610711 = validateParameter(valid_610711, JString, required = false,
                                 default = nil)
  if valid_610711 != nil:
    section.add "Password", valid_610711
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_610712 = query.getOrDefault("UserName")
  valid_610712 = validateParameter(valid_610712, JString, required = true,
                                 default = nil)
  if valid_610712 != nil:
    section.add "UserName", valid_610712
  var valid_610713 = query.getOrDefault("PasswordResetRequired")
  valid_610713 = validateParameter(valid_610713, JBool, required = false, default = nil)
  if valid_610713 != nil:
    section.add "PasswordResetRequired", valid_610713
  var valid_610714 = query.getOrDefault("Action")
  valid_610714 = validateParameter(valid_610714, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_610714 != nil:
    section.add "Action", valid_610714
  var valid_610715 = query.getOrDefault("Version")
  valid_610715 = validateParameter(valid_610715, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610715 != nil:
    section.add "Version", valid_610715
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610716 = header.getOrDefault("X-Amz-Signature")
  valid_610716 = validateParameter(valid_610716, JString, required = false,
                                 default = nil)
  if valid_610716 != nil:
    section.add "X-Amz-Signature", valid_610716
  var valid_610717 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610717 = validateParameter(valid_610717, JString, required = false,
                                 default = nil)
  if valid_610717 != nil:
    section.add "X-Amz-Content-Sha256", valid_610717
  var valid_610718 = header.getOrDefault("X-Amz-Date")
  valid_610718 = validateParameter(valid_610718, JString, required = false,
                                 default = nil)
  if valid_610718 != nil:
    section.add "X-Amz-Date", valid_610718
  var valid_610719 = header.getOrDefault("X-Amz-Credential")
  valid_610719 = validateParameter(valid_610719, JString, required = false,
                                 default = nil)
  if valid_610719 != nil:
    section.add "X-Amz-Credential", valid_610719
  var valid_610720 = header.getOrDefault("X-Amz-Security-Token")
  valid_610720 = validateParameter(valid_610720, JString, required = false,
                                 default = nil)
  if valid_610720 != nil:
    section.add "X-Amz-Security-Token", valid_610720
  var valid_610721 = header.getOrDefault("X-Amz-Algorithm")
  valid_610721 = validateParameter(valid_610721, JString, required = false,
                                 default = nil)
  if valid_610721 != nil:
    section.add "X-Amz-Algorithm", valid_610721
  var valid_610722 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610722 = validateParameter(valid_610722, JString, required = false,
                                 default = nil)
  if valid_610722 != nil:
    section.add "X-Amz-SignedHeaders", valid_610722
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610723: Call_GetUpdateLoginProfile_610708; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610723.validator(path, query, header, formData, body)
  let scheme = call_610723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610723.url(scheme.get, call_610723.host, call_610723.base,
                         call_610723.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610723, url, valid)

proc call*(call_610724: Call_GetUpdateLoginProfile_610708; UserName: string;
          Password: string = ""; PasswordResetRequired: bool = false;
          Action: string = "UpdateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610725 = newJObject()
  add(query_610725, "Password", newJString(Password))
  add(query_610725, "UserName", newJString(UserName))
  add(query_610725, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_610725, "Action", newJString(Action))
  add(query_610725, "Version", newJString(Version))
  result = call_610724.call(nil, query_610725, nil, nil, nil)

var getUpdateLoginProfile* = Call_GetUpdateLoginProfile_610708(
    name: "getUpdateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_GetUpdateLoginProfile_610709, base: "/",
    url: url_GetUpdateLoginProfile_610710, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateOpenIDConnectProviderThumbprint_610762 = ref object of OpenApiRestCall_605589
proc url_PostUpdateOpenIDConnectProviderThumbprint_610764(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateOpenIDConnectProviderThumbprint_610763(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610765 = query.getOrDefault("Action")
  valid_610765 = validateParameter(valid_610765, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_610765 != nil:
    section.add "Action", valid_610765
  var valid_610766 = query.getOrDefault("Version")
  valid_610766 = validateParameter(valid_610766, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610766 != nil:
    section.add "Version", valid_610766
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610767 = header.getOrDefault("X-Amz-Signature")
  valid_610767 = validateParameter(valid_610767, JString, required = false,
                                 default = nil)
  if valid_610767 != nil:
    section.add "X-Amz-Signature", valid_610767
  var valid_610768 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610768 = validateParameter(valid_610768, JString, required = false,
                                 default = nil)
  if valid_610768 != nil:
    section.add "X-Amz-Content-Sha256", valid_610768
  var valid_610769 = header.getOrDefault("X-Amz-Date")
  valid_610769 = validateParameter(valid_610769, JString, required = false,
                                 default = nil)
  if valid_610769 != nil:
    section.add "X-Amz-Date", valid_610769
  var valid_610770 = header.getOrDefault("X-Amz-Credential")
  valid_610770 = validateParameter(valid_610770, JString, required = false,
                                 default = nil)
  if valid_610770 != nil:
    section.add "X-Amz-Credential", valid_610770
  var valid_610771 = header.getOrDefault("X-Amz-Security-Token")
  valid_610771 = validateParameter(valid_610771, JString, required = false,
                                 default = nil)
  if valid_610771 != nil:
    section.add "X-Amz-Security-Token", valid_610771
  var valid_610772 = header.getOrDefault("X-Amz-Algorithm")
  valid_610772 = validateParameter(valid_610772, JString, required = false,
                                 default = nil)
  if valid_610772 != nil:
    section.add "X-Amz-Algorithm", valid_610772
  var valid_610773 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610773 = validateParameter(valid_610773, JString, required = false,
                                 default = nil)
  if valid_610773 != nil:
    section.add "X-Amz-SignedHeaders", valid_610773
  result.add "header", section
  ## parameters in `formData` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ThumbprintList` field"
  var valid_610774 = formData.getOrDefault("ThumbprintList")
  valid_610774 = validateParameter(valid_610774, JArray, required = true, default = nil)
  if valid_610774 != nil:
    section.add "ThumbprintList", valid_610774
  var valid_610775 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_610775 = validateParameter(valid_610775, JString, required = true,
                                 default = nil)
  if valid_610775 != nil:
    section.add "OpenIDConnectProviderArn", valid_610775
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610776: Call_PostUpdateOpenIDConnectProviderThumbprint_610762;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_610776.validator(path, query, header, formData, body)
  let scheme = call_610776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610776.url(scheme.get, call_610776.host, call_610776.base,
                         call_610776.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610776, url, valid)

proc call*(call_610777: Call_PostUpdateOpenIDConnectProviderThumbprint_610762;
          ThumbprintList: JsonNode; OpenIDConnectProviderArn: string;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_610778 = newJObject()
  var formData_610779 = newJObject()
  if ThumbprintList != nil:
    formData_610779.add "ThumbprintList", ThumbprintList
  add(query_610778, "Action", newJString(Action))
  add(query_610778, "Version", newJString(Version))
  add(formData_610779, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_610777.call(nil, query_610778, nil, formData_610779, nil)

var postUpdateOpenIDConnectProviderThumbprint* = Call_PostUpdateOpenIDConnectProviderThumbprint_610762(
    name: "postUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_PostUpdateOpenIDConnectProviderThumbprint_610763,
    base: "/", url: url_PostUpdateOpenIDConnectProviderThumbprint_610764,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateOpenIDConnectProviderThumbprint_610745 = ref object of OpenApiRestCall_605589
proc url_GetUpdateOpenIDConnectProviderThumbprint_610747(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateOpenIDConnectProviderThumbprint_610746(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_610748 = query.getOrDefault("ThumbprintList")
  valid_610748 = validateParameter(valid_610748, JArray, required = true, default = nil)
  if valid_610748 != nil:
    section.add "ThumbprintList", valid_610748
  var valid_610749 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_610749 = validateParameter(valid_610749, JString, required = true,
                                 default = nil)
  if valid_610749 != nil:
    section.add "OpenIDConnectProviderArn", valid_610749
  var valid_610750 = query.getOrDefault("Action")
  valid_610750 = validateParameter(valid_610750, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_610750 != nil:
    section.add "Action", valid_610750
  var valid_610751 = query.getOrDefault("Version")
  valid_610751 = validateParameter(valid_610751, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610751 != nil:
    section.add "Version", valid_610751
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610752 = header.getOrDefault("X-Amz-Signature")
  valid_610752 = validateParameter(valid_610752, JString, required = false,
                                 default = nil)
  if valid_610752 != nil:
    section.add "X-Amz-Signature", valid_610752
  var valid_610753 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610753 = validateParameter(valid_610753, JString, required = false,
                                 default = nil)
  if valid_610753 != nil:
    section.add "X-Amz-Content-Sha256", valid_610753
  var valid_610754 = header.getOrDefault("X-Amz-Date")
  valid_610754 = validateParameter(valid_610754, JString, required = false,
                                 default = nil)
  if valid_610754 != nil:
    section.add "X-Amz-Date", valid_610754
  var valid_610755 = header.getOrDefault("X-Amz-Credential")
  valid_610755 = validateParameter(valid_610755, JString, required = false,
                                 default = nil)
  if valid_610755 != nil:
    section.add "X-Amz-Credential", valid_610755
  var valid_610756 = header.getOrDefault("X-Amz-Security-Token")
  valid_610756 = validateParameter(valid_610756, JString, required = false,
                                 default = nil)
  if valid_610756 != nil:
    section.add "X-Amz-Security-Token", valid_610756
  var valid_610757 = header.getOrDefault("X-Amz-Algorithm")
  valid_610757 = validateParameter(valid_610757, JString, required = false,
                                 default = nil)
  if valid_610757 != nil:
    section.add "X-Amz-Algorithm", valid_610757
  var valid_610758 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610758 = validateParameter(valid_610758, JString, required = false,
                                 default = nil)
  if valid_610758 != nil:
    section.add "X-Amz-SignedHeaders", valid_610758
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610759: Call_GetUpdateOpenIDConnectProviderThumbprint_610745;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_610759.validator(path, query, header, formData, body)
  let scheme = call_610759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610759.url(scheme.get, call_610759.host, call_610759.base,
                         call_610759.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610759, url, valid)

proc call*(call_610760: Call_GetUpdateOpenIDConnectProviderThumbprint_610745;
          ThumbprintList: JsonNode; OpenIDConnectProviderArn: string;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610761 = newJObject()
  if ThumbprintList != nil:
    query_610761.add "ThumbprintList", ThumbprintList
  add(query_610761, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_610761, "Action", newJString(Action))
  add(query_610761, "Version", newJString(Version))
  result = call_610760.call(nil, query_610761, nil, nil, nil)

var getUpdateOpenIDConnectProviderThumbprint* = Call_GetUpdateOpenIDConnectProviderThumbprint_610745(
    name: "getUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_GetUpdateOpenIDConnectProviderThumbprint_610746,
    base: "/", url: url_GetUpdateOpenIDConnectProviderThumbprint_610747,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRole_610798 = ref object of OpenApiRestCall_605589
proc url_PostUpdateRole_610800(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateRole_610799(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610801 = query.getOrDefault("Action")
  valid_610801 = validateParameter(valid_610801, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_610801 != nil:
    section.add "Action", valid_610801
  var valid_610802 = query.getOrDefault("Version")
  valid_610802 = validateParameter(valid_610802, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610802 != nil:
    section.add "Version", valid_610802
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610803 = header.getOrDefault("X-Amz-Signature")
  valid_610803 = validateParameter(valid_610803, JString, required = false,
                                 default = nil)
  if valid_610803 != nil:
    section.add "X-Amz-Signature", valid_610803
  var valid_610804 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610804 = validateParameter(valid_610804, JString, required = false,
                                 default = nil)
  if valid_610804 != nil:
    section.add "X-Amz-Content-Sha256", valid_610804
  var valid_610805 = header.getOrDefault("X-Amz-Date")
  valid_610805 = validateParameter(valid_610805, JString, required = false,
                                 default = nil)
  if valid_610805 != nil:
    section.add "X-Amz-Date", valid_610805
  var valid_610806 = header.getOrDefault("X-Amz-Credential")
  valid_610806 = validateParameter(valid_610806, JString, required = false,
                                 default = nil)
  if valid_610806 != nil:
    section.add "X-Amz-Credential", valid_610806
  var valid_610807 = header.getOrDefault("X-Amz-Security-Token")
  valid_610807 = validateParameter(valid_610807, JString, required = false,
                                 default = nil)
  if valid_610807 != nil:
    section.add "X-Amz-Security-Token", valid_610807
  var valid_610808 = header.getOrDefault("X-Amz-Algorithm")
  valid_610808 = validateParameter(valid_610808, JString, required = false,
                                 default = nil)
  if valid_610808 != nil:
    section.add "X-Amz-Algorithm", valid_610808
  var valid_610809 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610809 = validateParameter(valid_610809, JString, required = false,
                                 default = nil)
  if valid_610809 != nil:
    section.add "X-Amz-SignedHeaders", valid_610809
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_610810 = formData.getOrDefault("Description")
  valid_610810 = validateParameter(valid_610810, JString, required = false,
                                 default = nil)
  if valid_610810 != nil:
    section.add "Description", valid_610810
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_610811 = formData.getOrDefault("RoleName")
  valid_610811 = validateParameter(valid_610811, JString, required = true,
                                 default = nil)
  if valid_610811 != nil:
    section.add "RoleName", valid_610811
  var valid_610812 = formData.getOrDefault("MaxSessionDuration")
  valid_610812 = validateParameter(valid_610812, JInt, required = false, default = nil)
  if valid_610812 != nil:
    section.add "MaxSessionDuration", valid_610812
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610813: Call_PostUpdateRole_610798; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_610813.validator(path, query, header, formData, body)
  let scheme = call_610813.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610813.url(scheme.get, call_610813.host, call_610813.base,
                         call_610813.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610813, url, valid)

proc call*(call_610814: Call_PostUpdateRole_610798; RoleName: string;
          Description: string = ""; Action: string = "UpdateRole";
          MaxSessionDuration: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_610815 = newJObject()
  var formData_610816 = newJObject()
  add(formData_610816, "Description", newJString(Description))
  add(formData_610816, "RoleName", newJString(RoleName))
  add(query_610815, "Action", newJString(Action))
  add(formData_610816, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_610815, "Version", newJString(Version))
  result = call_610814.call(nil, query_610815, nil, formData_610816, nil)

var postUpdateRole* = Call_PostUpdateRole_610798(name: "postUpdateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_PostUpdateRole_610799,
    base: "/", url: url_PostUpdateRole_610800, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRole_610780 = ref object of OpenApiRestCall_605589
proc url_GetUpdateRole_610782(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateRole_610781(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_610783 = query.getOrDefault("RoleName")
  valid_610783 = validateParameter(valid_610783, JString, required = true,
                                 default = nil)
  if valid_610783 != nil:
    section.add "RoleName", valid_610783
  var valid_610784 = query.getOrDefault("MaxSessionDuration")
  valid_610784 = validateParameter(valid_610784, JInt, required = false, default = nil)
  if valid_610784 != nil:
    section.add "MaxSessionDuration", valid_610784
  var valid_610785 = query.getOrDefault("Action")
  valid_610785 = validateParameter(valid_610785, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_610785 != nil:
    section.add "Action", valid_610785
  var valid_610786 = query.getOrDefault("Description")
  valid_610786 = validateParameter(valid_610786, JString, required = false,
                                 default = nil)
  if valid_610786 != nil:
    section.add "Description", valid_610786
  var valid_610787 = query.getOrDefault("Version")
  valid_610787 = validateParameter(valid_610787, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610787 != nil:
    section.add "Version", valid_610787
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610788 = header.getOrDefault("X-Amz-Signature")
  valid_610788 = validateParameter(valid_610788, JString, required = false,
                                 default = nil)
  if valid_610788 != nil:
    section.add "X-Amz-Signature", valid_610788
  var valid_610789 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610789 = validateParameter(valid_610789, JString, required = false,
                                 default = nil)
  if valid_610789 != nil:
    section.add "X-Amz-Content-Sha256", valid_610789
  var valid_610790 = header.getOrDefault("X-Amz-Date")
  valid_610790 = validateParameter(valid_610790, JString, required = false,
                                 default = nil)
  if valid_610790 != nil:
    section.add "X-Amz-Date", valid_610790
  var valid_610791 = header.getOrDefault("X-Amz-Credential")
  valid_610791 = validateParameter(valid_610791, JString, required = false,
                                 default = nil)
  if valid_610791 != nil:
    section.add "X-Amz-Credential", valid_610791
  var valid_610792 = header.getOrDefault("X-Amz-Security-Token")
  valid_610792 = validateParameter(valid_610792, JString, required = false,
                                 default = nil)
  if valid_610792 != nil:
    section.add "X-Amz-Security-Token", valid_610792
  var valid_610793 = header.getOrDefault("X-Amz-Algorithm")
  valid_610793 = validateParameter(valid_610793, JString, required = false,
                                 default = nil)
  if valid_610793 != nil:
    section.add "X-Amz-Algorithm", valid_610793
  var valid_610794 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610794 = validateParameter(valid_610794, JString, required = false,
                                 default = nil)
  if valid_610794 != nil:
    section.add "X-Amz-SignedHeaders", valid_610794
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610795: Call_GetUpdateRole_610780; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_610795.validator(path, query, header, formData, body)
  let scheme = call_610795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610795.url(scheme.get, call_610795.host, call_610795.base,
                         call_610795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610795, url, valid)

proc call*(call_610796: Call_GetUpdateRole_610780; RoleName: string;
          MaxSessionDuration: int = 0; Action: string = "UpdateRole";
          Description: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  ##   Version: string (required)
  var query_610797 = newJObject()
  add(query_610797, "RoleName", newJString(RoleName))
  add(query_610797, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_610797, "Action", newJString(Action))
  add(query_610797, "Description", newJString(Description))
  add(query_610797, "Version", newJString(Version))
  result = call_610796.call(nil, query_610797, nil, nil, nil)

var getUpdateRole* = Call_GetUpdateRole_610780(name: "getUpdateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_GetUpdateRole_610781,
    base: "/", url: url_GetUpdateRole_610782, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRoleDescription_610834 = ref object of OpenApiRestCall_605589
proc url_PostUpdateRoleDescription_610836(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateRoleDescription_610835(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610837 = query.getOrDefault("Action")
  valid_610837 = validateParameter(valid_610837, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_610837 != nil:
    section.add "Action", valid_610837
  var valid_610838 = query.getOrDefault("Version")
  valid_610838 = validateParameter(valid_610838, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610838 != nil:
    section.add "Version", valid_610838
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610839 = header.getOrDefault("X-Amz-Signature")
  valid_610839 = validateParameter(valid_610839, JString, required = false,
                                 default = nil)
  if valid_610839 != nil:
    section.add "X-Amz-Signature", valid_610839
  var valid_610840 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610840 = validateParameter(valid_610840, JString, required = false,
                                 default = nil)
  if valid_610840 != nil:
    section.add "X-Amz-Content-Sha256", valid_610840
  var valid_610841 = header.getOrDefault("X-Amz-Date")
  valid_610841 = validateParameter(valid_610841, JString, required = false,
                                 default = nil)
  if valid_610841 != nil:
    section.add "X-Amz-Date", valid_610841
  var valid_610842 = header.getOrDefault("X-Amz-Credential")
  valid_610842 = validateParameter(valid_610842, JString, required = false,
                                 default = nil)
  if valid_610842 != nil:
    section.add "X-Amz-Credential", valid_610842
  var valid_610843 = header.getOrDefault("X-Amz-Security-Token")
  valid_610843 = validateParameter(valid_610843, JString, required = false,
                                 default = nil)
  if valid_610843 != nil:
    section.add "X-Amz-Security-Token", valid_610843
  var valid_610844 = header.getOrDefault("X-Amz-Algorithm")
  valid_610844 = validateParameter(valid_610844, JString, required = false,
                                 default = nil)
  if valid_610844 != nil:
    section.add "X-Amz-Algorithm", valid_610844
  var valid_610845 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610845 = validateParameter(valid_610845, JString, required = false,
                                 default = nil)
  if valid_610845 != nil:
    section.add "X-Amz-SignedHeaders", valid_610845
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_610846 = formData.getOrDefault("Description")
  valid_610846 = validateParameter(valid_610846, JString, required = true,
                                 default = nil)
  if valid_610846 != nil:
    section.add "Description", valid_610846
  var valid_610847 = formData.getOrDefault("RoleName")
  valid_610847 = validateParameter(valid_610847, JString, required = true,
                                 default = nil)
  if valid_610847 != nil:
    section.add "RoleName", valid_610847
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610848: Call_PostUpdateRoleDescription_610834; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_610848.validator(path, query, header, formData, body)
  let scheme = call_610848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610848.url(scheme.get, call_610848.host, call_610848.base,
                         call_610848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610848, url, valid)

proc call*(call_610849: Call_PostUpdateRoleDescription_610834; Description: string;
          RoleName: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610850 = newJObject()
  var formData_610851 = newJObject()
  add(formData_610851, "Description", newJString(Description))
  add(formData_610851, "RoleName", newJString(RoleName))
  add(query_610850, "Action", newJString(Action))
  add(query_610850, "Version", newJString(Version))
  result = call_610849.call(nil, query_610850, nil, formData_610851, nil)

var postUpdateRoleDescription* = Call_PostUpdateRoleDescription_610834(
    name: "postUpdateRoleDescription", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_PostUpdateRoleDescription_610835, base: "/",
    url: url_PostUpdateRoleDescription_610836,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRoleDescription_610817 = ref object of OpenApiRestCall_605589
proc url_GetUpdateRoleDescription_610819(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateRoleDescription_610818(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_610820 = query.getOrDefault("RoleName")
  valid_610820 = validateParameter(valid_610820, JString, required = true,
                                 default = nil)
  if valid_610820 != nil:
    section.add "RoleName", valid_610820
  var valid_610821 = query.getOrDefault("Action")
  valid_610821 = validateParameter(valid_610821, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_610821 != nil:
    section.add "Action", valid_610821
  var valid_610822 = query.getOrDefault("Description")
  valid_610822 = validateParameter(valid_610822, JString, required = true,
                                 default = nil)
  if valid_610822 != nil:
    section.add "Description", valid_610822
  var valid_610823 = query.getOrDefault("Version")
  valid_610823 = validateParameter(valid_610823, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610823 != nil:
    section.add "Version", valid_610823
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610824 = header.getOrDefault("X-Amz-Signature")
  valid_610824 = validateParameter(valid_610824, JString, required = false,
                                 default = nil)
  if valid_610824 != nil:
    section.add "X-Amz-Signature", valid_610824
  var valid_610825 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610825 = validateParameter(valid_610825, JString, required = false,
                                 default = nil)
  if valid_610825 != nil:
    section.add "X-Amz-Content-Sha256", valid_610825
  var valid_610826 = header.getOrDefault("X-Amz-Date")
  valid_610826 = validateParameter(valid_610826, JString, required = false,
                                 default = nil)
  if valid_610826 != nil:
    section.add "X-Amz-Date", valid_610826
  var valid_610827 = header.getOrDefault("X-Amz-Credential")
  valid_610827 = validateParameter(valid_610827, JString, required = false,
                                 default = nil)
  if valid_610827 != nil:
    section.add "X-Amz-Credential", valid_610827
  var valid_610828 = header.getOrDefault("X-Amz-Security-Token")
  valid_610828 = validateParameter(valid_610828, JString, required = false,
                                 default = nil)
  if valid_610828 != nil:
    section.add "X-Amz-Security-Token", valid_610828
  var valid_610829 = header.getOrDefault("X-Amz-Algorithm")
  valid_610829 = validateParameter(valid_610829, JString, required = false,
                                 default = nil)
  if valid_610829 != nil:
    section.add "X-Amz-Algorithm", valid_610829
  var valid_610830 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610830 = validateParameter(valid_610830, JString, required = false,
                                 default = nil)
  if valid_610830 != nil:
    section.add "X-Amz-SignedHeaders", valid_610830
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610831: Call_GetUpdateRoleDescription_610817; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_610831.validator(path, query, header, formData, body)
  let scheme = call_610831.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610831.url(scheme.get, call_610831.host, call_610831.base,
                         call_610831.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610831, url, valid)

proc call*(call_610832: Call_GetUpdateRoleDescription_610817; RoleName: string;
          Description: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Version: string (required)
  var query_610833 = newJObject()
  add(query_610833, "RoleName", newJString(RoleName))
  add(query_610833, "Action", newJString(Action))
  add(query_610833, "Description", newJString(Description))
  add(query_610833, "Version", newJString(Version))
  result = call_610832.call(nil, query_610833, nil, nil, nil)

var getUpdateRoleDescription* = Call_GetUpdateRoleDescription_610817(
    name: "getUpdateRoleDescription", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_GetUpdateRoleDescription_610818, base: "/",
    url: url_GetUpdateRoleDescription_610819, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSAMLProvider_610869 = ref object of OpenApiRestCall_605589
proc url_PostUpdateSAMLProvider_610871(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSAMLProvider_610870(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610872 = query.getOrDefault("Action")
  valid_610872 = validateParameter(valid_610872, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_610872 != nil:
    section.add "Action", valid_610872
  var valid_610873 = query.getOrDefault("Version")
  valid_610873 = validateParameter(valid_610873, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610873 != nil:
    section.add "Version", valid_610873
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610874 = header.getOrDefault("X-Amz-Signature")
  valid_610874 = validateParameter(valid_610874, JString, required = false,
                                 default = nil)
  if valid_610874 != nil:
    section.add "X-Amz-Signature", valid_610874
  var valid_610875 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610875 = validateParameter(valid_610875, JString, required = false,
                                 default = nil)
  if valid_610875 != nil:
    section.add "X-Amz-Content-Sha256", valid_610875
  var valid_610876 = header.getOrDefault("X-Amz-Date")
  valid_610876 = validateParameter(valid_610876, JString, required = false,
                                 default = nil)
  if valid_610876 != nil:
    section.add "X-Amz-Date", valid_610876
  var valid_610877 = header.getOrDefault("X-Amz-Credential")
  valid_610877 = validateParameter(valid_610877, JString, required = false,
                                 default = nil)
  if valid_610877 != nil:
    section.add "X-Amz-Credential", valid_610877
  var valid_610878 = header.getOrDefault("X-Amz-Security-Token")
  valid_610878 = validateParameter(valid_610878, JString, required = false,
                                 default = nil)
  if valid_610878 != nil:
    section.add "X-Amz-Security-Token", valid_610878
  var valid_610879 = header.getOrDefault("X-Amz-Algorithm")
  valid_610879 = validateParameter(valid_610879, JString, required = false,
                                 default = nil)
  if valid_610879 != nil:
    section.add "X-Amz-Algorithm", valid_610879
  var valid_610880 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610880 = validateParameter(valid_610880, JString, required = false,
                                 default = nil)
  if valid_610880 != nil:
    section.add "X-Amz-SignedHeaders", valid_610880
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_610881 = formData.getOrDefault("SAMLProviderArn")
  valid_610881 = validateParameter(valid_610881, JString, required = true,
                                 default = nil)
  if valid_610881 != nil:
    section.add "SAMLProviderArn", valid_610881
  var valid_610882 = formData.getOrDefault("SAMLMetadataDocument")
  valid_610882 = validateParameter(valid_610882, JString, required = true,
                                 default = nil)
  if valid_610882 != nil:
    section.add "SAMLMetadataDocument", valid_610882
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610883: Call_PostUpdateSAMLProvider_610869; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_610883.validator(path, query, header, formData, body)
  let scheme = call_610883.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610883.url(scheme.get, call_610883.host, call_610883.base,
                         call_610883.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610883, url, valid)

proc call*(call_610884: Call_PostUpdateSAMLProvider_610869;
          SAMLProviderArn: string; SAMLMetadataDocument: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610885 = newJObject()
  var formData_610886 = newJObject()
  add(formData_610886, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(formData_610886, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_610885, "Action", newJString(Action))
  add(query_610885, "Version", newJString(Version))
  result = call_610884.call(nil, query_610885, nil, formData_610886, nil)

var postUpdateSAMLProvider* = Call_PostUpdateSAMLProvider_610869(
    name: "postUpdateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_PostUpdateSAMLProvider_610870, base: "/",
    url: url_PostUpdateSAMLProvider_610871, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSAMLProvider_610852 = ref object of OpenApiRestCall_605589
proc url_GetUpdateSAMLProvider_610854(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSAMLProvider_610853(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610855 = query.getOrDefault("Action")
  valid_610855 = validateParameter(valid_610855, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_610855 != nil:
    section.add "Action", valid_610855
  var valid_610856 = query.getOrDefault("SAMLMetadataDocument")
  valid_610856 = validateParameter(valid_610856, JString, required = true,
                                 default = nil)
  if valid_610856 != nil:
    section.add "SAMLMetadataDocument", valid_610856
  var valid_610857 = query.getOrDefault("SAMLProviderArn")
  valid_610857 = validateParameter(valid_610857, JString, required = true,
                                 default = nil)
  if valid_610857 != nil:
    section.add "SAMLProviderArn", valid_610857
  var valid_610858 = query.getOrDefault("Version")
  valid_610858 = validateParameter(valid_610858, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610858 != nil:
    section.add "Version", valid_610858
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610859 = header.getOrDefault("X-Amz-Signature")
  valid_610859 = validateParameter(valid_610859, JString, required = false,
                                 default = nil)
  if valid_610859 != nil:
    section.add "X-Amz-Signature", valid_610859
  var valid_610860 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610860 = validateParameter(valid_610860, JString, required = false,
                                 default = nil)
  if valid_610860 != nil:
    section.add "X-Amz-Content-Sha256", valid_610860
  var valid_610861 = header.getOrDefault("X-Amz-Date")
  valid_610861 = validateParameter(valid_610861, JString, required = false,
                                 default = nil)
  if valid_610861 != nil:
    section.add "X-Amz-Date", valid_610861
  var valid_610862 = header.getOrDefault("X-Amz-Credential")
  valid_610862 = validateParameter(valid_610862, JString, required = false,
                                 default = nil)
  if valid_610862 != nil:
    section.add "X-Amz-Credential", valid_610862
  var valid_610863 = header.getOrDefault("X-Amz-Security-Token")
  valid_610863 = validateParameter(valid_610863, JString, required = false,
                                 default = nil)
  if valid_610863 != nil:
    section.add "X-Amz-Security-Token", valid_610863
  var valid_610864 = header.getOrDefault("X-Amz-Algorithm")
  valid_610864 = validateParameter(valid_610864, JString, required = false,
                                 default = nil)
  if valid_610864 != nil:
    section.add "X-Amz-Algorithm", valid_610864
  var valid_610865 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610865 = validateParameter(valid_610865, JString, required = false,
                                 default = nil)
  if valid_610865 != nil:
    section.add "X-Amz-SignedHeaders", valid_610865
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610866: Call_GetUpdateSAMLProvider_610852; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_610866.validator(path, query, header, formData, body)
  let scheme = call_610866.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610866.url(scheme.get, call_610866.host, call_610866.base,
                         call_610866.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610866, url, valid)

proc call*(call_610867: Call_GetUpdateSAMLProvider_610852;
          SAMLMetadataDocument: string; SAMLProviderArn: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_610868 = newJObject()
  add(query_610868, "Action", newJString(Action))
  add(query_610868, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_610868, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_610868, "Version", newJString(Version))
  result = call_610867.call(nil, query_610868, nil, nil, nil)

var getUpdateSAMLProvider* = Call_GetUpdateSAMLProvider_610852(
    name: "getUpdateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_GetUpdateSAMLProvider_610853, base: "/",
    url: url_GetUpdateSAMLProvider_610854, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSSHPublicKey_610905 = ref object of OpenApiRestCall_605589
proc url_PostUpdateSSHPublicKey_610907(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSSHPublicKey_610906(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610908 = query.getOrDefault("Action")
  valid_610908 = validateParameter(valid_610908, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_610908 != nil:
    section.add "Action", valid_610908
  var valid_610909 = query.getOrDefault("Version")
  valid_610909 = validateParameter(valid_610909, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610909 != nil:
    section.add "Version", valid_610909
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610910 = header.getOrDefault("X-Amz-Signature")
  valid_610910 = validateParameter(valid_610910, JString, required = false,
                                 default = nil)
  if valid_610910 != nil:
    section.add "X-Amz-Signature", valid_610910
  var valid_610911 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610911 = validateParameter(valid_610911, JString, required = false,
                                 default = nil)
  if valid_610911 != nil:
    section.add "X-Amz-Content-Sha256", valid_610911
  var valid_610912 = header.getOrDefault("X-Amz-Date")
  valid_610912 = validateParameter(valid_610912, JString, required = false,
                                 default = nil)
  if valid_610912 != nil:
    section.add "X-Amz-Date", valid_610912
  var valid_610913 = header.getOrDefault("X-Amz-Credential")
  valid_610913 = validateParameter(valid_610913, JString, required = false,
                                 default = nil)
  if valid_610913 != nil:
    section.add "X-Amz-Credential", valid_610913
  var valid_610914 = header.getOrDefault("X-Amz-Security-Token")
  valid_610914 = validateParameter(valid_610914, JString, required = false,
                                 default = nil)
  if valid_610914 != nil:
    section.add "X-Amz-Security-Token", valid_610914
  var valid_610915 = header.getOrDefault("X-Amz-Algorithm")
  valid_610915 = validateParameter(valid_610915, JString, required = false,
                                 default = nil)
  if valid_610915 != nil:
    section.add "X-Amz-Algorithm", valid_610915
  var valid_610916 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610916 = validateParameter(valid_610916, JString, required = false,
                                 default = nil)
  if valid_610916 != nil:
    section.add "X-Amz-SignedHeaders", valid_610916
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SSHPublicKeyId` field"
  var valid_610917 = formData.getOrDefault("SSHPublicKeyId")
  valid_610917 = validateParameter(valid_610917, JString, required = true,
                                 default = nil)
  if valid_610917 != nil:
    section.add "SSHPublicKeyId", valid_610917
  var valid_610918 = formData.getOrDefault("UserName")
  valid_610918 = validateParameter(valid_610918, JString, required = true,
                                 default = nil)
  if valid_610918 != nil:
    section.add "UserName", valid_610918
  var valid_610919 = formData.getOrDefault("Status")
  valid_610919 = validateParameter(valid_610919, JString, required = true,
                                 default = newJString("Active"))
  if valid_610919 != nil:
    section.add "Status", valid_610919
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610920: Call_PostUpdateSSHPublicKey_610905; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_610920.validator(path, query, header, formData, body)
  let scheme = call_610920.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610920.url(scheme.get, call_610920.host, call_610920.base,
                         call_610920.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610920, url, valid)

proc call*(call_610921: Call_PostUpdateSSHPublicKey_610905; SSHPublicKeyId: string;
          UserName: string; Action: string = "UpdateSSHPublicKey";
          Status: string = "Active"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Version: string (required)
  var query_610922 = newJObject()
  var formData_610923 = newJObject()
  add(formData_610923, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_610923, "UserName", newJString(UserName))
  add(query_610922, "Action", newJString(Action))
  add(formData_610923, "Status", newJString(Status))
  add(query_610922, "Version", newJString(Version))
  result = call_610921.call(nil, query_610922, nil, formData_610923, nil)

var postUpdateSSHPublicKey* = Call_PostUpdateSSHPublicKey_610905(
    name: "postUpdateSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_PostUpdateSSHPublicKey_610906, base: "/",
    url: url_PostUpdateSSHPublicKey_610907, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSSHPublicKey_610887 = ref object of OpenApiRestCall_605589
proc url_GetUpdateSSHPublicKey_610889(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSSHPublicKey_610888(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_610890 = query.getOrDefault("SSHPublicKeyId")
  valid_610890 = validateParameter(valid_610890, JString, required = true,
                                 default = nil)
  if valid_610890 != nil:
    section.add "SSHPublicKeyId", valid_610890
  var valid_610891 = query.getOrDefault("UserName")
  valid_610891 = validateParameter(valid_610891, JString, required = true,
                                 default = nil)
  if valid_610891 != nil:
    section.add "UserName", valid_610891
  var valid_610892 = query.getOrDefault("Status")
  valid_610892 = validateParameter(valid_610892, JString, required = true,
                                 default = newJString("Active"))
  if valid_610892 != nil:
    section.add "Status", valid_610892
  var valid_610893 = query.getOrDefault("Action")
  valid_610893 = validateParameter(valid_610893, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_610893 != nil:
    section.add "Action", valid_610893
  var valid_610894 = query.getOrDefault("Version")
  valid_610894 = validateParameter(valid_610894, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610894 != nil:
    section.add "Version", valid_610894
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610895 = header.getOrDefault("X-Amz-Signature")
  valid_610895 = validateParameter(valid_610895, JString, required = false,
                                 default = nil)
  if valid_610895 != nil:
    section.add "X-Amz-Signature", valid_610895
  var valid_610896 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610896 = validateParameter(valid_610896, JString, required = false,
                                 default = nil)
  if valid_610896 != nil:
    section.add "X-Amz-Content-Sha256", valid_610896
  var valid_610897 = header.getOrDefault("X-Amz-Date")
  valid_610897 = validateParameter(valid_610897, JString, required = false,
                                 default = nil)
  if valid_610897 != nil:
    section.add "X-Amz-Date", valid_610897
  var valid_610898 = header.getOrDefault("X-Amz-Credential")
  valid_610898 = validateParameter(valid_610898, JString, required = false,
                                 default = nil)
  if valid_610898 != nil:
    section.add "X-Amz-Credential", valid_610898
  var valid_610899 = header.getOrDefault("X-Amz-Security-Token")
  valid_610899 = validateParameter(valid_610899, JString, required = false,
                                 default = nil)
  if valid_610899 != nil:
    section.add "X-Amz-Security-Token", valid_610899
  var valid_610900 = header.getOrDefault("X-Amz-Algorithm")
  valid_610900 = validateParameter(valid_610900, JString, required = false,
                                 default = nil)
  if valid_610900 != nil:
    section.add "X-Amz-Algorithm", valid_610900
  var valid_610901 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610901 = validateParameter(valid_610901, JString, required = false,
                                 default = nil)
  if valid_610901 != nil:
    section.add "X-Amz-SignedHeaders", valid_610901
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610902: Call_GetUpdateSSHPublicKey_610887; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_610902.validator(path, query, header, formData, body)
  let scheme = call_610902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610902.url(scheme.get, call_610902.host, call_610902.base,
                         call_610902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610902, url, valid)

proc call*(call_610903: Call_GetUpdateSSHPublicKey_610887; SSHPublicKeyId: string;
          UserName: string; Status: string = "Active";
          Action: string = "UpdateSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610904 = newJObject()
  add(query_610904, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_610904, "UserName", newJString(UserName))
  add(query_610904, "Status", newJString(Status))
  add(query_610904, "Action", newJString(Action))
  add(query_610904, "Version", newJString(Version))
  result = call_610903.call(nil, query_610904, nil, nil, nil)

var getUpdateSSHPublicKey* = Call_GetUpdateSSHPublicKey_610887(
    name: "getUpdateSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_GetUpdateSSHPublicKey_610888, base: "/",
    url: url_GetUpdateSSHPublicKey_610889, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServerCertificate_610942 = ref object of OpenApiRestCall_605589
proc url_PostUpdateServerCertificate_610944(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateServerCertificate_610943(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610945 = query.getOrDefault("Action")
  valid_610945 = validateParameter(valid_610945, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_610945 != nil:
    section.add "Action", valid_610945
  var valid_610946 = query.getOrDefault("Version")
  valid_610946 = validateParameter(valid_610946, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610946 != nil:
    section.add "Version", valid_610946
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610947 = header.getOrDefault("X-Amz-Signature")
  valid_610947 = validateParameter(valid_610947, JString, required = false,
                                 default = nil)
  if valid_610947 != nil:
    section.add "X-Amz-Signature", valid_610947
  var valid_610948 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610948 = validateParameter(valid_610948, JString, required = false,
                                 default = nil)
  if valid_610948 != nil:
    section.add "X-Amz-Content-Sha256", valid_610948
  var valid_610949 = header.getOrDefault("X-Amz-Date")
  valid_610949 = validateParameter(valid_610949, JString, required = false,
                                 default = nil)
  if valid_610949 != nil:
    section.add "X-Amz-Date", valid_610949
  var valid_610950 = header.getOrDefault("X-Amz-Credential")
  valid_610950 = validateParameter(valid_610950, JString, required = false,
                                 default = nil)
  if valid_610950 != nil:
    section.add "X-Amz-Credential", valid_610950
  var valid_610951 = header.getOrDefault("X-Amz-Security-Token")
  valid_610951 = validateParameter(valid_610951, JString, required = false,
                                 default = nil)
  if valid_610951 != nil:
    section.add "X-Amz-Security-Token", valid_610951
  var valid_610952 = header.getOrDefault("X-Amz-Algorithm")
  valid_610952 = validateParameter(valid_610952, JString, required = false,
                                 default = nil)
  if valid_610952 != nil:
    section.add "X-Amz-Algorithm", valid_610952
  var valid_610953 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610953 = validateParameter(valid_610953, JString, required = false,
                                 default = nil)
  if valid_610953 != nil:
    section.add "X-Amz-SignedHeaders", valid_610953
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_610954 = formData.getOrDefault("ServerCertificateName")
  valid_610954 = validateParameter(valid_610954, JString, required = true,
                                 default = nil)
  if valid_610954 != nil:
    section.add "ServerCertificateName", valid_610954
  var valid_610955 = formData.getOrDefault("NewPath")
  valid_610955 = validateParameter(valid_610955, JString, required = false,
                                 default = nil)
  if valid_610955 != nil:
    section.add "NewPath", valid_610955
  var valid_610956 = formData.getOrDefault("NewServerCertificateName")
  valid_610956 = validateParameter(valid_610956, JString, required = false,
                                 default = nil)
  if valid_610956 != nil:
    section.add "NewServerCertificateName", valid_610956
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610957: Call_PostUpdateServerCertificate_610942; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_610957.validator(path, query, header, formData, body)
  let scheme = call_610957.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610957.url(scheme.get, call_610957.host, call_610957.base,
                         call_610957.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610957, url, valid)

proc call*(call_610958: Call_PostUpdateServerCertificate_610942;
          ServerCertificateName: string; NewPath: string = "";
          NewServerCertificateName: string = "";
          Action: string = "UpdateServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610959 = newJObject()
  var formData_610960 = newJObject()
  add(formData_610960, "ServerCertificateName", newJString(ServerCertificateName))
  add(formData_610960, "NewPath", newJString(NewPath))
  add(formData_610960, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  add(query_610959, "Action", newJString(Action))
  add(query_610959, "Version", newJString(Version))
  result = call_610958.call(nil, query_610959, nil, formData_610960, nil)

var postUpdateServerCertificate* = Call_PostUpdateServerCertificate_610942(
    name: "postUpdateServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_PostUpdateServerCertificate_610943, base: "/",
    url: url_PostUpdateServerCertificate_610944,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServerCertificate_610924 = ref object of OpenApiRestCall_605589
proc url_GetUpdateServerCertificate_610926(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateServerCertificate_610925(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_610927 = query.getOrDefault("NewPath")
  valid_610927 = validateParameter(valid_610927, JString, required = false,
                                 default = nil)
  if valid_610927 != nil:
    section.add "NewPath", valid_610927
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_610928 = query.getOrDefault("ServerCertificateName")
  valid_610928 = validateParameter(valid_610928, JString, required = true,
                                 default = nil)
  if valid_610928 != nil:
    section.add "ServerCertificateName", valid_610928
  var valid_610929 = query.getOrDefault("Action")
  valid_610929 = validateParameter(valid_610929, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_610929 != nil:
    section.add "Action", valid_610929
  var valid_610930 = query.getOrDefault("Version")
  valid_610930 = validateParameter(valid_610930, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610930 != nil:
    section.add "Version", valid_610930
  var valid_610931 = query.getOrDefault("NewServerCertificateName")
  valid_610931 = validateParameter(valid_610931, JString, required = false,
                                 default = nil)
  if valid_610931 != nil:
    section.add "NewServerCertificateName", valid_610931
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610932 = header.getOrDefault("X-Amz-Signature")
  valid_610932 = validateParameter(valid_610932, JString, required = false,
                                 default = nil)
  if valid_610932 != nil:
    section.add "X-Amz-Signature", valid_610932
  var valid_610933 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610933 = validateParameter(valid_610933, JString, required = false,
                                 default = nil)
  if valid_610933 != nil:
    section.add "X-Amz-Content-Sha256", valid_610933
  var valid_610934 = header.getOrDefault("X-Amz-Date")
  valid_610934 = validateParameter(valid_610934, JString, required = false,
                                 default = nil)
  if valid_610934 != nil:
    section.add "X-Amz-Date", valid_610934
  var valid_610935 = header.getOrDefault("X-Amz-Credential")
  valid_610935 = validateParameter(valid_610935, JString, required = false,
                                 default = nil)
  if valid_610935 != nil:
    section.add "X-Amz-Credential", valid_610935
  var valid_610936 = header.getOrDefault("X-Amz-Security-Token")
  valid_610936 = validateParameter(valid_610936, JString, required = false,
                                 default = nil)
  if valid_610936 != nil:
    section.add "X-Amz-Security-Token", valid_610936
  var valid_610937 = header.getOrDefault("X-Amz-Algorithm")
  valid_610937 = validateParameter(valid_610937, JString, required = false,
                                 default = nil)
  if valid_610937 != nil:
    section.add "X-Amz-Algorithm", valid_610937
  var valid_610938 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610938 = validateParameter(valid_610938, JString, required = false,
                                 default = nil)
  if valid_610938 != nil:
    section.add "X-Amz-SignedHeaders", valid_610938
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610939: Call_GetUpdateServerCertificate_610924; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_610939.validator(path, query, header, formData, body)
  let scheme = call_610939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610939.url(scheme.get, call_610939.host, call_610939.base,
                         call_610939.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610939, url, valid)

proc call*(call_610940: Call_GetUpdateServerCertificate_610924;
          ServerCertificateName: string; NewPath: string = "";
          Action: string = "UpdateServerCertificate";
          Version: string = "2010-05-08"; NewServerCertificateName: string = ""): Recallable =
  ## getUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_610941 = newJObject()
  add(query_610941, "NewPath", newJString(NewPath))
  add(query_610941, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_610941, "Action", newJString(Action))
  add(query_610941, "Version", newJString(Version))
  add(query_610941, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  result = call_610940.call(nil, query_610941, nil, nil, nil)

var getUpdateServerCertificate* = Call_GetUpdateServerCertificate_610924(
    name: "getUpdateServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_GetUpdateServerCertificate_610925, base: "/",
    url: url_GetUpdateServerCertificate_610926,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServiceSpecificCredential_610979 = ref object of OpenApiRestCall_605589
proc url_PostUpdateServiceSpecificCredential_610981(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateServiceSpecificCredential_610980(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610982 = query.getOrDefault("Action")
  valid_610982 = validateParameter(valid_610982, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_610982 != nil:
    section.add "Action", valid_610982
  var valid_610983 = query.getOrDefault("Version")
  valid_610983 = validateParameter(valid_610983, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610983 != nil:
    section.add "Version", valid_610983
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610984 = header.getOrDefault("X-Amz-Signature")
  valid_610984 = validateParameter(valid_610984, JString, required = false,
                                 default = nil)
  if valid_610984 != nil:
    section.add "X-Amz-Signature", valid_610984
  var valid_610985 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610985 = validateParameter(valid_610985, JString, required = false,
                                 default = nil)
  if valid_610985 != nil:
    section.add "X-Amz-Content-Sha256", valid_610985
  var valid_610986 = header.getOrDefault("X-Amz-Date")
  valid_610986 = validateParameter(valid_610986, JString, required = false,
                                 default = nil)
  if valid_610986 != nil:
    section.add "X-Amz-Date", valid_610986
  var valid_610987 = header.getOrDefault("X-Amz-Credential")
  valid_610987 = validateParameter(valid_610987, JString, required = false,
                                 default = nil)
  if valid_610987 != nil:
    section.add "X-Amz-Credential", valid_610987
  var valid_610988 = header.getOrDefault("X-Amz-Security-Token")
  valid_610988 = validateParameter(valid_610988, JString, required = false,
                                 default = nil)
  if valid_610988 != nil:
    section.add "X-Amz-Security-Token", valid_610988
  var valid_610989 = header.getOrDefault("X-Amz-Algorithm")
  valid_610989 = validateParameter(valid_610989, JString, required = false,
                                 default = nil)
  if valid_610989 != nil:
    section.add "X-Amz-Algorithm", valid_610989
  var valid_610990 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610990 = validateParameter(valid_610990, JString, required = false,
                                 default = nil)
  if valid_610990 != nil:
    section.add "X-Amz-SignedHeaders", valid_610990
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_610991 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_610991 = validateParameter(valid_610991, JString, required = true,
                                 default = nil)
  if valid_610991 != nil:
    section.add "ServiceSpecificCredentialId", valid_610991
  var valid_610992 = formData.getOrDefault("UserName")
  valid_610992 = validateParameter(valid_610992, JString, required = false,
                                 default = nil)
  if valid_610992 != nil:
    section.add "UserName", valid_610992
  var valid_610993 = formData.getOrDefault("Status")
  valid_610993 = validateParameter(valid_610993, JString, required = true,
                                 default = newJString("Active"))
  if valid_610993 != nil:
    section.add "Status", valid_610993
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610994: Call_PostUpdateServiceSpecificCredential_610979;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_610994.validator(path, query, header, formData, body)
  let scheme = call_610994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610994.url(scheme.get, call_610994.host, call_610994.base,
                         call_610994.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610994, url, valid)

proc call*(call_610995: Call_PostUpdateServiceSpecificCredential_610979;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "UpdateServiceSpecificCredential";
          Status: string = "Active"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   Version: string (required)
  var query_610996 = newJObject()
  var formData_610997 = newJObject()
  add(formData_610997, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_610997, "UserName", newJString(UserName))
  add(query_610996, "Action", newJString(Action))
  add(formData_610997, "Status", newJString(Status))
  add(query_610996, "Version", newJString(Version))
  result = call_610995.call(nil, query_610996, nil, formData_610997, nil)

var postUpdateServiceSpecificCredential* = Call_PostUpdateServiceSpecificCredential_610979(
    name: "postUpdateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_PostUpdateServiceSpecificCredential_610980, base: "/",
    url: url_PostUpdateServiceSpecificCredential_610981,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServiceSpecificCredential_610961 = ref object of OpenApiRestCall_605589
proc url_GetUpdateServiceSpecificCredential_610963(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateServiceSpecificCredential_610962(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610964 = query.getOrDefault("UserName")
  valid_610964 = validateParameter(valid_610964, JString, required = false,
                                 default = nil)
  if valid_610964 != nil:
    section.add "UserName", valid_610964
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_610965 = query.getOrDefault("Status")
  valid_610965 = validateParameter(valid_610965, JString, required = true,
                                 default = newJString("Active"))
  if valid_610965 != nil:
    section.add "Status", valid_610965
  var valid_610966 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_610966 = validateParameter(valid_610966, JString, required = true,
                                 default = nil)
  if valid_610966 != nil:
    section.add "ServiceSpecificCredentialId", valid_610966
  var valid_610967 = query.getOrDefault("Action")
  valid_610967 = validateParameter(valid_610967, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_610967 != nil:
    section.add "Action", valid_610967
  var valid_610968 = query.getOrDefault("Version")
  valid_610968 = validateParameter(valid_610968, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610968 != nil:
    section.add "Version", valid_610968
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610969 = header.getOrDefault("X-Amz-Signature")
  valid_610969 = validateParameter(valid_610969, JString, required = false,
                                 default = nil)
  if valid_610969 != nil:
    section.add "X-Amz-Signature", valid_610969
  var valid_610970 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610970 = validateParameter(valid_610970, JString, required = false,
                                 default = nil)
  if valid_610970 != nil:
    section.add "X-Amz-Content-Sha256", valid_610970
  var valid_610971 = header.getOrDefault("X-Amz-Date")
  valid_610971 = validateParameter(valid_610971, JString, required = false,
                                 default = nil)
  if valid_610971 != nil:
    section.add "X-Amz-Date", valid_610971
  var valid_610972 = header.getOrDefault("X-Amz-Credential")
  valid_610972 = validateParameter(valid_610972, JString, required = false,
                                 default = nil)
  if valid_610972 != nil:
    section.add "X-Amz-Credential", valid_610972
  var valid_610973 = header.getOrDefault("X-Amz-Security-Token")
  valid_610973 = validateParameter(valid_610973, JString, required = false,
                                 default = nil)
  if valid_610973 != nil:
    section.add "X-Amz-Security-Token", valid_610973
  var valid_610974 = header.getOrDefault("X-Amz-Algorithm")
  valid_610974 = validateParameter(valid_610974, JString, required = false,
                                 default = nil)
  if valid_610974 != nil:
    section.add "X-Amz-Algorithm", valid_610974
  var valid_610975 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610975 = validateParameter(valid_610975, JString, required = false,
                                 default = nil)
  if valid_610975 != nil:
    section.add "X-Amz-SignedHeaders", valid_610975
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610976: Call_GetUpdateServiceSpecificCredential_610961;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_610976.validator(path, query, header, formData, body)
  let scheme = call_610976.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610976.url(scheme.get, call_610976.host, call_610976.base,
                         call_610976.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610976, url, valid)

proc call*(call_610977: Call_GetUpdateServiceSpecificCredential_610961;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Status: string = "Active";
          Action: string = "UpdateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610978 = newJObject()
  add(query_610978, "UserName", newJString(UserName))
  add(query_610978, "Status", newJString(Status))
  add(query_610978, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_610978, "Action", newJString(Action))
  add(query_610978, "Version", newJString(Version))
  result = call_610977.call(nil, query_610978, nil, nil, nil)

var getUpdateServiceSpecificCredential* = Call_GetUpdateServiceSpecificCredential_610961(
    name: "getUpdateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_GetUpdateServiceSpecificCredential_610962, base: "/",
    url: url_GetUpdateServiceSpecificCredential_610963,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSigningCertificate_611016 = ref object of OpenApiRestCall_605589
proc url_PostUpdateSigningCertificate_611018(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSigningCertificate_611017(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611019 = query.getOrDefault("Action")
  valid_611019 = validateParameter(valid_611019, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_611019 != nil:
    section.add "Action", valid_611019
  var valid_611020 = query.getOrDefault("Version")
  valid_611020 = validateParameter(valid_611020, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611020 != nil:
    section.add "Version", valid_611020
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611021 = header.getOrDefault("X-Amz-Signature")
  valid_611021 = validateParameter(valid_611021, JString, required = false,
                                 default = nil)
  if valid_611021 != nil:
    section.add "X-Amz-Signature", valid_611021
  var valid_611022 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611022 = validateParameter(valid_611022, JString, required = false,
                                 default = nil)
  if valid_611022 != nil:
    section.add "X-Amz-Content-Sha256", valid_611022
  var valid_611023 = header.getOrDefault("X-Amz-Date")
  valid_611023 = validateParameter(valid_611023, JString, required = false,
                                 default = nil)
  if valid_611023 != nil:
    section.add "X-Amz-Date", valid_611023
  var valid_611024 = header.getOrDefault("X-Amz-Credential")
  valid_611024 = validateParameter(valid_611024, JString, required = false,
                                 default = nil)
  if valid_611024 != nil:
    section.add "X-Amz-Credential", valid_611024
  var valid_611025 = header.getOrDefault("X-Amz-Security-Token")
  valid_611025 = validateParameter(valid_611025, JString, required = false,
                                 default = nil)
  if valid_611025 != nil:
    section.add "X-Amz-Security-Token", valid_611025
  var valid_611026 = header.getOrDefault("X-Amz-Algorithm")
  valid_611026 = validateParameter(valid_611026, JString, required = false,
                                 default = nil)
  if valid_611026 != nil:
    section.add "X-Amz-Algorithm", valid_611026
  var valid_611027 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611027 = validateParameter(valid_611027, JString, required = false,
                                 default = nil)
  if valid_611027 != nil:
    section.add "X-Amz-SignedHeaders", valid_611027
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CertificateId` field"
  var valid_611028 = formData.getOrDefault("CertificateId")
  valid_611028 = validateParameter(valid_611028, JString, required = true,
                                 default = nil)
  if valid_611028 != nil:
    section.add "CertificateId", valid_611028
  var valid_611029 = formData.getOrDefault("UserName")
  valid_611029 = validateParameter(valid_611029, JString, required = false,
                                 default = nil)
  if valid_611029 != nil:
    section.add "UserName", valid_611029
  var valid_611030 = formData.getOrDefault("Status")
  valid_611030 = validateParameter(valid_611030, JString, required = true,
                                 default = newJString("Active"))
  if valid_611030 != nil:
    section.add "Status", valid_611030
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611031: Call_PostUpdateSigningCertificate_611016; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_611031.validator(path, query, header, formData, body)
  let scheme = call_611031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611031.url(scheme.get, call_611031.host, call_611031.base,
                         call_611031.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611031, url, valid)

proc call*(call_611032: Call_PostUpdateSigningCertificate_611016;
          CertificateId: string; UserName: string = "";
          Action: string = "UpdateSigningCertificate"; Status: string = "Active";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   Version: string (required)
  var query_611033 = newJObject()
  var formData_611034 = newJObject()
  add(formData_611034, "CertificateId", newJString(CertificateId))
  add(formData_611034, "UserName", newJString(UserName))
  add(query_611033, "Action", newJString(Action))
  add(formData_611034, "Status", newJString(Status))
  add(query_611033, "Version", newJString(Version))
  result = call_611032.call(nil, query_611033, nil, formData_611034, nil)

var postUpdateSigningCertificate* = Call_PostUpdateSigningCertificate_611016(
    name: "postUpdateSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_PostUpdateSigningCertificate_611017, base: "/",
    url: url_PostUpdateSigningCertificate_611018,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSigningCertificate_610998 = ref object of OpenApiRestCall_605589
proc url_GetUpdateSigningCertificate_611000(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSigningCertificate_610999(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_611001 = query.getOrDefault("UserName")
  valid_611001 = validateParameter(valid_611001, JString, required = false,
                                 default = nil)
  if valid_611001 != nil:
    section.add "UserName", valid_611001
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_611002 = query.getOrDefault("Status")
  valid_611002 = validateParameter(valid_611002, JString, required = true,
                                 default = newJString("Active"))
  if valid_611002 != nil:
    section.add "Status", valid_611002
  var valid_611003 = query.getOrDefault("Action")
  valid_611003 = validateParameter(valid_611003, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_611003 != nil:
    section.add "Action", valid_611003
  var valid_611004 = query.getOrDefault("Version")
  valid_611004 = validateParameter(valid_611004, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611004 != nil:
    section.add "Version", valid_611004
  var valid_611005 = query.getOrDefault("CertificateId")
  valid_611005 = validateParameter(valid_611005, JString, required = true,
                                 default = nil)
  if valid_611005 != nil:
    section.add "CertificateId", valid_611005
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611006 = header.getOrDefault("X-Amz-Signature")
  valid_611006 = validateParameter(valid_611006, JString, required = false,
                                 default = nil)
  if valid_611006 != nil:
    section.add "X-Amz-Signature", valid_611006
  var valid_611007 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611007 = validateParameter(valid_611007, JString, required = false,
                                 default = nil)
  if valid_611007 != nil:
    section.add "X-Amz-Content-Sha256", valid_611007
  var valid_611008 = header.getOrDefault("X-Amz-Date")
  valid_611008 = validateParameter(valid_611008, JString, required = false,
                                 default = nil)
  if valid_611008 != nil:
    section.add "X-Amz-Date", valid_611008
  var valid_611009 = header.getOrDefault("X-Amz-Credential")
  valid_611009 = validateParameter(valid_611009, JString, required = false,
                                 default = nil)
  if valid_611009 != nil:
    section.add "X-Amz-Credential", valid_611009
  var valid_611010 = header.getOrDefault("X-Amz-Security-Token")
  valid_611010 = validateParameter(valid_611010, JString, required = false,
                                 default = nil)
  if valid_611010 != nil:
    section.add "X-Amz-Security-Token", valid_611010
  var valid_611011 = header.getOrDefault("X-Amz-Algorithm")
  valid_611011 = validateParameter(valid_611011, JString, required = false,
                                 default = nil)
  if valid_611011 != nil:
    section.add "X-Amz-Algorithm", valid_611011
  var valid_611012 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611012 = validateParameter(valid_611012, JString, required = false,
                                 default = nil)
  if valid_611012 != nil:
    section.add "X-Amz-SignedHeaders", valid_611012
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611013: Call_GetUpdateSigningCertificate_610998; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_611013.validator(path, query, header, formData, body)
  let scheme = call_611013.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611013.url(scheme.get, call_611013.host, call_611013.base,
                         call_611013.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611013, url, valid)

proc call*(call_611014: Call_GetUpdateSigningCertificate_610998;
          CertificateId: string; UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  var query_611015 = newJObject()
  add(query_611015, "UserName", newJString(UserName))
  add(query_611015, "Status", newJString(Status))
  add(query_611015, "Action", newJString(Action))
  add(query_611015, "Version", newJString(Version))
  add(query_611015, "CertificateId", newJString(CertificateId))
  result = call_611014.call(nil, query_611015, nil, nil, nil)

var getUpdateSigningCertificate* = Call_GetUpdateSigningCertificate_610998(
    name: "getUpdateSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_GetUpdateSigningCertificate_610999, base: "/",
    url: url_GetUpdateSigningCertificate_611000,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateUser_611053 = ref object of OpenApiRestCall_605589
proc url_PostUpdateUser_611055(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateUser_611054(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611056 = query.getOrDefault("Action")
  valid_611056 = validateParameter(valid_611056, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_611056 != nil:
    section.add "Action", valid_611056
  var valid_611057 = query.getOrDefault("Version")
  valid_611057 = validateParameter(valid_611057, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611057 != nil:
    section.add "Version", valid_611057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611058 = header.getOrDefault("X-Amz-Signature")
  valid_611058 = validateParameter(valid_611058, JString, required = false,
                                 default = nil)
  if valid_611058 != nil:
    section.add "X-Amz-Signature", valid_611058
  var valid_611059 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611059 = validateParameter(valid_611059, JString, required = false,
                                 default = nil)
  if valid_611059 != nil:
    section.add "X-Amz-Content-Sha256", valid_611059
  var valid_611060 = header.getOrDefault("X-Amz-Date")
  valid_611060 = validateParameter(valid_611060, JString, required = false,
                                 default = nil)
  if valid_611060 != nil:
    section.add "X-Amz-Date", valid_611060
  var valid_611061 = header.getOrDefault("X-Amz-Credential")
  valid_611061 = validateParameter(valid_611061, JString, required = false,
                                 default = nil)
  if valid_611061 != nil:
    section.add "X-Amz-Credential", valid_611061
  var valid_611062 = header.getOrDefault("X-Amz-Security-Token")
  valid_611062 = validateParameter(valid_611062, JString, required = false,
                                 default = nil)
  if valid_611062 != nil:
    section.add "X-Amz-Security-Token", valid_611062
  var valid_611063 = header.getOrDefault("X-Amz-Algorithm")
  valid_611063 = validateParameter(valid_611063, JString, required = false,
                                 default = nil)
  if valid_611063 != nil:
    section.add "X-Amz-Algorithm", valid_611063
  var valid_611064 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611064 = validateParameter(valid_611064, JString, required = false,
                                 default = nil)
  if valid_611064 != nil:
    section.add "X-Amz-SignedHeaders", valid_611064
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  section = newJObject()
  var valid_611065 = formData.getOrDefault("NewPath")
  valid_611065 = validateParameter(valid_611065, JString, required = false,
                                 default = nil)
  if valid_611065 != nil:
    section.add "NewPath", valid_611065
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_611066 = formData.getOrDefault("UserName")
  valid_611066 = validateParameter(valid_611066, JString, required = true,
                                 default = nil)
  if valid_611066 != nil:
    section.add "UserName", valid_611066
  var valid_611067 = formData.getOrDefault("NewUserName")
  valid_611067 = validateParameter(valid_611067, JString, required = false,
                                 default = nil)
  if valid_611067 != nil:
    section.add "NewUserName", valid_611067
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611068: Call_PostUpdateUser_611053; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_611068.validator(path, query, header, formData, body)
  let scheme = call_611068.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611068.url(scheme.get, call_611068.host, call_611068.base,
                         call_611068.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611068, url, valid)

proc call*(call_611069: Call_PostUpdateUser_611053; UserName: string;
          NewPath: string = ""; Action: string = "UpdateUser"; NewUserName: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: string (required)
  var query_611070 = newJObject()
  var formData_611071 = newJObject()
  add(formData_611071, "NewPath", newJString(NewPath))
  add(formData_611071, "UserName", newJString(UserName))
  add(query_611070, "Action", newJString(Action))
  add(formData_611071, "NewUserName", newJString(NewUserName))
  add(query_611070, "Version", newJString(Version))
  result = call_611069.call(nil, query_611070, nil, formData_611071, nil)

var postUpdateUser* = Call_PostUpdateUser_611053(name: "postUpdateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_PostUpdateUser_611054,
    base: "/", url: url_PostUpdateUser_611055, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateUser_611035 = ref object of OpenApiRestCall_605589
proc url_GetUpdateUser_611037(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateUser_611036(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_611038 = query.getOrDefault("UserName")
  valid_611038 = validateParameter(valid_611038, JString, required = true,
                                 default = nil)
  if valid_611038 != nil:
    section.add "UserName", valid_611038
  var valid_611039 = query.getOrDefault("NewUserName")
  valid_611039 = validateParameter(valid_611039, JString, required = false,
                                 default = nil)
  if valid_611039 != nil:
    section.add "NewUserName", valid_611039
  var valid_611040 = query.getOrDefault("NewPath")
  valid_611040 = validateParameter(valid_611040, JString, required = false,
                                 default = nil)
  if valid_611040 != nil:
    section.add "NewPath", valid_611040
  var valid_611041 = query.getOrDefault("Action")
  valid_611041 = validateParameter(valid_611041, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_611041 != nil:
    section.add "Action", valid_611041
  var valid_611042 = query.getOrDefault("Version")
  valid_611042 = validateParameter(valid_611042, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611042 != nil:
    section.add "Version", valid_611042
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611043 = header.getOrDefault("X-Amz-Signature")
  valid_611043 = validateParameter(valid_611043, JString, required = false,
                                 default = nil)
  if valid_611043 != nil:
    section.add "X-Amz-Signature", valid_611043
  var valid_611044 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611044 = validateParameter(valid_611044, JString, required = false,
                                 default = nil)
  if valid_611044 != nil:
    section.add "X-Amz-Content-Sha256", valid_611044
  var valid_611045 = header.getOrDefault("X-Amz-Date")
  valid_611045 = validateParameter(valid_611045, JString, required = false,
                                 default = nil)
  if valid_611045 != nil:
    section.add "X-Amz-Date", valid_611045
  var valid_611046 = header.getOrDefault("X-Amz-Credential")
  valid_611046 = validateParameter(valid_611046, JString, required = false,
                                 default = nil)
  if valid_611046 != nil:
    section.add "X-Amz-Credential", valid_611046
  var valid_611047 = header.getOrDefault("X-Amz-Security-Token")
  valid_611047 = validateParameter(valid_611047, JString, required = false,
                                 default = nil)
  if valid_611047 != nil:
    section.add "X-Amz-Security-Token", valid_611047
  var valid_611048 = header.getOrDefault("X-Amz-Algorithm")
  valid_611048 = validateParameter(valid_611048, JString, required = false,
                                 default = nil)
  if valid_611048 != nil:
    section.add "X-Amz-Algorithm", valid_611048
  var valid_611049 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611049 = validateParameter(valid_611049, JString, required = false,
                                 default = nil)
  if valid_611049 != nil:
    section.add "X-Amz-SignedHeaders", valid_611049
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611050: Call_GetUpdateUser_611035; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_611050.validator(path, query, header, formData, body)
  let scheme = call_611050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611050.url(scheme.get, call_611050.host, call_611050.base,
                         call_611050.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611050, url, valid)

proc call*(call_611051: Call_GetUpdateUser_611035; UserName: string;
          NewUserName: string = ""; NewPath: string = ""; Action: string = "UpdateUser";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611052 = newJObject()
  add(query_611052, "UserName", newJString(UserName))
  add(query_611052, "NewUserName", newJString(NewUserName))
  add(query_611052, "NewPath", newJString(NewPath))
  add(query_611052, "Action", newJString(Action))
  add(query_611052, "Version", newJString(Version))
  result = call_611051.call(nil, query_611052, nil, nil, nil)

var getUpdateUser* = Call_GetUpdateUser_611035(name: "getUpdateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_GetUpdateUser_611036,
    base: "/", url: url_GetUpdateUser_611037, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSSHPublicKey_611089 = ref object of OpenApiRestCall_605589
proc url_PostUploadSSHPublicKey_611091(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadSSHPublicKey_611090(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611092 = query.getOrDefault("Action")
  valid_611092 = validateParameter(valid_611092, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_611092 != nil:
    section.add "Action", valid_611092
  var valid_611093 = query.getOrDefault("Version")
  valid_611093 = validateParameter(valid_611093, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611093 != nil:
    section.add "Version", valid_611093
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611094 = header.getOrDefault("X-Amz-Signature")
  valid_611094 = validateParameter(valid_611094, JString, required = false,
                                 default = nil)
  if valid_611094 != nil:
    section.add "X-Amz-Signature", valid_611094
  var valid_611095 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611095 = validateParameter(valid_611095, JString, required = false,
                                 default = nil)
  if valid_611095 != nil:
    section.add "X-Amz-Content-Sha256", valid_611095
  var valid_611096 = header.getOrDefault("X-Amz-Date")
  valid_611096 = validateParameter(valid_611096, JString, required = false,
                                 default = nil)
  if valid_611096 != nil:
    section.add "X-Amz-Date", valid_611096
  var valid_611097 = header.getOrDefault("X-Amz-Credential")
  valid_611097 = validateParameter(valid_611097, JString, required = false,
                                 default = nil)
  if valid_611097 != nil:
    section.add "X-Amz-Credential", valid_611097
  var valid_611098 = header.getOrDefault("X-Amz-Security-Token")
  valid_611098 = validateParameter(valid_611098, JString, required = false,
                                 default = nil)
  if valid_611098 != nil:
    section.add "X-Amz-Security-Token", valid_611098
  var valid_611099 = header.getOrDefault("X-Amz-Algorithm")
  valid_611099 = validateParameter(valid_611099, JString, required = false,
                                 default = nil)
  if valid_611099 != nil:
    section.add "X-Amz-Algorithm", valid_611099
  var valid_611100 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611100 = validateParameter(valid_611100, JString, required = false,
                                 default = nil)
  if valid_611100 != nil:
    section.add "X-Amz-SignedHeaders", valid_611100
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SSHPublicKeyBody` field"
  var valid_611101 = formData.getOrDefault("SSHPublicKeyBody")
  valid_611101 = validateParameter(valid_611101, JString, required = true,
                                 default = nil)
  if valid_611101 != nil:
    section.add "SSHPublicKeyBody", valid_611101
  var valid_611102 = formData.getOrDefault("UserName")
  valid_611102 = validateParameter(valid_611102, JString, required = true,
                                 default = nil)
  if valid_611102 != nil:
    section.add "UserName", valid_611102
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611103: Call_PostUploadSSHPublicKey_611089; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_611103.validator(path, query, header, formData, body)
  let scheme = call_611103.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611103.url(scheme.get, call_611103.host, call_611103.base,
                         call_611103.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611103, url, valid)

proc call*(call_611104: Call_PostUploadSSHPublicKey_611089;
          SSHPublicKeyBody: string; UserName: string;
          Action: string = "UploadSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611105 = newJObject()
  var formData_611106 = newJObject()
  add(formData_611106, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(formData_611106, "UserName", newJString(UserName))
  add(query_611105, "Action", newJString(Action))
  add(query_611105, "Version", newJString(Version))
  result = call_611104.call(nil, query_611105, nil, formData_611106, nil)

var postUploadSSHPublicKey* = Call_PostUploadSSHPublicKey_611089(
    name: "postUploadSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_PostUploadSSHPublicKey_611090, base: "/",
    url: url_PostUploadSSHPublicKey_611091, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSSHPublicKey_611072 = ref object of OpenApiRestCall_605589
proc url_GetUploadSSHPublicKey_611074(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadSSHPublicKey_611073(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyBody` field"
  var valid_611075 = query.getOrDefault("SSHPublicKeyBody")
  valid_611075 = validateParameter(valid_611075, JString, required = true,
                                 default = nil)
  if valid_611075 != nil:
    section.add "SSHPublicKeyBody", valid_611075
  var valid_611076 = query.getOrDefault("UserName")
  valid_611076 = validateParameter(valid_611076, JString, required = true,
                                 default = nil)
  if valid_611076 != nil:
    section.add "UserName", valid_611076
  var valid_611077 = query.getOrDefault("Action")
  valid_611077 = validateParameter(valid_611077, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_611077 != nil:
    section.add "Action", valid_611077
  var valid_611078 = query.getOrDefault("Version")
  valid_611078 = validateParameter(valid_611078, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611078 != nil:
    section.add "Version", valid_611078
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611079 = header.getOrDefault("X-Amz-Signature")
  valid_611079 = validateParameter(valid_611079, JString, required = false,
                                 default = nil)
  if valid_611079 != nil:
    section.add "X-Amz-Signature", valid_611079
  var valid_611080 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611080 = validateParameter(valid_611080, JString, required = false,
                                 default = nil)
  if valid_611080 != nil:
    section.add "X-Amz-Content-Sha256", valid_611080
  var valid_611081 = header.getOrDefault("X-Amz-Date")
  valid_611081 = validateParameter(valid_611081, JString, required = false,
                                 default = nil)
  if valid_611081 != nil:
    section.add "X-Amz-Date", valid_611081
  var valid_611082 = header.getOrDefault("X-Amz-Credential")
  valid_611082 = validateParameter(valid_611082, JString, required = false,
                                 default = nil)
  if valid_611082 != nil:
    section.add "X-Amz-Credential", valid_611082
  var valid_611083 = header.getOrDefault("X-Amz-Security-Token")
  valid_611083 = validateParameter(valid_611083, JString, required = false,
                                 default = nil)
  if valid_611083 != nil:
    section.add "X-Amz-Security-Token", valid_611083
  var valid_611084 = header.getOrDefault("X-Amz-Algorithm")
  valid_611084 = validateParameter(valid_611084, JString, required = false,
                                 default = nil)
  if valid_611084 != nil:
    section.add "X-Amz-Algorithm", valid_611084
  var valid_611085 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611085 = validateParameter(valid_611085, JString, required = false,
                                 default = nil)
  if valid_611085 != nil:
    section.add "X-Amz-SignedHeaders", valid_611085
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611086: Call_GetUploadSSHPublicKey_611072; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_611086.validator(path, query, header, formData, body)
  let scheme = call_611086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611086.url(scheme.get, call_611086.host, call_611086.base,
                         call_611086.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611086, url, valid)

proc call*(call_611087: Call_GetUploadSSHPublicKey_611072;
          SSHPublicKeyBody: string; UserName: string;
          Action: string = "UploadSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611088 = newJObject()
  add(query_611088, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(query_611088, "UserName", newJString(UserName))
  add(query_611088, "Action", newJString(Action))
  add(query_611088, "Version", newJString(Version))
  result = call_611087.call(nil, query_611088, nil, nil, nil)

var getUploadSSHPublicKey* = Call_GetUploadSSHPublicKey_611072(
    name: "getUploadSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_GetUploadSSHPublicKey_611073, base: "/",
    url: url_GetUploadSSHPublicKey_611074, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadServerCertificate_611127 = ref object of OpenApiRestCall_605589
proc url_PostUploadServerCertificate_611129(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadServerCertificate_611128(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611130 = query.getOrDefault("Action")
  valid_611130 = validateParameter(valid_611130, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_611130 != nil:
    section.add "Action", valid_611130
  var valid_611131 = query.getOrDefault("Version")
  valid_611131 = validateParameter(valid_611131, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611131 != nil:
    section.add "Version", valid_611131
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611132 = header.getOrDefault("X-Amz-Signature")
  valid_611132 = validateParameter(valid_611132, JString, required = false,
                                 default = nil)
  if valid_611132 != nil:
    section.add "X-Amz-Signature", valid_611132
  var valid_611133 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611133 = validateParameter(valid_611133, JString, required = false,
                                 default = nil)
  if valid_611133 != nil:
    section.add "X-Amz-Content-Sha256", valid_611133
  var valid_611134 = header.getOrDefault("X-Amz-Date")
  valid_611134 = validateParameter(valid_611134, JString, required = false,
                                 default = nil)
  if valid_611134 != nil:
    section.add "X-Amz-Date", valid_611134
  var valid_611135 = header.getOrDefault("X-Amz-Credential")
  valid_611135 = validateParameter(valid_611135, JString, required = false,
                                 default = nil)
  if valid_611135 != nil:
    section.add "X-Amz-Credential", valid_611135
  var valid_611136 = header.getOrDefault("X-Amz-Security-Token")
  valid_611136 = validateParameter(valid_611136, JString, required = false,
                                 default = nil)
  if valid_611136 != nil:
    section.add "X-Amz-Security-Token", valid_611136
  var valid_611137 = header.getOrDefault("X-Amz-Algorithm")
  valid_611137 = validateParameter(valid_611137, JString, required = false,
                                 default = nil)
  if valid_611137 != nil:
    section.add "X-Amz-Algorithm", valid_611137
  var valid_611138 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611138 = validateParameter(valid_611138, JString, required = false,
                                 default = nil)
  if valid_611138 != nil:
    section.add "X-Amz-SignedHeaders", valid_611138
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_611139 = formData.getOrDefault("CertificateBody")
  valid_611139 = validateParameter(valid_611139, JString, required = true,
                                 default = nil)
  if valid_611139 != nil:
    section.add "CertificateBody", valid_611139
  var valid_611140 = formData.getOrDefault("PrivateKey")
  valid_611140 = validateParameter(valid_611140, JString, required = true,
                                 default = nil)
  if valid_611140 != nil:
    section.add "PrivateKey", valid_611140
  var valid_611141 = formData.getOrDefault("CertificateChain")
  valid_611141 = validateParameter(valid_611141, JString, required = false,
                                 default = nil)
  if valid_611141 != nil:
    section.add "CertificateChain", valid_611141
  var valid_611142 = formData.getOrDefault("ServerCertificateName")
  valid_611142 = validateParameter(valid_611142, JString, required = true,
                                 default = nil)
  if valid_611142 != nil:
    section.add "ServerCertificateName", valid_611142
  var valid_611143 = formData.getOrDefault("Path")
  valid_611143 = validateParameter(valid_611143, JString, required = false,
                                 default = nil)
  if valid_611143 != nil:
    section.add "Path", valid_611143
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611144: Call_PostUploadServerCertificate_611127; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_611144.validator(path, query, header, formData, body)
  let scheme = call_611144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611144.url(scheme.get, call_611144.host, call_611144.base,
                         call_611144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611144, url, valid)

proc call*(call_611145: Call_PostUploadServerCertificate_611127;
          CertificateBody: string; PrivateKey: string;
          ServerCertificateName: string; CertificateChain: string = "";
          Path: string = ""; Action: string = "UploadServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611146 = newJObject()
  var formData_611147 = newJObject()
  add(formData_611147, "CertificateBody", newJString(CertificateBody))
  add(formData_611147, "PrivateKey", newJString(PrivateKey))
  add(formData_611147, "CertificateChain", newJString(CertificateChain))
  add(formData_611147, "ServerCertificateName", newJString(ServerCertificateName))
  add(formData_611147, "Path", newJString(Path))
  add(query_611146, "Action", newJString(Action))
  add(query_611146, "Version", newJString(Version))
  result = call_611145.call(nil, query_611146, nil, formData_611147, nil)

var postUploadServerCertificate* = Call_PostUploadServerCertificate_611127(
    name: "postUploadServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_PostUploadServerCertificate_611128, base: "/",
    url: url_PostUploadServerCertificate_611129,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadServerCertificate_611107 = ref object of OpenApiRestCall_605589
proc url_GetUploadServerCertificate_611109(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadServerCertificate_611108(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611110 = query.getOrDefault("CertificateChain")
  valid_611110 = validateParameter(valid_611110, JString, required = false,
                                 default = nil)
  if valid_611110 != nil:
    section.add "CertificateChain", valid_611110
  assert query != nil,
        "query argument is necessary due to required `CertificateBody` field"
  var valid_611111 = query.getOrDefault("CertificateBody")
  valid_611111 = validateParameter(valid_611111, JString, required = true,
                                 default = nil)
  if valid_611111 != nil:
    section.add "CertificateBody", valid_611111
  var valid_611112 = query.getOrDefault("PrivateKey")
  valid_611112 = validateParameter(valid_611112, JString, required = true,
                                 default = nil)
  if valid_611112 != nil:
    section.add "PrivateKey", valid_611112
  var valid_611113 = query.getOrDefault("Path")
  valid_611113 = validateParameter(valid_611113, JString, required = false,
                                 default = nil)
  if valid_611113 != nil:
    section.add "Path", valid_611113
  var valid_611114 = query.getOrDefault("ServerCertificateName")
  valid_611114 = validateParameter(valid_611114, JString, required = true,
                                 default = nil)
  if valid_611114 != nil:
    section.add "ServerCertificateName", valid_611114
  var valid_611115 = query.getOrDefault("Action")
  valid_611115 = validateParameter(valid_611115, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_611115 != nil:
    section.add "Action", valid_611115
  var valid_611116 = query.getOrDefault("Version")
  valid_611116 = validateParameter(valid_611116, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611116 != nil:
    section.add "Version", valid_611116
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611117 = header.getOrDefault("X-Amz-Signature")
  valid_611117 = validateParameter(valid_611117, JString, required = false,
                                 default = nil)
  if valid_611117 != nil:
    section.add "X-Amz-Signature", valid_611117
  var valid_611118 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611118 = validateParameter(valid_611118, JString, required = false,
                                 default = nil)
  if valid_611118 != nil:
    section.add "X-Amz-Content-Sha256", valid_611118
  var valid_611119 = header.getOrDefault("X-Amz-Date")
  valid_611119 = validateParameter(valid_611119, JString, required = false,
                                 default = nil)
  if valid_611119 != nil:
    section.add "X-Amz-Date", valid_611119
  var valid_611120 = header.getOrDefault("X-Amz-Credential")
  valid_611120 = validateParameter(valid_611120, JString, required = false,
                                 default = nil)
  if valid_611120 != nil:
    section.add "X-Amz-Credential", valid_611120
  var valid_611121 = header.getOrDefault("X-Amz-Security-Token")
  valid_611121 = validateParameter(valid_611121, JString, required = false,
                                 default = nil)
  if valid_611121 != nil:
    section.add "X-Amz-Security-Token", valid_611121
  var valid_611122 = header.getOrDefault("X-Amz-Algorithm")
  valid_611122 = validateParameter(valid_611122, JString, required = false,
                                 default = nil)
  if valid_611122 != nil:
    section.add "X-Amz-Algorithm", valid_611122
  var valid_611123 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611123 = validateParameter(valid_611123, JString, required = false,
                                 default = nil)
  if valid_611123 != nil:
    section.add "X-Amz-SignedHeaders", valid_611123
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611124: Call_GetUploadServerCertificate_611107; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_611124.validator(path, query, header, formData, body)
  let scheme = call_611124.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611124.url(scheme.get, call_611124.host, call_611124.base,
                         call_611124.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611124, url, valid)

proc call*(call_611125: Call_GetUploadServerCertificate_611107;
          CertificateBody: string; PrivateKey: string;
          ServerCertificateName: string; CertificateChain: string = "";
          Path: string = ""; Action: string = "UploadServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611126 = newJObject()
  add(query_611126, "CertificateChain", newJString(CertificateChain))
  add(query_611126, "CertificateBody", newJString(CertificateBody))
  add(query_611126, "PrivateKey", newJString(PrivateKey))
  add(query_611126, "Path", newJString(Path))
  add(query_611126, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_611126, "Action", newJString(Action))
  add(query_611126, "Version", newJString(Version))
  result = call_611125.call(nil, query_611126, nil, nil, nil)

var getUploadServerCertificate* = Call_GetUploadServerCertificate_611107(
    name: "getUploadServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_GetUploadServerCertificate_611108, base: "/",
    url: url_GetUploadServerCertificate_611109,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSigningCertificate_611165 = ref object of OpenApiRestCall_605589
proc url_PostUploadSigningCertificate_611167(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadSigningCertificate_611166(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_611168 = query.getOrDefault("Action")
  valid_611168 = validateParameter(valid_611168, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_611168 != nil:
    section.add "Action", valid_611168
  var valid_611169 = query.getOrDefault("Version")
  valid_611169 = validateParameter(valid_611169, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611169 != nil:
    section.add "Version", valid_611169
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611170 = header.getOrDefault("X-Amz-Signature")
  valid_611170 = validateParameter(valid_611170, JString, required = false,
                                 default = nil)
  if valid_611170 != nil:
    section.add "X-Amz-Signature", valid_611170
  var valid_611171 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611171 = validateParameter(valid_611171, JString, required = false,
                                 default = nil)
  if valid_611171 != nil:
    section.add "X-Amz-Content-Sha256", valid_611171
  var valid_611172 = header.getOrDefault("X-Amz-Date")
  valid_611172 = validateParameter(valid_611172, JString, required = false,
                                 default = nil)
  if valid_611172 != nil:
    section.add "X-Amz-Date", valid_611172
  var valid_611173 = header.getOrDefault("X-Amz-Credential")
  valid_611173 = validateParameter(valid_611173, JString, required = false,
                                 default = nil)
  if valid_611173 != nil:
    section.add "X-Amz-Credential", valid_611173
  var valid_611174 = header.getOrDefault("X-Amz-Security-Token")
  valid_611174 = validateParameter(valid_611174, JString, required = false,
                                 default = nil)
  if valid_611174 != nil:
    section.add "X-Amz-Security-Token", valid_611174
  var valid_611175 = header.getOrDefault("X-Amz-Algorithm")
  valid_611175 = validateParameter(valid_611175, JString, required = false,
                                 default = nil)
  if valid_611175 != nil:
    section.add "X-Amz-Algorithm", valid_611175
  var valid_611176 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611176 = validateParameter(valid_611176, JString, required = false,
                                 default = nil)
  if valid_611176 != nil:
    section.add "X-Amz-SignedHeaders", valid_611176
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_611177 = formData.getOrDefault("CertificateBody")
  valid_611177 = validateParameter(valid_611177, JString, required = true,
                                 default = nil)
  if valid_611177 != nil:
    section.add "CertificateBody", valid_611177
  var valid_611178 = formData.getOrDefault("UserName")
  valid_611178 = validateParameter(valid_611178, JString, required = false,
                                 default = nil)
  if valid_611178 != nil:
    section.add "UserName", valid_611178
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611179: Call_PostUploadSigningCertificate_611165; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_611179.validator(path, query, header, formData, body)
  let scheme = call_611179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611179.url(scheme.get, call_611179.host, call_611179.base,
                         call_611179.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611179, url, valid)

proc call*(call_611180: Call_PostUploadSigningCertificate_611165;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611181 = newJObject()
  var formData_611182 = newJObject()
  add(formData_611182, "CertificateBody", newJString(CertificateBody))
  add(formData_611182, "UserName", newJString(UserName))
  add(query_611181, "Action", newJString(Action))
  add(query_611181, "Version", newJString(Version))
  result = call_611180.call(nil, query_611181, nil, formData_611182, nil)

var postUploadSigningCertificate* = Call_PostUploadSigningCertificate_611165(
    name: "postUploadSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_PostUploadSigningCertificate_611166, base: "/",
    url: url_PostUploadSigningCertificate_611167,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSigningCertificate_611148 = ref object of OpenApiRestCall_605589
proc url_GetUploadSigningCertificate_611150(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadSigningCertificate_611149(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611151 = query.getOrDefault("UserName")
  valid_611151 = validateParameter(valid_611151, JString, required = false,
                                 default = nil)
  if valid_611151 != nil:
    section.add "UserName", valid_611151
  assert query != nil,
        "query argument is necessary due to required `CertificateBody` field"
  var valid_611152 = query.getOrDefault("CertificateBody")
  valid_611152 = validateParameter(valid_611152, JString, required = true,
                                 default = nil)
  if valid_611152 != nil:
    section.add "CertificateBody", valid_611152
  var valid_611153 = query.getOrDefault("Action")
  valid_611153 = validateParameter(valid_611153, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_611153 != nil:
    section.add "Action", valid_611153
  var valid_611154 = query.getOrDefault("Version")
  valid_611154 = validateParameter(valid_611154, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611154 != nil:
    section.add "Version", valid_611154
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611155 = header.getOrDefault("X-Amz-Signature")
  valid_611155 = validateParameter(valid_611155, JString, required = false,
                                 default = nil)
  if valid_611155 != nil:
    section.add "X-Amz-Signature", valid_611155
  var valid_611156 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611156 = validateParameter(valid_611156, JString, required = false,
                                 default = nil)
  if valid_611156 != nil:
    section.add "X-Amz-Content-Sha256", valid_611156
  var valid_611157 = header.getOrDefault("X-Amz-Date")
  valid_611157 = validateParameter(valid_611157, JString, required = false,
                                 default = nil)
  if valid_611157 != nil:
    section.add "X-Amz-Date", valid_611157
  var valid_611158 = header.getOrDefault("X-Amz-Credential")
  valid_611158 = validateParameter(valid_611158, JString, required = false,
                                 default = nil)
  if valid_611158 != nil:
    section.add "X-Amz-Credential", valid_611158
  var valid_611159 = header.getOrDefault("X-Amz-Security-Token")
  valid_611159 = validateParameter(valid_611159, JString, required = false,
                                 default = nil)
  if valid_611159 != nil:
    section.add "X-Amz-Security-Token", valid_611159
  var valid_611160 = header.getOrDefault("X-Amz-Algorithm")
  valid_611160 = validateParameter(valid_611160, JString, required = false,
                                 default = nil)
  if valid_611160 != nil:
    section.add "X-Amz-Algorithm", valid_611160
  var valid_611161 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611161 = validateParameter(valid_611161, JString, required = false,
                                 default = nil)
  if valid_611161 != nil:
    section.add "X-Amz-SignedHeaders", valid_611161
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611162: Call_GetUploadSigningCertificate_611148; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_611162.validator(path, query, header, formData, body)
  let scheme = call_611162.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611162.url(scheme.get, call_611162.host, call_611162.base,
                         call_611162.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611162, url, valid)

proc call*(call_611163: Call_GetUploadSigningCertificate_611148;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611164 = newJObject()
  add(query_611164, "UserName", newJString(UserName))
  add(query_611164, "CertificateBody", newJString(CertificateBody))
  add(query_611164, "Action", newJString(Action))
  add(query_611164, "Version", newJString(Version))
  result = call_611163.call(nil, query_611164, nil, nil, nil)

var getUploadSigningCertificate* = Call_GetUploadSigningCertificate_611148(
    name: "getUploadSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_GetUploadSigningCertificate_611149, base: "/",
    url: url_GetUploadSigningCertificate_611150,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, $input.getOrDefault("body"))
  result.atozSign(input.getOrDefault("query"), SHA256)
