
import
  json, options, hashes, tables, openapi/rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: AWS Identity and Access Management
## version: 2010-05-08
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>AWS Identity and Access Management</fullname> <p>AWS Identity and Access Management (IAM) is a web service that you can use to manage users and user permissions under your AWS account. This guide provides descriptions of IAM actions that you can call programmatically. For general information about IAM, see <a href="http://aws.amazon.com/iam/">AWS Identity and Access Management (IAM)</a>. For the user guide for IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/">Using IAM</a>. </p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to IAM and AWS. For example, the SDKs take care of tasks such as cryptographically signing requests (see below), managing errors, and retrying requests automatically. For information about the AWS SDKs, including how to download and install them, see the <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a> page. </p> </note> <p>We recommend that you use the AWS SDKs to make programmatic API calls to IAM. However, you can also use the IAM Query API to make direct calls to the IAM web service. To learn more about the IAM Query API, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>Using IAM</i> guide. IAM supports GET and POST requests for all actions. That is, the API does not require you to use GET for some actions and POST for others. However, GET requests are subject to the limitation size of a URL. Therefore, for operations that require larger sizes, use a POST request. </p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your AWS account access key ID and secret access key for everyday work with IAM. You can use the access key ID and secret access key for an IAM user or you can use the AWS Security Token Service to generate temporary security credentials and use those to sign requests.</p> <p>To sign requests, we recommend that you use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>. If you have an existing application that uses Signature Version 2, you do not have to update it to use Signature Version 4. However, some operations now require Signature Version 4. The documentation for operations that require version 4 indicate this requirement. </p> <p> <b>Additional Resources</b> </p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html">AWS Security Credentials</a>. This topic provides general information about the types of credentials used for accessing AWS. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html">IAM Best Practices</a>. This topic presents a list of suggestions for using the IAM service to help secure your AWS resources. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a>. This set of topics walk you through the process of signing a request using an access key ID and secret access key. </p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/iam/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode): string

  OpenApiRestCall_772597 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_772597](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_772597): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get())

const
  awsServers = {Scheme.Http: {"cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
                           "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable, Scheme.Https: {
      "cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
      "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable}.toTable
const
  awsServiceName = "iam"
method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.}
type
  Call_PostAddClientIDToOpenIDConnectProvider_773205 = ref object of OpenApiRestCall_772597
proc url_PostAddClientIDToOpenIDConnectProvider_773207(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddClientIDToOpenIDConnectProvider_773206(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773208 = query.getOrDefault("Action")
  valid_773208 = validateParameter(valid_773208, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_773208 != nil:
    section.add "Action", valid_773208
  var valid_773209 = query.getOrDefault("Version")
  valid_773209 = validateParameter(valid_773209, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773209 != nil:
    section.add "Version", valid_773209
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773210 = header.getOrDefault("X-Amz-Date")
  valid_773210 = validateParameter(valid_773210, JString, required = false,
                                 default = nil)
  if valid_773210 != nil:
    section.add "X-Amz-Date", valid_773210
  var valid_773211 = header.getOrDefault("X-Amz-Security-Token")
  valid_773211 = validateParameter(valid_773211, JString, required = false,
                                 default = nil)
  if valid_773211 != nil:
    section.add "X-Amz-Security-Token", valid_773211
  var valid_773212 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773212 = validateParameter(valid_773212, JString, required = false,
                                 default = nil)
  if valid_773212 != nil:
    section.add "X-Amz-Content-Sha256", valid_773212
  var valid_773213 = header.getOrDefault("X-Amz-Algorithm")
  valid_773213 = validateParameter(valid_773213, JString, required = false,
                                 default = nil)
  if valid_773213 != nil:
    section.add "X-Amz-Algorithm", valid_773213
  var valid_773214 = header.getOrDefault("X-Amz-Signature")
  valid_773214 = validateParameter(valid_773214, JString, required = false,
                                 default = nil)
  if valid_773214 != nil:
    section.add "X-Amz-Signature", valid_773214
  var valid_773215 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773215 = validateParameter(valid_773215, JString, required = false,
                                 default = nil)
  if valid_773215 != nil:
    section.add "X-Amz-SignedHeaders", valid_773215
  var valid_773216 = header.getOrDefault("X-Amz-Credential")
  valid_773216 = validateParameter(valid_773216, JString, required = false,
                                 default = nil)
  if valid_773216 != nil:
    section.add "X-Amz-Credential", valid_773216
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_773217 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_773217 = validateParameter(valid_773217, JString, required = true,
                                 default = nil)
  if valid_773217 != nil:
    section.add "OpenIDConnectProviderArn", valid_773217
  var valid_773218 = formData.getOrDefault("ClientID")
  valid_773218 = validateParameter(valid_773218, JString, required = true,
                                 default = nil)
  if valid_773218 != nil:
    section.add "ClientID", valid_773218
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773219: Call_PostAddClientIDToOpenIDConnectProvider_773205;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_773219.validator(path, query, header, formData, body)
  let scheme = call_773219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773219.url(scheme.get, call_773219.host, call_773219.base,
                         call_773219.route, valid.getOrDefault("path"))
  result = hook(call_773219, url, valid)

proc call*(call_773220: Call_PostAddClientIDToOpenIDConnectProvider_773205;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  var query_773221 = newJObject()
  var formData_773222 = newJObject()
  add(formData_773222, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_773221, "Action", newJString(Action))
  add(query_773221, "Version", newJString(Version))
  add(formData_773222, "ClientID", newJString(ClientID))
  result = call_773220.call(nil, query_773221, nil, formData_773222, nil)

var postAddClientIDToOpenIDConnectProvider* = Call_PostAddClientIDToOpenIDConnectProvider_773205(
    name: "postAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_PostAddClientIDToOpenIDConnectProvider_773206, base: "/",
    url: url_PostAddClientIDToOpenIDConnectProvider_773207,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddClientIDToOpenIDConnectProvider_772933 = ref object of OpenApiRestCall_772597
proc url_GetAddClientIDToOpenIDConnectProvider_772935(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddClientIDToOpenIDConnectProvider_772934(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_773047 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_773047 = validateParameter(valid_773047, JString, required = true,
                                 default = nil)
  if valid_773047 != nil:
    section.add "OpenIDConnectProviderArn", valid_773047
  var valid_773061 = query.getOrDefault("Action")
  valid_773061 = validateParameter(valid_773061, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_773061 != nil:
    section.add "Action", valid_773061
  var valid_773062 = query.getOrDefault("ClientID")
  valid_773062 = validateParameter(valid_773062, JString, required = true,
                                 default = nil)
  if valid_773062 != nil:
    section.add "ClientID", valid_773062
  var valid_773063 = query.getOrDefault("Version")
  valid_773063 = validateParameter(valid_773063, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773063 != nil:
    section.add "Version", valid_773063
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773064 = header.getOrDefault("X-Amz-Date")
  valid_773064 = validateParameter(valid_773064, JString, required = false,
                                 default = nil)
  if valid_773064 != nil:
    section.add "X-Amz-Date", valid_773064
  var valid_773065 = header.getOrDefault("X-Amz-Security-Token")
  valid_773065 = validateParameter(valid_773065, JString, required = false,
                                 default = nil)
  if valid_773065 != nil:
    section.add "X-Amz-Security-Token", valid_773065
  var valid_773066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773066 = validateParameter(valid_773066, JString, required = false,
                                 default = nil)
  if valid_773066 != nil:
    section.add "X-Amz-Content-Sha256", valid_773066
  var valid_773067 = header.getOrDefault("X-Amz-Algorithm")
  valid_773067 = validateParameter(valid_773067, JString, required = false,
                                 default = nil)
  if valid_773067 != nil:
    section.add "X-Amz-Algorithm", valid_773067
  var valid_773068 = header.getOrDefault("X-Amz-Signature")
  valid_773068 = validateParameter(valid_773068, JString, required = false,
                                 default = nil)
  if valid_773068 != nil:
    section.add "X-Amz-Signature", valid_773068
  var valid_773069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773069 = validateParameter(valid_773069, JString, required = false,
                                 default = nil)
  if valid_773069 != nil:
    section.add "X-Amz-SignedHeaders", valid_773069
  var valid_773070 = header.getOrDefault("X-Amz-Credential")
  valid_773070 = validateParameter(valid_773070, JString, required = false,
                                 default = nil)
  if valid_773070 != nil:
    section.add "X-Amz-Credential", valid_773070
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773093: Call_GetAddClientIDToOpenIDConnectProvider_772933;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_773093.validator(path, query, header, formData, body)
  let scheme = call_773093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773093.url(scheme.get, call_773093.host, call_773093.base,
                         call_773093.route, valid.getOrDefault("path"))
  result = hook(call_773093, url, valid)

proc call*(call_773164: Call_GetAddClientIDToOpenIDConnectProvider_772933;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   Version: string (required)
  var query_773165 = newJObject()
  add(query_773165, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_773165, "Action", newJString(Action))
  add(query_773165, "ClientID", newJString(ClientID))
  add(query_773165, "Version", newJString(Version))
  result = call_773164.call(nil, query_773165, nil, nil, nil)

var getAddClientIDToOpenIDConnectProvider* = Call_GetAddClientIDToOpenIDConnectProvider_772933(
    name: "getAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_GetAddClientIDToOpenIDConnectProvider_772934, base: "/",
    url: url_GetAddClientIDToOpenIDConnectProvider_772935,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToInstanceProfile_773240 = ref object of OpenApiRestCall_772597
proc url_PostAddRoleToInstanceProfile_773242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddRoleToInstanceProfile_773241(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773243 = query.getOrDefault("Action")
  valid_773243 = validateParameter(valid_773243, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_773243 != nil:
    section.add "Action", valid_773243
  var valid_773244 = query.getOrDefault("Version")
  valid_773244 = validateParameter(valid_773244, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773244 != nil:
    section.add "Version", valid_773244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773245 = header.getOrDefault("X-Amz-Date")
  valid_773245 = validateParameter(valid_773245, JString, required = false,
                                 default = nil)
  if valid_773245 != nil:
    section.add "X-Amz-Date", valid_773245
  var valid_773246 = header.getOrDefault("X-Amz-Security-Token")
  valid_773246 = validateParameter(valid_773246, JString, required = false,
                                 default = nil)
  if valid_773246 != nil:
    section.add "X-Amz-Security-Token", valid_773246
  var valid_773247 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773247 = validateParameter(valid_773247, JString, required = false,
                                 default = nil)
  if valid_773247 != nil:
    section.add "X-Amz-Content-Sha256", valid_773247
  var valid_773248 = header.getOrDefault("X-Amz-Algorithm")
  valid_773248 = validateParameter(valid_773248, JString, required = false,
                                 default = nil)
  if valid_773248 != nil:
    section.add "X-Amz-Algorithm", valid_773248
  var valid_773249 = header.getOrDefault("X-Amz-Signature")
  valid_773249 = validateParameter(valid_773249, JString, required = false,
                                 default = nil)
  if valid_773249 != nil:
    section.add "X-Amz-Signature", valid_773249
  var valid_773250 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773250 = validateParameter(valid_773250, JString, required = false,
                                 default = nil)
  if valid_773250 != nil:
    section.add "X-Amz-SignedHeaders", valid_773250
  var valid_773251 = header.getOrDefault("X-Amz-Credential")
  valid_773251 = validateParameter(valid_773251, JString, required = false,
                                 default = nil)
  if valid_773251 != nil:
    section.add "X-Amz-Credential", valid_773251
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_773252 = formData.getOrDefault("RoleName")
  valid_773252 = validateParameter(valid_773252, JString, required = true,
                                 default = nil)
  if valid_773252 != nil:
    section.add "RoleName", valid_773252
  var valid_773253 = formData.getOrDefault("InstanceProfileName")
  valid_773253 = validateParameter(valid_773253, JString, required = true,
                                 default = nil)
  if valid_773253 != nil:
    section.add "InstanceProfileName", valid_773253
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773254: Call_PostAddRoleToInstanceProfile_773240; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_773254.validator(path, query, header, formData, body)
  let scheme = call_773254.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773254.url(scheme.get, call_773254.host, call_773254.base,
                         call_773254.route, valid.getOrDefault("path"))
  result = hook(call_773254, url, valid)

proc call*(call_773255: Call_PostAddRoleToInstanceProfile_773240; RoleName: string;
          InstanceProfileName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_773256 = newJObject()
  var formData_773257 = newJObject()
  add(formData_773257, "RoleName", newJString(RoleName))
  add(query_773256, "Action", newJString(Action))
  add(formData_773257, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_773256, "Version", newJString(Version))
  result = call_773255.call(nil, query_773256, nil, formData_773257, nil)

var postAddRoleToInstanceProfile* = Call_PostAddRoleToInstanceProfile_773240(
    name: "postAddRoleToInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_PostAddRoleToInstanceProfile_773241, base: "/",
    url: url_PostAddRoleToInstanceProfile_773242,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToInstanceProfile_773223 = ref object of OpenApiRestCall_772597
proc url_GetAddRoleToInstanceProfile_773225(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddRoleToInstanceProfile_773224(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_773226 = query.getOrDefault("InstanceProfileName")
  valid_773226 = validateParameter(valid_773226, JString, required = true,
                                 default = nil)
  if valid_773226 != nil:
    section.add "InstanceProfileName", valid_773226
  var valid_773227 = query.getOrDefault("Action")
  valid_773227 = validateParameter(valid_773227, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_773227 != nil:
    section.add "Action", valid_773227
  var valid_773228 = query.getOrDefault("RoleName")
  valid_773228 = validateParameter(valid_773228, JString, required = true,
                                 default = nil)
  if valid_773228 != nil:
    section.add "RoleName", valid_773228
  var valid_773229 = query.getOrDefault("Version")
  valid_773229 = validateParameter(valid_773229, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773229 != nil:
    section.add "Version", valid_773229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773230 = header.getOrDefault("X-Amz-Date")
  valid_773230 = validateParameter(valid_773230, JString, required = false,
                                 default = nil)
  if valid_773230 != nil:
    section.add "X-Amz-Date", valid_773230
  var valid_773231 = header.getOrDefault("X-Amz-Security-Token")
  valid_773231 = validateParameter(valid_773231, JString, required = false,
                                 default = nil)
  if valid_773231 != nil:
    section.add "X-Amz-Security-Token", valid_773231
  var valid_773232 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773232 = validateParameter(valid_773232, JString, required = false,
                                 default = nil)
  if valid_773232 != nil:
    section.add "X-Amz-Content-Sha256", valid_773232
  var valid_773233 = header.getOrDefault("X-Amz-Algorithm")
  valid_773233 = validateParameter(valid_773233, JString, required = false,
                                 default = nil)
  if valid_773233 != nil:
    section.add "X-Amz-Algorithm", valid_773233
  var valid_773234 = header.getOrDefault("X-Amz-Signature")
  valid_773234 = validateParameter(valid_773234, JString, required = false,
                                 default = nil)
  if valid_773234 != nil:
    section.add "X-Amz-Signature", valid_773234
  var valid_773235 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773235 = validateParameter(valid_773235, JString, required = false,
                                 default = nil)
  if valid_773235 != nil:
    section.add "X-Amz-SignedHeaders", valid_773235
  var valid_773236 = header.getOrDefault("X-Amz-Credential")
  valid_773236 = validateParameter(valid_773236, JString, required = false,
                                 default = nil)
  if valid_773236 != nil:
    section.add "X-Amz-Credential", valid_773236
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773237: Call_GetAddRoleToInstanceProfile_773223; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_773237.validator(path, query, header, formData, body)
  let scheme = call_773237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773237.url(scheme.get, call_773237.host, call_773237.base,
                         call_773237.route, valid.getOrDefault("path"))
  result = hook(call_773237, url, valid)

proc call*(call_773238: Call_GetAddRoleToInstanceProfile_773223;
          InstanceProfileName: string; RoleName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_773239 = newJObject()
  add(query_773239, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_773239, "Action", newJString(Action))
  add(query_773239, "RoleName", newJString(RoleName))
  add(query_773239, "Version", newJString(Version))
  result = call_773238.call(nil, query_773239, nil, nil, nil)

var getAddRoleToInstanceProfile* = Call_GetAddRoleToInstanceProfile_773223(
    name: "getAddRoleToInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_GetAddRoleToInstanceProfile_773224, base: "/",
    url: url_GetAddRoleToInstanceProfile_773225,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddUserToGroup_773275 = ref object of OpenApiRestCall_772597
proc url_PostAddUserToGroup_773277(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddUserToGroup_773276(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773278 = query.getOrDefault("Action")
  valid_773278 = validateParameter(valid_773278, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_773278 != nil:
    section.add "Action", valid_773278
  var valid_773279 = query.getOrDefault("Version")
  valid_773279 = validateParameter(valid_773279, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773279 != nil:
    section.add "Version", valid_773279
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773280 = header.getOrDefault("X-Amz-Date")
  valid_773280 = validateParameter(valid_773280, JString, required = false,
                                 default = nil)
  if valid_773280 != nil:
    section.add "X-Amz-Date", valid_773280
  var valid_773281 = header.getOrDefault("X-Amz-Security-Token")
  valid_773281 = validateParameter(valid_773281, JString, required = false,
                                 default = nil)
  if valid_773281 != nil:
    section.add "X-Amz-Security-Token", valid_773281
  var valid_773282 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773282 = validateParameter(valid_773282, JString, required = false,
                                 default = nil)
  if valid_773282 != nil:
    section.add "X-Amz-Content-Sha256", valid_773282
  var valid_773283 = header.getOrDefault("X-Amz-Algorithm")
  valid_773283 = validateParameter(valid_773283, JString, required = false,
                                 default = nil)
  if valid_773283 != nil:
    section.add "X-Amz-Algorithm", valid_773283
  var valid_773284 = header.getOrDefault("X-Amz-Signature")
  valid_773284 = validateParameter(valid_773284, JString, required = false,
                                 default = nil)
  if valid_773284 != nil:
    section.add "X-Amz-Signature", valid_773284
  var valid_773285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773285 = validateParameter(valid_773285, JString, required = false,
                                 default = nil)
  if valid_773285 != nil:
    section.add "X-Amz-SignedHeaders", valid_773285
  var valid_773286 = header.getOrDefault("X-Amz-Credential")
  valid_773286 = validateParameter(valid_773286, JString, required = false,
                                 default = nil)
  if valid_773286 != nil:
    section.add "X-Amz-Credential", valid_773286
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_773287 = formData.getOrDefault("UserName")
  valid_773287 = validateParameter(valid_773287, JString, required = true,
                                 default = nil)
  if valid_773287 != nil:
    section.add "UserName", valid_773287
  var valid_773288 = formData.getOrDefault("GroupName")
  valid_773288 = validateParameter(valid_773288, JString, required = true,
                                 default = nil)
  if valid_773288 != nil:
    section.add "GroupName", valid_773288
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773289: Call_PostAddUserToGroup_773275; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_773289.validator(path, query, header, formData, body)
  let scheme = call_773289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773289.url(scheme.get, call_773289.host, call_773289.base,
                         call_773289.route, valid.getOrDefault("path"))
  result = hook(call_773289, url, valid)

proc call*(call_773290: Call_PostAddUserToGroup_773275; UserName: string;
          GroupName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773291 = newJObject()
  var formData_773292 = newJObject()
  add(formData_773292, "UserName", newJString(UserName))
  add(formData_773292, "GroupName", newJString(GroupName))
  add(query_773291, "Action", newJString(Action))
  add(query_773291, "Version", newJString(Version))
  result = call_773290.call(nil, query_773291, nil, formData_773292, nil)

var postAddUserToGroup* = Call_PostAddUserToGroup_773275(
    name: "postAddUserToGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddUserToGroup",
    validator: validate_PostAddUserToGroup_773276, base: "/",
    url: url_PostAddUserToGroup_773277, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddUserToGroup_773258 = ref object of OpenApiRestCall_772597
proc url_GetAddUserToGroup_773260(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddUserToGroup_773259(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_773261 = query.getOrDefault("UserName")
  valid_773261 = validateParameter(valid_773261, JString, required = true,
                                 default = nil)
  if valid_773261 != nil:
    section.add "UserName", valid_773261
  var valid_773262 = query.getOrDefault("Action")
  valid_773262 = validateParameter(valid_773262, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_773262 != nil:
    section.add "Action", valid_773262
  var valid_773263 = query.getOrDefault("GroupName")
  valid_773263 = validateParameter(valid_773263, JString, required = true,
                                 default = nil)
  if valid_773263 != nil:
    section.add "GroupName", valid_773263
  var valid_773264 = query.getOrDefault("Version")
  valid_773264 = validateParameter(valid_773264, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773264 != nil:
    section.add "Version", valid_773264
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773265 = header.getOrDefault("X-Amz-Date")
  valid_773265 = validateParameter(valid_773265, JString, required = false,
                                 default = nil)
  if valid_773265 != nil:
    section.add "X-Amz-Date", valid_773265
  var valid_773266 = header.getOrDefault("X-Amz-Security-Token")
  valid_773266 = validateParameter(valid_773266, JString, required = false,
                                 default = nil)
  if valid_773266 != nil:
    section.add "X-Amz-Security-Token", valid_773266
  var valid_773267 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773267 = validateParameter(valid_773267, JString, required = false,
                                 default = nil)
  if valid_773267 != nil:
    section.add "X-Amz-Content-Sha256", valid_773267
  var valid_773268 = header.getOrDefault("X-Amz-Algorithm")
  valid_773268 = validateParameter(valid_773268, JString, required = false,
                                 default = nil)
  if valid_773268 != nil:
    section.add "X-Amz-Algorithm", valid_773268
  var valid_773269 = header.getOrDefault("X-Amz-Signature")
  valid_773269 = validateParameter(valid_773269, JString, required = false,
                                 default = nil)
  if valid_773269 != nil:
    section.add "X-Amz-Signature", valid_773269
  var valid_773270 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773270 = validateParameter(valid_773270, JString, required = false,
                                 default = nil)
  if valid_773270 != nil:
    section.add "X-Amz-SignedHeaders", valid_773270
  var valid_773271 = header.getOrDefault("X-Amz-Credential")
  valid_773271 = validateParameter(valid_773271, JString, required = false,
                                 default = nil)
  if valid_773271 != nil:
    section.add "X-Amz-Credential", valid_773271
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773272: Call_GetAddUserToGroup_773258; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_773272.validator(path, query, header, formData, body)
  let scheme = call_773272.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773272.url(scheme.get, call_773272.host, call_773272.base,
                         call_773272.route, valid.getOrDefault("path"))
  result = hook(call_773272, url, valid)

proc call*(call_773273: Call_GetAddUserToGroup_773258; UserName: string;
          GroupName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_773274 = newJObject()
  add(query_773274, "UserName", newJString(UserName))
  add(query_773274, "Action", newJString(Action))
  add(query_773274, "GroupName", newJString(GroupName))
  add(query_773274, "Version", newJString(Version))
  result = call_773273.call(nil, query_773274, nil, nil, nil)

var getAddUserToGroup* = Call_GetAddUserToGroup_773258(name: "getAddUserToGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=AddUserToGroup", validator: validate_GetAddUserToGroup_773259,
    base: "/", url: url_GetAddUserToGroup_773260,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachGroupPolicy_773310 = ref object of OpenApiRestCall_772597
proc url_PostAttachGroupPolicy_773312(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAttachGroupPolicy_773311(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773313 = query.getOrDefault("Action")
  valid_773313 = validateParameter(valid_773313, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_773313 != nil:
    section.add "Action", valid_773313
  var valid_773314 = query.getOrDefault("Version")
  valid_773314 = validateParameter(valid_773314, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773314 != nil:
    section.add "Version", valid_773314
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773315 = header.getOrDefault("X-Amz-Date")
  valid_773315 = validateParameter(valid_773315, JString, required = false,
                                 default = nil)
  if valid_773315 != nil:
    section.add "X-Amz-Date", valid_773315
  var valid_773316 = header.getOrDefault("X-Amz-Security-Token")
  valid_773316 = validateParameter(valid_773316, JString, required = false,
                                 default = nil)
  if valid_773316 != nil:
    section.add "X-Amz-Security-Token", valid_773316
  var valid_773317 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773317 = validateParameter(valid_773317, JString, required = false,
                                 default = nil)
  if valid_773317 != nil:
    section.add "X-Amz-Content-Sha256", valid_773317
  var valid_773318 = header.getOrDefault("X-Amz-Algorithm")
  valid_773318 = validateParameter(valid_773318, JString, required = false,
                                 default = nil)
  if valid_773318 != nil:
    section.add "X-Amz-Algorithm", valid_773318
  var valid_773319 = header.getOrDefault("X-Amz-Signature")
  valid_773319 = validateParameter(valid_773319, JString, required = false,
                                 default = nil)
  if valid_773319 != nil:
    section.add "X-Amz-Signature", valid_773319
  var valid_773320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773320 = validateParameter(valid_773320, JString, required = false,
                                 default = nil)
  if valid_773320 != nil:
    section.add "X-Amz-SignedHeaders", valid_773320
  var valid_773321 = header.getOrDefault("X-Amz-Credential")
  valid_773321 = validateParameter(valid_773321, JString, required = false,
                                 default = nil)
  if valid_773321 != nil:
    section.add "X-Amz-Credential", valid_773321
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_773322 = formData.getOrDefault("PolicyArn")
  valid_773322 = validateParameter(valid_773322, JString, required = true,
                                 default = nil)
  if valid_773322 != nil:
    section.add "PolicyArn", valid_773322
  var valid_773323 = formData.getOrDefault("GroupName")
  valid_773323 = validateParameter(valid_773323, JString, required = true,
                                 default = nil)
  if valid_773323 != nil:
    section.add "GroupName", valid_773323
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773324: Call_PostAttachGroupPolicy_773310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773324.validator(path, query, header, formData, body)
  let scheme = call_773324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773324.url(scheme.get, call_773324.host, call_773324.base,
                         call_773324.route, valid.getOrDefault("path"))
  result = hook(call_773324, url, valid)

proc call*(call_773325: Call_PostAttachGroupPolicy_773310; PolicyArn: string;
          GroupName: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773326 = newJObject()
  var formData_773327 = newJObject()
  add(formData_773327, "PolicyArn", newJString(PolicyArn))
  add(formData_773327, "GroupName", newJString(GroupName))
  add(query_773326, "Action", newJString(Action))
  add(query_773326, "Version", newJString(Version))
  result = call_773325.call(nil, query_773326, nil, formData_773327, nil)

var postAttachGroupPolicy* = Call_PostAttachGroupPolicy_773310(
    name: "postAttachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_PostAttachGroupPolicy_773311, base: "/",
    url: url_PostAttachGroupPolicy_773312, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachGroupPolicy_773293 = ref object of OpenApiRestCall_772597
proc url_GetAttachGroupPolicy_773295(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAttachGroupPolicy_773294(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_773296 = query.getOrDefault("PolicyArn")
  valid_773296 = validateParameter(valid_773296, JString, required = true,
                                 default = nil)
  if valid_773296 != nil:
    section.add "PolicyArn", valid_773296
  var valid_773297 = query.getOrDefault("Action")
  valid_773297 = validateParameter(valid_773297, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_773297 != nil:
    section.add "Action", valid_773297
  var valid_773298 = query.getOrDefault("GroupName")
  valid_773298 = validateParameter(valid_773298, JString, required = true,
                                 default = nil)
  if valid_773298 != nil:
    section.add "GroupName", valid_773298
  var valid_773299 = query.getOrDefault("Version")
  valid_773299 = validateParameter(valid_773299, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773299 != nil:
    section.add "Version", valid_773299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773300 = header.getOrDefault("X-Amz-Date")
  valid_773300 = validateParameter(valid_773300, JString, required = false,
                                 default = nil)
  if valid_773300 != nil:
    section.add "X-Amz-Date", valid_773300
  var valid_773301 = header.getOrDefault("X-Amz-Security-Token")
  valid_773301 = validateParameter(valid_773301, JString, required = false,
                                 default = nil)
  if valid_773301 != nil:
    section.add "X-Amz-Security-Token", valid_773301
  var valid_773302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773302 = validateParameter(valid_773302, JString, required = false,
                                 default = nil)
  if valid_773302 != nil:
    section.add "X-Amz-Content-Sha256", valid_773302
  var valid_773303 = header.getOrDefault("X-Amz-Algorithm")
  valid_773303 = validateParameter(valid_773303, JString, required = false,
                                 default = nil)
  if valid_773303 != nil:
    section.add "X-Amz-Algorithm", valid_773303
  var valid_773304 = header.getOrDefault("X-Amz-Signature")
  valid_773304 = validateParameter(valid_773304, JString, required = false,
                                 default = nil)
  if valid_773304 != nil:
    section.add "X-Amz-Signature", valid_773304
  var valid_773305 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773305 = validateParameter(valid_773305, JString, required = false,
                                 default = nil)
  if valid_773305 != nil:
    section.add "X-Amz-SignedHeaders", valid_773305
  var valid_773306 = header.getOrDefault("X-Amz-Credential")
  valid_773306 = validateParameter(valid_773306, JString, required = false,
                                 default = nil)
  if valid_773306 != nil:
    section.add "X-Amz-Credential", valid_773306
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773307: Call_GetAttachGroupPolicy_773293; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773307.validator(path, query, header, formData, body)
  let scheme = call_773307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773307.url(scheme.get, call_773307.host, call_773307.base,
                         call_773307.route, valid.getOrDefault("path"))
  result = hook(call_773307, url, valid)

proc call*(call_773308: Call_GetAttachGroupPolicy_773293; PolicyArn: string;
          GroupName: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_773309 = newJObject()
  add(query_773309, "PolicyArn", newJString(PolicyArn))
  add(query_773309, "Action", newJString(Action))
  add(query_773309, "GroupName", newJString(GroupName))
  add(query_773309, "Version", newJString(Version))
  result = call_773308.call(nil, query_773309, nil, nil, nil)

var getAttachGroupPolicy* = Call_GetAttachGroupPolicy_773293(
    name: "getAttachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_GetAttachGroupPolicy_773294, base: "/",
    url: url_GetAttachGroupPolicy_773295, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachRolePolicy_773345 = ref object of OpenApiRestCall_772597
proc url_PostAttachRolePolicy_773347(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAttachRolePolicy_773346(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773348 = query.getOrDefault("Action")
  valid_773348 = validateParameter(valid_773348, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_773348 != nil:
    section.add "Action", valid_773348
  var valid_773349 = query.getOrDefault("Version")
  valid_773349 = validateParameter(valid_773349, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773349 != nil:
    section.add "Version", valid_773349
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773350 = header.getOrDefault("X-Amz-Date")
  valid_773350 = validateParameter(valid_773350, JString, required = false,
                                 default = nil)
  if valid_773350 != nil:
    section.add "X-Amz-Date", valid_773350
  var valid_773351 = header.getOrDefault("X-Amz-Security-Token")
  valid_773351 = validateParameter(valid_773351, JString, required = false,
                                 default = nil)
  if valid_773351 != nil:
    section.add "X-Amz-Security-Token", valid_773351
  var valid_773352 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773352 = validateParameter(valid_773352, JString, required = false,
                                 default = nil)
  if valid_773352 != nil:
    section.add "X-Amz-Content-Sha256", valid_773352
  var valid_773353 = header.getOrDefault("X-Amz-Algorithm")
  valid_773353 = validateParameter(valid_773353, JString, required = false,
                                 default = nil)
  if valid_773353 != nil:
    section.add "X-Amz-Algorithm", valid_773353
  var valid_773354 = header.getOrDefault("X-Amz-Signature")
  valid_773354 = validateParameter(valid_773354, JString, required = false,
                                 default = nil)
  if valid_773354 != nil:
    section.add "X-Amz-Signature", valid_773354
  var valid_773355 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773355 = validateParameter(valid_773355, JString, required = false,
                                 default = nil)
  if valid_773355 != nil:
    section.add "X-Amz-SignedHeaders", valid_773355
  var valid_773356 = header.getOrDefault("X-Amz-Credential")
  valid_773356 = validateParameter(valid_773356, JString, required = false,
                                 default = nil)
  if valid_773356 != nil:
    section.add "X-Amz-Credential", valid_773356
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_773357 = formData.getOrDefault("RoleName")
  valid_773357 = validateParameter(valid_773357, JString, required = true,
                                 default = nil)
  if valid_773357 != nil:
    section.add "RoleName", valid_773357
  var valid_773358 = formData.getOrDefault("PolicyArn")
  valid_773358 = validateParameter(valid_773358, JString, required = true,
                                 default = nil)
  if valid_773358 != nil:
    section.add "PolicyArn", valid_773358
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773359: Call_PostAttachRolePolicy_773345; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773359.validator(path, query, header, formData, body)
  let scheme = call_773359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773359.url(scheme.get, call_773359.host, call_773359.base,
                         call_773359.route, valid.getOrDefault("path"))
  result = hook(call_773359, url, valid)

proc call*(call_773360: Call_PostAttachRolePolicy_773345; RoleName: string;
          PolicyArn: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773361 = newJObject()
  var formData_773362 = newJObject()
  add(formData_773362, "RoleName", newJString(RoleName))
  add(formData_773362, "PolicyArn", newJString(PolicyArn))
  add(query_773361, "Action", newJString(Action))
  add(query_773361, "Version", newJString(Version))
  result = call_773360.call(nil, query_773361, nil, formData_773362, nil)

var postAttachRolePolicy* = Call_PostAttachRolePolicy_773345(
    name: "postAttachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_PostAttachRolePolicy_773346, base: "/",
    url: url_PostAttachRolePolicy_773347, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachRolePolicy_773328 = ref object of OpenApiRestCall_772597
proc url_GetAttachRolePolicy_773330(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAttachRolePolicy_773329(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_773331 = query.getOrDefault("PolicyArn")
  valid_773331 = validateParameter(valid_773331, JString, required = true,
                                 default = nil)
  if valid_773331 != nil:
    section.add "PolicyArn", valid_773331
  var valid_773332 = query.getOrDefault("Action")
  valid_773332 = validateParameter(valid_773332, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_773332 != nil:
    section.add "Action", valid_773332
  var valid_773333 = query.getOrDefault("RoleName")
  valid_773333 = validateParameter(valid_773333, JString, required = true,
                                 default = nil)
  if valid_773333 != nil:
    section.add "RoleName", valid_773333
  var valid_773334 = query.getOrDefault("Version")
  valid_773334 = validateParameter(valid_773334, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773334 != nil:
    section.add "Version", valid_773334
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773335 = header.getOrDefault("X-Amz-Date")
  valid_773335 = validateParameter(valid_773335, JString, required = false,
                                 default = nil)
  if valid_773335 != nil:
    section.add "X-Amz-Date", valid_773335
  var valid_773336 = header.getOrDefault("X-Amz-Security-Token")
  valid_773336 = validateParameter(valid_773336, JString, required = false,
                                 default = nil)
  if valid_773336 != nil:
    section.add "X-Amz-Security-Token", valid_773336
  var valid_773337 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773337 = validateParameter(valid_773337, JString, required = false,
                                 default = nil)
  if valid_773337 != nil:
    section.add "X-Amz-Content-Sha256", valid_773337
  var valid_773338 = header.getOrDefault("X-Amz-Algorithm")
  valid_773338 = validateParameter(valid_773338, JString, required = false,
                                 default = nil)
  if valid_773338 != nil:
    section.add "X-Amz-Algorithm", valid_773338
  var valid_773339 = header.getOrDefault("X-Amz-Signature")
  valid_773339 = validateParameter(valid_773339, JString, required = false,
                                 default = nil)
  if valid_773339 != nil:
    section.add "X-Amz-Signature", valid_773339
  var valid_773340 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773340 = validateParameter(valid_773340, JString, required = false,
                                 default = nil)
  if valid_773340 != nil:
    section.add "X-Amz-SignedHeaders", valid_773340
  var valid_773341 = header.getOrDefault("X-Amz-Credential")
  valid_773341 = validateParameter(valid_773341, JString, required = false,
                                 default = nil)
  if valid_773341 != nil:
    section.add "X-Amz-Credential", valid_773341
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773342: Call_GetAttachRolePolicy_773328; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773342.validator(path, query, header, formData, body)
  let scheme = call_773342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773342.url(scheme.get, call_773342.host, call_773342.base,
                         call_773342.route, valid.getOrDefault("path"))
  result = hook(call_773342, url, valid)

proc call*(call_773343: Call_GetAttachRolePolicy_773328; PolicyArn: string;
          RoleName: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_773344 = newJObject()
  add(query_773344, "PolicyArn", newJString(PolicyArn))
  add(query_773344, "Action", newJString(Action))
  add(query_773344, "RoleName", newJString(RoleName))
  add(query_773344, "Version", newJString(Version))
  result = call_773343.call(nil, query_773344, nil, nil, nil)

var getAttachRolePolicy* = Call_GetAttachRolePolicy_773328(
    name: "getAttachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_GetAttachRolePolicy_773329, base: "/",
    url: url_GetAttachRolePolicy_773330, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachUserPolicy_773380 = ref object of OpenApiRestCall_772597
proc url_PostAttachUserPolicy_773382(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAttachUserPolicy_773381(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773383 = query.getOrDefault("Action")
  valid_773383 = validateParameter(valid_773383, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_773383 != nil:
    section.add "Action", valid_773383
  var valid_773384 = query.getOrDefault("Version")
  valid_773384 = validateParameter(valid_773384, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773384 != nil:
    section.add "Version", valid_773384
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773385 = header.getOrDefault("X-Amz-Date")
  valid_773385 = validateParameter(valid_773385, JString, required = false,
                                 default = nil)
  if valid_773385 != nil:
    section.add "X-Amz-Date", valid_773385
  var valid_773386 = header.getOrDefault("X-Amz-Security-Token")
  valid_773386 = validateParameter(valid_773386, JString, required = false,
                                 default = nil)
  if valid_773386 != nil:
    section.add "X-Amz-Security-Token", valid_773386
  var valid_773387 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773387 = validateParameter(valid_773387, JString, required = false,
                                 default = nil)
  if valid_773387 != nil:
    section.add "X-Amz-Content-Sha256", valid_773387
  var valid_773388 = header.getOrDefault("X-Amz-Algorithm")
  valid_773388 = validateParameter(valid_773388, JString, required = false,
                                 default = nil)
  if valid_773388 != nil:
    section.add "X-Amz-Algorithm", valid_773388
  var valid_773389 = header.getOrDefault("X-Amz-Signature")
  valid_773389 = validateParameter(valid_773389, JString, required = false,
                                 default = nil)
  if valid_773389 != nil:
    section.add "X-Amz-Signature", valid_773389
  var valid_773390 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773390 = validateParameter(valid_773390, JString, required = false,
                                 default = nil)
  if valid_773390 != nil:
    section.add "X-Amz-SignedHeaders", valid_773390
  var valid_773391 = header.getOrDefault("X-Amz-Credential")
  valid_773391 = validateParameter(valid_773391, JString, required = false,
                                 default = nil)
  if valid_773391 != nil:
    section.add "X-Amz-Credential", valid_773391
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_773392 = formData.getOrDefault("UserName")
  valid_773392 = validateParameter(valid_773392, JString, required = true,
                                 default = nil)
  if valid_773392 != nil:
    section.add "UserName", valid_773392
  var valid_773393 = formData.getOrDefault("PolicyArn")
  valid_773393 = validateParameter(valid_773393, JString, required = true,
                                 default = nil)
  if valid_773393 != nil:
    section.add "PolicyArn", valid_773393
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773394: Call_PostAttachUserPolicy_773380; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773394.validator(path, query, header, formData, body)
  let scheme = call_773394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773394.url(scheme.get, call_773394.host, call_773394.base,
                         call_773394.route, valid.getOrDefault("path"))
  result = hook(call_773394, url, valid)

proc call*(call_773395: Call_PostAttachUserPolicy_773380; UserName: string;
          PolicyArn: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773396 = newJObject()
  var formData_773397 = newJObject()
  add(formData_773397, "UserName", newJString(UserName))
  add(formData_773397, "PolicyArn", newJString(PolicyArn))
  add(query_773396, "Action", newJString(Action))
  add(query_773396, "Version", newJString(Version))
  result = call_773395.call(nil, query_773396, nil, formData_773397, nil)

var postAttachUserPolicy* = Call_PostAttachUserPolicy_773380(
    name: "postAttachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_PostAttachUserPolicy_773381, base: "/",
    url: url_PostAttachUserPolicy_773382, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachUserPolicy_773363 = ref object of OpenApiRestCall_772597
proc url_GetAttachUserPolicy_773365(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAttachUserPolicy_773364(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_773366 = query.getOrDefault("PolicyArn")
  valid_773366 = validateParameter(valid_773366, JString, required = true,
                                 default = nil)
  if valid_773366 != nil:
    section.add "PolicyArn", valid_773366
  var valid_773367 = query.getOrDefault("UserName")
  valid_773367 = validateParameter(valid_773367, JString, required = true,
                                 default = nil)
  if valid_773367 != nil:
    section.add "UserName", valid_773367
  var valid_773368 = query.getOrDefault("Action")
  valid_773368 = validateParameter(valid_773368, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_773368 != nil:
    section.add "Action", valid_773368
  var valid_773369 = query.getOrDefault("Version")
  valid_773369 = validateParameter(valid_773369, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773369 != nil:
    section.add "Version", valid_773369
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773370 = header.getOrDefault("X-Amz-Date")
  valid_773370 = validateParameter(valid_773370, JString, required = false,
                                 default = nil)
  if valid_773370 != nil:
    section.add "X-Amz-Date", valid_773370
  var valid_773371 = header.getOrDefault("X-Amz-Security-Token")
  valid_773371 = validateParameter(valid_773371, JString, required = false,
                                 default = nil)
  if valid_773371 != nil:
    section.add "X-Amz-Security-Token", valid_773371
  var valid_773372 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773372 = validateParameter(valid_773372, JString, required = false,
                                 default = nil)
  if valid_773372 != nil:
    section.add "X-Amz-Content-Sha256", valid_773372
  var valid_773373 = header.getOrDefault("X-Amz-Algorithm")
  valid_773373 = validateParameter(valid_773373, JString, required = false,
                                 default = nil)
  if valid_773373 != nil:
    section.add "X-Amz-Algorithm", valid_773373
  var valid_773374 = header.getOrDefault("X-Amz-Signature")
  valid_773374 = validateParameter(valid_773374, JString, required = false,
                                 default = nil)
  if valid_773374 != nil:
    section.add "X-Amz-Signature", valid_773374
  var valid_773375 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773375 = validateParameter(valid_773375, JString, required = false,
                                 default = nil)
  if valid_773375 != nil:
    section.add "X-Amz-SignedHeaders", valid_773375
  var valid_773376 = header.getOrDefault("X-Amz-Credential")
  valid_773376 = validateParameter(valid_773376, JString, required = false,
                                 default = nil)
  if valid_773376 != nil:
    section.add "X-Amz-Credential", valid_773376
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773377: Call_GetAttachUserPolicy_773363; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773377.validator(path, query, header, formData, body)
  let scheme = call_773377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773377.url(scheme.get, call_773377.host, call_773377.base,
                         call_773377.route, valid.getOrDefault("path"))
  result = hook(call_773377, url, valid)

proc call*(call_773378: Call_GetAttachUserPolicy_773363; PolicyArn: string;
          UserName: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773379 = newJObject()
  add(query_773379, "PolicyArn", newJString(PolicyArn))
  add(query_773379, "UserName", newJString(UserName))
  add(query_773379, "Action", newJString(Action))
  add(query_773379, "Version", newJString(Version))
  result = call_773378.call(nil, query_773379, nil, nil, nil)

var getAttachUserPolicy* = Call_GetAttachUserPolicy_773363(
    name: "getAttachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_GetAttachUserPolicy_773364, base: "/",
    url: url_GetAttachUserPolicy_773365, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostChangePassword_773415 = ref object of OpenApiRestCall_772597
proc url_PostChangePassword_773417(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostChangePassword_773416(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773418 = query.getOrDefault("Action")
  valid_773418 = validateParameter(valid_773418, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_773418 != nil:
    section.add "Action", valid_773418
  var valid_773419 = query.getOrDefault("Version")
  valid_773419 = validateParameter(valid_773419, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773419 != nil:
    section.add "Version", valid_773419
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773420 = header.getOrDefault("X-Amz-Date")
  valid_773420 = validateParameter(valid_773420, JString, required = false,
                                 default = nil)
  if valid_773420 != nil:
    section.add "X-Amz-Date", valid_773420
  var valid_773421 = header.getOrDefault("X-Amz-Security-Token")
  valid_773421 = validateParameter(valid_773421, JString, required = false,
                                 default = nil)
  if valid_773421 != nil:
    section.add "X-Amz-Security-Token", valid_773421
  var valid_773422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773422 = validateParameter(valid_773422, JString, required = false,
                                 default = nil)
  if valid_773422 != nil:
    section.add "X-Amz-Content-Sha256", valid_773422
  var valid_773423 = header.getOrDefault("X-Amz-Algorithm")
  valid_773423 = validateParameter(valid_773423, JString, required = false,
                                 default = nil)
  if valid_773423 != nil:
    section.add "X-Amz-Algorithm", valid_773423
  var valid_773424 = header.getOrDefault("X-Amz-Signature")
  valid_773424 = validateParameter(valid_773424, JString, required = false,
                                 default = nil)
  if valid_773424 != nil:
    section.add "X-Amz-Signature", valid_773424
  var valid_773425 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773425 = validateParameter(valid_773425, JString, required = false,
                                 default = nil)
  if valid_773425 != nil:
    section.add "X-Amz-SignedHeaders", valid_773425
  var valid_773426 = header.getOrDefault("X-Amz-Credential")
  valid_773426 = validateParameter(valid_773426, JString, required = false,
                                 default = nil)
  if valid_773426 != nil:
    section.add "X-Amz-Credential", valid_773426
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `NewPassword` field"
  var valid_773427 = formData.getOrDefault("NewPassword")
  valid_773427 = validateParameter(valid_773427, JString, required = true,
                                 default = nil)
  if valid_773427 != nil:
    section.add "NewPassword", valid_773427
  var valid_773428 = formData.getOrDefault("OldPassword")
  valid_773428 = validateParameter(valid_773428, JString, required = true,
                                 default = nil)
  if valid_773428 != nil:
    section.add "OldPassword", valid_773428
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773429: Call_PostChangePassword_773415; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773429.validator(path, query, header, formData, body)
  let scheme = call_773429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773429.url(scheme.get, call_773429.host, call_773429.base,
                         call_773429.route, valid.getOrDefault("path"))
  result = hook(call_773429, url, valid)

proc call*(call_773430: Call_PostChangePassword_773415; NewPassword: string;
          OldPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## postChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Version: string (required)
  var query_773431 = newJObject()
  var formData_773432 = newJObject()
  add(query_773431, "Action", newJString(Action))
  add(formData_773432, "NewPassword", newJString(NewPassword))
  add(formData_773432, "OldPassword", newJString(OldPassword))
  add(query_773431, "Version", newJString(Version))
  result = call_773430.call(nil, query_773431, nil, formData_773432, nil)

var postChangePassword* = Call_PostChangePassword_773415(
    name: "postChangePassword", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ChangePassword",
    validator: validate_PostChangePassword_773416, base: "/",
    url: url_PostChangePassword_773417, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChangePassword_773398 = ref object of OpenApiRestCall_772597
proc url_GetChangePassword_773400(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetChangePassword_773399(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  ##   Action: JString (required)
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OldPassword` field"
  var valid_773401 = query.getOrDefault("OldPassword")
  valid_773401 = validateParameter(valid_773401, JString, required = true,
                                 default = nil)
  if valid_773401 != nil:
    section.add "OldPassword", valid_773401
  var valid_773402 = query.getOrDefault("Action")
  valid_773402 = validateParameter(valid_773402, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_773402 != nil:
    section.add "Action", valid_773402
  var valid_773403 = query.getOrDefault("NewPassword")
  valid_773403 = validateParameter(valid_773403, JString, required = true,
                                 default = nil)
  if valid_773403 != nil:
    section.add "NewPassword", valid_773403
  var valid_773404 = query.getOrDefault("Version")
  valid_773404 = validateParameter(valid_773404, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773404 != nil:
    section.add "Version", valid_773404
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773405 = header.getOrDefault("X-Amz-Date")
  valid_773405 = validateParameter(valid_773405, JString, required = false,
                                 default = nil)
  if valid_773405 != nil:
    section.add "X-Amz-Date", valid_773405
  var valid_773406 = header.getOrDefault("X-Amz-Security-Token")
  valid_773406 = validateParameter(valid_773406, JString, required = false,
                                 default = nil)
  if valid_773406 != nil:
    section.add "X-Amz-Security-Token", valid_773406
  var valid_773407 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773407 = validateParameter(valid_773407, JString, required = false,
                                 default = nil)
  if valid_773407 != nil:
    section.add "X-Amz-Content-Sha256", valid_773407
  var valid_773408 = header.getOrDefault("X-Amz-Algorithm")
  valid_773408 = validateParameter(valid_773408, JString, required = false,
                                 default = nil)
  if valid_773408 != nil:
    section.add "X-Amz-Algorithm", valid_773408
  var valid_773409 = header.getOrDefault("X-Amz-Signature")
  valid_773409 = validateParameter(valid_773409, JString, required = false,
                                 default = nil)
  if valid_773409 != nil:
    section.add "X-Amz-Signature", valid_773409
  var valid_773410 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773410 = validateParameter(valid_773410, JString, required = false,
                                 default = nil)
  if valid_773410 != nil:
    section.add "X-Amz-SignedHeaders", valid_773410
  var valid_773411 = header.getOrDefault("X-Amz-Credential")
  valid_773411 = validateParameter(valid_773411, JString, required = false,
                                 default = nil)
  if valid_773411 != nil:
    section.add "X-Amz-Credential", valid_773411
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773412: Call_GetChangePassword_773398; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773412.validator(path, query, header, formData, body)
  let scheme = call_773412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773412.url(scheme.get, call_773412.host, call_773412.base,
                         call_773412.route, valid.getOrDefault("path"))
  result = hook(call_773412, url, valid)

proc call*(call_773413: Call_GetChangePassword_773398; OldPassword: string;
          NewPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## getChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Action: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: string (required)
  var query_773414 = newJObject()
  add(query_773414, "OldPassword", newJString(OldPassword))
  add(query_773414, "Action", newJString(Action))
  add(query_773414, "NewPassword", newJString(NewPassword))
  add(query_773414, "Version", newJString(Version))
  result = call_773413.call(nil, query_773414, nil, nil, nil)

var getChangePassword* = Call_GetChangePassword_773398(name: "getChangePassword",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ChangePassword", validator: validate_GetChangePassword_773399,
    base: "/", url: url_GetChangePassword_773400,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccessKey_773449 = ref object of OpenApiRestCall_772597
proc url_PostCreateAccessKey_773451(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateAccessKey_773450(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773452 = query.getOrDefault("Action")
  valid_773452 = validateParameter(valid_773452, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_773452 != nil:
    section.add "Action", valid_773452
  var valid_773453 = query.getOrDefault("Version")
  valid_773453 = validateParameter(valid_773453, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773453 != nil:
    section.add "Version", valid_773453
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773454 = header.getOrDefault("X-Amz-Date")
  valid_773454 = validateParameter(valid_773454, JString, required = false,
                                 default = nil)
  if valid_773454 != nil:
    section.add "X-Amz-Date", valid_773454
  var valid_773455 = header.getOrDefault("X-Amz-Security-Token")
  valid_773455 = validateParameter(valid_773455, JString, required = false,
                                 default = nil)
  if valid_773455 != nil:
    section.add "X-Amz-Security-Token", valid_773455
  var valid_773456 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773456 = validateParameter(valid_773456, JString, required = false,
                                 default = nil)
  if valid_773456 != nil:
    section.add "X-Amz-Content-Sha256", valid_773456
  var valid_773457 = header.getOrDefault("X-Amz-Algorithm")
  valid_773457 = validateParameter(valid_773457, JString, required = false,
                                 default = nil)
  if valid_773457 != nil:
    section.add "X-Amz-Algorithm", valid_773457
  var valid_773458 = header.getOrDefault("X-Amz-Signature")
  valid_773458 = validateParameter(valid_773458, JString, required = false,
                                 default = nil)
  if valid_773458 != nil:
    section.add "X-Amz-Signature", valid_773458
  var valid_773459 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773459 = validateParameter(valid_773459, JString, required = false,
                                 default = nil)
  if valid_773459 != nil:
    section.add "X-Amz-SignedHeaders", valid_773459
  var valid_773460 = header.getOrDefault("X-Amz-Credential")
  valid_773460 = validateParameter(valid_773460, JString, required = false,
                                 default = nil)
  if valid_773460 != nil:
    section.add "X-Amz-Credential", valid_773460
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_773461 = formData.getOrDefault("UserName")
  valid_773461 = validateParameter(valid_773461, JString, required = false,
                                 default = nil)
  if valid_773461 != nil:
    section.add "UserName", valid_773461
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773462: Call_PostCreateAccessKey_773449; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_773462.validator(path, query, header, formData, body)
  let scheme = call_773462.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773462.url(scheme.get, call_773462.host, call_773462.base,
                         call_773462.route, valid.getOrDefault("path"))
  result = hook(call_773462, url, valid)

proc call*(call_773463: Call_PostCreateAccessKey_773449; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773464 = newJObject()
  var formData_773465 = newJObject()
  add(formData_773465, "UserName", newJString(UserName))
  add(query_773464, "Action", newJString(Action))
  add(query_773464, "Version", newJString(Version))
  result = call_773463.call(nil, query_773464, nil, formData_773465, nil)

var postCreateAccessKey* = Call_PostCreateAccessKey_773449(
    name: "postCreateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccessKey",
    validator: validate_PostCreateAccessKey_773450, base: "/",
    url: url_PostCreateAccessKey_773451, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccessKey_773433 = ref object of OpenApiRestCall_772597
proc url_GetCreateAccessKey_773435(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateAccessKey_773434(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_773436 = query.getOrDefault("UserName")
  valid_773436 = validateParameter(valid_773436, JString, required = false,
                                 default = nil)
  if valid_773436 != nil:
    section.add "UserName", valid_773436
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773437 = query.getOrDefault("Action")
  valid_773437 = validateParameter(valid_773437, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_773437 != nil:
    section.add "Action", valid_773437
  var valid_773438 = query.getOrDefault("Version")
  valid_773438 = validateParameter(valid_773438, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773438 != nil:
    section.add "Version", valid_773438
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773439 = header.getOrDefault("X-Amz-Date")
  valid_773439 = validateParameter(valid_773439, JString, required = false,
                                 default = nil)
  if valid_773439 != nil:
    section.add "X-Amz-Date", valid_773439
  var valid_773440 = header.getOrDefault("X-Amz-Security-Token")
  valid_773440 = validateParameter(valid_773440, JString, required = false,
                                 default = nil)
  if valid_773440 != nil:
    section.add "X-Amz-Security-Token", valid_773440
  var valid_773441 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773441 = validateParameter(valid_773441, JString, required = false,
                                 default = nil)
  if valid_773441 != nil:
    section.add "X-Amz-Content-Sha256", valid_773441
  var valid_773442 = header.getOrDefault("X-Amz-Algorithm")
  valid_773442 = validateParameter(valid_773442, JString, required = false,
                                 default = nil)
  if valid_773442 != nil:
    section.add "X-Amz-Algorithm", valid_773442
  var valid_773443 = header.getOrDefault("X-Amz-Signature")
  valid_773443 = validateParameter(valid_773443, JString, required = false,
                                 default = nil)
  if valid_773443 != nil:
    section.add "X-Amz-Signature", valid_773443
  var valid_773444 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773444 = validateParameter(valid_773444, JString, required = false,
                                 default = nil)
  if valid_773444 != nil:
    section.add "X-Amz-SignedHeaders", valid_773444
  var valid_773445 = header.getOrDefault("X-Amz-Credential")
  valid_773445 = validateParameter(valid_773445, JString, required = false,
                                 default = nil)
  if valid_773445 != nil:
    section.add "X-Amz-Credential", valid_773445
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773446: Call_GetCreateAccessKey_773433; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_773446.validator(path, query, header, formData, body)
  let scheme = call_773446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773446.url(scheme.get, call_773446.host, call_773446.base,
                         call_773446.route, valid.getOrDefault("path"))
  result = hook(call_773446, url, valid)

proc call*(call_773447: Call_GetCreateAccessKey_773433; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773448 = newJObject()
  add(query_773448, "UserName", newJString(UserName))
  add(query_773448, "Action", newJString(Action))
  add(query_773448, "Version", newJString(Version))
  result = call_773447.call(nil, query_773448, nil, nil, nil)

var getCreateAccessKey* = Call_GetCreateAccessKey_773433(
    name: "getCreateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateAccessKey", validator: validate_GetCreateAccessKey_773434,
    base: "/", url: url_GetCreateAccessKey_773435,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccountAlias_773482 = ref object of OpenApiRestCall_772597
proc url_PostCreateAccountAlias_773484(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateAccountAlias_773483(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773485 = query.getOrDefault("Action")
  valid_773485 = validateParameter(valid_773485, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_773485 != nil:
    section.add "Action", valid_773485
  var valid_773486 = query.getOrDefault("Version")
  valid_773486 = validateParameter(valid_773486, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773486 != nil:
    section.add "Version", valid_773486
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773487 = header.getOrDefault("X-Amz-Date")
  valid_773487 = validateParameter(valid_773487, JString, required = false,
                                 default = nil)
  if valid_773487 != nil:
    section.add "X-Amz-Date", valid_773487
  var valid_773488 = header.getOrDefault("X-Amz-Security-Token")
  valid_773488 = validateParameter(valid_773488, JString, required = false,
                                 default = nil)
  if valid_773488 != nil:
    section.add "X-Amz-Security-Token", valid_773488
  var valid_773489 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773489 = validateParameter(valid_773489, JString, required = false,
                                 default = nil)
  if valid_773489 != nil:
    section.add "X-Amz-Content-Sha256", valid_773489
  var valid_773490 = header.getOrDefault("X-Amz-Algorithm")
  valid_773490 = validateParameter(valid_773490, JString, required = false,
                                 default = nil)
  if valid_773490 != nil:
    section.add "X-Amz-Algorithm", valid_773490
  var valid_773491 = header.getOrDefault("X-Amz-Signature")
  valid_773491 = validateParameter(valid_773491, JString, required = false,
                                 default = nil)
  if valid_773491 != nil:
    section.add "X-Amz-Signature", valid_773491
  var valid_773492 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773492 = validateParameter(valid_773492, JString, required = false,
                                 default = nil)
  if valid_773492 != nil:
    section.add "X-Amz-SignedHeaders", valid_773492
  var valid_773493 = header.getOrDefault("X-Amz-Credential")
  valid_773493 = validateParameter(valid_773493, JString, required = false,
                                 default = nil)
  if valid_773493 != nil:
    section.add "X-Amz-Credential", valid_773493
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_773494 = formData.getOrDefault("AccountAlias")
  valid_773494 = validateParameter(valid_773494, JString, required = true,
                                 default = nil)
  if valid_773494 != nil:
    section.add "AccountAlias", valid_773494
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773495: Call_PostCreateAccountAlias_773482; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_773495.validator(path, query, header, formData, body)
  let scheme = call_773495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773495.url(scheme.get, call_773495.host, call_773495.base,
                         call_773495.route, valid.getOrDefault("path"))
  result = hook(call_773495, url, valid)

proc call*(call_773496: Call_PostCreateAccountAlias_773482; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773497 = newJObject()
  var formData_773498 = newJObject()
  add(formData_773498, "AccountAlias", newJString(AccountAlias))
  add(query_773497, "Action", newJString(Action))
  add(query_773497, "Version", newJString(Version))
  result = call_773496.call(nil, query_773497, nil, formData_773498, nil)

var postCreateAccountAlias* = Call_PostCreateAccountAlias_773482(
    name: "postCreateAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_PostCreateAccountAlias_773483, base: "/",
    url: url_PostCreateAccountAlias_773484, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccountAlias_773466 = ref object of OpenApiRestCall_772597
proc url_GetCreateAccountAlias_773468(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateAccountAlias_773467(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_773469 = query.getOrDefault("AccountAlias")
  valid_773469 = validateParameter(valid_773469, JString, required = true,
                                 default = nil)
  if valid_773469 != nil:
    section.add "AccountAlias", valid_773469
  var valid_773470 = query.getOrDefault("Action")
  valid_773470 = validateParameter(valid_773470, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_773470 != nil:
    section.add "Action", valid_773470
  var valid_773471 = query.getOrDefault("Version")
  valid_773471 = validateParameter(valid_773471, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773471 != nil:
    section.add "Version", valid_773471
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773472 = header.getOrDefault("X-Amz-Date")
  valid_773472 = validateParameter(valid_773472, JString, required = false,
                                 default = nil)
  if valid_773472 != nil:
    section.add "X-Amz-Date", valid_773472
  var valid_773473 = header.getOrDefault("X-Amz-Security-Token")
  valid_773473 = validateParameter(valid_773473, JString, required = false,
                                 default = nil)
  if valid_773473 != nil:
    section.add "X-Amz-Security-Token", valid_773473
  var valid_773474 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773474 = validateParameter(valid_773474, JString, required = false,
                                 default = nil)
  if valid_773474 != nil:
    section.add "X-Amz-Content-Sha256", valid_773474
  var valid_773475 = header.getOrDefault("X-Amz-Algorithm")
  valid_773475 = validateParameter(valid_773475, JString, required = false,
                                 default = nil)
  if valid_773475 != nil:
    section.add "X-Amz-Algorithm", valid_773475
  var valid_773476 = header.getOrDefault("X-Amz-Signature")
  valid_773476 = validateParameter(valid_773476, JString, required = false,
                                 default = nil)
  if valid_773476 != nil:
    section.add "X-Amz-Signature", valid_773476
  var valid_773477 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773477 = validateParameter(valid_773477, JString, required = false,
                                 default = nil)
  if valid_773477 != nil:
    section.add "X-Amz-SignedHeaders", valid_773477
  var valid_773478 = header.getOrDefault("X-Amz-Credential")
  valid_773478 = validateParameter(valid_773478, JString, required = false,
                                 default = nil)
  if valid_773478 != nil:
    section.add "X-Amz-Credential", valid_773478
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773479: Call_GetCreateAccountAlias_773466; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_773479.validator(path, query, header, formData, body)
  let scheme = call_773479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773479.url(scheme.get, call_773479.host, call_773479.base,
                         call_773479.route, valid.getOrDefault("path"))
  result = hook(call_773479, url, valid)

proc call*(call_773480: Call_GetCreateAccountAlias_773466; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773481 = newJObject()
  add(query_773481, "AccountAlias", newJString(AccountAlias))
  add(query_773481, "Action", newJString(Action))
  add(query_773481, "Version", newJString(Version))
  result = call_773480.call(nil, query_773481, nil, nil, nil)

var getCreateAccountAlias* = Call_GetCreateAccountAlias_773466(
    name: "getCreateAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_GetCreateAccountAlias_773467, base: "/",
    url: url_GetCreateAccountAlias_773468, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGroup_773516 = ref object of OpenApiRestCall_772597
proc url_PostCreateGroup_773518(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateGroup_773517(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773519 = query.getOrDefault("Action")
  valid_773519 = validateParameter(valid_773519, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_773519 != nil:
    section.add "Action", valid_773519
  var valid_773520 = query.getOrDefault("Version")
  valid_773520 = validateParameter(valid_773520, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773520 != nil:
    section.add "Version", valid_773520
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773521 = header.getOrDefault("X-Amz-Date")
  valid_773521 = validateParameter(valid_773521, JString, required = false,
                                 default = nil)
  if valid_773521 != nil:
    section.add "X-Amz-Date", valid_773521
  var valid_773522 = header.getOrDefault("X-Amz-Security-Token")
  valid_773522 = validateParameter(valid_773522, JString, required = false,
                                 default = nil)
  if valid_773522 != nil:
    section.add "X-Amz-Security-Token", valid_773522
  var valid_773523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773523 = validateParameter(valid_773523, JString, required = false,
                                 default = nil)
  if valid_773523 != nil:
    section.add "X-Amz-Content-Sha256", valid_773523
  var valid_773524 = header.getOrDefault("X-Amz-Algorithm")
  valid_773524 = validateParameter(valid_773524, JString, required = false,
                                 default = nil)
  if valid_773524 != nil:
    section.add "X-Amz-Algorithm", valid_773524
  var valid_773525 = header.getOrDefault("X-Amz-Signature")
  valid_773525 = validateParameter(valid_773525, JString, required = false,
                                 default = nil)
  if valid_773525 != nil:
    section.add "X-Amz-Signature", valid_773525
  var valid_773526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773526 = validateParameter(valid_773526, JString, required = false,
                                 default = nil)
  if valid_773526 != nil:
    section.add "X-Amz-SignedHeaders", valid_773526
  var valid_773527 = header.getOrDefault("X-Amz-Credential")
  valid_773527 = validateParameter(valid_773527, JString, required = false,
                                 default = nil)
  if valid_773527 != nil:
    section.add "X-Amz-Credential", valid_773527
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_773528 = formData.getOrDefault("GroupName")
  valid_773528 = validateParameter(valid_773528, JString, required = true,
                                 default = nil)
  if valid_773528 != nil:
    section.add "GroupName", valid_773528
  var valid_773529 = formData.getOrDefault("Path")
  valid_773529 = validateParameter(valid_773529, JString, required = false,
                                 default = nil)
  if valid_773529 != nil:
    section.add "Path", valid_773529
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773530: Call_PostCreateGroup_773516; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773530.validator(path, query, header, formData, body)
  let scheme = call_773530.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773530.url(scheme.get, call_773530.host, call_773530.base,
                         call_773530.route, valid.getOrDefault("path"))
  result = hook(call_773530, url, valid)

proc call*(call_773531: Call_PostCreateGroup_773516; GroupName: string;
          Action: string = "CreateGroup"; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_773532 = newJObject()
  var formData_773533 = newJObject()
  add(formData_773533, "GroupName", newJString(GroupName))
  add(query_773532, "Action", newJString(Action))
  add(query_773532, "Version", newJString(Version))
  add(formData_773533, "Path", newJString(Path))
  result = call_773531.call(nil, query_773532, nil, formData_773533, nil)

var postCreateGroup* = Call_PostCreateGroup_773516(name: "postCreateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_PostCreateGroup_773517,
    base: "/", url: url_PostCreateGroup_773518, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGroup_773499 = ref object of OpenApiRestCall_772597
proc url_GetCreateGroup_773501(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateGroup_773500(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773502 = query.getOrDefault("Action")
  valid_773502 = validateParameter(valid_773502, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_773502 != nil:
    section.add "Action", valid_773502
  var valid_773503 = query.getOrDefault("GroupName")
  valid_773503 = validateParameter(valid_773503, JString, required = true,
                                 default = nil)
  if valid_773503 != nil:
    section.add "GroupName", valid_773503
  var valid_773504 = query.getOrDefault("Path")
  valid_773504 = validateParameter(valid_773504, JString, required = false,
                                 default = nil)
  if valid_773504 != nil:
    section.add "Path", valid_773504
  var valid_773505 = query.getOrDefault("Version")
  valid_773505 = validateParameter(valid_773505, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773505 != nil:
    section.add "Version", valid_773505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773506 = header.getOrDefault("X-Amz-Date")
  valid_773506 = validateParameter(valid_773506, JString, required = false,
                                 default = nil)
  if valid_773506 != nil:
    section.add "X-Amz-Date", valid_773506
  var valid_773507 = header.getOrDefault("X-Amz-Security-Token")
  valid_773507 = validateParameter(valid_773507, JString, required = false,
                                 default = nil)
  if valid_773507 != nil:
    section.add "X-Amz-Security-Token", valid_773507
  var valid_773508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773508 = validateParameter(valid_773508, JString, required = false,
                                 default = nil)
  if valid_773508 != nil:
    section.add "X-Amz-Content-Sha256", valid_773508
  var valid_773509 = header.getOrDefault("X-Amz-Algorithm")
  valid_773509 = validateParameter(valid_773509, JString, required = false,
                                 default = nil)
  if valid_773509 != nil:
    section.add "X-Amz-Algorithm", valid_773509
  var valid_773510 = header.getOrDefault("X-Amz-Signature")
  valid_773510 = validateParameter(valid_773510, JString, required = false,
                                 default = nil)
  if valid_773510 != nil:
    section.add "X-Amz-Signature", valid_773510
  var valid_773511 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773511 = validateParameter(valid_773511, JString, required = false,
                                 default = nil)
  if valid_773511 != nil:
    section.add "X-Amz-SignedHeaders", valid_773511
  var valid_773512 = header.getOrDefault("X-Amz-Credential")
  valid_773512 = validateParameter(valid_773512, JString, required = false,
                                 default = nil)
  if valid_773512 != nil:
    section.add "X-Amz-Credential", valid_773512
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773513: Call_GetCreateGroup_773499; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773513.validator(path, query, header, formData, body)
  let scheme = call_773513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773513.url(scheme.get, call_773513.host, call_773513.base,
                         call_773513.route, valid.getOrDefault("path"))
  result = hook(call_773513, url, valid)

proc call*(call_773514: Call_GetCreateGroup_773499; GroupName: string;
          Action: string = "CreateGroup"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_773515 = newJObject()
  add(query_773515, "Action", newJString(Action))
  add(query_773515, "GroupName", newJString(GroupName))
  add(query_773515, "Path", newJString(Path))
  add(query_773515, "Version", newJString(Version))
  result = call_773514.call(nil, query_773515, nil, nil, nil)

var getCreateGroup* = Call_GetCreateGroup_773499(name: "getCreateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_GetCreateGroup_773500,
    base: "/", url: url_GetCreateGroup_773501, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateInstanceProfile_773551 = ref object of OpenApiRestCall_772597
proc url_PostCreateInstanceProfile_773553(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateInstanceProfile_773552(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773554 = query.getOrDefault("Action")
  valid_773554 = validateParameter(valid_773554, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_773554 != nil:
    section.add "Action", valid_773554
  var valid_773555 = query.getOrDefault("Version")
  valid_773555 = validateParameter(valid_773555, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773555 != nil:
    section.add "Version", valid_773555
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773556 = header.getOrDefault("X-Amz-Date")
  valid_773556 = validateParameter(valid_773556, JString, required = false,
                                 default = nil)
  if valid_773556 != nil:
    section.add "X-Amz-Date", valid_773556
  var valid_773557 = header.getOrDefault("X-Amz-Security-Token")
  valid_773557 = validateParameter(valid_773557, JString, required = false,
                                 default = nil)
  if valid_773557 != nil:
    section.add "X-Amz-Security-Token", valid_773557
  var valid_773558 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773558 = validateParameter(valid_773558, JString, required = false,
                                 default = nil)
  if valid_773558 != nil:
    section.add "X-Amz-Content-Sha256", valid_773558
  var valid_773559 = header.getOrDefault("X-Amz-Algorithm")
  valid_773559 = validateParameter(valid_773559, JString, required = false,
                                 default = nil)
  if valid_773559 != nil:
    section.add "X-Amz-Algorithm", valid_773559
  var valid_773560 = header.getOrDefault("X-Amz-Signature")
  valid_773560 = validateParameter(valid_773560, JString, required = false,
                                 default = nil)
  if valid_773560 != nil:
    section.add "X-Amz-Signature", valid_773560
  var valid_773561 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773561 = validateParameter(valid_773561, JString, required = false,
                                 default = nil)
  if valid_773561 != nil:
    section.add "X-Amz-SignedHeaders", valid_773561
  var valid_773562 = header.getOrDefault("X-Amz-Credential")
  valid_773562 = validateParameter(valid_773562, JString, required = false,
                                 default = nil)
  if valid_773562 != nil:
    section.add "X-Amz-Credential", valid_773562
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_773563 = formData.getOrDefault("InstanceProfileName")
  valid_773563 = validateParameter(valid_773563, JString, required = true,
                                 default = nil)
  if valid_773563 != nil:
    section.add "InstanceProfileName", valid_773563
  var valid_773564 = formData.getOrDefault("Path")
  valid_773564 = validateParameter(valid_773564, JString, required = false,
                                 default = nil)
  if valid_773564 != nil:
    section.add "Path", valid_773564
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773565: Call_PostCreateInstanceProfile_773551; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773565.validator(path, query, header, formData, body)
  let scheme = call_773565.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773565.url(scheme.get, call_773565.host, call_773565.base,
                         call_773565.route, valid.getOrDefault("path"))
  result = hook(call_773565, url, valid)

proc call*(call_773566: Call_PostCreateInstanceProfile_773551;
          InstanceProfileName: string; Action: string = "CreateInstanceProfile";
          Version: string = "2010-05-08"; Path: string = ""): Recallable =
  ## postCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_773567 = newJObject()
  var formData_773568 = newJObject()
  add(query_773567, "Action", newJString(Action))
  add(formData_773568, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_773567, "Version", newJString(Version))
  add(formData_773568, "Path", newJString(Path))
  result = call_773566.call(nil, query_773567, nil, formData_773568, nil)

var postCreateInstanceProfile* = Call_PostCreateInstanceProfile_773551(
    name: "postCreateInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_PostCreateInstanceProfile_773552, base: "/",
    url: url_PostCreateInstanceProfile_773553,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateInstanceProfile_773534 = ref object of OpenApiRestCall_772597
proc url_GetCreateInstanceProfile_773536(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateInstanceProfile_773535(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_773537 = query.getOrDefault("InstanceProfileName")
  valid_773537 = validateParameter(valid_773537, JString, required = true,
                                 default = nil)
  if valid_773537 != nil:
    section.add "InstanceProfileName", valid_773537
  var valid_773538 = query.getOrDefault("Action")
  valid_773538 = validateParameter(valid_773538, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_773538 != nil:
    section.add "Action", valid_773538
  var valid_773539 = query.getOrDefault("Path")
  valid_773539 = validateParameter(valid_773539, JString, required = false,
                                 default = nil)
  if valid_773539 != nil:
    section.add "Path", valid_773539
  var valid_773540 = query.getOrDefault("Version")
  valid_773540 = validateParameter(valid_773540, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773540 != nil:
    section.add "Version", valid_773540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773541 = header.getOrDefault("X-Amz-Date")
  valid_773541 = validateParameter(valid_773541, JString, required = false,
                                 default = nil)
  if valid_773541 != nil:
    section.add "X-Amz-Date", valid_773541
  var valid_773542 = header.getOrDefault("X-Amz-Security-Token")
  valid_773542 = validateParameter(valid_773542, JString, required = false,
                                 default = nil)
  if valid_773542 != nil:
    section.add "X-Amz-Security-Token", valid_773542
  var valid_773543 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773543 = validateParameter(valid_773543, JString, required = false,
                                 default = nil)
  if valid_773543 != nil:
    section.add "X-Amz-Content-Sha256", valid_773543
  var valid_773544 = header.getOrDefault("X-Amz-Algorithm")
  valid_773544 = validateParameter(valid_773544, JString, required = false,
                                 default = nil)
  if valid_773544 != nil:
    section.add "X-Amz-Algorithm", valid_773544
  var valid_773545 = header.getOrDefault("X-Amz-Signature")
  valid_773545 = validateParameter(valid_773545, JString, required = false,
                                 default = nil)
  if valid_773545 != nil:
    section.add "X-Amz-Signature", valid_773545
  var valid_773546 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773546 = validateParameter(valid_773546, JString, required = false,
                                 default = nil)
  if valid_773546 != nil:
    section.add "X-Amz-SignedHeaders", valid_773546
  var valid_773547 = header.getOrDefault("X-Amz-Credential")
  valid_773547 = validateParameter(valid_773547, JString, required = false,
                                 default = nil)
  if valid_773547 != nil:
    section.add "X-Amz-Credential", valid_773547
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773548: Call_GetCreateInstanceProfile_773534; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773548.validator(path, query, header, formData, body)
  let scheme = call_773548.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773548.url(scheme.get, call_773548.host, call_773548.base,
                         call_773548.route, valid.getOrDefault("path"))
  result = hook(call_773548, url, valid)

proc call*(call_773549: Call_GetCreateInstanceProfile_773534;
          InstanceProfileName: string; Action: string = "CreateInstanceProfile";
          Path: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_773550 = newJObject()
  add(query_773550, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_773550, "Action", newJString(Action))
  add(query_773550, "Path", newJString(Path))
  add(query_773550, "Version", newJString(Version))
  result = call_773549.call(nil, query_773550, nil, nil, nil)

var getCreateInstanceProfile* = Call_GetCreateInstanceProfile_773534(
    name: "getCreateInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_GetCreateInstanceProfile_773535, base: "/",
    url: url_GetCreateInstanceProfile_773536, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLoginProfile_773587 = ref object of OpenApiRestCall_772597
proc url_PostCreateLoginProfile_773589(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateLoginProfile_773588(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773590 = query.getOrDefault("Action")
  valid_773590 = validateParameter(valid_773590, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_773590 != nil:
    section.add "Action", valid_773590
  var valid_773591 = query.getOrDefault("Version")
  valid_773591 = validateParameter(valid_773591, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773591 != nil:
    section.add "Version", valid_773591
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773592 = header.getOrDefault("X-Amz-Date")
  valid_773592 = validateParameter(valid_773592, JString, required = false,
                                 default = nil)
  if valid_773592 != nil:
    section.add "X-Amz-Date", valid_773592
  var valid_773593 = header.getOrDefault("X-Amz-Security-Token")
  valid_773593 = validateParameter(valid_773593, JString, required = false,
                                 default = nil)
  if valid_773593 != nil:
    section.add "X-Amz-Security-Token", valid_773593
  var valid_773594 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773594 = validateParameter(valid_773594, JString, required = false,
                                 default = nil)
  if valid_773594 != nil:
    section.add "X-Amz-Content-Sha256", valid_773594
  var valid_773595 = header.getOrDefault("X-Amz-Algorithm")
  valid_773595 = validateParameter(valid_773595, JString, required = false,
                                 default = nil)
  if valid_773595 != nil:
    section.add "X-Amz-Algorithm", valid_773595
  var valid_773596 = header.getOrDefault("X-Amz-Signature")
  valid_773596 = validateParameter(valid_773596, JString, required = false,
                                 default = nil)
  if valid_773596 != nil:
    section.add "X-Amz-Signature", valid_773596
  var valid_773597 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773597 = validateParameter(valid_773597, JString, required = false,
                                 default = nil)
  if valid_773597 != nil:
    section.add "X-Amz-SignedHeaders", valid_773597
  var valid_773598 = header.getOrDefault("X-Amz-Credential")
  valid_773598 = validateParameter(valid_773598, JString, required = false,
                                 default = nil)
  if valid_773598 != nil:
    section.add "X-Amz-Credential", valid_773598
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_773599 = formData.getOrDefault("UserName")
  valid_773599 = validateParameter(valid_773599, JString, required = true,
                                 default = nil)
  if valid_773599 != nil:
    section.add "UserName", valid_773599
  var valid_773600 = formData.getOrDefault("Password")
  valid_773600 = validateParameter(valid_773600, JString, required = true,
                                 default = nil)
  if valid_773600 != nil:
    section.add "Password", valid_773600
  var valid_773601 = formData.getOrDefault("PasswordResetRequired")
  valid_773601 = validateParameter(valid_773601, JBool, required = false, default = nil)
  if valid_773601 != nil:
    section.add "PasswordResetRequired", valid_773601
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773602: Call_PostCreateLoginProfile_773587; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_773602.validator(path, query, header, formData, body)
  let scheme = call_773602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773602.url(scheme.get, call_773602.host, call_773602.base,
                         call_773602.route, valid.getOrDefault("path"))
  result = hook(call_773602, url, valid)

proc call*(call_773603: Call_PostCreateLoginProfile_773587; UserName: string;
          Password: string; PasswordResetRequired: bool = false;
          Action: string = "CreateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773604 = newJObject()
  var formData_773605 = newJObject()
  add(formData_773605, "UserName", newJString(UserName))
  add(formData_773605, "Password", newJString(Password))
  add(formData_773605, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_773604, "Action", newJString(Action))
  add(query_773604, "Version", newJString(Version))
  result = call_773603.call(nil, query_773604, nil, formData_773605, nil)

var postCreateLoginProfile* = Call_PostCreateLoginProfile_773587(
    name: "postCreateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_PostCreateLoginProfile_773588, base: "/",
    url: url_PostCreateLoginProfile_773589, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLoginProfile_773569 = ref object of OpenApiRestCall_772597
proc url_GetCreateLoginProfile_773571(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateLoginProfile_773570(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_773572 = query.getOrDefault("UserName")
  valid_773572 = validateParameter(valid_773572, JString, required = true,
                                 default = nil)
  if valid_773572 != nil:
    section.add "UserName", valid_773572
  var valid_773573 = query.getOrDefault("PasswordResetRequired")
  valid_773573 = validateParameter(valid_773573, JBool, required = false, default = nil)
  if valid_773573 != nil:
    section.add "PasswordResetRequired", valid_773573
  var valid_773574 = query.getOrDefault("Action")
  valid_773574 = validateParameter(valid_773574, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_773574 != nil:
    section.add "Action", valid_773574
  var valid_773575 = query.getOrDefault("Password")
  valid_773575 = validateParameter(valid_773575, JString, required = true,
                                 default = nil)
  if valid_773575 != nil:
    section.add "Password", valid_773575
  var valid_773576 = query.getOrDefault("Version")
  valid_773576 = validateParameter(valid_773576, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773576 != nil:
    section.add "Version", valid_773576
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773577 = header.getOrDefault("X-Amz-Date")
  valid_773577 = validateParameter(valid_773577, JString, required = false,
                                 default = nil)
  if valid_773577 != nil:
    section.add "X-Amz-Date", valid_773577
  var valid_773578 = header.getOrDefault("X-Amz-Security-Token")
  valid_773578 = validateParameter(valid_773578, JString, required = false,
                                 default = nil)
  if valid_773578 != nil:
    section.add "X-Amz-Security-Token", valid_773578
  var valid_773579 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773579 = validateParameter(valid_773579, JString, required = false,
                                 default = nil)
  if valid_773579 != nil:
    section.add "X-Amz-Content-Sha256", valid_773579
  var valid_773580 = header.getOrDefault("X-Amz-Algorithm")
  valid_773580 = validateParameter(valid_773580, JString, required = false,
                                 default = nil)
  if valid_773580 != nil:
    section.add "X-Amz-Algorithm", valid_773580
  var valid_773581 = header.getOrDefault("X-Amz-Signature")
  valid_773581 = validateParameter(valid_773581, JString, required = false,
                                 default = nil)
  if valid_773581 != nil:
    section.add "X-Amz-Signature", valid_773581
  var valid_773582 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773582 = validateParameter(valid_773582, JString, required = false,
                                 default = nil)
  if valid_773582 != nil:
    section.add "X-Amz-SignedHeaders", valid_773582
  var valid_773583 = header.getOrDefault("X-Amz-Credential")
  valid_773583 = validateParameter(valid_773583, JString, required = false,
                                 default = nil)
  if valid_773583 != nil:
    section.add "X-Amz-Credential", valid_773583
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773584: Call_GetCreateLoginProfile_773569; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_773584.validator(path, query, header, formData, body)
  let scheme = call_773584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773584.url(scheme.get, call_773584.host, call_773584.base,
                         call_773584.route, valid.getOrDefault("path"))
  result = hook(call_773584, url, valid)

proc call*(call_773585: Call_GetCreateLoginProfile_773569; UserName: string;
          Password: string; PasswordResetRequired: bool = false;
          Action: string = "CreateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: string (required)
  var query_773586 = newJObject()
  add(query_773586, "UserName", newJString(UserName))
  add(query_773586, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_773586, "Action", newJString(Action))
  add(query_773586, "Password", newJString(Password))
  add(query_773586, "Version", newJString(Version))
  result = call_773585.call(nil, query_773586, nil, nil, nil)

var getCreateLoginProfile* = Call_GetCreateLoginProfile_773569(
    name: "getCreateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_GetCreateLoginProfile_773570, base: "/",
    url: url_GetCreateLoginProfile_773571, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOpenIDConnectProvider_773624 = ref object of OpenApiRestCall_772597
proc url_PostCreateOpenIDConnectProvider_773626(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateOpenIDConnectProvider_773625(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773627 = query.getOrDefault("Action")
  valid_773627 = validateParameter(valid_773627, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_773627 != nil:
    section.add "Action", valid_773627
  var valid_773628 = query.getOrDefault("Version")
  valid_773628 = validateParameter(valid_773628, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773628 != nil:
    section.add "Version", valid_773628
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773629 = header.getOrDefault("X-Amz-Date")
  valid_773629 = validateParameter(valid_773629, JString, required = false,
                                 default = nil)
  if valid_773629 != nil:
    section.add "X-Amz-Date", valid_773629
  var valid_773630 = header.getOrDefault("X-Amz-Security-Token")
  valid_773630 = validateParameter(valid_773630, JString, required = false,
                                 default = nil)
  if valid_773630 != nil:
    section.add "X-Amz-Security-Token", valid_773630
  var valid_773631 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773631 = validateParameter(valid_773631, JString, required = false,
                                 default = nil)
  if valid_773631 != nil:
    section.add "X-Amz-Content-Sha256", valid_773631
  var valid_773632 = header.getOrDefault("X-Amz-Algorithm")
  valid_773632 = validateParameter(valid_773632, JString, required = false,
                                 default = nil)
  if valid_773632 != nil:
    section.add "X-Amz-Algorithm", valid_773632
  var valid_773633 = header.getOrDefault("X-Amz-Signature")
  valid_773633 = validateParameter(valid_773633, JString, required = false,
                                 default = nil)
  if valid_773633 != nil:
    section.add "X-Amz-Signature", valid_773633
  var valid_773634 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773634 = validateParameter(valid_773634, JString, required = false,
                                 default = nil)
  if valid_773634 != nil:
    section.add "X-Amz-SignedHeaders", valid_773634
  var valid_773635 = header.getOrDefault("X-Amz-Credential")
  valid_773635 = validateParameter(valid_773635, JString, required = false,
                                 default = nil)
  if valid_773635 != nil:
    section.add "X-Amz-Credential", valid_773635
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  section = newJObject()
  var valid_773636 = formData.getOrDefault("ClientIDList")
  valid_773636 = validateParameter(valid_773636, JArray, required = false,
                                 default = nil)
  if valid_773636 != nil:
    section.add "ClientIDList", valid_773636
  assert formData != nil,
        "formData argument is necessary due to required `ThumbprintList` field"
  var valid_773637 = formData.getOrDefault("ThumbprintList")
  valid_773637 = validateParameter(valid_773637, JArray, required = true, default = nil)
  if valid_773637 != nil:
    section.add "ThumbprintList", valid_773637
  var valid_773638 = formData.getOrDefault("Url")
  valid_773638 = validateParameter(valid_773638, JString, required = true,
                                 default = nil)
  if valid_773638 != nil:
    section.add "Url", valid_773638
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773639: Call_PostCreateOpenIDConnectProvider_773624;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_773639.validator(path, query, header, formData, body)
  let scheme = call_773639.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773639.url(scheme.get, call_773639.host, call_773639.base,
                         call_773639.route, valid.getOrDefault("path"))
  result = hook(call_773639, url, valid)

proc call*(call_773640: Call_PostCreateOpenIDConnectProvider_773624;
          ThumbprintList: JsonNode; Url: string; ClientIDList: JsonNode = nil;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  var query_773641 = newJObject()
  var formData_773642 = newJObject()
  if ClientIDList != nil:
    formData_773642.add "ClientIDList", ClientIDList
  if ThumbprintList != nil:
    formData_773642.add "ThumbprintList", ThumbprintList
  add(query_773641, "Action", newJString(Action))
  add(query_773641, "Version", newJString(Version))
  add(formData_773642, "Url", newJString(Url))
  result = call_773640.call(nil, query_773641, nil, formData_773642, nil)

var postCreateOpenIDConnectProvider* = Call_PostCreateOpenIDConnectProvider_773624(
    name: "postCreateOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_PostCreateOpenIDConnectProvider_773625, base: "/",
    url: url_PostCreateOpenIDConnectProvider_773626,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOpenIDConnectProvider_773606 = ref object of OpenApiRestCall_772597
proc url_GetCreateOpenIDConnectProvider_773608(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateOpenIDConnectProvider_773607(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: JString (required)
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: JString (required)
  section = newJObject()
  var valid_773609 = query.getOrDefault("ClientIDList")
  valid_773609 = validateParameter(valid_773609, JArray, required = false,
                                 default = nil)
  if valid_773609 != nil:
    section.add "ClientIDList", valid_773609
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_773610 = query.getOrDefault("ThumbprintList")
  valid_773610 = validateParameter(valid_773610, JArray, required = true, default = nil)
  if valid_773610 != nil:
    section.add "ThumbprintList", valid_773610
  var valid_773611 = query.getOrDefault("Action")
  valid_773611 = validateParameter(valid_773611, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_773611 != nil:
    section.add "Action", valid_773611
  var valid_773612 = query.getOrDefault("Url")
  valid_773612 = validateParameter(valid_773612, JString, required = true,
                                 default = nil)
  if valid_773612 != nil:
    section.add "Url", valid_773612
  var valid_773613 = query.getOrDefault("Version")
  valid_773613 = validateParameter(valid_773613, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773613 != nil:
    section.add "Version", valid_773613
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773614 = header.getOrDefault("X-Amz-Date")
  valid_773614 = validateParameter(valid_773614, JString, required = false,
                                 default = nil)
  if valid_773614 != nil:
    section.add "X-Amz-Date", valid_773614
  var valid_773615 = header.getOrDefault("X-Amz-Security-Token")
  valid_773615 = validateParameter(valid_773615, JString, required = false,
                                 default = nil)
  if valid_773615 != nil:
    section.add "X-Amz-Security-Token", valid_773615
  var valid_773616 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773616 = validateParameter(valid_773616, JString, required = false,
                                 default = nil)
  if valid_773616 != nil:
    section.add "X-Amz-Content-Sha256", valid_773616
  var valid_773617 = header.getOrDefault("X-Amz-Algorithm")
  valid_773617 = validateParameter(valid_773617, JString, required = false,
                                 default = nil)
  if valid_773617 != nil:
    section.add "X-Amz-Algorithm", valid_773617
  var valid_773618 = header.getOrDefault("X-Amz-Signature")
  valid_773618 = validateParameter(valid_773618, JString, required = false,
                                 default = nil)
  if valid_773618 != nil:
    section.add "X-Amz-Signature", valid_773618
  var valid_773619 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773619 = validateParameter(valid_773619, JString, required = false,
                                 default = nil)
  if valid_773619 != nil:
    section.add "X-Amz-SignedHeaders", valid_773619
  var valid_773620 = header.getOrDefault("X-Amz-Credential")
  valid_773620 = validateParameter(valid_773620, JString, required = false,
                                 default = nil)
  if valid_773620 != nil:
    section.add "X-Amz-Credential", valid_773620
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773621: Call_GetCreateOpenIDConnectProvider_773606; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_773621.validator(path, query, header, formData, body)
  let scheme = call_773621.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773621.url(scheme.get, call_773621.host, call_773621.base,
                         call_773621.route, valid.getOrDefault("path"))
  result = hook(call_773621, url, valid)

proc call*(call_773622: Call_GetCreateOpenIDConnectProvider_773606;
          ThumbprintList: JsonNode; Url: string; ClientIDList: JsonNode = nil;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: string (required)
  var query_773623 = newJObject()
  if ClientIDList != nil:
    query_773623.add "ClientIDList", ClientIDList
  if ThumbprintList != nil:
    query_773623.add "ThumbprintList", ThumbprintList
  add(query_773623, "Action", newJString(Action))
  add(query_773623, "Url", newJString(Url))
  add(query_773623, "Version", newJString(Version))
  result = call_773622.call(nil, query_773623, nil, nil, nil)

var getCreateOpenIDConnectProvider* = Call_GetCreateOpenIDConnectProvider_773606(
    name: "getCreateOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_GetCreateOpenIDConnectProvider_773607, base: "/",
    url: url_GetCreateOpenIDConnectProvider_773608,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicy_773662 = ref object of OpenApiRestCall_772597
proc url_PostCreatePolicy_773664(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreatePolicy_773663(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773665 = query.getOrDefault("Action")
  valid_773665 = validateParameter(valid_773665, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_773665 != nil:
    section.add "Action", valid_773665
  var valid_773666 = query.getOrDefault("Version")
  valid_773666 = validateParameter(valid_773666, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773666 != nil:
    section.add "Version", valid_773666
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773667 = header.getOrDefault("X-Amz-Date")
  valid_773667 = validateParameter(valid_773667, JString, required = false,
                                 default = nil)
  if valid_773667 != nil:
    section.add "X-Amz-Date", valid_773667
  var valid_773668 = header.getOrDefault("X-Amz-Security-Token")
  valid_773668 = validateParameter(valid_773668, JString, required = false,
                                 default = nil)
  if valid_773668 != nil:
    section.add "X-Amz-Security-Token", valid_773668
  var valid_773669 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773669 = validateParameter(valid_773669, JString, required = false,
                                 default = nil)
  if valid_773669 != nil:
    section.add "X-Amz-Content-Sha256", valid_773669
  var valid_773670 = header.getOrDefault("X-Amz-Algorithm")
  valid_773670 = validateParameter(valid_773670, JString, required = false,
                                 default = nil)
  if valid_773670 != nil:
    section.add "X-Amz-Algorithm", valid_773670
  var valid_773671 = header.getOrDefault("X-Amz-Signature")
  valid_773671 = validateParameter(valid_773671, JString, required = false,
                                 default = nil)
  if valid_773671 != nil:
    section.add "X-Amz-Signature", valid_773671
  var valid_773672 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773672 = validateParameter(valid_773672, JString, required = false,
                                 default = nil)
  if valid_773672 != nil:
    section.add "X-Amz-SignedHeaders", valid_773672
  var valid_773673 = header.getOrDefault("X-Amz-Credential")
  valid_773673 = validateParameter(valid_773673, JString, required = false,
                                 default = nil)
  if valid_773673 != nil:
    section.add "X-Amz-Credential", valid_773673
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_773674 = formData.getOrDefault("PolicyName")
  valid_773674 = validateParameter(valid_773674, JString, required = true,
                                 default = nil)
  if valid_773674 != nil:
    section.add "PolicyName", valid_773674
  var valid_773675 = formData.getOrDefault("PolicyDocument")
  valid_773675 = validateParameter(valid_773675, JString, required = true,
                                 default = nil)
  if valid_773675 != nil:
    section.add "PolicyDocument", valid_773675
  var valid_773676 = formData.getOrDefault("Description")
  valid_773676 = validateParameter(valid_773676, JString, required = false,
                                 default = nil)
  if valid_773676 != nil:
    section.add "Description", valid_773676
  var valid_773677 = formData.getOrDefault("Path")
  valid_773677 = validateParameter(valid_773677, JString, required = false,
                                 default = nil)
  if valid_773677 != nil:
    section.add "Path", valid_773677
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773678: Call_PostCreatePolicy_773662; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773678.validator(path, query, header, formData, body)
  let scheme = call_773678.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773678.url(scheme.get, call_773678.host, call_773678.base,
                         call_773678.route, valid.getOrDefault("path"))
  result = hook(call_773678, url, valid)

proc call*(call_773679: Call_PostCreatePolicy_773662; PolicyName: string;
          PolicyDocument: string; Action: string = "CreatePolicy";
          Version: string = "2010-05-08"; Description: string = ""; Path: string = ""): Recallable =
  ## postCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_773680 = newJObject()
  var formData_773681 = newJObject()
  add(formData_773681, "PolicyName", newJString(PolicyName))
  add(formData_773681, "PolicyDocument", newJString(PolicyDocument))
  add(query_773680, "Action", newJString(Action))
  add(query_773680, "Version", newJString(Version))
  add(formData_773681, "Description", newJString(Description))
  add(formData_773681, "Path", newJString(Path))
  result = call_773679.call(nil, query_773680, nil, formData_773681, nil)

var postCreatePolicy* = Call_PostCreatePolicy_773662(name: "postCreatePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_PostCreatePolicy_773663,
    base: "/", url: url_PostCreatePolicy_773664,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicy_773643 = ref object of OpenApiRestCall_772597
proc url_GetCreatePolicy_773645(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreatePolicy_773644(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  section = newJObject()
  var valid_773646 = query.getOrDefault("Description")
  valid_773646 = validateParameter(valid_773646, JString, required = false,
                                 default = nil)
  if valid_773646 != nil:
    section.add "Description", valid_773646
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773647 = query.getOrDefault("Action")
  valid_773647 = validateParameter(valid_773647, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_773647 != nil:
    section.add "Action", valid_773647
  var valid_773648 = query.getOrDefault("PolicyDocument")
  valid_773648 = validateParameter(valid_773648, JString, required = true,
                                 default = nil)
  if valid_773648 != nil:
    section.add "PolicyDocument", valid_773648
  var valid_773649 = query.getOrDefault("Path")
  valid_773649 = validateParameter(valid_773649, JString, required = false,
                                 default = nil)
  if valid_773649 != nil:
    section.add "Path", valid_773649
  var valid_773650 = query.getOrDefault("Version")
  valid_773650 = validateParameter(valid_773650, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773650 != nil:
    section.add "Version", valid_773650
  var valid_773651 = query.getOrDefault("PolicyName")
  valid_773651 = validateParameter(valid_773651, JString, required = true,
                                 default = nil)
  if valid_773651 != nil:
    section.add "PolicyName", valid_773651
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773652 = header.getOrDefault("X-Amz-Date")
  valid_773652 = validateParameter(valid_773652, JString, required = false,
                                 default = nil)
  if valid_773652 != nil:
    section.add "X-Amz-Date", valid_773652
  var valid_773653 = header.getOrDefault("X-Amz-Security-Token")
  valid_773653 = validateParameter(valid_773653, JString, required = false,
                                 default = nil)
  if valid_773653 != nil:
    section.add "X-Amz-Security-Token", valid_773653
  var valid_773654 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773654 = validateParameter(valid_773654, JString, required = false,
                                 default = nil)
  if valid_773654 != nil:
    section.add "X-Amz-Content-Sha256", valid_773654
  var valid_773655 = header.getOrDefault("X-Amz-Algorithm")
  valid_773655 = validateParameter(valid_773655, JString, required = false,
                                 default = nil)
  if valid_773655 != nil:
    section.add "X-Amz-Algorithm", valid_773655
  var valid_773656 = header.getOrDefault("X-Amz-Signature")
  valid_773656 = validateParameter(valid_773656, JString, required = false,
                                 default = nil)
  if valid_773656 != nil:
    section.add "X-Amz-Signature", valid_773656
  var valid_773657 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773657 = validateParameter(valid_773657, JString, required = false,
                                 default = nil)
  if valid_773657 != nil:
    section.add "X-Amz-SignedHeaders", valid_773657
  var valid_773658 = header.getOrDefault("X-Amz-Credential")
  valid_773658 = validateParameter(valid_773658, JString, required = false,
                                 default = nil)
  if valid_773658 != nil:
    section.add "X-Amz-Credential", valid_773658
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773659: Call_GetCreatePolicy_773643; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773659.validator(path, query, header, formData, body)
  let scheme = call_773659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773659.url(scheme.get, call_773659.host, call_773659.base,
                         call_773659.route, valid.getOrDefault("path"))
  result = hook(call_773659, url, valid)

proc call*(call_773660: Call_GetCreatePolicy_773643; PolicyDocument: string;
          PolicyName: string; Description: string = "";
          Action: string = "CreatePolicy"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  var query_773661 = newJObject()
  add(query_773661, "Description", newJString(Description))
  add(query_773661, "Action", newJString(Action))
  add(query_773661, "PolicyDocument", newJString(PolicyDocument))
  add(query_773661, "Path", newJString(Path))
  add(query_773661, "Version", newJString(Version))
  add(query_773661, "PolicyName", newJString(PolicyName))
  result = call_773660.call(nil, query_773661, nil, nil, nil)

var getCreatePolicy* = Call_GetCreatePolicy_773643(name: "getCreatePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_GetCreatePolicy_773644,
    base: "/", url: url_GetCreatePolicy_773645, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicyVersion_773700 = ref object of OpenApiRestCall_772597
proc url_PostCreatePolicyVersion_773702(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreatePolicyVersion_773701(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773703 = query.getOrDefault("Action")
  valid_773703 = validateParameter(valid_773703, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_773703 != nil:
    section.add "Action", valid_773703
  var valid_773704 = query.getOrDefault("Version")
  valid_773704 = validateParameter(valid_773704, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773704 != nil:
    section.add "Version", valid_773704
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773705 = header.getOrDefault("X-Amz-Date")
  valid_773705 = validateParameter(valid_773705, JString, required = false,
                                 default = nil)
  if valid_773705 != nil:
    section.add "X-Amz-Date", valid_773705
  var valid_773706 = header.getOrDefault("X-Amz-Security-Token")
  valid_773706 = validateParameter(valid_773706, JString, required = false,
                                 default = nil)
  if valid_773706 != nil:
    section.add "X-Amz-Security-Token", valid_773706
  var valid_773707 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773707 = validateParameter(valid_773707, JString, required = false,
                                 default = nil)
  if valid_773707 != nil:
    section.add "X-Amz-Content-Sha256", valid_773707
  var valid_773708 = header.getOrDefault("X-Amz-Algorithm")
  valid_773708 = validateParameter(valid_773708, JString, required = false,
                                 default = nil)
  if valid_773708 != nil:
    section.add "X-Amz-Algorithm", valid_773708
  var valid_773709 = header.getOrDefault("X-Amz-Signature")
  valid_773709 = validateParameter(valid_773709, JString, required = false,
                                 default = nil)
  if valid_773709 != nil:
    section.add "X-Amz-Signature", valid_773709
  var valid_773710 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773710 = validateParameter(valid_773710, JString, required = false,
                                 default = nil)
  if valid_773710 != nil:
    section.add "X-Amz-SignedHeaders", valid_773710
  var valid_773711 = header.getOrDefault("X-Amz-Credential")
  valid_773711 = validateParameter(valid_773711, JString, required = false,
                                 default = nil)
  if valid_773711 != nil:
    section.add "X-Amz-Credential", valid_773711
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_773712 = formData.getOrDefault("PolicyArn")
  valid_773712 = validateParameter(valid_773712, JString, required = true,
                                 default = nil)
  if valid_773712 != nil:
    section.add "PolicyArn", valid_773712
  var valid_773713 = formData.getOrDefault("PolicyDocument")
  valid_773713 = validateParameter(valid_773713, JString, required = true,
                                 default = nil)
  if valid_773713 != nil:
    section.add "PolicyDocument", valid_773713
  var valid_773714 = formData.getOrDefault("SetAsDefault")
  valid_773714 = validateParameter(valid_773714, JBool, required = false, default = nil)
  if valid_773714 != nil:
    section.add "SetAsDefault", valid_773714
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773715: Call_PostCreatePolicyVersion_773700; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773715.validator(path, query, header, formData, body)
  let scheme = call_773715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773715.url(scheme.get, call_773715.host, call_773715.base,
                         call_773715.route, valid.getOrDefault("path"))
  result = hook(call_773715, url, valid)

proc call*(call_773716: Call_PostCreatePolicyVersion_773700; PolicyArn: string;
          PolicyDocument: string; Action: string = "CreatePolicyVersion";
          SetAsDefault: bool = false; Version: string = "2010-05-08"): Recallable =
  ## postCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_773717 = newJObject()
  var formData_773718 = newJObject()
  add(formData_773718, "PolicyArn", newJString(PolicyArn))
  add(formData_773718, "PolicyDocument", newJString(PolicyDocument))
  add(query_773717, "Action", newJString(Action))
  add(formData_773718, "SetAsDefault", newJBool(SetAsDefault))
  add(query_773717, "Version", newJString(Version))
  result = call_773716.call(nil, query_773717, nil, formData_773718, nil)

var postCreatePolicyVersion* = Call_PostCreatePolicyVersion_773700(
    name: "postCreatePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_PostCreatePolicyVersion_773701, base: "/",
    url: url_PostCreatePolicyVersion_773702, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicyVersion_773682 = ref object of OpenApiRestCall_772597
proc url_GetCreatePolicyVersion_773684(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreatePolicyVersion_773683(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_773685 = query.getOrDefault("PolicyArn")
  valid_773685 = validateParameter(valid_773685, JString, required = true,
                                 default = nil)
  if valid_773685 != nil:
    section.add "PolicyArn", valid_773685
  var valid_773686 = query.getOrDefault("SetAsDefault")
  valid_773686 = validateParameter(valid_773686, JBool, required = false, default = nil)
  if valid_773686 != nil:
    section.add "SetAsDefault", valid_773686
  var valid_773687 = query.getOrDefault("Action")
  valid_773687 = validateParameter(valid_773687, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_773687 != nil:
    section.add "Action", valid_773687
  var valid_773688 = query.getOrDefault("PolicyDocument")
  valid_773688 = validateParameter(valid_773688, JString, required = true,
                                 default = nil)
  if valid_773688 != nil:
    section.add "PolicyDocument", valid_773688
  var valid_773689 = query.getOrDefault("Version")
  valid_773689 = validateParameter(valid_773689, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773689 != nil:
    section.add "Version", valid_773689
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773690 = header.getOrDefault("X-Amz-Date")
  valid_773690 = validateParameter(valid_773690, JString, required = false,
                                 default = nil)
  if valid_773690 != nil:
    section.add "X-Amz-Date", valid_773690
  var valid_773691 = header.getOrDefault("X-Amz-Security-Token")
  valid_773691 = validateParameter(valid_773691, JString, required = false,
                                 default = nil)
  if valid_773691 != nil:
    section.add "X-Amz-Security-Token", valid_773691
  var valid_773692 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773692 = validateParameter(valid_773692, JString, required = false,
                                 default = nil)
  if valid_773692 != nil:
    section.add "X-Amz-Content-Sha256", valid_773692
  var valid_773693 = header.getOrDefault("X-Amz-Algorithm")
  valid_773693 = validateParameter(valid_773693, JString, required = false,
                                 default = nil)
  if valid_773693 != nil:
    section.add "X-Amz-Algorithm", valid_773693
  var valid_773694 = header.getOrDefault("X-Amz-Signature")
  valid_773694 = validateParameter(valid_773694, JString, required = false,
                                 default = nil)
  if valid_773694 != nil:
    section.add "X-Amz-Signature", valid_773694
  var valid_773695 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773695 = validateParameter(valid_773695, JString, required = false,
                                 default = nil)
  if valid_773695 != nil:
    section.add "X-Amz-SignedHeaders", valid_773695
  var valid_773696 = header.getOrDefault("X-Amz-Credential")
  valid_773696 = validateParameter(valid_773696, JString, required = false,
                                 default = nil)
  if valid_773696 != nil:
    section.add "X-Amz-Credential", valid_773696
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773697: Call_GetCreatePolicyVersion_773682; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773697.validator(path, query, header, formData, body)
  let scheme = call_773697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773697.url(scheme.get, call_773697.host, call_773697.base,
                         call_773697.route, valid.getOrDefault("path"))
  result = hook(call_773697, url, valid)

proc call*(call_773698: Call_GetCreatePolicyVersion_773682; PolicyArn: string;
          PolicyDocument: string; SetAsDefault: bool = false;
          Action: string = "CreatePolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_773699 = newJObject()
  add(query_773699, "PolicyArn", newJString(PolicyArn))
  add(query_773699, "SetAsDefault", newJBool(SetAsDefault))
  add(query_773699, "Action", newJString(Action))
  add(query_773699, "PolicyDocument", newJString(PolicyDocument))
  add(query_773699, "Version", newJString(Version))
  result = call_773698.call(nil, query_773699, nil, nil, nil)

var getCreatePolicyVersion* = Call_GetCreatePolicyVersion_773682(
    name: "getCreatePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_GetCreatePolicyVersion_773683, base: "/",
    url: url_GetCreatePolicyVersion_773684, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateRole_773741 = ref object of OpenApiRestCall_772597
proc url_PostCreateRole_773743(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateRole_773742(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773744 = query.getOrDefault("Action")
  valid_773744 = validateParameter(valid_773744, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_773744 != nil:
    section.add "Action", valid_773744
  var valid_773745 = query.getOrDefault("Version")
  valid_773745 = validateParameter(valid_773745, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773745 != nil:
    section.add "Version", valid_773745
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773746 = header.getOrDefault("X-Amz-Date")
  valid_773746 = validateParameter(valid_773746, JString, required = false,
                                 default = nil)
  if valid_773746 != nil:
    section.add "X-Amz-Date", valid_773746
  var valid_773747 = header.getOrDefault("X-Amz-Security-Token")
  valid_773747 = validateParameter(valid_773747, JString, required = false,
                                 default = nil)
  if valid_773747 != nil:
    section.add "X-Amz-Security-Token", valid_773747
  var valid_773748 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773748 = validateParameter(valid_773748, JString, required = false,
                                 default = nil)
  if valid_773748 != nil:
    section.add "X-Amz-Content-Sha256", valid_773748
  var valid_773749 = header.getOrDefault("X-Amz-Algorithm")
  valid_773749 = validateParameter(valid_773749, JString, required = false,
                                 default = nil)
  if valid_773749 != nil:
    section.add "X-Amz-Algorithm", valid_773749
  var valid_773750 = header.getOrDefault("X-Amz-Signature")
  valid_773750 = validateParameter(valid_773750, JString, required = false,
                                 default = nil)
  if valid_773750 != nil:
    section.add "X-Amz-Signature", valid_773750
  var valid_773751 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773751 = validateParameter(valid_773751, JString, required = false,
                                 default = nil)
  if valid_773751 != nil:
    section.add "X-Amz-SignedHeaders", valid_773751
  var valid_773752 = header.getOrDefault("X-Amz-Credential")
  valid_773752 = validateParameter(valid_773752, JString, required = false,
                                 default = nil)
  if valid_773752 != nil:
    section.add "X-Amz-Credential", valid_773752
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: JString
  ##              : A description of the role.
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_773753 = formData.getOrDefault("RoleName")
  valid_773753 = validateParameter(valid_773753, JString, required = true,
                                 default = nil)
  if valid_773753 != nil:
    section.add "RoleName", valid_773753
  var valid_773754 = formData.getOrDefault("PermissionsBoundary")
  valid_773754 = validateParameter(valid_773754, JString, required = false,
                                 default = nil)
  if valid_773754 != nil:
    section.add "PermissionsBoundary", valid_773754
  var valid_773755 = formData.getOrDefault("Tags")
  valid_773755 = validateParameter(valid_773755, JArray, required = false,
                                 default = nil)
  if valid_773755 != nil:
    section.add "Tags", valid_773755
  var valid_773756 = formData.getOrDefault("AssumeRolePolicyDocument")
  valid_773756 = validateParameter(valid_773756, JString, required = true,
                                 default = nil)
  if valid_773756 != nil:
    section.add "AssumeRolePolicyDocument", valid_773756
  var valid_773757 = formData.getOrDefault("MaxSessionDuration")
  valid_773757 = validateParameter(valid_773757, JInt, required = false, default = nil)
  if valid_773757 != nil:
    section.add "MaxSessionDuration", valid_773757
  var valid_773758 = formData.getOrDefault("Description")
  valid_773758 = validateParameter(valid_773758, JString, required = false,
                                 default = nil)
  if valid_773758 != nil:
    section.add "Description", valid_773758
  var valid_773759 = formData.getOrDefault("Path")
  valid_773759 = validateParameter(valid_773759, JString, required = false,
                                 default = nil)
  if valid_773759 != nil:
    section.add "Path", valid_773759
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773760: Call_PostCreateRole_773741; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_773760.validator(path, query, header, formData, body)
  let scheme = call_773760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773760.url(scheme.get, call_773760.host, call_773760.base,
                         call_773760.route, valid.getOrDefault("path"))
  result = hook(call_773760, url, valid)

proc call*(call_773761: Call_PostCreateRole_773741; RoleName: string;
          AssumeRolePolicyDocument: string; PermissionsBoundary: string = "";
          Tags: JsonNode = nil; Action: string = "CreateRole";
          MaxSessionDuration: int = 0; Version: string = "2010-05-08";
          Description: string = ""; Path: string = ""): Recallable =
  ## postCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   Action: string (required)
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  ##   Description: string
  ##              : A description of the role.
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_773762 = newJObject()
  var formData_773763 = newJObject()
  add(formData_773763, "RoleName", newJString(RoleName))
  add(formData_773763, "PermissionsBoundary", newJString(PermissionsBoundary))
  if Tags != nil:
    formData_773763.add "Tags", Tags
  add(query_773762, "Action", newJString(Action))
  add(formData_773763, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  add(formData_773763, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_773762, "Version", newJString(Version))
  add(formData_773763, "Description", newJString(Description))
  add(formData_773763, "Path", newJString(Path))
  result = call_773761.call(nil, query_773762, nil, formData_773763, nil)

var postCreateRole* = Call_PostCreateRole_773741(name: "postCreateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_PostCreateRole_773742,
    base: "/", url: url_PostCreateRole_773743, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateRole_773719 = ref object of OpenApiRestCall_772597
proc url_GetCreateRole_773721(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateRole_773720(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   Description: JString
  ##              : A description of the role.
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AssumeRolePolicyDocument` field"
  var valid_773722 = query.getOrDefault("AssumeRolePolicyDocument")
  valid_773722 = validateParameter(valid_773722, JString, required = true,
                                 default = nil)
  if valid_773722 != nil:
    section.add "AssumeRolePolicyDocument", valid_773722
  var valid_773723 = query.getOrDefault("Description")
  valid_773723 = validateParameter(valid_773723, JString, required = false,
                                 default = nil)
  if valid_773723 != nil:
    section.add "Description", valid_773723
  var valid_773724 = query.getOrDefault("Tags")
  valid_773724 = validateParameter(valid_773724, JArray, required = false,
                                 default = nil)
  if valid_773724 != nil:
    section.add "Tags", valid_773724
  var valid_773725 = query.getOrDefault("MaxSessionDuration")
  valid_773725 = validateParameter(valid_773725, JInt, required = false, default = nil)
  if valid_773725 != nil:
    section.add "MaxSessionDuration", valid_773725
  var valid_773726 = query.getOrDefault("Action")
  valid_773726 = validateParameter(valid_773726, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_773726 != nil:
    section.add "Action", valid_773726
  var valid_773727 = query.getOrDefault("Path")
  valid_773727 = validateParameter(valid_773727, JString, required = false,
                                 default = nil)
  if valid_773727 != nil:
    section.add "Path", valid_773727
  var valid_773728 = query.getOrDefault("PermissionsBoundary")
  valid_773728 = validateParameter(valid_773728, JString, required = false,
                                 default = nil)
  if valid_773728 != nil:
    section.add "PermissionsBoundary", valid_773728
  var valid_773729 = query.getOrDefault("RoleName")
  valid_773729 = validateParameter(valid_773729, JString, required = true,
                                 default = nil)
  if valid_773729 != nil:
    section.add "RoleName", valid_773729
  var valid_773730 = query.getOrDefault("Version")
  valid_773730 = validateParameter(valid_773730, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773730 != nil:
    section.add "Version", valid_773730
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773731 = header.getOrDefault("X-Amz-Date")
  valid_773731 = validateParameter(valid_773731, JString, required = false,
                                 default = nil)
  if valid_773731 != nil:
    section.add "X-Amz-Date", valid_773731
  var valid_773732 = header.getOrDefault("X-Amz-Security-Token")
  valid_773732 = validateParameter(valid_773732, JString, required = false,
                                 default = nil)
  if valid_773732 != nil:
    section.add "X-Amz-Security-Token", valid_773732
  var valid_773733 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773733 = validateParameter(valid_773733, JString, required = false,
                                 default = nil)
  if valid_773733 != nil:
    section.add "X-Amz-Content-Sha256", valid_773733
  var valid_773734 = header.getOrDefault("X-Amz-Algorithm")
  valid_773734 = validateParameter(valid_773734, JString, required = false,
                                 default = nil)
  if valid_773734 != nil:
    section.add "X-Amz-Algorithm", valid_773734
  var valid_773735 = header.getOrDefault("X-Amz-Signature")
  valid_773735 = validateParameter(valid_773735, JString, required = false,
                                 default = nil)
  if valid_773735 != nil:
    section.add "X-Amz-Signature", valid_773735
  var valid_773736 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773736 = validateParameter(valid_773736, JString, required = false,
                                 default = nil)
  if valid_773736 != nil:
    section.add "X-Amz-SignedHeaders", valid_773736
  var valid_773737 = header.getOrDefault("X-Amz-Credential")
  valid_773737 = validateParameter(valid_773737, JString, required = false,
                                 default = nil)
  if valid_773737 != nil:
    section.add "X-Amz-Credential", valid_773737
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773738: Call_GetCreateRole_773719; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_773738.validator(path, query, header, formData, body)
  let scheme = call_773738.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773738.url(scheme.get, call_773738.host, call_773738.base,
                         call_773738.route, valid.getOrDefault("path"))
  result = hook(call_773738, url, valid)

proc call*(call_773739: Call_GetCreateRole_773719;
          AssumeRolePolicyDocument: string; RoleName: string;
          Description: string = ""; Tags: JsonNode = nil; MaxSessionDuration: int = 0;
          Action: string = "CreateRole"; Path: string = "";
          PermissionsBoundary: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   Description: string
  ##              : A description of the role.
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: string (required)
  var query_773740 = newJObject()
  add(query_773740, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  add(query_773740, "Description", newJString(Description))
  if Tags != nil:
    query_773740.add "Tags", Tags
  add(query_773740, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_773740, "Action", newJString(Action))
  add(query_773740, "Path", newJString(Path))
  add(query_773740, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_773740, "RoleName", newJString(RoleName))
  add(query_773740, "Version", newJString(Version))
  result = call_773739.call(nil, query_773740, nil, nil, nil)

var getCreateRole* = Call_GetCreateRole_773719(name: "getCreateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_GetCreateRole_773720,
    base: "/", url: url_GetCreateRole_773721, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSAMLProvider_773781 = ref object of OpenApiRestCall_772597
proc url_PostCreateSAMLProvider_773783(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateSAMLProvider_773782(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773784 = query.getOrDefault("Action")
  valid_773784 = validateParameter(valid_773784, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_773784 != nil:
    section.add "Action", valid_773784
  var valid_773785 = query.getOrDefault("Version")
  valid_773785 = validateParameter(valid_773785, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773785 != nil:
    section.add "Version", valid_773785
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773786 = header.getOrDefault("X-Amz-Date")
  valid_773786 = validateParameter(valid_773786, JString, required = false,
                                 default = nil)
  if valid_773786 != nil:
    section.add "X-Amz-Date", valid_773786
  var valid_773787 = header.getOrDefault("X-Amz-Security-Token")
  valid_773787 = validateParameter(valid_773787, JString, required = false,
                                 default = nil)
  if valid_773787 != nil:
    section.add "X-Amz-Security-Token", valid_773787
  var valid_773788 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773788 = validateParameter(valid_773788, JString, required = false,
                                 default = nil)
  if valid_773788 != nil:
    section.add "X-Amz-Content-Sha256", valid_773788
  var valid_773789 = header.getOrDefault("X-Amz-Algorithm")
  valid_773789 = validateParameter(valid_773789, JString, required = false,
                                 default = nil)
  if valid_773789 != nil:
    section.add "X-Amz-Algorithm", valid_773789
  var valid_773790 = header.getOrDefault("X-Amz-Signature")
  valid_773790 = validateParameter(valid_773790, JString, required = false,
                                 default = nil)
  if valid_773790 != nil:
    section.add "X-Amz-Signature", valid_773790
  var valid_773791 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773791 = validateParameter(valid_773791, JString, required = false,
                                 default = nil)
  if valid_773791 != nil:
    section.add "X-Amz-SignedHeaders", valid_773791
  var valid_773792 = header.getOrDefault("X-Amz-Credential")
  valid_773792 = validateParameter(valid_773792, JString, required = false,
                                 default = nil)
  if valid_773792 != nil:
    section.add "X-Amz-Credential", valid_773792
  result.add "header", section
  ## parameters in `formData` object:
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Name` field"
  var valid_773793 = formData.getOrDefault("Name")
  valid_773793 = validateParameter(valid_773793, JString, required = true,
                                 default = nil)
  if valid_773793 != nil:
    section.add "Name", valid_773793
  var valid_773794 = formData.getOrDefault("SAMLMetadataDocument")
  valid_773794 = validateParameter(valid_773794, JString, required = true,
                                 default = nil)
  if valid_773794 != nil:
    section.add "SAMLMetadataDocument", valid_773794
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773795: Call_PostCreateSAMLProvider_773781; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773795.validator(path, query, header, formData, body)
  let scheme = call_773795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773795.url(scheme.get, call_773795.host, call_773795.base,
                         call_773795.route, valid.getOrDefault("path"))
  result = hook(call_773795, url, valid)

proc call*(call_773796: Call_PostCreateSAMLProvider_773781; Name: string;
          SAMLMetadataDocument: string; Action: string = "CreateSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Version: string (required)
  var query_773797 = newJObject()
  var formData_773798 = newJObject()
  add(formData_773798, "Name", newJString(Name))
  add(query_773797, "Action", newJString(Action))
  add(formData_773798, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_773797, "Version", newJString(Version))
  result = call_773796.call(nil, query_773797, nil, formData_773798, nil)

var postCreateSAMLProvider* = Call_PostCreateSAMLProvider_773781(
    name: "postCreateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_PostCreateSAMLProvider_773782, base: "/",
    url: url_PostCreateSAMLProvider_773783, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSAMLProvider_773764 = ref object of OpenApiRestCall_772597
proc url_GetCreateSAMLProvider_773766(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateSAMLProvider_773765(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Name` field"
  var valid_773767 = query.getOrDefault("Name")
  valid_773767 = validateParameter(valid_773767, JString, required = true,
                                 default = nil)
  if valid_773767 != nil:
    section.add "Name", valid_773767
  var valid_773768 = query.getOrDefault("SAMLMetadataDocument")
  valid_773768 = validateParameter(valid_773768, JString, required = true,
                                 default = nil)
  if valid_773768 != nil:
    section.add "SAMLMetadataDocument", valid_773768
  var valid_773769 = query.getOrDefault("Action")
  valid_773769 = validateParameter(valid_773769, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_773769 != nil:
    section.add "Action", valid_773769
  var valid_773770 = query.getOrDefault("Version")
  valid_773770 = validateParameter(valid_773770, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773770 != nil:
    section.add "Version", valid_773770
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773771 = header.getOrDefault("X-Amz-Date")
  valid_773771 = validateParameter(valid_773771, JString, required = false,
                                 default = nil)
  if valid_773771 != nil:
    section.add "X-Amz-Date", valid_773771
  var valid_773772 = header.getOrDefault("X-Amz-Security-Token")
  valid_773772 = validateParameter(valid_773772, JString, required = false,
                                 default = nil)
  if valid_773772 != nil:
    section.add "X-Amz-Security-Token", valid_773772
  var valid_773773 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773773 = validateParameter(valid_773773, JString, required = false,
                                 default = nil)
  if valid_773773 != nil:
    section.add "X-Amz-Content-Sha256", valid_773773
  var valid_773774 = header.getOrDefault("X-Amz-Algorithm")
  valid_773774 = validateParameter(valid_773774, JString, required = false,
                                 default = nil)
  if valid_773774 != nil:
    section.add "X-Amz-Algorithm", valid_773774
  var valid_773775 = header.getOrDefault("X-Amz-Signature")
  valid_773775 = validateParameter(valid_773775, JString, required = false,
                                 default = nil)
  if valid_773775 != nil:
    section.add "X-Amz-Signature", valid_773775
  var valid_773776 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773776 = validateParameter(valid_773776, JString, required = false,
                                 default = nil)
  if valid_773776 != nil:
    section.add "X-Amz-SignedHeaders", valid_773776
  var valid_773777 = header.getOrDefault("X-Amz-Credential")
  valid_773777 = validateParameter(valid_773777, JString, required = false,
                                 default = nil)
  if valid_773777 != nil:
    section.add "X-Amz-Credential", valid_773777
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773778: Call_GetCreateSAMLProvider_773764; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773778.validator(path, query, header, formData, body)
  let scheme = call_773778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773778.url(scheme.get, call_773778.host, call_773778.base,
                         call_773778.route, valid.getOrDefault("path"))
  result = hook(call_773778, url, valid)

proc call*(call_773779: Call_GetCreateSAMLProvider_773764; Name: string;
          SAMLMetadataDocument: string; Action: string = "CreateSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773780 = newJObject()
  add(query_773780, "Name", newJString(Name))
  add(query_773780, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_773780, "Action", newJString(Action))
  add(query_773780, "Version", newJString(Version))
  result = call_773779.call(nil, query_773780, nil, nil, nil)

var getCreateSAMLProvider* = Call_GetCreateSAMLProvider_773764(
    name: "getCreateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_GetCreateSAMLProvider_773765, base: "/",
    url: url_GetCreateSAMLProvider_773766, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceLinkedRole_773817 = ref object of OpenApiRestCall_772597
proc url_PostCreateServiceLinkedRole_773819(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateServiceLinkedRole_773818(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773820 = query.getOrDefault("Action")
  valid_773820 = validateParameter(valid_773820, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_773820 != nil:
    section.add "Action", valid_773820
  var valid_773821 = query.getOrDefault("Version")
  valid_773821 = validateParameter(valid_773821, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773821 != nil:
    section.add "Version", valid_773821
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773822 = header.getOrDefault("X-Amz-Date")
  valid_773822 = validateParameter(valid_773822, JString, required = false,
                                 default = nil)
  if valid_773822 != nil:
    section.add "X-Amz-Date", valid_773822
  var valid_773823 = header.getOrDefault("X-Amz-Security-Token")
  valid_773823 = validateParameter(valid_773823, JString, required = false,
                                 default = nil)
  if valid_773823 != nil:
    section.add "X-Amz-Security-Token", valid_773823
  var valid_773824 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773824 = validateParameter(valid_773824, JString, required = false,
                                 default = nil)
  if valid_773824 != nil:
    section.add "X-Amz-Content-Sha256", valid_773824
  var valid_773825 = header.getOrDefault("X-Amz-Algorithm")
  valid_773825 = validateParameter(valid_773825, JString, required = false,
                                 default = nil)
  if valid_773825 != nil:
    section.add "X-Amz-Algorithm", valid_773825
  var valid_773826 = header.getOrDefault("X-Amz-Signature")
  valid_773826 = validateParameter(valid_773826, JString, required = false,
                                 default = nil)
  if valid_773826 != nil:
    section.add "X-Amz-Signature", valid_773826
  var valid_773827 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773827 = validateParameter(valid_773827, JString, required = false,
                                 default = nil)
  if valid_773827 != nil:
    section.add "X-Amz-SignedHeaders", valid_773827
  var valid_773828 = header.getOrDefault("X-Amz-Credential")
  valid_773828 = validateParameter(valid_773828, JString, required = false,
                                 default = nil)
  if valid_773828 != nil:
    section.add "X-Amz-Credential", valid_773828
  result.add "header", section
  ## parameters in `formData` object:
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Description: JString
  ##              : The description of the role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AWSServiceName` field"
  var valid_773829 = formData.getOrDefault("AWSServiceName")
  valid_773829 = validateParameter(valid_773829, JString, required = true,
                                 default = nil)
  if valid_773829 != nil:
    section.add "AWSServiceName", valid_773829
  var valid_773830 = formData.getOrDefault("CustomSuffix")
  valid_773830 = validateParameter(valid_773830, JString, required = false,
                                 default = nil)
  if valid_773830 != nil:
    section.add "CustomSuffix", valid_773830
  var valid_773831 = formData.getOrDefault("Description")
  valid_773831 = validateParameter(valid_773831, JString, required = false,
                                 default = nil)
  if valid_773831 != nil:
    section.add "Description", valid_773831
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773832: Call_PostCreateServiceLinkedRole_773817; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_773832.validator(path, query, header, formData, body)
  let scheme = call_773832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773832.url(scheme.get, call_773832.host, call_773832.base,
                         call_773832.route, valid.getOrDefault("path"))
  result = hook(call_773832, url, valid)

proc call*(call_773833: Call_PostCreateServiceLinkedRole_773817;
          AWSServiceName: string; CustomSuffix: string = "";
          Action: string = "CreateServiceLinkedRole";
          Version: string = "2010-05-08"; Description: string = ""): Recallable =
  ## postCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string
  ##              : The description of the role.
  var query_773834 = newJObject()
  var formData_773835 = newJObject()
  add(formData_773835, "AWSServiceName", newJString(AWSServiceName))
  add(formData_773835, "CustomSuffix", newJString(CustomSuffix))
  add(query_773834, "Action", newJString(Action))
  add(query_773834, "Version", newJString(Version))
  add(formData_773835, "Description", newJString(Description))
  result = call_773833.call(nil, query_773834, nil, formData_773835, nil)

var postCreateServiceLinkedRole* = Call_PostCreateServiceLinkedRole_773817(
    name: "postCreateServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_PostCreateServiceLinkedRole_773818, base: "/",
    url: url_PostCreateServiceLinkedRole_773819,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceLinkedRole_773799 = ref object of OpenApiRestCall_772597
proc url_GetCreateServiceLinkedRole_773801(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateServiceLinkedRole_773800(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : The description of the role.
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  section = newJObject()
  var valid_773802 = query.getOrDefault("Description")
  valid_773802 = validateParameter(valid_773802, JString, required = false,
                                 default = nil)
  if valid_773802 != nil:
    section.add "Description", valid_773802
  assert query != nil,
        "query argument is necessary due to required `AWSServiceName` field"
  var valid_773803 = query.getOrDefault("AWSServiceName")
  valid_773803 = validateParameter(valid_773803, JString, required = true,
                                 default = nil)
  if valid_773803 != nil:
    section.add "AWSServiceName", valid_773803
  var valid_773804 = query.getOrDefault("Action")
  valid_773804 = validateParameter(valid_773804, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_773804 != nil:
    section.add "Action", valid_773804
  var valid_773805 = query.getOrDefault("Version")
  valid_773805 = validateParameter(valid_773805, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773805 != nil:
    section.add "Version", valid_773805
  var valid_773806 = query.getOrDefault("CustomSuffix")
  valid_773806 = validateParameter(valid_773806, JString, required = false,
                                 default = nil)
  if valid_773806 != nil:
    section.add "CustomSuffix", valid_773806
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773807 = header.getOrDefault("X-Amz-Date")
  valid_773807 = validateParameter(valid_773807, JString, required = false,
                                 default = nil)
  if valid_773807 != nil:
    section.add "X-Amz-Date", valid_773807
  var valid_773808 = header.getOrDefault("X-Amz-Security-Token")
  valid_773808 = validateParameter(valid_773808, JString, required = false,
                                 default = nil)
  if valid_773808 != nil:
    section.add "X-Amz-Security-Token", valid_773808
  var valid_773809 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773809 = validateParameter(valid_773809, JString, required = false,
                                 default = nil)
  if valid_773809 != nil:
    section.add "X-Amz-Content-Sha256", valid_773809
  var valid_773810 = header.getOrDefault("X-Amz-Algorithm")
  valid_773810 = validateParameter(valid_773810, JString, required = false,
                                 default = nil)
  if valid_773810 != nil:
    section.add "X-Amz-Algorithm", valid_773810
  var valid_773811 = header.getOrDefault("X-Amz-Signature")
  valid_773811 = validateParameter(valid_773811, JString, required = false,
                                 default = nil)
  if valid_773811 != nil:
    section.add "X-Amz-Signature", valid_773811
  var valid_773812 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773812 = validateParameter(valid_773812, JString, required = false,
                                 default = nil)
  if valid_773812 != nil:
    section.add "X-Amz-SignedHeaders", valid_773812
  var valid_773813 = header.getOrDefault("X-Amz-Credential")
  valid_773813 = validateParameter(valid_773813, JString, required = false,
                                 default = nil)
  if valid_773813 != nil:
    section.add "X-Amz-Credential", valid_773813
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773814: Call_GetCreateServiceLinkedRole_773799; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_773814.validator(path, query, header, formData, body)
  let scheme = call_773814.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773814.url(scheme.get, call_773814.host, call_773814.base,
                         call_773814.route, valid.getOrDefault("path"))
  result = hook(call_773814, url, valid)

proc call*(call_773815: Call_GetCreateServiceLinkedRole_773799;
          AWSServiceName: string; Description: string = "";
          Action: string = "CreateServiceLinkedRole";
          Version: string = "2010-05-08"; CustomSuffix: string = ""): Recallable =
  ## getCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   Description: string
  ##              : The description of the role.
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  var query_773816 = newJObject()
  add(query_773816, "Description", newJString(Description))
  add(query_773816, "AWSServiceName", newJString(AWSServiceName))
  add(query_773816, "Action", newJString(Action))
  add(query_773816, "Version", newJString(Version))
  add(query_773816, "CustomSuffix", newJString(CustomSuffix))
  result = call_773815.call(nil, query_773816, nil, nil, nil)

var getCreateServiceLinkedRole* = Call_GetCreateServiceLinkedRole_773799(
    name: "getCreateServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_GetCreateServiceLinkedRole_773800, base: "/",
    url: url_GetCreateServiceLinkedRole_773801,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceSpecificCredential_773853 = ref object of OpenApiRestCall_772597
proc url_PostCreateServiceSpecificCredential_773855(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateServiceSpecificCredential_773854(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773856 = query.getOrDefault("Action")
  valid_773856 = validateParameter(valid_773856, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_773856 != nil:
    section.add "Action", valid_773856
  var valid_773857 = query.getOrDefault("Version")
  valid_773857 = validateParameter(valid_773857, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773857 != nil:
    section.add "Version", valid_773857
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773858 = header.getOrDefault("X-Amz-Date")
  valid_773858 = validateParameter(valid_773858, JString, required = false,
                                 default = nil)
  if valid_773858 != nil:
    section.add "X-Amz-Date", valid_773858
  var valid_773859 = header.getOrDefault("X-Amz-Security-Token")
  valid_773859 = validateParameter(valid_773859, JString, required = false,
                                 default = nil)
  if valid_773859 != nil:
    section.add "X-Amz-Security-Token", valid_773859
  var valid_773860 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773860 = validateParameter(valid_773860, JString, required = false,
                                 default = nil)
  if valid_773860 != nil:
    section.add "X-Amz-Content-Sha256", valid_773860
  var valid_773861 = header.getOrDefault("X-Amz-Algorithm")
  valid_773861 = validateParameter(valid_773861, JString, required = false,
                                 default = nil)
  if valid_773861 != nil:
    section.add "X-Amz-Algorithm", valid_773861
  var valid_773862 = header.getOrDefault("X-Amz-Signature")
  valid_773862 = validateParameter(valid_773862, JString, required = false,
                                 default = nil)
  if valid_773862 != nil:
    section.add "X-Amz-Signature", valid_773862
  var valid_773863 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773863 = validateParameter(valid_773863, JString, required = false,
                                 default = nil)
  if valid_773863 != nil:
    section.add "X-Amz-SignedHeaders", valid_773863
  var valid_773864 = header.getOrDefault("X-Amz-Credential")
  valid_773864 = validateParameter(valid_773864, JString, required = false,
                                 default = nil)
  if valid_773864 != nil:
    section.add "X-Amz-Credential", valid_773864
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_773865 = formData.getOrDefault("UserName")
  valid_773865 = validateParameter(valid_773865, JString, required = true,
                                 default = nil)
  if valid_773865 != nil:
    section.add "UserName", valid_773865
  var valid_773866 = formData.getOrDefault("ServiceName")
  valid_773866 = validateParameter(valid_773866, JString, required = true,
                                 default = nil)
  if valid_773866 != nil:
    section.add "ServiceName", valid_773866
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773867: Call_PostCreateServiceSpecificCredential_773853;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773867.validator(path, query, header, formData, body)
  let scheme = call_773867.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773867.url(scheme.get, call_773867.host, call_773867.base,
                         call_773867.route, valid.getOrDefault("path"))
  result = hook(call_773867, url, valid)

proc call*(call_773868: Call_PostCreateServiceSpecificCredential_773853;
          UserName: string; ServiceName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  var query_773869 = newJObject()
  var formData_773870 = newJObject()
  add(formData_773870, "UserName", newJString(UserName))
  add(query_773869, "Action", newJString(Action))
  add(query_773869, "Version", newJString(Version))
  add(formData_773870, "ServiceName", newJString(ServiceName))
  result = call_773868.call(nil, query_773869, nil, formData_773870, nil)

var postCreateServiceSpecificCredential* = Call_PostCreateServiceSpecificCredential_773853(
    name: "postCreateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_PostCreateServiceSpecificCredential_773854, base: "/",
    url: url_PostCreateServiceSpecificCredential_773855,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceSpecificCredential_773836 = ref object of OpenApiRestCall_772597
proc url_GetCreateServiceSpecificCredential_773838(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateServiceSpecificCredential_773837(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceName` field"
  var valid_773839 = query.getOrDefault("ServiceName")
  valid_773839 = validateParameter(valid_773839, JString, required = true,
                                 default = nil)
  if valid_773839 != nil:
    section.add "ServiceName", valid_773839
  var valid_773840 = query.getOrDefault("UserName")
  valid_773840 = validateParameter(valid_773840, JString, required = true,
                                 default = nil)
  if valid_773840 != nil:
    section.add "UserName", valid_773840
  var valid_773841 = query.getOrDefault("Action")
  valid_773841 = validateParameter(valid_773841, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_773841 != nil:
    section.add "Action", valid_773841
  var valid_773842 = query.getOrDefault("Version")
  valid_773842 = validateParameter(valid_773842, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773842 != nil:
    section.add "Version", valid_773842
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773843 = header.getOrDefault("X-Amz-Date")
  valid_773843 = validateParameter(valid_773843, JString, required = false,
                                 default = nil)
  if valid_773843 != nil:
    section.add "X-Amz-Date", valid_773843
  var valid_773844 = header.getOrDefault("X-Amz-Security-Token")
  valid_773844 = validateParameter(valid_773844, JString, required = false,
                                 default = nil)
  if valid_773844 != nil:
    section.add "X-Amz-Security-Token", valid_773844
  var valid_773845 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773845 = validateParameter(valid_773845, JString, required = false,
                                 default = nil)
  if valid_773845 != nil:
    section.add "X-Amz-Content-Sha256", valid_773845
  var valid_773846 = header.getOrDefault("X-Amz-Algorithm")
  valid_773846 = validateParameter(valid_773846, JString, required = false,
                                 default = nil)
  if valid_773846 != nil:
    section.add "X-Amz-Algorithm", valid_773846
  var valid_773847 = header.getOrDefault("X-Amz-Signature")
  valid_773847 = validateParameter(valid_773847, JString, required = false,
                                 default = nil)
  if valid_773847 != nil:
    section.add "X-Amz-Signature", valid_773847
  var valid_773848 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773848 = validateParameter(valid_773848, JString, required = false,
                                 default = nil)
  if valid_773848 != nil:
    section.add "X-Amz-SignedHeaders", valid_773848
  var valid_773849 = header.getOrDefault("X-Amz-Credential")
  valid_773849 = validateParameter(valid_773849, JString, required = false,
                                 default = nil)
  if valid_773849 != nil:
    section.add "X-Amz-Credential", valid_773849
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773850: Call_GetCreateServiceSpecificCredential_773836;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773850.validator(path, query, header, formData, body)
  let scheme = call_773850.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773850.url(scheme.get, call_773850.host, call_773850.base,
                         call_773850.route, valid.getOrDefault("path"))
  result = hook(call_773850, url, valid)

proc call*(call_773851: Call_GetCreateServiceSpecificCredential_773836;
          ServiceName: string; UserName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773852 = newJObject()
  add(query_773852, "ServiceName", newJString(ServiceName))
  add(query_773852, "UserName", newJString(UserName))
  add(query_773852, "Action", newJString(Action))
  add(query_773852, "Version", newJString(Version))
  result = call_773851.call(nil, query_773852, nil, nil, nil)

var getCreateServiceSpecificCredential* = Call_GetCreateServiceSpecificCredential_773836(
    name: "getCreateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_GetCreateServiceSpecificCredential_773837, base: "/",
    url: url_GetCreateServiceSpecificCredential_773838,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateUser_773890 = ref object of OpenApiRestCall_772597
proc url_PostCreateUser_773892(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateUser_773891(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773893 = query.getOrDefault("Action")
  valid_773893 = validateParameter(valid_773893, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_773893 != nil:
    section.add "Action", valid_773893
  var valid_773894 = query.getOrDefault("Version")
  valid_773894 = validateParameter(valid_773894, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773894 != nil:
    section.add "Version", valid_773894
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773895 = header.getOrDefault("X-Amz-Date")
  valid_773895 = validateParameter(valid_773895, JString, required = false,
                                 default = nil)
  if valid_773895 != nil:
    section.add "X-Amz-Date", valid_773895
  var valid_773896 = header.getOrDefault("X-Amz-Security-Token")
  valid_773896 = validateParameter(valid_773896, JString, required = false,
                                 default = nil)
  if valid_773896 != nil:
    section.add "X-Amz-Security-Token", valid_773896
  var valid_773897 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773897 = validateParameter(valid_773897, JString, required = false,
                                 default = nil)
  if valid_773897 != nil:
    section.add "X-Amz-Content-Sha256", valid_773897
  var valid_773898 = header.getOrDefault("X-Amz-Algorithm")
  valid_773898 = validateParameter(valid_773898, JString, required = false,
                                 default = nil)
  if valid_773898 != nil:
    section.add "X-Amz-Algorithm", valid_773898
  var valid_773899 = header.getOrDefault("X-Amz-Signature")
  valid_773899 = validateParameter(valid_773899, JString, required = false,
                                 default = nil)
  if valid_773899 != nil:
    section.add "X-Amz-Signature", valid_773899
  var valid_773900 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773900 = validateParameter(valid_773900, JString, required = false,
                                 default = nil)
  if valid_773900 != nil:
    section.add "X-Amz-SignedHeaders", valid_773900
  var valid_773901 = header.getOrDefault("X-Amz-Credential")
  valid_773901 = validateParameter(valid_773901, JString, required = false,
                                 default = nil)
  if valid_773901 != nil:
    section.add "X-Amz-Credential", valid_773901
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_773902 = formData.getOrDefault("UserName")
  valid_773902 = validateParameter(valid_773902, JString, required = true,
                                 default = nil)
  if valid_773902 != nil:
    section.add "UserName", valid_773902
  var valid_773903 = formData.getOrDefault("PermissionsBoundary")
  valid_773903 = validateParameter(valid_773903, JString, required = false,
                                 default = nil)
  if valid_773903 != nil:
    section.add "PermissionsBoundary", valid_773903
  var valid_773904 = formData.getOrDefault("Tags")
  valid_773904 = validateParameter(valid_773904, JArray, required = false,
                                 default = nil)
  if valid_773904 != nil:
    section.add "Tags", valid_773904
  var valid_773905 = formData.getOrDefault("Path")
  valid_773905 = validateParameter(valid_773905, JString, required = false,
                                 default = nil)
  if valid_773905 != nil:
    section.add "Path", valid_773905
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773906: Call_PostCreateUser_773890; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773906.validator(path, query, header, formData, body)
  let scheme = call_773906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773906.url(scheme.get, call_773906.host, call_773906.base,
                         call_773906.route, valid.getOrDefault("path"))
  result = hook(call_773906, url, valid)

proc call*(call_773907: Call_PostCreateUser_773890; UserName: string;
          PermissionsBoundary: string = ""; Tags: JsonNode = nil;
          Action: string = "CreateUser"; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_773908 = newJObject()
  var formData_773909 = newJObject()
  add(formData_773909, "UserName", newJString(UserName))
  add(formData_773909, "PermissionsBoundary", newJString(PermissionsBoundary))
  if Tags != nil:
    formData_773909.add "Tags", Tags
  add(query_773908, "Action", newJString(Action))
  add(query_773908, "Version", newJString(Version))
  add(formData_773909, "Path", newJString(Path))
  result = call_773907.call(nil, query_773908, nil, formData_773909, nil)

var postCreateUser* = Call_PostCreateUser_773890(name: "postCreateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_PostCreateUser_773891,
    base: "/", url: url_PostCreateUser_773892, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateUser_773871 = ref object of OpenApiRestCall_772597
proc url_GetCreateUser_773873(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateUser_773872(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_773874 = query.getOrDefault("Tags")
  valid_773874 = validateParameter(valid_773874, JArray, required = false,
                                 default = nil)
  if valid_773874 != nil:
    section.add "Tags", valid_773874
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_773875 = query.getOrDefault("UserName")
  valid_773875 = validateParameter(valid_773875, JString, required = true,
                                 default = nil)
  if valid_773875 != nil:
    section.add "UserName", valid_773875
  var valid_773876 = query.getOrDefault("Action")
  valid_773876 = validateParameter(valid_773876, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_773876 != nil:
    section.add "Action", valid_773876
  var valid_773877 = query.getOrDefault("Path")
  valid_773877 = validateParameter(valid_773877, JString, required = false,
                                 default = nil)
  if valid_773877 != nil:
    section.add "Path", valid_773877
  var valid_773878 = query.getOrDefault("PermissionsBoundary")
  valid_773878 = validateParameter(valid_773878, JString, required = false,
                                 default = nil)
  if valid_773878 != nil:
    section.add "PermissionsBoundary", valid_773878
  var valid_773879 = query.getOrDefault("Version")
  valid_773879 = validateParameter(valid_773879, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773879 != nil:
    section.add "Version", valid_773879
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773880 = header.getOrDefault("X-Amz-Date")
  valid_773880 = validateParameter(valid_773880, JString, required = false,
                                 default = nil)
  if valid_773880 != nil:
    section.add "X-Amz-Date", valid_773880
  var valid_773881 = header.getOrDefault("X-Amz-Security-Token")
  valid_773881 = validateParameter(valid_773881, JString, required = false,
                                 default = nil)
  if valid_773881 != nil:
    section.add "X-Amz-Security-Token", valid_773881
  var valid_773882 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773882 = validateParameter(valid_773882, JString, required = false,
                                 default = nil)
  if valid_773882 != nil:
    section.add "X-Amz-Content-Sha256", valid_773882
  var valid_773883 = header.getOrDefault("X-Amz-Algorithm")
  valid_773883 = validateParameter(valid_773883, JString, required = false,
                                 default = nil)
  if valid_773883 != nil:
    section.add "X-Amz-Algorithm", valid_773883
  var valid_773884 = header.getOrDefault("X-Amz-Signature")
  valid_773884 = validateParameter(valid_773884, JString, required = false,
                                 default = nil)
  if valid_773884 != nil:
    section.add "X-Amz-Signature", valid_773884
  var valid_773885 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773885 = validateParameter(valid_773885, JString, required = false,
                                 default = nil)
  if valid_773885 != nil:
    section.add "X-Amz-SignedHeaders", valid_773885
  var valid_773886 = header.getOrDefault("X-Amz-Credential")
  valid_773886 = validateParameter(valid_773886, JString, required = false,
                                 default = nil)
  if valid_773886 != nil:
    section.add "X-Amz-Credential", valid_773886
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773887: Call_GetCreateUser_773871; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773887.validator(path, query, header, formData, body)
  let scheme = call_773887.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773887.url(scheme.get, call_773887.host, call_773887.base,
                         call_773887.route, valid.getOrDefault("path"))
  result = hook(call_773887, url, valid)

proc call*(call_773888: Call_GetCreateUser_773871; UserName: string;
          Tags: JsonNode = nil; Action: string = "CreateUser"; Path: string = "";
          PermissionsBoundary: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_773889 = newJObject()
  if Tags != nil:
    query_773889.add "Tags", Tags
  add(query_773889, "UserName", newJString(UserName))
  add(query_773889, "Action", newJString(Action))
  add(query_773889, "Path", newJString(Path))
  add(query_773889, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_773889, "Version", newJString(Version))
  result = call_773888.call(nil, query_773889, nil, nil, nil)

var getCreateUser* = Call_GetCreateUser_773871(name: "getCreateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_GetCreateUser_773872,
    base: "/", url: url_GetCreateUser_773873, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateVirtualMFADevice_773927 = ref object of OpenApiRestCall_772597
proc url_PostCreateVirtualMFADevice_773929(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateVirtualMFADevice_773928(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773930 = query.getOrDefault("Action")
  valid_773930 = validateParameter(valid_773930, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_773930 != nil:
    section.add "Action", valid_773930
  var valid_773931 = query.getOrDefault("Version")
  valid_773931 = validateParameter(valid_773931, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773931 != nil:
    section.add "Version", valid_773931
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773932 = header.getOrDefault("X-Amz-Date")
  valid_773932 = validateParameter(valid_773932, JString, required = false,
                                 default = nil)
  if valid_773932 != nil:
    section.add "X-Amz-Date", valid_773932
  var valid_773933 = header.getOrDefault("X-Amz-Security-Token")
  valid_773933 = validateParameter(valid_773933, JString, required = false,
                                 default = nil)
  if valid_773933 != nil:
    section.add "X-Amz-Security-Token", valid_773933
  var valid_773934 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773934 = validateParameter(valid_773934, JString, required = false,
                                 default = nil)
  if valid_773934 != nil:
    section.add "X-Amz-Content-Sha256", valid_773934
  var valid_773935 = header.getOrDefault("X-Amz-Algorithm")
  valid_773935 = validateParameter(valid_773935, JString, required = false,
                                 default = nil)
  if valid_773935 != nil:
    section.add "X-Amz-Algorithm", valid_773935
  var valid_773936 = header.getOrDefault("X-Amz-Signature")
  valid_773936 = validateParameter(valid_773936, JString, required = false,
                                 default = nil)
  if valid_773936 != nil:
    section.add "X-Amz-Signature", valid_773936
  var valid_773937 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773937 = validateParameter(valid_773937, JString, required = false,
                                 default = nil)
  if valid_773937 != nil:
    section.add "X-Amz-SignedHeaders", valid_773937
  var valid_773938 = header.getOrDefault("X-Amz-Credential")
  valid_773938 = validateParameter(valid_773938, JString, required = false,
                                 default = nil)
  if valid_773938 != nil:
    section.add "X-Amz-Credential", valid_773938
  result.add "header", section
  ## parameters in `formData` object:
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `VirtualMFADeviceName` field"
  var valid_773939 = formData.getOrDefault("VirtualMFADeviceName")
  valid_773939 = validateParameter(valid_773939, JString, required = true,
                                 default = nil)
  if valid_773939 != nil:
    section.add "VirtualMFADeviceName", valid_773939
  var valid_773940 = formData.getOrDefault("Path")
  valid_773940 = validateParameter(valid_773940, JString, required = false,
                                 default = nil)
  if valid_773940 != nil:
    section.add "Path", valid_773940
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773941: Call_PostCreateVirtualMFADevice_773927; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_773941.validator(path, query, header, formData, body)
  let scheme = call_773941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773941.url(scheme.get, call_773941.host, call_773941.base,
                         call_773941.route, valid.getOrDefault("path"))
  result = hook(call_773941, url, valid)

proc call*(call_773942: Call_PostCreateVirtualMFADevice_773927;
          VirtualMFADeviceName: string; Action: string = "CreateVirtualMFADevice";
          Version: string = "2010-05-08"; Path: string = ""): Recallable =
  ## postCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_773943 = newJObject()
  var formData_773944 = newJObject()
  add(formData_773944, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  add(query_773943, "Action", newJString(Action))
  add(query_773943, "Version", newJString(Version))
  add(formData_773944, "Path", newJString(Path))
  result = call_773942.call(nil, query_773943, nil, formData_773944, nil)

var postCreateVirtualMFADevice* = Call_PostCreateVirtualMFADevice_773927(
    name: "postCreateVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_PostCreateVirtualMFADevice_773928, base: "/",
    url: url_PostCreateVirtualMFADevice_773929,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateVirtualMFADevice_773910 = ref object of OpenApiRestCall_772597
proc url_GetCreateVirtualMFADevice_773912(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateVirtualMFADevice_773911(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `VirtualMFADeviceName` field"
  var valid_773913 = query.getOrDefault("VirtualMFADeviceName")
  valid_773913 = validateParameter(valid_773913, JString, required = true,
                                 default = nil)
  if valid_773913 != nil:
    section.add "VirtualMFADeviceName", valid_773913
  var valid_773914 = query.getOrDefault("Action")
  valid_773914 = validateParameter(valid_773914, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_773914 != nil:
    section.add "Action", valid_773914
  var valid_773915 = query.getOrDefault("Path")
  valid_773915 = validateParameter(valid_773915, JString, required = false,
                                 default = nil)
  if valid_773915 != nil:
    section.add "Path", valid_773915
  var valid_773916 = query.getOrDefault("Version")
  valid_773916 = validateParameter(valid_773916, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773916 != nil:
    section.add "Version", valid_773916
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773917 = header.getOrDefault("X-Amz-Date")
  valid_773917 = validateParameter(valid_773917, JString, required = false,
                                 default = nil)
  if valid_773917 != nil:
    section.add "X-Amz-Date", valid_773917
  var valid_773918 = header.getOrDefault("X-Amz-Security-Token")
  valid_773918 = validateParameter(valid_773918, JString, required = false,
                                 default = nil)
  if valid_773918 != nil:
    section.add "X-Amz-Security-Token", valid_773918
  var valid_773919 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773919 = validateParameter(valid_773919, JString, required = false,
                                 default = nil)
  if valid_773919 != nil:
    section.add "X-Amz-Content-Sha256", valid_773919
  var valid_773920 = header.getOrDefault("X-Amz-Algorithm")
  valid_773920 = validateParameter(valid_773920, JString, required = false,
                                 default = nil)
  if valid_773920 != nil:
    section.add "X-Amz-Algorithm", valid_773920
  var valid_773921 = header.getOrDefault("X-Amz-Signature")
  valid_773921 = validateParameter(valid_773921, JString, required = false,
                                 default = nil)
  if valid_773921 != nil:
    section.add "X-Amz-Signature", valid_773921
  var valid_773922 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773922 = validateParameter(valid_773922, JString, required = false,
                                 default = nil)
  if valid_773922 != nil:
    section.add "X-Amz-SignedHeaders", valid_773922
  var valid_773923 = header.getOrDefault("X-Amz-Credential")
  valid_773923 = validateParameter(valid_773923, JString, required = false,
                                 default = nil)
  if valid_773923 != nil:
    section.add "X-Amz-Credential", valid_773923
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773924: Call_GetCreateVirtualMFADevice_773910; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_773924.validator(path, query, header, formData, body)
  let scheme = call_773924.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773924.url(scheme.get, call_773924.host, call_773924.base,
                         call_773924.route, valid.getOrDefault("path"))
  result = hook(call_773924, url, valid)

proc call*(call_773925: Call_GetCreateVirtualMFADevice_773910;
          VirtualMFADeviceName: string; Action: string = "CreateVirtualMFADevice";
          Path: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_773926 = newJObject()
  add(query_773926, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  add(query_773926, "Action", newJString(Action))
  add(query_773926, "Path", newJString(Path))
  add(query_773926, "Version", newJString(Version))
  result = call_773925.call(nil, query_773926, nil, nil, nil)

var getCreateVirtualMFADevice* = Call_GetCreateVirtualMFADevice_773910(
    name: "getCreateVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_GetCreateVirtualMFADevice_773911, base: "/",
    url: url_GetCreateVirtualMFADevice_773912,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeactivateMFADevice_773962 = ref object of OpenApiRestCall_772597
proc url_PostDeactivateMFADevice_773964(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeactivateMFADevice_773963(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773965 = query.getOrDefault("Action")
  valid_773965 = validateParameter(valid_773965, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_773965 != nil:
    section.add "Action", valid_773965
  var valid_773966 = query.getOrDefault("Version")
  valid_773966 = validateParameter(valid_773966, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773966 != nil:
    section.add "Version", valid_773966
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773967 = header.getOrDefault("X-Amz-Date")
  valid_773967 = validateParameter(valid_773967, JString, required = false,
                                 default = nil)
  if valid_773967 != nil:
    section.add "X-Amz-Date", valid_773967
  var valid_773968 = header.getOrDefault("X-Amz-Security-Token")
  valid_773968 = validateParameter(valid_773968, JString, required = false,
                                 default = nil)
  if valid_773968 != nil:
    section.add "X-Amz-Security-Token", valid_773968
  var valid_773969 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773969 = validateParameter(valid_773969, JString, required = false,
                                 default = nil)
  if valid_773969 != nil:
    section.add "X-Amz-Content-Sha256", valid_773969
  var valid_773970 = header.getOrDefault("X-Amz-Algorithm")
  valid_773970 = validateParameter(valid_773970, JString, required = false,
                                 default = nil)
  if valid_773970 != nil:
    section.add "X-Amz-Algorithm", valid_773970
  var valid_773971 = header.getOrDefault("X-Amz-Signature")
  valid_773971 = validateParameter(valid_773971, JString, required = false,
                                 default = nil)
  if valid_773971 != nil:
    section.add "X-Amz-Signature", valid_773971
  var valid_773972 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773972 = validateParameter(valid_773972, JString, required = false,
                                 default = nil)
  if valid_773972 != nil:
    section.add "X-Amz-SignedHeaders", valid_773972
  var valid_773973 = header.getOrDefault("X-Amz-Credential")
  valid_773973 = validateParameter(valid_773973, JString, required = false,
                                 default = nil)
  if valid_773973 != nil:
    section.add "X-Amz-Credential", valid_773973
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_773974 = formData.getOrDefault("SerialNumber")
  valid_773974 = validateParameter(valid_773974, JString, required = true,
                                 default = nil)
  if valid_773974 != nil:
    section.add "SerialNumber", valid_773974
  var valid_773975 = formData.getOrDefault("UserName")
  valid_773975 = validateParameter(valid_773975, JString, required = true,
                                 default = nil)
  if valid_773975 != nil:
    section.add "UserName", valid_773975
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773976: Call_PostDeactivateMFADevice_773962; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773976.validator(path, query, header, formData, body)
  let scheme = call_773976.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773976.url(scheme.get, call_773976.host, call_773976.base,
                         call_773976.route, valid.getOrDefault("path"))
  result = hook(call_773976, url, valid)

proc call*(call_773977: Call_PostDeactivateMFADevice_773962; SerialNumber: string;
          UserName: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773978 = newJObject()
  var formData_773979 = newJObject()
  add(formData_773979, "SerialNumber", newJString(SerialNumber))
  add(formData_773979, "UserName", newJString(UserName))
  add(query_773978, "Action", newJString(Action))
  add(query_773978, "Version", newJString(Version))
  result = call_773977.call(nil, query_773978, nil, formData_773979, nil)

var postDeactivateMFADevice* = Call_PostDeactivateMFADevice_773962(
    name: "postDeactivateMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_PostDeactivateMFADevice_773963, base: "/",
    url: url_PostDeactivateMFADevice_773964, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeactivateMFADevice_773945 = ref object of OpenApiRestCall_772597
proc url_GetDeactivateMFADevice_773947(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeactivateMFADevice_773946(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_773948 = query.getOrDefault("SerialNumber")
  valid_773948 = validateParameter(valid_773948, JString, required = true,
                                 default = nil)
  if valid_773948 != nil:
    section.add "SerialNumber", valid_773948
  var valid_773949 = query.getOrDefault("UserName")
  valid_773949 = validateParameter(valid_773949, JString, required = true,
                                 default = nil)
  if valid_773949 != nil:
    section.add "UserName", valid_773949
  var valid_773950 = query.getOrDefault("Action")
  valid_773950 = validateParameter(valid_773950, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_773950 != nil:
    section.add "Action", valid_773950
  var valid_773951 = query.getOrDefault("Version")
  valid_773951 = validateParameter(valid_773951, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773951 != nil:
    section.add "Version", valid_773951
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773952 = header.getOrDefault("X-Amz-Date")
  valid_773952 = validateParameter(valid_773952, JString, required = false,
                                 default = nil)
  if valid_773952 != nil:
    section.add "X-Amz-Date", valid_773952
  var valid_773953 = header.getOrDefault("X-Amz-Security-Token")
  valid_773953 = validateParameter(valid_773953, JString, required = false,
                                 default = nil)
  if valid_773953 != nil:
    section.add "X-Amz-Security-Token", valid_773953
  var valid_773954 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773954 = validateParameter(valid_773954, JString, required = false,
                                 default = nil)
  if valid_773954 != nil:
    section.add "X-Amz-Content-Sha256", valid_773954
  var valid_773955 = header.getOrDefault("X-Amz-Algorithm")
  valid_773955 = validateParameter(valid_773955, JString, required = false,
                                 default = nil)
  if valid_773955 != nil:
    section.add "X-Amz-Algorithm", valid_773955
  var valid_773956 = header.getOrDefault("X-Amz-Signature")
  valid_773956 = validateParameter(valid_773956, JString, required = false,
                                 default = nil)
  if valid_773956 != nil:
    section.add "X-Amz-Signature", valid_773956
  var valid_773957 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773957 = validateParameter(valid_773957, JString, required = false,
                                 default = nil)
  if valid_773957 != nil:
    section.add "X-Amz-SignedHeaders", valid_773957
  var valid_773958 = header.getOrDefault("X-Amz-Credential")
  valid_773958 = validateParameter(valid_773958, JString, required = false,
                                 default = nil)
  if valid_773958 != nil:
    section.add "X-Amz-Credential", valid_773958
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773959: Call_GetDeactivateMFADevice_773945; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_773959.validator(path, query, header, formData, body)
  let scheme = call_773959.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773959.url(scheme.get, call_773959.host, call_773959.base,
                         call_773959.route, valid.getOrDefault("path"))
  result = hook(call_773959, url, valid)

proc call*(call_773960: Call_GetDeactivateMFADevice_773945; SerialNumber: string;
          UserName: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773961 = newJObject()
  add(query_773961, "SerialNumber", newJString(SerialNumber))
  add(query_773961, "UserName", newJString(UserName))
  add(query_773961, "Action", newJString(Action))
  add(query_773961, "Version", newJString(Version))
  result = call_773960.call(nil, query_773961, nil, nil, nil)

var getDeactivateMFADevice* = Call_GetDeactivateMFADevice_773945(
    name: "getDeactivateMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_GetDeactivateMFADevice_773946, base: "/",
    url: url_GetDeactivateMFADevice_773947, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccessKey_773997 = ref object of OpenApiRestCall_772597
proc url_PostDeleteAccessKey_773999(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteAccessKey_773998(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774000 = query.getOrDefault("Action")
  valid_774000 = validateParameter(valid_774000, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_774000 != nil:
    section.add "Action", valid_774000
  var valid_774001 = query.getOrDefault("Version")
  valid_774001 = validateParameter(valid_774001, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774001 != nil:
    section.add "Version", valid_774001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774002 = header.getOrDefault("X-Amz-Date")
  valid_774002 = validateParameter(valid_774002, JString, required = false,
                                 default = nil)
  if valid_774002 != nil:
    section.add "X-Amz-Date", valid_774002
  var valid_774003 = header.getOrDefault("X-Amz-Security-Token")
  valid_774003 = validateParameter(valid_774003, JString, required = false,
                                 default = nil)
  if valid_774003 != nil:
    section.add "X-Amz-Security-Token", valid_774003
  var valid_774004 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774004 = validateParameter(valid_774004, JString, required = false,
                                 default = nil)
  if valid_774004 != nil:
    section.add "X-Amz-Content-Sha256", valid_774004
  var valid_774005 = header.getOrDefault("X-Amz-Algorithm")
  valid_774005 = validateParameter(valid_774005, JString, required = false,
                                 default = nil)
  if valid_774005 != nil:
    section.add "X-Amz-Algorithm", valid_774005
  var valid_774006 = header.getOrDefault("X-Amz-Signature")
  valid_774006 = validateParameter(valid_774006, JString, required = false,
                                 default = nil)
  if valid_774006 != nil:
    section.add "X-Amz-Signature", valid_774006
  var valid_774007 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774007 = validateParameter(valid_774007, JString, required = false,
                                 default = nil)
  if valid_774007 != nil:
    section.add "X-Amz-SignedHeaders", valid_774007
  var valid_774008 = header.getOrDefault("X-Amz-Credential")
  valid_774008 = validateParameter(valid_774008, JString, required = false,
                                 default = nil)
  if valid_774008 != nil:
    section.add "X-Amz-Credential", valid_774008
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_774009 = formData.getOrDefault("UserName")
  valid_774009 = validateParameter(valid_774009, JString, required = false,
                                 default = nil)
  if valid_774009 != nil:
    section.add "UserName", valid_774009
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_774010 = formData.getOrDefault("AccessKeyId")
  valid_774010 = validateParameter(valid_774010, JString, required = true,
                                 default = nil)
  if valid_774010 != nil:
    section.add "AccessKeyId", valid_774010
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774011: Call_PostDeleteAccessKey_773997; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_774011.validator(path, query, header, formData, body)
  let scheme = call_774011.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774011.url(scheme.get, call_774011.host, call_774011.base,
                         call_774011.route, valid.getOrDefault("path"))
  result = hook(call_774011, url, valid)

proc call*(call_774012: Call_PostDeleteAccessKey_773997; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774013 = newJObject()
  var formData_774014 = newJObject()
  add(formData_774014, "UserName", newJString(UserName))
  add(formData_774014, "AccessKeyId", newJString(AccessKeyId))
  add(query_774013, "Action", newJString(Action))
  add(query_774013, "Version", newJString(Version))
  result = call_774012.call(nil, query_774013, nil, formData_774014, nil)

var postDeleteAccessKey* = Call_PostDeleteAccessKey_773997(
    name: "postDeleteAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccessKey",
    validator: validate_PostDeleteAccessKey_773998, base: "/",
    url: url_PostDeleteAccessKey_773999, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccessKey_773980 = ref object of OpenApiRestCall_772597
proc url_GetDeleteAccessKey_773982(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteAccessKey_773981(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccessKeyId` field"
  var valid_773983 = query.getOrDefault("AccessKeyId")
  valid_773983 = validateParameter(valid_773983, JString, required = true,
                                 default = nil)
  if valid_773983 != nil:
    section.add "AccessKeyId", valid_773983
  var valid_773984 = query.getOrDefault("UserName")
  valid_773984 = validateParameter(valid_773984, JString, required = false,
                                 default = nil)
  if valid_773984 != nil:
    section.add "UserName", valid_773984
  var valid_773985 = query.getOrDefault("Action")
  valid_773985 = validateParameter(valid_773985, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_773985 != nil:
    section.add "Action", valid_773985
  var valid_773986 = query.getOrDefault("Version")
  valid_773986 = validateParameter(valid_773986, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_773986 != nil:
    section.add "Version", valid_773986
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773987 = header.getOrDefault("X-Amz-Date")
  valid_773987 = validateParameter(valid_773987, JString, required = false,
                                 default = nil)
  if valid_773987 != nil:
    section.add "X-Amz-Date", valid_773987
  var valid_773988 = header.getOrDefault("X-Amz-Security-Token")
  valid_773988 = validateParameter(valid_773988, JString, required = false,
                                 default = nil)
  if valid_773988 != nil:
    section.add "X-Amz-Security-Token", valid_773988
  var valid_773989 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773989 = validateParameter(valid_773989, JString, required = false,
                                 default = nil)
  if valid_773989 != nil:
    section.add "X-Amz-Content-Sha256", valid_773989
  var valid_773990 = header.getOrDefault("X-Amz-Algorithm")
  valid_773990 = validateParameter(valid_773990, JString, required = false,
                                 default = nil)
  if valid_773990 != nil:
    section.add "X-Amz-Algorithm", valid_773990
  var valid_773991 = header.getOrDefault("X-Amz-Signature")
  valid_773991 = validateParameter(valid_773991, JString, required = false,
                                 default = nil)
  if valid_773991 != nil:
    section.add "X-Amz-Signature", valid_773991
  var valid_773992 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773992 = validateParameter(valid_773992, JString, required = false,
                                 default = nil)
  if valid_773992 != nil:
    section.add "X-Amz-SignedHeaders", valid_773992
  var valid_773993 = header.getOrDefault("X-Amz-Credential")
  valid_773993 = validateParameter(valid_773993, JString, required = false,
                                 default = nil)
  if valid_773993 != nil:
    section.add "X-Amz-Credential", valid_773993
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773994: Call_GetDeleteAccessKey_773980; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_773994.validator(path, query, header, formData, body)
  let scheme = call_773994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773994.url(scheme.get, call_773994.host, call_773994.base,
                         call_773994.route, valid.getOrDefault("path"))
  result = hook(call_773994, url, valid)

proc call*(call_773995: Call_GetDeleteAccessKey_773980; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773996 = newJObject()
  add(query_773996, "AccessKeyId", newJString(AccessKeyId))
  add(query_773996, "UserName", newJString(UserName))
  add(query_773996, "Action", newJString(Action))
  add(query_773996, "Version", newJString(Version))
  result = call_773995.call(nil, query_773996, nil, nil, nil)

var getDeleteAccessKey* = Call_GetDeleteAccessKey_773980(
    name: "getDeleteAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteAccessKey", validator: validate_GetDeleteAccessKey_773981,
    base: "/", url: url_GetDeleteAccessKey_773982,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountAlias_774031 = ref object of OpenApiRestCall_772597
proc url_PostDeleteAccountAlias_774033(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteAccountAlias_774032(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774034 = query.getOrDefault("Action")
  valid_774034 = validateParameter(valid_774034, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_774034 != nil:
    section.add "Action", valid_774034
  var valid_774035 = query.getOrDefault("Version")
  valid_774035 = validateParameter(valid_774035, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774035 != nil:
    section.add "Version", valid_774035
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774036 = header.getOrDefault("X-Amz-Date")
  valid_774036 = validateParameter(valid_774036, JString, required = false,
                                 default = nil)
  if valid_774036 != nil:
    section.add "X-Amz-Date", valid_774036
  var valid_774037 = header.getOrDefault("X-Amz-Security-Token")
  valid_774037 = validateParameter(valid_774037, JString, required = false,
                                 default = nil)
  if valid_774037 != nil:
    section.add "X-Amz-Security-Token", valid_774037
  var valid_774038 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774038 = validateParameter(valid_774038, JString, required = false,
                                 default = nil)
  if valid_774038 != nil:
    section.add "X-Amz-Content-Sha256", valid_774038
  var valid_774039 = header.getOrDefault("X-Amz-Algorithm")
  valid_774039 = validateParameter(valid_774039, JString, required = false,
                                 default = nil)
  if valid_774039 != nil:
    section.add "X-Amz-Algorithm", valid_774039
  var valid_774040 = header.getOrDefault("X-Amz-Signature")
  valid_774040 = validateParameter(valid_774040, JString, required = false,
                                 default = nil)
  if valid_774040 != nil:
    section.add "X-Amz-Signature", valid_774040
  var valid_774041 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774041 = validateParameter(valid_774041, JString, required = false,
                                 default = nil)
  if valid_774041 != nil:
    section.add "X-Amz-SignedHeaders", valid_774041
  var valid_774042 = header.getOrDefault("X-Amz-Credential")
  valid_774042 = validateParameter(valid_774042, JString, required = false,
                                 default = nil)
  if valid_774042 != nil:
    section.add "X-Amz-Credential", valid_774042
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_774043 = formData.getOrDefault("AccountAlias")
  valid_774043 = validateParameter(valid_774043, JString, required = true,
                                 default = nil)
  if valid_774043 != nil:
    section.add "AccountAlias", valid_774043
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774044: Call_PostDeleteAccountAlias_774031; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_774044.validator(path, query, header, formData, body)
  let scheme = call_774044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774044.url(scheme.get, call_774044.host, call_774044.base,
                         call_774044.route, valid.getOrDefault("path"))
  result = hook(call_774044, url, valid)

proc call*(call_774045: Call_PostDeleteAccountAlias_774031; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774046 = newJObject()
  var formData_774047 = newJObject()
  add(formData_774047, "AccountAlias", newJString(AccountAlias))
  add(query_774046, "Action", newJString(Action))
  add(query_774046, "Version", newJString(Version))
  result = call_774045.call(nil, query_774046, nil, formData_774047, nil)

var postDeleteAccountAlias* = Call_PostDeleteAccountAlias_774031(
    name: "postDeleteAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_PostDeleteAccountAlias_774032, base: "/",
    url: url_PostDeleteAccountAlias_774033, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountAlias_774015 = ref object of OpenApiRestCall_772597
proc url_GetDeleteAccountAlias_774017(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteAccountAlias_774016(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_774018 = query.getOrDefault("AccountAlias")
  valid_774018 = validateParameter(valid_774018, JString, required = true,
                                 default = nil)
  if valid_774018 != nil:
    section.add "AccountAlias", valid_774018
  var valid_774019 = query.getOrDefault("Action")
  valid_774019 = validateParameter(valid_774019, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_774019 != nil:
    section.add "Action", valid_774019
  var valid_774020 = query.getOrDefault("Version")
  valid_774020 = validateParameter(valid_774020, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774020 != nil:
    section.add "Version", valid_774020
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774021 = header.getOrDefault("X-Amz-Date")
  valid_774021 = validateParameter(valid_774021, JString, required = false,
                                 default = nil)
  if valid_774021 != nil:
    section.add "X-Amz-Date", valid_774021
  var valid_774022 = header.getOrDefault("X-Amz-Security-Token")
  valid_774022 = validateParameter(valid_774022, JString, required = false,
                                 default = nil)
  if valid_774022 != nil:
    section.add "X-Amz-Security-Token", valid_774022
  var valid_774023 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774023 = validateParameter(valid_774023, JString, required = false,
                                 default = nil)
  if valid_774023 != nil:
    section.add "X-Amz-Content-Sha256", valid_774023
  var valid_774024 = header.getOrDefault("X-Amz-Algorithm")
  valid_774024 = validateParameter(valid_774024, JString, required = false,
                                 default = nil)
  if valid_774024 != nil:
    section.add "X-Amz-Algorithm", valid_774024
  var valid_774025 = header.getOrDefault("X-Amz-Signature")
  valid_774025 = validateParameter(valid_774025, JString, required = false,
                                 default = nil)
  if valid_774025 != nil:
    section.add "X-Amz-Signature", valid_774025
  var valid_774026 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774026 = validateParameter(valid_774026, JString, required = false,
                                 default = nil)
  if valid_774026 != nil:
    section.add "X-Amz-SignedHeaders", valid_774026
  var valid_774027 = header.getOrDefault("X-Amz-Credential")
  valid_774027 = validateParameter(valid_774027, JString, required = false,
                                 default = nil)
  if valid_774027 != nil:
    section.add "X-Amz-Credential", valid_774027
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774028: Call_GetDeleteAccountAlias_774015; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_774028.validator(path, query, header, formData, body)
  let scheme = call_774028.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774028.url(scheme.get, call_774028.host, call_774028.base,
                         call_774028.route, valid.getOrDefault("path"))
  result = hook(call_774028, url, valid)

proc call*(call_774029: Call_GetDeleteAccountAlias_774015; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774030 = newJObject()
  add(query_774030, "AccountAlias", newJString(AccountAlias))
  add(query_774030, "Action", newJString(Action))
  add(query_774030, "Version", newJString(Version))
  result = call_774029.call(nil, query_774030, nil, nil, nil)

var getDeleteAccountAlias* = Call_GetDeleteAccountAlias_774015(
    name: "getDeleteAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_GetDeleteAccountAlias_774016, base: "/",
    url: url_GetDeleteAccountAlias_774017, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountPasswordPolicy_774063 = ref object of OpenApiRestCall_772597
proc url_PostDeleteAccountPasswordPolicy_774065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteAccountPasswordPolicy_774064(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774066 = query.getOrDefault("Action")
  valid_774066 = validateParameter(valid_774066, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_774066 != nil:
    section.add "Action", valid_774066
  var valid_774067 = query.getOrDefault("Version")
  valid_774067 = validateParameter(valid_774067, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774067 != nil:
    section.add "Version", valid_774067
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774068 = header.getOrDefault("X-Amz-Date")
  valid_774068 = validateParameter(valid_774068, JString, required = false,
                                 default = nil)
  if valid_774068 != nil:
    section.add "X-Amz-Date", valid_774068
  var valid_774069 = header.getOrDefault("X-Amz-Security-Token")
  valid_774069 = validateParameter(valid_774069, JString, required = false,
                                 default = nil)
  if valid_774069 != nil:
    section.add "X-Amz-Security-Token", valid_774069
  var valid_774070 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774070 = validateParameter(valid_774070, JString, required = false,
                                 default = nil)
  if valid_774070 != nil:
    section.add "X-Amz-Content-Sha256", valid_774070
  var valid_774071 = header.getOrDefault("X-Amz-Algorithm")
  valid_774071 = validateParameter(valid_774071, JString, required = false,
                                 default = nil)
  if valid_774071 != nil:
    section.add "X-Amz-Algorithm", valid_774071
  var valid_774072 = header.getOrDefault("X-Amz-Signature")
  valid_774072 = validateParameter(valid_774072, JString, required = false,
                                 default = nil)
  if valid_774072 != nil:
    section.add "X-Amz-Signature", valid_774072
  var valid_774073 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774073 = validateParameter(valid_774073, JString, required = false,
                                 default = nil)
  if valid_774073 != nil:
    section.add "X-Amz-SignedHeaders", valid_774073
  var valid_774074 = header.getOrDefault("X-Amz-Credential")
  valid_774074 = validateParameter(valid_774074, JString, required = false,
                                 default = nil)
  if valid_774074 != nil:
    section.add "X-Amz-Credential", valid_774074
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774075: Call_PostDeleteAccountPasswordPolicy_774063;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_774075.validator(path, query, header, formData, body)
  let scheme = call_774075.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774075.url(scheme.get, call_774075.host, call_774075.base,
                         call_774075.route, valid.getOrDefault("path"))
  result = hook(call_774075, url, valid)

proc call*(call_774076: Call_PostDeleteAccountPasswordPolicy_774063;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774077 = newJObject()
  add(query_774077, "Action", newJString(Action))
  add(query_774077, "Version", newJString(Version))
  result = call_774076.call(nil, query_774077, nil, nil, nil)

var postDeleteAccountPasswordPolicy* = Call_PostDeleteAccountPasswordPolicy_774063(
    name: "postDeleteAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_PostDeleteAccountPasswordPolicy_774064, base: "/",
    url: url_PostDeleteAccountPasswordPolicy_774065,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountPasswordPolicy_774048 = ref object of OpenApiRestCall_772597
proc url_GetDeleteAccountPasswordPolicy_774050(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteAccountPasswordPolicy_774049(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774051 = query.getOrDefault("Action")
  valid_774051 = validateParameter(valid_774051, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_774051 != nil:
    section.add "Action", valid_774051
  var valid_774052 = query.getOrDefault("Version")
  valid_774052 = validateParameter(valid_774052, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774052 != nil:
    section.add "Version", valid_774052
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774053 = header.getOrDefault("X-Amz-Date")
  valid_774053 = validateParameter(valid_774053, JString, required = false,
                                 default = nil)
  if valid_774053 != nil:
    section.add "X-Amz-Date", valid_774053
  var valid_774054 = header.getOrDefault("X-Amz-Security-Token")
  valid_774054 = validateParameter(valid_774054, JString, required = false,
                                 default = nil)
  if valid_774054 != nil:
    section.add "X-Amz-Security-Token", valid_774054
  var valid_774055 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774055 = validateParameter(valid_774055, JString, required = false,
                                 default = nil)
  if valid_774055 != nil:
    section.add "X-Amz-Content-Sha256", valid_774055
  var valid_774056 = header.getOrDefault("X-Amz-Algorithm")
  valid_774056 = validateParameter(valid_774056, JString, required = false,
                                 default = nil)
  if valid_774056 != nil:
    section.add "X-Amz-Algorithm", valid_774056
  var valid_774057 = header.getOrDefault("X-Amz-Signature")
  valid_774057 = validateParameter(valid_774057, JString, required = false,
                                 default = nil)
  if valid_774057 != nil:
    section.add "X-Amz-Signature", valid_774057
  var valid_774058 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774058 = validateParameter(valid_774058, JString, required = false,
                                 default = nil)
  if valid_774058 != nil:
    section.add "X-Amz-SignedHeaders", valid_774058
  var valid_774059 = header.getOrDefault("X-Amz-Credential")
  valid_774059 = validateParameter(valid_774059, JString, required = false,
                                 default = nil)
  if valid_774059 != nil:
    section.add "X-Amz-Credential", valid_774059
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774060: Call_GetDeleteAccountPasswordPolicy_774048; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_774060.validator(path, query, header, formData, body)
  let scheme = call_774060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774060.url(scheme.get, call_774060.host, call_774060.base,
                         call_774060.route, valid.getOrDefault("path"))
  result = hook(call_774060, url, valid)

proc call*(call_774061: Call_GetDeleteAccountPasswordPolicy_774048;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774062 = newJObject()
  add(query_774062, "Action", newJString(Action))
  add(query_774062, "Version", newJString(Version))
  result = call_774061.call(nil, query_774062, nil, nil, nil)

var getDeleteAccountPasswordPolicy* = Call_GetDeleteAccountPasswordPolicy_774048(
    name: "getDeleteAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_GetDeleteAccountPasswordPolicy_774049, base: "/",
    url: url_GetDeleteAccountPasswordPolicy_774050,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroup_774094 = ref object of OpenApiRestCall_772597
proc url_PostDeleteGroup_774096(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteGroup_774095(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774097 = query.getOrDefault("Action")
  valid_774097 = validateParameter(valid_774097, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_774097 != nil:
    section.add "Action", valid_774097
  var valid_774098 = query.getOrDefault("Version")
  valid_774098 = validateParameter(valid_774098, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774098 != nil:
    section.add "Version", valid_774098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774099 = header.getOrDefault("X-Amz-Date")
  valid_774099 = validateParameter(valid_774099, JString, required = false,
                                 default = nil)
  if valid_774099 != nil:
    section.add "X-Amz-Date", valid_774099
  var valid_774100 = header.getOrDefault("X-Amz-Security-Token")
  valid_774100 = validateParameter(valid_774100, JString, required = false,
                                 default = nil)
  if valid_774100 != nil:
    section.add "X-Amz-Security-Token", valid_774100
  var valid_774101 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774101 = validateParameter(valid_774101, JString, required = false,
                                 default = nil)
  if valid_774101 != nil:
    section.add "X-Amz-Content-Sha256", valid_774101
  var valid_774102 = header.getOrDefault("X-Amz-Algorithm")
  valid_774102 = validateParameter(valid_774102, JString, required = false,
                                 default = nil)
  if valid_774102 != nil:
    section.add "X-Amz-Algorithm", valid_774102
  var valid_774103 = header.getOrDefault("X-Amz-Signature")
  valid_774103 = validateParameter(valid_774103, JString, required = false,
                                 default = nil)
  if valid_774103 != nil:
    section.add "X-Amz-Signature", valid_774103
  var valid_774104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774104 = validateParameter(valid_774104, JString, required = false,
                                 default = nil)
  if valid_774104 != nil:
    section.add "X-Amz-SignedHeaders", valid_774104
  var valid_774105 = header.getOrDefault("X-Amz-Credential")
  valid_774105 = validateParameter(valid_774105, JString, required = false,
                                 default = nil)
  if valid_774105 != nil:
    section.add "X-Amz-Credential", valid_774105
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_774106 = formData.getOrDefault("GroupName")
  valid_774106 = validateParameter(valid_774106, JString, required = true,
                                 default = nil)
  if valid_774106 != nil:
    section.add "GroupName", valid_774106
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774107: Call_PostDeleteGroup_774094; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_774107.validator(path, query, header, formData, body)
  let scheme = call_774107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774107.url(scheme.get, call_774107.host, call_774107.base,
                         call_774107.route, valid.getOrDefault("path"))
  result = hook(call_774107, url, valid)

proc call*(call_774108: Call_PostDeleteGroup_774094; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774109 = newJObject()
  var formData_774110 = newJObject()
  add(formData_774110, "GroupName", newJString(GroupName))
  add(query_774109, "Action", newJString(Action))
  add(query_774109, "Version", newJString(Version))
  result = call_774108.call(nil, query_774109, nil, formData_774110, nil)

var postDeleteGroup* = Call_PostDeleteGroup_774094(name: "postDeleteGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_PostDeleteGroup_774095,
    base: "/", url: url_PostDeleteGroup_774096, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroup_774078 = ref object of OpenApiRestCall_772597
proc url_GetDeleteGroup_774080(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteGroup_774079(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774081 = query.getOrDefault("Action")
  valid_774081 = validateParameter(valid_774081, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_774081 != nil:
    section.add "Action", valid_774081
  var valid_774082 = query.getOrDefault("GroupName")
  valid_774082 = validateParameter(valid_774082, JString, required = true,
                                 default = nil)
  if valid_774082 != nil:
    section.add "GroupName", valid_774082
  var valid_774083 = query.getOrDefault("Version")
  valid_774083 = validateParameter(valid_774083, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774083 != nil:
    section.add "Version", valid_774083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774084 = header.getOrDefault("X-Amz-Date")
  valid_774084 = validateParameter(valid_774084, JString, required = false,
                                 default = nil)
  if valid_774084 != nil:
    section.add "X-Amz-Date", valid_774084
  var valid_774085 = header.getOrDefault("X-Amz-Security-Token")
  valid_774085 = validateParameter(valid_774085, JString, required = false,
                                 default = nil)
  if valid_774085 != nil:
    section.add "X-Amz-Security-Token", valid_774085
  var valid_774086 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774086 = validateParameter(valid_774086, JString, required = false,
                                 default = nil)
  if valid_774086 != nil:
    section.add "X-Amz-Content-Sha256", valid_774086
  var valid_774087 = header.getOrDefault("X-Amz-Algorithm")
  valid_774087 = validateParameter(valid_774087, JString, required = false,
                                 default = nil)
  if valid_774087 != nil:
    section.add "X-Amz-Algorithm", valid_774087
  var valid_774088 = header.getOrDefault("X-Amz-Signature")
  valid_774088 = validateParameter(valid_774088, JString, required = false,
                                 default = nil)
  if valid_774088 != nil:
    section.add "X-Amz-Signature", valid_774088
  var valid_774089 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774089 = validateParameter(valid_774089, JString, required = false,
                                 default = nil)
  if valid_774089 != nil:
    section.add "X-Amz-SignedHeaders", valid_774089
  var valid_774090 = header.getOrDefault("X-Amz-Credential")
  valid_774090 = validateParameter(valid_774090, JString, required = false,
                                 default = nil)
  if valid_774090 != nil:
    section.add "X-Amz-Credential", valid_774090
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774091: Call_GetDeleteGroup_774078; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_774091.validator(path, query, header, formData, body)
  let scheme = call_774091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774091.url(scheme.get, call_774091.host, call_774091.base,
                         call_774091.route, valid.getOrDefault("path"))
  result = hook(call_774091, url, valid)

proc call*(call_774092: Call_GetDeleteGroup_774078; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_774093 = newJObject()
  add(query_774093, "Action", newJString(Action))
  add(query_774093, "GroupName", newJString(GroupName))
  add(query_774093, "Version", newJString(Version))
  result = call_774092.call(nil, query_774093, nil, nil, nil)

var getDeleteGroup* = Call_GetDeleteGroup_774078(name: "getDeleteGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_GetDeleteGroup_774079,
    base: "/", url: url_GetDeleteGroup_774080, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroupPolicy_774128 = ref object of OpenApiRestCall_772597
proc url_PostDeleteGroupPolicy_774130(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteGroupPolicy_774129(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774131 = query.getOrDefault("Action")
  valid_774131 = validateParameter(valid_774131, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_774131 != nil:
    section.add "Action", valid_774131
  var valid_774132 = query.getOrDefault("Version")
  valid_774132 = validateParameter(valid_774132, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774132 != nil:
    section.add "Version", valid_774132
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774133 = header.getOrDefault("X-Amz-Date")
  valid_774133 = validateParameter(valid_774133, JString, required = false,
                                 default = nil)
  if valid_774133 != nil:
    section.add "X-Amz-Date", valid_774133
  var valid_774134 = header.getOrDefault("X-Amz-Security-Token")
  valid_774134 = validateParameter(valid_774134, JString, required = false,
                                 default = nil)
  if valid_774134 != nil:
    section.add "X-Amz-Security-Token", valid_774134
  var valid_774135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774135 = validateParameter(valid_774135, JString, required = false,
                                 default = nil)
  if valid_774135 != nil:
    section.add "X-Amz-Content-Sha256", valid_774135
  var valid_774136 = header.getOrDefault("X-Amz-Algorithm")
  valid_774136 = validateParameter(valid_774136, JString, required = false,
                                 default = nil)
  if valid_774136 != nil:
    section.add "X-Amz-Algorithm", valid_774136
  var valid_774137 = header.getOrDefault("X-Amz-Signature")
  valid_774137 = validateParameter(valid_774137, JString, required = false,
                                 default = nil)
  if valid_774137 != nil:
    section.add "X-Amz-Signature", valid_774137
  var valid_774138 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774138 = validateParameter(valid_774138, JString, required = false,
                                 default = nil)
  if valid_774138 != nil:
    section.add "X-Amz-SignedHeaders", valid_774138
  var valid_774139 = header.getOrDefault("X-Amz-Credential")
  valid_774139 = validateParameter(valid_774139, JString, required = false,
                                 default = nil)
  if valid_774139 != nil:
    section.add "X-Amz-Credential", valid_774139
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_774140 = formData.getOrDefault("PolicyName")
  valid_774140 = validateParameter(valid_774140, JString, required = true,
                                 default = nil)
  if valid_774140 != nil:
    section.add "PolicyName", valid_774140
  var valid_774141 = formData.getOrDefault("GroupName")
  valid_774141 = validateParameter(valid_774141, JString, required = true,
                                 default = nil)
  if valid_774141 != nil:
    section.add "GroupName", valid_774141
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774142: Call_PostDeleteGroupPolicy_774128; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774142.validator(path, query, header, formData, body)
  let scheme = call_774142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774142.url(scheme.get, call_774142.host, call_774142.base,
                         call_774142.route, valid.getOrDefault("path"))
  result = hook(call_774142, url, valid)

proc call*(call_774143: Call_PostDeleteGroupPolicy_774128; PolicyName: string;
          GroupName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774144 = newJObject()
  var formData_774145 = newJObject()
  add(formData_774145, "PolicyName", newJString(PolicyName))
  add(formData_774145, "GroupName", newJString(GroupName))
  add(query_774144, "Action", newJString(Action))
  add(query_774144, "Version", newJString(Version))
  result = call_774143.call(nil, query_774144, nil, formData_774145, nil)

var postDeleteGroupPolicy* = Call_PostDeleteGroupPolicy_774128(
    name: "postDeleteGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_PostDeleteGroupPolicy_774129, base: "/",
    url: url_PostDeleteGroupPolicy_774130, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroupPolicy_774111 = ref object of OpenApiRestCall_772597
proc url_GetDeleteGroupPolicy_774113(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteGroupPolicy_774112(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774114 = query.getOrDefault("Action")
  valid_774114 = validateParameter(valid_774114, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_774114 != nil:
    section.add "Action", valid_774114
  var valid_774115 = query.getOrDefault("GroupName")
  valid_774115 = validateParameter(valid_774115, JString, required = true,
                                 default = nil)
  if valid_774115 != nil:
    section.add "GroupName", valid_774115
  var valid_774116 = query.getOrDefault("Version")
  valid_774116 = validateParameter(valid_774116, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774116 != nil:
    section.add "Version", valid_774116
  var valid_774117 = query.getOrDefault("PolicyName")
  valid_774117 = validateParameter(valid_774117, JString, required = true,
                                 default = nil)
  if valid_774117 != nil:
    section.add "PolicyName", valid_774117
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774118 = header.getOrDefault("X-Amz-Date")
  valid_774118 = validateParameter(valid_774118, JString, required = false,
                                 default = nil)
  if valid_774118 != nil:
    section.add "X-Amz-Date", valid_774118
  var valid_774119 = header.getOrDefault("X-Amz-Security-Token")
  valid_774119 = validateParameter(valid_774119, JString, required = false,
                                 default = nil)
  if valid_774119 != nil:
    section.add "X-Amz-Security-Token", valid_774119
  var valid_774120 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774120 = validateParameter(valid_774120, JString, required = false,
                                 default = nil)
  if valid_774120 != nil:
    section.add "X-Amz-Content-Sha256", valid_774120
  var valid_774121 = header.getOrDefault("X-Amz-Algorithm")
  valid_774121 = validateParameter(valid_774121, JString, required = false,
                                 default = nil)
  if valid_774121 != nil:
    section.add "X-Amz-Algorithm", valid_774121
  var valid_774122 = header.getOrDefault("X-Amz-Signature")
  valid_774122 = validateParameter(valid_774122, JString, required = false,
                                 default = nil)
  if valid_774122 != nil:
    section.add "X-Amz-Signature", valid_774122
  var valid_774123 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774123 = validateParameter(valid_774123, JString, required = false,
                                 default = nil)
  if valid_774123 != nil:
    section.add "X-Amz-SignedHeaders", valid_774123
  var valid_774124 = header.getOrDefault("X-Amz-Credential")
  valid_774124 = validateParameter(valid_774124, JString, required = false,
                                 default = nil)
  if valid_774124 != nil:
    section.add "X-Amz-Credential", valid_774124
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774125: Call_GetDeleteGroupPolicy_774111; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774125.validator(path, query, header, formData, body)
  let scheme = call_774125.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774125.url(scheme.get, call_774125.host, call_774125.base,
                         call_774125.route, valid.getOrDefault("path"))
  result = hook(call_774125, url, valid)

proc call*(call_774126: Call_GetDeleteGroupPolicy_774111; GroupName: string;
          PolicyName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_774127 = newJObject()
  add(query_774127, "Action", newJString(Action))
  add(query_774127, "GroupName", newJString(GroupName))
  add(query_774127, "Version", newJString(Version))
  add(query_774127, "PolicyName", newJString(PolicyName))
  result = call_774126.call(nil, query_774127, nil, nil, nil)

var getDeleteGroupPolicy* = Call_GetDeleteGroupPolicy_774111(
    name: "getDeleteGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_GetDeleteGroupPolicy_774112, base: "/",
    url: url_GetDeleteGroupPolicy_774113, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstanceProfile_774162 = ref object of OpenApiRestCall_772597
proc url_PostDeleteInstanceProfile_774164(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteInstanceProfile_774163(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774165 = query.getOrDefault("Action")
  valid_774165 = validateParameter(valid_774165, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_774165 != nil:
    section.add "Action", valid_774165
  var valid_774166 = query.getOrDefault("Version")
  valid_774166 = validateParameter(valid_774166, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774166 != nil:
    section.add "Version", valid_774166
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774167 = header.getOrDefault("X-Amz-Date")
  valid_774167 = validateParameter(valid_774167, JString, required = false,
                                 default = nil)
  if valid_774167 != nil:
    section.add "X-Amz-Date", valid_774167
  var valid_774168 = header.getOrDefault("X-Amz-Security-Token")
  valid_774168 = validateParameter(valid_774168, JString, required = false,
                                 default = nil)
  if valid_774168 != nil:
    section.add "X-Amz-Security-Token", valid_774168
  var valid_774169 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774169 = validateParameter(valid_774169, JString, required = false,
                                 default = nil)
  if valid_774169 != nil:
    section.add "X-Amz-Content-Sha256", valid_774169
  var valid_774170 = header.getOrDefault("X-Amz-Algorithm")
  valid_774170 = validateParameter(valid_774170, JString, required = false,
                                 default = nil)
  if valid_774170 != nil:
    section.add "X-Amz-Algorithm", valid_774170
  var valid_774171 = header.getOrDefault("X-Amz-Signature")
  valid_774171 = validateParameter(valid_774171, JString, required = false,
                                 default = nil)
  if valid_774171 != nil:
    section.add "X-Amz-Signature", valid_774171
  var valid_774172 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774172 = validateParameter(valid_774172, JString, required = false,
                                 default = nil)
  if valid_774172 != nil:
    section.add "X-Amz-SignedHeaders", valid_774172
  var valid_774173 = header.getOrDefault("X-Amz-Credential")
  valid_774173 = validateParameter(valid_774173, JString, required = false,
                                 default = nil)
  if valid_774173 != nil:
    section.add "X-Amz-Credential", valid_774173
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_774174 = formData.getOrDefault("InstanceProfileName")
  valid_774174 = validateParameter(valid_774174, JString, required = true,
                                 default = nil)
  if valid_774174 != nil:
    section.add "InstanceProfileName", valid_774174
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774175: Call_PostDeleteInstanceProfile_774162; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_774175.validator(path, query, header, formData, body)
  let scheme = call_774175.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774175.url(scheme.get, call_774175.host, call_774175.base,
                         call_774175.route, valid.getOrDefault("path"))
  result = hook(call_774175, url, valid)

proc call*(call_774176: Call_PostDeleteInstanceProfile_774162;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_774177 = newJObject()
  var formData_774178 = newJObject()
  add(query_774177, "Action", newJString(Action))
  add(formData_774178, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_774177, "Version", newJString(Version))
  result = call_774176.call(nil, query_774177, nil, formData_774178, nil)

var postDeleteInstanceProfile* = Call_PostDeleteInstanceProfile_774162(
    name: "postDeleteInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_PostDeleteInstanceProfile_774163, base: "/",
    url: url_PostDeleteInstanceProfile_774164,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstanceProfile_774146 = ref object of OpenApiRestCall_772597
proc url_GetDeleteInstanceProfile_774148(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteInstanceProfile_774147(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_774149 = query.getOrDefault("InstanceProfileName")
  valid_774149 = validateParameter(valid_774149, JString, required = true,
                                 default = nil)
  if valid_774149 != nil:
    section.add "InstanceProfileName", valid_774149
  var valid_774150 = query.getOrDefault("Action")
  valid_774150 = validateParameter(valid_774150, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_774150 != nil:
    section.add "Action", valid_774150
  var valid_774151 = query.getOrDefault("Version")
  valid_774151 = validateParameter(valid_774151, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774151 != nil:
    section.add "Version", valid_774151
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774152 = header.getOrDefault("X-Amz-Date")
  valid_774152 = validateParameter(valid_774152, JString, required = false,
                                 default = nil)
  if valid_774152 != nil:
    section.add "X-Amz-Date", valid_774152
  var valid_774153 = header.getOrDefault("X-Amz-Security-Token")
  valid_774153 = validateParameter(valid_774153, JString, required = false,
                                 default = nil)
  if valid_774153 != nil:
    section.add "X-Amz-Security-Token", valid_774153
  var valid_774154 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774154 = validateParameter(valid_774154, JString, required = false,
                                 default = nil)
  if valid_774154 != nil:
    section.add "X-Amz-Content-Sha256", valid_774154
  var valid_774155 = header.getOrDefault("X-Amz-Algorithm")
  valid_774155 = validateParameter(valid_774155, JString, required = false,
                                 default = nil)
  if valid_774155 != nil:
    section.add "X-Amz-Algorithm", valid_774155
  var valid_774156 = header.getOrDefault("X-Amz-Signature")
  valid_774156 = validateParameter(valid_774156, JString, required = false,
                                 default = nil)
  if valid_774156 != nil:
    section.add "X-Amz-Signature", valid_774156
  var valid_774157 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774157 = validateParameter(valid_774157, JString, required = false,
                                 default = nil)
  if valid_774157 != nil:
    section.add "X-Amz-SignedHeaders", valid_774157
  var valid_774158 = header.getOrDefault("X-Amz-Credential")
  valid_774158 = validateParameter(valid_774158, JString, required = false,
                                 default = nil)
  if valid_774158 != nil:
    section.add "X-Amz-Credential", valid_774158
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774159: Call_GetDeleteInstanceProfile_774146; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_774159.validator(path, query, header, formData, body)
  let scheme = call_774159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774159.url(scheme.get, call_774159.host, call_774159.base,
                         call_774159.route, valid.getOrDefault("path"))
  result = hook(call_774159, url, valid)

proc call*(call_774160: Call_GetDeleteInstanceProfile_774146;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774161 = newJObject()
  add(query_774161, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_774161, "Action", newJString(Action))
  add(query_774161, "Version", newJString(Version))
  result = call_774160.call(nil, query_774161, nil, nil, nil)

var getDeleteInstanceProfile* = Call_GetDeleteInstanceProfile_774146(
    name: "getDeleteInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_GetDeleteInstanceProfile_774147, base: "/",
    url: url_GetDeleteInstanceProfile_774148, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLoginProfile_774195 = ref object of OpenApiRestCall_772597
proc url_PostDeleteLoginProfile_774197(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteLoginProfile_774196(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774198 = query.getOrDefault("Action")
  valid_774198 = validateParameter(valid_774198, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_774198 != nil:
    section.add "Action", valid_774198
  var valid_774199 = query.getOrDefault("Version")
  valid_774199 = validateParameter(valid_774199, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774199 != nil:
    section.add "Version", valid_774199
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774200 = header.getOrDefault("X-Amz-Date")
  valid_774200 = validateParameter(valid_774200, JString, required = false,
                                 default = nil)
  if valid_774200 != nil:
    section.add "X-Amz-Date", valid_774200
  var valid_774201 = header.getOrDefault("X-Amz-Security-Token")
  valid_774201 = validateParameter(valid_774201, JString, required = false,
                                 default = nil)
  if valid_774201 != nil:
    section.add "X-Amz-Security-Token", valid_774201
  var valid_774202 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774202 = validateParameter(valid_774202, JString, required = false,
                                 default = nil)
  if valid_774202 != nil:
    section.add "X-Amz-Content-Sha256", valid_774202
  var valid_774203 = header.getOrDefault("X-Amz-Algorithm")
  valid_774203 = validateParameter(valid_774203, JString, required = false,
                                 default = nil)
  if valid_774203 != nil:
    section.add "X-Amz-Algorithm", valid_774203
  var valid_774204 = header.getOrDefault("X-Amz-Signature")
  valid_774204 = validateParameter(valid_774204, JString, required = false,
                                 default = nil)
  if valid_774204 != nil:
    section.add "X-Amz-Signature", valid_774204
  var valid_774205 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774205 = validateParameter(valid_774205, JString, required = false,
                                 default = nil)
  if valid_774205 != nil:
    section.add "X-Amz-SignedHeaders", valid_774205
  var valid_774206 = header.getOrDefault("X-Amz-Credential")
  valid_774206 = validateParameter(valid_774206, JString, required = false,
                                 default = nil)
  if valid_774206 != nil:
    section.add "X-Amz-Credential", valid_774206
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_774207 = formData.getOrDefault("UserName")
  valid_774207 = validateParameter(valid_774207, JString, required = true,
                                 default = nil)
  if valid_774207 != nil:
    section.add "UserName", valid_774207
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774208: Call_PostDeleteLoginProfile_774195; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_774208.validator(path, query, header, formData, body)
  let scheme = call_774208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774208.url(scheme.get, call_774208.host, call_774208.base,
                         call_774208.route, valid.getOrDefault("path"))
  result = hook(call_774208, url, valid)

proc call*(call_774209: Call_PostDeleteLoginProfile_774195; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774210 = newJObject()
  var formData_774211 = newJObject()
  add(formData_774211, "UserName", newJString(UserName))
  add(query_774210, "Action", newJString(Action))
  add(query_774210, "Version", newJString(Version))
  result = call_774209.call(nil, query_774210, nil, formData_774211, nil)

var postDeleteLoginProfile* = Call_PostDeleteLoginProfile_774195(
    name: "postDeleteLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_PostDeleteLoginProfile_774196, base: "/",
    url: url_PostDeleteLoginProfile_774197, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLoginProfile_774179 = ref object of OpenApiRestCall_772597
proc url_GetDeleteLoginProfile_774181(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteLoginProfile_774180(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_774182 = query.getOrDefault("UserName")
  valid_774182 = validateParameter(valid_774182, JString, required = true,
                                 default = nil)
  if valid_774182 != nil:
    section.add "UserName", valid_774182
  var valid_774183 = query.getOrDefault("Action")
  valid_774183 = validateParameter(valid_774183, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_774183 != nil:
    section.add "Action", valid_774183
  var valid_774184 = query.getOrDefault("Version")
  valid_774184 = validateParameter(valid_774184, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774184 != nil:
    section.add "Version", valid_774184
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774185 = header.getOrDefault("X-Amz-Date")
  valid_774185 = validateParameter(valid_774185, JString, required = false,
                                 default = nil)
  if valid_774185 != nil:
    section.add "X-Amz-Date", valid_774185
  var valid_774186 = header.getOrDefault("X-Amz-Security-Token")
  valid_774186 = validateParameter(valid_774186, JString, required = false,
                                 default = nil)
  if valid_774186 != nil:
    section.add "X-Amz-Security-Token", valid_774186
  var valid_774187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774187 = validateParameter(valid_774187, JString, required = false,
                                 default = nil)
  if valid_774187 != nil:
    section.add "X-Amz-Content-Sha256", valid_774187
  var valid_774188 = header.getOrDefault("X-Amz-Algorithm")
  valid_774188 = validateParameter(valid_774188, JString, required = false,
                                 default = nil)
  if valid_774188 != nil:
    section.add "X-Amz-Algorithm", valid_774188
  var valid_774189 = header.getOrDefault("X-Amz-Signature")
  valid_774189 = validateParameter(valid_774189, JString, required = false,
                                 default = nil)
  if valid_774189 != nil:
    section.add "X-Amz-Signature", valid_774189
  var valid_774190 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774190 = validateParameter(valid_774190, JString, required = false,
                                 default = nil)
  if valid_774190 != nil:
    section.add "X-Amz-SignedHeaders", valid_774190
  var valid_774191 = header.getOrDefault("X-Amz-Credential")
  valid_774191 = validateParameter(valid_774191, JString, required = false,
                                 default = nil)
  if valid_774191 != nil:
    section.add "X-Amz-Credential", valid_774191
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774192: Call_GetDeleteLoginProfile_774179; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_774192.validator(path, query, header, formData, body)
  let scheme = call_774192.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774192.url(scheme.get, call_774192.host, call_774192.base,
                         call_774192.route, valid.getOrDefault("path"))
  result = hook(call_774192, url, valid)

proc call*(call_774193: Call_GetDeleteLoginProfile_774179; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774194 = newJObject()
  add(query_774194, "UserName", newJString(UserName))
  add(query_774194, "Action", newJString(Action))
  add(query_774194, "Version", newJString(Version))
  result = call_774193.call(nil, query_774194, nil, nil, nil)

var getDeleteLoginProfile* = Call_GetDeleteLoginProfile_774179(
    name: "getDeleteLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_GetDeleteLoginProfile_774180, base: "/",
    url: url_GetDeleteLoginProfile_774181, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOpenIDConnectProvider_774228 = ref object of OpenApiRestCall_772597
proc url_PostDeleteOpenIDConnectProvider_774230(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteOpenIDConnectProvider_774229(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774231 = query.getOrDefault("Action")
  valid_774231 = validateParameter(valid_774231, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_774231 != nil:
    section.add "Action", valid_774231
  var valid_774232 = query.getOrDefault("Version")
  valid_774232 = validateParameter(valid_774232, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774232 != nil:
    section.add "Version", valid_774232
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774233 = header.getOrDefault("X-Amz-Date")
  valid_774233 = validateParameter(valid_774233, JString, required = false,
                                 default = nil)
  if valid_774233 != nil:
    section.add "X-Amz-Date", valid_774233
  var valid_774234 = header.getOrDefault("X-Amz-Security-Token")
  valid_774234 = validateParameter(valid_774234, JString, required = false,
                                 default = nil)
  if valid_774234 != nil:
    section.add "X-Amz-Security-Token", valid_774234
  var valid_774235 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774235 = validateParameter(valid_774235, JString, required = false,
                                 default = nil)
  if valid_774235 != nil:
    section.add "X-Amz-Content-Sha256", valid_774235
  var valid_774236 = header.getOrDefault("X-Amz-Algorithm")
  valid_774236 = validateParameter(valid_774236, JString, required = false,
                                 default = nil)
  if valid_774236 != nil:
    section.add "X-Amz-Algorithm", valid_774236
  var valid_774237 = header.getOrDefault("X-Amz-Signature")
  valid_774237 = validateParameter(valid_774237, JString, required = false,
                                 default = nil)
  if valid_774237 != nil:
    section.add "X-Amz-Signature", valid_774237
  var valid_774238 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774238 = validateParameter(valid_774238, JString, required = false,
                                 default = nil)
  if valid_774238 != nil:
    section.add "X-Amz-SignedHeaders", valid_774238
  var valid_774239 = header.getOrDefault("X-Amz-Credential")
  valid_774239 = validateParameter(valid_774239, JString, required = false,
                                 default = nil)
  if valid_774239 != nil:
    section.add "X-Amz-Credential", valid_774239
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_774240 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_774240 = validateParameter(valid_774240, JString, required = true,
                                 default = nil)
  if valid_774240 != nil:
    section.add "OpenIDConnectProviderArn", valid_774240
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774241: Call_PostDeleteOpenIDConnectProvider_774228;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_774241.validator(path, query, header, formData, body)
  let scheme = call_774241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774241.url(scheme.get, call_774241.host, call_774241.base,
                         call_774241.route, valid.getOrDefault("path"))
  result = hook(call_774241, url, valid)

proc call*(call_774242: Call_PostDeleteOpenIDConnectProvider_774228;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774243 = newJObject()
  var formData_774244 = newJObject()
  add(formData_774244, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_774243, "Action", newJString(Action))
  add(query_774243, "Version", newJString(Version))
  result = call_774242.call(nil, query_774243, nil, formData_774244, nil)

var postDeleteOpenIDConnectProvider* = Call_PostDeleteOpenIDConnectProvider_774228(
    name: "postDeleteOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_PostDeleteOpenIDConnectProvider_774229, base: "/",
    url: url_PostDeleteOpenIDConnectProvider_774230,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOpenIDConnectProvider_774212 = ref object of OpenApiRestCall_772597
proc url_GetDeleteOpenIDConnectProvider_774214(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteOpenIDConnectProvider_774213(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_774215 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_774215 = validateParameter(valid_774215, JString, required = true,
                                 default = nil)
  if valid_774215 != nil:
    section.add "OpenIDConnectProviderArn", valid_774215
  var valid_774216 = query.getOrDefault("Action")
  valid_774216 = validateParameter(valid_774216, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_774216 != nil:
    section.add "Action", valid_774216
  var valid_774217 = query.getOrDefault("Version")
  valid_774217 = validateParameter(valid_774217, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774217 != nil:
    section.add "Version", valid_774217
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774218 = header.getOrDefault("X-Amz-Date")
  valid_774218 = validateParameter(valid_774218, JString, required = false,
                                 default = nil)
  if valid_774218 != nil:
    section.add "X-Amz-Date", valid_774218
  var valid_774219 = header.getOrDefault("X-Amz-Security-Token")
  valid_774219 = validateParameter(valid_774219, JString, required = false,
                                 default = nil)
  if valid_774219 != nil:
    section.add "X-Amz-Security-Token", valid_774219
  var valid_774220 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774220 = validateParameter(valid_774220, JString, required = false,
                                 default = nil)
  if valid_774220 != nil:
    section.add "X-Amz-Content-Sha256", valid_774220
  var valid_774221 = header.getOrDefault("X-Amz-Algorithm")
  valid_774221 = validateParameter(valid_774221, JString, required = false,
                                 default = nil)
  if valid_774221 != nil:
    section.add "X-Amz-Algorithm", valid_774221
  var valid_774222 = header.getOrDefault("X-Amz-Signature")
  valid_774222 = validateParameter(valid_774222, JString, required = false,
                                 default = nil)
  if valid_774222 != nil:
    section.add "X-Amz-Signature", valid_774222
  var valid_774223 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774223 = validateParameter(valid_774223, JString, required = false,
                                 default = nil)
  if valid_774223 != nil:
    section.add "X-Amz-SignedHeaders", valid_774223
  var valid_774224 = header.getOrDefault("X-Amz-Credential")
  valid_774224 = validateParameter(valid_774224, JString, required = false,
                                 default = nil)
  if valid_774224 != nil:
    section.add "X-Amz-Credential", valid_774224
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774225: Call_GetDeleteOpenIDConnectProvider_774212; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_774225.validator(path, query, header, formData, body)
  let scheme = call_774225.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774225.url(scheme.get, call_774225.host, call_774225.base,
                         call_774225.route, valid.getOrDefault("path"))
  result = hook(call_774225, url, valid)

proc call*(call_774226: Call_GetDeleteOpenIDConnectProvider_774212;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774227 = newJObject()
  add(query_774227, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_774227, "Action", newJString(Action))
  add(query_774227, "Version", newJString(Version))
  result = call_774226.call(nil, query_774227, nil, nil, nil)

var getDeleteOpenIDConnectProvider* = Call_GetDeleteOpenIDConnectProvider_774212(
    name: "getDeleteOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_GetDeleteOpenIDConnectProvider_774213, base: "/",
    url: url_GetDeleteOpenIDConnectProvider_774214,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_774261 = ref object of OpenApiRestCall_772597
proc url_PostDeletePolicy_774263(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeletePolicy_774262(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774264 = query.getOrDefault("Action")
  valid_774264 = validateParameter(valid_774264, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_774264 != nil:
    section.add "Action", valid_774264
  var valid_774265 = query.getOrDefault("Version")
  valid_774265 = validateParameter(valid_774265, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774265 != nil:
    section.add "Version", valid_774265
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774266 = header.getOrDefault("X-Amz-Date")
  valid_774266 = validateParameter(valid_774266, JString, required = false,
                                 default = nil)
  if valid_774266 != nil:
    section.add "X-Amz-Date", valid_774266
  var valid_774267 = header.getOrDefault("X-Amz-Security-Token")
  valid_774267 = validateParameter(valid_774267, JString, required = false,
                                 default = nil)
  if valid_774267 != nil:
    section.add "X-Amz-Security-Token", valid_774267
  var valid_774268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774268 = validateParameter(valid_774268, JString, required = false,
                                 default = nil)
  if valid_774268 != nil:
    section.add "X-Amz-Content-Sha256", valid_774268
  var valid_774269 = header.getOrDefault("X-Amz-Algorithm")
  valid_774269 = validateParameter(valid_774269, JString, required = false,
                                 default = nil)
  if valid_774269 != nil:
    section.add "X-Amz-Algorithm", valid_774269
  var valid_774270 = header.getOrDefault("X-Amz-Signature")
  valid_774270 = validateParameter(valid_774270, JString, required = false,
                                 default = nil)
  if valid_774270 != nil:
    section.add "X-Amz-Signature", valid_774270
  var valid_774271 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774271 = validateParameter(valid_774271, JString, required = false,
                                 default = nil)
  if valid_774271 != nil:
    section.add "X-Amz-SignedHeaders", valid_774271
  var valid_774272 = header.getOrDefault("X-Amz-Credential")
  valid_774272 = validateParameter(valid_774272, JString, required = false,
                                 default = nil)
  if valid_774272 != nil:
    section.add "X-Amz-Credential", valid_774272
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_774273 = formData.getOrDefault("PolicyArn")
  valid_774273 = validateParameter(valid_774273, JString, required = true,
                                 default = nil)
  if valid_774273 != nil:
    section.add "PolicyArn", valid_774273
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774274: Call_PostDeletePolicy_774261; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774274.validator(path, query, header, formData, body)
  let scheme = call_774274.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774274.url(scheme.get, call_774274.host, call_774274.base,
                         call_774274.route, valid.getOrDefault("path"))
  result = hook(call_774274, url, valid)

proc call*(call_774275: Call_PostDeletePolicy_774261; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774276 = newJObject()
  var formData_774277 = newJObject()
  add(formData_774277, "PolicyArn", newJString(PolicyArn))
  add(query_774276, "Action", newJString(Action))
  add(query_774276, "Version", newJString(Version))
  result = call_774275.call(nil, query_774276, nil, formData_774277, nil)

var postDeletePolicy* = Call_PostDeletePolicy_774261(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_774262,
    base: "/", url: url_PostDeletePolicy_774263,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_774245 = ref object of OpenApiRestCall_772597
proc url_GetDeletePolicy_774247(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeletePolicy_774246(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_774248 = query.getOrDefault("PolicyArn")
  valid_774248 = validateParameter(valid_774248, JString, required = true,
                                 default = nil)
  if valid_774248 != nil:
    section.add "PolicyArn", valid_774248
  var valid_774249 = query.getOrDefault("Action")
  valid_774249 = validateParameter(valid_774249, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_774249 != nil:
    section.add "Action", valid_774249
  var valid_774250 = query.getOrDefault("Version")
  valid_774250 = validateParameter(valid_774250, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774250 != nil:
    section.add "Version", valid_774250
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774251 = header.getOrDefault("X-Amz-Date")
  valid_774251 = validateParameter(valid_774251, JString, required = false,
                                 default = nil)
  if valid_774251 != nil:
    section.add "X-Amz-Date", valid_774251
  var valid_774252 = header.getOrDefault("X-Amz-Security-Token")
  valid_774252 = validateParameter(valid_774252, JString, required = false,
                                 default = nil)
  if valid_774252 != nil:
    section.add "X-Amz-Security-Token", valid_774252
  var valid_774253 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774253 = validateParameter(valid_774253, JString, required = false,
                                 default = nil)
  if valid_774253 != nil:
    section.add "X-Amz-Content-Sha256", valid_774253
  var valid_774254 = header.getOrDefault("X-Amz-Algorithm")
  valid_774254 = validateParameter(valid_774254, JString, required = false,
                                 default = nil)
  if valid_774254 != nil:
    section.add "X-Amz-Algorithm", valid_774254
  var valid_774255 = header.getOrDefault("X-Amz-Signature")
  valid_774255 = validateParameter(valid_774255, JString, required = false,
                                 default = nil)
  if valid_774255 != nil:
    section.add "X-Amz-Signature", valid_774255
  var valid_774256 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774256 = validateParameter(valid_774256, JString, required = false,
                                 default = nil)
  if valid_774256 != nil:
    section.add "X-Amz-SignedHeaders", valid_774256
  var valid_774257 = header.getOrDefault("X-Amz-Credential")
  valid_774257 = validateParameter(valid_774257, JString, required = false,
                                 default = nil)
  if valid_774257 != nil:
    section.add "X-Amz-Credential", valid_774257
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774258: Call_GetDeletePolicy_774245; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774258.validator(path, query, header, formData, body)
  let scheme = call_774258.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774258.url(scheme.get, call_774258.host, call_774258.base,
                         call_774258.route, valid.getOrDefault("path"))
  result = hook(call_774258, url, valid)

proc call*(call_774259: Call_GetDeletePolicy_774245; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774260 = newJObject()
  add(query_774260, "PolicyArn", newJString(PolicyArn))
  add(query_774260, "Action", newJString(Action))
  add(query_774260, "Version", newJString(Version))
  result = call_774259.call(nil, query_774260, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_774245(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_774246,
    base: "/", url: url_GetDeletePolicy_774247, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicyVersion_774295 = ref object of OpenApiRestCall_772597
proc url_PostDeletePolicyVersion_774297(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeletePolicyVersion_774296(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774298 = query.getOrDefault("Action")
  valid_774298 = validateParameter(valid_774298, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_774298 != nil:
    section.add "Action", valid_774298
  var valid_774299 = query.getOrDefault("Version")
  valid_774299 = validateParameter(valid_774299, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774299 != nil:
    section.add "Version", valid_774299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774300 = header.getOrDefault("X-Amz-Date")
  valid_774300 = validateParameter(valid_774300, JString, required = false,
                                 default = nil)
  if valid_774300 != nil:
    section.add "X-Amz-Date", valid_774300
  var valid_774301 = header.getOrDefault("X-Amz-Security-Token")
  valid_774301 = validateParameter(valid_774301, JString, required = false,
                                 default = nil)
  if valid_774301 != nil:
    section.add "X-Amz-Security-Token", valid_774301
  var valid_774302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774302 = validateParameter(valid_774302, JString, required = false,
                                 default = nil)
  if valid_774302 != nil:
    section.add "X-Amz-Content-Sha256", valid_774302
  var valid_774303 = header.getOrDefault("X-Amz-Algorithm")
  valid_774303 = validateParameter(valid_774303, JString, required = false,
                                 default = nil)
  if valid_774303 != nil:
    section.add "X-Amz-Algorithm", valid_774303
  var valid_774304 = header.getOrDefault("X-Amz-Signature")
  valid_774304 = validateParameter(valid_774304, JString, required = false,
                                 default = nil)
  if valid_774304 != nil:
    section.add "X-Amz-Signature", valid_774304
  var valid_774305 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774305 = validateParameter(valid_774305, JString, required = false,
                                 default = nil)
  if valid_774305 != nil:
    section.add "X-Amz-SignedHeaders", valid_774305
  var valid_774306 = header.getOrDefault("X-Amz-Credential")
  valid_774306 = validateParameter(valid_774306, JString, required = false,
                                 default = nil)
  if valid_774306 != nil:
    section.add "X-Amz-Credential", valid_774306
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_774307 = formData.getOrDefault("PolicyArn")
  valid_774307 = validateParameter(valid_774307, JString, required = true,
                                 default = nil)
  if valid_774307 != nil:
    section.add "PolicyArn", valid_774307
  var valid_774308 = formData.getOrDefault("VersionId")
  valid_774308 = validateParameter(valid_774308, JString, required = true,
                                 default = nil)
  if valid_774308 != nil:
    section.add "VersionId", valid_774308
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774309: Call_PostDeletePolicyVersion_774295; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774309.validator(path, query, header, formData, body)
  let scheme = call_774309.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774309.url(scheme.get, call_774309.host, call_774309.base,
                         call_774309.route, valid.getOrDefault("path"))
  result = hook(call_774309, url, valid)

proc call*(call_774310: Call_PostDeletePolicyVersion_774295; PolicyArn: string;
          VersionId: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  var query_774311 = newJObject()
  var formData_774312 = newJObject()
  add(formData_774312, "PolicyArn", newJString(PolicyArn))
  add(query_774311, "Action", newJString(Action))
  add(query_774311, "Version", newJString(Version))
  add(formData_774312, "VersionId", newJString(VersionId))
  result = call_774310.call(nil, query_774311, nil, formData_774312, nil)

var postDeletePolicyVersion* = Call_PostDeletePolicyVersion_774295(
    name: "postDeletePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_PostDeletePolicyVersion_774296, base: "/",
    url: url_PostDeletePolicyVersion_774297, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicyVersion_774278 = ref object of OpenApiRestCall_772597
proc url_GetDeletePolicyVersion_774280(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeletePolicyVersion_774279(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_774281 = query.getOrDefault("PolicyArn")
  valid_774281 = validateParameter(valid_774281, JString, required = true,
                                 default = nil)
  if valid_774281 != nil:
    section.add "PolicyArn", valid_774281
  var valid_774282 = query.getOrDefault("VersionId")
  valid_774282 = validateParameter(valid_774282, JString, required = true,
                                 default = nil)
  if valid_774282 != nil:
    section.add "VersionId", valid_774282
  var valid_774283 = query.getOrDefault("Action")
  valid_774283 = validateParameter(valid_774283, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_774283 != nil:
    section.add "Action", valid_774283
  var valid_774284 = query.getOrDefault("Version")
  valid_774284 = validateParameter(valid_774284, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774284 != nil:
    section.add "Version", valid_774284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774285 = header.getOrDefault("X-Amz-Date")
  valid_774285 = validateParameter(valid_774285, JString, required = false,
                                 default = nil)
  if valid_774285 != nil:
    section.add "X-Amz-Date", valid_774285
  var valid_774286 = header.getOrDefault("X-Amz-Security-Token")
  valid_774286 = validateParameter(valid_774286, JString, required = false,
                                 default = nil)
  if valid_774286 != nil:
    section.add "X-Amz-Security-Token", valid_774286
  var valid_774287 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774287 = validateParameter(valid_774287, JString, required = false,
                                 default = nil)
  if valid_774287 != nil:
    section.add "X-Amz-Content-Sha256", valid_774287
  var valid_774288 = header.getOrDefault("X-Amz-Algorithm")
  valid_774288 = validateParameter(valid_774288, JString, required = false,
                                 default = nil)
  if valid_774288 != nil:
    section.add "X-Amz-Algorithm", valid_774288
  var valid_774289 = header.getOrDefault("X-Amz-Signature")
  valid_774289 = validateParameter(valid_774289, JString, required = false,
                                 default = nil)
  if valid_774289 != nil:
    section.add "X-Amz-Signature", valid_774289
  var valid_774290 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774290 = validateParameter(valid_774290, JString, required = false,
                                 default = nil)
  if valid_774290 != nil:
    section.add "X-Amz-SignedHeaders", valid_774290
  var valid_774291 = header.getOrDefault("X-Amz-Credential")
  valid_774291 = validateParameter(valid_774291, JString, required = false,
                                 default = nil)
  if valid_774291 != nil:
    section.add "X-Amz-Credential", valid_774291
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774292: Call_GetDeletePolicyVersion_774278; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774292.validator(path, query, header, formData, body)
  let scheme = call_774292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774292.url(scheme.get, call_774292.host, call_774292.base,
                         call_774292.route, valid.getOrDefault("path"))
  result = hook(call_774292, url, valid)

proc call*(call_774293: Call_GetDeletePolicyVersion_774278; PolicyArn: string;
          VersionId: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774294 = newJObject()
  add(query_774294, "PolicyArn", newJString(PolicyArn))
  add(query_774294, "VersionId", newJString(VersionId))
  add(query_774294, "Action", newJString(Action))
  add(query_774294, "Version", newJString(Version))
  result = call_774293.call(nil, query_774294, nil, nil, nil)

var getDeletePolicyVersion* = Call_GetDeletePolicyVersion_774278(
    name: "getDeletePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_GetDeletePolicyVersion_774279, base: "/",
    url: url_GetDeletePolicyVersion_774280, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRole_774329 = ref object of OpenApiRestCall_772597
proc url_PostDeleteRole_774331(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteRole_774330(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774332 = query.getOrDefault("Action")
  valid_774332 = validateParameter(valid_774332, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_774332 != nil:
    section.add "Action", valid_774332
  var valid_774333 = query.getOrDefault("Version")
  valid_774333 = validateParameter(valid_774333, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774333 != nil:
    section.add "Version", valid_774333
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774334 = header.getOrDefault("X-Amz-Date")
  valid_774334 = validateParameter(valid_774334, JString, required = false,
                                 default = nil)
  if valid_774334 != nil:
    section.add "X-Amz-Date", valid_774334
  var valid_774335 = header.getOrDefault("X-Amz-Security-Token")
  valid_774335 = validateParameter(valid_774335, JString, required = false,
                                 default = nil)
  if valid_774335 != nil:
    section.add "X-Amz-Security-Token", valid_774335
  var valid_774336 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774336 = validateParameter(valid_774336, JString, required = false,
                                 default = nil)
  if valid_774336 != nil:
    section.add "X-Amz-Content-Sha256", valid_774336
  var valid_774337 = header.getOrDefault("X-Amz-Algorithm")
  valid_774337 = validateParameter(valid_774337, JString, required = false,
                                 default = nil)
  if valid_774337 != nil:
    section.add "X-Amz-Algorithm", valid_774337
  var valid_774338 = header.getOrDefault("X-Amz-Signature")
  valid_774338 = validateParameter(valid_774338, JString, required = false,
                                 default = nil)
  if valid_774338 != nil:
    section.add "X-Amz-Signature", valid_774338
  var valid_774339 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774339 = validateParameter(valid_774339, JString, required = false,
                                 default = nil)
  if valid_774339 != nil:
    section.add "X-Amz-SignedHeaders", valid_774339
  var valid_774340 = header.getOrDefault("X-Amz-Credential")
  valid_774340 = validateParameter(valid_774340, JString, required = false,
                                 default = nil)
  if valid_774340 != nil:
    section.add "X-Amz-Credential", valid_774340
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_774341 = formData.getOrDefault("RoleName")
  valid_774341 = validateParameter(valid_774341, JString, required = true,
                                 default = nil)
  if valid_774341 != nil:
    section.add "RoleName", valid_774341
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774342: Call_PostDeleteRole_774329; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_774342.validator(path, query, header, formData, body)
  let scheme = call_774342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774342.url(scheme.get, call_774342.host, call_774342.base,
                         call_774342.route, valid.getOrDefault("path"))
  result = hook(call_774342, url, valid)

proc call*(call_774343: Call_PostDeleteRole_774329; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774344 = newJObject()
  var formData_774345 = newJObject()
  add(formData_774345, "RoleName", newJString(RoleName))
  add(query_774344, "Action", newJString(Action))
  add(query_774344, "Version", newJString(Version))
  result = call_774343.call(nil, query_774344, nil, formData_774345, nil)

var postDeleteRole* = Call_PostDeleteRole_774329(name: "postDeleteRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_PostDeleteRole_774330,
    base: "/", url: url_PostDeleteRole_774331, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRole_774313 = ref object of OpenApiRestCall_772597
proc url_GetDeleteRole_774315(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteRole_774314(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774316 = query.getOrDefault("Action")
  valid_774316 = validateParameter(valid_774316, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_774316 != nil:
    section.add "Action", valid_774316
  var valid_774317 = query.getOrDefault("RoleName")
  valid_774317 = validateParameter(valid_774317, JString, required = true,
                                 default = nil)
  if valid_774317 != nil:
    section.add "RoleName", valid_774317
  var valid_774318 = query.getOrDefault("Version")
  valid_774318 = validateParameter(valid_774318, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774318 != nil:
    section.add "Version", valid_774318
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774319 = header.getOrDefault("X-Amz-Date")
  valid_774319 = validateParameter(valid_774319, JString, required = false,
                                 default = nil)
  if valid_774319 != nil:
    section.add "X-Amz-Date", valid_774319
  var valid_774320 = header.getOrDefault("X-Amz-Security-Token")
  valid_774320 = validateParameter(valid_774320, JString, required = false,
                                 default = nil)
  if valid_774320 != nil:
    section.add "X-Amz-Security-Token", valid_774320
  var valid_774321 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774321 = validateParameter(valid_774321, JString, required = false,
                                 default = nil)
  if valid_774321 != nil:
    section.add "X-Amz-Content-Sha256", valid_774321
  var valid_774322 = header.getOrDefault("X-Amz-Algorithm")
  valid_774322 = validateParameter(valid_774322, JString, required = false,
                                 default = nil)
  if valid_774322 != nil:
    section.add "X-Amz-Algorithm", valid_774322
  var valid_774323 = header.getOrDefault("X-Amz-Signature")
  valid_774323 = validateParameter(valid_774323, JString, required = false,
                                 default = nil)
  if valid_774323 != nil:
    section.add "X-Amz-Signature", valid_774323
  var valid_774324 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774324 = validateParameter(valid_774324, JString, required = false,
                                 default = nil)
  if valid_774324 != nil:
    section.add "X-Amz-SignedHeaders", valid_774324
  var valid_774325 = header.getOrDefault("X-Amz-Credential")
  valid_774325 = validateParameter(valid_774325, JString, required = false,
                                 default = nil)
  if valid_774325 != nil:
    section.add "X-Amz-Credential", valid_774325
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774326: Call_GetDeleteRole_774313; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_774326.validator(path, query, header, formData, body)
  let scheme = call_774326.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774326.url(scheme.get, call_774326.host, call_774326.base,
                         call_774326.route, valid.getOrDefault("path"))
  result = hook(call_774326, url, valid)

proc call*(call_774327: Call_GetDeleteRole_774313; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_774328 = newJObject()
  add(query_774328, "Action", newJString(Action))
  add(query_774328, "RoleName", newJString(RoleName))
  add(query_774328, "Version", newJString(Version))
  result = call_774327.call(nil, query_774328, nil, nil, nil)

var getDeleteRole* = Call_GetDeleteRole_774313(name: "getDeleteRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_GetDeleteRole_774314,
    base: "/", url: url_GetDeleteRole_774315, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePermissionsBoundary_774362 = ref object of OpenApiRestCall_772597
proc url_PostDeleteRolePermissionsBoundary_774364(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteRolePermissionsBoundary_774363(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774365 = query.getOrDefault("Action")
  valid_774365 = validateParameter(valid_774365, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_774365 != nil:
    section.add "Action", valid_774365
  var valid_774366 = query.getOrDefault("Version")
  valid_774366 = validateParameter(valid_774366, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774366 != nil:
    section.add "Version", valid_774366
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774367 = header.getOrDefault("X-Amz-Date")
  valid_774367 = validateParameter(valid_774367, JString, required = false,
                                 default = nil)
  if valid_774367 != nil:
    section.add "X-Amz-Date", valid_774367
  var valid_774368 = header.getOrDefault("X-Amz-Security-Token")
  valid_774368 = validateParameter(valid_774368, JString, required = false,
                                 default = nil)
  if valid_774368 != nil:
    section.add "X-Amz-Security-Token", valid_774368
  var valid_774369 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774369 = validateParameter(valid_774369, JString, required = false,
                                 default = nil)
  if valid_774369 != nil:
    section.add "X-Amz-Content-Sha256", valid_774369
  var valid_774370 = header.getOrDefault("X-Amz-Algorithm")
  valid_774370 = validateParameter(valid_774370, JString, required = false,
                                 default = nil)
  if valid_774370 != nil:
    section.add "X-Amz-Algorithm", valid_774370
  var valid_774371 = header.getOrDefault("X-Amz-Signature")
  valid_774371 = validateParameter(valid_774371, JString, required = false,
                                 default = nil)
  if valid_774371 != nil:
    section.add "X-Amz-Signature", valid_774371
  var valid_774372 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774372 = validateParameter(valid_774372, JString, required = false,
                                 default = nil)
  if valid_774372 != nil:
    section.add "X-Amz-SignedHeaders", valid_774372
  var valid_774373 = header.getOrDefault("X-Amz-Credential")
  valid_774373 = validateParameter(valid_774373, JString, required = false,
                                 default = nil)
  if valid_774373 != nil:
    section.add "X-Amz-Credential", valid_774373
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_774374 = formData.getOrDefault("RoleName")
  valid_774374 = validateParameter(valid_774374, JString, required = true,
                                 default = nil)
  if valid_774374 != nil:
    section.add "RoleName", valid_774374
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774375: Call_PostDeleteRolePermissionsBoundary_774362;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_774375.validator(path, query, header, formData, body)
  let scheme = call_774375.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774375.url(scheme.get, call_774375.host, call_774375.base,
                         call_774375.route, valid.getOrDefault("path"))
  result = hook(call_774375, url, valid)

proc call*(call_774376: Call_PostDeleteRolePermissionsBoundary_774362;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774377 = newJObject()
  var formData_774378 = newJObject()
  add(formData_774378, "RoleName", newJString(RoleName))
  add(query_774377, "Action", newJString(Action))
  add(query_774377, "Version", newJString(Version))
  result = call_774376.call(nil, query_774377, nil, formData_774378, nil)

var postDeleteRolePermissionsBoundary* = Call_PostDeleteRolePermissionsBoundary_774362(
    name: "postDeleteRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_PostDeleteRolePermissionsBoundary_774363, base: "/",
    url: url_PostDeleteRolePermissionsBoundary_774364,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePermissionsBoundary_774346 = ref object of OpenApiRestCall_772597
proc url_GetDeleteRolePermissionsBoundary_774348(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteRolePermissionsBoundary_774347(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774349 = query.getOrDefault("Action")
  valid_774349 = validateParameter(valid_774349, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_774349 != nil:
    section.add "Action", valid_774349
  var valid_774350 = query.getOrDefault("RoleName")
  valid_774350 = validateParameter(valid_774350, JString, required = true,
                                 default = nil)
  if valid_774350 != nil:
    section.add "RoleName", valid_774350
  var valid_774351 = query.getOrDefault("Version")
  valid_774351 = validateParameter(valid_774351, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774351 != nil:
    section.add "Version", valid_774351
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774352 = header.getOrDefault("X-Amz-Date")
  valid_774352 = validateParameter(valid_774352, JString, required = false,
                                 default = nil)
  if valid_774352 != nil:
    section.add "X-Amz-Date", valid_774352
  var valid_774353 = header.getOrDefault("X-Amz-Security-Token")
  valid_774353 = validateParameter(valid_774353, JString, required = false,
                                 default = nil)
  if valid_774353 != nil:
    section.add "X-Amz-Security-Token", valid_774353
  var valid_774354 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774354 = validateParameter(valid_774354, JString, required = false,
                                 default = nil)
  if valid_774354 != nil:
    section.add "X-Amz-Content-Sha256", valid_774354
  var valid_774355 = header.getOrDefault("X-Amz-Algorithm")
  valid_774355 = validateParameter(valid_774355, JString, required = false,
                                 default = nil)
  if valid_774355 != nil:
    section.add "X-Amz-Algorithm", valid_774355
  var valid_774356 = header.getOrDefault("X-Amz-Signature")
  valid_774356 = validateParameter(valid_774356, JString, required = false,
                                 default = nil)
  if valid_774356 != nil:
    section.add "X-Amz-Signature", valid_774356
  var valid_774357 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774357 = validateParameter(valid_774357, JString, required = false,
                                 default = nil)
  if valid_774357 != nil:
    section.add "X-Amz-SignedHeaders", valid_774357
  var valid_774358 = header.getOrDefault("X-Amz-Credential")
  valid_774358 = validateParameter(valid_774358, JString, required = false,
                                 default = nil)
  if valid_774358 != nil:
    section.add "X-Amz-Credential", valid_774358
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774359: Call_GetDeleteRolePermissionsBoundary_774346;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_774359.validator(path, query, header, formData, body)
  let scheme = call_774359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774359.url(scheme.get, call_774359.host, call_774359.base,
                         call_774359.route, valid.getOrDefault("path"))
  result = hook(call_774359, url, valid)

proc call*(call_774360: Call_GetDeleteRolePermissionsBoundary_774346;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Version: string (required)
  var query_774361 = newJObject()
  add(query_774361, "Action", newJString(Action))
  add(query_774361, "RoleName", newJString(RoleName))
  add(query_774361, "Version", newJString(Version))
  result = call_774360.call(nil, query_774361, nil, nil, nil)

var getDeleteRolePermissionsBoundary* = Call_GetDeleteRolePermissionsBoundary_774346(
    name: "getDeleteRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_GetDeleteRolePermissionsBoundary_774347, base: "/",
    url: url_GetDeleteRolePermissionsBoundary_774348,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePolicy_774396 = ref object of OpenApiRestCall_772597
proc url_PostDeleteRolePolicy_774398(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteRolePolicy_774397(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774399 = query.getOrDefault("Action")
  valid_774399 = validateParameter(valid_774399, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_774399 != nil:
    section.add "Action", valid_774399
  var valid_774400 = query.getOrDefault("Version")
  valid_774400 = validateParameter(valid_774400, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774400 != nil:
    section.add "Version", valid_774400
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774401 = header.getOrDefault("X-Amz-Date")
  valid_774401 = validateParameter(valid_774401, JString, required = false,
                                 default = nil)
  if valid_774401 != nil:
    section.add "X-Amz-Date", valid_774401
  var valid_774402 = header.getOrDefault("X-Amz-Security-Token")
  valid_774402 = validateParameter(valid_774402, JString, required = false,
                                 default = nil)
  if valid_774402 != nil:
    section.add "X-Amz-Security-Token", valid_774402
  var valid_774403 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774403 = validateParameter(valid_774403, JString, required = false,
                                 default = nil)
  if valid_774403 != nil:
    section.add "X-Amz-Content-Sha256", valid_774403
  var valid_774404 = header.getOrDefault("X-Amz-Algorithm")
  valid_774404 = validateParameter(valid_774404, JString, required = false,
                                 default = nil)
  if valid_774404 != nil:
    section.add "X-Amz-Algorithm", valid_774404
  var valid_774405 = header.getOrDefault("X-Amz-Signature")
  valid_774405 = validateParameter(valid_774405, JString, required = false,
                                 default = nil)
  if valid_774405 != nil:
    section.add "X-Amz-Signature", valid_774405
  var valid_774406 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774406 = validateParameter(valid_774406, JString, required = false,
                                 default = nil)
  if valid_774406 != nil:
    section.add "X-Amz-SignedHeaders", valid_774406
  var valid_774407 = header.getOrDefault("X-Amz-Credential")
  valid_774407 = validateParameter(valid_774407, JString, required = false,
                                 default = nil)
  if valid_774407 != nil:
    section.add "X-Amz-Credential", valid_774407
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_774408 = formData.getOrDefault("PolicyName")
  valid_774408 = validateParameter(valid_774408, JString, required = true,
                                 default = nil)
  if valid_774408 != nil:
    section.add "PolicyName", valid_774408
  var valid_774409 = formData.getOrDefault("RoleName")
  valid_774409 = validateParameter(valid_774409, JString, required = true,
                                 default = nil)
  if valid_774409 != nil:
    section.add "RoleName", valid_774409
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774410: Call_PostDeleteRolePolicy_774396; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774410.validator(path, query, header, formData, body)
  let scheme = call_774410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774410.url(scheme.get, call_774410.host, call_774410.base,
                         call_774410.route, valid.getOrDefault("path"))
  result = hook(call_774410, url, valid)

proc call*(call_774411: Call_PostDeleteRolePolicy_774396; PolicyName: string;
          RoleName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774412 = newJObject()
  var formData_774413 = newJObject()
  add(formData_774413, "PolicyName", newJString(PolicyName))
  add(formData_774413, "RoleName", newJString(RoleName))
  add(query_774412, "Action", newJString(Action))
  add(query_774412, "Version", newJString(Version))
  result = call_774411.call(nil, query_774412, nil, formData_774413, nil)

var postDeleteRolePolicy* = Call_PostDeleteRolePolicy_774396(
    name: "postDeleteRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_PostDeleteRolePolicy_774397, base: "/",
    url: url_PostDeleteRolePolicy_774398, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePolicy_774379 = ref object of OpenApiRestCall_772597
proc url_GetDeleteRolePolicy_774381(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteRolePolicy_774380(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774382 = query.getOrDefault("Action")
  valid_774382 = validateParameter(valid_774382, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_774382 != nil:
    section.add "Action", valid_774382
  var valid_774383 = query.getOrDefault("RoleName")
  valid_774383 = validateParameter(valid_774383, JString, required = true,
                                 default = nil)
  if valid_774383 != nil:
    section.add "RoleName", valid_774383
  var valid_774384 = query.getOrDefault("Version")
  valid_774384 = validateParameter(valid_774384, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774384 != nil:
    section.add "Version", valid_774384
  var valid_774385 = query.getOrDefault("PolicyName")
  valid_774385 = validateParameter(valid_774385, JString, required = true,
                                 default = nil)
  if valid_774385 != nil:
    section.add "PolicyName", valid_774385
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774386 = header.getOrDefault("X-Amz-Date")
  valid_774386 = validateParameter(valid_774386, JString, required = false,
                                 default = nil)
  if valid_774386 != nil:
    section.add "X-Amz-Date", valid_774386
  var valid_774387 = header.getOrDefault("X-Amz-Security-Token")
  valid_774387 = validateParameter(valid_774387, JString, required = false,
                                 default = nil)
  if valid_774387 != nil:
    section.add "X-Amz-Security-Token", valid_774387
  var valid_774388 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774388 = validateParameter(valid_774388, JString, required = false,
                                 default = nil)
  if valid_774388 != nil:
    section.add "X-Amz-Content-Sha256", valid_774388
  var valid_774389 = header.getOrDefault("X-Amz-Algorithm")
  valid_774389 = validateParameter(valid_774389, JString, required = false,
                                 default = nil)
  if valid_774389 != nil:
    section.add "X-Amz-Algorithm", valid_774389
  var valid_774390 = header.getOrDefault("X-Amz-Signature")
  valid_774390 = validateParameter(valid_774390, JString, required = false,
                                 default = nil)
  if valid_774390 != nil:
    section.add "X-Amz-Signature", valid_774390
  var valid_774391 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774391 = validateParameter(valid_774391, JString, required = false,
                                 default = nil)
  if valid_774391 != nil:
    section.add "X-Amz-SignedHeaders", valid_774391
  var valid_774392 = header.getOrDefault("X-Amz-Credential")
  valid_774392 = validateParameter(valid_774392, JString, required = false,
                                 default = nil)
  if valid_774392 != nil:
    section.add "X-Amz-Credential", valid_774392
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774393: Call_GetDeleteRolePolicy_774379; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774393.validator(path, query, header, formData, body)
  let scheme = call_774393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774393.url(scheme.get, call_774393.host, call_774393.base,
                         call_774393.route, valid.getOrDefault("path"))
  result = hook(call_774393, url, valid)

proc call*(call_774394: Call_GetDeleteRolePolicy_774379; RoleName: string;
          PolicyName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_774395 = newJObject()
  add(query_774395, "Action", newJString(Action))
  add(query_774395, "RoleName", newJString(RoleName))
  add(query_774395, "Version", newJString(Version))
  add(query_774395, "PolicyName", newJString(PolicyName))
  result = call_774394.call(nil, query_774395, nil, nil, nil)

var getDeleteRolePolicy* = Call_GetDeleteRolePolicy_774379(
    name: "getDeleteRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_GetDeleteRolePolicy_774380, base: "/",
    url: url_GetDeleteRolePolicy_774381, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSAMLProvider_774430 = ref object of OpenApiRestCall_772597
proc url_PostDeleteSAMLProvider_774432(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteSAMLProvider_774431(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774433 = query.getOrDefault("Action")
  valid_774433 = validateParameter(valid_774433, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_774433 != nil:
    section.add "Action", valid_774433
  var valid_774434 = query.getOrDefault("Version")
  valid_774434 = validateParameter(valid_774434, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774434 != nil:
    section.add "Version", valid_774434
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774435 = header.getOrDefault("X-Amz-Date")
  valid_774435 = validateParameter(valid_774435, JString, required = false,
                                 default = nil)
  if valid_774435 != nil:
    section.add "X-Amz-Date", valid_774435
  var valid_774436 = header.getOrDefault("X-Amz-Security-Token")
  valid_774436 = validateParameter(valid_774436, JString, required = false,
                                 default = nil)
  if valid_774436 != nil:
    section.add "X-Amz-Security-Token", valid_774436
  var valid_774437 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774437 = validateParameter(valid_774437, JString, required = false,
                                 default = nil)
  if valid_774437 != nil:
    section.add "X-Amz-Content-Sha256", valid_774437
  var valid_774438 = header.getOrDefault("X-Amz-Algorithm")
  valid_774438 = validateParameter(valid_774438, JString, required = false,
                                 default = nil)
  if valid_774438 != nil:
    section.add "X-Amz-Algorithm", valid_774438
  var valid_774439 = header.getOrDefault("X-Amz-Signature")
  valid_774439 = validateParameter(valid_774439, JString, required = false,
                                 default = nil)
  if valid_774439 != nil:
    section.add "X-Amz-Signature", valid_774439
  var valid_774440 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774440 = validateParameter(valid_774440, JString, required = false,
                                 default = nil)
  if valid_774440 != nil:
    section.add "X-Amz-SignedHeaders", valid_774440
  var valid_774441 = header.getOrDefault("X-Amz-Credential")
  valid_774441 = validateParameter(valid_774441, JString, required = false,
                                 default = nil)
  if valid_774441 != nil:
    section.add "X-Amz-Credential", valid_774441
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_774442 = formData.getOrDefault("SAMLProviderArn")
  valid_774442 = validateParameter(valid_774442, JString, required = true,
                                 default = nil)
  if valid_774442 != nil:
    section.add "SAMLProviderArn", valid_774442
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774443: Call_PostDeleteSAMLProvider_774430; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_774443.validator(path, query, header, formData, body)
  let scheme = call_774443.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774443.url(scheme.get, call_774443.host, call_774443.base,
                         call_774443.route, valid.getOrDefault("path"))
  result = hook(call_774443, url, valid)

proc call*(call_774444: Call_PostDeleteSAMLProvider_774430;
          SAMLProviderArn: string; Action: string = "DeleteSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774445 = newJObject()
  var formData_774446 = newJObject()
  add(formData_774446, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_774445, "Action", newJString(Action))
  add(query_774445, "Version", newJString(Version))
  result = call_774444.call(nil, query_774445, nil, formData_774446, nil)

var postDeleteSAMLProvider* = Call_PostDeleteSAMLProvider_774430(
    name: "postDeleteSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_PostDeleteSAMLProvider_774431, base: "/",
    url: url_PostDeleteSAMLProvider_774432, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSAMLProvider_774414 = ref object of OpenApiRestCall_772597
proc url_GetDeleteSAMLProvider_774416(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteSAMLProvider_774415(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774417 = query.getOrDefault("Action")
  valid_774417 = validateParameter(valid_774417, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_774417 != nil:
    section.add "Action", valid_774417
  var valid_774418 = query.getOrDefault("SAMLProviderArn")
  valid_774418 = validateParameter(valid_774418, JString, required = true,
                                 default = nil)
  if valid_774418 != nil:
    section.add "SAMLProviderArn", valid_774418
  var valid_774419 = query.getOrDefault("Version")
  valid_774419 = validateParameter(valid_774419, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774419 != nil:
    section.add "Version", valid_774419
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774420 = header.getOrDefault("X-Amz-Date")
  valid_774420 = validateParameter(valid_774420, JString, required = false,
                                 default = nil)
  if valid_774420 != nil:
    section.add "X-Amz-Date", valid_774420
  var valid_774421 = header.getOrDefault("X-Amz-Security-Token")
  valid_774421 = validateParameter(valid_774421, JString, required = false,
                                 default = nil)
  if valid_774421 != nil:
    section.add "X-Amz-Security-Token", valid_774421
  var valid_774422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774422 = validateParameter(valid_774422, JString, required = false,
                                 default = nil)
  if valid_774422 != nil:
    section.add "X-Amz-Content-Sha256", valid_774422
  var valid_774423 = header.getOrDefault("X-Amz-Algorithm")
  valid_774423 = validateParameter(valid_774423, JString, required = false,
                                 default = nil)
  if valid_774423 != nil:
    section.add "X-Amz-Algorithm", valid_774423
  var valid_774424 = header.getOrDefault("X-Amz-Signature")
  valid_774424 = validateParameter(valid_774424, JString, required = false,
                                 default = nil)
  if valid_774424 != nil:
    section.add "X-Amz-Signature", valid_774424
  var valid_774425 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774425 = validateParameter(valid_774425, JString, required = false,
                                 default = nil)
  if valid_774425 != nil:
    section.add "X-Amz-SignedHeaders", valid_774425
  var valid_774426 = header.getOrDefault("X-Amz-Credential")
  valid_774426 = validateParameter(valid_774426, JString, required = false,
                                 default = nil)
  if valid_774426 != nil:
    section.add "X-Amz-Credential", valid_774426
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774427: Call_GetDeleteSAMLProvider_774414; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_774427.validator(path, query, header, formData, body)
  let scheme = call_774427.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774427.url(scheme.get, call_774427.host, call_774427.base,
                         call_774427.route, valid.getOrDefault("path"))
  result = hook(call_774427, url, valid)

proc call*(call_774428: Call_GetDeleteSAMLProvider_774414; SAMLProviderArn: string;
          Action: string = "DeleteSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_774429 = newJObject()
  add(query_774429, "Action", newJString(Action))
  add(query_774429, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_774429, "Version", newJString(Version))
  result = call_774428.call(nil, query_774429, nil, nil, nil)

var getDeleteSAMLProvider* = Call_GetDeleteSAMLProvider_774414(
    name: "getDeleteSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_GetDeleteSAMLProvider_774415, base: "/",
    url: url_GetDeleteSAMLProvider_774416, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSSHPublicKey_774464 = ref object of OpenApiRestCall_772597
proc url_PostDeleteSSHPublicKey_774466(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteSSHPublicKey_774465(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774467 = query.getOrDefault("Action")
  valid_774467 = validateParameter(valid_774467, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_774467 != nil:
    section.add "Action", valid_774467
  var valid_774468 = query.getOrDefault("Version")
  valid_774468 = validateParameter(valid_774468, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774468 != nil:
    section.add "Version", valid_774468
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774469 = header.getOrDefault("X-Amz-Date")
  valid_774469 = validateParameter(valid_774469, JString, required = false,
                                 default = nil)
  if valid_774469 != nil:
    section.add "X-Amz-Date", valid_774469
  var valid_774470 = header.getOrDefault("X-Amz-Security-Token")
  valid_774470 = validateParameter(valid_774470, JString, required = false,
                                 default = nil)
  if valid_774470 != nil:
    section.add "X-Amz-Security-Token", valid_774470
  var valid_774471 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774471 = validateParameter(valid_774471, JString, required = false,
                                 default = nil)
  if valid_774471 != nil:
    section.add "X-Amz-Content-Sha256", valid_774471
  var valid_774472 = header.getOrDefault("X-Amz-Algorithm")
  valid_774472 = validateParameter(valid_774472, JString, required = false,
                                 default = nil)
  if valid_774472 != nil:
    section.add "X-Amz-Algorithm", valid_774472
  var valid_774473 = header.getOrDefault("X-Amz-Signature")
  valid_774473 = validateParameter(valid_774473, JString, required = false,
                                 default = nil)
  if valid_774473 != nil:
    section.add "X-Amz-Signature", valid_774473
  var valid_774474 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774474 = validateParameter(valid_774474, JString, required = false,
                                 default = nil)
  if valid_774474 != nil:
    section.add "X-Amz-SignedHeaders", valid_774474
  var valid_774475 = header.getOrDefault("X-Amz-Credential")
  valid_774475 = validateParameter(valid_774475, JString, required = false,
                                 default = nil)
  if valid_774475 != nil:
    section.add "X-Amz-Credential", valid_774475
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_774476 = formData.getOrDefault("UserName")
  valid_774476 = validateParameter(valid_774476, JString, required = true,
                                 default = nil)
  if valid_774476 != nil:
    section.add "UserName", valid_774476
  var valid_774477 = formData.getOrDefault("SSHPublicKeyId")
  valid_774477 = validateParameter(valid_774477, JString, required = true,
                                 default = nil)
  if valid_774477 != nil:
    section.add "SSHPublicKeyId", valid_774477
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774478: Call_PostDeleteSSHPublicKey_774464; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_774478.validator(path, query, header, formData, body)
  let scheme = call_774478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774478.url(scheme.get, call_774478.host, call_774478.base,
                         call_774478.route, valid.getOrDefault("path"))
  result = hook(call_774478, url, valid)

proc call*(call_774479: Call_PostDeleteSSHPublicKey_774464; UserName: string;
          SSHPublicKeyId: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774480 = newJObject()
  var formData_774481 = newJObject()
  add(formData_774481, "UserName", newJString(UserName))
  add(formData_774481, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_774480, "Action", newJString(Action))
  add(query_774480, "Version", newJString(Version))
  result = call_774479.call(nil, query_774480, nil, formData_774481, nil)

var postDeleteSSHPublicKey* = Call_PostDeleteSSHPublicKey_774464(
    name: "postDeleteSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_PostDeleteSSHPublicKey_774465, base: "/",
    url: url_PostDeleteSSHPublicKey_774466, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSSHPublicKey_774447 = ref object of OpenApiRestCall_772597
proc url_GetDeleteSSHPublicKey_774449(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteSSHPublicKey_774448(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_774450 = query.getOrDefault("SSHPublicKeyId")
  valid_774450 = validateParameter(valid_774450, JString, required = true,
                                 default = nil)
  if valid_774450 != nil:
    section.add "SSHPublicKeyId", valid_774450
  var valid_774451 = query.getOrDefault("UserName")
  valid_774451 = validateParameter(valid_774451, JString, required = true,
                                 default = nil)
  if valid_774451 != nil:
    section.add "UserName", valid_774451
  var valid_774452 = query.getOrDefault("Action")
  valid_774452 = validateParameter(valid_774452, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_774452 != nil:
    section.add "Action", valid_774452
  var valid_774453 = query.getOrDefault("Version")
  valid_774453 = validateParameter(valid_774453, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774453 != nil:
    section.add "Version", valid_774453
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774454 = header.getOrDefault("X-Amz-Date")
  valid_774454 = validateParameter(valid_774454, JString, required = false,
                                 default = nil)
  if valid_774454 != nil:
    section.add "X-Amz-Date", valid_774454
  var valid_774455 = header.getOrDefault("X-Amz-Security-Token")
  valid_774455 = validateParameter(valid_774455, JString, required = false,
                                 default = nil)
  if valid_774455 != nil:
    section.add "X-Amz-Security-Token", valid_774455
  var valid_774456 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774456 = validateParameter(valid_774456, JString, required = false,
                                 default = nil)
  if valid_774456 != nil:
    section.add "X-Amz-Content-Sha256", valid_774456
  var valid_774457 = header.getOrDefault("X-Amz-Algorithm")
  valid_774457 = validateParameter(valid_774457, JString, required = false,
                                 default = nil)
  if valid_774457 != nil:
    section.add "X-Amz-Algorithm", valid_774457
  var valid_774458 = header.getOrDefault("X-Amz-Signature")
  valid_774458 = validateParameter(valid_774458, JString, required = false,
                                 default = nil)
  if valid_774458 != nil:
    section.add "X-Amz-Signature", valid_774458
  var valid_774459 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774459 = validateParameter(valid_774459, JString, required = false,
                                 default = nil)
  if valid_774459 != nil:
    section.add "X-Amz-SignedHeaders", valid_774459
  var valid_774460 = header.getOrDefault("X-Amz-Credential")
  valid_774460 = validateParameter(valid_774460, JString, required = false,
                                 default = nil)
  if valid_774460 != nil:
    section.add "X-Amz-Credential", valid_774460
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774461: Call_GetDeleteSSHPublicKey_774447; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_774461.validator(path, query, header, formData, body)
  let scheme = call_774461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774461.url(scheme.get, call_774461.host, call_774461.base,
                         call_774461.route, valid.getOrDefault("path"))
  result = hook(call_774461, url, valid)

proc call*(call_774462: Call_GetDeleteSSHPublicKey_774447; SSHPublicKeyId: string;
          UserName: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774463 = newJObject()
  add(query_774463, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_774463, "UserName", newJString(UserName))
  add(query_774463, "Action", newJString(Action))
  add(query_774463, "Version", newJString(Version))
  result = call_774462.call(nil, query_774463, nil, nil, nil)

var getDeleteSSHPublicKey* = Call_GetDeleteSSHPublicKey_774447(
    name: "getDeleteSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_GetDeleteSSHPublicKey_774448, base: "/",
    url: url_GetDeleteSSHPublicKey_774449, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServerCertificate_774498 = ref object of OpenApiRestCall_772597
proc url_PostDeleteServerCertificate_774500(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteServerCertificate_774499(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774501 = query.getOrDefault("Action")
  valid_774501 = validateParameter(valid_774501, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_774501 != nil:
    section.add "Action", valid_774501
  var valid_774502 = query.getOrDefault("Version")
  valid_774502 = validateParameter(valid_774502, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774502 != nil:
    section.add "Version", valid_774502
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774503 = header.getOrDefault("X-Amz-Date")
  valid_774503 = validateParameter(valid_774503, JString, required = false,
                                 default = nil)
  if valid_774503 != nil:
    section.add "X-Amz-Date", valid_774503
  var valid_774504 = header.getOrDefault("X-Amz-Security-Token")
  valid_774504 = validateParameter(valid_774504, JString, required = false,
                                 default = nil)
  if valid_774504 != nil:
    section.add "X-Amz-Security-Token", valid_774504
  var valid_774505 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774505 = validateParameter(valid_774505, JString, required = false,
                                 default = nil)
  if valid_774505 != nil:
    section.add "X-Amz-Content-Sha256", valid_774505
  var valid_774506 = header.getOrDefault("X-Amz-Algorithm")
  valid_774506 = validateParameter(valid_774506, JString, required = false,
                                 default = nil)
  if valid_774506 != nil:
    section.add "X-Amz-Algorithm", valid_774506
  var valid_774507 = header.getOrDefault("X-Amz-Signature")
  valid_774507 = validateParameter(valid_774507, JString, required = false,
                                 default = nil)
  if valid_774507 != nil:
    section.add "X-Amz-Signature", valid_774507
  var valid_774508 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774508 = validateParameter(valid_774508, JString, required = false,
                                 default = nil)
  if valid_774508 != nil:
    section.add "X-Amz-SignedHeaders", valid_774508
  var valid_774509 = header.getOrDefault("X-Amz-Credential")
  valid_774509 = validateParameter(valid_774509, JString, required = false,
                                 default = nil)
  if valid_774509 != nil:
    section.add "X-Amz-Credential", valid_774509
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_774510 = formData.getOrDefault("ServerCertificateName")
  valid_774510 = validateParameter(valid_774510, JString, required = true,
                                 default = nil)
  if valid_774510 != nil:
    section.add "ServerCertificateName", valid_774510
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774511: Call_PostDeleteServerCertificate_774498; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_774511.validator(path, query, header, formData, body)
  let scheme = call_774511.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774511.url(scheme.get, call_774511.host, call_774511.base,
                         call_774511.route, valid.getOrDefault("path"))
  result = hook(call_774511, url, valid)

proc call*(call_774512: Call_PostDeleteServerCertificate_774498;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774513 = newJObject()
  var formData_774514 = newJObject()
  add(formData_774514, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_774513, "Action", newJString(Action))
  add(query_774513, "Version", newJString(Version))
  result = call_774512.call(nil, query_774513, nil, formData_774514, nil)

var postDeleteServerCertificate* = Call_PostDeleteServerCertificate_774498(
    name: "postDeleteServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_PostDeleteServerCertificate_774499, base: "/",
    url: url_PostDeleteServerCertificate_774500,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServerCertificate_774482 = ref object of OpenApiRestCall_772597
proc url_GetDeleteServerCertificate_774484(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteServerCertificate_774483(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_774485 = query.getOrDefault("ServerCertificateName")
  valid_774485 = validateParameter(valid_774485, JString, required = true,
                                 default = nil)
  if valid_774485 != nil:
    section.add "ServerCertificateName", valid_774485
  var valid_774486 = query.getOrDefault("Action")
  valid_774486 = validateParameter(valid_774486, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_774486 != nil:
    section.add "Action", valid_774486
  var valid_774487 = query.getOrDefault("Version")
  valid_774487 = validateParameter(valid_774487, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774487 != nil:
    section.add "Version", valid_774487
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774488 = header.getOrDefault("X-Amz-Date")
  valid_774488 = validateParameter(valid_774488, JString, required = false,
                                 default = nil)
  if valid_774488 != nil:
    section.add "X-Amz-Date", valid_774488
  var valid_774489 = header.getOrDefault("X-Amz-Security-Token")
  valid_774489 = validateParameter(valid_774489, JString, required = false,
                                 default = nil)
  if valid_774489 != nil:
    section.add "X-Amz-Security-Token", valid_774489
  var valid_774490 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774490 = validateParameter(valid_774490, JString, required = false,
                                 default = nil)
  if valid_774490 != nil:
    section.add "X-Amz-Content-Sha256", valid_774490
  var valid_774491 = header.getOrDefault("X-Amz-Algorithm")
  valid_774491 = validateParameter(valid_774491, JString, required = false,
                                 default = nil)
  if valid_774491 != nil:
    section.add "X-Amz-Algorithm", valid_774491
  var valid_774492 = header.getOrDefault("X-Amz-Signature")
  valid_774492 = validateParameter(valid_774492, JString, required = false,
                                 default = nil)
  if valid_774492 != nil:
    section.add "X-Amz-Signature", valid_774492
  var valid_774493 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774493 = validateParameter(valid_774493, JString, required = false,
                                 default = nil)
  if valid_774493 != nil:
    section.add "X-Amz-SignedHeaders", valid_774493
  var valid_774494 = header.getOrDefault("X-Amz-Credential")
  valid_774494 = validateParameter(valid_774494, JString, required = false,
                                 default = nil)
  if valid_774494 != nil:
    section.add "X-Amz-Credential", valid_774494
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774495: Call_GetDeleteServerCertificate_774482; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_774495.validator(path, query, header, formData, body)
  let scheme = call_774495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774495.url(scheme.get, call_774495.host, call_774495.base,
                         call_774495.route, valid.getOrDefault("path"))
  result = hook(call_774495, url, valid)

proc call*(call_774496: Call_GetDeleteServerCertificate_774482;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774497 = newJObject()
  add(query_774497, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_774497, "Action", newJString(Action))
  add(query_774497, "Version", newJString(Version))
  result = call_774496.call(nil, query_774497, nil, nil, nil)

var getDeleteServerCertificate* = Call_GetDeleteServerCertificate_774482(
    name: "getDeleteServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_GetDeleteServerCertificate_774483, base: "/",
    url: url_GetDeleteServerCertificate_774484,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceLinkedRole_774531 = ref object of OpenApiRestCall_772597
proc url_PostDeleteServiceLinkedRole_774533(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteServiceLinkedRole_774532(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774534 = query.getOrDefault("Action")
  valid_774534 = validateParameter(valid_774534, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_774534 != nil:
    section.add "Action", valid_774534
  var valid_774535 = query.getOrDefault("Version")
  valid_774535 = validateParameter(valid_774535, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774535 != nil:
    section.add "Version", valid_774535
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774536 = header.getOrDefault("X-Amz-Date")
  valid_774536 = validateParameter(valid_774536, JString, required = false,
                                 default = nil)
  if valid_774536 != nil:
    section.add "X-Amz-Date", valid_774536
  var valid_774537 = header.getOrDefault("X-Amz-Security-Token")
  valid_774537 = validateParameter(valid_774537, JString, required = false,
                                 default = nil)
  if valid_774537 != nil:
    section.add "X-Amz-Security-Token", valid_774537
  var valid_774538 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774538 = validateParameter(valid_774538, JString, required = false,
                                 default = nil)
  if valid_774538 != nil:
    section.add "X-Amz-Content-Sha256", valid_774538
  var valid_774539 = header.getOrDefault("X-Amz-Algorithm")
  valid_774539 = validateParameter(valid_774539, JString, required = false,
                                 default = nil)
  if valid_774539 != nil:
    section.add "X-Amz-Algorithm", valid_774539
  var valid_774540 = header.getOrDefault("X-Amz-Signature")
  valid_774540 = validateParameter(valid_774540, JString, required = false,
                                 default = nil)
  if valid_774540 != nil:
    section.add "X-Amz-Signature", valid_774540
  var valid_774541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774541 = validateParameter(valid_774541, JString, required = false,
                                 default = nil)
  if valid_774541 != nil:
    section.add "X-Amz-SignedHeaders", valid_774541
  var valid_774542 = header.getOrDefault("X-Amz-Credential")
  valid_774542 = validateParameter(valid_774542, JString, required = false,
                                 default = nil)
  if valid_774542 != nil:
    section.add "X-Amz-Credential", valid_774542
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_774543 = formData.getOrDefault("RoleName")
  valid_774543 = validateParameter(valid_774543, JString, required = true,
                                 default = nil)
  if valid_774543 != nil:
    section.add "RoleName", valid_774543
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774544: Call_PostDeleteServiceLinkedRole_774531; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774544.validator(path, query, header, formData, body)
  let scheme = call_774544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774544.url(scheme.get, call_774544.host, call_774544.base,
                         call_774544.route, valid.getOrDefault("path"))
  result = hook(call_774544, url, valid)

proc call*(call_774545: Call_PostDeleteServiceLinkedRole_774531; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774546 = newJObject()
  var formData_774547 = newJObject()
  add(formData_774547, "RoleName", newJString(RoleName))
  add(query_774546, "Action", newJString(Action))
  add(query_774546, "Version", newJString(Version))
  result = call_774545.call(nil, query_774546, nil, formData_774547, nil)

var postDeleteServiceLinkedRole* = Call_PostDeleteServiceLinkedRole_774531(
    name: "postDeleteServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_PostDeleteServiceLinkedRole_774532, base: "/",
    url: url_PostDeleteServiceLinkedRole_774533,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceLinkedRole_774515 = ref object of OpenApiRestCall_772597
proc url_GetDeleteServiceLinkedRole_774517(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteServiceLinkedRole_774516(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774518 = query.getOrDefault("Action")
  valid_774518 = validateParameter(valid_774518, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_774518 != nil:
    section.add "Action", valid_774518
  var valid_774519 = query.getOrDefault("RoleName")
  valid_774519 = validateParameter(valid_774519, JString, required = true,
                                 default = nil)
  if valid_774519 != nil:
    section.add "RoleName", valid_774519
  var valid_774520 = query.getOrDefault("Version")
  valid_774520 = validateParameter(valid_774520, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774520 != nil:
    section.add "Version", valid_774520
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774521 = header.getOrDefault("X-Amz-Date")
  valid_774521 = validateParameter(valid_774521, JString, required = false,
                                 default = nil)
  if valid_774521 != nil:
    section.add "X-Amz-Date", valid_774521
  var valid_774522 = header.getOrDefault("X-Amz-Security-Token")
  valid_774522 = validateParameter(valid_774522, JString, required = false,
                                 default = nil)
  if valid_774522 != nil:
    section.add "X-Amz-Security-Token", valid_774522
  var valid_774523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774523 = validateParameter(valid_774523, JString, required = false,
                                 default = nil)
  if valid_774523 != nil:
    section.add "X-Amz-Content-Sha256", valid_774523
  var valid_774524 = header.getOrDefault("X-Amz-Algorithm")
  valid_774524 = validateParameter(valid_774524, JString, required = false,
                                 default = nil)
  if valid_774524 != nil:
    section.add "X-Amz-Algorithm", valid_774524
  var valid_774525 = header.getOrDefault("X-Amz-Signature")
  valid_774525 = validateParameter(valid_774525, JString, required = false,
                                 default = nil)
  if valid_774525 != nil:
    section.add "X-Amz-Signature", valid_774525
  var valid_774526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774526 = validateParameter(valid_774526, JString, required = false,
                                 default = nil)
  if valid_774526 != nil:
    section.add "X-Amz-SignedHeaders", valid_774526
  var valid_774527 = header.getOrDefault("X-Amz-Credential")
  valid_774527 = validateParameter(valid_774527, JString, required = false,
                                 default = nil)
  if valid_774527 != nil:
    section.add "X-Amz-Credential", valid_774527
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774528: Call_GetDeleteServiceLinkedRole_774515; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774528.validator(path, query, header, formData, body)
  let scheme = call_774528.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774528.url(scheme.get, call_774528.host, call_774528.base,
                         call_774528.route, valid.getOrDefault("path"))
  result = hook(call_774528, url, valid)

proc call*(call_774529: Call_GetDeleteServiceLinkedRole_774515; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Version: string (required)
  var query_774530 = newJObject()
  add(query_774530, "Action", newJString(Action))
  add(query_774530, "RoleName", newJString(RoleName))
  add(query_774530, "Version", newJString(Version))
  result = call_774529.call(nil, query_774530, nil, nil, nil)

var getDeleteServiceLinkedRole* = Call_GetDeleteServiceLinkedRole_774515(
    name: "getDeleteServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_GetDeleteServiceLinkedRole_774516, base: "/",
    url: url_GetDeleteServiceLinkedRole_774517,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceSpecificCredential_774565 = ref object of OpenApiRestCall_772597
proc url_PostDeleteServiceSpecificCredential_774567(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteServiceSpecificCredential_774566(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774568 = query.getOrDefault("Action")
  valid_774568 = validateParameter(valid_774568, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_774568 != nil:
    section.add "Action", valid_774568
  var valid_774569 = query.getOrDefault("Version")
  valid_774569 = validateParameter(valid_774569, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774569 != nil:
    section.add "Version", valid_774569
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774570 = header.getOrDefault("X-Amz-Date")
  valid_774570 = validateParameter(valid_774570, JString, required = false,
                                 default = nil)
  if valid_774570 != nil:
    section.add "X-Amz-Date", valid_774570
  var valid_774571 = header.getOrDefault("X-Amz-Security-Token")
  valid_774571 = validateParameter(valid_774571, JString, required = false,
                                 default = nil)
  if valid_774571 != nil:
    section.add "X-Amz-Security-Token", valid_774571
  var valid_774572 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774572 = validateParameter(valid_774572, JString, required = false,
                                 default = nil)
  if valid_774572 != nil:
    section.add "X-Amz-Content-Sha256", valid_774572
  var valid_774573 = header.getOrDefault("X-Amz-Algorithm")
  valid_774573 = validateParameter(valid_774573, JString, required = false,
                                 default = nil)
  if valid_774573 != nil:
    section.add "X-Amz-Algorithm", valid_774573
  var valid_774574 = header.getOrDefault("X-Amz-Signature")
  valid_774574 = validateParameter(valid_774574, JString, required = false,
                                 default = nil)
  if valid_774574 != nil:
    section.add "X-Amz-Signature", valid_774574
  var valid_774575 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774575 = validateParameter(valid_774575, JString, required = false,
                                 default = nil)
  if valid_774575 != nil:
    section.add "X-Amz-SignedHeaders", valid_774575
  var valid_774576 = header.getOrDefault("X-Amz-Credential")
  valid_774576 = validateParameter(valid_774576, JString, required = false,
                                 default = nil)
  if valid_774576 != nil:
    section.add "X-Amz-Credential", valid_774576
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_774577 = formData.getOrDefault("UserName")
  valid_774577 = validateParameter(valid_774577, JString, required = false,
                                 default = nil)
  if valid_774577 != nil:
    section.add "UserName", valid_774577
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_774578 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_774578 = validateParameter(valid_774578, JString, required = true,
                                 default = nil)
  if valid_774578 != nil:
    section.add "ServiceSpecificCredentialId", valid_774578
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774579: Call_PostDeleteServiceSpecificCredential_774565;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_774579.validator(path, query, header, formData, body)
  let scheme = call_774579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774579.url(scheme.get, call_774579.host, call_774579.base,
                         call_774579.route, valid.getOrDefault("path"))
  result = hook(call_774579, url, valid)

proc call*(call_774580: Call_PostDeleteServiceSpecificCredential_774565;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774581 = newJObject()
  var formData_774582 = newJObject()
  add(formData_774582, "UserName", newJString(UserName))
  add(formData_774582, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_774581, "Action", newJString(Action))
  add(query_774581, "Version", newJString(Version))
  result = call_774580.call(nil, query_774581, nil, formData_774582, nil)

var postDeleteServiceSpecificCredential* = Call_PostDeleteServiceSpecificCredential_774565(
    name: "postDeleteServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_PostDeleteServiceSpecificCredential_774566, base: "/",
    url: url_PostDeleteServiceSpecificCredential_774567,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceSpecificCredential_774548 = ref object of OpenApiRestCall_772597
proc url_GetDeleteServiceSpecificCredential_774550(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteServiceSpecificCredential_774549(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_774551 = query.getOrDefault("UserName")
  valid_774551 = validateParameter(valid_774551, JString, required = false,
                                 default = nil)
  if valid_774551 != nil:
    section.add "UserName", valid_774551
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774552 = query.getOrDefault("Action")
  valid_774552 = validateParameter(valid_774552, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_774552 != nil:
    section.add "Action", valid_774552
  var valid_774553 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_774553 = validateParameter(valid_774553, JString, required = true,
                                 default = nil)
  if valid_774553 != nil:
    section.add "ServiceSpecificCredentialId", valid_774553
  var valid_774554 = query.getOrDefault("Version")
  valid_774554 = validateParameter(valid_774554, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774554 != nil:
    section.add "Version", valid_774554
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774555 = header.getOrDefault("X-Amz-Date")
  valid_774555 = validateParameter(valid_774555, JString, required = false,
                                 default = nil)
  if valid_774555 != nil:
    section.add "X-Amz-Date", valid_774555
  var valid_774556 = header.getOrDefault("X-Amz-Security-Token")
  valid_774556 = validateParameter(valid_774556, JString, required = false,
                                 default = nil)
  if valid_774556 != nil:
    section.add "X-Amz-Security-Token", valid_774556
  var valid_774557 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774557 = validateParameter(valid_774557, JString, required = false,
                                 default = nil)
  if valid_774557 != nil:
    section.add "X-Amz-Content-Sha256", valid_774557
  var valid_774558 = header.getOrDefault("X-Amz-Algorithm")
  valid_774558 = validateParameter(valid_774558, JString, required = false,
                                 default = nil)
  if valid_774558 != nil:
    section.add "X-Amz-Algorithm", valid_774558
  var valid_774559 = header.getOrDefault("X-Amz-Signature")
  valid_774559 = validateParameter(valid_774559, JString, required = false,
                                 default = nil)
  if valid_774559 != nil:
    section.add "X-Amz-Signature", valid_774559
  var valid_774560 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774560 = validateParameter(valid_774560, JString, required = false,
                                 default = nil)
  if valid_774560 != nil:
    section.add "X-Amz-SignedHeaders", valid_774560
  var valid_774561 = header.getOrDefault("X-Amz-Credential")
  valid_774561 = validateParameter(valid_774561, JString, required = false,
                                 default = nil)
  if valid_774561 != nil:
    section.add "X-Amz-Credential", valid_774561
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774562: Call_GetDeleteServiceSpecificCredential_774548;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_774562.validator(path, query, header, formData, body)
  let scheme = call_774562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774562.url(scheme.get, call_774562.host, call_774562.base,
                         call_774562.route, valid.getOrDefault("path"))
  result = hook(call_774562, url, valid)

proc call*(call_774563: Call_GetDeleteServiceSpecificCredential_774548;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_774564 = newJObject()
  add(query_774564, "UserName", newJString(UserName))
  add(query_774564, "Action", newJString(Action))
  add(query_774564, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_774564, "Version", newJString(Version))
  result = call_774563.call(nil, query_774564, nil, nil, nil)

var getDeleteServiceSpecificCredential* = Call_GetDeleteServiceSpecificCredential_774548(
    name: "getDeleteServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_GetDeleteServiceSpecificCredential_774549, base: "/",
    url: url_GetDeleteServiceSpecificCredential_774550,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSigningCertificate_774600 = ref object of OpenApiRestCall_772597
proc url_PostDeleteSigningCertificate_774602(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteSigningCertificate_774601(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774603 = query.getOrDefault("Action")
  valid_774603 = validateParameter(valid_774603, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_774603 != nil:
    section.add "Action", valid_774603
  var valid_774604 = query.getOrDefault("Version")
  valid_774604 = validateParameter(valid_774604, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774604 != nil:
    section.add "Version", valid_774604
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774605 = header.getOrDefault("X-Amz-Date")
  valid_774605 = validateParameter(valid_774605, JString, required = false,
                                 default = nil)
  if valid_774605 != nil:
    section.add "X-Amz-Date", valid_774605
  var valid_774606 = header.getOrDefault("X-Amz-Security-Token")
  valid_774606 = validateParameter(valid_774606, JString, required = false,
                                 default = nil)
  if valid_774606 != nil:
    section.add "X-Amz-Security-Token", valid_774606
  var valid_774607 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774607 = validateParameter(valid_774607, JString, required = false,
                                 default = nil)
  if valid_774607 != nil:
    section.add "X-Amz-Content-Sha256", valid_774607
  var valid_774608 = header.getOrDefault("X-Amz-Algorithm")
  valid_774608 = validateParameter(valid_774608, JString, required = false,
                                 default = nil)
  if valid_774608 != nil:
    section.add "X-Amz-Algorithm", valid_774608
  var valid_774609 = header.getOrDefault("X-Amz-Signature")
  valid_774609 = validateParameter(valid_774609, JString, required = false,
                                 default = nil)
  if valid_774609 != nil:
    section.add "X-Amz-Signature", valid_774609
  var valid_774610 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774610 = validateParameter(valid_774610, JString, required = false,
                                 default = nil)
  if valid_774610 != nil:
    section.add "X-Amz-SignedHeaders", valid_774610
  var valid_774611 = header.getOrDefault("X-Amz-Credential")
  valid_774611 = validateParameter(valid_774611, JString, required = false,
                                 default = nil)
  if valid_774611 != nil:
    section.add "X-Amz-Credential", valid_774611
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  section = newJObject()
  var valid_774612 = formData.getOrDefault("UserName")
  valid_774612 = validateParameter(valid_774612, JString, required = false,
                                 default = nil)
  if valid_774612 != nil:
    section.add "UserName", valid_774612
  assert formData != nil,
        "formData argument is necessary due to required `CertificateId` field"
  var valid_774613 = formData.getOrDefault("CertificateId")
  valid_774613 = validateParameter(valid_774613, JString, required = true,
                                 default = nil)
  if valid_774613 != nil:
    section.add "CertificateId", valid_774613
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774614: Call_PostDeleteSigningCertificate_774600; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_774614.validator(path, query, header, formData, body)
  let scheme = call_774614.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774614.url(scheme.get, call_774614.host, call_774614.base,
                         call_774614.route, valid.getOrDefault("path"))
  result = hook(call_774614, url, valid)

proc call*(call_774615: Call_PostDeleteSigningCertificate_774600;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774616 = newJObject()
  var formData_774617 = newJObject()
  add(formData_774617, "UserName", newJString(UserName))
  add(formData_774617, "CertificateId", newJString(CertificateId))
  add(query_774616, "Action", newJString(Action))
  add(query_774616, "Version", newJString(Version))
  result = call_774615.call(nil, query_774616, nil, formData_774617, nil)

var postDeleteSigningCertificate* = Call_PostDeleteSigningCertificate_774600(
    name: "postDeleteSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_PostDeleteSigningCertificate_774601, base: "/",
    url: url_PostDeleteSigningCertificate_774602,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSigningCertificate_774583 = ref object of OpenApiRestCall_772597
proc url_GetDeleteSigningCertificate_774585(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteSigningCertificate_774584(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CertificateId` field"
  var valid_774586 = query.getOrDefault("CertificateId")
  valid_774586 = validateParameter(valid_774586, JString, required = true,
                                 default = nil)
  if valid_774586 != nil:
    section.add "CertificateId", valid_774586
  var valid_774587 = query.getOrDefault("UserName")
  valid_774587 = validateParameter(valid_774587, JString, required = false,
                                 default = nil)
  if valid_774587 != nil:
    section.add "UserName", valid_774587
  var valid_774588 = query.getOrDefault("Action")
  valid_774588 = validateParameter(valid_774588, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_774588 != nil:
    section.add "Action", valid_774588
  var valid_774589 = query.getOrDefault("Version")
  valid_774589 = validateParameter(valid_774589, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774589 != nil:
    section.add "Version", valid_774589
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774590 = header.getOrDefault("X-Amz-Date")
  valid_774590 = validateParameter(valid_774590, JString, required = false,
                                 default = nil)
  if valid_774590 != nil:
    section.add "X-Amz-Date", valid_774590
  var valid_774591 = header.getOrDefault("X-Amz-Security-Token")
  valid_774591 = validateParameter(valid_774591, JString, required = false,
                                 default = nil)
  if valid_774591 != nil:
    section.add "X-Amz-Security-Token", valid_774591
  var valid_774592 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774592 = validateParameter(valid_774592, JString, required = false,
                                 default = nil)
  if valid_774592 != nil:
    section.add "X-Amz-Content-Sha256", valid_774592
  var valid_774593 = header.getOrDefault("X-Amz-Algorithm")
  valid_774593 = validateParameter(valid_774593, JString, required = false,
                                 default = nil)
  if valid_774593 != nil:
    section.add "X-Amz-Algorithm", valid_774593
  var valid_774594 = header.getOrDefault("X-Amz-Signature")
  valid_774594 = validateParameter(valid_774594, JString, required = false,
                                 default = nil)
  if valid_774594 != nil:
    section.add "X-Amz-Signature", valid_774594
  var valid_774595 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774595 = validateParameter(valid_774595, JString, required = false,
                                 default = nil)
  if valid_774595 != nil:
    section.add "X-Amz-SignedHeaders", valid_774595
  var valid_774596 = header.getOrDefault("X-Amz-Credential")
  valid_774596 = validateParameter(valid_774596, JString, required = false,
                                 default = nil)
  if valid_774596 != nil:
    section.add "X-Amz-Credential", valid_774596
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774597: Call_GetDeleteSigningCertificate_774583; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_774597.validator(path, query, header, formData, body)
  let scheme = call_774597.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774597.url(scheme.get, call_774597.host, call_774597.base,
                         call_774597.route, valid.getOrDefault("path"))
  result = hook(call_774597, url, valid)

proc call*(call_774598: Call_GetDeleteSigningCertificate_774583;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774599 = newJObject()
  add(query_774599, "CertificateId", newJString(CertificateId))
  add(query_774599, "UserName", newJString(UserName))
  add(query_774599, "Action", newJString(Action))
  add(query_774599, "Version", newJString(Version))
  result = call_774598.call(nil, query_774599, nil, nil, nil)

var getDeleteSigningCertificate* = Call_GetDeleteSigningCertificate_774583(
    name: "getDeleteSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_GetDeleteSigningCertificate_774584, base: "/",
    url: url_GetDeleteSigningCertificate_774585,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUser_774634 = ref object of OpenApiRestCall_772597
proc url_PostDeleteUser_774636(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteUser_774635(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774637 = query.getOrDefault("Action")
  valid_774637 = validateParameter(valid_774637, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_774637 != nil:
    section.add "Action", valid_774637
  var valid_774638 = query.getOrDefault("Version")
  valid_774638 = validateParameter(valid_774638, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774638 != nil:
    section.add "Version", valid_774638
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774639 = header.getOrDefault("X-Amz-Date")
  valid_774639 = validateParameter(valid_774639, JString, required = false,
                                 default = nil)
  if valid_774639 != nil:
    section.add "X-Amz-Date", valid_774639
  var valid_774640 = header.getOrDefault("X-Amz-Security-Token")
  valid_774640 = validateParameter(valid_774640, JString, required = false,
                                 default = nil)
  if valid_774640 != nil:
    section.add "X-Amz-Security-Token", valid_774640
  var valid_774641 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774641 = validateParameter(valid_774641, JString, required = false,
                                 default = nil)
  if valid_774641 != nil:
    section.add "X-Amz-Content-Sha256", valid_774641
  var valid_774642 = header.getOrDefault("X-Amz-Algorithm")
  valid_774642 = validateParameter(valid_774642, JString, required = false,
                                 default = nil)
  if valid_774642 != nil:
    section.add "X-Amz-Algorithm", valid_774642
  var valid_774643 = header.getOrDefault("X-Amz-Signature")
  valid_774643 = validateParameter(valid_774643, JString, required = false,
                                 default = nil)
  if valid_774643 != nil:
    section.add "X-Amz-Signature", valid_774643
  var valid_774644 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774644 = validateParameter(valid_774644, JString, required = false,
                                 default = nil)
  if valid_774644 != nil:
    section.add "X-Amz-SignedHeaders", valid_774644
  var valid_774645 = header.getOrDefault("X-Amz-Credential")
  valid_774645 = validateParameter(valid_774645, JString, required = false,
                                 default = nil)
  if valid_774645 != nil:
    section.add "X-Amz-Credential", valid_774645
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_774646 = formData.getOrDefault("UserName")
  valid_774646 = validateParameter(valid_774646, JString, required = true,
                                 default = nil)
  if valid_774646 != nil:
    section.add "UserName", valid_774646
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774647: Call_PostDeleteUser_774634; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_774647.validator(path, query, header, formData, body)
  let scheme = call_774647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774647.url(scheme.get, call_774647.host, call_774647.base,
                         call_774647.route, valid.getOrDefault("path"))
  result = hook(call_774647, url, valid)

proc call*(call_774648: Call_PostDeleteUser_774634; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774649 = newJObject()
  var formData_774650 = newJObject()
  add(formData_774650, "UserName", newJString(UserName))
  add(query_774649, "Action", newJString(Action))
  add(query_774649, "Version", newJString(Version))
  result = call_774648.call(nil, query_774649, nil, formData_774650, nil)

var postDeleteUser* = Call_PostDeleteUser_774634(name: "postDeleteUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_PostDeleteUser_774635,
    base: "/", url: url_PostDeleteUser_774636, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUser_774618 = ref object of OpenApiRestCall_772597
proc url_GetDeleteUser_774620(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteUser_774619(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_774621 = query.getOrDefault("UserName")
  valid_774621 = validateParameter(valid_774621, JString, required = true,
                                 default = nil)
  if valid_774621 != nil:
    section.add "UserName", valid_774621
  var valid_774622 = query.getOrDefault("Action")
  valid_774622 = validateParameter(valid_774622, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_774622 != nil:
    section.add "Action", valid_774622
  var valid_774623 = query.getOrDefault("Version")
  valid_774623 = validateParameter(valid_774623, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774623 != nil:
    section.add "Version", valid_774623
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774624 = header.getOrDefault("X-Amz-Date")
  valid_774624 = validateParameter(valid_774624, JString, required = false,
                                 default = nil)
  if valid_774624 != nil:
    section.add "X-Amz-Date", valid_774624
  var valid_774625 = header.getOrDefault("X-Amz-Security-Token")
  valid_774625 = validateParameter(valid_774625, JString, required = false,
                                 default = nil)
  if valid_774625 != nil:
    section.add "X-Amz-Security-Token", valid_774625
  var valid_774626 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774626 = validateParameter(valid_774626, JString, required = false,
                                 default = nil)
  if valid_774626 != nil:
    section.add "X-Amz-Content-Sha256", valid_774626
  var valid_774627 = header.getOrDefault("X-Amz-Algorithm")
  valid_774627 = validateParameter(valid_774627, JString, required = false,
                                 default = nil)
  if valid_774627 != nil:
    section.add "X-Amz-Algorithm", valid_774627
  var valid_774628 = header.getOrDefault("X-Amz-Signature")
  valid_774628 = validateParameter(valid_774628, JString, required = false,
                                 default = nil)
  if valid_774628 != nil:
    section.add "X-Amz-Signature", valid_774628
  var valid_774629 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774629 = validateParameter(valid_774629, JString, required = false,
                                 default = nil)
  if valid_774629 != nil:
    section.add "X-Amz-SignedHeaders", valid_774629
  var valid_774630 = header.getOrDefault("X-Amz-Credential")
  valid_774630 = validateParameter(valid_774630, JString, required = false,
                                 default = nil)
  if valid_774630 != nil:
    section.add "X-Amz-Credential", valid_774630
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774631: Call_GetDeleteUser_774618; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_774631.validator(path, query, header, formData, body)
  let scheme = call_774631.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774631.url(scheme.get, call_774631.host, call_774631.base,
                         call_774631.route, valid.getOrDefault("path"))
  result = hook(call_774631, url, valid)

proc call*(call_774632: Call_GetDeleteUser_774618; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774633 = newJObject()
  add(query_774633, "UserName", newJString(UserName))
  add(query_774633, "Action", newJString(Action))
  add(query_774633, "Version", newJString(Version))
  result = call_774632.call(nil, query_774633, nil, nil, nil)

var getDeleteUser* = Call_GetDeleteUser_774618(name: "getDeleteUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_GetDeleteUser_774619,
    base: "/", url: url_GetDeleteUser_774620, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPermissionsBoundary_774667 = ref object of OpenApiRestCall_772597
proc url_PostDeleteUserPermissionsBoundary_774669(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteUserPermissionsBoundary_774668(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774670 = query.getOrDefault("Action")
  valid_774670 = validateParameter(valid_774670, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_774670 != nil:
    section.add "Action", valid_774670
  var valid_774671 = query.getOrDefault("Version")
  valid_774671 = validateParameter(valid_774671, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774671 != nil:
    section.add "Version", valid_774671
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774672 = header.getOrDefault("X-Amz-Date")
  valid_774672 = validateParameter(valid_774672, JString, required = false,
                                 default = nil)
  if valid_774672 != nil:
    section.add "X-Amz-Date", valid_774672
  var valid_774673 = header.getOrDefault("X-Amz-Security-Token")
  valid_774673 = validateParameter(valid_774673, JString, required = false,
                                 default = nil)
  if valid_774673 != nil:
    section.add "X-Amz-Security-Token", valid_774673
  var valid_774674 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774674 = validateParameter(valid_774674, JString, required = false,
                                 default = nil)
  if valid_774674 != nil:
    section.add "X-Amz-Content-Sha256", valid_774674
  var valid_774675 = header.getOrDefault("X-Amz-Algorithm")
  valid_774675 = validateParameter(valid_774675, JString, required = false,
                                 default = nil)
  if valid_774675 != nil:
    section.add "X-Amz-Algorithm", valid_774675
  var valid_774676 = header.getOrDefault("X-Amz-Signature")
  valid_774676 = validateParameter(valid_774676, JString, required = false,
                                 default = nil)
  if valid_774676 != nil:
    section.add "X-Amz-Signature", valid_774676
  var valid_774677 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774677 = validateParameter(valid_774677, JString, required = false,
                                 default = nil)
  if valid_774677 != nil:
    section.add "X-Amz-SignedHeaders", valid_774677
  var valid_774678 = header.getOrDefault("X-Amz-Credential")
  valid_774678 = validateParameter(valid_774678, JString, required = false,
                                 default = nil)
  if valid_774678 != nil:
    section.add "X-Amz-Credential", valid_774678
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_774679 = formData.getOrDefault("UserName")
  valid_774679 = validateParameter(valid_774679, JString, required = true,
                                 default = nil)
  if valid_774679 != nil:
    section.add "UserName", valid_774679
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774680: Call_PostDeleteUserPermissionsBoundary_774667;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_774680.validator(path, query, header, formData, body)
  let scheme = call_774680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774680.url(scheme.get, call_774680.host, call_774680.base,
                         call_774680.route, valid.getOrDefault("path"))
  result = hook(call_774680, url, valid)

proc call*(call_774681: Call_PostDeleteUserPermissionsBoundary_774667;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774682 = newJObject()
  var formData_774683 = newJObject()
  add(formData_774683, "UserName", newJString(UserName))
  add(query_774682, "Action", newJString(Action))
  add(query_774682, "Version", newJString(Version))
  result = call_774681.call(nil, query_774682, nil, formData_774683, nil)

var postDeleteUserPermissionsBoundary* = Call_PostDeleteUserPermissionsBoundary_774667(
    name: "postDeleteUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_PostDeleteUserPermissionsBoundary_774668, base: "/",
    url: url_PostDeleteUserPermissionsBoundary_774669,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPermissionsBoundary_774651 = ref object of OpenApiRestCall_772597
proc url_GetDeleteUserPermissionsBoundary_774653(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteUserPermissionsBoundary_774652(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_774654 = query.getOrDefault("UserName")
  valid_774654 = validateParameter(valid_774654, JString, required = true,
                                 default = nil)
  if valid_774654 != nil:
    section.add "UserName", valid_774654
  var valid_774655 = query.getOrDefault("Action")
  valid_774655 = validateParameter(valid_774655, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_774655 != nil:
    section.add "Action", valid_774655
  var valid_774656 = query.getOrDefault("Version")
  valid_774656 = validateParameter(valid_774656, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774656 != nil:
    section.add "Version", valid_774656
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774657 = header.getOrDefault("X-Amz-Date")
  valid_774657 = validateParameter(valid_774657, JString, required = false,
                                 default = nil)
  if valid_774657 != nil:
    section.add "X-Amz-Date", valid_774657
  var valid_774658 = header.getOrDefault("X-Amz-Security-Token")
  valid_774658 = validateParameter(valid_774658, JString, required = false,
                                 default = nil)
  if valid_774658 != nil:
    section.add "X-Amz-Security-Token", valid_774658
  var valid_774659 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774659 = validateParameter(valid_774659, JString, required = false,
                                 default = nil)
  if valid_774659 != nil:
    section.add "X-Amz-Content-Sha256", valid_774659
  var valid_774660 = header.getOrDefault("X-Amz-Algorithm")
  valid_774660 = validateParameter(valid_774660, JString, required = false,
                                 default = nil)
  if valid_774660 != nil:
    section.add "X-Amz-Algorithm", valid_774660
  var valid_774661 = header.getOrDefault("X-Amz-Signature")
  valid_774661 = validateParameter(valid_774661, JString, required = false,
                                 default = nil)
  if valid_774661 != nil:
    section.add "X-Amz-Signature", valid_774661
  var valid_774662 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774662 = validateParameter(valid_774662, JString, required = false,
                                 default = nil)
  if valid_774662 != nil:
    section.add "X-Amz-SignedHeaders", valid_774662
  var valid_774663 = header.getOrDefault("X-Amz-Credential")
  valid_774663 = validateParameter(valid_774663, JString, required = false,
                                 default = nil)
  if valid_774663 != nil:
    section.add "X-Amz-Credential", valid_774663
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774664: Call_GetDeleteUserPermissionsBoundary_774651;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_774664.validator(path, query, header, formData, body)
  let scheme = call_774664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774664.url(scheme.get, call_774664.host, call_774664.base,
                         call_774664.route, valid.getOrDefault("path"))
  result = hook(call_774664, url, valid)

proc call*(call_774665: Call_GetDeleteUserPermissionsBoundary_774651;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774666 = newJObject()
  add(query_774666, "UserName", newJString(UserName))
  add(query_774666, "Action", newJString(Action))
  add(query_774666, "Version", newJString(Version))
  result = call_774665.call(nil, query_774666, nil, nil, nil)

var getDeleteUserPermissionsBoundary* = Call_GetDeleteUserPermissionsBoundary_774651(
    name: "getDeleteUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_GetDeleteUserPermissionsBoundary_774652, base: "/",
    url: url_GetDeleteUserPermissionsBoundary_774653,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPolicy_774701 = ref object of OpenApiRestCall_772597
proc url_PostDeleteUserPolicy_774703(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteUserPolicy_774702(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774704 = query.getOrDefault("Action")
  valid_774704 = validateParameter(valid_774704, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_774704 != nil:
    section.add "Action", valid_774704
  var valid_774705 = query.getOrDefault("Version")
  valid_774705 = validateParameter(valid_774705, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774705 != nil:
    section.add "Version", valid_774705
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774706 = header.getOrDefault("X-Amz-Date")
  valid_774706 = validateParameter(valid_774706, JString, required = false,
                                 default = nil)
  if valid_774706 != nil:
    section.add "X-Amz-Date", valid_774706
  var valid_774707 = header.getOrDefault("X-Amz-Security-Token")
  valid_774707 = validateParameter(valid_774707, JString, required = false,
                                 default = nil)
  if valid_774707 != nil:
    section.add "X-Amz-Security-Token", valid_774707
  var valid_774708 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774708 = validateParameter(valid_774708, JString, required = false,
                                 default = nil)
  if valid_774708 != nil:
    section.add "X-Amz-Content-Sha256", valid_774708
  var valid_774709 = header.getOrDefault("X-Amz-Algorithm")
  valid_774709 = validateParameter(valid_774709, JString, required = false,
                                 default = nil)
  if valid_774709 != nil:
    section.add "X-Amz-Algorithm", valid_774709
  var valid_774710 = header.getOrDefault("X-Amz-Signature")
  valid_774710 = validateParameter(valid_774710, JString, required = false,
                                 default = nil)
  if valid_774710 != nil:
    section.add "X-Amz-Signature", valid_774710
  var valid_774711 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774711 = validateParameter(valid_774711, JString, required = false,
                                 default = nil)
  if valid_774711 != nil:
    section.add "X-Amz-SignedHeaders", valid_774711
  var valid_774712 = header.getOrDefault("X-Amz-Credential")
  valid_774712 = validateParameter(valid_774712, JString, required = false,
                                 default = nil)
  if valid_774712 != nil:
    section.add "X-Amz-Credential", valid_774712
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_774713 = formData.getOrDefault("PolicyName")
  valid_774713 = validateParameter(valid_774713, JString, required = true,
                                 default = nil)
  if valid_774713 != nil:
    section.add "PolicyName", valid_774713
  var valid_774714 = formData.getOrDefault("UserName")
  valid_774714 = validateParameter(valid_774714, JString, required = true,
                                 default = nil)
  if valid_774714 != nil:
    section.add "UserName", valid_774714
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774715: Call_PostDeleteUserPolicy_774701; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774715.validator(path, query, header, formData, body)
  let scheme = call_774715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774715.url(scheme.get, call_774715.host, call_774715.base,
                         call_774715.route, valid.getOrDefault("path"))
  result = hook(call_774715, url, valid)

proc call*(call_774716: Call_PostDeleteUserPolicy_774701; PolicyName: string;
          UserName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774717 = newJObject()
  var formData_774718 = newJObject()
  add(formData_774718, "PolicyName", newJString(PolicyName))
  add(formData_774718, "UserName", newJString(UserName))
  add(query_774717, "Action", newJString(Action))
  add(query_774717, "Version", newJString(Version))
  result = call_774716.call(nil, query_774717, nil, formData_774718, nil)

var postDeleteUserPolicy* = Call_PostDeleteUserPolicy_774701(
    name: "postDeleteUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_PostDeleteUserPolicy_774702, base: "/",
    url: url_PostDeleteUserPolicy_774703, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPolicy_774684 = ref object of OpenApiRestCall_772597
proc url_GetDeleteUserPolicy_774686(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteUserPolicy_774685(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_774687 = query.getOrDefault("UserName")
  valid_774687 = validateParameter(valid_774687, JString, required = true,
                                 default = nil)
  if valid_774687 != nil:
    section.add "UserName", valid_774687
  var valid_774688 = query.getOrDefault("Action")
  valid_774688 = validateParameter(valid_774688, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_774688 != nil:
    section.add "Action", valid_774688
  var valid_774689 = query.getOrDefault("Version")
  valid_774689 = validateParameter(valid_774689, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774689 != nil:
    section.add "Version", valid_774689
  var valid_774690 = query.getOrDefault("PolicyName")
  valid_774690 = validateParameter(valid_774690, JString, required = true,
                                 default = nil)
  if valid_774690 != nil:
    section.add "PolicyName", valid_774690
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774691 = header.getOrDefault("X-Amz-Date")
  valid_774691 = validateParameter(valid_774691, JString, required = false,
                                 default = nil)
  if valid_774691 != nil:
    section.add "X-Amz-Date", valid_774691
  var valid_774692 = header.getOrDefault("X-Amz-Security-Token")
  valid_774692 = validateParameter(valid_774692, JString, required = false,
                                 default = nil)
  if valid_774692 != nil:
    section.add "X-Amz-Security-Token", valid_774692
  var valid_774693 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774693 = validateParameter(valid_774693, JString, required = false,
                                 default = nil)
  if valid_774693 != nil:
    section.add "X-Amz-Content-Sha256", valid_774693
  var valid_774694 = header.getOrDefault("X-Amz-Algorithm")
  valid_774694 = validateParameter(valid_774694, JString, required = false,
                                 default = nil)
  if valid_774694 != nil:
    section.add "X-Amz-Algorithm", valid_774694
  var valid_774695 = header.getOrDefault("X-Amz-Signature")
  valid_774695 = validateParameter(valid_774695, JString, required = false,
                                 default = nil)
  if valid_774695 != nil:
    section.add "X-Amz-Signature", valid_774695
  var valid_774696 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774696 = validateParameter(valid_774696, JString, required = false,
                                 default = nil)
  if valid_774696 != nil:
    section.add "X-Amz-SignedHeaders", valid_774696
  var valid_774697 = header.getOrDefault("X-Amz-Credential")
  valid_774697 = validateParameter(valid_774697, JString, required = false,
                                 default = nil)
  if valid_774697 != nil:
    section.add "X-Amz-Credential", valid_774697
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774698: Call_GetDeleteUserPolicy_774684; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774698.validator(path, query, header, formData, body)
  let scheme = call_774698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774698.url(scheme.get, call_774698.host, call_774698.base,
                         call_774698.route, valid.getOrDefault("path"))
  result = hook(call_774698, url, valid)

proc call*(call_774699: Call_GetDeleteUserPolicy_774684; UserName: string;
          PolicyName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_774700 = newJObject()
  add(query_774700, "UserName", newJString(UserName))
  add(query_774700, "Action", newJString(Action))
  add(query_774700, "Version", newJString(Version))
  add(query_774700, "PolicyName", newJString(PolicyName))
  result = call_774699.call(nil, query_774700, nil, nil, nil)

var getDeleteUserPolicy* = Call_GetDeleteUserPolicy_774684(
    name: "getDeleteUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_GetDeleteUserPolicy_774685, base: "/",
    url: url_GetDeleteUserPolicy_774686, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVirtualMFADevice_774735 = ref object of OpenApiRestCall_772597
proc url_PostDeleteVirtualMFADevice_774737(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteVirtualMFADevice_774736(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774738 = query.getOrDefault("Action")
  valid_774738 = validateParameter(valid_774738, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_774738 != nil:
    section.add "Action", valid_774738
  var valid_774739 = query.getOrDefault("Version")
  valid_774739 = validateParameter(valid_774739, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774739 != nil:
    section.add "Version", valid_774739
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774740 = header.getOrDefault("X-Amz-Date")
  valid_774740 = validateParameter(valid_774740, JString, required = false,
                                 default = nil)
  if valid_774740 != nil:
    section.add "X-Amz-Date", valid_774740
  var valid_774741 = header.getOrDefault("X-Amz-Security-Token")
  valid_774741 = validateParameter(valid_774741, JString, required = false,
                                 default = nil)
  if valid_774741 != nil:
    section.add "X-Amz-Security-Token", valid_774741
  var valid_774742 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774742 = validateParameter(valid_774742, JString, required = false,
                                 default = nil)
  if valid_774742 != nil:
    section.add "X-Amz-Content-Sha256", valid_774742
  var valid_774743 = header.getOrDefault("X-Amz-Algorithm")
  valid_774743 = validateParameter(valid_774743, JString, required = false,
                                 default = nil)
  if valid_774743 != nil:
    section.add "X-Amz-Algorithm", valid_774743
  var valid_774744 = header.getOrDefault("X-Amz-Signature")
  valid_774744 = validateParameter(valid_774744, JString, required = false,
                                 default = nil)
  if valid_774744 != nil:
    section.add "X-Amz-Signature", valid_774744
  var valid_774745 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774745 = validateParameter(valid_774745, JString, required = false,
                                 default = nil)
  if valid_774745 != nil:
    section.add "X-Amz-SignedHeaders", valid_774745
  var valid_774746 = header.getOrDefault("X-Amz-Credential")
  valid_774746 = validateParameter(valid_774746, JString, required = false,
                                 default = nil)
  if valid_774746 != nil:
    section.add "X-Amz-Credential", valid_774746
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_774747 = formData.getOrDefault("SerialNumber")
  valid_774747 = validateParameter(valid_774747, JString, required = true,
                                 default = nil)
  if valid_774747 != nil:
    section.add "SerialNumber", valid_774747
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774748: Call_PostDeleteVirtualMFADevice_774735; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_774748.validator(path, query, header, formData, body)
  let scheme = call_774748.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774748.url(scheme.get, call_774748.host, call_774748.base,
                         call_774748.route, valid.getOrDefault("path"))
  result = hook(call_774748, url, valid)

proc call*(call_774749: Call_PostDeleteVirtualMFADevice_774735;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774750 = newJObject()
  var formData_774751 = newJObject()
  add(formData_774751, "SerialNumber", newJString(SerialNumber))
  add(query_774750, "Action", newJString(Action))
  add(query_774750, "Version", newJString(Version))
  result = call_774749.call(nil, query_774750, nil, formData_774751, nil)

var postDeleteVirtualMFADevice* = Call_PostDeleteVirtualMFADevice_774735(
    name: "postDeleteVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_PostDeleteVirtualMFADevice_774736, base: "/",
    url: url_PostDeleteVirtualMFADevice_774737,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVirtualMFADevice_774719 = ref object of OpenApiRestCall_772597
proc url_GetDeleteVirtualMFADevice_774721(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteVirtualMFADevice_774720(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_774722 = query.getOrDefault("SerialNumber")
  valid_774722 = validateParameter(valid_774722, JString, required = true,
                                 default = nil)
  if valid_774722 != nil:
    section.add "SerialNumber", valid_774722
  var valid_774723 = query.getOrDefault("Action")
  valid_774723 = validateParameter(valid_774723, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_774723 != nil:
    section.add "Action", valid_774723
  var valid_774724 = query.getOrDefault("Version")
  valid_774724 = validateParameter(valid_774724, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774724 != nil:
    section.add "Version", valid_774724
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774725 = header.getOrDefault("X-Amz-Date")
  valid_774725 = validateParameter(valid_774725, JString, required = false,
                                 default = nil)
  if valid_774725 != nil:
    section.add "X-Amz-Date", valid_774725
  var valid_774726 = header.getOrDefault("X-Amz-Security-Token")
  valid_774726 = validateParameter(valid_774726, JString, required = false,
                                 default = nil)
  if valid_774726 != nil:
    section.add "X-Amz-Security-Token", valid_774726
  var valid_774727 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774727 = validateParameter(valid_774727, JString, required = false,
                                 default = nil)
  if valid_774727 != nil:
    section.add "X-Amz-Content-Sha256", valid_774727
  var valid_774728 = header.getOrDefault("X-Amz-Algorithm")
  valid_774728 = validateParameter(valid_774728, JString, required = false,
                                 default = nil)
  if valid_774728 != nil:
    section.add "X-Amz-Algorithm", valid_774728
  var valid_774729 = header.getOrDefault("X-Amz-Signature")
  valid_774729 = validateParameter(valid_774729, JString, required = false,
                                 default = nil)
  if valid_774729 != nil:
    section.add "X-Amz-Signature", valid_774729
  var valid_774730 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774730 = validateParameter(valid_774730, JString, required = false,
                                 default = nil)
  if valid_774730 != nil:
    section.add "X-Amz-SignedHeaders", valid_774730
  var valid_774731 = header.getOrDefault("X-Amz-Credential")
  valid_774731 = validateParameter(valid_774731, JString, required = false,
                                 default = nil)
  if valid_774731 != nil:
    section.add "X-Amz-Credential", valid_774731
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774732: Call_GetDeleteVirtualMFADevice_774719; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_774732.validator(path, query, header, formData, body)
  let scheme = call_774732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774732.url(scheme.get, call_774732.host, call_774732.base,
                         call_774732.route, valid.getOrDefault("path"))
  result = hook(call_774732, url, valid)

proc call*(call_774733: Call_GetDeleteVirtualMFADevice_774719;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774734 = newJObject()
  add(query_774734, "SerialNumber", newJString(SerialNumber))
  add(query_774734, "Action", newJString(Action))
  add(query_774734, "Version", newJString(Version))
  result = call_774733.call(nil, query_774734, nil, nil, nil)

var getDeleteVirtualMFADevice* = Call_GetDeleteVirtualMFADevice_774719(
    name: "getDeleteVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_GetDeleteVirtualMFADevice_774720, base: "/",
    url: url_GetDeleteVirtualMFADevice_774721,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachGroupPolicy_774769 = ref object of OpenApiRestCall_772597
proc url_PostDetachGroupPolicy_774771(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDetachGroupPolicy_774770(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774772 = query.getOrDefault("Action")
  valid_774772 = validateParameter(valid_774772, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_774772 != nil:
    section.add "Action", valid_774772
  var valid_774773 = query.getOrDefault("Version")
  valid_774773 = validateParameter(valid_774773, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774773 != nil:
    section.add "Version", valid_774773
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774774 = header.getOrDefault("X-Amz-Date")
  valid_774774 = validateParameter(valid_774774, JString, required = false,
                                 default = nil)
  if valid_774774 != nil:
    section.add "X-Amz-Date", valid_774774
  var valid_774775 = header.getOrDefault("X-Amz-Security-Token")
  valid_774775 = validateParameter(valid_774775, JString, required = false,
                                 default = nil)
  if valid_774775 != nil:
    section.add "X-Amz-Security-Token", valid_774775
  var valid_774776 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774776 = validateParameter(valid_774776, JString, required = false,
                                 default = nil)
  if valid_774776 != nil:
    section.add "X-Amz-Content-Sha256", valid_774776
  var valid_774777 = header.getOrDefault("X-Amz-Algorithm")
  valid_774777 = validateParameter(valid_774777, JString, required = false,
                                 default = nil)
  if valid_774777 != nil:
    section.add "X-Amz-Algorithm", valid_774777
  var valid_774778 = header.getOrDefault("X-Amz-Signature")
  valid_774778 = validateParameter(valid_774778, JString, required = false,
                                 default = nil)
  if valid_774778 != nil:
    section.add "X-Amz-Signature", valid_774778
  var valid_774779 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774779 = validateParameter(valid_774779, JString, required = false,
                                 default = nil)
  if valid_774779 != nil:
    section.add "X-Amz-SignedHeaders", valid_774779
  var valid_774780 = header.getOrDefault("X-Amz-Credential")
  valid_774780 = validateParameter(valid_774780, JString, required = false,
                                 default = nil)
  if valid_774780 != nil:
    section.add "X-Amz-Credential", valid_774780
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_774781 = formData.getOrDefault("PolicyArn")
  valid_774781 = validateParameter(valid_774781, JString, required = true,
                                 default = nil)
  if valid_774781 != nil:
    section.add "PolicyArn", valid_774781
  var valid_774782 = formData.getOrDefault("GroupName")
  valid_774782 = validateParameter(valid_774782, JString, required = true,
                                 default = nil)
  if valid_774782 != nil:
    section.add "GroupName", valid_774782
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774783: Call_PostDetachGroupPolicy_774769; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774783.validator(path, query, header, formData, body)
  let scheme = call_774783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774783.url(scheme.get, call_774783.host, call_774783.base,
                         call_774783.route, valid.getOrDefault("path"))
  result = hook(call_774783, url, valid)

proc call*(call_774784: Call_PostDetachGroupPolicy_774769; PolicyArn: string;
          GroupName: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774785 = newJObject()
  var formData_774786 = newJObject()
  add(formData_774786, "PolicyArn", newJString(PolicyArn))
  add(formData_774786, "GroupName", newJString(GroupName))
  add(query_774785, "Action", newJString(Action))
  add(query_774785, "Version", newJString(Version))
  result = call_774784.call(nil, query_774785, nil, formData_774786, nil)

var postDetachGroupPolicy* = Call_PostDetachGroupPolicy_774769(
    name: "postDetachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_PostDetachGroupPolicy_774770, base: "/",
    url: url_PostDetachGroupPolicy_774771, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachGroupPolicy_774752 = ref object of OpenApiRestCall_772597
proc url_GetDetachGroupPolicy_774754(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDetachGroupPolicy_774753(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_774755 = query.getOrDefault("PolicyArn")
  valid_774755 = validateParameter(valid_774755, JString, required = true,
                                 default = nil)
  if valid_774755 != nil:
    section.add "PolicyArn", valid_774755
  var valid_774756 = query.getOrDefault("Action")
  valid_774756 = validateParameter(valid_774756, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_774756 != nil:
    section.add "Action", valid_774756
  var valid_774757 = query.getOrDefault("GroupName")
  valid_774757 = validateParameter(valid_774757, JString, required = true,
                                 default = nil)
  if valid_774757 != nil:
    section.add "GroupName", valid_774757
  var valid_774758 = query.getOrDefault("Version")
  valid_774758 = validateParameter(valid_774758, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774758 != nil:
    section.add "Version", valid_774758
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774759 = header.getOrDefault("X-Amz-Date")
  valid_774759 = validateParameter(valid_774759, JString, required = false,
                                 default = nil)
  if valid_774759 != nil:
    section.add "X-Amz-Date", valid_774759
  var valid_774760 = header.getOrDefault("X-Amz-Security-Token")
  valid_774760 = validateParameter(valid_774760, JString, required = false,
                                 default = nil)
  if valid_774760 != nil:
    section.add "X-Amz-Security-Token", valid_774760
  var valid_774761 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774761 = validateParameter(valid_774761, JString, required = false,
                                 default = nil)
  if valid_774761 != nil:
    section.add "X-Amz-Content-Sha256", valid_774761
  var valid_774762 = header.getOrDefault("X-Amz-Algorithm")
  valid_774762 = validateParameter(valid_774762, JString, required = false,
                                 default = nil)
  if valid_774762 != nil:
    section.add "X-Amz-Algorithm", valid_774762
  var valid_774763 = header.getOrDefault("X-Amz-Signature")
  valid_774763 = validateParameter(valid_774763, JString, required = false,
                                 default = nil)
  if valid_774763 != nil:
    section.add "X-Amz-Signature", valid_774763
  var valid_774764 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774764 = validateParameter(valid_774764, JString, required = false,
                                 default = nil)
  if valid_774764 != nil:
    section.add "X-Amz-SignedHeaders", valid_774764
  var valid_774765 = header.getOrDefault("X-Amz-Credential")
  valid_774765 = validateParameter(valid_774765, JString, required = false,
                                 default = nil)
  if valid_774765 != nil:
    section.add "X-Amz-Credential", valid_774765
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774766: Call_GetDetachGroupPolicy_774752; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774766.validator(path, query, header, formData, body)
  let scheme = call_774766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774766.url(scheme.get, call_774766.host, call_774766.base,
                         call_774766.route, valid.getOrDefault("path"))
  result = hook(call_774766, url, valid)

proc call*(call_774767: Call_GetDetachGroupPolicy_774752; PolicyArn: string;
          GroupName: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_774768 = newJObject()
  add(query_774768, "PolicyArn", newJString(PolicyArn))
  add(query_774768, "Action", newJString(Action))
  add(query_774768, "GroupName", newJString(GroupName))
  add(query_774768, "Version", newJString(Version))
  result = call_774767.call(nil, query_774768, nil, nil, nil)

var getDetachGroupPolicy* = Call_GetDetachGroupPolicy_774752(
    name: "getDetachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_GetDetachGroupPolicy_774753, base: "/",
    url: url_GetDetachGroupPolicy_774754, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachRolePolicy_774804 = ref object of OpenApiRestCall_772597
proc url_PostDetachRolePolicy_774806(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDetachRolePolicy_774805(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774807 = query.getOrDefault("Action")
  valid_774807 = validateParameter(valid_774807, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_774807 != nil:
    section.add "Action", valid_774807
  var valid_774808 = query.getOrDefault("Version")
  valid_774808 = validateParameter(valid_774808, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774808 != nil:
    section.add "Version", valid_774808
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774809 = header.getOrDefault("X-Amz-Date")
  valid_774809 = validateParameter(valid_774809, JString, required = false,
                                 default = nil)
  if valid_774809 != nil:
    section.add "X-Amz-Date", valid_774809
  var valid_774810 = header.getOrDefault("X-Amz-Security-Token")
  valid_774810 = validateParameter(valid_774810, JString, required = false,
                                 default = nil)
  if valid_774810 != nil:
    section.add "X-Amz-Security-Token", valid_774810
  var valid_774811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774811 = validateParameter(valid_774811, JString, required = false,
                                 default = nil)
  if valid_774811 != nil:
    section.add "X-Amz-Content-Sha256", valid_774811
  var valid_774812 = header.getOrDefault("X-Amz-Algorithm")
  valid_774812 = validateParameter(valid_774812, JString, required = false,
                                 default = nil)
  if valid_774812 != nil:
    section.add "X-Amz-Algorithm", valid_774812
  var valid_774813 = header.getOrDefault("X-Amz-Signature")
  valid_774813 = validateParameter(valid_774813, JString, required = false,
                                 default = nil)
  if valid_774813 != nil:
    section.add "X-Amz-Signature", valid_774813
  var valid_774814 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774814 = validateParameter(valid_774814, JString, required = false,
                                 default = nil)
  if valid_774814 != nil:
    section.add "X-Amz-SignedHeaders", valid_774814
  var valid_774815 = header.getOrDefault("X-Amz-Credential")
  valid_774815 = validateParameter(valid_774815, JString, required = false,
                                 default = nil)
  if valid_774815 != nil:
    section.add "X-Amz-Credential", valid_774815
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_774816 = formData.getOrDefault("RoleName")
  valid_774816 = validateParameter(valid_774816, JString, required = true,
                                 default = nil)
  if valid_774816 != nil:
    section.add "RoleName", valid_774816
  var valid_774817 = formData.getOrDefault("PolicyArn")
  valid_774817 = validateParameter(valid_774817, JString, required = true,
                                 default = nil)
  if valid_774817 != nil:
    section.add "PolicyArn", valid_774817
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774818: Call_PostDetachRolePolicy_774804; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774818.validator(path, query, header, formData, body)
  let scheme = call_774818.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774818.url(scheme.get, call_774818.host, call_774818.base,
                         call_774818.route, valid.getOrDefault("path"))
  result = hook(call_774818, url, valid)

proc call*(call_774819: Call_PostDetachRolePolicy_774804; RoleName: string;
          PolicyArn: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774820 = newJObject()
  var formData_774821 = newJObject()
  add(formData_774821, "RoleName", newJString(RoleName))
  add(formData_774821, "PolicyArn", newJString(PolicyArn))
  add(query_774820, "Action", newJString(Action))
  add(query_774820, "Version", newJString(Version))
  result = call_774819.call(nil, query_774820, nil, formData_774821, nil)

var postDetachRolePolicy* = Call_PostDetachRolePolicy_774804(
    name: "postDetachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_PostDetachRolePolicy_774805, base: "/",
    url: url_PostDetachRolePolicy_774806, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachRolePolicy_774787 = ref object of OpenApiRestCall_772597
proc url_GetDetachRolePolicy_774789(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDetachRolePolicy_774788(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_774790 = query.getOrDefault("PolicyArn")
  valid_774790 = validateParameter(valid_774790, JString, required = true,
                                 default = nil)
  if valid_774790 != nil:
    section.add "PolicyArn", valid_774790
  var valid_774791 = query.getOrDefault("Action")
  valid_774791 = validateParameter(valid_774791, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_774791 != nil:
    section.add "Action", valid_774791
  var valid_774792 = query.getOrDefault("RoleName")
  valid_774792 = validateParameter(valid_774792, JString, required = true,
                                 default = nil)
  if valid_774792 != nil:
    section.add "RoleName", valid_774792
  var valid_774793 = query.getOrDefault("Version")
  valid_774793 = validateParameter(valid_774793, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774793 != nil:
    section.add "Version", valid_774793
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774794 = header.getOrDefault("X-Amz-Date")
  valid_774794 = validateParameter(valid_774794, JString, required = false,
                                 default = nil)
  if valid_774794 != nil:
    section.add "X-Amz-Date", valid_774794
  var valid_774795 = header.getOrDefault("X-Amz-Security-Token")
  valid_774795 = validateParameter(valid_774795, JString, required = false,
                                 default = nil)
  if valid_774795 != nil:
    section.add "X-Amz-Security-Token", valid_774795
  var valid_774796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774796 = validateParameter(valid_774796, JString, required = false,
                                 default = nil)
  if valid_774796 != nil:
    section.add "X-Amz-Content-Sha256", valid_774796
  var valid_774797 = header.getOrDefault("X-Amz-Algorithm")
  valid_774797 = validateParameter(valid_774797, JString, required = false,
                                 default = nil)
  if valid_774797 != nil:
    section.add "X-Amz-Algorithm", valid_774797
  var valid_774798 = header.getOrDefault("X-Amz-Signature")
  valid_774798 = validateParameter(valid_774798, JString, required = false,
                                 default = nil)
  if valid_774798 != nil:
    section.add "X-Amz-Signature", valid_774798
  var valid_774799 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774799 = validateParameter(valid_774799, JString, required = false,
                                 default = nil)
  if valid_774799 != nil:
    section.add "X-Amz-SignedHeaders", valid_774799
  var valid_774800 = header.getOrDefault("X-Amz-Credential")
  valid_774800 = validateParameter(valid_774800, JString, required = false,
                                 default = nil)
  if valid_774800 != nil:
    section.add "X-Amz-Credential", valid_774800
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774801: Call_GetDetachRolePolicy_774787; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774801.validator(path, query, header, formData, body)
  let scheme = call_774801.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774801.url(scheme.get, call_774801.host, call_774801.base,
                         call_774801.route, valid.getOrDefault("path"))
  result = hook(call_774801, url, valid)

proc call*(call_774802: Call_GetDetachRolePolicy_774787; PolicyArn: string;
          RoleName: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_774803 = newJObject()
  add(query_774803, "PolicyArn", newJString(PolicyArn))
  add(query_774803, "Action", newJString(Action))
  add(query_774803, "RoleName", newJString(RoleName))
  add(query_774803, "Version", newJString(Version))
  result = call_774802.call(nil, query_774803, nil, nil, nil)

var getDetachRolePolicy* = Call_GetDetachRolePolicy_774787(
    name: "getDetachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_GetDetachRolePolicy_774788, base: "/",
    url: url_GetDetachRolePolicy_774789, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachUserPolicy_774839 = ref object of OpenApiRestCall_772597
proc url_PostDetachUserPolicy_774841(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDetachUserPolicy_774840(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774842 = query.getOrDefault("Action")
  valid_774842 = validateParameter(valid_774842, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_774842 != nil:
    section.add "Action", valid_774842
  var valid_774843 = query.getOrDefault("Version")
  valid_774843 = validateParameter(valid_774843, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774843 != nil:
    section.add "Version", valid_774843
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774844 = header.getOrDefault("X-Amz-Date")
  valid_774844 = validateParameter(valid_774844, JString, required = false,
                                 default = nil)
  if valid_774844 != nil:
    section.add "X-Amz-Date", valid_774844
  var valid_774845 = header.getOrDefault("X-Amz-Security-Token")
  valid_774845 = validateParameter(valid_774845, JString, required = false,
                                 default = nil)
  if valid_774845 != nil:
    section.add "X-Amz-Security-Token", valid_774845
  var valid_774846 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774846 = validateParameter(valid_774846, JString, required = false,
                                 default = nil)
  if valid_774846 != nil:
    section.add "X-Amz-Content-Sha256", valid_774846
  var valid_774847 = header.getOrDefault("X-Amz-Algorithm")
  valid_774847 = validateParameter(valid_774847, JString, required = false,
                                 default = nil)
  if valid_774847 != nil:
    section.add "X-Amz-Algorithm", valid_774847
  var valid_774848 = header.getOrDefault("X-Amz-Signature")
  valid_774848 = validateParameter(valid_774848, JString, required = false,
                                 default = nil)
  if valid_774848 != nil:
    section.add "X-Amz-Signature", valid_774848
  var valid_774849 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774849 = validateParameter(valid_774849, JString, required = false,
                                 default = nil)
  if valid_774849 != nil:
    section.add "X-Amz-SignedHeaders", valid_774849
  var valid_774850 = header.getOrDefault("X-Amz-Credential")
  valid_774850 = validateParameter(valid_774850, JString, required = false,
                                 default = nil)
  if valid_774850 != nil:
    section.add "X-Amz-Credential", valid_774850
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_774851 = formData.getOrDefault("UserName")
  valid_774851 = validateParameter(valid_774851, JString, required = true,
                                 default = nil)
  if valid_774851 != nil:
    section.add "UserName", valid_774851
  var valid_774852 = formData.getOrDefault("PolicyArn")
  valid_774852 = validateParameter(valid_774852, JString, required = true,
                                 default = nil)
  if valid_774852 != nil:
    section.add "PolicyArn", valid_774852
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774853: Call_PostDetachUserPolicy_774839; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774853.validator(path, query, header, formData, body)
  let scheme = call_774853.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774853.url(scheme.get, call_774853.host, call_774853.base,
                         call_774853.route, valid.getOrDefault("path"))
  result = hook(call_774853, url, valid)

proc call*(call_774854: Call_PostDetachUserPolicy_774839; UserName: string;
          PolicyArn: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774855 = newJObject()
  var formData_774856 = newJObject()
  add(formData_774856, "UserName", newJString(UserName))
  add(formData_774856, "PolicyArn", newJString(PolicyArn))
  add(query_774855, "Action", newJString(Action))
  add(query_774855, "Version", newJString(Version))
  result = call_774854.call(nil, query_774855, nil, formData_774856, nil)

var postDetachUserPolicy* = Call_PostDetachUserPolicy_774839(
    name: "postDetachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_PostDetachUserPolicy_774840, base: "/",
    url: url_PostDetachUserPolicy_774841, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachUserPolicy_774822 = ref object of OpenApiRestCall_772597
proc url_GetDetachUserPolicy_774824(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDetachUserPolicy_774823(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_774825 = query.getOrDefault("PolicyArn")
  valid_774825 = validateParameter(valid_774825, JString, required = true,
                                 default = nil)
  if valid_774825 != nil:
    section.add "PolicyArn", valid_774825
  var valid_774826 = query.getOrDefault("UserName")
  valid_774826 = validateParameter(valid_774826, JString, required = true,
                                 default = nil)
  if valid_774826 != nil:
    section.add "UserName", valid_774826
  var valid_774827 = query.getOrDefault("Action")
  valid_774827 = validateParameter(valid_774827, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_774827 != nil:
    section.add "Action", valid_774827
  var valid_774828 = query.getOrDefault("Version")
  valid_774828 = validateParameter(valid_774828, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774828 != nil:
    section.add "Version", valid_774828
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774829 = header.getOrDefault("X-Amz-Date")
  valid_774829 = validateParameter(valid_774829, JString, required = false,
                                 default = nil)
  if valid_774829 != nil:
    section.add "X-Amz-Date", valid_774829
  var valid_774830 = header.getOrDefault("X-Amz-Security-Token")
  valid_774830 = validateParameter(valid_774830, JString, required = false,
                                 default = nil)
  if valid_774830 != nil:
    section.add "X-Amz-Security-Token", valid_774830
  var valid_774831 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774831 = validateParameter(valid_774831, JString, required = false,
                                 default = nil)
  if valid_774831 != nil:
    section.add "X-Amz-Content-Sha256", valid_774831
  var valid_774832 = header.getOrDefault("X-Amz-Algorithm")
  valid_774832 = validateParameter(valid_774832, JString, required = false,
                                 default = nil)
  if valid_774832 != nil:
    section.add "X-Amz-Algorithm", valid_774832
  var valid_774833 = header.getOrDefault("X-Amz-Signature")
  valid_774833 = validateParameter(valid_774833, JString, required = false,
                                 default = nil)
  if valid_774833 != nil:
    section.add "X-Amz-Signature", valid_774833
  var valid_774834 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774834 = validateParameter(valid_774834, JString, required = false,
                                 default = nil)
  if valid_774834 != nil:
    section.add "X-Amz-SignedHeaders", valid_774834
  var valid_774835 = header.getOrDefault("X-Amz-Credential")
  valid_774835 = validateParameter(valid_774835, JString, required = false,
                                 default = nil)
  if valid_774835 != nil:
    section.add "X-Amz-Credential", valid_774835
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774836: Call_GetDetachUserPolicy_774822; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774836.validator(path, query, header, formData, body)
  let scheme = call_774836.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774836.url(scheme.get, call_774836.host, call_774836.base,
                         call_774836.route, valid.getOrDefault("path"))
  result = hook(call_774836, url, valid)

proc call*(call_774837: Call_GetDetachUserPolicy_774822; PolicyArn: string;
          UserName: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774838 = newJObject()
  add(query_774838, "PolicyArn", newJString(PolicyArn))
  add(query_774838, "UserName", newJString(UserName))
  add(query_774838, "Action", newJString(Action))
  add(query_774838, "Version", newJString(Version))
  result = call_774837.call(nil, query_774838, nil, nil, nil)

var getDetachUserPolicy* = Call_GetDetachUserPolicy_774822(
    name: "getDetachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_GetDetachUserPolicy_774823, base: "/",
    url: url_GetDetachUserPolicy_774824, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMFADevice_774876 = ref object of OpenApiRestCall_772597
proc url_PostEnableMFADevice_774878(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostEnableMFADevice_774877(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774879 = query.getOrDefault("Action")
  valid_774879 = validateParameter(valid_774879, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_774879 != nil:
    section.add "Action", valid_774879
  var valid_774880 = query.getOrDefault("Version")
  valid_774880 = validateParameter(valid_774880, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774880 != nil:
    section.add "Version", valid_774880
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774881 = header.getOrDefault("X-Amz-Date")
  valid_774881 = validateParameter(valid_774881, JString, required = false,
                                 default = nil)
  if valid_774881 != nil:
    section.add "X-Amz-Date", valid_774881
  var valid_774882 = header.getOrDefault("X-Amz-Security-Token")
  valid_774882 = validateParameter(valid_774882, JString, required = false,
                                 default = nil)
  if valid_774882 != nil:
    section.add "X-Amz-Security-Token", valid_774882
  var valid_774883 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774883 = validateParameter(valid_774883, JString, required = false,
                                 default = nil)
  if valid_774883 != nil:
    section.add "X-Amz-Content-Sha256", valid_774883
  var valid_774884 = header.getOrDefault("X-Amz-Algorithm")
  valid_774884 = validateParameter(valid_774884, JString, required = false,
                                 default = nil)
  if valid_774884 != nil:
    section.add "X-Amz-Algorithm", valid_774884
  var valid_774885 = header.getOrDefault("X-Amz-Signature")
  valid_774885 = validateParameter(valid_774885, JString, required = false,
                                 default = nil)
  if valid_774885 != nil:
    section.add "X-Amz-Signature", valid_774885
  var valid_774886 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774886 = validateParameter(valid_774886, JString, required = false,
                                 default = nil)
  if valid_774886 != nil:
    section.add "X-Amz-SignedHeaders", valid_774886
  var valid_774887 = header.getOrDefault("X-Amz-Credential")
  valid_774887 = validateParameter(valid_774887, JString, required = false,
                                 default = nil)
  if valid_774887 != nil:
    section.add "X-Amz-Credential", valid_774887
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_774888 = formData.getOrDefault("SerialNumber")
  valid_774888 = validateParameter(valid_774888, JString, required = true,
                                 default = nil)
  if valid_774888 != nil:
    section.add "SerialNumber", valid_774888
  var valid_774889 = formData.getOrDefault("UserName")
  valid_774889 = validateParameter(valid_774889, JString, required = true,
                                 default = nil)
  if valid_774889 != nil:
    section.add "UserName", valid_774889
  var valid_774890 = formData.getOrDefault("AuthenticationCode2")
  valid_774890 = validateParameter(valid_774890, JString, required = true,
                                 default = nil)
  if valid_774890 != nil:
    section.add "AuthenticationCode2", valid_774890
  var valid_774891 = formData.getOrDefault("AuthenticationCode1")
  valid_774891 = validateParameter(valid_774891, JString, required = true,
                                 default = nil)
  if valid_774891 != nil:
    section.add "AuthenticationCode1", valid_774891
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774892: Call_PostEnableMFADevice_774876; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_774892.validator(path, query, header, formData, body)
  let scheme = call_774892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774892.url(scheme.get, call_774892.host, call_774892.base,
                         call_774892.route, valid.getOrDefault("path"))
  result = hook(call_774892, url, valid)

proc call*(call_774893: Call_PostEnableMFADevice_774876; SerialNumber: string;
          UserName: string; AuthenticationCode2: string;
          AuthenticationCode1: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   Version: string (required)
  var query_774894 = newJObject()
  var formData_774895 = newJObject()
  add(formData_774895, "SerialNumber", newJString(SerialNumber))
  add(formData_774895, "UserName", newJString(UserName))
  add(formData_774895, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_774894, "Action", newJString(Action))
  add(formData_774895, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_774894, "Version", newJString(Version))
  result = call_774893.call(nil, query_774894, nil, formData_774895, nil)

var postEnableMFADevice* = Call_PostEnableMFADevice_774876(
    name: "postEnableMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=EnableMFADevice",
    validator: validate_PostEnableMFADevice_774877, base: "/",
    url: url_PostEnableMFADevice_774878, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMFADevice_774857 = ref object of OpenApiRestCall_772597
proc url_GetEnableMFADevice_774859(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetEnableMFADevice_774858(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_774860 = query.getOrDefault("SerialNumber")
  valid_774860 = validateParameter(valid_774860, JString, required = true,
                                 default = nil)
  if valid_774860 != nil:
    section.add "SerialNumber", valid_774860
  var valid_774861 = query.getOrDefault("AuthenticationCode2")
  valid_774861 = validateParameter(valid_774861, JString, required = true,
                                 default = nil)
  if valid_774861 != nil:
    section.add "AuthenticationCode2", valid_774861
  var valid_774862 = query.getOrDefault("AuthenticationCode1")
  valid_774862 = validateParameter(valid_774862, JString, required = true,
                                 default = nil)
  if valid_774862 != nil:
    section.add "AuthenticationCode1", valid_774862
  var valid_774863 = query.getOrDefault("UserName")
  valid_774863 = validateParameter(valid_774863, JString, required = true,
                                 default = nil)
  if valid_774863 != nil:
    section.add "UserName", valid_774863
  var valid_774864 = query.getOrDefault("Action")
  valid_774864 = validateParameter(valid_774864, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_774864 != nil:
    section.add "Action", valid_774864
  var valid_774865 = query.getOrDefault("Version")
  valid_774865 = validateParameter(valid_774865, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774865 != nil:
    section.add "Version", valid_774865
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774866 = header.getOrDefault("X-Amz-Date")
  valid_774866 = validateParameter(valid_774866, JString, required = false,
                                 default = nil)
  if valid_774866 != nil:
    section.add "X-Amz-Date", valid_774866
  var valid_774867 = header.getOrDefault("X-Amz-Security-Token")
  valid_774867 = validateParameter(valid_774867, JString, required = false,
                                 default = nil)
  if valid_774867 != nil:
    section.add "X-Amz-Security-Token", valid_774867
  var valid_774868 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774868 = validateParameter(valid_774868, JString, required = false,
                                 default = nil)
  if valid_774868 != nil:
    section.add "X-Amz-Content-Sha256", valid_774868
  var valid_774869 = header.getOrDefault("X-Amz-Algorithm")
  valid_774869 = validateParameter(valid_774869, JString, required = false,
                                 default = nil)
  if valid_774869 != nil:
    section.add "X-Amz-Algorithm", valid_774869
  var valid_774870 = header.getOrDefault("X-Amz-Signature")
  valid_774870 = validateParameter(valid_774870, JString, required = false,
                                 default = nil)
  if valid_774870 != nil:
    section.add "X-Amz-Signature", valid_774870
  var valid_774871 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774871 = validateParameter(valid_774871, JString, required = false,
                                 default = nil)
  if valid_774871 != nil:
    section.add "X-Amz-SignedHeaders", valid_774871
  var valid_774872 = header.getOrDefault("X-Amz-Credential")
  valid_774872 = validateParameter(valid_774872, JString, required = false,
                                 default = nil)
  if valid_774872 != nil:
    section.add "X-Amz-Credential", valid_774872
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774873: Call_GetEnableMFADevice_774857; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_774873.validator(path, query, header, formData, body)
  let scheme = call_774873.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774873.url(scheme.get, call_774873.host, call_774873.base,
                         call_774873.route, valid.getOrDefault("path"))
  result = hook(call_774873, url, valid)

proc call*(call_774874: Call_GetEnableMFADevice_774857; SerialNumber: string;
          AuthenticationCode2: string; AuthenticationCode1: string;
          UserName: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774875 = newJObject()
  add(query_774875, "SerialNumber", newJString(SerialNumber))
  add(query_774875, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_774875, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_774875, "UserName", newJString(UserName))
  add(query_774875, "Action", newJString(Action))
  add(query_774875, "Version", newJString(Version))
  result = call_774874.call(nil, query_774875, nil, nil, nil)

var getEnableMFADevice* = Call_GetEnableMFADevice_774857(
    name: "getEnableMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=EnableMFADevice", validator: validate_GetEnableMFADevice_774858,
    base: "/", url: url_GetEnableMFADevice_774859,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateCredentialReport_774911 = ref object of OpenApiRestCall_772597
proc url_PostGenerateCredentialReport_774913(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGenerateCredentialReport_774912(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774914 = query.getOrDefault("Action")
  valid_774914 = validateParameter(valid_774914, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_774914 != nil:
    section.add "Action", valid_774914
  var valid_774915 = query.getOrDefault("Version")
  valid_774915 = validateParameter(valid_774915, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774915 != nil:
    section.add "Version", valid_774915
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774916 = header.getOrDefault("X-Amz-Date")
  valid_774916 = validateParameter(valid_774916, JString, required = false,
                                 default = nil)
  if valid_774916 != nil:
    section.add "X-Amz-Date", valid_774916
  var valid_774917 = header.getOrDefault("X-Amz-Security-Token")
  valid_774917 = validateParameter(valid_774917, JString, required = false,
                                 default = nil)
  if valid_774917 != nil:
    section.add "X-Amz-Security-Token", valid_774917
  var valid_774918 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774918 = validateParameter(valid_774918, JString, required = false,
                                 default = nil)
  if valid_774918 != nil:
    section.add "X-Amz-Content-Sha256", valid_774918
  var valid_774919 = header.getOrDefault("X-Amz-Algorithm")
  valid_774919 = validateParameter(valid_774919, JString, required = false,
                                 default = nil)
  if valid_774919 != nil:
    section.add "X-Amz-Algorithm", valid_774919
  var valid_774920 = header.getOrDefault("X-Amz-Signature")
  valid_774920 = validateParameter(valid_774920, JString, required = false,
                                 default = nil)
  if valid_774920 != nil:
    section.add "X-Amz-Signature", valid_774920
  var valid_774921 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774921 = validateParameter(valid_774921, JString, required = false,
                                 default = nil)
  if valid_774921 != nil:
    section.add "X-Amz-SignedHeaders", valid_774921
  var valid_774922 = header.getOrDefault("X-Amz-Credential")
  valid_774922 = validateParameter(valid_774922, JString, required = false,
                                 default = nil)
  if valid_774922 != nil:
    section.add "X-Amz-Credential", valid_774922
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774923: Call_PostGenerateCredentialReport_774911; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_774923.validator(path, query, header, formData, body)
  let scheme = call_774923.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774923.url(scheme.get, call_774923.host, call_774923.base,
                         call_774923.route, valid.getOrDefault("path"))
  result = hook(call_774923, url, valid)

proc call*(call_774924: Call_PostGenerateCredentialReport_774911;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774925 = newJObject()
  add(query_774925, "Action", newJString(Action))
  add(query_774925, "Version", newJString(Version))
  result = call_774924.call(nil, query_774925, nil, nil, nil)

var postGenerateCredentialReport* = Call_PostGenerateCredentialReport_774911(
    name: "postGenerateCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_PostGenerateCredentialReport_774912, base: "/",
    url: url_PostGenerateCredentialReport_774913,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateCredentialReport_774896 = ref object of OpenApiRestCall_772597
proc url_GetGenerateCredentialReport_774898(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGenerateCredentialReport_774897(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774899 = query.getOrDefault("Action")
  valid_774899 = validateParameter(valid_774899, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_774899 != nil:
    section.add "Action", valid_774899
  var valid_774900 = query.getOrDefault("Version")
  valid_774900 = validateParameter(valid_774900, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774900 != nil:
    section.add "Version", valid_774900
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774901 = header.getOrDefault("X-Amz-Date")
  valid_774901 = validateParameter(valid_774901, JString, required = false,
                                 default = nil)
  if valid_774901 != nil:
    section.add "X-Amz-Date", valid_774901
  var valid_774902 = header.getOrDefault("X-Amz-Security-Token")
  valid_774902 = validateParameter(valid_774902, JString, required = false,
                                 default = nil)
  if valid_774902 != nil:
    section.add "X-Amz-Security-Token", valid_774902
  var valid_774903 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774903 = validateParameter(valid_774903, JString, required = false,
                                 default = nil)
  if valid_774903 != nil:
    section.add "X-Amz-Content-Sha256", valid_774903
  var valid_774904 = header.getOrDefault("X-Amz-Algorithm")
  valid_774904 = validateParameter(valid_774904, JString, required = false,
                                 default = nil)
  if valid_774904 != nil:
    section.add "X-Amz-Algorithm", valid_774904
  var valid_774905 = header.getOrDefault("X-Amz-Signature")
  valid_774905 = validateParameter(valid_774905, JString, required = false,
                                 default = nil)
  if valid_774905 != nil:
    section.add "X-Amz-Signature", valid_774905
  var valid_774906 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774906 = validateParameter(valid_774906, JString, required = false,
                                 default = nil)
  if valid_774906 != nil:
    section.add "X-Amz-SignedHeaders", valid_774906
  var valid_774907 = header.getOrDefault("X-Amz-Credential")
  valid_774907 = validateParameter(valid_774907, JString, required = false,
                                 default = nil)
  if valid_774907 != nil:
    section.add "X-Amz-Credential", valid_774907
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774908: Call_GetGenerateCredentialReport_774896; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_774908.validator(path, query, header, formData, body)
  let scheme = call_774908.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774908.url(scheme.get, call_774908.host, call_774908.base,
                         call_774908.route, valid.getOrDefault("path"))
  result = hook(call_774908, url, valid)

proc call*(call_774909: Call_GetGenerateCredentialReport_774896;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774910 = newJObject()
  add(query_774910, "Action", newJString(Action))
  add(query_774910, "Version", newJString(Version))
  result = call_774909.call(nil, query_774910, nil, nil, nil)

var getGenerateCredentialReport* = Call_GetGenerateCredentialReport_774896(
    name: "getGenerateCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_GetGenerateCredentialReport_774897, base: "/",
    url: url_GetGenerateCredentialReport_774898,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateOrganizationsAccessReport_774943 = ref object of OpenApiRestCall_772597
proc url_PostGenerateOrganizationsAccessReport_774945(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGenerateOrganizationsAccessReport_774944(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774946 = query.getOrDefault("Action")
  valid_774946 = validateParameter(valid_774946, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_774946 != nil:
    section.add "Action", valid_774946
  var valid_774947 = query.getOrDefault("Version")
  valid_774947 = validateParameter(valid_774947, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774947 != nil:
    section.add "Version", valid_774947
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774948 = header.getOrDefault("X-Amz-Date")
  valid_774948 = validateParameter(valid_774948, JString, required = false,
                                 default = nil)
  if valid_774948 != nil:
    section.add "X-Amz-Date", valid_774948
  var valid_774949 = header.getOrDefault("X-Amz-Security-Token")
  valid_774949 = validateParameter(valid_774949, JString, required = false,
                                 default = nil)
  if valid_774949 != nil:
    section.add "X-Amz-Security-Token", valid_774949
  var valid_774950 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774950 = validateParameter(valid_774950, JString, required = false,
                                 default = nil)
  if valid_774950 != nil:
    section.add "X-Amz-Content-Sha256", valid_774950
  var valid_774951 = header.getOrDefault("X-Amz-Algorithm")
  valid_774951 = validateParameter(valid_774951, JString, required = false,
                                 default = nil)
  if valid_774951 != nil:
    section.add "X-Amz-Algorithm", valid_774951
  var valid_774952 = header.getOrDefault("X-Amz-Signature")
  valid_774952 = validateParameter(valid_774952, JString, required = false,
                                 default = nil)
  if valid_774952 != nil:
    section.add "X-Amz-Signature", valid_774952
  var valid_774953 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774953 = validateParameter(valid_774953, JString, required = false,
                                 default = nil)
  if valid_774953 != nil:
    section.add "X-Amz-SignedHeaders", valid_774953
  var valid_774954 = header.getOrDefault("X-Amz-Credential")
  valid_774954 = validateParameter(valid_774954, JString, required = false,
                                 default = nil)
  if valid_774954 != nil:
    section.add "X-Amz-Credential", valid_774954
  result.add "header", section
  ## parameters in `formData` object:
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  section = newJObject()
  var valid_774955 = formData.getOrDefault("OrganizationsPolicyId")
  valid_774955 = validateParameter(valid_774955, JString, required = false,
                                 default = nil)
  if valid_774955 != nil:
    section.add "OrganizationsPolicyId", valid_774955
  assert formData != nil,
        "formData argument is necessary due to required `EntityPath` field"
  var valid_774956 = formData.getOrDefault("EntityPath")
  valid_774956 = validateParameter(valid_774956, JString, required = true,
                                 default = nil)
  if valid_774956 != nil:
    section.add "EntityPath", valid_774956
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774957: Call_PostGenerateOrganizationsAccessReport_774943;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774957.validator(path, query, header, formData, body)
  let scheme = call_774957.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774957.url(scheme.get, call_774957.host, call_774957.base,
                         call_774957.route, valid.getOrDefault("path"))
  result = hook(call_774957, url, valid)

proc call*(call_774958: Call_PostGenerateOrganizationsAccessReport_774943;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   Version: string (required)
  var query_774959 = newJObject()
  var formData_774960 = newJObject()
  add(formData_774960, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_774959, "Action", newJString(Action))
  add(formData_774960, "EntityPath", newJString(EntityPath))
  add(query_774959, "Version", newJString(Version))
  result = call_774958.call(nil, query_774959, nil, formData_774960, nil)

var postGenerateOrganizationsAccessReport* = Call_PostGenerateOrganizationsAccessReport_774943(
    name: "postGenerateOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_PostGenerateOrganizationsAccessReport_774944, base: "/",
    url: url_PostGenerateOrganizationsAccessReport_774945,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateOrganizationsAccessReport_774926 = ref object of OpenApiRestCall_772597
proc url_GetGenerateOrganizationsAccessReport_774928(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGenerateOrganizationsAccessReport_774927(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EntityPath` field"
  var valid_774929 = query.getOrDefault("EntityPath")
  valid_774929 = validateParameter(valid_774929, JString, required = true,
                                 default = nil)
  if valid_774929 != nil:
    section.add "EntityPath", valid_774929
  var valid_774930 = query.getOrDefault("OrganizationsPolicyId")
  valid_774930 = validateParameter(valid_774930, JString, required = false,
                                 default = nil)
  if valid_774930 != nil:
    section.add "OrganizationsPolicyId", valid_774930
  var valid_774931 = query.getOrDefault("Action")
  valid_774931 = validateParameter(valid_774931, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_774931 != nil:
    section.add "Action", valid_774931
  var valid_774932 = query.getOrDefault("Version")
  valid_774932 = validateParameter(valid_774932, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774932 != nil:
    section.add "Version", valid_774932
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774933 = header.getOrDefault("X-Amz-Date")
  valid_774933 = validateParameter(valid_774933, JString, required = false,
                                 default = nil)
  if valid_774933 != nil:
    section.add "X-Amz-Date", valid_774933
  var valid_774934 = header.getOrDefault("X-Amz-Security-Token")
  valid_774934 = validateParameter(valid_774934, JString, required = false,
                                 default = nil)
  if valid_774934 != nil:
    section.add "X-Amz-Security-Token", valid_774934
  var valid_774935 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774935 = validateParameter(valid_774935, JString, required = false,
                                 default = nil)
  if valid_774935 != nil:
    section.add "X-Amz-Content-Sha256", valid_774935
  var valid_774936 = header.getOrDefault("X-Amz-Algorithm")
  valid_774936 = validateParameter(valid_774936, JString, required = false,
                                 default = nil)
  if valid_774936 != nil:
    section.add "X-Amz-Algorithm", valid_774936
  var valid_774937 = header.getOrDefault("X-Amz-Signature")
  valid_774937 = validateParameter(valid_774937, JString, required = false,
                                 default = nil)
  if valid_774937 != nil:
    section.add "X-Amz-Signature", valid_774937
  var valid_774938 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774938 = validateParameter(valid_774938, JString, required = false,
                                 default = nil)
  if valid_774938 != nil:
    section.add "X-Amz-SignedHeaders", valid_774938
  var valid_774939 = header.getOrDefault("X-Amz-Credential")
  valid_774939 = validateParameter(valid_774939, JString, required = false,
                                 default = nil)
  if valid_774939 != nil:
    section.add "X-Amz-Credential", valid_774939
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774940: Call_GetGenerateOrganizationsAccessReport_774926;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774940.validator(path, query, header, formData, body)
  let scheme = call_774940.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774940.url(scheme.get, call_774940.host, call_774940.base,
                         call_774940.route, valid.getOrDefault("path"))
  result = hook(call_774940, url, valid)

proc call*(call_774941: Call_GetGenerateOrganizationsAccessReport_774926;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774942 = newJObject()
  add(query_774942, "EntityPath", newJString(EntityPath))
  add(query_774942, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_774942, "Action", newJString(Action))
  add(query_774942, "Version", newJString(Version))
  result = call_774941.call(nil, query_774942, nil, nil, nil)

var getGenerateOrganizationsAccessReport* = Call_GetGenerateOrganizationsAccessReport_774926(
    name: "getGenerateOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_GetGenerateOrganizationsAccessReport_774927, base: "/",
    url: url_GetGenerateOrganizationsAccessReport_774928,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateServiceLastAccessedDetails_774977 = ref object of OpenApiRestCall_772597
proc url_PostGenerateServiceLastAccessedDetails_774979(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGenerateServiceLastAccessedDetails_774978(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774980 = query.getOrDefault("Action")
  valid_774980 = validateParameter(valid_774980, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_774980 != nil:
    section.add "Action", valid_774980
  var valid_774981 = query.getOrDefault("Version")
  valid_774981 = validateParameter(valid_774981, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774981 != nil:
    section.add "Version", valid_774981
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774982 = header.getOrDefault("X-Amz-Date")
  valid_774982 = validateParameter(valid_774982, JString, required = false,
                                 default = nil)
  if valid_774982 != nil:
    section.add "X-Amz-Date", valid_774982
  var valid_774983 = header.getOrDefault("X-Amz-Security-Token")
  valid_774983 = validateParameter(valid_774983, JString, required = false,
                                 default = nil)
  if valid_774983 != nil:
    section.add "X-Amz-Security-Token", valid_774983
  var valid_774984 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774984 = validateParameter(valid_774984, JString, required = false,
                                 default = nil)
  if valid_774984 != nil:
    section.add "X-Amz-Content-Sha256", valid_774984
  var valid_774985 = header.getOrDefault("X-Amz-Algorithm")
  valid_774985 = validateParameter(valid_774985, JString, required = false,
                                 default = nil)
  if valid_774985 != nil:
    section.add "X-Amz-Algorithm", valid_774985
  var valid_774986 = header.getOrDefault("X-Amz-Signature")
  valid_774986 = validateParameter(valid_774986, JString, required = false,
                                 default = nil)
  if valid_774986 != nil:
    section.add "X-Amz-Signature", valid_774986
  var valid_774987 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774987 = validateParameter(valid_774987, JString, required = false,
                                 default = nil)
  if valid_774987 != nil:
    section.add "X-Amz-SignedHeaders", valid_774987
  var valid_774988 = header.getOrDefault("X-Amz-Credential")
  valid_774988 = validateParameter(valid_774988, JString, required = false,
                                 default = nil)
  if valid_774988 != nil:
    section.add "X-Amz-Credential", valid_774988
  result.add "header", section
  ## parameters in `formData` object:
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Arn` field"
  var valid_774989 = formData.getOrDefault("Arn")
  valid_774989 = validateParameter(valid_774989, JString, required = true,
                                 default = nil)
  if valid_774989 != nil:
    section.add "Arn", valid_774989
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774990: Call_PostGenerateServiceLastAccessedDetails_774977;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774990.validator(path, query, header, formData, body)
  let scheme = call_774990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774990.url(scheme.get, call_774990.host, call_774990.base,
                         call_774990.route, valid.getOrDefault("path"))
  result = hook(call_774990, url, valid)

proc call*(call_774991: Call_PostGenerateServiceLastAccessedDetails_774977;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774992 = newJObject()
  var formData_774993 = newJObject()
  add(formData_774993, "Arn", newJString(Arn))
  add(query_774992, "Action", newJString(Action))
  add(query_774992, "Version", newJString(Version))
  result = call_774991.call(nil, query_774992, nil, formData_774993, nil)

var postGenerateServiceLastAccessedDetails* = Call_PostGenerateServiceLastAccessedDetails_774977(
    name: "postGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_PostGenerateServiceLastAccessedDetails_774978, base: "/",
    url: url_PostGenerateServiceLastAccessedDetails_774979,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateServiceLastAccessedDetails_774961 = ref object of OpenApiRestCall_772597
proc url_GetGenerateServiceLastAccessedDetails_774963(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGenerateServiceLastAccessedDetails_774962(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774964 = query.getOrDefault("Action")
  valid_774964 = validateParameter(valid_774964, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_774964 != nil:
    section.add "Action", valid_774964
  var valid_774965 = query.getOrDefault("Arn")
  valid_774965 = validateParameter(valid_774965, JString, required = true,
                                 default = nil)
  if valid_774965 != nil:
    section.add "Arn", valid_774965
  var valid_774966 = query.getOrDefault("Version")
  valid_774966 = validateParameter(valid_774966, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774966 != nil:
    section.add "Version", valid_774966
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774967 = header.getOrDefault("X-Amz-Date")
  valid_774967 = validateParameter(valid_774967, JString, required = false,
                                 default = nil)
  if valid_774967 != nil:
    section.add "X-Amz-Date", valid_774967
  var valid_774968 = header.getOrDefault("X-Amz-Security-Token")
  valid_774968 = validateParameter(valid_774968, JString, required = false,
                                 default = nil)
  if valid_774968 != nil:
    section.add "X-Amz-Security-Token", valid_774968
  var valid_774969 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774969 = validateParameter(valid_774969, JString, required = false,
                                 default = nil)
  if valid_774969 != nil:
    section.add "X-Amz-Content-Sha256", valid_774969
  var valid_774970 = header.getOrDefault("X-Amz-Algorithm")
  valid_774970 = validateParameter(valid_774970, JString, required = false,
                                 default = nil)
  if valid_774970 != nil:
    section.add "X-Amz-Algorithm", valid_774970
  var valid_774971 = header.getOrDefault("X-Amz-Signature")
  valid_774971 = validateParameter(valid_774971, JString, required = false,
                                 default = nil)
  if valid_774971 != nil:
    section.add "X-Amz-Signature", valid_774971
  var valid_774972 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774972 = validateParameter(valid_774972, JString, required = false,
                                 default = nil)
  if valid_774972 != nil:
    section.add "X-Amz-SignedHeaders", valid_774972
  var valid_774973 = header.getOrDefault("X-Amz-Credential")
  valid_774973 = validateParameter(valid_774973, JString, required = false,
                                 default = nil)
  if valid_774973 != nil:
    section.add "X-Amz-Credential", valid_774973
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774974: Call_GetGenerateServiceLastAccessedDetails_774961;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_774974.validator(path, query, header, formData, body)
  let scheme = call_774974.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774974.url(scheme.get, call_774974.host, call_774974.base,
                         call_774974.route, valid.getOrDefault("path"))
  result = hook(call_774974, url, valid)

proc call*(call_774975: Call_GetGenerateServiceLastAccessedDetails_774961;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_774976 = newJObject()
  add(query_774976, "Action", newJString(Action))
  add(query_774976, "Arn", newJString(Arn))
  add(query_774976, "Version", newJString(Version))
  result = call_774975.call(nil, query_774976, nil, nil, nil)

var getGenerateServiceLastAccessedDetails* = Call_GetGenerateServiceLastAccessedDetails_774961(
    name: "getGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_GetGenerateServiceLastAccessedDetails_774962, base: "/",
    url: url_GetGenerateServiceLastAccessedDetails_774963,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccessKeyLastUsed_775010 = ref object of OpenApiRestCall_772597
proc url_PostGetAccessKeyLastUsed_775012(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccessKeyLastUsed_775011(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775013 = query.getOrDefault("Action")
  valid_775013 = validateParameter(valid_775013, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_775013 != nil:
    section.add "Action", valid_775013
  var valid_775014 = query.getOrDefault("Version")
  valid_775014 = validateParameter(valid_775014, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775014 != nil:
    section.add "Version", valid_775014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775015 = header.getOrDefault("X-Amz-Date")
  valid_775015 = validateParameter(valid_775015, JString, required = false,
                                 default = nil)
  if valid_775015 != nil:
    section.add "X-Amz-Date", valid_775015
  var valid_775016 = header.getOrDefault("X-Amz-Security-Token")
  valid_775016 = validateParameter(valid_775016, JString, required = false,
                                 default = nil)
  if valid_775016 != nil:
    section.add "X-Amz-Security-Token", valid_775016
  var valid_775017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775017 = validateParameter(valid_775017, JString, required = false,
                                 default = nil)
  if valid_775017 != nil:
    section.add "X-Amz-Content-Sha256", valid_775017
  var valid_775018 = header.getOrDefault("X-Amz-Algorithm")
  valid_775018 = validateParameter(valid_775018, JString, required = false,
                                 default = nil)
  if valid_775018 != nil:
    section.add "X-Amz-Algorithm", valid_775018
  var valid_775019 = header.getOrDefault("X-Amz-Signature")
  valid_775019 = validateParameter(valid_775019, JString, required = false,
                                 default = nil)
  if valid_775019 != nil:
    section.add "X-Amz-Signature", valid_775019
  var valid_775020 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775020 = validateParameter(valid_775020, JString, required = false,
                                 default = nil)
  if valid_775020 != nil:
    section.add "X-Amz-SignedHeaders", valid_775020
  var valid_775021 = header.getOrDefault("X-Amz-Credential")
  valid_775021 = validateParameter(valid_775021, JString, required = false,
                                 default = nil)
  if valid_775021 != nil:
    section.add "X-Amz-Credential", valid_775021
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_775022 = formData.getOrDefault("AccessKeyId")
  valid_775022 = validateParameter(valid_775022, JString, required = true,
                                 default = nil)
  if valid_775022 != nil:
    section.add "AccessKeyId", valid_775022
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775023: Call_PostGetAccessKeyLastUsed_775010; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_775023.validator(path, query, header, formData, body)
  let scheme = call_775023.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775023.url(scheme.get, call_775023.host, call_775023.base,
                         call_775023.route, valid.getOrDefault("path"))
  result = hook(call_775023, url, valid)

proc call*(call_775024: Call_PostGetAccessKeyLastUsed_775010; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775025 = newJObject()
  var formData_775026 = newJObject()
  add(formData_775026, "AccessKeyId", newJString(AccessKeyId))
  add(query_775025, "Action", newJString(Action))
  add(query_775025, "Version", newJString(Version))
  result = call_775024.call(nil, query_775025, nil, formData_775026, nil)

var postGetAccessKeyLastUsed* = Call_PostGetAccessKeyLastUsed_775010(
    name: "postGetAccessKeyLastUsed", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_PostGetAccessKeyLastUsed_775011, base: "/",
    url: url_PostGetAccessKeyLastUsed_775012, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccessKeyLastUsed_774994 = ref object of OpenApiRestCall_772597
proc url_GetGetAccessKeyLastUsed_774996(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccessKeyLastUsed_774995(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccessKeyId` field"
  var valid_774997 = query.getOrDefault("AccessKeyId")
  valid_774997 = validateParameter(valid_774997, JString, required = true,
                                 default = nil)
  if valid_774997 != nil:
    section.add "AccessKeyId", valid_774997
  var valid_774998 = query.getOrDefault("Action")
  valid_774998 = validateParameter(valid_774998, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_774998 != nil:
    section.add "Action", valid_774998
  var valid_774999 = query.getOrDefault("Version")
  valid_774999 = validateParameter(valid_774999, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_774999 != nil:
    section.add "Version", valid_774999
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775000 = header.getOrDefault("X-Amz-Date")
  valid_775000 = validateParameter(valid_775000, JString, required = false,
                                 default = nil)
  if valid_775000 != nil:
    section.add "X-Amz-Date", valid_775000
  var valid_775001 = header.getOrDefault("X-Amz-Security-Token")
  valid_775001 = validateParameter(valid_775001, JString, required = false,
                                 default = nil)
  if valid_775001 != nil:
    section.add "X-Amz-Security-Token", valid_775001
  var valid_775002 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775002 = validateParameter(valid_775002, JString, required = false,
                                 default = nil)
  if valid_775002 != nil:
    section.add "X-Amz-Content-Sha256", valid_775002
  var valid_775003 = header.getOrDefault("X-Amz-Algorithm")
  valid_775003 = validateParameter(valid_775003, JString, required = false,
                                 default = nil)
  if valid_775003 != nil:
    section.add "X-Amz-Algorithm", valid_775003
  var valid_775004 = header.getOrDefault("X-Amz-Signature")
  valid_775004 = validateParameter(valid_775004, JString, required = false,
                                 default = nil)
  if valid_775004 != nil:
    section.add "X-Amz-Signature", valid_775004
  var valid_775005 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775005 = validateParameter(valid_775005, JString, required = false,
                                 default = nil)
  if valid_775005 != nil:
    section.add "X-Amz-SignedHeaders", valid_775005
  var valid_775006 = header.getOrDefault("X-Amz-Credential")
  valid_775006 = validateParameter(valid_775006, JString, required = false,
                                 default = nil)
  if valid_775006 != nil:
    section.add "X-Amz-Credential", valid_775006
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775007: Call_GetGetAccessKeyLastUsed_774994; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_775007.validator(path, query, header, formData, body)
  let scheme = call_775007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775007.url(scheme.get, call_775007.host, call_775007.base,
                         call_775007.route, valid.getOrDefault("path"))
  result = hook(call_775007, url, valid)

proc call*(call_775008: Call_GetGetAccessKeyLastUsed_774994; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775009 = newJObject()
  add(query_775009, "AccessKeyId", newJString(AccessKeyId))
  add(query_775009, "Action", newJString(Action))
  add(query_775009, "Version", newJString(Version))
  result = call_775008.call(nil, query_775009, nil, nil, nil)

var getGetAccessKeyLastUsed* = Call_GetGetAccessKeyLastUsed_774994(
    name: "getGetAccessKeyLastUsed", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_GetGetAccessKeyLastUsed_774995, base: "/",
    url: url_GetGetAccessKeyLastUsed_774996, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountAuthorizationDetails_775045 = ref object of OpenApiRestCall_772597
proc url_PostGetAccountAuthorizationDetails_775047(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccountAuthorizationDetails_775046(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775048 = query.getOrDefault("Action")
  valid_775048 = validateParameter(valid_775048, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_775048 != nil:
    section.add "Action", valid_775048
  var valid_775049 = query.getOrDefault("Version")
  valid_775049 = validateParameter(valid_775049, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775049 != nil:
    section.add "Version", valid_775049
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775050 = header.getOrDefault("X-Amz-Date")
  valid_775050 = validateParameter(valid_775050, JString, required = false,
                                 default = nil)
  if valid_775050 != nil:
    section.add "X-Amz-Date", valid_775050
  var valid_775051 = header.getOrDefault("X-Amz-Security-Token")
  valid_775051 = validateParameter(valid_775051, JString, required = false,
                                 default = nil)
  if valid_775051 != nil:
    section.add "X-Amz-Security-Token", valid_775051
  var valid_775052 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775052 = validateParameter(valid_775052, JString, required = false,
                                 default = nil)
  if valid_775052 != nil:
    section.add "X-Amz-Content-Sha256", valid_775052
  var valid_775053 = header.getOrDefault("X-Amz-Algorithm")
  valid_775053 = validateParameter(valid_775053, JString, required = false,
                                 default = nil)
  if valid_775053 != nil:
    section.add "X-Amz-Algorithm", valid_775053
  var valid_775054 = header.getOrDefault("X-Amz-Signature")
  valid_775054 = validateParameter(valid_775054, JString, required = false,
                                 default = nil)
  if valid_775054 != nil:
    section.add "X-Amz-Signature", valid_775054
  var valid_775055 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775055 = validateParameter(valid_775055, JString, required = false,
                                 default = nil)
  if valid_775055 != nil:
    section.add "X-Amz-SignedHeaders", valid_775055
  var valid_775056 = header.getOrDefault("X-Amz-Credential")
  valid_775056 = validateParameter(valid_775056, JString, required = false,
                                 default = nil)
  if valid_775056 != nil:
    section.add "X-Amz-Credential", valid_775056
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_775057 = formData.getOrDefault("Filter")
  valid_775057 = validateParameter(valid_775057, JArray, required = false,
                                 default = nil)
  if valid_775057 != nil:
    section.add "Filter", valid_775057
  var valid_775058 = formData.getOrDefault("Marker")
  valid_775058 = validateParameter(valid_775058, JString, required = false,
                                 default = nil)
  if valid_775058 != nil:
    section.add "Marker", valid_775058
  var valid_775059 = formData.getOrDefault("MaxItems")
  valid_775059 = validateParameter(valid_775059, JInt, required = false, default = nil)
  if valid_775059 != nil:
    section.add "MaxItems", valid_775059
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775060: Call_PostGetAccountAuthorizationDetails_775045;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_775060.validator(path, query, header, formData, body)
  let scheme = call_775060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775060.url(scheme.get, call_775060.host, call_775060.base,
                         call_775060.route, valid.getOrDefault("path"))
  result = hook(call_775060, url, valid)

proc call*(call_775061: Call_PostGetAccountAuthorizationDetails_775045;
          Filter: JsonNode = nil; Marker: string = "";
          Action: string = "GetAccountAuthorizationDetails"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775062 = newJObject()
  var formData_775063 = newJObject()
  if Filter != nil:
    formData_775063.add "Filter", Filter
  add(formData_775063, "Marker", newJString(Marker))
  add(query_775062, "Action", newJString(Action))
  add(formData_775063, "MaxItems", newJInt(MaxItems))
  add(query_775062, "Version", newJString(Version))
  result = call_775061.call(nil, query_775062, nil, formData_775063, nil)

var postGetAccountAuthorizationDetails* = Call_PostGetAccountAuthorizationDetails_775045(
    name: "postGetAccountAuthorizationDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_PostGetAccountAuthorizationDetails_775046, base: "/",
    url: url_PostGetAccountAuthorizationDetails_775047,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountAuthorizationDetails_775027 = ref object of OpenApiRestCall_772597
proc url_GetGetAccountAuthorizationDetails_775029(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccountAuthorizationDetails_775028(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_775030 = query.getOrDefault("Filter")
  valid_775030 = validateParameter(valid_775030, JArray, required = false,
                                 default = nil)
  if valid_775030 != nil:
    section.add "Filter", valid_775030
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775031 = query.getOrDefault("Action")
  valid_775031 = validateParameter(valid_775031, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_775031 != nil:
    section.add "Action", valid_775031
  var valid_775032 = query.getOrDefault("Marker")
  valid_775032 = validateParameter(valid_775032, JString, required = false,
                                 default = nil)
  if valid_775032 != nil:
    section.add "Marker", valid_775032
  var valid_775033 = query.getOrDefault("MaxItems")
  valid_775033 = validateParameter(valid_775033, JInt, required = false, default = nil)
  if valid_775033 != nil:
    section.add "MaxItems", valid_775033
  var valid_775034 = query.getOrDefault("Version")
  valid_775034 = validateParameter(valid_775034, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775034 != nil:
    section.add "Version", valid_775034
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775035 = header.getOrDefault("X-Amz-Date")
  valid_775035 = validateParameter(valid_775035, JString, required = false,
                                 default = nil)
  if valid_775035 != nil:
    section.add "X-Amz-Date", valid_775035
  var valid_775036 = header.getOrDefault("X-Amz-Security-Token")
  valid_775036 = validateParameter(valid_775036, JString, required = false,
                                 default = nil)
  if valid_775036 != nil:
    section.add "X-Amz-Security-Token", valid_775036
  var valid_775037 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775037 = validateParameter(valid_775037, JString, required = false,
                                 default = nil)
  if valid_775037 != nil:
    section.add "X-Amz-Content-Sha256", valid_775037
  var valid_775038 = header.getOrDefault("X-Amz-Algorithm")
  valid_775038 = validateParameter(valid_775038, JString, required = false,
                                 default = nil)
  if valid_775038 != nil:
    section.add "X-Amz-Algorithm", valid_775038
  var valid_775039 = header.getOrDefault("X-Amz-Signature")
  valid_775039 = validateParameter(valid_775039, JString, required = false,
                                 default = nil)
  if valid_775039 != nil:
    section.add "X-Amz-Signature", valid_775039
  var valid_775040 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775040 = validateParameter(valid_775040, JString, required = false,
                                 default = nil)
  if valid_775040 != nil:
    section.add "X-Amz-SignedHeaders", valid_775040
  var valid_775041 = header.getOrDefault("X-Amz-Credential")
  valid_775041 = validateParameter(valid_775041, JString, required = false,
                                 default = nil)
  if valid_775041 != nil:
    section.add "X-Amz-Credential", valid_775041
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775042: Call_GetGetAccountAuthorizationDetails_775027;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_775042.validator(path, query, header, formData, body)
  let scheme = call_775042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775042.url(scheme.get, call_775042.host, call_775042.base,
                         call_775042.route, valid.getOrDefault("path"))
  result = hook(call_775042, url, valid)

proc call*(call_775043: Call_GetGetAccountAuthorizationDetails_775027;
          Filter: JsonNode = nil; Action: string = "GetAccountAuthorizationDetails";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775044 = newJObject()
  if Filter != nil:
    query_775044.add "Filter", Filter
  add(query_775044, "Action", newJString(Action))
  add(query_775044, "Marker", newJString(Marker))
  add(query_775044, "MaxItems", newJInt(MaxItems))
  add(query_775044, "Version", newJString(Version))
  result = call_775043.call(nil, query_775044, nil, nil, nil)

var getGetAccountAuthorizationDetails* = Call_GetGetAccountAuthorizationDetails_775027(
    name: "getGetAccountAuthorizationDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_GetGetAccountAuthorizationDetails_775028, base: "/",
    url: url_GetGetAccountAuthorizationDetails_775029,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountPasswordPolicy_775079 = ref object of OpenApiRestCall_772597
proc url_PostGetAccountPasswordPolicy_775081(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccountPasswordPolicy_775080(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775082 = query.getOrDefault("Action")
  valid_775082 = validateParameter(valid_775082, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_775082 != nil:
    section.add "Action", valid_775082
  var valid_775083 = query.getOrDefault("Version")
  valid_775083 = validateParameter(valid_775083, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775083 != nil:
    section.add "Version", valid_775083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775084 = header.getOrDefault("X-Amz-Date")
  valid_775084 = validateParameter(valid_775084, JString, required = false,
                                 default = nil)
  if valid_775084 != nil:
    section.add "X-Amz-Date", valid_775084
  var valid_775085 = header.getOrDefault("X-Amz-Security-Token")
  valid_775085 = validateParameter(valid_775085, JString, required = false,
                                 default = nil)
  if valid_775085 != nil:
    section.add "X-Amz-Security-Token", valid_775085
  var valid_775086 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775086 = validateParameter(valid_775086, JString, required = false,
                                 default = nil)
  if valid_775086 != nil:
    section.add "X-Amz-Content-Sha256", valid_775086
  var valid_775087 = header.getOrDefault("X-Amz-Algorithm")
  valid_775087 = validateParameter(valid_775087, JString, required = false,
                                 default = nil)
  if valid_775087 != nil:
    section.add "X-Amz-Algorithm", valid_775087
  var valid_775088 = header.getOrDefault("X-Amz-Signature")
  valid_775088 = validateParameter(valid_775088, JString, required = false,
                                 default = nil)
  if valid_775088 != nil:
    section.add "X-Amz-Signature", valid_775088
  var valid_775089 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775089 = validateParameter(valid_775089, JString, required = false,
                                 default = nil)
  if valid_775089 != nil:
    section.add "X-Amz-SignedHeaders", valid_775089
  var valid_775090 = header.getOrDefault("X-Amz-Credential")
  valid_775090 = validateParameter(valid_775090, JString, required = false,
                                 default = nil)
  if valid_775090 != nil:
    section.add "X-Amz-Credential", valid_775090
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775091: Call_PostGetAccountPasswordPolicy_775079; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_775091.validator(path, query, header, formData, body)
  let scheme = call_775091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775091.url(scheme.get, call_775091.host, call_775091.base,
                         call_775091.route, valid.getOrDefault("path"))
  result = hook(call_775091, url, valid)

proc call*(call_775092: Call_PostGetAccountPasswordPolicy_775079;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775093 = newJObject()
  add(query_775093, "Action", newJString(Action))
  add(query_775093, "Version", newJString(Version))
  result = call_775092.call(nil, query_775093, nil, nil, nil)

var postGetAccountPasswordPolicy* = Call_PostGetAccountPasswordPolicy_775079(
    name: "postGetAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_PostGetAccountPasswordPolicy_775080, base: "/",
    url: url_PostGetAccountPasswordPolicy_775081,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountPasswordPolicy_775064 = ref object of OpenApiRestCall_772597
proc url_GetGetAccountPasswordPolicy_775066(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccountPasswordPolicy_775065(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775067 = query.getOrDefault("Action")
  valid_775067 = validateParameter(valid_775067, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_775067 != nil:
    section.add "Action", valid_775067
  var valid_775068 = query.getOrDefault("Version")
  valid_775068 = validateParameter(valid_775068, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775068 != nil:
    section.add "Version", valid_775068
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775069 = header.getOrDefault("X-Amz-Date")
  valid_775069 = validateParameter(valid_775069, JString, required = false,
                                 default = nil)
  if valid_775069 != nil:
    section.add "X-Amz-Date", valid_775069
  var valid_775070 = header.getOrDefault("X-Amz-Security-Token")
  valid_775070 = validateParameter(valid_775070, JString, required = false,
                                 default = nil)
  if valid_775070 != nil:
    section.add "X-Amz-Security-Token", valid_775070
  var valid_775071 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775071 = validateParameter(valid_775071, JString, required = false,
                                 default = nil)
  if valid_775071 != nil:
    section.add "X-Amz-Content-Sha256", valid_775071
  var valid_775072 = header.getOrDefault("X-Amz-Algorithm")
  valid_775072 = validateParameter(valid_775072, JString, required = false,
                                 default = nil)
  if valid_775072 != nil:
    section.add "X-Amz-Algorithm", valid_775072
  var valid_775073 = header.getOrDefault("X-Amz-Signature")
  valid_775073 = validateParameter(valid_775073, JString, required = false,
                                 default = nil)
  if valid_775073 != nil:
    section.add "X-Amz-Signature", valid_775073
  var valid_775074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775074 = validateParameter(valid_775074, JString, required = false,
                                 default = nil)
  if valid_775074 != nil:
    section.add "X-Amz-SignedHeaders", valid_775074
  var valid_775075 = header.getOrDefault("X-Amz-Credential")
  valid_775075 = validateParameter(valid_775075, JString, required = false,
                                 default = nil)
  if valid_775075 != nil:
    section.add "X-Amz-Credential", valid_775075
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775076: Call_GetGetAccountPasswordPolicy_775064; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_775076.validator(path, query, header, formData, body)
  let scheme = call_775076.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775076.url(scheme.get, call_775076.host, call_775076.base,
                         call_775076.route, valid.getOrDefault("path"))
  result = hook(call_775076, url, valid)

proc call*(call_775077: Call_GetGetAccountPasswordPolicy_775064;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775078 = newJObject()
  add(query_775078, "Action", newJString(Action))
  add(query_775078, "Version", newJString(Version))
  result = call_775077.call(nil, query_775078, nil, nil, nil)

var getGetAccountPasswordPolicy* = Call_GetGetAccountPasswordPolicy_775064(
    name: "getGetAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_GetGetAccountPasswordPolicy_775065, base: "/",
    url: url_GetGetAccountPasswordPolicy_775066,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSummary_775109 = ref object of OpenApiRestCall_772597
proc url_PostGetAccountSummary_775111(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccountSummary_775110(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775112 = query.getOrDefault("Action")
  valid_775112 = validateParameter(valid_775112, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_775112 != nil:
    section.add "Action", valid_775112
  var valid_775113 = query.getOrDefault("Version")
  valid_775113 = validateParameter(valid_775113, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775113 != nil:
    section.add "Version", valid_775113
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775114 = header.getOrDefault("X-Amz-Date")
  valid_775114 = validateParameter(valid_775114, JString, required = false,
                                 default = nil)
  if valid_775114 != nil:
    section.add "X-Amz-Date", valid_775114
  var valid_775115 = header.getOrDefault("X-Amz-Security-Token")
  valid_775115 = validateParameter(valid_775115, JString, required = false,
                                 default = nil)
  if valid_775115 != nil:
    section.add "X-Amz-Security-Token", valid_775115
  var valid_775116 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775116 = validateParameter(valid_775116, JString, required = false,
                                 default = nil)
  if valid_775116 != nil:
    section.add "X-Amz-Content-Sha256", valid_775116
  var valid_775117 = header.getOrDefault("X-Amz-Algorithm")
  valid_775117 = validateParameter(valid_775117, JString, required = false,
                                 default = nil)
  if valid_775117 != nil:
    section.add "X-Amz-Algorithm", valid_775117
  var valid_775118 = header.getOrDefault("X-Amz-Signature")
  valid_775118 = validateParameter(valid_775118, JString, required = false,
                                 default = nil)
  if valid_775118 != nil:
    section.add "X-Amz-Signature", valid_775118
  var valid_775119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775119 = validateParameter(valid_775119, JString, required = false,
                                 default = nil)
  if valid_775119 != nil:
    section.add "X-Amz-SignedHeaders", valid_775119
  var valid_775120 = header.getOrDefault("X-Amz-Credential")
  valid_775120 = validateParameter(valid_775120, JString, required = false,
                                 default = nil)
  if valid_775120 != nil:
    section.add "X-Amz-Credential", valid_775120
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775121: Call_PostGetAccountSummary_775109; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_775121.validator(path, query, header, formData, body)
  let scheme = call_775121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775121.url(scheme.get, call_775121.host, call_775121.base,
                         call_775121.route, valid.getOrDefault("path"))
  result = hook(call_775121, url, valid)

proc call*(call_775122: Call_PostGetAccountSummary_775109;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775123 = newJObject()
  add(query_775123, "Action", newJString(Action))
  add(query_775123, "Version", newJString(Version))
  result = call_775122.call(nil, query_775123, nil, nil, nil)

var postGetAccountSummary* = Call_PostGetAccountSummary_775109(
    name: "postGetAccountSummary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_PostGetAccountSummary_775110, base: "/",
    url: url_PostGetAccountSummary_775111, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSummary_775094 = ref object of OpenApiRestCall_772597
proc url_GetGetAccountSummary_775096(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccountSummary_775095(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775097 = query.getOrDefault("Action")
  valid_775097 = validateParameter(valid_775097, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_775097 != nil:
    section.add "Action", valid_775097
  var valid_775098 = query.getOrDefault("Version")
  valid_775098 = validateParameter(valid_775098, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775098 != nil:
    section.add "Version", valid_775098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775099 = header.getOrDefault("X-Amz-Date")
  valid_775099 = validateParameter(valid_775099, JString, required = false,
                                 default = nil)
  if valid_775099 != nil:
    section.add "X-Amz-Date", valid_775099
  var valid_775100 = header.getOrDefault("X-Amz-Security-Token")
  valid_775100 = validateParameter(valid_775100, JString, required = false,
                                 default = nil)
  if valid_775100 != nil:
    section.add "X-Amz-Security-Token", valid_775100
  var valid_775101 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775101 = validateParameter(valid_775101, JString, required = false,
                                 default = nil)
  if valid_775101 != nil:
    section.add "X-Amz-Content-Sha256", valid_775101
  var valid_775102 = header.getOrDefault("X-Amz-Algorithm")
  valid_775102 = validateParameter(valid_775102, JString, required = false,
                                 default = nil)
  if valid_775102 != nil:
    section.add "X-Amz-Algorithm", valid_775102
  var valid_775103 = header.getOrDefault("X-Amz-Signature")
  valid_775103 = validateParameter(valid_775103, JString, required = false,
                                 default = nil)
  if valid_775103 != nil:
    section.add "X-Amz-Signature", valid_775103
  var valid_775104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775104 = validateParameter(valid_775104, JString, required = false,
                                 default = nil)
  if valid_775104 != nil:
    section.add "X-Amz-SignedHeaders", valid_775104
  var valid_775105 = header.getOrDefault("X-Amz-Credential")
  valid_775105 = validateParameter(valid_775105, JString, required = false,
                                 default = nil)
  if valid_775105 != nil:
    section.add "X-Amz-Credential", valid_775105
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775106: Call_GetGetAccountSummary_775094; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_775106.validator(path, query, header, formData, body)
  let scheme = call_775106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775106.url(scheme.get, call_775106.host, call_775106.base,
                         call_775106.route, valid.getOrDefault("path"))
  result = hook(call_775106, url, valid)

proc call*(call_775107: Call_GetGetAccountSummary_775094;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775108 = newJObject()
  add(query_775108, "Action", newJString(Action))
  add(query_775108, "Version", newJString(Version))
  result = call_775107.call(nil, query_775108, nil, nil, nil)

var getGetAccountSummary* = Call_GetGetAccountSummary_775094(
    name: "getGetAccountSummary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_GetGetAccountSummary_775095, base: "/",
    url: url_GetGetAccountSummary_775096, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForCustomPolicy_775140 = ref object of OpenApiRestCall_772597
proc url_PostGetContextKeysForCustomPolicy_775142(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetContextKeysForCustomPolicy_775141(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775143 = query.getOrDefault("Action")
  valid_775143 = validateParameter(valid_775143, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_775143 != nil:
    section.add "Action", valid_775143
  var valid_775144 = query.getOrDefault("Version")
  valid_775144 = validateParameter(valid_775144, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775144 != nil:
    section.add "Version", valid_775144
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775145 = header.getOrDefault("X-Amz-Date")
  valid_775145 = validateParameter(valid_775145, JString, required = false,
                                 default = nil)
  if valid_775145 != nil:
    section.add "X-Amz-Date", valid_775145
  var valid_775146 = header.getOrDefault("X-Amz-Security-Token")
  valid_775146 = validateParameter(valid_775146, JString, required = false,
                                 default = nil)
  if valid_775146 != nil:
    section.add "X-Amz-Security-Token", valid_775146
  var valid_775147 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775147 = validateParameter(valid_775147, JString, required = false,
                                 default = nil)
  if valid_775147 != nil:
    section.add "X-Amz-Content-Sha256", valid_775147
  var valid_775148 = header.getOrDefault("X-Amz-Algorithm")
  valid_775148 = validateParameter(valid_775148, JString, required = false,
                                 default = nil)
  if valid_775148 != nil:
    section.add "X-Amz-Algorithm", valid_775148
  var valid_775149 = header.getOrDefault("X-Amz-Signature")
  valid_775149 = validateParameter(valid_775149, JString, required = false,
                                 default = nil)
  if valid_775149 != nil:
    section.add "X-Amz-Signature", valid_775149
  var valid_775150 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775150 = validateParameter(valid_775150, JString, required = false,
                                 default = nil)
  if valid_775150 != nil:
    section.add "X-Amz-SignedHeaders", valid_775150
  var valid_775151 = header.getOrDefault("X-Amz-Credential")
  valid_775151 = validateParameter(valid_775151, JString, required = false,
                                 default = nil)
  if valid_775151 != nil:
    section.add "X-Amz-Credential", valid_775151
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `PolicyInputList` field"
  var valid_775152 = formData.getOrDefault("PolicyInputList")
  valid_775152 = validateParameter(valid_775152, JArray, required = true, default = nil)
  if valid_775152 != nil:
    section.add "PolicyInputList", valid_775152
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775153: Call_PostGetContextKeysForCustomPolicy_775140;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_775153.validator(path, query, header, formData, body)
  let scheme = call_775153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775153.url(scheme.get, call_775153.host, call_775153.base,
                         call_775153.route, valid.getOrDefault("path"))
  result = hook(call_775153, url, valid)

proc call*(call_775154: Call_PostGetContextKeysForCustomPolicy_775140;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   Action: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_775155 = newJObject()
  var formData_775156 = newJObject()
  add(query_775155, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_775156.add "PolicyInputList", PolicyInputList
  add(query_775155, "Version", newJString(Version))
  result = call_775154.call(nil, query_775155, nil, formData_775156, nil)

var postGetContextKeysForCustomPolicy* = Call_PostGetContextKeysForCustomPolicy_775140(
    name: "postGetContextKeysForCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_PostGetContextKeysForCustomPolicy_775141, base: "/",
    url: url_PostGetContextKeysForCustomPolicy_775142,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForCustomPolicy_775124 = ref object of OpenApiRestCall_772597
proc url_GetGetContextKeysForCustomPolicy_775126(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetContextKeysForCustomPolicy_775125(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyInputList` field"
  var valid_775127 = query.getOrDefault("PolicyInputList")
  valid_775127 = validateParameter(valid_775127, JArray, required = true, default = nil)
  if valid_775127 != nil:
    section.add "PolicyInputList", valid_775127
  var valid_775128 = query.getOrDefault("Action")
  valid_775128 = validateParameter(valid_775128, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_775128 != nil:
    section.add "Action", valid_775128
  var valid_775129 = query.getOrDefault("Version")
  valid_775129 = validateParameter(valid_775129, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775129 != nil:
    section.add "Version", valid_775129
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775130 = header.getOrDefault("X-Amz-Date")
  valid_775130 = validateParameter(valid_775130, JString, required = false,
                                 default = nil)
  if valid_775130 != nil:
    section.add "X-Amz-Date", valid_775130
  var valid_775131 = header.getOrDefault("X-Amz-Security-Token")
  valid_775131 = validateParameter(valid_775131, JString, required = false,
                                 default = nil)
  if valid_775131 != nil:
    section.add "X-Amz-Security-Token", valid_775131
  var valid_775132 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775132 = validateParameter(valid_775132, JString, required = false,
                                 default = nil)
  if valid_775132 != nil:
    section.add "X-Amz-Content-Sha256", valid_775132
  var valid_775133 = header.getOrDefault("X-Amz-Algorithm")
  valid_775133 = validateParameter(valid_775133, JString, required = false,
                                 default = nil)
  if valid_775133 != nil:
    section.add "X-Amz-Algorithm", valid_775133
  var valid_775134 = header.getOrDefault("X-Amz-Signature")
  valid_775134 = validateParameter(valid_775134, JString, required = false,
                                 default = nil)
  if valid_775134 != nil:
    section.add "X-Amz-Signature", valid_775134
  var valid_775135 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775135 = validateParameter(valid_775135, JString, required = false,
                                 default = nil)
  if valid_775135 != nil:
    section.add "X-Amz-SignedHeaders", valid_775135
  var valid_775136 = header.getOrDefault("X-Amz-Credential")
  valid_775136 = validateParameter(valid_775136, JString, required = false,
                                 default = nil)
  if valid_775136 != nil:
    section.add "X-Amz-Credential", valid_775136
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775137: Call_GetGetContextKeysForCustomPolicy_775124;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_775137.validator(path, query, header, formData, body)
  let scheme = call_775137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775137.url(scheme.get, call_775137.host, call_775137.base,
                         call_775137.route, valid.getOrDefault("path"))
  result = hook(call_775137, url, valid)

proc call*(call_775138: Call_GetGetContextKeysForCustomPolicy_775124;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775139 = newJObject()
  if PolicyInputList != nil:
    query_775139.add "PolicyInputList", PolicyInputList
  add(query_775139, "Action", newJString(Action))
  add(query_775139, "Version", newJString(Version))
  result = call_775138.call(nil, query_775139, nil, nil, nil)

var getGetContextKeysForCustomPolicy* = Call_GetGetContextKeysForCustomPolicy_775124(
    name: "getGetContextKeysForCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_GetGetContextKeysForCustomPolicy_775125, base: "/",
    url: url_GetGetContextKeysForCustomPolicy_775126,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForPrincipalPolicy_775174 = ref object of OpenApiRestCall_772597
proc url_PostGetContextKeysForPrincipalPolicy_775176(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetContextKeysForPrincipalPolicy_775175(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775177 = query.getOrDefault("Action")
  valid_775177 = validateParameter(valid_775177, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_775177 != nil:
    section.add "Action", valid_775177
  var valid_775178 = query.getOrDefault("Version")
  valid_775178 = validateParameter(valid_775178, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775178 != nil:
    section.add "Version", valid_775178
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775179 = header.getOrDefault("X-Amz-Date")
  valid_775179 = validateParameter(valid_775179, JString, required = false,
                                 default = nil)
  if valid_775179 != nil:
    section.add "X-Amz-Date", valid_775179
  var valid_775180 = header.getOrDefault("X-Amz-Security-Token")
  valid_775180 = validateParameter(valid_775180, JString, required = false,
                                 default = nil)
  if valid_775180 != nil:
    section.add "X-Amz-Security-Token", valid_775180
  var valid_775181 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775181 = validateParameter(valid_775181, JString, required = false,
                                 default = nil)
  if valid_775181 != nil:
    section.add "X-Amz-Content-Sha256", valid_775181
  var valid_775182 = header.getOrDefault("X-Amz-Algorithm")
  valid_775182 = validateParameter(valid_775182, JString, required = false,
                                 default = nil)
  if valid_775182 != nil:
    section.add "X-Amz-Algorithm", valid_775182
  var valid_775183 = header.getOrDefault("X-Amz-Signature")
  valid_775183 = validateParameter(valid_775183, JString, required = false,
                                 default = nil)
  if valid_775183 != nil:
    section.add "X-Amz-Signature", valid_775183
  var valid_775184 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775184 = validateParameter(valid_775184, JString, required = false,
                                 default = nil)
  if valid_775184 != nil:
    section.add "X-Amz-SignedHeaders", valid_775184
  var valid_775185 = header.getOrDefault("X-Amz-Credential")
  valid_775185 = validateParameter(valid_775185, JString, required = false,
                                 default = nil)
  if valid_775185 != nil:
    section.add "X-Amz-Credential", valid_775185
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  var valid_775186 = formData.getOrDefault("PolicyInputList")
  valid_775186 = validateParameter(valid_775186, JArray, required = false,
                                 default = nil)
  if valid_775186 != nil:
    section.add "PolicyInputList", valid_775186
  assert formData != nil, "formData argument is necessary due to required `PolicySourceArn` field"
  var valid_775187 = formData.getOrDefault("PolicySourceArn")
  valid_775187 = validateParameter(valid_775187, JString, required = true,
                                 default = nil)
  if valid_775187 != nil:
    section.add "PolicySourceArn", valid_775187
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775188: Call_PostGetContextKeysForPrincipalPolicy_775174;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_775188.validator(path, query, header, formData, body)
  let scheme = call_775188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775188.url(scheme.get, call_775188.host, call_775188.base,
                         call_775188.route, valid.getOrDefault("path"))
  result = hook(call_775188, url, valid)

proc call*(call_775189: Call_PostGetContextKeysForPrincipalPolicy_775174;
          PolicySourceArn: string;
          Action: string = "GetContextKeysForPrincipalPolicy";
          PolicyInputList: JsonNode = nil; Version: string = "2010-05-08"): Recallable =
  ## postGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   Action: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_775190 = newJObject()
  var formData_775191 = newJObject()
  add(query_775190, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_775191.add "PolicyInputList", PolicyInputList
  add(formData_775191, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_775190, "Version", newJString(Version))
  result = call_775189.call(nil, query_775190, nil, formData_775191, nil)

var postGetContextKeysForPrincipalPolicy* = Call_PostGetContextKeysForPrincipalPolicy_775174(
    name: "postGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_PostGetContextKeysForPrincipalPolicy_775175, base: "/",
    url: url_PostGetContextKeysForPrincipalPolicy_775176,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForPrincipalPolicy_775157 = ref object of OpenApiRestCall_772597
proc url_GetGetContextKeysForPrincipalPolicy_775159(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetContextKeysForPrincipalPolicy_775158(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_775160 = query.getOrDefault("PolicyInputList")
  valid_775160 = validateParameter(valid_775160, JArray, required = false,
                                 default = nil)
  if valid_775160 != nil:
    section.add "PolicyInputList", valid_775160
  assert query != nil,
        "query argument is necessary due to required `PolicySourceArn` field"
  var valid_775161 = query.getOrDefault("PolicySourceArn")
  valid_775161 = validateParameter(valid_775161, JString, required = true,
                                 default = nil)
  if valid_775161 != nil:
    section.add "PolicySourceArn", valid_775161
  var valid_775162 = query.getOrDefault("Action")
  valid_775162 = validateParameter(valid_775162, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_775162 != nil:
    section.add "Action", valid_775162
  var valid_775163 = query.getOrDefault("Version")
  valid_775163 = validateParameter(valid_775163, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775163 != nil:
    section.add "Version", valid_775163
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775164 = header.getOrDefault("X-Amz-Date")
  valid_775164 = validateParameter(valid_775164, JString, required = false,
                                 default = nil)
  if valid_775164 != nil:
    section.add "X-Amz-Date", valid_775164
  var valid_775165 = header.getOrDefault("X-Amz-Security-Token")
  valid_775165 = validateParameter(valid_775165, JString, required = false,
                                 default = nil)
  if valid_775165 != nil:
    section.add "X-Amz-Security-Token", valid_775165
  var valid_775166 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775166 = validateParameter(valid_775166, JString, required = false,
                                 default = nil)
  if valid_775166 != nil:
    section.add "X-Amz-Content-Sha256", valid_775166
  var valid_775167 = header.getOrDefault("X-Amz-Algorithm")
  valid_775167 = validateParameter(valid_775167, JString, required = false,
                                 default = nil)
  if valid_775167 != nil:
    section.add "X-Amz-Algorithm", valid_775167
  var valid_775168 = header.getOrDefault("X-Amz-Signature")
  valid_775168 = validateParameter(valid_775168, JString, required = false,
                                 default = nil)
  if valid_775168 != nil:
    section.add "X-Amz-Signature", valid_775168
  var valid_775169 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775169 = validateParameter(valid_775169, JString, required = false,
                                 default = nil)
  if valid_775169 != nil:
    section.add "X-Amz-SignedHeaders", valid_775169
  var valid_775170 = header.getOrDefault("X-Amz-Credential")
  valid_775170 = validateParameter(valid_775170, JString, required = false,
                                 default = nil)
  if valid_775170 != nil:
    section.add "X-Amz-Credential", valid_775170
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775171: Call_GetGetContextKeysForPrincipalPolicy_775157;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_775171.validator(path, query, header, formData, body)
  let scheme = call_775171.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775171.url(scheme.get, call_775171.host, call_775171.base,
                         call_775171.route, valid.getOrDefault("path"))
  result = hook(call_775171, url, valid)

proc call*(call_775172: Call_GetGetContextKeysForPrincipalPolicy_775157;
          PolicySourceArn: string; PolicyInputList: JsonNode = nil;
          Action: string = "GetContextKeysForPrincipalPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775173 = newJObject()
  if PolicyInputList != nil:
    query_775173.add "PolicyInputList", PolicyInputList
  add(query_775173, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_775173, "Action", newJString(Action))
  add(query_775173, "Version", newJString(Version))
  result = call_775172.call(nil, query_775173, nil, nil, nil)

var getGetContextKeysForPrincipalPolicy* = Call_GetGetContextKeysForPrincipalPolicy_775157(
    name: "getGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_GetGetContextKeysForPrincipalPolicy_775158, base: "/",
    url: url_GetGetContextKeysForPrincipalPolicy_775159,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCredentialReport_775207 = ref object of OpenApiRestCall_772597
proc url_PostGetCredentialReport_775209(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetCredentialReport_775208(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775210 = query.getOrDefault("Action")
  valid_775210 = validateParameter(valid_775210, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_775210 != nil:
    section.add "Action", valid_775210
  var valid_775211 = query.getOrDefault("Version")
  valid_775211 = validateParameter(valid_775211, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775211 != nil:
    section.add "Version", valid_775211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775212 = header.getOrDefault("X-Amz-Date")
  valid_775212 = validateParameter(valid_775212, JString, required = false,
                                 default = nil)
  if valid_775212 != nil:
    section.add "X-Amz-Date", valid_775212
  var valid_775213 = header.getOrDefault("X-Amz-Security-Token")
  valid_775213 = validateParameter(valid_775213, JString, required = false,
                                 default = nil)
  if valid_775213 != nil:
    section.add "X-Amz-Security-Token", valid_775213
  var valid_775214 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775214 = validateParameter(valid_775214, JString, required = false,
                                 default = nil)
  if valid_775214 != nil:
    section.add "X-Amz-Content-Sha256", valid_775214
  var valid_775215 = header.getOrDefault("X-Amz-Algorithm")
  valid_775215 = validateParameter(valid_775215, JString, required = false,
                                 default = nil)
  if valid_775215 != nil:
    section.add "X-Amz-Algorithm", valid_775215
  var valid_775216 = header.getOrDefault("X-Amz-Signature")
  valid_775216 = validateParameter(valid_775216, JString, required = false,
                                 default = nil)
  if valid_775216 != nil:
    section.add "X-Amz-Signature", valid_775216
  var valid_775217 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775217 = validateParameter(valid_775217, JString, required = false,
                                 default = nil)
  if valid_775217 != nil:
    section.add "X-Amz-SignedHeaders", valid_775217
  var valid_775218 = header.getOrDefault("X-Amz-Credential")
  valid_775218 = validateParameter(valid_775218, JString, required = false,
                                 default = nil)
  if valid_775218 != nil:
    section.add "X-Amz-Credential", valid_775218
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775219: Call_PostGetCredentialReport_775207; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_775219.validator(path, query, header, formData, body)
  let scheme = call_775219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775219.url(scheme.get, call_775219.host, call_775219.base,
                         call_775219.route, valid.getOrDefault("path"))
  result = hook(call_775219, url, valid)

proc call*(call_775220: Call_PostGetCredentialReport_775207;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## postGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775221 = newJObject()
  add(query_775221, "Action", newJString(Action))
  add(query_775221, "Version", newJString(Version))
  result = call_775220.call(nil, query_775221, nil, nil, nil)

var postGetCredentialReport* = Call_PostGetCredentialReport_775207(
    name: "postGetCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_PostGetCredentialReport_775208, base: "/",
    url: url_PostGetCredentialReport_775209, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCredentialReport_775192 = ref object of OpenApiRestCall_772597
proc url_GetGetCredentialReport_775194(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetCredentialReport_775193(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775195 = query.getOrDefault("Action")
  valid_775195 = validateParameter(valid_775195, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_775195 != nil:
    section.add "Action", valid_775195
  var valid_775196 = query.getOrDefault("Version")
  valid_775196 = validateParameter(valid_775196, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775196 != nil:
    section.add "Version", valid_775196
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775197 = header.getOrDefault("X-Amz-Date")
  valid_775197 = validateParameter(valid_775197, JString, required = false,
                                 default = nil)
  if valid_775197 != nil:
    section.add "X-Amz-Date", valid_775197
  var valid_775198 = header.getOrDefault("X-Amz-Security-Token")
  valid_775198 = validateParameter(valid_775198, JString, required = false,
                                 default = nil)
  if valid_775198 != nil:
    section.add "X-Amz-Security-Token", valid_775198
  var valid_775199 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775199 = validateParameter(valid_775199, JString, required = false,
                                 default = nil)
  if valid_775199 != nil:
    section.add "X-Amz-Content-Sha256", valid_775199
  var valid_775200 = header.getOrDefault("X-Amz-Algorithm")
  valid_775200 = validateParameter(valid_775200, JString, required = false,
                                 default = nil)
  if valid_775200 != nil:
    section.add "X-Amz-Algorithm", valid_775200
  var valid_775201 = header.getOrDefault("X-Amz-Signature")
  valid_775201 = validateParameter(valid_775201, JString, required = false,
                                 default = nil)
  if valid_775201 != nil:
    section.add "X-Amz-Signature", valid_775201
  var valid_775202 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775202 = validateParameter(valid_775202, JString, required = false,
                                 default = nil)
  if valid_775202 != nil:
    section.add "X-Amz-SignedHeaders", valid_775202
  var valid_775203 = header.getOrDefault("X-Amz-Credential")
  valid_775203 = validateParameter(valid_775203, JString, required = false,
                                 default = nil)
  if valid_775203 != nil:
    section.add "X-Amz-Credential", valid_775203
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775204: Call_GetGetCredentialReport_775192; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_775204.validator(path, query, header, formData, body)
  let scheme = call_775204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775204.url(scheme.get, call_775204.host, call_775204.base,
                         call_775204.route, valid.getOrDefault("path"))
  result = hook(call_775204, url, valid)

proc call*(call_775205: Call_GetGetCredentialReport_775192;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## getGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775206 = newJObject()
  add(query_775206, "Action", newJString(Action))
  add(query_775206, "Version", newJString(Version))
  result = call_775205.call(nil, query_775206, nil, nil, nil)

var getGetCredentialReport* = Call_GetGetCredentialReport_775192(
    name: "getGetCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_GetGetCredentialReport_775193, base: "/",
    url: url_GetGetCredentialReport_775194, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroup_775240 = ref object of OpenApiRestCall_772597
proc url_PostGetGroup_775242(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetGroup_775241(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775243 = query.getOrDefault("Action")
  valid_775243 = validateParameter(valid_775243, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_775243 != nil:
    section.add "Action", valid_775243
  var valid_775244 = query.getOrDefault("Version")
  valid_775244 = validateParameter(valid_775244, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775244 != nil:
    section.add "Version", valid_775244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775245 = header.getOrDefault("X-Amz-Date")
  valid_775245 = validateParameter(valid_775245, JString, required = false,
                                 default = nil)
  if valid_775245 != nil:
    section.add "X-Amz-Date", valid_775245
  var valid_775246 = header.getOrDefault("X-Amz-Security-Token")
  valid_775246 = validateParameter(valid_775246, JString, required = false,
                                 default = nil)
  if valid_775246 != nil:
    section.add "X-Amz-Security-Token", valid_775246
  var valid_775247 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775247 = validateParameter(valid_775247, JString, required = false,
                                 default = nil)
  if valid_775247 != nil:
    section.add "X-Amz-Content-Sha256", valid_775247
  var valid_775248 = header.getOrDefault("X-Amz-Algorithm")
  valid_775248 = validateParameter(valid_775248, JString, required = false,
                                 default = nil)
  if valid_775248 != nil:
    section.add "X-Amz-Algorithm", valid_775248
  var valid_775249 = header.getOrDefault("X-Amz-Signature")
  valid_775249 = validateParameter(valid_775249, JString, required = false,
                                 default = nil)
  if valid_775249 != nil:
    section.add "X-Amz-Signature", valid_775249
  var valid_775250 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775250 = validateParameter(valid_775250, JString, required = false,
                                 default = nil)
  if valid_775250 != nil:
    section.add "X-Amz-SignedHeaders", valid_775250
  var valid_775251 = header.getOrDefault("X-Amz-Credential")
  valid_775251 = validateParameter(valid_775251, JString, required = false,
                                 default = nil)
  if valid_775251 != nil:
    section.add "X-Amz-Credential", valid_775251
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_775252 = formData.getOrDefault("GroupName")
  valid_775252 = validateParameter(valid_775252, JString, required = true,
                                 default = nil)
  if valid_775252 != nil:
    section.add "GroupName", valid_775252
  var valid_775253 = formData.getOrDefault("Marker")
  valid_775253 = validateParameter(valid_775253, JString, required = false,
                                 default = nil)
  if valid_775253 != nil:
    section.add "Marker", valid_775253
  var valid_775254 = formData.getOrDefault("MaxItems")
  valid_775254 = validateParameter(valid_775254, JInt, required = false, default = nil)
  if valid_775254 != nil:
    section.add "MaxItems", valid_775254
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775255: Call_PostGetGroup_775240; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_775255.validator(path, query, header, formData, body)
  let scheme = call_775255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775255.url(scheme.get, call_775255.host, call_775255.base,
                         call_775255.route, valid.getOrDefault("path"))
  result = hook(call_775255, url, valid)

proc call*(call_775256: Call_PostGetGroup_775240; GroupName: string;
          Marker: string = ""; Action: string = "GetGroup"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775257 = newJObject()
  var formData_775258 = newJObject()
  add(formData_775258, "GroupName", newJString(GroupName))
  add(formData_775258, "Marker", newJString(Marker))
  add(query_775257, "Action", newJString(Action))
  add(formData_775258, "MaxItems", newJInt(MaxItems))
  add(query_775257, "Version", newJString(Version))
  result = call_775256.call(nil, query_775257, nil, formData_775258, nil)

var postGetGroup* = Call_PostGetGroup_775240(name: "postGetGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetGroup", validator: validate_PostGetGroup_775241, base: "/",
    url: url_PostGetGroup_775242, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroup_775222 = ref object of OpenApiRestCall_772597
proc url_GetGetGroup_775224(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetGroup_775223(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775225 = query.getOrDefault("Action")
  valid_775225 = validateParameter(valid_775225, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_775225 != nil:
    section.add "Action", valid_775225
  var valid_775226 = query.getOrDefault("Marker")
  valid_775226 = validateParameter(valid_775226, JString, required = false,
                                 default = nil)
  if valid_775226 != nil:
    section.add "Marker", valid_775226
  var valid_775227 = query.getOrDefault("GroupName")
  valid_775227 = validateParameter(valid_775227, JString, required = true,
                                 default = nil)
  if valid_775227 != nil:
    section.add "GroupName", valid_775227
  var valid_775228 = query.getOrDefault("MaxItems")
  valid_775228 = validateParameter(valid_775228, JInt, required = false, default = nil)
  if valid_775228 != nil:
    section.add "MaxItems", valid_775228
  var valid_775229 = query.getOrDefault("Version")
  valid_775229 = validateParameter(valid_775229, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775229 != nil:
    section.add "Version", valid_775229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775230 = header.getOrDefault("X-Amz-Date")
  valid_775230 = validateParameter(valid_775230, JString, required = false,
                                 default = nil)
  if valid_775230 != nil:
    section.add "X-Amz-Date", valid_775230
  var valid_775231 = header.getOrDefault("X-Amz-Security-Token")
  valid_775231 = validateParameter(valid_775231, JString, required = false,
                                 default = nil)
  if valid_775231 != nil:
    section.add "X-Amz-Security-Token", valid_775231
  var valid_775232 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775232 = validateParameter(valid_775232, JString, required = false,
                                 default = nil)
  if valid_775232 != nil:
    section.add "X-Amz-Content-Sha256", valid_775232
  var valid_775233 = header.getOrDefault("X-Amz-Algorithm")
  valid_775233 = validateParameter(valid_775233, JString, required = false,
                                 default = nil)
  if valid_775233 != nil:
    section.add "X-Amz-Algorithm", valid_775233
  var valid_775234 = header.getOrDefault("X-Amz-Signature")
  valid_775234 = validateParameter(valid_775234, JString, required = false,
                                 default = nil)
  if valid_775234 != nil:
    section.add "X-Amz-Signature", valid_775234
  var valid_775235 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775235 = validateParameter(valid_775235, JString, required = false,
                                 default = nil)
  if valid_775235 != nil:
    section.add "X-Amz-SignedHeaders", valid_775235
  var valid_775236 = header.getOrDefault("X-Amz-Credential")
  valid_775236 = validateParameter(valid_775236, JString, required = false,
                                 default = nil)
  if valid_775236 != nil:
    section.add "X-Amz-Credential", valid_775236
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775237: Call_GetGetGroup_775222; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_775237.validator(path, query, header, formData, body)
  let scheme = call_775237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775237.url(scheme.get, call_775237.host, call_775237.base,
                         call_775237.route, valid.getOrDefault("path"))
  result = hook(call_775237, url, valid)

proc call*(call_775238: Call_GetGetGroup_775222; GroupName: string;
          Action: string = "GetGroup"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775239 = newJObject()
  add(query_775239, "Action", newJString(Action))
  add(query_775239, "Marker", newJString(Marker))
  add(query_775239, "GroupName", newJString(GroupName))
  add(query_775239, "MaxItems", newJInt(MaxItems))
  add(query_775239, "Version", newJString(Version))
  result = call_775238.call(nil, query_775239, nil, nil, nil)

var getGetGroup* = Call_GetGetGroup_775222(name: "getGetGroup",
                                        meth: HttpMethod.HttpGet,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetGroup",
                                        validator: validate_GetGetGroup_775223,
                                        base: "/", url: url_GetGetGroup_775224,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroupPolicy_775276 = ref object of OpenApiRestCall_772597
proc url_PostGetGroupPolicy_775278(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetGroupPolicy_775277(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775279 = query.getOrDefault("Action")
  valid_775279 = validateParameter(valid_775279, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_775279 != nil:
    section.add "Action", valid_775279
  var valid_775280 = query.getOrDefault("Version")
  valid_775280 = validateParameter(valid_775280, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775280 != nil:
    section.add "Version", valid_775280
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775281 = header.getOrDefault("X-Amz-Date")
  valid_775281 = validateParameter(valid_775281, JString, required = false,
                                 default = nil)
  if valid_775281 != nil:
    section.add "X-Amz-Date", valid_775281
  var valid_775282 = header.getOrDefault("X-Amz-Security-Token")
  valid_775282 = validateParameter(valid_775282, JString, required = false,
                                 default = nil)
  if valid_775282 != nil:
    section.add "X-Amz-Security-Token", valid_775282
  var valid_775283 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775283 = validateParameter(valid_775283, JString, required = false,
                                 default = nil)
  if valid_775283 != nil:
    section.add "X-Amz-Content-Sha256", valid_775283
  var valid_775284 = header.getOrDefault("X-Amz-Algorithm")
  valid_775284 = validateParameter(valid_775284, JString, required = false,
                                 default = nil)
  if valid_775284 != nil:
    section.add "X-Amz-Algorithm", valid_775284
  var valid_775285 = header.getOrDefault("X-Amz-Signature")
  valid_775285 = validateParameter(valid_775285, JString, required = false,
                                 default = nil)
  if valid_775285 != nil:
    section.add "X-Amz-Signature", valid_775285
  var valid_775286 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775286 = validateParameter(valid_775286, JString, required = false,
                                 default = nil)
  if valid_775286 != nil:
    section.add "X-Amz-SignedHeaders", valid_775286
  var valid_775287 = header.getOrDefault("X-Amz-Credential")
  valid_775287 = validateParameter(valid_775287, JString, required = false,
                                 default = nil)
  if valid_775287 != nil:
    section.add "X-Amz-Credential", valid_775287
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_775288 = formData.getOrDefault("PolicyName")
  valid_775288 = validateParameter(valid_775288, JString, required = true,
                                 default = nil)
  if valid_775288 != nil:
    section.add "PolicyName", valid_775288
  var valid_775289 = formData.getOrDefault("GroupName")
  valid_775289 = validateParameter(valid_775289, JString, required = true,
                                 default = nil)
  if valid_775289 != nil:
    section.add "GroupName", valid_775289
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775290: Call_PostGetGroupPolicy_775276; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_775290.validator(path, query, header, formData, body)
  let scheme = call_775290.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775290.url(scheme.get, call_775290.host, call_775290.base,
                         call_775290.route, valid.getOrDefault("path"))
  result = hook(call_775290, url, valid)

proc call*(call_775291: Call_PostGetGroupPolicy_775276; PolicyName: string;
          GroupName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775292 = newJObject()
  var formData_775293 = newJObject()
  add(formData_775293, "PolicyName", newJString(PolicyName))
  add(formData_775293, "GroupName", newJString(GroupName))
  add(query_775292, "Action", newJString(Action))
  add(query_775292, "Version", newJString(Version))
  result = call_775291.call(nil, query_775292, nil, formData_775293, nil)

var postGetGroupPolicy* = Call_PostGetGroupPolicy_775276(
    name: "postGetGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetGroupPolicy",
    validator: validate_PostGetGroupPolicy_775277, base: "/",
    url: url_PostGetGroupPolicy_775278, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroupPolicy_775259 = ref object of OpenApiRestCall_772597
proc url_GetGetGroupPolicy_775261(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetGroupPolicy_775260(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775262 = query.getOrDefault("Action")
  valid_775262 = validateParameter(valid_775262, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_775262 != nil:
    section.add "Action", valid_775262
  var valid_775263 = query.getOrDefault("GroupName")
  valid_775263 = validateParameter(valid_775263, JString, required = true,
                                 default = nil)
  if valid_775263 != nil:
    section.add "GroupName", valid_775263
  var valid_775264 = query.getOrDefault("Version")
  valid_775264 = validateParameter(valid_775264, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775264 != nil:
    section.add "Version", valid_775264
  var valid_775265 = query.getOrDefault("PolicyName")
  valid_775265 = validateParameter(valid_775265, JString, required = true,
                                 default = nil)
  if valid_775265 != nil:
    section.add "PolicyName", valid_775265
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775266 = header.getOrDefault("X-Amz-Date")
  valid_775266 = validateParameter(valid_775266, JString, required = false,
                                 default = nil)
  if valid_775266 != nil:
    section.add "X-Amz-Date", valid_775266
  var valid_775267 = header.getOrDefault("X-Amz-Security-Token")
  valid_775267 = validateParameter(valid_775267, JString, required = false,
                                 default = nil)
  if valid_775267 != nil:
    section.add "X-Amz-Security-Token", valid_775267
  var valid_775268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775268 = validateParameter(valid_775268, JString, required = false,
                                 default = nil)
  if valid_775268 != nil:
    section.add "X-Amz-Content-Sha256", valid_775268
  var valid_775269 = header.getOrDefault("X-Amz-Algorithm")
  valid_775269 = validateParameter(valid_775269, JString, required = false,
                                 default = nil)
  if valid_775269 != nil:
    section.add "X-Amz-Algorithm", valid_775269
  var valid_775270 = header.getOrDefault("X-Amz-Signature")
  valid_775270 = validateParameter(valid_775270, JString, required = false,
                                 default = nil)
  if valid_775270 != nil:
    section.add "X-Amz-Signature", valid_775270
  var valid_775271 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775271 = validateParameter(valid_775271, JString, required = false,
                                 default = nil)
  if valid_775271 != nil:
    section.add "X-Amz-SignedHeaders", valid_775271
  var valid_775272 = header.getOrDefault("X-Amz-Credential")
  valid_775272 = validateParameter(valid_775272, JString, required = false,
                                 default = nil)
  if valid_775272 != nil:
    section.add "X-Amz-Credential", valid_775272
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775273: Call_GetGetGroupPolicy_775259; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_775273.validator(path, query, header, formData, body)
  let scheme = call_775273.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775273.url(scheme.get, call_775273.host, call_775273.base,
                         call_775273.route, valid.getOrDefault("path"))
  result = hook(call_775273, url, valid)

proc call*(call_775274: Call_GetGetGroupPolicy_775259; GroupName: string;
          PolicyName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_775275 = newJObject()
  add(query_775275, "Action", newJString(Action))
  add(query_775275, "GroupName", newJString(GroupName))
  add(query_775275, "Version", newJString(Version))
  add(query_775275, "PolicyName", newJString(PolicyName))
  result = call_775274.call(nil, query_775275, nil, nil, nil)

var getGetGroupPolicy* = Call_GetGetGroupPolicy_775259(name: "getGetGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetGroupPolicy", validator: validate_GetGetGroupPolicy_775260,
    base: "/", url: url_GetGetGroupPolicy_775261,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetInstanceProfile_775310 = ref object of OpenApiRestCall_772597
proc url_PostGetInstanceProfile_775312(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetInstanceProfile_775311(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775313 = query.getOrDefault("Action")
  valid_775313 = validateParameter(valid_775313, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_775313 != nil:
    section.add "Action", valid_775313
  var valid_775314 = query.getOrDefault("Version")
  valid_775314 = validateParameter(valid_775314, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775314 != nil:
    section.add "Version", valid_775314
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775315 = header.getOrDefault("X-Amz-Date")
  valid_775315 = validateParameter(valid_775315, JString, required = false,
                                 default = nil)
  if valid_775315 != nil:
    section.add "X-Amz-Date", valid_775315
  var valid_775316 = header.getOrDefault("X-Amz-Security-Token")
  valid_775316 = validateParameter(valid_775316, JString, required = false,
                                 default = nil)
  if valid_775316 != nil:
    section.add "X-Amz-Security-Token", valid_775316
  var valid_775317 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775317 = validateParameter(valid_775317, JString, required = false,
                                 default = nil)
  if valid_775317 != nil:
    section.add "X-Amz-Content-Sha256", valid_775317
  var valid_775318 = header.getOrDefault("X-Amz-Algorithm")
  valid_775318 = validateParameter(valid_775318, JString, required = false,
                                 default = nil)
  if valid_775318 != nil:
    section.add "X-Amz-Algorithm", valid_775318
  var valid_775319 = header.getOrDefault("X-Amz-Signature")
  valid_775319 = validateParameter(valid_775319, JString, required = false,
                                 default = nil)
  if valid_775319 != nil:
    section.add "X-Amz-Signature", valid_775319
  var valid_775320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775320 = validateParameter(valid_775320, JString, required = false,
                                 default = nil)
  if valid_775320 != nil:
    section.add "X-Amz-SignedHeaders", valid_775320
  var valid_775321 = header.getOrDefault("X-Amz-Credential")
  valid_775321 = validateParameter(valid_775321, JString, required = false,
                                 default = nil)
  if valid_775321 != nil:
    section.add "X-Amz-Credential", valid_775321
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_775322 = formData.getOrDefault("InstanceProfileName")
  valid_775322 = validateParameter(valid_775322, JString, required = true,
                                 default = nil)
  if valid_775322 != nil:
    section.add "InstanceProfileName", valid_775322
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775323: Call_PostGetInstanceProfile_775310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_775323.validator(path, query, header, formData, body)
  let scheme = call_775323.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775323.url(scheme.get, call_775323.host, call_775323.base,
                         call_775323.route, valid.getOrDefault("path"))
  result = hook(call_775323, url, valid)

proc call*(call_775324: Call_PostGetInstanceProfile_775310;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_775325 = newJObject()
  var formData_775326 = newJObject()
  add(query_775325, "Action", newJString(Action))
  add(formData_775326, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_775325, "Version", newJString(Version))
  result = call_775324.call(nil, query_775325, nil, formData_775326, nil)

var postGetInstanceProfile* = Call_PostGetInstanceProfile_775310(
    name: "postGetInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_PostGetInstanceProfile_775311, base: "/",
    url: url_PostGetInstanceProfile_775312, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetInstanceProfile_775294 = ref object of OpenApiRestCall_772597
proc url_GetGetInstanceProfile_775296(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetInstanceProfile_775295(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_775297 = query.getOrDefault("InstanceProfileName")
  valid_775297 = validateParameter(valid_775297, JString, required = true,
                                 default = nil)
  if valid_775297 != nil:
    section.add "InstanceProfileName", valid_775297
  var valid_775298 = query.getOrDefault("Action")
  valid_775298 = validateParameter(valid_775298, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_775298 != nil:
    section.add "Action", valid_775298
  var valid_775299 = query.getOrDefault("Version")
  valid_775299 = validateParameter(valid_775299, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775299 != nil:
    section.add "Version", valid_775299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775300 = header.getOrDefault("X-Amz-Date")
  valid_775300 = validateParameter(valid_775300, JString, required = false,
                                 default = nil)
  if valid_775300 != nil:
    section.add "X-Amz-Date", valid_775300
  var valid_775301 = header.getOrDefault("X-Amz-Security-Token")
  valid_775301 = validateParameter(valid_775301, JString, required = false,
                                 default = nil)
  if valid_775301 != nil:
    section.add "X-Amz-Security-Token", valid_775301
  var valid_775302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775302 = validateParameter(valid_775302, JString, required = false,
                                 default = nil)
  if valid_775302 != nil:
    section.add "X-Amz-Content-Sha256", valid_775302
  var valid_775303 = header.getOrDefault("X-Amz-Algorithm")
  valid_775303 = validateParameter(valid_775303, JString, required = false,
                                 default = nil)
  if valid_775303 != nil:
    section.add "X-Amz-Algorithm", valid_775303
  var valid_775304 = header.getOrDefault("X-Amz-Signature")
  valid_775304 = validateParameter(valid_775304, JString, required = false,
                                 default = nil)
  if valid_775304 != nil:
    section.add "X-Amz-Signature", valid_775304
  var valid_775305 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775305 = validateParameter(valid_775305, JString, required = false,
                                 default = nil)
  if valid_775305 != nil:
    section.add "X-Amz-SignedHeaders", valid_775305
  var valid_775306 = header.getOrDefault("X-Amz-Credential")
  valid_775306 = validateParameter(valid_775306, JString, required = false,
                                 default = nil)
  if valid_775306 != nil:
    section.add "X-Amz-Credential", valid_775306
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775307: Call_GetGetInstanceProfile_775294; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_775307.validator(path, query, header, formData, body)
  let scheme = call_775307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775307.url(scheme.get, call_775307.host, call_775307.base,
                         call_775307.route, valid.getOrDefault("path"))
  result = hook(call_775307, url, valid)

proc call*(call_775308: Call_GetGetInstanceProfile_775294;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775309 = newJObject()
  add(query_775309, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_775309, "Action", newJString(Action))
  add(query_775309, "Version", newJString(Version))
  result = call_775308.call(nil, query_775309, nil, nil, nil)

var getGetInstanceProfile* = Call_GetGetInstanceProfile_775294(
    name: "getGetInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_GetGetInstanceProfile_775295, base: "/",
    url: url_GetGetInstanceProfile_775296, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetLoginProfile_775343 = ref object of OpenApiRestCall_772597
proc url_PostGetLoginProfile_775345(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetLoginProfile_775344(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775346 = query.getOrDefault("Action")
  valid_775346 = validateParameter(valid_775346, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_775346 != nil:
    section.add "Action", valid_775346
  var valid_775347 = query.getOrDefault("Version")
  valid_775347 = validateParameter(valid_775347, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775347 != nil:
    section.add "Version", valid_775347
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775348 = header.getOrDefault("X-Amz-Date")
  valid_775348 = validateParameter(valid_775348, JString, required = false,
                                 default = nil)
  if valid_775348 != nil:
    section.add "X-Amz-Date", valid_775348
  var valid_775349 = header.getOrDefault("X-Amz-Security-Token")
  valid_775349 = validateParameter(valid_775349, JString, required = false,
                                 default = nil)
  if valid_775349 != nil:
    section.add "X-Amz-Security-Token", valid_775349
  var valid_775350 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775350 = validateParameter(valid_775350, JString, required = false,
                                 default = nil)
  if valid_775350 != nil:
    section.add "X-Amz-Content-Sha256", valid_775350
  var valid_775351 = header.getOrDefault("X-Amz-Algorithm")
  valid_775351 = validateParameter(valid_775351, JString, required = false,
                                 default = nil)
  if valid_775351 != nil:
    section.add "X-Amz-Algorithm", valid_775351
  var valid_775352 = header.getOrDefault("X-Amz-Signature")
  valid_775352 = validateParameter(valid_775352, JString, required = false,
                                 default = nil)
  if valid_775352 != nil:
    section.add "X-Amz-Signature", valid_775352
  var valid_775353 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775353 = validateParameter(valid_775353, JString, required = false,
                                 default = nil)
  if valid_775353 != nil:
    section.add "X-Amz-SignedHeaders", valid_775353
  var valid_775354 = header.getOrDefault("X-Amz-Credential")
  valid_775354 = validateParameter(valid_775354, JString, required = false,
                                 default = nil)
  if valid_775354 != nil:
    section.add "X-Amz-Credential", valid_775354
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_775355 = formData.getOrDefault("UserName")
  valid_775355 = validateParameter(valid_775355, JString, required = true,
                                 default = nil)
  if valid_775355 != nil:
    section.add "UserName", valid_775355
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775356: Call_PostGetLoginProfile_775343; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_775356.validator(path, query, header, formData, body)
  let scheme = call_775356.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775356.url(scheme.get, call_775356.host, call_775356.base,
                         call_775356.route, valid.getOrDefault("path"))
  result = hook(call_775356, url, valid)

proc call*(call_775357: Call_PostGetLoginProfile_775343; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775358 = newJObject()
  var formData_775359 = newJObject()
  add(formData_775359, "UserName", newJString(UserName))
  add(query_775358, "Action", newJString(Action))
  add(query_775358, "Version", newJString(Version))
  result = call_775357.call(nil, query_775358, nil, formData_775359, nil)

var postGetLoginProfile* = Call_PostGetLoginProfile_775343(
    name: "postGetLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetLoginProfile",
    validator: validate_PostGetLoginProfile_775344, base: "/",
    url: url_PostGetLoginProfile_775345, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetLoginProfile_775327 = ref object of OpenApiRestCall_772597
proc url_GetGetLoginProfile_775329(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetLoginProfile_775328(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_775330 = query.getOrDefault("UserName")
  valid_775330 = validateParameter(valid_775330, JString, required = true,
                                 default = nil)
  if valid_775330 != nil:
    section.add "UserName", valid_775330
  var valid_775331 = query.getOrDefault("Action")
  valid_775331 = validateParameter(valid_775331, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_775331 != nil:
    section.add "Action", valid_775331
  var valid_775332 = query.getOrDefault("Version")
  valid_775332 = validateParameter(valid_775332, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775332 != nil:
    section.add "Version", valid_775332
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775333 = header.getOrDefault("X-Amz-Date")
  valid_775333 = validateParameter(valid_775333, JString, required = false,
                                 default = nil)
  if valid_775333 != nil:
    section.add "X-Amz-Date", valid_775333
  var valid_775334 = header.getOrDefault("X-Amz-Security-Token")
  valid_775334 = validateParameter(valid_775334, JString, required = false,
                                 default = nil)
  if valid_775334 != nil:
    section.add "X-Amz-Security-Token", valid_775334
  var valid_775335 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775335 = validateParameter(valid_775335, JString, required = false,
                                 default = nil)
  if valid_775335 != nil:
    section.add "X-Amz-Content-Sha256", valid_775335
  var valid_775336 = header.getOrDefault("X-Amz-Algorithm")
  valid_775336 = validateParameter(valid_775336, JString, required = false,
                                 default = nil)
  if valid_775336 != nil:
    section.add "X-Amz-Algorithm", valid_775336
  var valid_775337 = header.getOrDefault("X-Amz-Signature")
  valid_775337 = validateParameter(valid_775337, JString, required = false,
                                 default = nil)
  if valid_775337 != nil:
    section.add "X-Amz-Signature", valid_775337
  var valid_775338 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775338 = validateParameter(valid_775338, JString, required = false,
                                 default = nil)
  if valid_775338 != nil:
    section.add "X-Amz-SignedHeaders", valid_775338
  var valid_775339 = header.getOrDefault("X-Amz-Credential")
  valid_775339 = validateParameter(valid_775339, JString, required = false,
                                 default = nil)
  if valid_775339 != nil:
    section.add "X-Amz-Credential", valid_775339
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775340: Call_GetGetLoginProfile_775327; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_775340.validator(path, query, header, formData, body)
  let scheme = call_775340.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775340.url(scheme.get, call_775340.host, call_775340.base,
                         call_775340.route, valid.getOrDefault("path"))
  result = hook(call_775340, url, valid)

proc call*(call_775341: Call_GetGetLoginProfile_775327; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775342 = newJObject()
  add(query_775342, "UserName", newJString(UserName))
  add(query_775342, "Action", newJString(Action))
  add(query_775342, "Version", newJString(Version))
  result = call_775341.call(nil, query_775342, nil, nil, nil)

var getGetLoginProfile* = Call_GetGetLoginProfile_775327(
    name: "getGetLoginProfile", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetLoginProfile", validator: validate_GetGetLoginProfile_775328,
    base: "/", url: url_GetGetLoginProfile_775329,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOpenIDConnectProvider_775376 = ref object of OpenApiRestCall_772597
proc url_PostGetOpenIDConnectProvider_775378(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetOpenIDConnectProvider_775377(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775379 = query.getOrDefault("Action")
  valid_775379 = validateParameter(valid_775379, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_775379 != nil:
    section.add "Action", valid_775379
  var valid_775380 = query.getOrDefault("Version")
  valid_775380 = validateParameter(valid_775380, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775380 != nil:
    section.add "Version", valid_775380
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775381 = header.getOrDefault("X-Amz-Date")
  valid_775381 = validateParameter(valid_775381, JString, required = false,
                                 default = nil)
  if valid_775381 != nil:
    section.add "X-Amz-Date", valid_775381
  var valid_775382 = header.getOrDefault("X-Amz-Security-Token")
  valid_775382 = validateParameter(valid_775382, JString, required = false,
                                 default = nil)
  if valid_775382 != nil:
    section.add "X-Amz-Security-Token", valid_775382
  var valid_775383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775383 = validateParameter(valid_775383, JString, required = false,
                                 default = nil)
  if valid_775383 != nil:
    section.add "X-Amz-Content-Sha256", valid_775383
  var valid_775384 = header.getOrDefault("X-Amz-Algorithm")
  valid_775384 = validateParameter(valid_775384, JString, required = false,
                                 default = nil)
  if valid_775384 != nil:
    section.add "X-Amz-Algorithm", valid_775384
  var valid_775385 = header.getOrDefault("X-Amz-Signature")
  valid_775385 = validateParameter(valid_775385, JString, required = false,
                                 default = nil)
  if valid_775385 != nil:
    section.add "X-Amz-Signature", valid_775385
  var valid_775386 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775386 = validateParameter(valid_775386, JString, required = false,
                                 default = nil)
  if valid_775386 != nil:
    section.add "X-Amz-SignedHeaders", valid_775386
  var valid_775387 = header.getOrDefault("X-Amz-Credential")
  valid_775387 = validateParameter(valid_775387, JString, required = false,
                                 default = nil)
  if valid_775387 != nil:
    section.add "X-Amz-Credential", valid_775387
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_775388 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_775388 = validateParameter(valid_775388, JString, required = true,
                                 default = nil)
  if valid_775388 != nil:
    section.add "OpenIDConnectProviderArn", valid_775388
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775389: Call_PostGetOpenIDConnectProvider_775376; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_775389.validator(path, query, header, formData, body)
  let scheme = call_775389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775389.url(scheme.get, call_775389.host, call_775389.base,
                         call_775389.route, valid.getOrDefault("path"))
  result = hook(call_775389, url, valid)

proc call*(call_775390: Call_PostGetOpenIDConnectProvider_775376;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775391 = newJObject()
  var formData_775392 = newJObject()
  add(formData_775392, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_775391, "Action", newJString(Action))
  add(query_775391, "Version", newJString(Version))
  result = call_775390.call(nil, query_775391, nil, formData_775392, nil)

var postGetOpenIDConnectProvider* = Call_PostGetOpenIDConnectProvider_775376(
    name: "postGetOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_PostGetOpenIDConnectProvider_775377, base: "/",
    url: url_PostGetOpenIDConnectProvider_775378,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOpenIDConnectProvider_775360 = ref object of OpenApiRestCall_772597
proc url_GetGetOpenIDConnectProvider_775362(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetOpenIDConnectProvider_775361(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_775363 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_775363 = validateParameter(valid_775363, JString, required = true,
                                 default = nil)
  if valid_775363 != nil:
    section.add "OpenIDConnectProviderArn", valid_775363
  var valid_775364 = query.getOrDefault("Action")
  valid_775364 = validateParameter(valid_775364, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_775364 != nil:
    section.add "Action", valid_775364
  var valid_775365 = query.getOrDefault("Version")
  valid_775365 = validateParameter(valid_775365, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775365 != nil:
    section.add "Version", valid_775365
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775366 = header.getOrDefault("X-Amz-Date")
  valid_775366 = validateParameter(valid_775366, JString, required = false,
                                 default = nil)
  if valid_775366 != nil:
    section.add "X-Amz-Date", valid_775366
  var valid_775367 = header.getOrDefault("X-Amz-Security-Token")
  valid_775367 = validateParameter(valid_775367, JString, required = false,
                                 default = nil)
  if valid_775367 != nil:
    section.add "X-Amz-Security-Token", valid_775367
  var valid_775368 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775368 = validateParameter(valid_775368, JString, required = false,
                                 default = nil)
  if valid_775368 != nil:
    section.add "X-Amz-Content-Sha256", valid_775368
  var valid_775369 = header.getOrDefault("X-Amz-Algorithm")
  valid_775369 = validateParameter(valid_775369, JString, required = false,
                                 default = nil)
  if valid_775369 != nil:
    section.add "X-Amz-Algorithm", valid_775369
  var valid_775370 = header.getOrDefault("X-Amz-Signature")
  valid_775370 = validateParameter(valid_775370, JString, required = false,
                                 default = nil)
  if valid_775370 != nil:
    section.add "X-Amz-Signature", valid_775370
  var valid_775371 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775371 = validateParameter(valid_775371, JString, required = false,
                                 default = nil)
  if valid_775371 != nil:
    section.add "X-Amz-SignedHeaders", valid_775371
  var valid_775372 = header.getOrDefault("X-Amz-Credential")
  valid_775372 = validateParameter(valid_775372, JString, required = false,
                                 default = nil)
  if valid_775372 != nil:
    section.add "X-Amz-Credential", valid_775372
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775373: Call_GetGetOpenIDConnectProvider_775360; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_775373.validator(path, query, header, formData, body)
  let scheme = call_775373.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775373.url(scheme.get, call_775373.host, call_775373.base,
                         call_775373.route, valid.getOrDefault("path"))
  result = hook(call_775373, url, valid)

proc call*(call_775374: Call_GetGetOpenIDConnectProvider_775360;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775375 = newJObject()
  add(query_775375, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_775375, "Action", newJString(Action))
  add(query_775375, "Version", newJString(Version))
  result = call_775374.call(nil, query_775375, nil, nil, nil)

var getGetOpenIDConnectProvider* = Call_GetGetOpenIDConnectProvider_775360(
    name: "getGetOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_GetGetOpenIDConnectProvider_775361, base: "/",
    url: url_GetGetOpenIDConnectProvider_775362,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOrganizationsAccessReport_775412 = ref object of OpenApiRestCall_772597
proc url_PostGetOrganizationsAccessReport_775414(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetOrganizationsAccessReport_775413(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775415 = query.getOrDefault("Action")
  valid_775415 = validateParameter(valid_775415, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_775415 != nil:
    section.add "Action", valid_775415
  var valid_775416 = query.getOrDefault("Version")
  valid_775416 = validateParameter(valid_775416, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775416 != nil:
    section.add "Version", valid_775416
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775417 = header.getOrDefault("X-Amz-Date")
  valid_775417 = validateParameter(valid_775417, JString, required = false,
                                 default = nil)
  if valid_775417 != nil:
    section.add "X-Amz-Date", valid_775417
  var valid_775418 = header.getOrDefault("X-Amz-Security-Token")
  valid_775418 = validateParameter(valid_775418, JString, required = false,
                                 default = nil)
  if valid_775418 != nil:
    section.add "X-Amz-Security-Token", valid_775418
  var valid_775419 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775419 = validateParameter(valid_775419, JString, required = false,
                                 default = nil)
  if valid_775419 != nil:
    section.add "X-Amz-Content-Sha256", valid_775419
  var valid_775420 = header.getOrDefault("X-Amz-Algorithm")
  valid_775420 = validateParameter(valid_775420, JString, required = false,
                                 default = nil)
  if valid_775420 != nil:
    section.add "X-Amz-Algorithm", valid_775420
  var valid_775421 = header.getOrDefault("X-Amz-Signature")
  valid_775421 = validateParameter(valid_775421, JString, required = false,
                                 default = nil)
  if valid_775421 != nil:
    section.add "X-Amz-Signature", valid_775421
  var valid_775422 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775422 = validateParameter(valid_775422, JString, required = false,
                                 default = nil)
  if valid_775422 != nil:
    section.add "X-Amz-SignedHeaders", valid_775422
  var valid_775423 = header.getOrDefault("X-Amz-Credential")
  valid_775423 = validateParameter(valid_775423, JString, required = false,
                                 default = nil)
  if valid_775423 != nil:
    section.add "X-Amz-Credential", valid_775423
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_775424 = formData.getOrDefault("Marker")
  valid_775424 = validateParameter(valid_775424, JString, required = false,
                                 default = nil)
  if valid_775424 != nil:
    section.add "Marker", valid_775424
  var valid_775425 = formData.getOrDefault("SortKey")
  valid_775425 = validateParameter(valid_775425, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_775425 != nil:
    section.add "SortKey", valid_775425
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_775426 = formData.getOrDefault("JobId")
  valid_775426 = validateParameter(valid_775426, JString, required = true,
                                 default = nil)
  if valid_775426 != nil:
    section.add "JobId", valid_775426
  var valid_775427 = formData.getOrDefault("MaxItems")
  valid_775427 = validateParameter(valid_775427, JInt, required = false, default = nil)
  if valid_775427 != nil:
    section.add "MaxItems", valid_775427
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775428: Call_PostGetOrganizationsAccessReport_775412;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_775428.validator(path, query, header, formData, body)
  let scheme = call_775428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775428.url(scheme.get, call_775428.host, call_775428.base,
                         call_775428.route, valid.getOrDefault("path"))
  result = hook(call_775428, url, valid)

proc call*(call_775429: Call_PostGetOrganizationsAccessReport_775412;
          JobId: string; Marker: string = "";
          SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          Action: string = "GetOrganizationsAccessReport"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775430 = newJObject()
  var formData_775431 = newJObject()
  add(formData_775431, "Marker", newJString(Marker))
  add(formData_775431, "SortKey", newJString(SortKey))
  add(query_775430, "Action", newJString(Action))
  add(formData_775431, "JobId", newJString(JobId))
  add(formData_775431, "MaxItems", newJInt(MaxItems))
  add(query_775430, "Version", newJString(Version))
  result = call_775429.call(nil, query_775430, nil, formData_775431, nil)

var postGetOrganizationsAccessReport* = Call_PostGetOrganizationsAccessReport_775412(
    name: "postGetOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_PostGetOrganizationsAccessReport_775413, base: "/",
    url: url_PostGetOrganizationsAccessReport_775414,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOrganizationsAccessReport_775393 = ref object of OpenApiRestCall_772597
proc url_GetGetOrganizationsAccessReport_775395(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetOrganizationsAccessReport_775394(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_775396 = query.getOrDefault("SortKey")
  valid_775396 = validateParameter(valid_775396, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_775396 != nil:
    section.add "SortKey", valid_775396
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_775397 = query.getOrDefault("JobId")
  valid_775397 = validateParameter(valid_775397, JString, required = true,
                                 default = nil)
  if valid_775397 != nil:
    section.add "JobId", valid_775397
  var valid_775398 = query.getOrDefault("Action")
  valid_775398 = validateParameter(valid_775398, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_775398 != nil:
    section.add "Action", valid_775398
  var valid_775399 = query.getOrDefault("Marker")
  valid_775399 = validateParameter(valid_775399, JString, required = false,
                                 default = nil)
  if valid_775399 != nil:
    section.add "Marker", valid_775399
  var valid_775400 = query.getOrDefault("MaxItems")
  valid_775400 = validateParameter(valid_775400, JInt, required = false, default = nil)
  if valid_775400 != nil:
    section.add "MaxItems", valid_775400
  var valid_775401 = query.getOrDefault("Version")
  valid_775401 = validateParameter(valid_775401, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775401 != nil:
    section.add "Version", valid_775401
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775402 = header.getOrDefault("X-Amz-Date")
  valid_775402 = validateParameter(valid_775402, JString, required = false,
                                 default = nil)
  if valid_775402 != nil:
    section.add "X-Amz-Date", valid_775402
  var valid_775403 = header.getOrDefault("X-Amz-Security-Token")
  valid_775403 = validateParameter(valid_775403, JString, required = false,
                                 default = nil)
  if valid_775403 != nil:
    section.add "X-Amz-Security-Token", valid_775403
  var valid_775404 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775404 = validateParameter(valid_775404, JString, required = false,
                                 default = nil)
  if valid_775404 != nil:
    section.add "X-Amz-Content-Sha256", valid_775404
  var valid_775405 = header.getOrDefault("X-Amz-Algorithm")
  valid_775405 = validateParameter(valid_775405, JString, required = false,
                                 default = nil)
  if valid_775405 != nil:
    section.add "X-Amz-Algorithm", valid_775405
  var valid_775406 = header.getOrDefault("X-Amz-Signature")
  valid_775406 = validateParameter(valid_775406, JString, required = false,
                                 default = nil)
  if valid_775406 != nil:
    section.add "X-Amz-Signature", valid_775406
  var valid_775407 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775407 = validateParameter(valid_775407, JString, required = false,
                                 default = nil)
  if valid_775407 != nil:
    section.add "X-Amz-SignedHeaders", valid_775407
  var valid_775408 = header.getOrDefault("X-Amz-Credential")
  valid_775408 = validateParameter(valid_775408, JString, required = false,
                                 default = nil)
  if valid_775408 != nil:
    section.add "X-Amz-Credential", valid_775408
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775409: Call_GetGetOrganizationsAccessReport_775393;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_775409.validator(path, query, header, formData, body)
  let scheme = call_775409.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775409.url(scheme.get, call_775409.host, call_775409.base,
                         call_775409.route, valid.getOrDefault("path"))
  result = hook(call_775409, url, valid)

proc call*(call_775410: Call_GetGetOrganizationsAccessReport_775393; JobId: string;
          SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          Action: string = "GetOrganizationsAccessReport"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775411 = newJObject()
  add(query_775411, "SortKey", newJString(SortKey))
  add(query_775411, "JobId", newJString(JobId))
  add(query_775411, "Action", newJString(Action))
  add(query_775411, "Marker", newJString(Marker))
  add(query_775411, "MaxItems", newJInt(MaxItems))
  add(query_775411, "Version", newJString(Version))
  result = call_775410.call(nil, query_775411, nil, nil, nil)

var getGetOrganizationsAccessReport* = Call_GetGetOrganizationsAccessReport_775393(
    name: "getGetOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_GetGetOrganizationsAccessReport_775394, base: "/",
    url: url_GetGetOrganizationsAccessReport_775395,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicy_775448 = ref object of OpenApiRestCall_772597
proc url_PostGetPolicy_775450(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetPolicy_775449(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775451 = query.getOrDefault("Action")
  valid_775451 = validateParameter(valid_775451, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_775451 != nil:
    section.add "Action", valid_775451
  var valid_775452 = query.getOrDefault("Version")
  valid_775452 = validateParameter(valid_775452, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775452 != nil:
    section.add "Version", valid_775452
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775453 = header.getOrDefault("X-Amz-Date")
  valid_775453 = validateParameter(valid_775453, JString, required = false,
                                 default = nil)
  if valid_775453 != nil:
    section.add "X-Amz-Date", valid_775453
  var valid_775454 = header.getOrDefault("X-Amz-Security-Token")
  valid_775454 = validateParameter(valid_775454, JString, required = false,
                                 default = nil)
  if valid_775454 != nil:
    section.add "X-Amz-Security-Token", valid_775454
  var valid_775455 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775455 = validateParameter(valid_775455, JString, required = false,
                                 default = nil)
  if valid_775455 != nil:
    section.add "X-Amz-Content-Sha256", valid_775455
  var valid_775456 = header.getOrDefault("X-Amz-Algorithm")
  valid_775456 = validateParameter(valid_775456, JString, required = false,
                                 default = nil)
  if valid_775456 != nil:
    section.add "X-Amz-Algorithm", valid_775456
  var valid_775457 = header.getOrDefault("X-Amz-Signature")
  valid_775457 = validateParameter(valid_775457, JString, required = false,
                                 default = nil)
  if valid_775457 != nil:
    section.add "X-Amz-Signature", valid_775457
  var valid_775458 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775458 = validateParameter(valid_775458, JString, required = false,
                                 default = nil)
  if valid_775458 != nil:
    section.add "X-Amz-SignedHeaders", valid_775458
  var valid_775459 = header.getOrDefault("X-Amz-Credential")
  valid_775459 = validateParameter(valid_775459, JString, required = false,
                                 default = nil)
  if valid_775459 != nil:
    section.add "X-Amz-Credential", valid_775459
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_775460 = formData.getOrDefault("PolicyArn")
  valid_775460 = validateParameter(valid_775460, JString, required = true,
                                 default = nil)
  if valid_775460 != nil:
    section.add "PolicyArn", valid_775460
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775461: Call_PostGetPolicy_775448; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_775461.validator(path, query, header, formData, body)
  let scheme = call_775461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775461.url(scheme.get, call_775461.host, call_775461.base,
                         call_775461.route, valid.getOrDefault("path"))
  result = hook(call_775461, url, valid)

proc call*(call_775462: Call_PostGetPolicy_775448; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775463 = newJObject()
  var formData_775464 = newJObject()
  add(formData_775464, "PolicyArn", newJString(PolicyArn))
  add(query_775463, "Action", newJString(Action))
  add(query_775463, "Version", newJString(Version))
  result = call_775462.call(nil, query_775463, nil, formData_775464, nil)

var postGetPolicy* = Call_PostGetPolicy_775448(name: "postGetPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_PostGetPolicy_775449,
    base: "/", url: url_PostGetPolicy_775450, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicy_775432 = ref object of OpenApiRestCall_772597
proc url_GetGetPolicy_775434(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetPolicy_775433(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_775435 = query.getOrDefault("PolicyArn")
  valid_775435 = validateParameter(valid_775435, JString, required = true,
                                 default = nil)
  if valid_775435 != nil:
    section.add "PolicyArn", valid_775435
  var valid_775436 = query.getOrDefault("Action")
  valid_775436 = validateParameter(valid_775436, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_775436 != nil:
    section.add "Action", valid_775436
  var valid_775437 = query.getOrDefault("Version")
  valid_775437 = validateParameter(valid_775437, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775437 != nil:
    section.add "Version", valid_775437
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775438 = header.getOrDefault("X-Amz-Date")
  valid_775438 = validateParameter(valid_775438, JString, required = false,
                                 default = nil)
  if valid_775438 != nil:
    section.add "X-Amz-Date", valid_775438
  var valid_775439 = header.getOrDefault("X-Amz-Security-Token")
  valid_775439 = validateParameter(valid_775439, JString, required = false,
                                 default = nil)
  if valid_775439 != nil:
    section.add "X-Amz-Security-Token", valid_775439
  var valid_775440 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775440 = validateParameter(valid_775440, JString, required = false,
                                 default = nil)
  if valid_775440 != nil:
    section.add "X-Amz-Content-Sha256", valid_775440
  var valid_775441 = header.getOrDefault("X-Amz-Algorithm")
  valid_775441 = validateParameter(valid_775441, JString, required = false,
                                 default = nil)
  if valid_775441 != nil:
    section.add "X-Amz-Algorithm", valid_775441
  var valid_775442 = header.getOrDefault("X-Amz-Signature")
  valid_775442 = validateParameter(valid_775442, JString, required = false,
                                 default = nil)
  if valid_775442 != nil:
    section.add "X-Amz-Signature", valid_775442
  var valid_775443 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775443 = validateParameter(valid_775443, JString, required = false,
                                 default = nil)
  if valid_775443 != nil:
    section.add "X-Amz-SignedHeaders", valid_775443
  var valid_775444 = header.getOrDefault("X-Amz-Credential")
  valid_775444 = validateParameter(valid_775444, JString, required = false,
                                 default = nil)
  if valid_775444 != nil:
    section.add "X-Amz-Credential", valid_775444
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775445: Call_GetGetPolicy_775432; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_775445.validator(path, query, header, formData, body)
  let scheme = call_775445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775445.url(scheme.get, call_775445.host, call_775445.base,
                         call_775445.route, valid.getOrDefault("path"))
  result = hook(call_775445, url, valid)

proc call*(call_775446: Call_GetGetPolicy_775432; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775447 = newJObject()
  add(query_775447, "PolicyArn", newJString(PolicyArn))
  add(query_775447, "Action", newJString(Action))
  add(query_775447, "Version", newJString(Version))
  result = call_775446.call(nil, query_775447, nil, nil, nil)

var getGetPolicy* = Call_GetGetPolicy_775432(name: "getGetPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_GetGetPolicy_775433, base: "/",
    url: url_GetGetPolicy_775434, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicyVersion_775482 = ref object of OpenApiRestCall_772597
proc url_PostGetPolicyVersion_775484(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetPolicyVersion_775483(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775485 = query.getOrDefault("Action")
  valid_775485 = validateParameter(valid_775485, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_775485 != nil:
    section.add "Action", valid_775485
  var valid_775486 = query.getOrDefault("Version")
  valid_775486 = validateParameter(valid_775486, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775486 != nil:
    section.add "Version", valid_775486
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775487 = header.getOrDefault("X-Amz-Date")
  valid_775487 = validateParameter(valid_775487, JString, required = false,
                                 default = nil)
  if valid_775487 != nil:
    section.add "X-Amz-Date", valid_775487
  var valid_775488 = header.getOrDefault("X-Amz-Security-Token")
  valid_775488 = validateParameter(valid_775488, JString, required = false,
                                 default = nil)
  if valid_775488 != nil:
    section.add "X-Amz-Security-Token", valid_775488
  var valid_775489 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775489 = validateParameter(valid_775489, JString, required = false,
                                 default = nil)
  if valid_775489 != nil:
    section.add "X-Amz-Content-Sha256", valid_775489
  var valid_775490 = header.getOrDefault("X-Amz-Algorithm")
  valid_775490 = validateParameter(valid_775490, JString, required = false,
                                 default = nil)
  if valid_775490 != nil:
    section.add "X-Amz-Algorithm", valid_775490
  var valid_775491 = header.getOrDefault("X-Amz-Signature")
  valid_775491 = validateParameter(valid_775491, JString, required = false,
                                 default = nil)
  if valid_775491 != nil:
    section.add "X-Amz-Signature", valid_775491
  var valid_775492 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775492 = validateParameter(valid_775492, JString, required = false,
                                 default = nil)
  if valid_775492 != nil:
    section.add "X-Amz-SignedHeaders", valid_775492
  var valid_775493 = header.getOrDefault("X-Amz-Credential")
  valid_775493 = validateParameter(valid_775493, JString, required = false,
                                 default = nil)
  if valid_775493 != nil:
    section.add "X-Amz-Credential", valid_775493
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_775494 = formData.getOrDefault("PolicyArn")
  valid_775494 = validateParameter(valid_775494, JString, required = true,
                                 default = nil)
  if valid_775494 != nil:
    section.add "PolicyArn", valid_775494
  var valid_775495 = formData.getOrDefault("VersionId")
  valid_775495 = validateParameter(valid_775495, JString, required = true,
                                 default = nil)
  if valid_775495 != nil:
    section.add "VersionId", valid_775495
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775496: Call_PostGetPolicyVersion_775482; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_775496.validator(path, query, header, formData, body)
  let scheme = call_775496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775496.url(scheme.get, call_775496.host, call_775496.base,
                         call_775496.route, valid.getOrDefault("path"))
  result = hook(call_775496, url, valid)

proc call*(call_775497: Call_PostGetPolicyVersion_775482; PolicyArn: string;
          VersionId: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  var query_775498 = newJObject()
  var formData_775499 = newJObject()
  add(formData_775499, "PolicyArn", newJString(PolicyArn))
  add(query_775498, "Action", newJString(Action))
  add(query_775498, "Version", newJString(Version))
  add(formData_775499, "VersionId", newJString(VersionId))
  result = call_775497.call(nil, query_775498, nil, formData_775499, nil)

var postGetPolicyVersion* = Call_PostGetPolicyVersion_775482(
    name: "postGetPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_PostGetPolicyVersion_775483, base: "/",
    url: url_PostGetPolicyVersion_775484, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicyVersion_775465 = ref object of OpenApiRestCall_772597
proc url_GetGetPolicyVersion_775467(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetPolicyVersion_775466(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_775468 = query.getOrDefault("PolicyArn")
  valid_775468 = validateParameter(valid_775468, JString, required = true,
                                 default = nil)
  if valid_775468 != nil:
    section.add "PolicyArn", valid_775468
  var valid_775469 = query.getOrDefault("VersionId")
  valid_775469 = validateParameter(valid_775469, JString, required = true,
                                 default = nil)
  if valid_775469 != nil:
    section.add "VersionId", valid_775469
  var valid_775470 = query.getOrDefault("Action")
  valid_775470 = validateParameter(valid_775470, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_775470 != nil:
    section.add "Action", valid_775470
  var valid_775471 = query.getOrDefault("Version")
  valid_775471 = validateParameter(valid_775471, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775471 != nil:
    section.add "Version", valid_775471
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775472 = header.getOrDefault("X-Amz-Date")
  valid_775472 = validateParameter(valid_775472, JString, required = false,
                                 default = nil)
  if valid_775472 != nil:
    section.add "X-Amz-Date", valid_775472
  var valid_775473 = header.getOrDefault("X-Amz-Security-Token")
  valid_775473 = validateParameter(valid_775473, JString, required = false,
                                 default = nil)
  if valid_775473 != nil:
    section.add "X-Amz-Security-Token", valid_775473
  var valid_775474 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775474 = validateParameter(valid_775474, JString, required = false,
                                 default = nil)
  if valid_775474 != nil:
    section.add "X-Amz-Content-Sha256", valid_775474
  var valid_775475 = header.getOrDefault("X-Amz-Algorithm")
  valid_775475 = validateParameter(valid_775475, JString, required = false,
                                 default = nil)
  if valid_775475 != nil:
    section.add "X-Amz-Algorithm", valid_775475
  var valid_775476 = header.getOrDefault("X-Amz-Signature")
  valid_775476 = validateParameter(valid_775476, JString, required = false,
                                 default = nil)
  if valid_775476 != nil:
    section.add "X-Amz-Signature", valid_775476
  var valid_775477 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775477 = validateParameter(valid_775477, JString, required = false,
                                 default = nil)
  if valid_775477 != nil:
    section.add "X-Amz-SignedHeaders", valid_775477
  var valid_775478 = header.getOrDefault("X-Amz-Credential")
  valid_775478 = validateParameter(valid_775478, JString, required = false,
                                 default = nil)
  if valid_775478 != nil:
    section.add "X-Amz-Credential", valid_775478
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775479: Call_GetGetPolicyVersion_775465; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_775479.validator(path, query, header, formData, body)
  let scheme = call_775479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775479.url(scheme.get, call_775479.host, call_775479.base,
                         call_775479.route, valid.getOrDefault("path"))
  result = hook(call_775479, url, valid)

proc call*(call_775480: Call_GetGetPolicyVersion_775465; PolicyArn: string;
          VersionId: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775481 = newJObject()
  add(query_775481, "PolicyArn", newJString(PolicyArn))
  add(query_775481, "VersionId", newJString(VersionId))
  add(query_775481, "Action", newJString(Action))
  add(query_775481, "Version", newJString(Version))
  result = call_775480.call(nil, query_775481, nil, nil, nil)

var getGetPolicyVersion* = Call_GetGetPolicyVersion_775465(
    name: "getGetPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_GetGetPolicyVersion_775466, base: "/",
    url: url_GetGetPolicyVersion_775467, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRole_775516 = ref object of OpenApiRestCall_772597
proc url_PostGetRole_775518(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetRole_775517(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775519 = query.getOrDefault("Action")
  valid_775519 = validateParameter(valid_775519, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_775519 != nil:
    section.add "Action", valid_775519
  var valid_775520 = query.getOrDefault("Version")
  valid_775520 = validateParameter(valid_775520, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775520 != nil:
    section.add "Version", valid_775520
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775521 = header.getOrDefault("X-Amz-Date")
  valid_775521 = validateParameter(valid_775521, JString, required = false,
                                 default = nil)
  if valid_775521 != nil:
    section.add "X-Amz-Date", valid_775521
  var valid_775522 = header.getOrDefault("X-Amz-Security-Token")
  valid_775522 = validateParameter(valid_775522, JString, required = false,
                                 default = nil)
  if valid_775522 != nil:
    section.add "X-Amz-Security-Token", valid_775522
  var valid_775523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775523 = validateParameter(valid_775523, JString, required = false,
                                 default = nil)
  if valid_775523 != nil:
    section.add "X-Amz-Content-Sha256", valid_775523
  var valid_775524 = header.getOrDefault("X-Amz-Algorithm")
  valid_775524 = validateParameter(valid_775524, JString, required = false,
                                 default = nil)
  if valid_775524 != nil:
    section.add "X-Amz-Algorithm", valid_775524
  var valid_775525 = header.getOrDefault("X-Amz-Signature")
  valid_775525 = validateParameter(valid_775525, JString, required = false,
                                 default = nil)
  if valid_775525 != nil:
    section.add "X-Amz-Signature", valid_775525
  var valid_775526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775526 = validateParameter(valid_775526, JString, required = false,
                                 default = nil)
  if valid_775526 != nil:
    section.add "X-Amz-SignedHeaders", valid_775526
  var valid_775527 = header.getOrDefault("X-Amz-Credential")
  valid_775527 = validateParameter(valid_775527, JString, required = false,
                                 default = nil)
  if valid_775527 != nil:
    section.add "X-Amz-Credential", valid_775527
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_775528 = formData.getOrDefault("RoleName")
  valid_775528 = validateParameter(valid_775528, JString, required = true,
                                 default = nil)
  if valid_775528 != nil:
    section.add "RoleName", valid_775528
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775529: Call_PostGetRole_775516; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_775529.validator(path, query, header, formData, body)
  let scheme = call_775529.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775529.url(scheme.get, call_775529.host, call_775529.base,
                         call_775529.route, valid.getOrDefault("path"))
  result = hook(call_775529, url, valid)

proc call*(call_775530: Call_PostGetRole_775516; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## postGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775531 = newJObject()
  var formData_775532 = newJObject()
  add(formData_775532, "RoleName", newJString(RoleName))
  add(query_775531, "Action", newJString(Action))
  add(query_775531, "Version", newJString(Version))
  result = call_775530.call(nil, query_775531, nil, formData_775532, nil)

var postGetRole* = Call_PostGetRole_775516(name: "postGetRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetRole",
                                        validator: validate_PostGetRole_775517,
                                        base: "/", url: url_PostGetRole_775518,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRole_775500 = ref object of OpenApiRestCall_772597
proc url_GetGetRole_775502(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetRole_775501(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775503 = query.getOrDefault("Action")
  valid_775503 = validateParameter(valid_775503, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_775503 != nil:
    section.add "Action", valid_775503
  var valid_775504 = query.getOrDefault("RoleName")
  valid_775504 = validateParameter(valid_775504, JString, required = true,
                                 default = nil)
  if valid_775504 != nil:
    section.add "RoleName", valid_775504
  var valid_775505 = query.getOrDefault("Version")
  valid_775505 = validateParameter(valid_775505, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775505 != nil:
    section.add "Version", valid_775505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775506 = header.getOrDefault("X-Amz-Date")
  valid_775506 = validateParameter(valid_775506, JString, required = false,
                                 default = nil)
  if valid_775506 != nil:
    section.add "X-Amz-Date", valid_775506
  var valid_775507 = header.getOrDefault("X-Amz-Security-Token")
  valid_775507 = validateParameter(valid_775507, JString, required = false,
                                 default = nil)
  if valid_775507 != nil:
    section.add "X-Amz-Security-Token", valid_775507
  var valid_775508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775508 = validateParameter(valid_775508, JString, required = false,
                                 default = nil)
  if valid_775508 != nil:
    section.add "X-Amz-Content-Sha256", valid_775508
  var valid_775509 = header.getOrDefault("X-Amz-Algorithm")
  valid_775509 = validateParameter(valid_775509, JString, required = false,
                                 default = nil)
  if valid_775509 != nil:
    section.add "X-Amz-Algorithm", valid_775509
  var valid_775510 = header.getOrDefault("X-Amz-Signature")
  valid_775510 = validateParameter(valid_775510, JString, required = false,
                                 default = nil)
  if valid_775510 != nil:
    section.add "X-Amz-Signature", valid_775510
  var valid_775511 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775511 = validateParameter(valid_775511, JString, required = false,
                                 default = nil)
  if valid_775511 != nil:
    section.add "X-Amz-SignedHeaders", valid_775511
  var valid_775512 = header.getOrDefault("X-Amz-Credential")
  valid_775512 = validateParameter(valid_775512, JString, required = false,
                                 default = nil)
  if valid_775512 != nil:
    section.add "X-Amz-Credential", valid_775512
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775513: Call_GetGetRole_775500; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_775513.validator(path, query, header, formData, body)
  let scheme = call_775513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775513.url(scheme.get, call_775513.host, call_775513.base,
                         call_775513.route, valid.getOrDefault("path"))
  result = hook(call_775513, url, valid)

proc call*(call_775514: Call_GetGetRole_775500; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## getGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_775515 = newJObject()
  add(query_775515, "Action", newJString(Action))
  add(query_775515, "RoleName", newJString(RoleName))
  add(query_775515, "Version", newJString(Version))
  result = call_775514.call(nil, query_775515, nil, nil, nil)

var getGetRole* = Call_GetGetRole_775500(name: "getGetRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetRole",
                                      validator: validate_GetGetRole_775501,
                                      base: "/", url: url_GetGetRole_775502,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRolePolicy_775550 = ref object of OpenApiRestCall_772597
proc url_PostGetRolePolicy_775552(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetRolePolicy_775551(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775553 = query.getOrDefault("Action")
  valid_775553 = validateParameter(valid_775553, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_775553 != nil:
    section.add "Action", valid_775553
  var valid_775554 = query.getOrDefault("Version")
  valid_775554 = validateParameter(valid_775554, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775554 != nil:
    section.add "Version", valid_775554
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775555 = header.getOrDefault("X-Amz-Date")
  valid_775555 = validateParameter(valid_775555, JString, required = false,
                                 default = nil)
  if valid_775555 != nil:
    section.add "X-Amz-Date", valid_775555
  var valid_775556 = header.getOrDefault("X-Amz-Security-Token")
  valid_775556 = validateParameter(valid_775556, JString, required = false,
                                 default = nil)
  if valid_775556 != nil:
    section.add "X-Amz-Security-Token", valid_775556
  var valid_775557 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775557 = validateParameter(valid_775557, JString, required = false,
                                 default = nil)
  if valid_775557 != nil:
    section.add "X-Amz-Content-Sha256", valid_775557
  var valid_775558 = header.getOrDefault("X-Amz-Algorithm")
  valid_775558 = validateParameter(valid_775558, JString, required = false,
                                 default = nil)
  if valid_775558 != nil:
    section.add "X-Amz-Algorithm", valid_775558
  var valid_775559 = header.getOrDefault("X-Amz-Signature")
  valid_775559 = validateParameter(valid_775559, JString, required = false,
                                 default = nil)
  if valid_775559 != nil:
    section.add "X-Amz-Signature", valid_775559
  var valid_775560 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775560 = validateParameter(valid_775560, JString, required = false,
                                 default = nil)
  if valid_775560 != nil:
    section.add "X-Amz-SignedHeaders", valid_775560
  var valid_775561 = header.getOrDefault("X-Amz-Credential")
  valid_775561 = validateParameter(valid_775561, JString, required = false,
                                 default = nil)
  if valid_775561 != nil:
    section.add "X-Amz-Credential", valid_775561
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_775562 = formData.getOrDefault("PolicyName")
  valid_775562 = validateParameter(valid_775562, JString, required = true,
                                 default = nil)
  if valid_775562 != nil:
    section.add "PolicyName", valid_775562
  var valid_775563 = formData.getOrDefault("RoleName")
  valid_775563 = validateParameter(valid_775563, JString, required = true,
                                 default = nil)
  if valid_775563 != nil:
    section.add "RoleName", valid_775563
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775564: Call_PostGetRolePolicy_775550; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_775564.validator(path, query, header, formData, body)
  let scheme = call_775564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775564.url(scheme.get, call_775564.host, call_775564.base,
                         call_775564.route, valid.getOrDefault("path"))
  result = hook(call_775564, url, valid)

proc call*(call_775565: Call_PostGetRolePolicy_775550; PolicyName: string;
          RoleName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775566 = newJObject()
  var formData_775567 = newJObject()
  add(formData_775567, "PolicyName", newJString(PolicyName))
  add(formData_775567, "RoleName", newJString(RoleName))
  add(query_775566, "Action", newJString(Action))
  add(query_775566, "Version", newJString(Version))
  result = call_775565.call(nil, query_775566, nil, formData_775567, nil)

var postGetRolePolicy* = Call_PostGetRolePolicy_775550(name: "postGetRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_PostGetRolePolicy_775551,
    base: "/", url: url_PostGetRolePolicy_775552,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRolePolicy_775533 = ref object of OpenApiRestCall_772597
proc url_GetGetRolePolicy_775535(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetRolePolicy_775534(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775536 = query.getOrDefault("Action")
  valid_775536 = validateParameter(valid_775536, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_775536 != nil:
    section.add "Action", valid_775536
  var valid_775537 = query.getOrDefault("RoleName")
  valid_775537 = validateParameter(valid_775537, JString, required = true,
                                 default = nil)
  if valid_775537 != nil:
    section.add "RoleName", valid_775537
  var valid_775538 = query.getOrDefault("Version")
  valid_775538 = validateParameter(valid_775538, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775538 != nil:
    section.add "Version", valid_775538
  var valid_775539 = query.getOrDefault("PolicyName")
  valid_775539 = validateParameter(valid_775539, JString, required = true,
                                 default = nil)
  if valid_775539 != nil:
    section.add "PolicyName", valid_775539
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775540 = header.getOrDefault("X-Amz-Date")
  valid_775540 = validateParameter(valid_775540, JString, required = false,
                                 default = nil)
  if valid_775540 != nil:
    section.add "X-Amz-Date", valid_775540
  var valid_775541 = header.getOrDefault("X-Amz-Security-Token")
  valid_775541 = validateParameter(valid_775541, JString, required = false,
                                 default = nil)
  if valid_775541 != nil:
    section.add "X-Amz-Security-Token", valid_775541
  var valid_775542 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775542 = validateParameter(valid_775542, JString, required = false,
                                 default = nil)
  if valid_775542 != nil:
    section.add "X-Amz-Content-Sha256", valid_775542
  var valid_775543 = header.getOrDefault("X-Amz-Algorithm")
  valid_775543 = validateParameter(valid_775543, JString, required = false,
                                 default = nil)
  if valid_775543 != nil:
    section.add "X-Amz-Algorithm", valid_775543
  var valid_775544 = header.getOrDefault("X-Amz-Signature")
  valid_775544 = validateParameter(valid_775544, JString, required = false,
                                 default = nil)
  if valid_775544 != nil:
    section.add "X-Amz-Signature", valid_775544
  var valid_775545 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775545 = validateParameter(valid_775545, JString, required = false,
                                 default = nil)
  if valid_775545 != nil:
    section.add "X-Amz-SignedHeaders", valid_775545
  var valid_775546 = header.getOrDefault("X-Amz-Credential")
  valid_775546 = validateParameter(valid_775546, JString, required = false,
                                 default = nil)
  if valid_775546 != nil:
    section.add "X-Amz-Credential", valid_775546
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775547: Call_GetGetRolePolicy_775533; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_775547.validator(path, query, header, formData, body)
  let scheme = call_775547.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775547.url(scheme.get, call_775547.host, call_775547.base,
                         call_775547.route, valid.getOrDefault("path"))
  result = hook(call_775547, url, valid)

proc call*(call_775548: Call_GetGetRolePolicy_775533; RoleName: string;
          PolicyName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_775549 = newJObject()
  add(query_775549, "Action", newJString(Action))
  add(query_775549, "RoleName", newJString(RoleName))
  add(query_775549, "Version", newJString(Version))
  add(query_775549, "PolicyName", newJString(PolicyName))
  result = call_775548.call(nil, query_775549, nil, nil, nil)

var getGetRolePolicy* = Call_GetGetRolePolicy_775533(name: "getGetRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_GetGetRolePolicy_775534,
    base: "/", url: url_GetGetRolePolicy_775535,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSAMLProvider_775584 = ref object of OpenApiRestCall_772597
proc url_PostGetSAMLProvider_775586(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetSAMLProvider_775585(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775587 = query.getOrDefault("Action")
  valid_775587 = validateParameter(valid_775587, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_775587 != nil:
    section.add "Action", valid_775587
  var valid_775588 = query.getOrDefault("Version")
  valid_775588 = validateParameter(valid_775588, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775588 != nil:
    section.add "Version", valid_775588
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775589 = header.getOrDefault("X-Amz-Date")
  valid_775589 = validateParameter(valid_775589, JString, required = false,
                                 default = nil)
  if valid_775589 != nil:
    section.add "X-Amz-Date", valid_775589
  var valid_775590 = header.getOrDefault("X-Amz-Security-Token")
  valid_775590 = validateParameter(valid_775590, JString, required = false,
                                 default = nil)
  if valid_775590 != nil:
    section.add "X-Amz-Security-Token", valid_775590
  var valid_775591 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775591 = validateParameter(valid_775591, JString, required = false,
                                 default = nil)
  if valid_775591 != nil:
    section.add "X-Amz-Content-Sha256", valid_775591
  var valid_775592 = header.getOrDefault("X-Amz-Algorithm")
  valid_775592 = validateParameter(valid_775592, JString, required = false,
                                 default = nil)
  if valid_775592 != nil:
    section.add "X-Amz-Algorithm", valid_775592
  var valid_775593 = header.getOrDefault("X-Amz-Signature")
  valid_775593 = validateParameter(valid_775593, JString, required = false,
                                 default = nil)
  if valid_775593 != nil:
    section.add "X-Amz-Signature", valid_775593
  var valid_775594 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775594 = validateParameter(valid_775594, JString, required = false,
                                 default = nil)
  if valid_775594 != nil:
    section.add "X-Amz-SignedHeaders", valid_775594
  var valid_775595 = header.getOrDefault("X-Amz-Credential")
  valid_775595 = validateParameter(valid_775595, JString, required = false,
                                 default = nil)
  if valid_775595 != nil:
    section.add "X-Amz-Credential", valid_775595
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_775596 = formData.getOrDefault("SAMLProviderArn")
  valid_775596 = validateParameter(valid_775596, JString, required = true,
                                 default = nil)
  if valid_775596 != nil:
    section.add "SAMLProviderArn", valid_775596
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775597: Call_PostGetSAMLProvider_775584; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_775597.validator(path, query, header, formData, body)
  let scheme = call_775597.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775597.url(scheme.get, call_775597.host, call_775597.base,
                         call_775597.route, valid.getOrDefault("path"))
  result = hook(call_775597, url, valid)

proc call*(call_775598: Call_PostGetSAMLProvider_775584; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775599 = newJObject()
  var formData_775600 = newJObject()
  add(formData_775600, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_775599, "Action", newJString(Action))
  add(query_775599, "Version", newJString(Version))
  result = call_775598.call(nil, query_775599, nil, formData_775600, nil)

var postGetSAMLProvider* = Call_PostGetSAMLProvider_775584(
    name: "postGetSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSAMLProvider",
    validator: validate_PostGetSAMLProvider_775585, base: "/",
    url: url_PostGetSAMLProvider_775586, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSAMLProvider_775568 = ref object of OpenApiRestCall_772597
proc url_GetGetSAMLProvider_775570(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetSAMLProvider_775569(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775571 = query.getOrDefault("Action")
  valid_775571 = validateParameter(valid_775571, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_775571 != nil:
    section.add "Action", valid_775571
  var valid_775572 = query.getOrDefault("SAMLProviderArn")
  valid_775572 = validateParameter(valid_775572, JString, required = true,
                                 default = nil)
  if valid_775572 != nil:
    section.add "SAMLProviderArn", valid_775572
  var valid_775573 = query.getOrDefault("Version")
  valid_775573 = validateParameter(valid_775573, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775573 != nil:
    section.add "Version", valid_775573
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775574 = header.getOrDefault("X-Amz-Date")
  valid_775574 = validateParameter(valid_775574, JString, required = false,
                                 default = nil)
  if valid_775574 != nil:
    section.add "X-Amz-Date", valid_775574
  var valid_775575 = header.getOrDefault("X-Amz-Security-Token")
  valid_775575 = validateParameter(valid_775575, JString, required = false,
                                 default = nil)
  if valid_775575 != nil:
    section.add "X-Amz-Security-Token", valid_775575
  var valid_775576 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775576 = validateParameter(valid_775576, JString, required = false,
                                 default = nil)
  if valid_775576 != nil:
    section.add "X-Amz-Content-Sha256", valid_775576
  var valid_775577 = header.getOrDefault("X-Amz-Algorithm")
  valid_775577 = validateParameter(valid_775577, JString, required = false,
                                 default = nil)
  if valid_775577 != nil:
    section.add "X-Amz-Algorithm", valid_775577
  var valid_775578 = header.getOrDefault("X-Amz-Signature")
  valid_775578 = validateParameter(valid_775578, JString, required = false,
                                 default = nil)
  if valid_775578 != nil:
    section.add "X-Amz-Signature", valid_775578
  var valid_775579 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775579 = validateParameter(valid_775579, JString, required = false,
                                 default = nil)
  if valid_775579 != nil:
    section.add "X-Amz-SignedHeaders", valid_775579
  var valid_775580 = header.getOrDefault("X-Amz-Credential")
  valid_775580 = validateParameter(valid_775580, JString, required = false,
                                 default = nil)
  if valid_775580 != nil:
    section.add "X-Amz-Credential", valid_775580
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775581: Call_GetGetSAMLProvider_775568; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_775581.validator(path, query, header, formData, body)
  let scheme = call_775581.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775581.url(scheme.get, call_775581.host, call_775581.base,
                         call_775581.route, valid.getOrDefault("path"))
  result = hook(call_775581, url, valid)

proc call*(call_775582: Call_GetGetSAMLProvider_775568; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_775583 = newJObject()
  add(query_775583, "Action", newJString(Action))
  add(query_775583, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_775583, "Version", newJString(Version))
  result = call_775582.call(nil, query_775583, nil, nil, nil)

var getGetSAMLProvider* = Call_GetGetSAMLProvider_775568(
    name: "getGetSAMLProvider", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSAMLProvider", validator: validate_GetGetSAMLProvider_775569,
    base: "/", url: url_GetGetSAMLProvider_775570,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSSHPublicKey_775619 = ref object of OpenApiRestCall_772597
proc url_PostGetSSHPublicKey_775621(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetSSHPublicKey_775620(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775622 = query.getOrDefault("Action")
  valid_775622 = validateParameter(valid_775622, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_775622 != nil:
    section.add "Action", valid_775622
  var valid_775623 = query.getOrDefault("Version")
  valid_775623 = validateParameter(valid_775623, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775623 != nil:
    section.add "Version", valid_775623
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775624 = header.getOrDefault("X-Amz-Date")
  valid_775624 = validateParameter(valid_775624, JString, required = false,
                                 default = nil)
  if valid_775624 != nil:
    section.add "X-Amz-Date", valid_775624
  var valid_775625 = header.getOrDefault("X-Amz-Security-Token")
  valid_775625 = validateParameter(valid_775625, JString, required = false,
                                 default = nil)
  if valid_775625 != nil:
    section.add "X-Amz-Security-Token", valid_775625
  var valid_775626 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775626 = validateParameter(valid_775626, JString, required = false,
                                 default = nil)
  if valid_775626 != nil:
    section.add "X-Amz-Content-Sha256", valid_775626
  var valid_775627 = header.getOrDefault("X-Amz-Algorithm")
  valid_775627 = validateParameter(valid_775627, JString, required = false,
                                 default = nil)
  if valid_775627 != nil:
    section.add "X-Amz-Algorithm", valid_775627
  var valid_775628 = header.getOrDefault("X-Amz-Signature")
  valid_775628 = validateParameter(valid_775628, JString, required = false,
                                 default = nil)
  if valid_775628 != nil:
    section.add "X-Amz-Signature", valid_775628
  var valid_775629 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775629 = validateParameter(valid_775629, JString, required = false,
                                 default = nil)
  if valid_775629 != nil:
    section.add "X-Amz-SignedHeaders", valid_775629
  var valid_775630 = header.getOrDefault("X-Amz-Credential")
  valid_775630 = validateParameter(valid_775630, JString, required = false,
                                 default = nil)
  if valid_775630 != nil:
    section.add "X-Amz-Credential", valid_775630
  result.add "header", section
  ## parameters in `formData` object:
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Encoding` field"
  var valid_775631 = formData.getOrDefault("Encoding")
  valid_775631 = validateParameter(valid_775631, JString, required = true,
                                 default = newJString("SSH"))
  if valid_775631 != nil:
    section.add "Encoding", valid_775631
  var valid_775632 = formData.getOrDefault("UserName")
  valid_775632 = validateParameter(valid_775632, JString, required = true,
                                 default = nil)
  if valid_775632 != nil:
    section.add "UserName", valid_775632
  var valid_775633 = formData.getOrDefault("SSHPublicKeyId")
  valid_775633 = validateParameter(valid_775633, JString, required = true,
                                 default = nil)
  if valid_775633 != nil:
    section.add "SSHPublicKeyId", valid_775633
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775634: Call_PostGetSSHPublicKey_775619; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_775634.validator(path, query, header, formData, body)
  let scheme = call_775634.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775634.url(scheme.get, call_775634.host, call_775634.base,
                         call_775634.route, valid.getOrDefault("path"))
  result = hook(call_775634, url, valid)

proc call*(call_775635: Call_PostGetSSHPublicKey_775619; UserName: string;
          SSHPublicKeyId: string; Encoding: string = "SSH";
          Action: string = "GetSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775636 = newJObject()
  var formData_775637 = newJObject()
  add(formData_775637, "Encoding", newJString(Encoding))
  add(formData_775637, "UserName", newJString(UserName))
  add(formData_775637, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_775636, "Action", newJString(Action))
  add(query_775636, "Version", newJString(Version))
  result = call_775635.call(nil, query_775636, nil, formData_775637, nil)

var postGetSSHPublicKey* = Call_PostGetSSHPublicKey_775619(
    name: "postGetSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSSHPublicKey",
    validator: validate_PostGetSSHPublicKey_775620, base: "/",
    url: url_PostGetSSHPublicKey_775621, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSSHPublicKey_775601 = ref object of OpenApiRestCall_772597
proc url_GetGetSSHPublicKey_775603(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetSSHPublicKey_775602(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_775604 = query.getOrDefault("SSHPublicKeyId")
  valid_775604 = validateParameter(valid_775604, JString, required = true,
                                 default = nil)
  if valid_775604 != nil:
    section.add "SSHPublicKeyId", valid_775604
  var valid_775605 = query.getOrDefault("UserName")
  valid_775605 = validateParameter(valid_775605, JString, required = true,
                                 default = nil)
  if valid_775605 != nil:
    section.add "UserName", valid_775605
  var valid_775606 = query.getOrDefault("Action")
  valid_775606 = validateParameter(valid_775606, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_775606 != nil:
    section.add "Action", valid_775606
  var valid_775607 = query.getOrDefault("Encoding")
  valid_775607 = validateParameter(valid_775607, JString, required = true,
                                 default = newJString("SSH"))
  if valid_775607 != nil:
    section.add "Encoding", valid_775607
  var valid_775608 = query.getOrDefault("Version")
  valid_775608 = validateParameter(valid_775608, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775608 != nil:
    section.add "Version", valid_775608
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775609 = header.getOrDefault("X-Amz-Date")
  valid_775609 = validateParameter(valid_775609, JString, required = false,
                                 default = nil)
  if valid_775609 != nil:
    section.add "X-Amz-Date", valid_775609
  var valid_775610 = header.getOrDefault("X-Amz-Security-Token")
  valid_775610 = validateParameter(valid_775610, JString, required = false,
                                 default = nil)
  if valid_775610 != nil:
    section.add "X-Amz-Security-Token", valid_775610
  var valid_775611 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775611 = validateParameter(valid_775611, JString, required = false,
                                 default = nil)
  if valid_775611 != nil:
    section.add "X-Amz-Content-Sha256", valid_775611
  var valid_775612 = header.getOrDefault("X-Amz-Algorithm")
  valid_775612 = validateParameter(valid_775612, JString, required = false,
                                 default = nil)
  if valid_775612 != nil:
    section.add "X-Amz-Algorithm", valid_775612
  var valid_775613 = header.getOrDefault("X-Amz-Signature")
  valid_775613 = validateParameter(valid_775613, JString, required = false,
                                 default = nil)
  if valid_775613 != nil:
    section.add "X-Amz-Signature", valid_775613
  var valid_775614 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775614 = validateParameter(valid_775614, JString, required = false,
                                 default = nil)
  if valid_775614 != nil:
    section.add "X-Amz-SignedHeaders", valid_775614
  var valid_775615 = header.getOrDefault("X-Amz-Credential")
  valid_775615 = validateParameter(valid_775615, JString, required = false,
                                 default = nil)
  if valid_775615 != nil:
    section.add "X-Amz-Credential", valid_775615
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775616: Call_GetGetSSHPublicKey_775601; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_775616.validator(path, query, header, formData, body)
  let scheme = call_775616.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775616.url(scheme.get, call_775616.host, call_775616.base,
                         call_775616.route, valid.getOrDefault("path"))
  result = hook(call_775616, url, valid)

proc call*(call_775617: Call_GetGetSSHPublicKey_775601; SSHPublicKeyId: string;
          UserName: string; Action: string = "GetSSHPublicKey";
          Encoding: string = "SSH"; Version: string = "2010-05-08"): Recallable =
  ## getGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Version: string (required)
  var query_775618 = newJObject()
  add(query_775618, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_775618, "UserName", newJString(UserName))
  add(query_775618, "Action", newJString(Action))
  add(query_775618, "Encoding", newJString(Encoding))
  add(query_775618, "Version", newJString(Version))
  result = call_775617.call(nil, query_775618, nil, nil, nil)

var getGetSSHPublicKey* = Call_GetGetSSHPublicKey_775601(
    name: "getGetSSHPublicKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSSHPublicKey", validator: validate_GetGetSSHPublicKey_775602,
    base: "/", url: url_GetGetSSHPublicKey_775603,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServerCertificate_775654 = ref object of OpenApiRestCall_772597
proc url_PostGetServerCertificate_775656(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetServerCertificate_775655(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775657 = query.getOrDefault("Action")
  valid_775657 = validateParameter(valid_775657, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_775657 != nil:
    section.add "Action", valid_775657
  var valid_775658 = query.getOrDefault("Version")
  valid_775658 = validateParameter(valid_775658, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775658 != nil:
    section.add "Version", valid_775658
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775659 = header.getOrDefault("X-Amz-Date")
  valid_775659 = validateParameter(valid_775659, JString, required = false,
                                 default = nil)
  if valid_775659 != nil:
    section.add "X-Amz-Date", valid_775659
  var valid_775660 = header.getOrDefault("X-Amz-Security-Token")
  valid_775660 = validateParameter(valid_775660, JString, required = false,
                                 default = nil)
  if valid_775660 != nil:
    section.add "X-Amz-Security-Token", valid_775660
  var valid_775661 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775661 = validateParameter(valid_775661, JString, required = false,
                                 default = nil)
  if valid_775661 != nil:
    section.add "X-Amz-Content-Sha256", valid_775661
  var valid_775662 = header.getOrDefault("X-Amz-Algorithm")
  valid_775662 = validateParameter(valid_775662, JString, required = false,
                                 default = nil)
  if valid_775662 != nil:
    section.add "X-Amz-Algorithm", valid_775662
  var valid_775663 = header.getOrDefault("X-Amz-Signature")
  valid_775663 = validateParameter(valid_775663, JString, required = false,
                                 default = nil)
  if valid_775663 != nil:
    section.add "X-Amz-Signature", valid_775663
  var valid_775664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775664 = validateParameter(valid_775664, JString, required = false,
                                 default = nil)
  if valid_775664 != nil:
    section.add "X-Amz-SignedHeaders", valid_775664
  var valid_775665 = header.getOrDefault("X-Amz-Credential")
  valid_775665 = validateParameter(valid_775665, JString, required = false,
                                 default = nil)
  if valid_775665 != nil:
    section.add "X-Amz-Credential", valid_775665
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_775666 = formData.getOrDefault("ServerCertificateName")
  valid_775666 = validateParameter(valid_775666, JString, required = true,
                                 default = nil)
  if valid_775666 != nil:
    section.add "ServerCertificateName", valid_775666
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775667: Call_PostGetServerCertificate_775654; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_775667.validator(path, query, header, formData, body)
  let scheme = call_775667.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775667.url(scheme.get, call_775667.host, call_775667.base,
                         call_775667.route, valid.getOrDefault("path"))
  result = hook(call_775667, url, valid)

proc call*(call_775668: Call_PostGetServerCertificate_775654;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775669 = newJObject()
  var formData_775670 = newJObject()
  add(formData_775670, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_775669, "Action", newJString(Action))
  add(query_775669, "Version", newJString(Version))
  result = call_775668.call(nil, query_775669, nil, formData_775670, nil)

var postGetServerCertificate* = Call_PostGetServerCertificate_775654(
    name: "postGetServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_PostGetServerCertificate_775655, base: "/",
    url: url_PostGetServerCertificate_775656, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServerCertificate_775638 = ref object of OpenApiRestCall_772597
proc url_GetGetServerCertificate_775640(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetServerCertificate_775639(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_775641 = query.getOrDefault("ServerCertificateName")
  valid_775641 = validateParameter(valid_775641, JString, required = true,
                                 default = nil)
  if valid_775641 != nil:
    section.add "ServerCertificateName", valid_775641
  var valid_775642 = query.getOrDefault("Action")
  valid_775642 = validateParameter(valid_775642, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_775642 != nil:
    section.add "Action", valid_775642
  var valid_775643 = query.getOrDefault("Version")
  valid_775643 = validateParameter(valid_775643, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775643 != nil:
    section.add "Version", valid_775643
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775644 = header.getOrDefault("X-Amz-Date")
  valid_775644 = validateParameter(valid_775644, JString, required = false,
                                 default = nil)
  if valid_775644 != nil:
    section.add "X-Amz-Date", valid_775644
  var valid_775645 = header.getOrDefault("X-Amz-Security-Token")
  valid_775645 = validateParameter(valid_775645, JString, required = false,
                                 default = nil)
  if valid_775645 != nil:
    section.add "X-Amz-Security-Token", valid_775645
  var valid_775646 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775646 = validateParameter(valid_775646, JString, required = false,
                                 default = nil)
  if valid_775646 != nil:
    section.add "X-Amz-Content-Sha256", valid_775646
  var valid_775647 = header.getOrDefault("X-Amz-Algorithm")
  valid_775647 = validateParameter(valid_775647, JString, required = false,
                                 default = nil)
  if valid_775647 != nil:
    section.add "X-Amz-Algorithm", valid_775647
  var valid_775648 = header.getOrDefault("X-Amz-Signature")
  valid_775648 = validateParameter(valid_775648, JString, required = false,
                                 default = nil)
  if valid_775648 != nil:
    section.add "X-Amz-Signature", valid_775648
  var valid_775649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775649 = validateParameter(valid_775649, JString, required = false,
                                 default = nil)
  if valid_775649 != nil:
    section.add "X-Amz-SignedHeaders", valid_775649
  var valid_775650 = header.getOrDefault("X-Amz-Credential")
  valid_775650 = validateParameter(valid_775650, JString, required = false,
                                 default = nil)
  if valid_775650 != nil:
    section.add "X-Amz-Credential", valid_775650
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775651: Call_GetGetServerCertificate_775638; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_775651.validator(path, query, header, formData, body)
  let scheme = call_775651.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775651.url(scheme.get, call_775651.host, call_775651.base,
                         call_775651.route, valid.getOrDefault("path"))
  result = hook(call_775651, url, valid)

proc call*(call_775652: Call_GetGetServerCertificate_775638;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775653 = newJObject()
  add(query_775653, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_775653, "Action", newJString(Action))
  add(query_775653, "Version", newJString(Version))
  result = call_775652.call(nil, query_775653, nil, nil, nil)

var getGetServerCertificate* = Call_GetGetServerCertificate_775638(
    name: "getGetServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_GetGetServerCertificate_775639, base: "/",
    url: url_GetGetServerCertificate_775640, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetails_775689 = ref object of OpenApiRestCall_772597
proc url_PostGetServiceLastAccessedDetails_775691(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetServiceLastAccessedDetails_775690(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775692 = query.getOrDefault("Action")
  valid_775692 = validateParameter(valid_775692, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_775692 != nil:
    section.add "Action", valid_775692
  var valid_775693 = query.getOrDefault("Version")
  valid_775693 = validateParameter(valid_775693, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775693 != nil:
    section.add "Version", valid_775693
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775694 = header.getOrDefault("X-Amz-Date")
  valid_775694 = validateParameter(valid_775694, JString, required = false,
                                 default = nil)
  if valid_775694 != nil:
    section.add "X-Amz-Date", valid_775694
  var valid_775695 = header.getOrDefault("X-Amz-Security-Token")
  valid_775695 = validateParameter(valid_775695, JString, required = false,
                                 default = nil)
  if valid_775695 != nil:
    section.add "X-Amz-Security-Token", valid_775695
  var valid_775696 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775696 = validateParameter(valid_775696, JString, required = false,
                                 default = nil)
  if valid_775696 != nil:
    section.add "X-Amz-Content-Sha256", valid_775696
  var valid_775697 = header.getOrDefault("X-Amz-Algorithm")
  valid_775697 = validateParameter(valid_775697, JString, required = false,
                                 default = nil)
  if valid_775697 != nil:
    section.add "X-Amz-Algorithm", valid_775697
  var valid_775698 = header.getOrDefault("X-Amz-Signature")
  valid_775698 = validateParameter(valid_775698, JString, required = false,
                                 default = nil)
  if valid_775698 != nil:
    section.add "X-Amz-Signature", valid_775698
  var valid_775699 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775699 = validateParameter(valid_775699, JString, required = false,
                                 default = nil)
  if valid_775699 != nil:
    section.add "X-Amz-SignedHeaders", valid_775699
  var valid_775700 = header.getOrDefault("X-Amz-Credential")
  valid_775700 = validateParameter(valid_775700, JString, required = false,
                                 default = nil)
  if valid_775700 != nil:
    section.add "X-Amz-Credential", valid_775700
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_775701 = formData.getOrDefault("Marker")
  valid_775701 = validateParameter(valid_775701, JString, required = false,
                                 default = nil)
  if valid_775701 != nil:
    section.add "Marker", valid_775701
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_775702 = formData.getOrDefault("JobId")
  valid_775702 = validateParameter(valid_775702, JString, required = true,
                                 default = nil)
  if valid_775702 != nil:
    section.add "JobId", valid_775702
  var valid_775703 = formData.getOrDefault("MaxItems")
  valid_775703 = validateParameter(valid_775703, JInt, required = false, default = nil)
  if valid_775703 != nil:
    section.add "MaxItems", valid_775703
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775704: Call_PostGetServiceLastAccessedDetails_775689;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_775704.validator(path, query, header, formData, body)
  let scheme = call_775704.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775704.url(scheme.get, call_775704.host, call_775704.base,
                         call_775704.route, valid.getOrDefault("path"))
  result = hook(call_775704, url, valid)

proc call*(call_775705: Call_PostGetServiceLastAccessedDetails_775689;
          JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetails"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775706 = newJObject()
  var formData_775707 = newJObject()
  add(formData_775707, "Marker", newJString(Marker))
  add(query_775706, "Action", newJString(Action))
  add(formData_775707, "JobId", newJString(JobId))
  add(formData_775707, "MaxItems", newJInt(MaxItems))
  add(query_775706, "Version", newJString(Version))
  result = call_775705.call(nil, query_775706, nil, formData_775707, nil)

var postGetServiceLastAccessedDetails* = Call_PostGetServiceLastAccessedDetails_775689(
    name: "postGetServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_PostGetServiceLastAccessedDetails_775690, base: "/",
    url: url_PostGetServiceLastAccessedDetails_775691,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetails_775671 = ref object of OpenApiRestCall_772597
proc url_GetGetServiceLastAccessedDetails_775673(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetServiceLastAccessedDetails_775672(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_775674 = query.getOrDefault("JobId")
  valid_775674 = validateParameter(valid_775674, JString, required = true,
                                 default = nil)
  if valid_775674 != nil:
    section.add "JobId", valid_775674
  var valid_775675 = query.getOrDefault("Action")
  valid_775675 = validateParameter(valid_775675, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_775675 != nil:
    section.add "Action", valid_775675
  var valid_775676 = query.getOrDefault("Marker")
  valid_775676 = validateParameter(valid_775676, JString, required = false,
                                 default = nil)
  if valid_775676 != nil:
    section.add "Marker", valid_775676
  var valid_775677 = query.getOrDefault("MaxItems")
  valid_775677 = validateParameter(valid_775677, JInt, required = false, default = nil)
  if valid_775677 != nil:
    section.add "MaxItems", valid_775677
  var valid_775678 = query.getOrDefault("Version")
  valid_775678 = validateParameter(valid_775678, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775678 != nil:
    section.add "Version", valid_775678
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775679 = header.getOrDefault("X-Amz-Date")
  valid_775679 = validateParameter(valid_775679, JString, required = false,
                                 default = nil)
  if valid_775679 != nil:
    section.add "X-Amz-Date", valid_775679
  var valid_775680 = header.getOrDefault("X-Amz-Security-Token")
  valid_775680 = validateParameter(valid_775680, JString, required = false,
                                 default = nil)
  if valid_775680 != nil:
    section.add "X-Amz-Security-Token", valid_775680
  var valid_775681 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775681 = validateParameter(valid_775681, JString, required = false,
                                 default = nil)
  if valid_775681 != nil:
    section.add "X-Amz-Content-Sha256", valid_775681
  var valid_775682 = header.getOrDefault("X-Amz-Algorithm")
  valid_775682 = validateParameter(valid_775682, JString, required = false,
                                 default = nil)
  if valid_775682 != nil:
    section.add "X-Amz-Algorithm", valid_775682
  var valid_775683 = header.getOrDefault("X-Amz-Signature")
  valid_775683 = validateParameter(valid_775683, JString, required = false,
                                 default = nil)
  if valid_775683 != nil:
    section.add "X-Amz-Signature", valid_775683
  var valid_775684 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775684 = validateParameter(valid_775684, JString, required = false,
                                 default = nil)
  if valid_775684 != nil:
    section.add "X-Amz-SignedHeaders", valid_775684
  var valid_775685 = header.getOrDefault("X-Amz-Credential")
  valid_775685 = validateParameter(valid_775685, JString, required = false,
                                 default = nil)
  if valid_775685 != nil:
    section.add "X-Amz-Credential", valid_775685
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775686: Call_GetGetServiceLastAccessedDetails_775671;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_775686.validator(path, query, header, formData, body)
  let scheme = call_775686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775686.url(scheme.get, call_775686.host, call_775686.base,
                         call_775686.route, valid.getOrDefault("path"))
  result = hook(call_775686, url, valid)

proc call*(call_775687: Call_GetGetServiceLastAccessedDetails_775671;
          JobId: string; Action: string = "GetServiceLastAccessedDetails";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775688 = newJObject()
  add(query_775688, "JobId", newJString(JobId))
  add(query_775688, "Action", newJString(Action))
  add(query_775688, "Marker", newJString(Marker))
  add(query_775688, "MaxItems", newJInt(MaxItems))
  add(query_775688, "Version", newJString(Version))
  result = call_775687.call(nil, query_775688, nil, nil, nil)

var getGetServiceLastAccessedDetails* = Call_GetGetServiceLastAccessedDetails_775671(
    name: "getGetServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_GetGetServiceLastAccessedDetails_775672, base: "/",
    url: url_GetGetServiceLastAccessedDetails_775673,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetailsWithEntities_775727 = ref object of OpenApiRestCall_772597
proc url_PostGetServiceLastAccessedDetailsWithEntities_775729(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetServiceLastAccessedDetailsWithEntities_775728(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775730 = query.getOrDefault("Action")
  valid_775730 = validateParameter(valid_775730, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_775730 != nil:
    section.add "Action", valid_775730
  var valid_775731 = query.getOrDefault("Version")
  valid_775731 = validateParameter(valid_775731, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775731 != nil:
    section.add "Version", valid_775731
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775732 = header.getOrDefault("X-Amz-Date")
  valid_775732 = validateParameter(valid_775732, JString, required = false,
                                 default = nil)
  if valid_775732 != nil:
    section.add "X-Amz-Date", valid_775732
  var valid_775733 = header.getOrDefault("X-Amz-Security-Token")
  valid_775733 = validateParameter(valid_775733, JString, required = false,
                                 default = nil)
  if valid_775733 != nil:
    section.add "X-Amz-Security-Token", valid_775733
  var valid_775734 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775734 = validateParameter(valid_775734, JString, required = false,
                                 default = nil)
  if valid_775734 != nil:
    section.add "X-Amz-Content-Sha256", valid_775734
  var valid_775735 = header.getOrDefault("X-Amz-Algorithm")
  valid_775735 = validateParameter(valid_775735, JString, required = false,
                                 default = nil)
  if valid_775735 != nil:
    section.add "X-Amz-Algorithm", valid_775735
  var valid_775736 = header.getOrDefault("X-Amz-Signature")
  valid_775736 = validateParameter(valid_775736, JString, required = false,
                                 default = nil)
  if valid_775736 != nil:
    section.add "X-Amz-Signature", valid_775736
  var valid_775737 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775737 = validateParameter(valid_775737, JString, required = false,
                                 default = nil)
  if valid_775737 != nil:
    section.add "X-Amz-SignedHeaders", valid_775737
  var valid_775738 = header.getOrDefault("X-Amz-Credential")
  valid_775738 = validateParameter(valid_775738, JString, required = false,
                                 default = nil)
  if valid_775738 != nil:
    section.add "X-Amz-Credential", valid_775738
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceNamespace` field"
  var valid_775739 = formData.getOrDefault("ServiceNamespace")
  valid_775739 = validateParameter(valid_775739, JString, required = true,
                                 default = nil)
  if valid_775739 != nil:
    section.add "ServiceNamespace", valid_775739
  var valid_775740 = formData.getOrDefault("Marker")
  valid_775740 = validateParameter(valid_775740, JString, required = false,
                                 default = nil)
  if valid_775740 != nil:
    section.add "Marker", valid_775740
  var valid_775741 = formData.getOrDefault("JobId")
  valid_775741 = validateParameter(valid_775741, JString, required = true,
                                 default = nil)
  if valid_775741 != nil:
    section.add "JobId", valid_775741
  var valid_775742 = formData.getOrDefault("MaxItems")
  valid_775742 = validateParameter(valid_775742, JInt, required = false, default = nil)
  if valid_775742 != nil:
    section.add "MaxItems", valid_775742
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775743: Call_PostGetServiceLastAccessedDetailsWithEntities_775727;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_775743.validator(path, query, header, formData, body)
  let scheme = call_775743.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775743.url(scheme.get, call_775743.host, call_775743.base,
                         call_775743.route, valid.getOrDefault("path"))
  result = hook(call_775743, url, valid)

proc call*(call_775744: Call_PostGetServiceLastAccessedDetailsWithEntities_775727;
          ServiceNamespace: string; JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775745 = newJObject()
  var formData_775746 = newJObject()
  add(formData_775746, "ServiceNamespace", newJString(ServiceNamespace))
  add(formData_775746, "Marker", newJString(Marker))
  add(query_775745, "Action", newJString(Action))
  add(formData_775746, "JobId", newJString(JobId))
  add(formData_775746, "MaxItems", newJInt(MaxItems))
  add(query_775745, "Version", newJString(Version))
  result = call_775744.call(nil, query_775745, nil, formData_775746, nil)

var postGetServiceLastAccessedDetailsWithEntities* = Call_PostGetServiceLastAccessedDetailsWithEntities_775727(
    name: "postGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_PostGetServiceLastAccessedDetailsWithEntities_775728,
    base: "/", url: url_PostGetServiceLastAccessedDetailsWithEntities_775729,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetailsWithEntities_775708 = ref object of OpenApiRestCall_772597
proc url_GetGetServiceLastAccessedDetailsWithEntities_775710(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetServiceLastAccessedDetailsWithEntities_775709(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_775711 = query.getOrDefault("JobId")
  valid_775711 = validateParameter(valid_775711, JString, required = true,
                                 default = nil)
  if valid_775711 != nil:
    section.add "JobId", valid_775711
  var valid_775712 = query.getOrDefault("Action")
  valid_775712 = validateParameter(valid_775712, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_775712 != nil:
    section.add "Action", valid_775712
  var valid_775713 = query.getOrDefault("Marker")
  valid_775713 = validateParameter(valid_775713, JString, required = false,
                                 default = nil)
  if valid_775713 != nil:
    section.add "Marker", valid_775713
  var valid_775714 = query.getOrDefault("MaxItems")
  valid_775714 = validateParameter(valid_775714, JInt, required = false, default = nil)
  if valid_775714 != nil:
    section.add "MaxItems", valid_775714
  var valid_775715 = query.getOrDefault("Version")
  valid_775715 = validateParameter(valid_775715, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775715 != nil:
    section.add "Version", valid_775715
  var valid_775716 = query.getOrDefault("ServiceNamespace")
  valid_775716 = validateParameter(valid_775716, JString, required = true,
                                 default = nil)
  if valid_775716 != nil:
    section.add "ServiceNamespace", valid_775716
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775717 = header.getOrDefault("X-Amz-Date")
  valid_775717 = validateParameter(valid_775717, JString, required = false,
                                 default = nil)
  if valid_775717 != nil:
    section.add "X-Amz-Date", valid_775717
  var valid_775718 = header.getOrDefault("X-Amz-Security-Token")
  valid_775718 = validateParameter(valid_775718, JString, required = false,
                                 default = nil)
  if valid_775718 != nil:
    section.add "X-Amz-Security-Token", valid_775718
  var valid_775719 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775719 = validateParameter(valid_775719, JString, required = false,
                                 default = nil)
  if valid_775719 != nil:
    section.add "X-Amz-Content-Sha256", valid_775719
  var valid_775720 = header.getOrDefault("X-Amz-Algorithm")
  valid_775720 = validateParameter(valid_775720, JString, required = false,
                                 default = nil)
  if valid_775720 != nil:
    section.add "X-Amz-Algorithm", valid_775720
  var valid_775721 = header.getOrDefault("X-Amz-Signature")
  valid_775721 = validateParameter(valid_775721, JString, required = false,
                                 default = nil)
  if valid_775721 != nil:
    section.add "X-Amz-Signature", valid_775721
  var valid_775722 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775722 = validateParameter(valid_775722, JString, required = false,
                                 default = nil)
  if valid_775722 != nil:
    section.add "X-Amz-SignedHeaders", valid_775722
  var valid_775723 = header.getOrDefault("X-Amz-Credential")
  valid_775723 = validateParameter(valid_775723, JString, required = false,
                                 default = nil)
  if valid_775723 != nil:
    section.add "X-Amz-Credential", valid_775723
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775724: Call_GetGetServiceLastAccessedDetailsWithEntities_775708;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_775724.validator(path, query, header, formData, body)
  let scheme = call_775724.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775724.url(scheme.get, call_775724.host, call_775724.base,
                         call_775724.route, valid.getOrDefault("path"))
  result = hook(call_775724, url, valid)

proc call*(call_775725: Call_GetGetServiceLastAccessedDetailsWithEntities_775708;
          JobId: string; ServiceNamespace: string;
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  var query_775726 = newJObject()
  add(query_775726, "JobId", newJString(JobId))
  add(query_775726, "Action", newJString(Action))
  add(query_775726, "Marker", newJString(Marker))
  add(query_775726, "MaxItems", newJInt(MaxItems))
  add(query_775726, "Version", newJString(Version))
  add(query_775726, "ServiceNamespace", newJString(ServiceNamespace))
  result = call_775725.call(nil, query_775726, nil, nil, nil)

var getGetServiceLastAccessedDetailsWithEntities* = Call_GetGetServiceLastAccessedDetailsWithEntities_775708(
    name: "getGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_GetGetServiceLastAccessedDetailsWithEntities_775709,
    base: "/", url: url_GetGetServiceLastAccessedDetailsWithEntities_775710,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLinkedRoleDeletionStatus_775763 = ref object of OpenApiRestCall_772597
proc url_PostGetServiceLinkedRoleDeletionStatus_775765(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetServiceLinkedRoleDeletionStatus_775764(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775766 = query.getOrDefault("Action")
  valid_775766 = validateParameter(valid_775766, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_775766 != nil:
    section.add "Action", valid_775766
  var valid_775767 = query.getOrDefault("Version")
  valid_775767 = validateParameter(valid_775767, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775767 != nil:
    section.add "Version", valid_775767
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775768 = header.getOrDefault("X-Amz-Date")
  valid_775768 = validateParameter(valid_775768, JString, required = false,
                                 default = nil)
  if valid_775768 != nil:
    section.add "X-Amz-Date", valid_775768
  var valid_775769 = header.getOrDefault("X-Amz-Security-Token")
  valid_775769 = validateParameter(valid_775769, JString, required = false,
                                 default = nil)
  if valid_775769 != nil:
    section.add "X-Amz-Security-Token", valid_775769
  var valid_775770 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775770 = validateParameter(valid_775770, JString, required = false,
                                 default = nil)
  if valid_775770 != nil:
    section.add "X-Amz-Content-Sha256", valid_775770
  var valid_775771 = header.getOrDefault("X-Amz-Algorithm")
  valid_775771 = validateParameter(valid_775771, JString, required = false,
                                 default = nil)
  if valid_775771 != nil:
    section.add "X-Amz-Algorithm", valid_775771
  var valid_775772 = header.getOrDefault("X-Amz-Signature")
  valid_775772 = validateParameter(valid_775772, JString, required = false,
                                 default = nil)
  if valid_775772 != nil:
    section.add "X-Amz-Signature", valid_775772
  var valid_775773 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775773 = validateParameter(valid_775773, JString, required = false,
                                 default = nil)
  if valid_775773 != nil:
    section.add "X-Amz-SignedHeaders", valid_775773
  var valid_775774 = header.getOrDefault("X-Amz-Credential")
  valid_775774 = validateParameter(valid_775774, JString, required = false,
                                 default = nil)
  if valid_775774 != nil:
    section.add "X-Amz-Credential", valid_775774
  result.add "header", section
  ## parameters in `formData` object:
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DeletionTaskId` field"
  var valid_775775 = formData.getOrDefault("DeletionTaskId")
  valid_775775 = validateParameter(valid_775775, JString, required = true,
                                 default = nil)
  if valid_775775 != nil:
    section.add "DeletionTaskId", valid_775775
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775776: Call_PostGetServiceLinkedRoleDeletionStatus_775763;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_775776.validator(path, query, header, formData, body)
  let scheme = call_775776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775776.url(scheme.get, call_775776.host, call_775776.base,
                         call_775776.route, valid.getOrDefault("path"))
  result = hook(call_775776, url, valid)

proc call*(call_775777: Call_PostGetServiceLinkedRoleDeletionStatus_775763;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   Action: string (required)
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: string (required)
  var query_775778 = newJObject()
  var formData_775779 = newJObject()
  add(query_775778, "Action", newJString(Action))
  add(formData_775779, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_775778, "Version", newJString(Version))
  result = call_775777.call(nil, query_775778, nil, formData_775779, nil)

var postGetServiceLinkedRoleDeletionStatus* = Call_PostGetServiceLinkedRoleDeletionStatus_775763(
    name: "postGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_PostGetServiceLinkedRoleDeletionStatus_775764, base: "/",
    url: url_PostGetServiceLinkedRoleDeletionStatus_775765,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLinkedRoleDeletionStatus_775747 = ref object of OpenApiRestCall_772597
proc url_GetGetServiceLinkedRoleDeletionStatus_775749(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetServiceLinkedRoleDeletionStatus_775748(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775750 = query.getOrDefault("Action")
  valid_775750 = validateParameter(valid_775750, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_775750 != nil:
    section.add "Action", valid_775750
  var valid_775751 = query.getOrDefault("DeletionTaskId")
  valid_775751 = validateParameter(valid_775751, JString, required = true,
                                 default = nil)
  if valid_775751 != nil:
    section.add "DeletionTaskId", valid_775751
  var valid_775752 = query.getOrDefault("Version")
  valid_775752 = validateParameter(valid_775752, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775752 != nil:
    section.add "Version", valid_775752
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775753 = header.getOrDefault("X-Amz-Date")
  valid_775753 = validateParameter(valid_775753, JString, required = false,
                                 default = nil)
  if valid_775753 != nil:
    section.add "X-Amz-Date", valid_775753
  var valid_775754 = header.getOrDefault("X-Amz-Security-Token")
  valid_775754 = validateParameter(valid_775754, JString, required = false,
                                 default = nil)
  if valid_775754 != nil:
    section.add "X-Amz-Security-Token", valid_775754
  var valid_775755 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775755 = validateParameter(valid_775755, JString, required = false,
                                 default = nil)
  if valid_775755 != nil:
    section.add "X-Amz-Content-Sha256", valid_775755
  var valid_775756 = header.getOrDefault("X-Amz-Algorithm")
  valid_775756 = validateParameter(valid_775756, JString, required = false,
                                 default = nil)
  if valid_775756 != nil:
    section.add "X-Amz-Algorithm", valid_775756
  var valid_775757 = header.getOrDefault("X-Amz-Signature")
  valid_775757 = validateParameter(valid_775757, JString, required = false,
                                 default = nil)
  if valid_775757 != nil:
    section.add "X-Amz-Signature", valid_775757
  var valid_775758 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775758 = validateParameter(valid_775758, JString, required = false,
                                 default = nil)
  if valid_775758 != nil:
    section.add "X-Amz-SignedHeaders", valid_775758
  var valid_775759 = header.getOrDefault("X-Amz-Credential")
  valid_775759 = validateParameter(valid_775759, JString, required = false,
                                 default = nil)
  if valid_775759 != nil:
    section.add "X-Amz-Credential", valid_775759
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775760: Call_GetGetServiceLinkedRoleDeletionStatus_775747;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_775760.validator(path, query, header, formData, body)
  let scheme = call_775760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775760.url(scheme.get, call_775760.host, call_775760.base,
                         call_775760.route, valid.getOrDefault("path"))
  result = hook(call_775760, url, valid)

proc call*(call_775761: Call_GetGetServiceLinkedRoleDeletionStatus_775747;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   Action: string (required)
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: string (required)
  var query_775762 = newJObject()
  add(query_775762, "Action", newJString(Action))
  add(query_775762, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_775762, "Version", newJString(Version))
  result = call_775761.call(nil, query_775762, nil, nil, nil)

var getGetServiceLinkedRoleDeletionStatus* = Call_GetGetServiceLinkedRoleDeletionStatus_775747(
    name: "getGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_GetGetServiceLinkedRoleDeletionStatus_775748, base: "/",
    url: url_GetGetServiceLinkedRoleDeletionStatus_775749,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUser_775796 = ref object of OpenApiRestCall_772597
proc url_PostGetUser_775798(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetUser_775797(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775799 = query.getOrDefault("Action")
  valid_775799 = validateParameter(valid_775799, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_775799 != nil:
    section.add "Action", valid_775799
  var valid_775800 = query.getOrDefault("Version")
  valid_775800 = validateParameter(valid_775800, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775800 != nil:
    section.add "Version", valid_775800
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775801 = header.getOrDefault("X-Amz-Date")
  valid_775801 = validateParameter(valid_775801, JString, required = false,
                                 default = nil)
  if valid_775801 != nil:
    section.add "X-Amz-Date", valid_775801
  var valid_775802 = header.getOrDefault("X-Amz-Security-Token")
  valid_775802 = validateParameter(valid_775802, JString, required = false,
                                 default = nil)
  if valid_775802 != nil:
    section.add "X-Amz-Security-Token", valid_775802
  var valid_775803 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775803 = validateParameter(valid_775803, JString, required = false,
                                 default = nil)
  if valid_775803 != nil:
    section.add "X-Amz-Content-Sha256", valid_775803
  var valid_775804 = header.getOrDefault("X-Amz-Algorithm")
  valid_775804 = validateParameter(valid_775804, JString, required = false,
                                 default = nil)
  if valid_775804 != nil:
    section.add "X-Amz-Algorithm", valid_775804
  var valid_775805 = header.getOrDefault("X-Amz-Signature")
  valid_775805 = validateParameter(valid_775805, JString, required = false,
                                 default = nil)
  if valid_775805 != nil:
    section.add "X-Amz-Signature", valid_775805
  var valid_775806 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775806 = validateParameter(valid_775806, JString, required = false,
                                 default = nil)
  if valid_775806 != nil:
    section.add "X-Amz-SignedHeaders", valid_775806
  var valid_775807 = header.getOrDefault("X-Amz-Credential")
  valid_775807 = validateParameter(valid_775807, JString, required = false,
                                 default = nil)
  if valid_775807 != nil:
    section.add "X-Amz-Credential", valid_775807
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_775808 = formData.getOrDefault("UserName")
  valid_775808 = validateParameter(valid_775808, JString, required = false,
                                 default = nil)
  if valid_775808 != nil:
    section.add "UserName", valid_775808
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775809: Call_PostGetUser_775796; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_775809.validator(path, query, header, formData, body)
  let scheme = call_775809.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775809.url(scheme.get, call_775809.host, call_775809.base,
                         call_775809.route, valid.getOrDefault("path"))
  result = hook(call_775809, url, valid)

proc call*(call_775810: Call_PostGetUser_775796; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## postGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775811 = newJObject()
  var formData_775812 = newJObject()
  add(formData_775812, "UserName", newJString(UserName))
  add(query_775811, "Action", newJString(Action))
  add(query_775811, "Version", newJString(Version))
  result = call_775810.call(nil, query_775811, nil, formData_775812, nil)

var postGetUser* = Call_PostGetUser_775796(name: "postGetUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetUser",
                                        validator: validate_PostGetUser_775797,
                                        base: "/", url: url_PostGetUser_775798,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUser_775780 = ref object of OpenApiRestCall_772597
proc url_GetGetUser_775782(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetUser_775781(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_775783 = query.getOrDefault("UserName")
  valid_775783 = validateParameter(valid_775783, JString, required = false,
                                 default = nil)
  if valid_775783 != nil:
    section.add "UserName", valid_775783
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775784 = query.getOrDefault("Action")
  valid_775784 = validateParameter(valid_775784, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_775784 != nil:
    section.add "Action", valid_775784
  var valid_775785 = query.getOrDefault("Version")
  valid_775785 = validateParameter(valid_775785, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775785 != nil:
    section.add "Version", valid_775785
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775786 = header.getOrDefault("X-Amz-Date")
  valid_775786 = validateParameter(valid_775786, JString, required = false,
                                 default = nil)
  if valid_775786 != nil:
    section.add "X-Amz-Date", valid_775786
  var valid_775787 = header.getOrDefault("X-Amz-Security-Token")
  valid_775787 = validateParameter(valid_775787, JString, required = false,
                                 default = nil)
  if valid_775787 != nil:
    section.add "X-Amz-Security-Token", valid_775787
  var valid_775788 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775788 = validateParameter(valid_775788, JString, required = false,
                                 default = nil)
  if valid_775788 != nil:
    section.add "X-Amz-Content-Sha256", valid_775788
  var valid_775789 = header.getOrDefault("X-Amz-Algorithm")
  valid_775789 = validateParameter(valid_775789, JString, required = false,
                                 default = nil)
  if valid_775789 != nil:
    section.add "X-Amz-Algorithm", valid_775789
  var valid_775790 = header.getOrDefault("X-Amz-Signature")
  valid_775790 = validateParameter(valid_775790, JString, required = false,
                                 default = nil)
  if valid_775790 != nil:
    section.add "X-Amz-Signature", valid_775790
  var valid_775791 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775791 = validateParameter(valid_775791, JString, required = false,
                                 default = nil)
  if valid_775791 != nil:
    section.add "X-Amz-SignedHeaders", valid_775791
  var valid_775792 = header.getOrDefault("X-Amz-Credential")
  valid_775792 = validateParameter(valid_775792, JString, required = false,
                                 default = nil)
  if valid_775792 != nil:
    section.add "X-Amz-Credential", valid_775792
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775793: Call_GetGetUser_775780; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_775793.validator(path, query, header, formData, body)
  let scheme = call_775793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775793.url(scheme.get, call_775793.host, call_775793.base,
                         call_775793.route, valid.getOrDefault("path"))
  result = hook(call_775793, url, valid)

proc call*(call_775794: Call_GetGetUser_775780; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## getGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775795 = newJObject()
  add(query_775795, "UserName", newJString(UserName))
  add(query_775795, "Action", newJString(Action))
  add(query_775795, "Version", newJString(Version))
  result = call_775794.call(nil, query_775795, nil, nil, nil)

var getGetUser* = Call_GetGetUser_775780(name: "getGetUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetUser",
                                      validator: validate_GetGetUser_775781,
                                      base: "/", url: url_GetGetUser_775782,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUserPolicy_775830 = ref object of OpenApiRestCall_772597
proc url_PostGetUserPolicy_775832(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetUserPolicy_775831(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775833 = query.getOrDefault("Action")
  valid_775833 = validateParameter(valid_775833, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_775833 != nil:
    section.add "Action", valid_775833
  var valid_775834 = query.getOrDefault("Version")
  valid_775834 = validateParameter(valid_775834, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775834 != nil:
    section.add "Version", valid_775834
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775835 = header.getOrDefault("X-Amz-Date")
  valid_775835 = validateParameter(valid_775835, JString, required = false,
                                 default = nil)
  if valid_775835 != nil:
    section.add "X-Amz-Date", valid_775835
  var valid_775836 = header.getOrDefault("X-Amz-Security-Token")
  valid_775836 = validateParameter(valid_775836, JString, required = false,
                                 default = nil)
  if valid_775836 != nil:
    section.add "X-Amz-Security-Token", valid_775836
  var valid_775837 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775837 = validateParameter(valid_775837, JString, required = false,
                                 default = nil)
  if valid_775837 != nil:
    section.add "X-Amz-Content-Sha256", valid_775837
  var valid_775838 = header.getOrDefault("X-Amz-Algorithm")
  valid_775838 = validateParameter(valid_775838, JString, required = false,
                                 default = nil)
  if valid_775838 != nil:
    section.add "X-Amz-Algorithm", valid_775838
  var valid_775839 = header.getOrDefault("X-Amz-Signature")
  valid_775839 = validateParameter(valid_775839, JString, required = false,
                                 default = nil)
  if valid_775839 != nil:
    section.add "X-Amz-Signature", valid_775839
  var valid_775840 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775840 = validateParameter(valid_775840, JString, required = false,
                                 default = nil)
  if valid_775840 != nil:
    section.add "X-Amz-SignedHeaders", valid_775840
  var valid_775841 = header.getOrDefault("X-Amz-Credential")
  valid_775841 = validateParameter(valid_775841, JString, required = false,
                                 default = nil)
  if valid_775841 != nil:
    section.add "X-Amz-Credential", valid_775841
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_775842 = formData.getOrDefault("PolicyName")
  valid_775842 = validateParameter(valid_775842, JString, required = true,
                                 default = nil)
  if valid_775842 != nil:
    section.add "PolicyName", valid_775842
  var valid_775843 = formData.getOrDefault("UserName")
  valid_775843 = validateParameter(valid_775843, JString, required = true,
                                 default = nil)
  if valid_775843 != nil:
    section.add "UserName", valid_775843
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775844: Call_PostGetUserPolicy_775830; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_775844.validator(path, query, header, formData, body)
  let scheme = call_775844.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775844.url(scheme.get, call_775844.host, call_775844.base,
                         call_775844.route, valid.getOrDefault("path"))
  result = hook(call_775844, url, valid)

proc call*(call_775845: Call_PostGetUserPolicy_775830; PolicyName: string;
          UserName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775846 = newJObject()
  var formData_775847 = newJObject()
  add(formData_775847, "PolicyName", newJString(PolicyName))
  add(formData_775847, "UserName", newJString(UserName))
  add(query_775846, "Action", newJString(Action))
  add(query_775846, "Version", newJString(Version))
  result = call_775845.call(nil, query_775846, nil, formData_775847, nil)

var postGetUserPolicy* = Call_PostGetUserPolicy_775830(name: "postGetUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_PostGetUserPolicy_775831,
    base: "/", url: url_PostGetUserPolicy_775832,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUserPolicy_775813 = ref object of OpenApiRestCall_772597
proc url_GetGetUserPolicy_775815(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetUserPolicy_775814(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_775816 = query.getOrDefault("UserName")
  valid_775816 = validateParameter(valid_775816, JString, required = true,
                                 default = nil)
  if valid_775816 != nil:
    section.add "UserName", valid_775816
  var valid_775817 = query.getOrDefault("Action")
  valid_775817 = validateParameter(valid_775817, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_775817 != nil:
    section.add "Action", valid_775817
  var valid_775818 = query.getOrDefault("Version")
  valid_775818 = validateParameter(valid_775818, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775818 != nil:
    section.add "Version", valid_775818
  var valid_775819 = query.getOrDefault("PolicyName")
  valid_775819 = validateParameter(valid_775819, JString, required = true,
                                 default = nil)
  if valid_775819 != nil:
    section.add "PolicyName", valid_775819
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775820 = header.getOrDefault("X-Amz-Date")
  valid_775820 = validateParameter(valid_775820, JString, required = false,
                                 default = nil)
  if valid_775820 != nil:
    section.add "X-Amz-Date", valid_775820
  var valid_775821 = header.getOrDefault("X-Amz-Security-Token")
  valid_775821 = validateParameter(valid_775821, JString, required = false,
                                 default = nil)
  if valid_775821 != nil:
    section.add "X-Amz-Security-Token", valid_775821
  var valid_775822 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775822 = validateParameter(valid_775822, JString, required = false,
                                 default = nil)
  if valid_775822 != nil:
    section.add "X-Amz-Content-Sha256", valid_775822
  var valid_775823 = header.getOrDefault("X-Amz-Algorithm")
  valid_775823 = validateParameter(valid_775823, JString, required = false,
                                 default = nil)
  if valid_775823 != nil:
    section.add "X-Amz-Algorithm", valid_775823
  var valid_775824 = header.getOrDefault("X-Amz-Signature")
  valid_775824 = validateParameter(valid_775824, JString, required = false,
                                 default = nil)
  if valid_775824 != nil:
    section.add "X-Amz-Signature", valid_775824
  var valid_775825 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775825 = validateParameter(valid_775825, JString, required = false,
                                 default = nil)
  if valid_775825 != nil:
    section.add "X-Amz-SignedHeaders", valid_775825
  var valid_775826 = header.getOrDefault("X-Amz-Credential")
  valid_775826 = validateParameter(valid_775826, JString, required = false,
                                 default = nil)
  if valid_775826 != nil:
    section.add "X-Amz-Credential", valid_775826
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775827: Call_GetGetUserPolicy_775813; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_775827.validator(path, query, header, formData, body)
  let scheme = call_775827.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775827.url(scheme.get, call_775827.host, call_775827.base,
                         call_775827.route, valid.getOrDefault("path"))
  result = hook(call_775827, url, valid)

proc call*(call_775828: Call_GetGetUserPolicy_775813; UserName: string;
          PolicyName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_775829 = newJObject()
  add(query_775829, "UserName", newJString(UserName))
  add(query_775829, "Action", newJString(Action))
  add(query_775829, "Version", newJString(Version))
  add(query_775829, "PolicyName", newJString(PolicyName))
  result = call_775828.call(nil, query_775829, nil, nil, nil)

var getGetUserPolicy* = Call_GetGetUserPolicy_775813(name: "getGetUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_GetGetUserPolicy_775814,
    base: "/", url: url_GetGetUserPolicy_775815,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccessKeys_775866 = ref object of OpenApiRestCall_772597
proc url_PostListAccessKeys_775868(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAccessKeys_775867(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775869 = query.getOrDefault("Action")
  valid_775869 = validateParameter(valid_775869, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_775869 != nil:
    section.add "Action", valid_775869
  var valid_775870 = query.getOrDefault("Version")
  valid_775870 = validateParameter(valid_775870, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775870 != nil:
    section.add "Version", valid_775870
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775871 = header.getOrDefault("X-Amz-Date")
  valid_775871 = validateParameter(valid_775871, JString, required = false,
                                 default = nil)
  if valid_775871 != nil:
    section.add "X-Amz-Date", valid_775871
  var valid_775872 = header.getOrDefault("X-Amz-Security-Token")
  valid_775872 = validateParameter(valid_775872, JString, required = false,
                                 default = nil)
  if valid_775872 != nil:
    section.add "X-Amz-Security-Token", valid_775872
  var valid_775873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775873 = validateParameter(valid_775873, JString, required = false,
                                 default = nil)
  if valid_775873 != nil:
    section.add "X-Amz-Content-Sha256", valid_775873
  var valid_775874 = header.getOrDefault("X-Amz-Algorithm")
  valid_775874 = validateParameter(valid_775874, JString, required = false,
                                 default = nil)
  if valid_775874 != nil:
    section.add "X-Amz-Algorithm", valid_775874
  var valid_775875 = header.getOrDefault("X-Amz-Signature")
  valid_775875 = validateParameter(valid_775875, JString, required = false,
                                 default = nil)
  if valid_775875 != nil:
    section.add "X-Amz-Signature", valid_775875
  var valid_775876 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775876 = validateParameter(valid_775876, JString, required = false,
                                 default = nil)
  if valid_775876 != nil:
    section.add "X-Amz-SignedHeaders", valid_775876
  var valid_775877 = header.getOrDefault("X-Amz-Credential")
  valid_775877 = validateParameter(valid_775877, JString, required = false,
                                 default = nil)
  if valid_775877 != nil:
    section.add "X-Amz-Credential", valid_775877
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_775878 = formData.getOrDefault("UserName")
  valid_775878 = validateParameter(valid_775878, JString, required = false,
                                 default = nil)
  if valid_775878 != nil:
    section.add "UserName", valid_775878
  var valid_775879 = formData.getOrDefault("Marker")
  valid_775879 = validateParameter(valid_775879, JString, required = false,
                                 default = nil)
  if valid_775879 != nil:
    section.add "Marker", valid_775879
  var valid_775880 = formData.getOrDefault("MaxItems")
  valid_775880 = validateParameter(valid_775880, JInt, required = false, default = nil)
  if valid_775880 != nil:
    section.add "MaxItems", valid_775880
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775881: Call_PostListAccessKeys_775866; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_775881.validator(path, query, header, formData, body)
  let scheme = call_775881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775881.url(scheme.get, call_775881.host, call_775881.base,
                         call_775881.route, valid.getOrDefault("path"))
  result = hook(call_775881, url, valid)

proc call*(call_775882: Call_PostListAccessKeys_775866; UserName: string = "";
          Marker: string = ""; Action: string = "ListAccessKeys"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775883 = newJObject()
  var formData_775884 = newJObject()
  add(formData_775884, "UserName", newJString(UserName))
  add(formData_775884, "Marker", newJString(Marker))
  add(query_775883, "Action", newJString(Action))
  add(formData_775884, "MaxItems", newJInt(MaxItems))
  add(query_775883, "Version", newJString(Version))
  result = call_775882.call(nil, query_775883, nil, formData_775884, nil)

var postListAccessKeys* = Call_PostListAccessKeys_775866(
    name: "postListAccessKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccessKeys",
    validator: validate_PostListAccessKeys_775867, base: "/",
    url: url_PostListAccessKeys_775868, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccessKeys_775848 = ref object of OpenApiRestCall_772597
proc url_GetListAccessKeys_775850(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAccessKeys_775849(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_775851 = query.getOrDefault("UserName")
  valid_775851 = validateParameter(valid_775851, JString, required = false,
                                 default = nil)
  if valid_775851 != nil:
    section.add "UserName", valid_775851
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775852 = query.getOrDefault("Action")
  valid_775852 = validateParameter(valid_775852, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_775852 != nil:
    section.add "Action", valid_775852
  var valid_775853 = query.getOrDefault("Marker")
  valid_775853 = validateParameter(valid_775853, JString, required = false,
                                 default = nil)
  if valid_775853 != nil:
    section.add "Marker", valid_775853
  var valid_775854 = query.getOrDefault("MaxItems")
  valid_775854 = validateParameter(valid_775854, JInt, required = false, default = nil)
  if valid_775854 != nil:
    section.add "MaxItems", valid_775854
  var valid_775855 = query.getOrDefault("Version")
  valid_775855 = validateParameter(valid_775855, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775855 != nil:
    section.add "Version", valid_775855
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775856 = header.getOrDefault("X-Amz-Date")
  valid_775856 = validateParameter(valid_775856, JString, required = false,
                                 default = nil)
  if valid_775856 != nil:
    section.add "X-Amz-Date", valid_775856
  var valid_775857 = header.getOrDefault("X-Amz-Security-Token")
  valid_775857 = validateParameter(valid_775857, JString, required = false,
                                 default = nil)
  if valid_775857 != nil:
    section.add "X-Amz-Security-Token", valid_775857
  var valid_775858 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775858 = validateParameter(valid_775858, JString, required = false,
                                 default = nil)
  if valid_775858 != nil:
    section.add "X-Amz-Content-Sha256", valid_775858
  var valid_775859 = header.getOrDefault("X-Amz-Algorithm")
  valid_775859 = validateParameter(valid_775859, JString, required = false,
                                 default = nil)
  if valid_775859 != nil:
    section.add "X-Amz-Algorithm", valid_775859
  var valid_775860 = header.getOrDefault("X-Amz-Signature")
  valid_775860 = validateParameter(valid_775860, JString, required = false,
                                 default = nil)
  if valid_775860 != nil:
    section.add "X-Amz-Signature", valid_775860
  var valid_775861 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775861 = validateParameter(valid_775861, JString, required = false,
                                 default = nil)
  if valid_775861 != nil:
    section.add "X-Amz-SignedHeaders", valid_775861
  var valid_775862 = header.getOrDefault("X-Amz-Credential")
  valid_775862 = validateParameter(valid_775862, JString, required = false,
                                 default = nil)
  if valid_775862 != nil:
    section.add "X-Amz-Credential", valid_775862
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775863: Call_GetListAccessKeys_775848; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_775863.validator(path, query, header, formData, body)
  let scheme = call_775863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775863.url(scheme.get, call_775863.host, call_775863.base,
                         call_775863.route, valid.getOrDefault("path"))
  result = hook(call_775863, url, valid)

proc call*(call_775864: Call_GetListAccessKeys_775848; UserName: string = "";
          Action: string = "ListAccessKeys"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775865 = newJObject()
  add(query_775865, "UserName", newJString(UserName))
  add(query_775865, "Action", newJString(Action))
  add(query_775865, "Marker", newJString(Marker))
  add(query_775865, "MaxItems", newJInt(MaxItems))
  add(query_775865, "Version", newJString(Version))
  result = call_775864.call(nil, query_775865, nil, nil, nil)

var getListAccessKeys* = Call_GetListAccessKeys_775848(name: "getListAccessKeys",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListAccessKeys", validator: validate_GetListAccessKeys_775849,
    base: "/", url: url_GetListAccessKeys_775850,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccountAliases_775902 = ref object of OpenApiRestCall_772597
proc url_PostListAccountAliases_775904(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAccountAliases_775903(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775905 = query.getOrDefault("Action")
  valid_775905 = validateParameter(valid_775905, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_775905 != nil:
    section.add "Action", valid_775905
  var valid_775906 = query.getOrDefault("Version")
  valid_775906 = validateParameter(valid_775906, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775906 != nil:
    section.add "Version", valid_775906
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775907 = header.getOrDefault("X-Amz-Date")
  valid_775907 = validateParameter(valid_775907, JString, required = false,
                                 default = nil)
  if valid_775907 != nil:
    section.add "X-Amz-Date", valid_775907
  var valid_775908 = header.getOrDefault("X-Amz-Security-Token")
  valid_775908 = validateParameter(valid_775908, JString, required = false,
                                 default = nil)
  if valid_775908 != nil:
    section.add "X-Amz-Security-Token", valid_775908
  var valid_775909 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775909 = validateParameter(valid_775909, JString, required = false,
                                 default = nil)
  if valid_775909 != nil:
    section.add "X-Amz-Content-Sha256", valid_775909
  var valid_775910 = header.getOrDefault("X-Amz-Algorithm")
  valid_775910 = validateParameter(valid_775910, JString, required = false,
                                 default = nil)
  if valid_775910 != nil:
    section.add "X-Amz-Algorithm", valid_775910
  var valid_775911 = header.getOrDefault("X-Amz-Signature")
  valid_775911 = validateParameter(valid_775911, JString, required = false,
                                 default = nil)
  if valid_775911 != nil:
    section.add "X-Amz-Signature", valid_775911
  var valid_775912 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775912 = validateParameter(valid_775912, JString, required = false,
                                 default = nil)
  if valid_775912 != nil:
    section.add "X-Amz-SignedHeaders", valid_775912
  var valid_775913 = header.getOrDefault("X-Amz-Credential")
  valid_775913 = validateParameter(valid_775913, JString, required = false,
                                 default = nil)
  if valid_775913 != nil:
    section.add "X-Amz-Credential", valid_775913
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_775914 = formData.getOrDefault("Marker")
  valid_775914 = validateParameter(valid_775914, JString, required = false,
                                 default = nil)
  if valid_775914 != nil:
    section.add "Marker", valid_775914
  var valid_775915 = formData.getOrDefault("MaxItems")
  valid_775915 = validateParameter(valid_775915, JInt, required = false, default = nil)
  if valid_775915 != nil:
    section.add "MaxItems", valid_775915
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775916: Call_PostListAccountAliases_775902; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_775916.validator(path, query, header, formData, body)
  let scheme = call_775916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775916.url(scheme.get, call_775916.host, call_775916.base,
                         call_775916.route, valid.getOrDefault("path"))
  result = hook(call_775916, url, valid)

proc call*(call_775917: Call_PostListAccountAliases_775902; Marker: string = "";
          Action: string = "ListAccountAliases"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775918 = newJObject()
  var formData_775919 = newJObject()
  add(formData_775919, "Marker", newJString(Marker))
  add(query_775918, "Action", newJString(Action))
  add(formData_775919, "MaxItems", newJInt(MaxItems))
  add(query_775918, "Version", newJString(Version))
  result = call_775917.call(nil, query_775918, nil, formData_775919, nil)

var postListAccountAliases* = Call_PostListAccountAliases_775902(
    name: "postListAccountAliases", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_PostListAccountAliases_775903, base: "/",
    url: url_PostListAccountAliases_775904, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccountAliases_775885 = ref object of OpenApiRestCall_772597
proc url_GetListAccountAliases_775887(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAccountAliases_775886(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775888 = query.getOrDefault("Action")
  valid_775888 = validateParameter(valid_775888, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_775888 != nil:
    section.add "Action", valid_775888
  var valid_775889 = query.getOrDefault("Marker")
  valid_775889 = validateParameter(valid_775889, JString, required = false,
                                 default = nil)
  if valid_775889 != nil:
    section.add "Marker", valid_775889
  var valid_775890 = query.getOrDefault("MaxItems")
  valid_775890 = validateParameter(valid_775890, JInt, required = false, default = nil)
  if valid_775890 != nil:
    section.add "MaxItems", valid_775890
  var valid_775891 = query.getOrDefault("Version")
  valid_775891 = validateParameter(valid_775891, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775891 != nil:
    section.add "Version", valid_775891
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775892 = header.getOrDefault("X-Amz-Date")
  valid_775892 = validateParameter(valid_775892, JString, required = false,
                                 default = nil)
  if valid_775892 != nil:
    section.add "X-Amz-Date", valid_775892
  var valid_775893 = header.getOrDefault("X-Amz-Security-Token")
  valid_775893 = validateParameter(valid_775893, JString, required = false,
                                 default = nil)
  if valid_775893 != nil:
    section.add "X-Amz-Security-Token", valid_775893
  var valid_775894 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775894 = validateParameter(valid_775894, JString, required = false,
                                 default = nil)
  if valid_775894 != nil:
    section.add "X-Amz-Content-Sha256", valid_775894
  var valid_775895 = header.getOrDefault("X-Amz-Algorithm")
  valid_775895 = validateParameter(valid_775895, JString, required = false,
                                 default = nil)
  if valid_775895 != nil:
    section.add "X-Amz-Algorithm", valid_775895
  var valid_775896 = header.getOrDefault("X-Amz-Signature")
  valid_775896 = validateParameter(valid_775896, JString, required = false,
                                 default = nil)
  if valid_775896 != nil:
    section.add "X-Amz-Signature", valid_775896
  var valid_775897 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775897 = validateParameter(valid_775897, JString, required = false,
                                 default = nil)
  if valid_775897 != nil:
    section.add "X-Amz-SignedHeaders", valid_775897
  var valid_775898 = header.getOrDefault("X-Amz-Credential")
  valid_775898 = validateParameter(valid_775898, JString, required = false,
                                 default = nil)
  if valid_775898 != nil:
    section.add "X-Amz-Credential", valid_775898
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775899: Call_GetListAccountAliases_775885; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_775899.validator(path, query, header, formData, body)
  let scheme = call_775899.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775899.url(scheme.get, call_775899.host, call_775899.base,
                         call_775899.route, valid.getOrDefault("path"))
  result = hook(call_775899, url, valid)

proc call*(call_775900: Call_GetListAccountAliases_775885;
          Action: string = "ListAccountAliases"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775901 = newJObject()
  add(query_775901, "Action", newJString(Action))
  add(query_775901, "Marker", newJString(Marker))
  add(query_775901, "MaxItems", newJInt(MaxItems))
  add(query_775901, "Version", newJString(Version))
  result = call_775900.call(nil, query_775901, nil, nil, nil)

var getListAccountAliases* = Call_GetListAccountAliases_775885(
    name: "getListAccountAliases", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_GetListAccountAliases_775886, base: "/",
    url: url_GetListAccountAliases_775887, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedGroupPolicies_775939 = ref object of OpenApiRestCall_772597
proc url_PostListAttachedGroupPolicies_775941(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAttachedGroupPolicies_775940(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775942 = query.getOrDefault("Action")
  valid_775942 = validateParameter(valid_775942, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_775942 != nil:
    section.add "Action", valid_775942
  var valid_775943 = query.getOrDefault("Version")
  valid_775943 = validateParameter(valid_775943, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775943 != nil:
    section.add "Version", valid_775943
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775944 = header.getOrDefault("X-Amz-Date")
  valid_775944 = validateParameter(valid_775944, JString, required = false,
                                 default = nil)
  if valid_775944 != nil:
    section.add "X-Amz-Date", valid_775944
  var valid_775945 = header.getOrDefault("X-Amz-Security-Token")
  valid_775945 = validateParameter(valid_775945, JString, required = false,
                                 default = nil)
  if valid_775945 != nil:
    section.add "X-Amz-Security-Token", valid_775945
  var valid_775946 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775946 = validateParameter(valid_775946, JString, required = false,
                                 default = nil)
  if valid_775946 != nil:
    section.add "X-Amz-Content-Sha256", valid_775946
  var valid_775947 = header.getOrDefault("X-Amz-Algorithm")
  valid_775947 = validateParameter(valid_775947, JString, required = false,
                                 default = nil)
  if valid_775947 != nil:
    section.add "X-Amz-Algorithm", valid_775947
  var valid_775948 = header.getOrDefault("X-Amz-Signature")
  valid_775948 = validateParameter(valid_775948, JString, required = false,
                                 default = nil)
  if valid_775948 != nil:
    section.add "X-Amz-Signature", valid_775948
  var valid_775949 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775949 = validateParameter(valid_775949, JString, required = false,
                                 default = nil)
  if valid_775949 != nil:
    section.add "X-Amz-SignedHeaders", valid_775949
  var valid_775950 = header.getOrDefault("X-Amz-Credential")
  valid_775950 = validateParameter(valid_775950, JString, required = false,
                                 default = nil)
  if valid_775950 != nil:
    section.add "X-Amz-Credential", valid_775950
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_775951 = formData.getOrDefault("PathPrefix")
  valid_775951 = validateParameter(valid_775951, JString, required = false,
                                 default = nil)
  if valid_775951 != nil:
    section.add "PathPrefix", valid_775951
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_775952 = formData.getOrDefault("GroupName")
  valid_775952 = validateParameter(valid_775952, JString, required = true,
                                 default = nil)
  if valid_775952 != nil:
    section.add "GroupName", valid_775952
  var valid_775953 = formData.getOrDefault("Marker")
  valid_775953 = validateParameter(valid_775953, JString, required = false,
                                 default = nil)
  if valid_775953 != nil:
    section.add "Marker", valid_775953
  var valid_775954 = formData.getOrDefault("MaxItems")
  valid_775954 = validateParameter(valid_775954, JInt, required = false, default = nil)
  if valid_775954 != nil:
    section.add "MaxItems", valid_775954
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775955: Call_PostListAttachedGroupPolicies_775939; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_775955.validator(path, query, header, formData, body)
  let scheme = call_775955.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775955.url(scheme.get, call_775955.host, call_775955.base,
                         call_775955.route, valid.getOrDefault("path"))
  result = hook(call_775955, url, valid)

proc call*(call_775956: Call_PostListAttachedGroupPolicies_775939;
          GroupName: string; PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedGroupPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775957 = newJObject()
  var formData_775958 = newJObject()
  add(formData_775958, "PathPrefix", newJString(PathPrefix))
  add(formData_775958, "GroupName", newJString(GroupName))
  add(formData_775958, "Marker", newJString(Marker))
  add(query_775957, "Action", newJString(Action))
  add(formData_775958, "MaxItems", newJInt(MaxItems))
  add(query_775957, "Version", newJString(Version))
  result = call_775956.call(nil, query_775957, nil, formData_775958, nil)

var postListAttachedGroupPolicies* = Call_PostListAttachedGroupPolicies_775939(
    name: "postListAttachedGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_PostListAttachedGroupPolicies_775940, base: "/",
    url: url_PostListAttachedGroupPolicies_775941,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedGroupPolicies_775920 = ref object of OpenApiRestCall_772597
proc url_GetListAttachedGroupPolicies_775922(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAttachedGroupPolicies_775921(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_775923 = query.getOrDefault("PathPrefix")
  valid_775923 = validateParameter(valid_775923, JString, required = false,
                                 default = nil)
  if valid_775923 != nil:
    section.add "PathPrefix", valid_775923
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775924 = query.getOrDefault("Action")
  valid_775924 = validateParameter(valid_775924, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_775924 != nil:
    section.add "Action", valid_775924
  var valid_775925 = query.getOrDefault("Marker")
  valid_775925 = validateParameter(valid_775925, JString, required = false,
                                 default = nil)
  if valid_775925 != nil:
    section.add "Marker", valid_775925
  var valid_775926 = query.getOrDefault("GroupName")
  valid_775926 = validateParameter(valid_775926, JString, required = true,
                                 default = nil)
  if valid_775926 != nil:
    section.add "GroupName", valid_775926
  var valid_775927 = query.getOrDefault("MaxItems")
  valid_775927 = validateParameter(valid_775927, JInt, required = false, default = nil)
  if valid_775927 != nil:
    section.add "MaxItems", valid_775927
  var valid_775928 = query.getOrDefault("Version")
  valid_775928 = validateParameter(valid_775928, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775928 != nil:
    section.add "Version", valid_775928
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775929 = header.getOrDefault("X-Amz-Date")
  valid_775929 = validateParameter(valid_775929, JString, required = false,
                                 default = nil)
  if valid_775929 != nil:
    section.add "X-Amz-Date", valid_775929
  var valid_775930 = header.getOrDefault("X-Amz-Security-Token")
  valid_775930 = validateParameter(valid_775930, JString, required = false,
                                 default = nil)
  if valid_775930 != nil:
    section.add "X-Amz-Security-Token", valid_775930
  var valid_775931 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775931 = validateParameter(valid_775931, JString, required = false,
                                 default = nil)
  if valid_775931 != nil:
    section.add "X-Amz-Content-Sha256", valid_775931
  var valid_775932 = header.getOrDefault("X-Amz-Algorithm")
  valid_775932 = validateParameter(valid_775932, JString, required = false,
                                 default = nil)
  if valid_775932 != nil:
    section.add "X-Amz-Algorithm", valid_775932
  var valid_775933 = header.getOrDefault("X-Amz-Signature")
  valid_775933 = validateParameter(valid_775933, JString, required = false,
                                 default = nil)
  if valid_775933 != nil:
    section.add "X-Amz-Signature", valid_775933
  var valid_775934 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775934 = validateParameter(valid_775934, JString, required = false,
                                 default = nil)
  if valid_775934 != nil:
    section.add "X-Amz-SignedHeaders", valid_775934
  var valid_775935 = header.getOrDefault("X-Amz-Credential")
  valid_775935 = validateParameter(valid_775935, JString, required = false,
                                 default = nil)
  if valid_775935 != nil:
    section.add "X-Amz-Credential", valid_775935
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775936: Call_GetListAttachedGroupPolicies_775920; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_775936.validator(path, query, header, formData, body)
  let scheme = call_775936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775936.url(scheme.get, call_775936.host, call_775936.base,
                         call_775936.route, valid.getOrDefault("path"))
  result = hook(call_775936, url, valid)

proc call*(call_775937: Call_GetListAttachedGroupPolicies_775920;
          GroupName: string; PathPrefix: string = "";
          Action: string = "ListAttachedGroupPolicies"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775938 = newJObject()
  add(query_775938, "PathPrefix", newJString(PathPrefix))
  add(query_775938, "Action", newJString(Action))
  add(query_775938, "Marker", newJString(Marker))
  add(query_775938, "GroupName", newJString(GroupName))
  add(query_775938, "MaxItems", newJInt(MaxItems))
  add(query_775938, "Version", newJString(Version))
  result = call_775937.call(nil, query_775938, nil, nil, nil)

var getListAttachedGroupPolicies* = Call_GetListAttachedGroupPolicies_775920(
    name: "getListAttachedGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_GetListAttachedGroupPolicies_775921, base: "/",
    url: url_GetListAttachedGroupPolicies_775922,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedRolePolicies_775978 = ref object of OpenApiRestCall_772597
proc url_PostListAttachedRolePolicies_775980(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAttachedRolePolicies_775979(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775981 = query.getOrDefault("Action")
  valid_775981 = validateParameter(valid_775981, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_775981 != nil:
    section.add "Action", valid_775981
  var valid_775982 = query.getOrDefault("Version")
  valid_775982 = validateParameter(valid_775982, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775982 != nil:
    section.add "Version", valid_775982
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775983 = header.getOrDefault("X-Amz-Date")
  valid_775983 = validateParameter(valid_775983, JString, required = false,
                                 default = nil)
  if valid_775983 != nil:
    section.add "X-Amz-Date", valid_775983
  var valid_775984 = header.getOrDefault("X-Amz-Security-Token")
  valid_775984 = validateParameter(valid_775984, JString, required = false,
                                 default = nil)
  if valid_775984 != nil:
    section.add "X-Amz-Security-Token", valid_775984
  var valid_775985 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775985 = validateParameter(valid_775985, JString, required = false,
                                 default = nil)
  if valid_775985 != nil:
    section.add "X-Amz-Content-Sha256", valid_775985
  var valid_775986 = header.getOrDefault("X-Amz-Algorithm")
  valid_775986 = validateParameter(valid_775986, JString, required = false,
                                 default = nil)
  if valid_775986 != nil:
    section.add "X-Amz-Algorithm", valid_775986
  var valid_775987 = header.getOrDefault("X-Amz-Signature")
  valid_775987 = validateParameter(valid_775987, JString, required = false,
                                 default = nil)
  if valid_775987 != nil:
    section.add "X-Amz-Signature", valid_775987
  var valid_775988 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775988 = validateParameter(valid_775988, JString, required = false,
                                 default = nil)
  if valid_775988 != nil:
    section.add "X-Amz-SignedHeaders", valid_775988
  var valid_775989 = header.getOrDefault("X-Amz-Credential")
  valid_775989 = validateParameter(valid_775989, JString, required = false,
                                 default = nil)
  if valid_775989 != nil:
    section.add "X-Amz-Credential", valid_775989
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_775990 = formData.getOrDefault("PathPrefix")
  valid_775990 = validateParameter(valid_775990, JString, required = false,
                                 default = nil)
  if valid_775990 != nil:
    section.add "PathPrefix", valid_775990
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_775991 = formData.getOrDefault("RoleName")
  valid_775991 = validateParameter(valid_775991, JString, required = true,
                                 default = nil)
  if valid_775991 != nil:
    section.add "RoleName", valid_775991
  var valid_775992 = formData.getOrDefault("Marker")
  valid_775992 = validateParameter(valid_775992, JString, required = false,
                                 default = nil)
  if valid_775992 != nil:
    section.add "Marker", valid_775992
  var valid_775993 = formData.getOrDefault("MaxItems")
  valid_775993 = validateParameter(valid_775993, JInt, required = false, default = nil)
  if valid_775993 != nil:
    section.add "MaxItems", valid_775993
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775994: Call_PostListAttachedRolePolicies_775978; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_775994.validator(path, query, header, formData, body)
  let scheme = call_775994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775994.url(scheme.get, call_775994.host, call_775994.base,
                         call_775994.route, valid.getOrDefault("path"))
  result = hook(call_775994, url, valid)

proc call*(call_775995: Call_PostListAttachedRolePolicies_775978; RoleName: string;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedRolePolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_775996 = newJObject()
  var formData_775997 = newJObject()
  add(formData_775997, "PathPrefix", newJString(PathPrefix))
  add(formData_775997, "RoleName", newJString(RoleName))
  add(formData_775997, "Marker", newJString(Marker))
  add(query_775996, "Action", newJString(Action))
  add(formData_775997, "MaxItems", newJInt(MaxItems))
  add(query_775996, "Version", newJString(Version))
  result = call_775995.call(nil, query_775996, nil, formData_775997, nil)

var postListAttachedRolePolicies* = Call_PostListAttachedRolePolicies_775978(
    name: "postListAttachedRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_PostListAttachedRolePolicies_775979, base: "/",
    url: url_PostListAttachedRolePolicies_775980,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedRolePolicies_775959 = ref object of OpenApiRestCall_772597
proc url_GetListAttachedRolePolicies_775961(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAttachedRolePolicies_775960(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_775962 = query.getOrDefault("PathPrefix")
  valid_775962 = validateParameter(valid_775962, JString, required = false,
                                 default = nil)
  if valid_775962 != nil:
    section.add "PathPrefix", valid_775962
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775963 = query.getOrDefault("Action")
  valid_775963 = validateParameter(valid_775963, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_775963 != nil:
    section.add "Action", valid_775963
  var valid_775964 = query.getOrDefault("Marker")
  valid_775964 = validateParameter(valid_775964, JString, required = false,
                                 default = nil)
  if valid_775964 != nil:
    section.add "Marker", valid_775964
  var valid_775965 = query.getOrDefault("MaxItems")
  valid_775965 = validateParameter(valid_775965, JInt, required = false, default = nil)
  if valid_775965 != nil:
    section.add "MaxItems", valid_775965
  var valid_775966 = query.getOrDefault("RoleName")
  valid_775966 = validateParameter(valid_775966, JString, required = true,
                                 default = nil)
  if valid_775966 != nil:
    section.add "RoleName", valid_775966
  var valid_775967 = query.getOrDefault("Version")
  valid_775967 = validateParameter(valid_775967, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_775967 != nil:
    section.add "Version", valid_775967
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775968 = header.getOrDefault("X-Amz-Date")
  valid_775968 = validateParameter(valid_775968, JString, required = false,
                                 default = nil)
  if valid_775968 != nil:
    section.add "X-Amz-Date", valid_775968
  var valid_775969 = header.getOrDefault("X-Amz-Security-Token")
  valid_775969 = validateParameter(valid_775969, JString, required = false,
                                 default = nil)
  if valid_775969 != nil:
    section.add "X-Amz-Security-Token", valid_775969
  var valid_775970 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775970 = validateParameter(valid_775970, JString, required = false,
                                 default = nil)
  if valid_775970 != nil:
    section.add "X-Amz-Content-Sha256", valid_775970
  var valid_775971 = header.getOrDefault("X-Amz-Algorithm")
  valid_775971 = validateParameter(valid_775971, JString, required = false,
                                 default = nil)
  if valid_775971 != nil:
    section.add "X-Amz-Algorithm", valid_775971
  var valid_775972 = header.getOrDefault("X-Amz-Signature")
  valid_775972 = validateParameter(valid_775972, JString, required = false,
                                 default = nil)
  if valid_775972 != nil:
    section.add "X-Amz-Signature", valid_775972
  var valid_775973 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775973 = validateParameter(valid_775973, JString, required = false,
                                 default = nil)
  if valid_775973 != nil:
    section.add "X-Amz-SignedHeaders", valid_775973
  var valid_775974 = header.getOrDefault("X-Amz-Credential")
  valid_775974 = validateParameter(valid_775974, JString, required = false,
                                 default = nil)
  if valid_775974 != nil:
    section.add "X-Amz-Credential", valid_775974
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775975: Call_GetListAttachedRolePolicies_775959; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_775975.validator(path, query, header, formData, body)
  let scheme = call_775975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775975.url(scheme.get, call_775975.host, call_775975.base,
                         call_775975.route, valid.getOrDefault("path"))
  result = hook(call_775975, url, valid)

proc call*(call_775976: Call_GetListAttachedRolePolicies_775959; RoleName: string;
          PathPrefix: string = ""; Action: string = "ListAttachedRolePolicies";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_775977 = newJObject()
  add(query_775977, "PathPrefix", newJString(PathPrefix))
  add(query_775977, "Action", newJString(Action))
  add(query_775977, "Marker", newJString(Marker))
  add(query_775977, "MaxItems", newJInt(MaxItems))
  add(query_775977, "RoleName", newJString(RoleName))
  add(query_775977, "Version", newJString(Version))
  result = call_775976.call(nil, query_775977, nil, nil, nil)

var getListAttachedRolePolicies* = Call_GetListAttachedRolePolicies_775959(
    name: "getListAttachedRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_GetListAttachedRolePolicies_775960, base: "/",
    url: url_GetListAttachedRolePolicies_775961,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedUserPolicies_776017 = ref object of OpenApiRestCall_772597
proc url_PostListAttachedUserPolicies_776019(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAttachedUserPolicies_776018(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776020 = query.getOrDefault("Action")
  valid_776020 = validateParameter(valid_776020, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_776020 != nil:
    section.add "Action", valid_776020
  var valid_776021 = query.getOrDefault("Version")
  valid_776021 = validateParameter(valid_776021, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776021 != nil:
    section.add "Version", valid_776021
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776022 = header.getOrDefault("X-Amz-Date")
  valid_776022 = validateParameter(valid_776022, JString, required = false,
                                 default = nil)
  if valid_776022 != nil:
    section.add "X-Amz-Date", valid_776022
  var valid_776023 = header.getOrDefault("X-Amz-Security-Token")
  valid_776023 = validateParameter(valid_776023, JString, required = false,
                                 default = nil)
  if valid_776023 != nil:
    section.add "X-Amz-Security-Token", valid_776023
  var valid_776024 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776024 = validateParameter(valid_776024, JString, required = false,
                                 default = nil)
  if valid_776024 != nil:
    section.add "X-Amz-Content-Sha256", valid_776024
  var valid_776025 = header.getOrDefault("X-Amz-Algorithm")
  valid_776025 = validateParameter(valid_776025, JString, required = false,
                                 default = nil)
  if valid_776025 != nil:
    section.add "X-Amz-Algorithm", valid_776025
  var valid_776026 = header.getOrDefault("X-Amz-Signature")
  valid_776026 = validateParameter(valid_776026, JString, required = false,
                                 default = nil)
  if valid_776026 != nil:
    section.add "X-Amz-Signature", valid_776026
  var valid_776027 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776027 = validateParameter(valid_776027, JString, required = false,
                                 default = nil)
  if valid_776027 != nil:
    section.add "X-Amz-SignedHeaders", valid_776027
  var valid_776028 = header.getOrDefault("X-Amz-Credential")
  valid_776028 = validateParameter(valid_776028, JString, required = false,
                                 default = nil)
  if valid_776028 != nil:
    section.add "X-Amz-Credential", valid_776028
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_776029 = formData.getOrDefault("PathPrefix")
  valid_776029 = validateParameter(valid_776029, JString, required = false,
                                 default = nil)
  if valid_776029 != nil:
    section.add "PathPrefix", valid_776029
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_776030 = formData.getOrDefault("UserName")
  valid_776030 = validateParameter(valid_776030, JString, required = true,
                                 default = nil)
  if valid_776030 != nil:
    section.add "UserName", valid_776030
  var valid_776031 = formData.getOrDefault("Marker")
  valid_776031 = validateParameter(valid_776031, JString, required = false,
                                 default = nil)
  if valid_776031 != nil:
    section.add "Marker", valid_776031
  var valid_776032 = formData.getOrDefault("MaxItems")
  valid_776032 = validateParameter(valid_776032, JInt, required = false, default = nil)
  if valid_776032 != nil:
    section.add "MaxItems", valid_776032
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776033: Call_PostListAttachedUserPolicies_776017; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_776033.validator(path, query, header, formData, body)
  let scheme = call_776033.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776033.url(scheme.get, call_776033.host, call_776033.base,
                         call_776033.route, valid.getOrDefault("path"))
  result = hook(call_776033, url, valid)

proc call*(call_776034: Call_PostListAttachedUserPolicies_776017; UserName: string;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedUserPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776035 = newJObject()
  var formData_776036 = newJObject()
  add(formData_776036, "PathPrefix", newJString(PathPrefix))
  add(formData_776036, "UserName", newJString(UserName))
  add(formData_776036, "Marker", newJString(Marker))
  add(query_776035, "Action", newJString(Action))
  add(formData_776036, "MaxItems", newJInt(MaxItems))
  add(query_776035, "Version", newJString(Version))
  result = call_776034.call(nil, query_776035, nil, formData_776036, nil)

var postListAttachedUserPolicies* = Call_PostListAttachedUserPolicies_776017(
    name: "postListAttachedUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_PostListAttachedUserPolicies_776018, base: "/",
    url: url_PostListAttachedUserPolicies_776019,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedUserPolicies_775998 = ref object of OpenApiRestCall_772597
proc url_GetListAttachedUserPolicies_776000(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAttachedUserPolicies_775999(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_776001 = query.getOrDefault("PathPrefix")
  valid_776001 = validateParameter(valid_776001, JString, required = false,
                                 default = nil)
  if valid_776001 != nil:
    section.add "PathPrefix", valid_776001
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_776002 = query.getOrDefault("UserName")
  valid_776002 = validateParameter(valid_776002, JString, required = true,
                                 default = nil)
  if valid_776002 != nil:
    section.add "UserName", valid_776002
  var valid_776003 = query.getOrDefault("Action")
  valid_776003 = validateParameter(valid_776003, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_776003 != nil:
    section.add "Action", valid_776003
  var valid_776004 = query.getOrDefault("Marker")
  valid_776004 = validateParameter(valid_776004, JString, required = false,
                                 default = nil)
  if valid_776004 != nil:
    section.add "Marker", valid_776004
  var valid_776005 = query.getOrDefault("MaxItems")
  valid_776005 = validateParameter(valid_776005, JInt, required = false, default = nil)
  if valid_776005 != nil:
    section.add "MaxItems", valid_776005
  var valid_776006 = query.getOrDefault("Version")
  valid_776006 = validateParameter(valid_776006, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776006 != nil:
    section.add "Version", valid_776006
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776007 = header.getOrDefault("X-Amz-Date")
  valid_776007 = validateParameter(valid_776007, JString, required = false,
                                 default = nil)
  if valid_776007 != nil:
    section.add "X-Amz-Date", valid_776007
  var valid_776008 = header.getOrDefault("X-Amz-Security-Token")
  valid_776008 = validateParameter(valid_776008, JString, required = false,
                                 default = nil)
  if valid_776008 != nil:
    section.add "X-Amz-Security-Token", valid_776008
  var valid_776009 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776009 = validateParameter(valid_776009, JString, required = false,
                                 default = nil)
  if valid_776009 != nil:
    section.add "X-Amz-Content-Sha256", valid_776009
  var valid_776010 = header.getOrDefault("X-Amz-Algorithm")
  valid_776010 = validateParameter(valid_776010, JString, required = false,
                                 default = nil)
  if valid_776010 != nil:
    section.add "X-Amz-Algorithm", valid_776010
  var valid_776011 = header.getOrDefault("X-Amz-Signature")
  valid_776011 = validateParameter(valid_776011, JString, required = false,
                                 default = nil)
  if valid_776011 != nil:
    section.add "X-Amz-Signature", valid_776011
  var valid_776012 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776012 = validateParameter(valid_776012, JString, required = false,
                                 default = nil)
  if valid_776012 != nil:
    section.add "X-Amz-SignedHeaders", valid_776012
  var valid_776013 = header.getOrDefault("X-Amz-Credential")
  valid_776013 = validateParameter(valid_776013, JString, required = false,
                                 default = nil)
  if valid_776013 != nil:
    section.add "X-Amz-Credential", valid_776013
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776014: Call_GetListAttachedUserPolicies_775998; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_776014.validator(path, query, header, formData, body)
  let scheme = call_776014.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776014.url(scheme.get, call_776014.host, call_776014.base,
                         call_776014.route, valid.getOrDefault("path"))
  result = hook(call_776014, url, valid)

proc call*(call_776015: Call_GetListAttachedUserPolicies_775998; UserName: string;
          PathPrefix: string = ""; Action: string = "ListAttachedUserPolicies";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776016 = newJObject()
  add(query_776016, "PathPrefix", newJString(PathPrefix))
  add(query_776016, "UserName", newJString(UserName))
  add(query_776016, "Action", newJString(Action))
  add(query_776016, "Marker", newJString(Marker))
  add(query_776016, "MaxItems", newJInt(MaxItems))
  add(query_776016, "Version", newJString(Version))
  result = call_776015.call(nil, query_776016, nil, nil, nil)

var getListAttachedUserPolicies* = Call_GetListAttachedUserPolicies_775998(
    name: "getListAttachedUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_GetListAttachedUserPolicies_775999, base: "/",
    url: url_GetListAttachedUserPolicies_776000,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListEntitiesForPolicy_776058 = ref object of OpenApiRestCall_772597
proc url_PostListEntitiesForPolicy_776060(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListEntitiesForPolicy_776059(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776061 = query.getOrDefault("Action")
  valid_776061 = validateParameter(valid_776061, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_776061 != nil:
    section.add "Action", valid_776061
  var valid_776062 = query.getOrDefault("Version")
  valid_776062 = validateParameter(valid_776062, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776062 != nil:
    section.add "Version", valid_776062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776063 = header.getOrDefault("X-Amz-Date")
  valid_776063 = validateParameter(valid_776063, JString, required = false,
                                 default = nil)
  if valid_776063 != nil:
    section.add "X-Amz-Date", valid_776063
  var valid_776064 = header.getOrDefault("X-Amz-Security-Token")
  valid_776064 = validateParameter(valid_776064, JString, required = false,
                                 default = nil)
  if valid_776064 != nil:
    section.add "X-Amz-Security-Token", valid_776064
  var valid_776065 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776065 = validateParameter(valid_776065, JString, required = false,
                                 default = nil)
  if valid_776065 != nil:
    section.add "X-Amz-Content-Sha256", valid_776065
  var valid_776066 = header.getOrDefault("X-Amz-Algorithm")
  valid_776066 = validateParameter(valid_776066, JString, required = false,
                                 default = nil)
  if valid_776066 != nil:
    section.add "X-Amz-Algorithm", valid_776066
  var valid_776067 = header.getOrDefault("X-Amz-Signature")
  valid_776067 = validateParameter(valid_776067, JString, required = false,
                                 default = nil)
  if valid_776067 != nil:
    section.add "X-Amz-Signature", valid_776067
  var valid_776068 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776068 = validateParameter(valid_776068, JString, required = false,
                                 default = nil)
  if valid_776068 != nil:
    section.add "X-Amz-SignedHeaders", valid_776068
  var valid_776069 = header.getOrDefault("X-Amz-Credential")
  valid_776069 = validateParameter(valid_776069, JString, required = false,
                                 default = nil)
  if valid_776069 != nil:
    section.add "X-Amz-Credential", valid_776069
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_776070 = formData.getOrDefault("PathPrefix")
  valid_776070 = validateParameter(valid_776070, JString, required = false,
                                 default = nil)
  if valid_776070 != nil:
    section.add "PathPrefix", valid_776070
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_776071 = formData.getOrDefault("PolicyArn")
  valid_776071 = validateParameter(valid_776071, JString, required = true,
                                 default = nil)
  if valid_776071 != nil:
    section.add "PolicyArn", valid_776071
  var valid_776072 = formData.getOrDefault("EntityFilter")
  valid_776072 = validateParameter(valid_776072, JString, required = false,
                                 default = newJString("User"))
  if valid_776072 != nil:
    section.add "EntityFilter", valid_776072
  var valid_776073 = formData.getOrDefault("Marker")
  valid_776073 = validateParameter(valid_776073, JString, required = false,
                                 default = nil)
  if valid_776073 != nil:
    section.add "Marker", valid_776073
  var valid_776074 = formData.getOrDefault("PolicyUsageFilter")
  valid_776074 = validateParameter(valid_776074, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_776074 != nil:
    section.add "PolicyUsageFilter", valid_776074
  var valid_776075 = formData.getOrDefault("MaxItems")
  valid_776075 = validateParameter(valid_776075, JInt, required = false, default = nil)
  if valid_776075 != nil:
    section.add "MaxItems", valid_776075
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776076: Call_PostListEntitiesForPolicy_776058; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776076.validator(path, query, header, formData, body)
  let scheme = call_776076.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776076.url(scheme.get, call_776076.host, call_776076.base,
                         call_776076.route, valid.getOrDefault("path"))
  result = hook(call_776076, url, valid)

proc call*(call_776077: Call_PostListEntitiesForPolicy_776058; PolicyArn: string;
          PathPrefix: string = ""; EntityFilter: string = "User"; Marker: string = "";
          PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListEntitiesForPolicy"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776078 = newJObject()
  var formData_776079 = newJObject()
  add(formData_776079, "PathPrefix", newJString(PathPrefix))
  add(formData_776079, "PolicyArn", newJString(PolicyArn))
  add(formData_776079, "EntityFilter", newJString(EntityFilter))
  add(formData_776079, "Marker", newJString(Marker))
  add(formData_776079, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_776078, "Action", newJString(Action))
  add(formData_776079, "MaxItems", newJInt(MaxItems))
  add(query_776078, "Version", newJString(Version))
  result = call_776077.call(nil, query_776078, nil, formData_776079, nil)

var postListEntitiesForPolicy* = Call_PostListEntitiesForPolicy_776058(
    name: "postListEntitiesForPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_PostListEntitiesForPolicy_776059, base: "/",
    url: url_PostListEntitiesForPolicy_776060,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListEntitiesForPolicy_776037 = ref object of OpenApiRestCall_772597
proc url_GetListEntitiesForPolicy_776039(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListEntitiesForPolicy_776038(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_776040 = query.getOrDefault("PathPrefix")
  valid_776040 = validateParameter(valid_776040, JString, required = false,
                                 default = nil)
  if valid_776040 != nil:
    section.add "PathPrefix", valid_776040
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_776041 = query.getOrDefault("PolicyArn")
  valid_776041 = validateParameter(valid_776041, JString, required = true,
                                 default = nil)
  if valid_776041 != nil:
    section.add "PolicyArn", valid_776041
  var valid_776042 = query.getOrDefault("PolicyUsageFilter")
  valid_776042 = validateParameter(valid_776042, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_776042 != nil:
    section.add "PolicyUsageFilter", valid_776042
  var valid_776043 = query.getOrDefault("Action")
  valid_776043 = validateParameter(valid_776043, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_776043 != nil:
    section.add "Action", valid_776043
  var valid_776044 = query.getOrDefault("Marker")
  valid_776044 = validateParameter(valid_776044, JString, required = false,
                                 default = nil)
  if valid_776044 != nil:
    section.add "Marker", valid_776044
  var valid_776045 = query.getOrDefault("EntityFilter")
  valid_776045 = validateParameter(valid_776045, JString, required = false,
                                 default = newJString("User"))
  if valid_776045 != nil:
    section.add "EntityFilter", valid_776045
  var valid_776046 = query.getOrDefault("MaxItems")
  valid_776046 = validateParameter(valid_776046, JInt, required = false, default = nil)
  if valid_776046 != nil:
    section.add "MaxItems", valid_776046
  var valid_776047 = query.getOrDefault("Version")
  valid_776047 = validateParameter(valid_776047, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776047 != nil:
    section.add "Version", valid_776047
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776048 = header.getOrDefault("X-Amz-Date")
  valid_776048 = validateParameter(valid_776048, JString, required = false,
                                 default = nil)
  if valid_776048 != nil:
    section.add "X-Amz-Date", valid_776048
  var valid_776049 = header.getOrDefault("X-Amz-Security-Token")
  valid_776049 = validateParameter(valid_776049, JString, required = false,
                                 default = nil)
  if valid_776049 != nil:
    section.add "X-Amz-Security-Token", valid_776049
  var valid_776050 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776050 = validateParameter(valid_776050, JString, required = false,
                                 default = nil)
  if valid_776050 != nil:
    section.add "X-Amz-Content-Sha256", valid_776050
  var valid_776051 = header.getOrDefault("X-Amz-Algorithm")
  valid_776051 = validateParameter(valid_776051, JString, required = false,
                                 default = nil)
  if valid_776051 != nil:
    section.add "X-Amz-Algorithm", valid_776051
  var valid_776052 = header.getOrDefault("X-Amz-Signature")
  valid_776052 = validateParameter(valid_776052, JString, required = false,
                                 default = nil)
  if valid_776052 != nil:
    section.add "X-Amz-Signature", valid_776052
  var valid_776053 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776053 = validateParameter(valid_776053, JString, required = false,
                                 default = nil)
  if valid_776053 != nil:
    section.add "X-Amz-SignedHeaders", valid_776053
  var valid_776054 = header.getOrDefault("X-Amz-Credential")
  valid_776054 = validateParameter(valid_776054, JString, required = false,
                                 default = nil)
  if valid_776054 != nil:
    section.add "X-Amz-Credential", valid_776054
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776055: Call_GetListEntitiesForPolicy_776037; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776055.validator(path, query, header, formData, body)
  let scheme = call_776055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776055.url(scheme.get, call_776055.host, call_776055.base,
                         call_776055.route, valid.getOrDefault("path"))
  result = hook(call_776055, url, valid)

proc call*(call_776056: Call_GetListEntitiesForPolicy_776037; PolicyArn: string;
          PathPrefix: string = ""; PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListEntitiesForPolicy"; Marker: string = "";
          EntityFilter: string = "User"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776057 = newJObject()
  add(query_776057, "PathPrefix", newJString(PathPrefix))
  add(query_776057, "PolicyArn", newJString(PolicyArn))
  add(query_776057, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_776057, "Action", newJString(Action))
  add(query_776057, "Marker", newJString(Marker))
  add(query_776057, "EntityFilter", newJString(EntityFilter))
  add(query_776057, "MaxItems", newJInt(MaxItems))
  add(query_776057, "Version", newJString(Version))
  result = call_776056.call(nil, query_776057, nil, nil, nil)

var getListEntitiesForPolicy* = Call_GetListEntitiesForPolicy_776037(
    name: "getListEntitiesForPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_GetListEntitiesForPolicy_776038, base: "/",
    url: url_GetListEntitiesForPolicy_776039, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupPolicies_776098 = ref object of OpenApiRestCall_772597
proc url_PostListGroupPolicies_776100(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListGroupPolicies_776099(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776101 = query.getOrDefault("Action")
  valid_776101 = validateParameter(valid_776101, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_776101 != nil:
    section.add "Action", valid_776101
  var valid_776102 = query.getOrDefault("Version")
  valid_776102 = validateParameter(valid_776102, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776102 != nil:
    section.add "Version", valid_776102
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776103 = header.getOrDefault("X-Amz-Date")
  valid_776103 = validateParameter(valid_776103, JString, required = false,
                                 default = nil)
  if valid_776103 != nil:
    section.add "X-Amz-Date", valid_776103
  var valid_776104 = header.getOrDefault("X-Amz-Security-Token")
  valid_776104 = validateParameter(valid_776104, JString, required = false,
                                 default = nil)
  if valid_776104 != nil:
    section.add "X-Amz-Security-Token", valid_776104
  var valid_776105 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776105 = validateParameter(valid_776105, JString, required = false,
                                 default = nil)
  if valid_776105 != nil:
    section.add "X-Amz-Content-Sha256", valid_776105
  var valid_776106 = header.getOrDefault("X-Amz-Algorithm")
  valid_776106 = validateParameter(valid_776106, JString, required = false,
                                 default = nil)
  if valid_776106 != nil:
    section.add "X-Amz-Algorithm", valid_776106
  var valid_776107 = header.getOrDefault("X-Amz-Signature")
  valid_776107 = validateParameter(valid_776107, JString, required = false,
                                 default = nil)
  if valid_776107 != nil:
    section.add "X-Amz-Signature", valid_776107
  var valid_776108 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776108 = validateParameter(valid_776108, JString, required = false,
                                 default = nil)
  if valid_776108 != nil:
    section.add "X-Amz-SignedHeaders", valid_776108
  var valid_776109 = header.getOrDefault("X-Amz-Credential")
  valid_776109 = validateParameter(valid_776109, JString, required = false,
                                 default = nil)
  if valid_776109 != nil:
    section.add "X-Amz-Credential", valid_776109
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_776110 = formData.getOrDefault("GroupName")
  valid_776110 = validateParameter(valid_776110, JString, required = true,
                                 default = nil)
  if valid_776110 != nil:
    section.add "GroupName", valid_776110
  var valid_776111 = formData.getOrDefault("Marker")
  valid_776111 = validateParameter(valid_776111, JString, required = false,
                                 default = nil)
  if valid_776111 != nil:
    section.add "Marker", valid_776111
  var valid_776112 = formData.getOrDefault("MaxItems")
  valid_776112 = validateParameter(valid_776112, JInt, required = false, default = nil)
  if valid_776112 != nil:
    section.add "MaxItems", valid_776112
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776113: Call_PostListGroupPolicies_776098; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_776113.validator(path, query, header, formData, body)
  let scheme = call_776113.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776113.url(scheme.get, call_776113.host, call_776113.base,
                         call_776113.route, valid.getOrDefault("path"))
  result = hook(call_776113, url, valid)

proc call*(call_776114: Call_PostListGroupPolicies_776098; GroupName: string;
          Marker: string = ""; Action: string = "ListGroupPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776115 = newJObject()
  var formData_776116 = newJObject()
  add(formData_776116, "GroupName", newJString(GroupName))
  add(formData_776116, "Marker", newJString(Marker))
  add(query_776115, "Action", newJString(Action))
  add(formData_776116, "MaxItems", newJInt(MaxItems))
  add(query_776115, "Version", newJString(Version))
  result = call_776114.call(nil, query_776115, nil, formData_776116, nil)

var postListGroupPolicies* = Call_PostListGroupPolicies_776098(
    name: "postListGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_PostListGroupPolicies_776099, base: "/",
    url: url_PostListGroupPolicies_776100, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupPolicies_776080 = ref object of OpenApiRestCall_772597
proc url_GetListGroupPolicies_776082(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListGroupPolicies_776081(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776083 = query.getOrDefault("Action")
  valid_776083 = validateParameter(valid_776083, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_776083 != nil:
    section.add "Action", valid_776083
  var valid_776084 = query.getOrDefault("Marker")
  valid_776084 = validateParameter(valid_776084, JString, required = false,
                                 default = nil)
  if valid_776084 != nil:
    section.add "Marker", valid_776084
  var valid_776085 = query.getOrDefault("GroupName")
  valid_776085 = validateParameter(valid_776085, JString, required = true,
                                 default = nil)
  if valid_776085 != nil:
    section.add "GroupName", valid_776085
  var valid_776086 = query.getOrDefault("MaxItems")
  valid_776086 = validateParameter(valid_776086, JInt, required = false, default = nil)
  if valid_776086 != nil:
    section.add "MaxItems", valid_776086
  var valid_776087 = query.getOrDefault("Version")
  valid_776087 = validateParameter(valid_776087, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776087 != nil:
    section.add "Version", valid_776087
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776088 = header.getOrDefault("X-Amz-Date")
  valid_776088 = validateParameter(valid_776088, JString, required = false,
                                 default = nil)
  if valid_776088 != nil:
    section.add "X-Amz-Date", valid_776088
  var valid_776089 = header.getOrDefault("X-Amz-Security-Token")
  valid_776089 = validateParameter(valid_776089, JString, required = false,
                                 default = nil)
  if valid_776089 != nil:
    section.add "X-Amz-Security-Token", valid_776089
  var valid_776090 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776090 = validateParameter(valid_776090, JString, required = false,
                                 default = nil)
  if valid_776090 != nil:
    section.add "X-Amz-Content-Sha256", valid_776090
  var valid_776091 = header.getOrDefault("X-Amz-Algorithm")
  valid_776091 = validateParameter(valid_776091, JString, required = false,
                                 default = nil)
  if valid_776091 != nil:
    section.add "X-Amz-Algorithm", valid_776091
  var valid_776092 = header.getOrDefault("X-Amz-Signature")
  valid_776092 = validateParameter(valid_776092, JString, required = false,
                                 default = nil)
  if valid_776092 != nil:
    section.add "X-Amz-Signature", valid_776092
  var valid_776093 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776093 = validateParameter(valid_776093, JString, required = false,
                                 default = nil)
  if valid_776093 != nil:
    section.add "X-Amz-SignedHeaders", valid_776093
  var valid_776094 = header.getOrDefault("X-Amz-Credential")
  valid_776094 = validateParameter(valid_776094, JString, required = false,
                                 default = nil)
  if valid_776094 != nil:
    section.add "X-Amz-Credential", valid_776094
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776095: Call_GetListGroupPolicies_776080; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_776095.validator(path, query, header, formData, body)
  let scheme = call_776095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776095.url(scheme.get, call_776095.host, call_776095.base,
                         call_776095.route, valid.getOrDefault("path"))
  result = hook(call_776095, url, valid)

proc call*(call_776096: Call_GetListGroupPolicies_776080; GroupName: string;
          Action: string = "ListGroupPolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776097 = newJObject()
  add(query_776097, "Action", newJString(Action))
  add(query_776097, "Marker", newJString(Marker))
  add(query_776097, "GroupName", newJString(GroupName))
  add(query_776097, "MaxItems", newJInt(MaxItems))
  add(query_776097, "Version", newJString(Version))
  result = call_776096.call(nil, query_776097, nil, nil, nil)

var getListGroupPolicies* = Call_GetListGroupPolicies_776080(
    name: "getListGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_GetListGroupPolicies_776081, base: "/",
    url: url_GetListGroupPolicies_776082, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroups_776135 = ref object of OpenApiRestCall_772597
proc url_PostListGroups_776137(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListGroups_776136(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776138 = query.getOrDefault("Action")
  valid_776138 = validateParameter(valid_776138, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_776138 != nil:
    section.add "Action", valid_776138
  var valid_776139 = query.getOrDefault("Version")
  valid_776139 = validateParameter(valid_776139, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776139 != nil:
    section.add "Version", valid_776139
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776140 = header.getOrDefault("X-Amz-Date")
  valid_776140 = validateParameter(valid_776140, JString, required = false,
                                 default = nil)
  if valid_776140 != nil:
    section.add "X-Amz-Date", valid_776140
  var valid_776141 = header.getOrDefault("X-Amz-Security-Token")
  valid_776141 = validateParameter(valid_776141, JString, required = false,
                                 default = nil)
  if valid_776141 != nil:
    section.add "X-Amz-Security-Token", valid_776141
  var valid_776142 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776142 = validateParameter(valid_776142, JString, required = false,
                                 default = nil)
  if valid_776142 != nil:
    section.add "X-Amz-Content-Sha256", valid_776142
  var valid_776143 = header.getOrDefault("X-Amz-Algorithm")
  valid_776143 = validateParameter(valid_776143, JString, required = false,
                                 default = nil)
  if valid_776143 != nil:
    section.add "X-Amz-Algorithm", valid_776143
  var valid_776144 = header.getOrDefault("X-Amz-Signature")
  valid_776144 = validateParameter(valid_776144, JString, required = false,
                                 default = nil)
  if valid_776144 != nil:
    section.add "X-Amz-Signature", valid_776144
  var valid_776145 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776145 = validateParameter(valid_776145, JString, required = false,
                                 default = nil)
  if valid_776145 != nil:
    section.add "X-Amz-SignedHeaders", valid_776145
  var valid_776146 = header.getOrDefault("X-Amz-Credential")
  valid_776146 = validateParameter(valid_776146, JString, required = false,
                                 default = nil)
  if valid_776146 != nil:
    section.add "X-Amz-Credential", valid_776146
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_776147 = formData.getOrDefault("PathPrefix")
  valid_776147 = validateParameter(valid_776147, JString, required = false,
                                 default = nil)
  if valid_776147 != nil:
    section.add "PathPrefix", valid_776147
  var valid_776148 = formData.getOrDefault("Marker")
  valid_776148 = validateParameter(valid_776148, JString, required = false,
                                 default = nil)
  if valid_776148 != nil:
    section.add "Marker", valid_776148
  var valid_776149 = formData.getOrDefault("MaxItems")
  valid_776149 = validateParameter(valid_776149, JInt, required = false, default = nil)
  if valid_776149 != nil:
    section.add "MaxItems", valid_776149
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776150: Call_PostListGroups_776135; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776150.validator(path, query, header, formData, body)
  let scheme = call_776150.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776150.url(scheme.get, call_776150.host, call_776150.base,
                         call_776150.route, valid.getOrDefault("path"))
  result = hook(call_776150, url, valid)

proc call*(call_776151: Call_PostListGroups_776135; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListGroups"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776152 = newJObject()
  var formData_776153 = newJObject()
  add(formData_776153, "PathPrefix", newJString(PathPrefix))
  add(formData_776153, "Marker", newJString(Marker))
  add(query_776152, "Action", newJString(Action))
  add(formData_776153, "MaxItems", newJInt(MaxItems))
  add(query_776152, "Version", newJString(Version))
  result = call_776151.call(nil, query_776152, nil, formData_776153, nil)

var postListGroups* = Call_PostListGroups_776135(name: "postListGroups",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_PostListGroups_776136,
    base: "/", url: url_PostListGroups_776137, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroups_776117 = ref object of OpenApiRestCall_772597
proc url_GetListGroups_776119(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListGroups_776118(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_776120 = query.getOrDefault("PathPrefix")
  valid_776120 = validateParameter(valid_776120, JString, required = false,
                                 default = nil)
  if valid_776120 != nil:
    section.add "PathPrefix", valid_776120
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776121 = query.getOrDefault("Action")
  valid_776121 = validateParameter(valid_776121, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_776121 != nil:
    section.add "Action", valid_776121
  var valid_776122 = query.getOrDefault("Marker")
  valid_776122 = validateParameter(valid_776122, JString, required = false,
                                 default = nil)
  if valid_776122 != nil:
    section.add "Marker", valid_776122
  var valid_776123 = query.getOrDefault("MaxItems")
  valid_776123 = validateParameter(valid_776123, JInt, required = false, default = nil)
  if valid_776123 != nil:
    section.add "MaxItems", valid_776123
  var valid_776124 = query.getOrDefault("Version")
  valid_776124 = validateParameter(valid_776124, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776124 != nil:
    section.add "Version", valid_776124
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776125 = header.getOrDefault("X-Amz-Date")
  valid_776125 = validateParameter(valid_776125, JString, required = false,
                                 default = nil)
  if valid_776125 != nil:
    section.add "X-Amz-Date", valid_776125
  var valid_776126 = header.getOrDefault("X-Amz-Security-Token")
  valid_776126 = validateParameter(valid_776126, JString, required = false,
                                 default = nil)
  if valid_776126 != nil:
    section.add "X-Amz-Security-Token", valid_776126
  var valid_776127 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776127 = validateParameter(valid_776127, JString, required = false,
                                 default = nil)
  if valid_776127 != nil:
    section.add "X-Amz-Content-Sha256", valid_776127
  var valid_776128 = header.getOrDefault("X-Amz-Algorithm")
  valid_776128 = validateParameter(valid_776128, JString, required = false,
                                 default = nil)
  if valid_776128 != nil:
    section.add "X-Amz-Algorithm", valid_776128
  var valid_776129 = header.getOrDefault("X-Amz-Signature")
  valid_776129 = validateParameter(valid_776129, JString, required = false,
                                 default = nil)
  if valid_776129 != nil:
    section.add "X-Amz-Signature", valid_776129
  var valid_776130 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776130 = validateParameter(valid_776130, JString, required = false,
                                 default = nil)
  if valid_776130 != nil:
    section.add "X-Amz-SignedHeaders", valid_776130
  var valid_776131 = header.getOrDefault("X-Amz-Credential")
  valid_776131 = validateParameter(valid_776131, JString, required = false,
                                 default = nil)
  if valid_776131 != nil:
    section.add "X-Amz-Credential", valid_776131
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776132: Call_GetListGroups_776117; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776132.validator(path, query, header, formData, body)
  let scheme = call_776132.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776132.url(scheme.get, call_776132.host, call_776132.base,
                         call_776132.route, valid.getOrDefault("path"))
  result = hook(call_776132, url, valid)

proc call*(call_776133: Call_GetListGroups_776117; PathPrefix: string = "";
          Action: string = "ListGroups"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776134 = newJObject()
  add(query_776134, "PathPrefix", newJString(PathPrefix))
  add(query_776134, "Action", newJString(Action))
  add(query_776134, "Marker", newJString(Marker))
  add(query_776134, "MaxItems", newJInt(MaxItems))
  add(query_776134, "Version", newJString(Version))
  result = call_776133.call(nil, query_776134, nil, nil, nil)

var getListGroups* = Call_GetListGroups_776117(name: "getListGroups",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_GetListGroups_776118,
    base: "/", url: url_GetListGroups_776119, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupsForUser_776172 = ref object of OpenApiRestCall_772597
proc url_PostListGroupsForUser_776174(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListGroupsForUser_776173(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776175 = query.getOrDefault("Action")
  valid_776175 = validateParameter(valid_776175, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_776175 != nil:
    section.add "Action", valid_776175
  var valid_776176 = query.getOrDefault("Version")
  valid_776176 = validateParameter(valid_776176, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776176 != nil:
    section.add "Version", valid_776176
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776177 = header.getOrDefault("X-Amz-Date")
  valid_776177 = validateParameter(valid_776177, JString, required = false,
                                 default = nil)
  if valid_776177 != nil:
    section.add "X-Amz-Date", valid_776177
  var valid_776178 = header.getOrDefault("X-Amz-Security-Token")
  valid_776178 = validateParameter(valid_776178, JString, required = false,
                                 default = nil)
  if valid_776178 != nil:
    section.add "X-Amz-Security-Token", valid_776178
  var valid_776179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776179 = validateParameter(valid_776179, JString, required = false,
                                 default = nil)
  if valid_776179 != nil:
    section.add "X-Amz-Content-Sha256", valid_776179
  var valid_776180 = header.getOrDefault("X-Amz-Algorithm")
  valid_776180 = validateParameter(valid_776180, JString, required = false,
                                 default = nil)
  if valid_776180 != nil:
    section.add "X-Amz-Algorithm", valid_776180
  var valid_776181 = header.getOrDefault("X-Amz-Signature")
  valid_776181 = validateParameter(valid_776181, JString, required = false,
                                 default = nil)
  if valid_776181 != nil:
    section.add "X-Amz-Signature", valid_776181
  var valid_776182 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776182 = validateParameter(valid_776182, JString, required = false,
                                 default = nil)
  if valid_776182 != nil:
    section.add "X-Amz-SignedHeaders", valid_776182
  var valid_776183 = header.getOrDefault("X-Amz-Credential")
  valid_776183 = validateParameter(valid_776183, JString, required = false,
                                 default = nil)
  if valid_776183 != nil:
    section.add "X-Amz-Credential", valid_776183
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_776184 = formData.getOrDefault("UserName")
  valid_776184 = validateParameter(valid_776184, JString, required = true,
                                 default = nil)
  if valid_776184 != nil:
    section.add "UserName", valid_776184
  var valid_776185 = formData.getOrDefault("Marker")
  valid_776185 = validateParameter(valid_776185, JString, required = false,
                                 default = nil)
  if valid_776185 != nil:
    section.add "Marker", valid_776185
  var valid_776186 = formData.getOrDefault("MaxItems")
  valid_776186 = validateParameter(valid_776186, JInt, required = false, default = nil)
  if valid_776186 != nil:
    section.add "MaxItems", valid_776186
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776187: Call_PostListGroupsForUser_776172; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776187.validator(path, query, header, formData, body)
  let scheme = call_776187.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776187.url(scheme.get, call_776187.host, call_776187.base,
                         call_776187.route, valid.getOrDefault("path"))
  result = hook(call_776187, url, valid)

proc call*(call_776188: Call_PostListGroupsForUser_776172; UserName: string;
          Marker: string = ""; Action: string = "ListGroupsForUser"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776189 = newJObject()
  var formData_776190 = newJObject()
  add(formData_776190, "UserName", newJString(UserName))
  add(formData_776190, "Marker", newJString(Marker))
  add(query_776189, "Action", newJString(Action))
  add(formData_776190, "MaxItems", newJInt(MaxItems))
  add(query_776189, "Version", newJString(Version))
  result = call_776188.call(nil, query_776189, nil, formData_776190, nil)

var postListGroupsForUser* = Call_PostListGroupsForUser_776172(
    name: "postListGroupsForUser", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_PostListGroupsForUser_776173, base: "/",
    url: url_PostListGroupsForUser_776174, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupsForUser_776154 = ref object of OpenApiRestCall_772597
proc url_GetListGroupsForUser_776156(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListGroupsForUser_776155(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_776157 = query.getOrDefault("UserName")
  valid_776157 = validateParameter(valid_776157, JString, required = true,
                                 default = nil)
  if valid_776157 != nil:
    section.add "UserName", valid_776157
  var valid_776158 = query.getOrDefault("Action")
  valid_776158 = validateParameter(valid_776158, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_776158 != nil:
    section.add "Action", valid_776158
  var valid_776159 = query.getOrDefault("Marker")
  valid_776159 = validateParameter(valid_776159, JString, required = false,
                                 default = nil)
  if valid_776159 != nil:
    section.add "Marker", valid_776159
  var valid_776160 = query.getOrDefault("MaxItems")
  valid_776160 = validateParameter(valid_776160, JInt, required = false, default = nil)
  if valid_776160 != nil:
    section.add "MaxItems", valid_776160
  var valid_776161 = query.getOrDefault("Version")
  valid_776161 = validateParameter(valid_776161, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776161 != nil:
    section.add "Version", valid_776161
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776162 = header.getOrDefault("X-Amz-Date")
  valid_776162 = validateParameter(valid_776162, JString, required = false,
                                 default = nil)
  if valid_776162 != nil:
    section.add "X-Amz-Date", valid_776162
  var valid_776163 = header.getOrDefault("X-Amz-Security-Token")
  valid_776163 = validateParameter(valid_776163, JString, required = false,
                                 default = nil)
  if valid_776163 != nil:
    section.add "X-Amz-Security-Token", valid_776163
  var valid_776164 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776164 = validateParameter(valid_776164, JString, required = false,
                                 default = nil)
  if valid_776164 != nil:
    section.add "X-Amz-Content-Sha256", valid_776164
  var valid_776165 = header.getOrDefault("X-Amz-Algorithm")
  valid_776165 = validateParameter(valid_776165, JString, required = false,
                                 default = nil)
  if valid_776165 != nil:
    section.add "X-Amz-Algorithm", valid_776165
  var valid_776166 = header.getOrDefault("X-Amz-Signature")
  valid_776166 = validateParameter(valid_776166, JString, required = false,
                                 default = nil)
  if valid_776166 != nil:
    section.add "X-Amz-Signature", valid_776166
  var valid_776167 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776167 = validateParameter(valid_776167, JString, required = false,
                                 default = nil)
  if valid_776167 != nil:
    section.add "X-Amz-SignedHeaders", valid_776167
  var valid_776168 = header.getOrDefault("X-Amz-Credential")
  valid_776168 = validateParameter(valid_776168, JString, required = false,
                                 default = nil)
  if valid_776168 != nil:
    section.add "X-Amz-Credential", valid_776168
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776169: Call_GetListGroupsForUser_776154; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776169.validator(path, query, header, formData, body)
  let scheme = call_776169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776169.url(scheme.get, call_776169.host, call_776169.base,
                         call_776169.route, valid.getOrDefault("path"))
  result = hook(call_776169, url, valid)

proc call*(call_776170: Call_GetListGroupsForUser_776154; UserName: string;
          Action: string = "ListGroupsForUser"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776171 = newJObject()
  add(query_776171, "UserName", newJString(UserName))
  add(query_776171, "Action", newJString(Action))
  add(query_776171, "Marker", newJString(Marker))
  add(query_776171, "MaxItems", newJInt(MaxItems))
  add(query_776171, "Version", newJString(Version))
  result = call_776170.call(nil, query_776171, nil, nil, nil)

var getListGroupsForUser* = Call_GetListGroupsForUser_776154(
    name: "getListGroupsForUser", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_GetListGroupsForUser_776155, base: "/",
    url: url_GetListGroupsForUser_776156, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfiles_776209 = ref object of OpenApiRestCall_772597
proc url_PostListInstanceProfiles_776211(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListInstanceProfiles_776210(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776212 = query.getOrDefault("Action")
  valid_776212 = validateParameter(valid_776212, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_776212 != nil:
    section.add "Action", valid_776212
  var valid_776213 = query.getOrDefault("Version")
  valid_776213 = validateParameter(valid_776213, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776213 != nil:
    section.add "Version", valid_776213
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776214 = header.getOrDefault("X-Amz-Date")
  valid_776214 = validateParameter(valid_776214, JString, required = false,
                                 default = nil)
  if valid_776214 != nil:
    section.add "X-Amz-Date", valid_776214
  var valid_776215 = header.getOrDefault("X-Amz-Security-Token")
  valid_776215 = validateParameter(valid_776215, JString, required = false,
                                 default = nil)
  if valid_776215 != nil:
    section.add "X-Amz-Security-Token", valid_776215
  var valid_776216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776216 = validateParameter(valid_776216, JString, required = false,
                                 default = nil)
  if valid_776216 != nil:
    section.add "X-Amz-Content-Sha256", valid_776216
  var valid_776217 = header.getOrDefault("X-Amz-Algorithm")
  valid_776217 = validateParameter(valid_776217, JString, required = false,
                                 default = nil)
  if valid_776217 != nil:
    section.add "X-Amz-Algorithm", valid_776217
  var valid_776218 = header.getOrDefault("X-Amz-Signature")
  valid_776218 = validateParameter(valid_776218, JString, required = false,
                                 default = nil)
  if valid_776218 != nil:
    section.add "X-Amz-Signature", valid_776218
  var valid_776219 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776219 = validateParameter(valid_776219, JString, required = false,
                                 default = nil)
  if valid_776219 != nil:
    section.add "X-Amz-SignedHeaders", valid_776219
  var valid_776220 = header.getOrDefault("X-Amz-Credential")
  valid_776220 = validateParameter(valid_776220, JString, required = false,
                                 default = nil)
  if valid_776220 != nil:
    section.add "X-Amz-Credential", valid_776220
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_776221 = formData.getOrDefault("PathPrefix")
  valid_776221 = validateParameter(valid_776221, JString, required = false,
                                 default = nil)
  if valid_776221 != nil:
    section.add "PathPrefix", valid_776221
  var valid_776222 = formData.getOrDefault("Marker")
  valid_776222 = validateParameter(valid_776222, JString, required = false,
                                 default = nil)
  if valid_776222 != nil:
    section.add "Marker", valid_776222
  var valid_776223 = formData.getOrDefault("MaxItems")
  valid_776223 = validateParameter(valid_776223, JInt, required = false, default = nil)
  if valid_776223 != nil:
    section.add "MaxItems", valid_776223
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776224: Call_PostListInstanceProfiles_776209; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776224.validator(path, query, header, formData, body)
  let scheme = call_776224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776224.url(scheme.get, call_776224.host, call_776224.base,
                         call_776224.route, valid.getOrDefault("path"))
  result = hook(call_776224, url, valid)

proc call*(call_776225: Call_PostListInstanceProfiles_776209;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListInstanceProfiles"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776226 = newJObject()
  var formData_776227 = newJObject()
  add(formData_776227, "PathPrefix", newJString(PathPrefix))
  add(formData_776227, "Marker", newJString(Marker))
  add(query_776226, "Action", newJString(Action))
  add(formData_776227, "MaxItems", newJInt(MaxItems))
  add(query_776226, "Version", newJString(Version))
  result = call_776225.call(nil, query_776226, nil, formData_776227, nil)

var postListInstanceProfiles* = Call_PostListInstanceProfiles_776209(
    name: "postListInstanceProfiles", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_PostListInstanceProfiles_776210, base: "/",
    url: url_PostListInstanceProfiles_776211, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfiles_776191 = ref object of OpenApiRestCall_772597
proc url_GetListInstanceProfiles_776193(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListInstanceProfiles_776192(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_776194 = query.getOrDefault("PathPrefix")
  valid_776194 = validateParameter(valid_776194, JString, required = false,
                                 default = nil)
  if valid_776194 != nil:
    section.add "PathPrefix", valid_776194
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776195 = query.getOrDefault("Action")
  valid_776195 = validateParameter(valid_776195, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_776195 != nil:
    section.add "Action", valid_776195
  var valid_776196 = query.getOrDefault("Marker")
  valid_776196 = validateParameter(valid_776196, JString, required = false,
                                 default = nil)
  if valid_776196 != nil:
    section.add "Marker", valid_776196
  var valid_776197 = query.getOrDefault("MaxItems")
  valid_776197 = validateParameter(valid_776197, JInt, required = false, default = nil)
  if valid_776197 != nil:
    section.add "MaxItems", valid_776197
  var valid_776198 = query.getOrDefault("Version")
  valid_776198 = validateParameter(valid_776198, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776198 != nil:
    section.add "Version", valid_776198
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776199 = header.getOrDefault("X-Amz-Date")
  valid_776199 = validateParameter(valid_776199, JString, required = false,
                                 default = nil)
  if valid_776199 != nil:
    section.add "X-Amz-Date", valid_776199
  var valid_776200 = header.getOrDefault("X-Amz-Security-Token")
  valid_776200 = validateParameter(valid_776200, JString, required = false,
                                 default = nil)
  if valid_776200 != nil:
    section.add "X-Amz-Security-Token", valid_776200
  var valid_776201 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776201 = validateParameter(valid_776201, JString, required = false,
                                 default = nil)
  if valid_776201 != nil:
    section.add "X-Amz-Content-Sha256", valid_776201
  var valid_776202 = header.getOrDefault("X-Amz-Algorithm")
  valid_776202 = validateParameter(valid_776202, JString, required = false,
                                 default = nil)
  if valid_776202 != nil:
    section.add "X-Amz-Algorithm", valid_776202
  var valid_776203 = header.getOrDefault("X-Amz-Signature")
  valid_776203 = validateParameter(valid_776203, JString, required = false,
                                 default = nil)
  if valid_776203 != nil:
    section.add "X-Amz-Signature", valid_776203
  var valid_776204 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776204 = validateParameter(valid_776204, JString, required = false,
                                 default = nil)
  if valid_776204 != nil:
    section.add "X-Amz-SignedHeaders", valid_776204
  var valid_776205 = header.getOrDefault("X-Amz-Credential")
  valid_776205 = validateParameter(valid_776205, JString, required = false,
                                 default = nil)
  if valid_776205 != nil:
    section.add "X-Amz-Credential", valid_776205
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776206: Call_GetListInstanceProfiles_776191; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776206.validator(path, query, header, formData, body)
  let scheme = call_776206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776206.url(scheme.get, call_776206.host, call_776206.base,
                         call_776206.route, valid.getOrDefault("path"))
  result = hook(call_776206, url, valid)

proc call*(call_776207: Call_GetListInstanceProfiles_776191;
          PathPrefix: string = ""; Action: string = "ListInstanceProfiles";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776208 = newJObject()
  add(query_776208, "PathPrefix", newJString(PathPrefix))
  add(query_776208, "Action", newJString(Action))
  add(query_776208, "Marker", newJString(Marker))
  add(query_776208, "MaxItems", newJInt(MaxItems))
  add(query_776208, "Version", newJString(Version))
  result = call_776207.call(nil, query_776208, nil, nil, nil)

var getListInstanceProfiles* = Call_GetListInstanceProfiles_776191(
    name: "getListInstanceProfiles", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_GetListInstanceProfiles_776192, base: "/",
    url: url_GetListInstanceProfiles_776193, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfilesForRole_776246 = ref object of OpenApiRestCall_772597
proc url_PostListInstanceProfilesForRole_776248(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListInstanceProfilesForRole_776247(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776249 = query.getOrDefault("Action")
  valid_776249 = validateParameter(valid_776249, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_776249 != nil:
    section.add "Action", valid_776249
  var valid_776250 = query.getOrDefault("Version")
  valid_776250 = validateParameter(valid_776250, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776250 != nil:
    section.add "Version", valid_776250
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776251 = header.getOrDefault("X-Amz-Date")
  valid_776251 = validateParameter(valid_776251, JString, required = false,
                                 default = nil)
  if valid_776251 != nil:
    section.add "X-Amz-Date", valid_776251
  var valid_776252 = header.getOrDefault("X-Amz-Security-Token")
  valid_776252 = validateParameter(valid_776252, JString, required = false,
                                 default = nil)
  if valid_776252 != nil:
    section.add "X-Amz-Security-Token", valid_776252
  var valid_776253 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776253 = validateParameter(valid_776253, JString, required = false,
                                 default = nil)
  if valid_776253 != nil:
    section.add "X-Amz-Content-Sha256", valid_776253
  var valid_776254 = header.getOrDefault("X-Amz-Algorithm")
  valid_776254 = validateParameter(valid_776254, JString, required = false,
                                 default = nil)
  if valid_776254 != nil:
    section.add "X-Amz-Algorithm", valid_776254
  var valid_776255 = header.getOrDefault("X-Amz-Signature")
  valid_776255 = validateParameter(valid_776255, JString, required = false,
                                 default = nil)
  if valid_776255 != nil:
    section.add "X-Amz-Signature", valid_776255
  var valid_776256 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776256 = validateParameter(valid_776256, JString, required = false,
                                 default = nil)
  if valid_776256 != nil:
    section.add "X-Amz-SignedHeaders", valid_776256
  var valid_776257 = header.getOrDefault("X-Amz-Credential")
  valid_776257 = validateParameter(valid_776257, JString, required = false,
                                 default = nil)
  if valid_776257 != nil:
    section.add "X-Amz-Credential", valid_776257
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_776258 = formData.getOrDefault("RoleName")
  valid_776258 = validateParameter(valid_776258, JString, required = true,
                                 default = nil)
  if valid_776258 != nil:
    section.add "RoleName", valid_776258
  var valid_776259 = formData.getOrDefault("Marker")
  valid_776259 = validateParameter(valid_776259, JString, required = false,
                                 default = nil)
  if valid_776259 != nil:
    section.add "Marker", valid_776259
  var valid_776260 = formData.getOrDefault("MaxItems")
  valid_776260 = validateParameter(valid_776260, JInt, required = false, default = nil)
  if valid_776260 != nil:
    section.add "MaxItems", valid_776260
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776261: Call_PostListInstanceProfilesForRole_776246;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776261.validator(path, query, header, formData, body)
  let scheme = call_776261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776261.url(scheme.get, call_776261.host, call_776261.base,
                         call_776261.route, valid.getOrDefault("path"))
  result = hook(call_776261, url, valid)

proc call*(call_776262: Call_PostListInstanceProfilesForRole_776246;
          RoleName: string; Marker: string = "";
          Action: string = "ListInstanceProfilesForRole"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776263 = newJObject()
  var formData_776264 = newJObject()
  add(formData_776264, "RoleName", newJString(RoleName))
  add(formData_776264, "Marker", newJString(Marker))
  add(query_776263, "Action", newJString(Action))
  add(formData_776264, "MaxItems", newJInt(MaxItems))
  add(query_776263, "Version", newJString(Version))
  result = call_776262.call(nil, query_776263, nil, formData_776264, nil)

var postListInstanceProfilesForRole* = Call_PostListInstanceProfilesForRole_776246(
    name: "postListInstanceProfilesForRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_PostListInstanceProfilesForRole_776247, base: "/",
    url: url_PostListInstanceProfilesForRole_776248,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfilesForRole_776228 = ref object of OpenApiRestCall_772597
proc url_GetListInstanceProfilesForRole_776230(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListInstanceProfilesForRole_776229(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776231 = query.getOrDefault("Action")
  valid_776231 = validateParameter(valid_776231, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_776231 != nil:
    section.add "Action", valid_776231
  var valid_776232 = query.getOrDefault("Marker")
  valid_776232 = validateParameter(valid_776232, JString, required = false,
                                 default = nil)
  if valid_776232 != nil:
    section.add "Marker", valid_776232
  var valid_776233 = query.getOrDefault("MaxItems")
  valid_776233 = validateParameter(valid_776233, JInt, required = false, default = nil)
  if valid_776233 != nil:
    section.add "MaxItems", valid_776233
  var valid_776234 = query.getOrDefault("RoleName")
  valid_776234 = validateParameter(valid_776234, JString, required = true,
                                 default = nil)
  if valid_776234 != nil:
    section.add "RoleName", valid_776234
  var valid_776235 = query.getOrDefault("Version")
  valid_776235 = validateParameter(valid_776235, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776235 != nil:
    section.add "Version", valid_776235
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776236 = header.getOrDefault("X-Amz-Date")
  valid_776236 = validateParameter(valid_776236, JString, required = false,
                                 default = nil)
  if valid_776236 != nil:
    section.add "X-Amz-Date", valid_776236
  var valid_776237 = header.getOrDefault("X-Amz-Security-Token")
  valid_776237 = validateParameter(valid_776237, JString, required = false,
                                 default = nil)
  if valid_776237 != nil:
    section.add "X-Amz-Security-Token", valid_776237
  var valid_776238 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776238 = validateParameter(valid_776238, JString, required = false,
                                 default = nil)
  if valid_776238 != nil:
    section.add "X-Amz-Content-Sha256", valid_776238
  var valid_776239 = header.getOrDefault("X-Amz-Algorithm")
  valid_776239 = validateParameter(valid_776239, JString, required = false,
                                 default = nil)
  if valid_776239 != nil:
    section.add "X-Amz-Algorithm", valid_776239
  var valid_776240 = header.getOrDefault("X-Amz-Signature")
  valid_776240 = validateParameter(valid_776240, JString, required = false,
                                 default = nil)
  if valid_776240 != nil:
    section.add "X-Amz-Signature", valid_776240
  var valid_776241 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776241 = validateParameter(valid_776241, JString, required = false,
                                 default = nil)
  if valid_776241 != nil:
    section.add "X-Amz-SignedHeaders", valid_776241
  var valid_776242 = header.getOrDefault("X-Amz-Credential")
  valid_776242 = validateParameter(valid_776242, JString, required = false,
                                 default = nil)
  if valid_776242 != nil:
    section.add "X-Amz-Credential", valid_776242
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776243: Call_GetListInstanceProfilesForRole_776228; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776243.validator(path, query, header, formData, body)
  let scheme = call_776243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776243.url(scheme.get, call_776243.host, call_776243.base,
                         call_776243.route, valid.getOrDefault("path"))
  result = hook(call_776243, url, valid)

proc call*(call_776244: Call_GetListInstanceProfilesForRole_776228;
          RoleName: string; Action: string = "ListInstanceProfilesForRole";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_776245 = newJObject()
  add(query_776245, "Action", newJString(Action))
  add(query_776245, "Marker", newJString(Marker))
  add(query_776245, "MaxItems", newJInt(MaxItems))
  add(query_776245, "RoleName", newJString(RoleName))
  add(query_776245, "Version", newJString(Version))
  result = call_776244.call(nil, query_776245, nil, nil, nil)

var getListInstanceProfilesForRole* = Call_GetListInstanceProfilesForRole_776228(
    name: "getListInstanceProfilesForRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_GetListInstanceProfilesForRole_776229, base: "/",
    url: url_GetListInstanceProfilesForRole_776230,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListMFADevices_776283 = ref object of OpenApiRestCall_772597
proc url_PostListMFADevices_776285(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListMFADevices_776284(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776286 = query.getOrDefault("Action")
  valid_776286 = validateParameter(valid_776286, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_776286 != nil:
    section.add "Action", valid_776286
  var valid_776287 = query.getOrDefault("Version")
  valid_776287 = validateParameter(valid_776287, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776287 != nil:
    section.add "Version", valid_776287
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776288 = header.getOrDefault("X-Amz-Date")
  valid_776288 = validateParameter(valid_776288, JString, required = false,
                                 default = nil)
  if valid_776288 != nil:
    section.add "X-Amz-Date", valid_776288
  var valid_776289 = header.getOrDefault("X-Amz-Security-Token")
  valid_776289 = validateParameter(valid_776289, JString, required = false,
                                 default = nil)
  if valid_776289 != nil:
    section.add "X-Amz-Security-Token", valid_776289
  var valid_776290 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776290 = validateParameter(valid_776290, JString, required = false,
                                 default = nil)
  if valid_776290 != nil:
    section.add "X-Amz-Content-Sha256", valid_776290
  var valid_776291 = header.getOrDefault("X-Amz-Algorithm")
  valid_776291 = validateParameter(valid_776291, JString, required = false,
                                 default = nil)
  if valid_776291 != nil:
    section.add "X-Amz-Algorithm", valid_776291
  var valid_776292 = header.getOrDefault("X-Amz-Signature")
  valid_776292 = validateParameter(valid_776292, JString, required = false,
                                 default = nil)
  if valid_776292 != nil:
    section.add "X-Amz-Signature", valid_776292
  var valid_776293 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776293 = validateParameter(valid_776293, JString, required = false,
                                 default = nil)
  if valid_776293 != nil:
    section.add "X-Amz-SignedHeaders", valid_776293
  var valid_776294 = header.getOrDefault("X-Amz-Credential")
  valid_776294 = validateParameter(valid_776294, JString, required = false,
                                 default = nil)
  if valid_776294 != nil:
    section.add "X-Amz-Credential", valid_776294
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_776295 = formData.getOrDefault("UserName")
  valid_776295 = validateParameter(valid_776295, JString, required = false,
                                 default = nil)
  if valid_776295 != nil:
    section.add "UserName", valid_776295
  var valid_776296 = formData.getOrDefault("Marker")
  valid_776296 = validateParameter(valid_776296, JString, required = false,
                                 default = nil)
  if valid_776296 != nil:
    section.add "Marker", valid_776296
  var valid_776297 = formData.getOrDefault("MaxItems")
  valid_776297 = validateParameter(valid_776297, JInt, required = false, default = nil)
  if valid_776297 != nil:
    section.add "MaxItems", valid_776297
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776298: Call_PostListMFADevices_776283; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776298.validator(path, query, header, formData, body)
  let scheme = call_776298.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776298.url(scheme.get, call_776298.host, call_776298.base,
                         call_776298.route, valid.getOrDefault("path"))
  result = hook(call_776298, url, valid)

proc call*(call_776299: Call_PostListMFADevices_776283; UserName: string = "";
          Marker: string = ""; Action: string = "ListMFADevices"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776300 = newJObject()
  var formData_776301 = newJObject()
  add(formData_776301, "UserName", newJString(UserName))
  add(formData_776301, "Marker", newJString(Marker))
  add(query_776300, "Action", newJString(Action))
  add(formData_776301, "MaxItems", newJInt(MaxItems))
  add(query_776300, "Version", newJString(Version))
  result = call_776299.call(nil, query_776300, nil, formData_776301, nil)

var postListMFADevices* = Call_PostListMFADevices_776283(
    name: "postListMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListMFADevices",
    validator: validate_PostListMFADevices_776284, base: "/",
    url: url_PostListMFADevices_776285, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListMFADevices_776265 = ref object of OpenApiRestCall_772597
proc url_GetListMFADevices_776267(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListMFADevices_776266(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_776268 = query.getOrDefault("UserName")
  valid_776268 = validateParameter(valid_776268, JString, required = false,
                                 default = nil)
  if valid_776268 != nil:
    section.add "UserName", valid_776268
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776269 = query.getOrDefault("Action")
  valid_776269 = validateParameter(valid_776269, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_776269 != nil:
    section.add "Action", valid_776269
  var valid_776270 = query.getOrDefault("Marker")
  valid_776270 = validateParameter(valid_776270, JString, required = false,
                                 default = nil)
  if valid_776270 != nil:
    section.add "Marker", valid_776270
  var valid_776271 = query.getOrDefault("MaxItems")
  valid_776271 = validateParameter(valid_776271, JInt, required = false, default = nil)
  if valid_776271 != nil:
    section.add "MaxItems", valid_776271
  var valid_776272 = query.getOrDefault("Version")
  valid_776272 = validateParameter(valid_776272, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776272 != nil:
    section.add "Version", valid_776272
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776273 = header.getOrDefault("X-Amz-Date")
  valid_776273 = validateParameter(valid_776273, JString, required = false,
                                 default = nil)
  if valid_776273 != nil:
    section.add "X-Amz-Date", valid_776273
  var valid_776274 = header.getOrDefault("X-Amz-Security-Token")
  valid_776274 = validateParameter(valid_776274, JString, required = false,
                                 default = nil)
  if valid_776274 != nil:
    section.add "X-Amz-Security-Token", valid_776274
  var valid_776275 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776275 = validateParameter(valid_776275, JString, required = false,
                                 default = nil)
  if valid_776275 != nil:
    section.add "X-Amz-Content-Sha256", valid_776275
  var valid_776276 = header.getOrDefault("X-Amz-Algorithm")
  valid_776276 = validateParameter(valid_776276, JString, required = false,
                                 default = nil)
  if valid_776276 != nil:
    section.add "X-Amz-Algorithm", valid_776276
  var valid_776277 = header.getOrDefault("X-Amz-Signature")
  valid_776277 = validateParameter(valid_776277, JString, required = false,
                                 default = nil)
  if valid_776277 != nil:
    section.add "X-Amz-Signature", valid_776277
  var valid_776278 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776278 = validateParameter(valid_776278, JString, required = false,
                                 default = nil)
  if valid_776278 != nil:
    section.add "X-Amz-SignedHeaders", valid_776278
  var valid_776279 = header.getOrDefault("X-Amz-Credential")
  valid_776279 = validateParameter(valid_776279, JString, required = false,
                                 default = nil)
  if valid_776279 != nil:
    section.add "X-Amz-Credential", valid_776279
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776280: Call_GetListMFADevices_776265; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776280.validator(path, query, header, formData, body)
  let scheme = call_776280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776280.url(scheme.get, call_776280.host, call_776280.base,
                         call_776280.route, valid.getOrDefault("path"))
  result = hook(call_776280, url, valid)

proc call*(call_776281: Call_GetListMFADevices_776265; UserName: string = "";
          Action: string = "ListMFADevices"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776282 = newJObject()
  add(query_776282, "UserName", newJString(UserName))
  add(query_776282, "Action", newJString(Action))
  add(query_776282, "Marker", newJString(Marker))
  add(query_776282, "MaxItems", newJInt(MaxItems))
  add(query_776282, "Version", newJString(Version))
  result = call_776281.call(nil, query_776282, nil, nil, nil)

var getListMFADevices* = Call_GetListMFADevices_776265(name: "getListMFADevices",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListMFADevices", validator: validate_GetListMFADevices_776266,
    base: "/", url: url_GetListMFADevices_776267,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListOpenIDConnectProviders_776317 = ref object of OpenApiRestCall_772597
proc url_PostListOpenIDConnectProviders_776319(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListOpenIDConnectProviders_776318(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776320 = query.getOrDefault("Action")
  valid_776320 = validateParameter(valid_776320, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_776320 != nil:
    section.add "Action", valid_776320
  var valid_776321 = query.getOrDefault("Version")
  valid_776321 = validateParameter(valid_776321, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776321 != nil:
    section.add "Version", valid_776321
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776322 = header.getOrDefault("X-Amz-Date")
  valid_776322 = validateParameter(valid_776322, JString, required = false,
                                 default = nil)
  if valid_776322 != nil:
    section.add "X-Amz-Date", valid_776322
  var valid_776323 = header.getOrDefault("X-Amz-Security-Token")
  valid_776323 = validateParameter(valid_776323, JString, required = false,
                                 default = nil)
  if valid_776323 != nil:
    section.add "X-Amz-Security-Token", valid_776323
  var valid_776324 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776324 = validateParameter(valid_776324, JString, required = false,
                                 default = nil)
  if valid_776324 != nil:
    section.add "X-Amz-Content-Sha256", valid_776324
  var valid_776325 = header.getOrDefault("X-Amz-Algorithm")
  valid_776325 = validateParameter(valid_776325, JString, required = false,
                                 default = nil)
  if valid_776325 != nil:
    section.add "X-Amz-Algorithm", valid_776325
  var valid_776326 = header.getOrDefault("X-Amz-Signature")
  valid_776326 = validateParameter(valid_776326, JString, required = false,
                                 default = nil)
  if valid_776326 != nil:
    section.add "X-Amz-Signature", valid_776326
  var valid_776327 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776327 = validateParameter(valid_776327, JString, required = false,
                                 default = nil)
  if valid_776327 != nil:
    section.add "X-Amz-SignedHeaders", valid_776327
  var valid_776328 = header.getOrDefault("X-Amz-Credential")
  valid_776328 = validateParameter(valid_776328, JString, required = false,
                                 default = nil)
  if valid_776328 != nil:
    section.add "X-Amz-Credential", valid_776328
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776329: Call_PostListOpenIDConnectProviders_776317; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_776329.validator(path, query, header, formData, body)
  let scheme = call_776329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776329.url(scheme.get, call_776329.host, call_776329.base,
                         call_776329.route, valid.getOrDefault("path"))
  result = hook(call_776329, url, valid)

proc call*(call_776330: Call_PostListOpenIDConnectProviders_776317;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## postListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776331 = newJObject()
  add(query_776331, "Action", newJString(Action))
  add(query_776331, "Version", newJString(Version))
  result = call_776330.call(nil, query_776331, nil, nil, nil)

var postListOpenIDConnectProviders* = Call_PostListOpenIDConnectProviders_776317(
    name: "postListOpenIDConnectProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_PostListOpenIDConnectProviders_776318, base: "/",
    url: url_PostListOpenIDConnectProviders_776319,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListOpenIDConnectProviders_776302 = ref object of OpenApiRestCall_772597
proc url_GetListOpenIDConnectProviders_776304(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListOpenIDConnectProviders_776303(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776305 = query.getOrDefault("Action")
  valid_776305 = validateParameter(valid_776305, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_776305 != nil:
    section.add "Action", valid_776305
  var valid_776306 = query.getOrDefault("Version")
  valid_776306 = validateParameter(valid_776306, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776306 != nil:
    section.add "Version", valid_776306
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776307 = header.getOrDefault("X-Amz-Date")
  valid_776307 = validateParameter(valid_776307, JString, required = false,
                                 default = nil)
  if valid_776307 != nil:
    section.add "X-Amz-Date", valid_776307
  var valid_776308 = header.getOrDefault("X-Amz-Security-Token")
  valid_776308 = validateParameter(valid_776308, JString, required = false,
                                 default = nil)
  if valid_776308 != nil:
    section.add "X-Amz-Security-Token", valid_776308
  var valid_776309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776309 = validateParameter(valid_776309, JString, required = false,
                                 default = nil)
  if valid_776309 != nil:
    section.add "X-Amz-Content-Sha256", valid_776309
  var valid_776310 = header.getOrDefault("X-Amz-Algorithm")
  valid_776310 = validateParameter(valid_776310, JString, required = false,
                                 default = nil)
  if valid_776310 != nil:
    section.add "X-Amz-Algorithm", valid_776310
  var valid_776311 = header.getOrDefault("X-Amz-Signature")
  valid_776311 = validateParameter(valid_776311, JString, required = false,
                                 default = nil)
  if valid_776311 != nil:
    section.add "X-Amz-Signature", valid_776311
  var valid_776312 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776312 = validateParameter(valid_776312, JString, required = false,
                                 default = nil)
  if valid_776312 != nil:
    section.add "X-Amz-SignedHeaders", valid_776312
  var valid_776313 = header.getOrDefault("X-Amz-Credential")
  valid_776313 = validateParameter(valid_776313, JString, required = false,
                                 default = nil)
  if valid_776313 != nil:
    section.add "X-Amz-Credential", valid_776313
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776314: Call_GetListOpenIDConnectProviders_776302; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_776314.validator(path, query, header, formData, body)
  let scheme = call_776314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776314.url(scheme.get, call_776314.host, call_776314.base,
                         call_776314.route, valid.getOrDefault("path"))
  result = hook(call_776314, url, valid)

proc call*(call_776315: Call_GetListOpenIDConnectProviders_776302;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## getListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776316 = newJObject()
  add(query_776316, "Action", newJString(Action))
  add(query_776316, "Version", newJString(Version))
  result = call_776315.call(nil, query_776316, nil, nil, nil)

var getListOpenIDConnectProviders* = Call_GetListOpenIDConnectProviders_776302(
    name: "getListOpenIDConnectProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_GetListOpenIDConnectProviders_776303, base: "/",
    url: url_GetListOpenIDConnectProviders_776304,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicies_776353 = ref object of OpenApiRestCall_772597
proc url_PostListPolicies_776355(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListPolicies_776354(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776356 = query.getOrDefault("Action")
  valid_776356 = validateParameter(valid_776356, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_776356 != nil:
    section.add "Action", valid_776356
  var valid_776357 = query.getOrDefault("Version")
  valid_776357 = validateParameter(valid_776357, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776357 != nil:
    section.add "Version", valid_776357
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776358 = header.getOrDefault("X-Amz-Date")
  valid_776358 = validateParameter(valid_776358, JString, required = false,
                                 default = nil)
  if valid_776358 != nil:
    section.add "X-Amz-Date", valid_776358
  var valid_776359 = header.getOrDefault("X-Amz-Security-Token")
  valid_776359 = validateParameter(valid_776359, JString, required = false,
                                 default = nil)
  if valid_776359 != nil:
    section.add "X-Amz-Security-Token", valid_776359
  var valid_776360 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776360 = validateParameter(valid_776360, JString, required = false,
                                 default = nil)
  if valid_776360 != nil:
    section.add "X-Amz-Content-Sha256", valid_776360
  var valid_776361 = header.getOrDefault("X-Amz-Algorithm")
  valid_776361 = validateParameter(valid_776361, JString, required = false,
                                 default = nil)
  if valid_776361 != nil:
    section.add "X-Amz-Algorithm", valid_776361
  var valid_776362 = header.getOrDefault("X-Amz-Signature")
  valid_776362 = validateParameter(valid_776362, JString, required = false,
                                 default = nil)
  if valid_776362 != nil:
    section.add "X-Amz-Signature", valid_776362
  var valid_776363 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776363 = validateParameter(valid_776363, JString, required = false,
                                 default = nil)
  if valid_776363 != nil:
    section.add "X-Amz-SignedHeaders", valid_776363
  var valid_776364 = header.getOrDefault("X-Amz-Credential")
  valid_776364 = validateParameter(valid_776364, JString, required = false,
                                 default = nil)
  if valid_776364 != nil:
    section.add "X-Amz-Credential", valid_776364
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_776365 = formData.getOrDefault("PathPrefix")
  valid_776365 = validateParameter(valid_776365, JString, required = false,
                                 default = nil)
  if valid_776365 != nil:
    section.add "PathPrefix", valid_776365
  var valid_776366 = formData.getOrDefault("Marker")
  valid_776366 = validateParameter(valid_776366, JString, required = false,
                                 default = nil)
  if valid_776366 != nil:
    section.add "Marker", valid_776366
  var valid_776367 = formData.getOrDefault("PolicyUsageFilter")
  valid_776367 = validateParameter(valid_776367, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_776367 != nil:
    section.add "PolicyUsageFilter", valid_776367
  var valid_776368 = formData.getOrDefault("Scope")
  valid_776368 = validateParameter(valid_776368, JString, required = false,
                                 default = newJString("All"))
  if valid_776368 != nil:
    section.add "Scope", valid_776368
  var valid_776369 = formData.getOrDefault("OnlyAttached")
  valid_776369 = validateParameter(valid_776369, JBool, required = false, default = nil)
  if valid_776369 != nil:
    section.add "OnlyAttached", valid_776369
  var valid_776370 = formData.getOrDefault("MaxItems")
  valid_776370 = validateParameter(valid_776370, JInt, required = false, default = nil)
  if valid_776370 != nil:
    section.add "MaxItems", valid_776370
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776371: Call_PostListPolicies_776353; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_776371.validator(path, query, header, formData, body)
  let scheme = call_776371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776371.url(scheme.get, call_776371.host, call_776371.base,
                         call_776371.route, valid.getOrDefault("path"))
  result = hook(call_776371, url, valid)

proc call*(call_776372: Call_PostListPolicies_776353; PathPrefix: string = "";
          Marker: string = ""; PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListPolicies"; Scope: string = "All";
          OnlyAttached: bool = false; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776373 = newJObject()
  var formData_776374 = newJObject()
  add(formData_776374, "PathPrefix", newJString(PathPrefix))
  add(formData_776374, "Marker", newJString(Marker))
  add(formData_776374, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_776373, "Action", newJString(Action))
  add(formData_776374, "Scope", newJString(Scope))
  add(formData_776374, "OnlyAttached", newJBool(OnlyAttached))
  add(formData_776374, "MaxItems", newJInt(MaxItems))
  add(query_776373, "Version", newJString(Version))
  result = call_776372.call(nil, query_776373, nil, formData_776374, nil)

var postListPolicies* = Call_PostListPolicies_776353(name: "postListPolicies",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_PostListPolicies_776354,
    base: "/", url: url_PostListPolicies_776355,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicies_776332 = ref object of OpenApiRestCall_772597
proc url_GetListPolicies_776334(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListPolicies_776333(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_776335 = query.getOrDefault("PathPrefix")
  valid_776335 = validateParameter(valid_776335, JString, required = false,
                                 default = nil)
  if valid_776335 != nil:
    section.add "PathPrefix", valid_776335
  var valid_776336 = query.getOrDefault("PolicyUsageFilter")
  valid_776336 = validateParameter(valid_776336, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_776336 != nil:
    section.add "PolicyUsageFilter", valid_776336
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776337 = query.getOrDefault("Action")
  valid_776337 = validateParameter(valid_776337, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_776337 != nil:
    section.add "Action", valid_776337
  var valid_776338 = query.getOrDefault("Marker")
  valid_776338 = validateParameter(valid_776338, JString, required = false,
                                 default = nil)
  if valid_776338 != nil:
    section.add "Marker", valid_776338
  var valid_776339 = query.getOrDefault("Scope")
  valid_776339 = validateParameter(valid_776339, JString, required = false,
                                 default = newJString("All"))
  if valid_776339 != nil:
    section.add "Scope", valid_776339
  var valid_776340 = query.getOrDefault("MaxItems")
  valid_776340 = validateParameter(valid_776340, JInt, required = false, default = nil)
  if valid_776340 != nil:
    section.add "MaxItems", valid_776340
  var valid_776341 = query.getOrDefault("OnlyAttached")
  valid_776341 = validateParameter(valid_776341, JBool, required = false, default = nil)
  if valid_776341 != nil:
    section.add "OnlyAttached", valid_776341
  var valid_776342 = query.getOrDefault("Version")
  valid_776342 = validateParameter(valid_776342, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776342 != nil:
    section.add "Version", valid_776342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776343 = header.getOrDefault("X-Amz-Date")
  valid_776343 = validateParameter(valid_776343, JString, required = false,
                                 default = nil)
  if valid_776343 != nil:
    section.add "X-Amz-Date", valid_776343
  var valid_776344 = header.getOrDefault("X-Amz-Security-Token")
  valid_776344 = validateParameter(valid_776344, JString, required = false,
                                 default = nil)
  if valid_776344 != nil:
    section.add "X-Amz-Security-Token", valid_776344
  var valid_776345 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776345 = validateParameter(valid_776345, JString, required = false,
                                 default = nil)
  if valid_776345 != nil:
    section.add "X-Amz-Content-Sha256", valid_776345
  var valid_776346 = header.getOrDefault("X-Amz-Algorithm")
  valid_776346 = validateParameter(valid_776346, JString, required = false,
                                 default = nil)
  if valid_776346 != nil:
    section.add "X-Amz-Algorithm", valid_776346
  var valid_776347 = header.getOrDefault("X-Amz-Signature")
  valid_776347 = validateParameter(valid_776347, JString, required = false,
                                 default = nil)
  if valid_776347 != nil:
    section.add "X-Amz-Signature", valid_776347
  var valid_776348 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776348 = validateParameter(valid_776348, JString, required = false,
                                 default = nil)
  if valid_776348 != nil:
    section.add "X-Amz-SignedHeaders", valid_776348
  var valid_776349 = header.getOrDefault("X-Amz-Credential")
  valid_776349 = validateParameter(valid_776349, JString, required = false,
                                 default = nil)
  if valid_776349 != nil:
    section.add "X-Amz-Credential", valid_776349
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776350: Call_GetListPolicies_776332; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_776350.validator(path, query, header, formData, body)
  let scheme = call_776350.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776350.url(scheme.get, call_776350.host, call_776350.base,
                         call_776350.route, valid.getOrDefault("path"))
  result = hook(call_776350, url, valid)

proc call*(call_776351: Call_GetListPolicies_776332; PathPrefix: string = "";
          PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListPolicies"; Marker: string = ""; Scope: string = "All";
          MaxItems: int = 0; OnlyAttached: bool = false; Version: string = "2010-05-08"): Recallable =
  ## getListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   Version: string (required)
  var query_776352 = newJObject()
  add(query_776352, "PathPrefix", newJString(PathPrefix))
  add(query_776352, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_776352, "Action", newJString(Action))
  add(query_776352, "Marker", newJString(Marker))
  add(query_776352, "Scope", newJString(Scope))
  add(query_776352, "MaxItems", newJInt(MaxItems))
  add(query_776352, "OnlyAttached", newJBool(OnlyAttached))
  add(query_776352, "Version", newJString(Version))
  result = call_776351.call(nil, query_776352, nil, nil, nil)

var getListPolicies* = Call_GetListPolicies_776332(name: "getListPolicies",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_GetListPolicies_776333,
    base: "/", url: url_GetListPolicies_776334, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPoliciesGrantingServiceAccess_776393 = ref object of OpenApiRestCall_772597
proc url_PostListPoliciesGrantingServiceAccess_776395(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListPoliciesGrantingServiceAccess_776394(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776396 = query.getOrDefault("Action")
  valid_776396 = validateParameter(valid_776396, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_776396 != nil:
    section.add "Action", valid_776396
  var valid_776397 = query.getOrDefault("Version")
  valid_776397 = validateParameter(valid_776397, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776397 != nil:
    section.add "Version", valid_776397
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776398 = header.getOrDefault("X-Amz-Date")
  valid_776398 = validateParameter(valid_776398, JString, required = false,
                                 default = nil)
  if valid_776398 != nil:
    section.add "X-Amz-Date", valid_776398
  var valid_776399 = header.getOrDefault("X-Amz-Security-Token")
  valid_776399 = validateParameter(valid_776399, JString, required = false,
                                 default = nil)
  if valid_776399 != nil:
    section.add "X-Amz-Security-Token", valid_776399
  var valid_776400 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776400 = validateParameter(valid_776400, JString, required = false,
                                 default = nil)
  if valid_776400 != nil:
    section.add "X-Amz-Content-Sha256", valid_776400
  var valid_776401 = header.getOrDefault("X-Amz-Algorithm")
  valid_776401 = validateParameter(valid_776401, JString, required = false,
                                 default = nil)
  if valid_776401 != nil:
    section.add "X-Amz-Algorithm", valid_776401
  var valid_776402 = header.getOrDefault("X-Amz-Signature")
  valid_776402 = validateParameter(valid_776402, JString, required = false,
                                 default = nil)
  if valid_776402 != nil:
    section.add "X-Amz-Signature", valid_776402
  var valid_776403 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776403 = validateParameter(valid_776403, JString, required = false,
                                 default = nil)
  if valid_776403 != nil:
    section.add "X-Amz-SignedHeaders", valid_776403
  var valid_776404 = header.getOrDefault("X-Amz-Credential")
  valid_776404 = validateParameter(valid_776404, JString, required = false,
                                 default = nil)
  if valid_776404 != nil:
    section.add "X-Amz-Credential", valid_776404
  result.add "header", section
  ## parameters in `formData` object:
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Arn` field"
  var valid_776405 = formData.getOrDefault("Arn")
  valid_776405 = validateParameter(valid_776405, JString, required = true,
                                 default = nil)
  if valid_776405 != nil:
    section.add "Arn", valid_776405
  var valid_776406 = formData.getOrDefault("Marker")
  valid_776406 = validateParameter(valid_776406, JString, required = false,
                                 default = nil)
  if valid_776406 != nil:
    section.add "Marker", valid_776406
  var valid_776407 = formData.getOrDefault("ServiceNamespaces")
  valid_776407 = validateParameter(valid_776407, JArray, required = true, default = nil)
  if valid_776407 != nil:
    section.add "ServiceNamespaces", valid_776407
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776408: Call_PostListPoliciesGrantingServiceAccess_776393;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_776408.validator(path, query, header, formData, body)
  let scheme = call_776408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776408.url(scheme.get, call_776408.host, call_776408.base,
                         call_776408.route, valid.getOrDefault("path"))
  result = hook(call_776408, url, valid)

proc call*(call_776409: Call_PostListPoliciesGrantingServiceAccess_776393;
          Arn: string; ServiceNamespaces: JsonNode; Marker: string = "";
          Action: string = "ListPoliciesGrantingServiceAccess";
          Version: string = "2010-05-08"): Recallable =
  ## postListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776410 = newJObject()
  var formData_776411 = newJObject()
  add(formData_776411, "Arn", newJString(Arn))
  add(formData_776411, "Marker", newJString(Marker))
  if ServiceNamespaces != nil:
    formData_776411.add "ServiceNamespaces", ServiceNamespaces
  add(query_776410, "Action", newJString(Action))
  add(query_776410, "Version", newJString(Version))
  result = call_776409.call(nil, query_776410, nil, formData_776411, nil)

var postListPoliciesGrantingServiceAccess* = Call_PostListPoliciesGrantingServiceAccess_776393(
    name: "postListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_PostListPoliciesGrantingServiceAccess_776394, base: "/",
    url: url_PostListPoliciesGrantingServiceAccess_776395,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPoliciesGrantingServiceAccess_776375 = ref object of OpenApiRestCall_772597
proc url_GetListPoliciesGrantingServiceAccess_776377(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListPoliciesGrantingServiceAccess_776376(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceNamespaces` field"
  var valid_776378 = query.getOrDefault("ServiceNamespaces")
  valid_776378 = validateParameter(valid_776378, JArray, required = true, default = nil)
  if valid_776378 != nil:
    section.add "ServiceNamespaces", valid_776378
  var valid_776379 = query.getOrDefault("Action")
  valid_776379 = validateParameter(valid_776379, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_776379 != nil:
    section.add "Action", valid_776379
  var valid_776380 = query.getOrDefault("Marker")
  valid_776380 = validateParameter(valid_776380, JString, required = false,
                                 default = nil)
  if valid_776380 != nil:
    section.add "Marker", valid_776380
  var valid_776381 = query.getOrDefault("Arn")
  valid_776381 = validateParameter(valid_776381, JString, required = true,
                                 default = nil)
  if valid_776381 != nil:
    section.add "Arn", valid_776381
  var valid_776382 = query.getOrDefault("Version")
  valid_776382 = validateParameter(valid_776382, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776382 != nil:
    section.add "Version", valid_776382
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776383 = header.getOrDefault("X-Amz-Date")
  valid_776383 = validateParameter(valid_776383, JString, required = false,
                                 default = nil)
  if valid_776383 != nil:
    section.add "X-Amz-Date", valid_776383
  var valid_776384 = header.getOrDefault("X-Amz-Security-Token")
  valid_776384 = validateParameter(valid_776384, JString, required = false,
                                 default = nil)
  if valid_776384 != nil:
    section.add "X-Amz-Security-Token", valid_776384
  var valid_776385 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776385 = validateParameter(valid_776385, JString, required = false,
                                 default = nil)
  if valid_776385 != nil:
    section.add "X-Amz-Content-Sha256", valid_776385
  var valid_776386 = header.getOrDefault("X-Amz-Algorithm")
  valid_776386 = validateParameter(valid_776386, JString, required = false,
                                 default = nil)
  if valid_776386 != nil:
    section.add "X-Amz-Algorithm", valid_776386
  var valid_776387 = header.getOrDefault("X-Amz-Signature")
  valid_776387 = validateParameter(valid_776387, JString, required = false,
                                 default = nil)
  if valid_776387 != nil:
    section.add "X-Amz-Signature", valid_776387
  var valid_776388 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776388 = validateParameter(valid_776388, JString, required = false,
                                 default = nil)
  if valid_776388 != nil:
    section.add "X-Amz-SignedHeaders", valid_776388
  var valid_776389 = header.getOrDefault("X-Amz-Credential")
  valid_776389 = validateParameter(valid_776389, JString, required = false,
                                 default = nil)
  if valid_776389 != nil:
    section.add "X-Amz-Credential", valid_776389
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776390: Call_GetListPoliciesGrantingServiceAccess_776375;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_776390.validator(path, query, header, formData, body)
  let scheme = call_776390.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776390.url(scheme.get, call_776390.host, call_776390.base,
                         call_776390.route, valid.getOrDefault("path"))
  result = hook(call_776390, url, valid)

proc call*(call_776391: Call_GetListPoliciesGrantingServiceAccess_776375;
          ServiceNamespaces: JsonNode; Arn: string;
          Action: string = "ListPoliciesGrantingServiceAccess"; Marker: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_776392 = newJObject()
  if ServiceNamespaces != nil:
    query_776392.add "ServiceNamespaces", ServiceNamespaces
  add(query_776392, "Action", newJString(Action))
  add(query_776392, "Marker", newJString(Marker))
  add(query_776392, "Arn", newJString(Arn))
  add(query_776392, "Version", newJString(Version))
  result = call_776391.call(nil, query_776392, nil, nil, nil)

var getListPoliciesGrantingServiceAccess* = Call_GetListPoliciesGrantingServiceAccess_776375(
    name: "getListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_GetListPoliciesGrantingServiceAccess_776376, base: "/",
    url: url_GetListPoliciesGrantingServiceAccess_776377,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicyVersions_776430 = ref object of OpenApiRestCall_772597
proc url_PostListPolicyVersions_776432(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListPolicyVersions_776431(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776433 = query.getOrDefault("Action")
  valid_776433 = validateParameter(valid_776433, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_776433 != nil:
    section.add "Action", valid_776433
  var valid_776434 = query.getOrDefault("Version")
  valid_776434 = validateParameter(valid_776434, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776434 != nil:
    section.add "Version", valid_776434
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776435 = header.getOrDefault("X-Amz-Date")
  valid_776435 = validateParameter(valid_776435, JString, required = false,
                                 default = nil)
  if valid_776435 != nil:
    section.add "X-Amz-Date", valid_776435
  var valid_776436 = header.getOrDefault("X-Amz-Security-Token")
  valid_776436 = validateParameter(valid_776436, JString, required = false,
                                 default = nil)
  if valid_776436 != nil:
    section.add "X-Amz-Security-Token", valid_776436
  var valid_776437 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776437 = validateParameter(valid_776437, JString, required = false,
                                 default = nil)
  if valid_776437 != nil:
    section.add "X-Amz-Content-Sha256", valid_776437
  var valid_776438 = header.getOrDefault("X-Amz-Algorithm")
  valid_776438 = validateParameter(valid_776438, JString, required = false,
                                 default = nil)
  if valid_776438 != nil:
    section.add "X-Amz-Algorithm", valid_776438
  var valid_776439 = header.getOrDefault("X-Amz-Signature")
  valid_776439 = validateParameter(valid_776439, JString, required = false,
                                 default = nil)
  if valid_776439 != nil:
    section.add "X-Amz-Signature", valid_776439
  var valid_776440 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776440 = validateParameter(valid_776440, JString, required = false,
                                 default = nil)
  if valid_776440 != nil:
    section.add "X-Amz-SignedHeaders", valid_776440
  var valid_776441 = header.getOrDefault("X-Amz-Credential")
  valid_776441 = validateParameter(valid_776441, JString, required = false,
                                 default = nil)
  if valid_776441 != nil:
    section.add "X-Amz-Credential", valid_776441
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_776442 = formData.getOrDefault("PolicyArn")
  valid_776442 = validateParameter(valid_776442, JString, required = true,
                                 default = nil)
  if valid_776442 != nil:
    section.add "PolicyArn", valid_776442
  var valid_776443 = formData.getOrDefault("Marker")
  valid_776443 = validateParameter(valid_776443, JString, required = false,
                                 default = nil)
  if valid_776443 != nil:
    section.add "Marker", valid_776443
  var valid_776444 = formData.getOrDefault("MaxItems")
  valid_776444 = validateParameter(valid_776444, JInt, required = false, default = nil)
  if valid_776444 != nil:
    section.add "MaxItems", valid_776444
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776445: Call_PostListPolicyVersions_776430; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_776445.validator(path, query, header, formData, body)
  let scheme = call_776445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776445.url(scheme.get, call_776445.host, call_776445.base,
                         call_776445.route, valid.getOrDefault("path"))
  result = hook(call_776445, url, valid)

proc call*(call_776446: Call_PostListPolicyVersions_776430; PolicyArn: string;
          Marker: string = ""; Action: string = "ListPolicyVersions"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776447 = newJObject()
  var formData_776448 = newJObject()
  add(formData_776448, "PolicyArn", newJString(PolicyArn))
  add(formData_776448, "Marker", newJString(Marker))
  add(query_776447, "Action", newJString(Action))
  add(formData_776448, "MaxItems", newJInt(MaxItems))
  add(query_776447, "Version", newJString(Version))
  result = call_776446.call(nil, query_776447, nil, formData_776448, nil)

var postListPolicyVersions* = Call_PostListPolicyVersions_776430(
    name: "postListPolicyVersions", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_PostListPolicyVersions_776431, base: "/",
    url: url_PostListPolicyVersions_776432, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicyVersions_776412 = ref object of OpenApiRestCall_772597
proc url_GetListPolicyVersions_776414(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListPolicyVersions_776413(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_776415 = query.getOrDefault("PolicyArn")
  valid_776415 = validateParameter(valid_776415, JString, required = true,
                                 default = nil)
  if valid_776415 != nil:
    section.add "PolicyArn", valid_776415
  var valid_776416 = query.getOrDefault("Action")
  valid_776416 = validateParameter(valid_776416, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_776416 != nil:
    section.add "Action", valid_776416
  var valid_776417 = query.getOrDefault("Marker")
  valid_776417 = validateParameter(valid_776417, JString, required = false,
                                 default = nil)
  if valid_776417 != nil:
    section.add "Marker", valid_776417
  var valid_776418 = query.getOrDefault("MaxItems")
  valid_776418 = validateParameter(valid_776418, JInt, required = false, default = nil)
  if valid_776418 != nil:
    section.add "MaxItems", valid_776418
  var valid_776419 = query.getOrDefault("Version")
  valid_776419 = validateParameter(valid_776419, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776419 != nil:
    section.add "Version", valid_776419
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776420 = header.getOrDefault("X-Amz-Date")
  valid_776420 = validateParameter(valid_776420, JString, required = false,
                                 default = nil)
  if valid_776420 != nil:
    section.add "X-Amz-Date", valid_776420
  var valid_776421 = header.getOrDefault("X-Amz-Security-Token")
  valid_776421 = validateParameter(valid_776421, JString, required = false,
                                 default = nil)
  if valid_776421 != nil:
    section.add "X-Amz-Security-Token", valid_776421
  var valid_776422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776422 = validateParameter(valid_776422, JString, required = false,
                                 default = nil)
  if valid_776422 != nil:
    section.add "X-Amz-Content-Sha256", valid_776422
  var valid_776423 = header.getOrDefault("X-Amz-Algorithm")
  valid_776423 = validateParameter(valid_776423, JString, required = false,
                                 default = nil)
  if valid_776423 != nil:
    section.add "X-Amz-Algorithm", valid_776423
  var valid_776424 = header.getOrDefault("X-Amz-Signature")
  valid_776424 = validateParameter(valid_776424, JString, required = false,
                                 default = nil)
  if valid_776424 != nil:
    section.add "X-Amz-Signature", valid_776424
  var valid_776425 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776425 = validateParameter(valid_776425, JString, required = false,
                                 default = nil)
  if valid_776425 != nil:
    section.add "X-Amz-SignedHeaders", valid_776425
  var valid_776426 = header.getOrDefault("X-Amz-Credential")
  valid_776426 = validateParameter(valid_776426, JString, required = false,
                                 default = nil)
  if valid_776426 != nil:
    section.add "X-Amz-Credential", valid_776426
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776427: Call_GetListPolicyVersions_776412; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_776427.validator(path, query, header, formData, body)
  let scheme = call_776427.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776427.url(scheme.get, call_776427.host, call_776427.base,
                         call_776427.route, valid.getOrDefault("path"))
  result = hook(call_776427, url, valid)

proc call*(call_776428: Call_GetListPolicyVersions_776412; PolicyArn: string;
          Action: string = "ListPolicyVersions"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776429 = newJObject()
  add(query_776429, "PolicyArn", newJString(PolicyArn))
  add(query_776429, "Action", newJString(Action))
  add(query_776429, "Marker", newJString(Marker))
  add(query_776429, "MaxItems", newJInt(MaxItems))
  add(query_776429, "Version", newJString(Version))
  result = call_776428.call(nil, query_776429, nil, nil, nil)

var getListPolicyVersions* = Call_GetListPolicyVersions_776412(
    name: "getListPolicyVersions", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_GetListPolicyVersions_776413, base: "/",
    url: url_GetListPolicyVersions_776414, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRolePolicies_776467 = ref object of OpenApiRestCall_772597
proc url_PostListRolePolicies_776469(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListRolePolicies_776468(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776470 = query.getOrDefault("Action")
  valid_776470 = validateParameter(valid_776470, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_776470 != nil:
    section.add "Action", valid_776470
  var valid_776471 = query.getOrDefault("Version")
  valid_776471 = validateParameter(valid_776471, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776471 != nil:
    section.add "Version", valid_776471
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776472 = header.getOrDefault("X-Amz-Date")
  valid_776472 = validateParameter(valid_776472, JString, required = false,
                                 default = nil)
  if valid_776472 != nil:
    section.add "X-Amz-Date", valid_776472
  var valid_776473 = header.getOrDefault("X-Amz-Security-Token")
  valid_776473 = validateParameter(valid_776473, JString, required = false,
                                 default = nil)
  if valid_776473 != nil:
    section.add "X-Amz-Security-Token", valid_776473
  var valid_776474 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776474 = validateParameter(valid_776474, JString, required = false,
                                 default = nil)
  if valid_776474 != nil:
    section.add "X-Amz-Content-Sha256", valid_776474
  var valid_776475 = header.getOrDefault("X-Amz-Algorithm")
  valid_776475 = validateParameter(valid_776475, JString, required = false,
                                 default = nil)
  if valid_776475 != nil:
    section.add "X-Amz-Algorithm", valid_776475
  var valid_776476 = header.getOrDefault("X-Amz-Signature")
  valid_776476 = validateParameter(valid_776476, JString, required = false,
                                 default = nil)
  if valid_776476 != nil:
    section.add "X-Amz-Signature", valid_776476
  var valid_776477 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776477 = validateParameter(valid_776477, JString, required = false,
                                 default = nil)
  if valid_776477 != nil:
    section.add "X-Amz-SignedHeaders", valid_776477
  var valid_776478 = header.getOrDefault("X-Amz-Credential")
  valid_776478 = validateParameter(valid_776478, JString, required = false,
                                 default = nil)
  if valid_776478 != nil:
    section.add "X-Amz-Credential", valid_776478
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_776479 = formData.getOrDefault("RoleName")
  valid_776479 = validateParameter(valid_776479, JString, required = true,
                                 default = nil)
  if valid_776479 != nil:
    section.add "RoleName", valid_776479
  var valid_776480 = formData.getOrDefault("Marker")
  valid_776480 = validateParameter(valid_776480, JString, required = false,
                                 default = nil)
  if valid_776480 != nil:
    section.add "Marker", valid_776480
  var valid_776481 = formData.getOrDefault("MaxItems")
  valid_776481 = validateParameter(valid_776481, JInt, required = false, default = nil)
  if valid_776481 != nil:
    section.add "MaxItems", valid_776481
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776482: Call_PostListRolePolicies_776467; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_776482.validator(path, query, header, formData, body)
  let scheme = call_776482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776482.url(scheme.get, call_776482.host, call_776482.base,
                         call_776482.route, valid.getOrDefault("path"))
  result = hook(call_776482, url, valid)

proc call*(call_776483: Call_PostListRolePolicies_776467; RoleName: string;
          Marker: string = ""; Action: string = "ListRolePolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776484 = newJObject()
  var formData_776485 = newJObject()
  add(formData_776485, "RoleName", newJString(RoleName))
  add(formData_776485, "Marker", newJString(Marker))
  add(query_776484, "Action", newJString(Action))
  add(formData_776485, "MaxItems", newJInt(MaxItems))
  add(query_776484, "Version", newJString(Version))
  result = call_776483.call(nil, query_776484, nil, formData_776485, nil)

var postListRolePolicies* = Call_PostListRolePolicies_776467(
    name: "postListRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_PostListRolePolicies_776468, base: "/",
    url: url_PostListRolePolicies_776469, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRolePolicies_776449 = ref object of OpenApiRestCall_772597
proc url_GetListRolePolicies_776451(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListRolePolicies_776450(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776452 = query.getOrDefault("Action")
  valid_776452 = validateParameter(valid_776452, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_776452 != nil:
    section.add "Action", valid_776452
  var valid_776453 = query.getOrDefault("Marker")
  valid_776453 = validateParameter(valid_776453, JString, required = false,
                                 default = nil)
  if valid_776453 != nil:
    section.add "Marker", valid_776453
  var valid_776454 = query.getOrDefault("MaxItems")
  valid_776454 = validateParameter(valid_776454, JInt, required = false, default = nil)
  if valid_776454 != nil:
    section.add "MaxItems", valid_776454
  var valid_776455 = query.getOrDefault("RoleName")
  valid_776455 = validateParameter(valid_776455, JString, required = true,
                                 default = nil)
  if valid_776455 != nil:
    section.add "RoleName", valid_776455
  var valid_776456 = query.getOrDefault("Version")
  valid_776456 = validateParameter(valid_776456, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776456 != nil:
    section.add "Version", valid_776456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776457 = header.getOrDefault("X-Amz-Date")
  valid_776457 = validateParameter(valid_776457, JString, required = false,
                                 default = nil)
  if valid_776457 != nil:
    section.add "X-Amz-Date", valid_776457
  var valid_776458 = header.getOrDefault("X-Amz-Security-Token")
  valid_776458 = validateParameter(valid_776458, JString, required = false,
                                 default = nil)
  if valid_776458 != nil:
    section.add "X-Amz-Security-Token", valid_776458
  var valid_776459 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776459 = validateParameter(valid_776459, JString, required = false,
                                 default = nil)
  if valid_776459 != nil:
    section.add "X-Amz-Content-Sha256", valid_776459
  var valid_776460 = header.getOrDefault("X-Amz-Algorithm")
  valid_776460 = validateParameter(valid_776460, JString, required = false,
                                 default = nil)
  if valid_776460 != nil:
    section.add "X-Amz-Algorithm", valid_776460
  var valid_776461 = header.getOrDefault("X-Amz-Signature")
  valid_776461 = validateParameter(valid_776461, JString, required = false,
                                 default = nil)
  if valid_776461 != nil:
    section.add "X-Amz-Signature", valid_776461
  var valid_776462 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776462 = validateParameter(valid_776462, JString, required = false,
                                 default = nil)
  if valid_776462 != nil:
    section.add "X-Amz-SignedHeaders", valid_776462
  var valid_776463 = header.getOrDefault("X-Amz-Credential")
  valid_776463 = validateParameter(valid_776463, JString, required = false,
                                 default = nil)
  if valid_776463 != nil:
    section.add "X-Amz-Credential", valid_776463
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776464: Call_GetListRolePolicies_776449; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_776464.validator(path, query, header, formData, body)
  let scheme = call_776464.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776464.url(scheme.get, call_776464.host, call_776464.base,
                         call_776464.route, valid.getOrDefault("path"))
  result = hook(call_776464, url, valid)

proc call*(call_776465: Call_GetListRolePolicies_776449; RoleName: string;
          Action: string = "ListRolePolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_776466 = newJObject()
  add(query_776466, "Action", newJString(Action))
  add(query_776466, "Marker", newJString(Marker))
  add(query_776466, "MaxItems", newJInt(MaxItems))
  add(query_776466, "RoleName", newJString(RoleName))
  add(query_776466, "Version", newJString(Version))
  result = call_776465.call(nil, query_776466, nil, nil, nil)

var getListRolePolicies* = Call_GetListRolePolicies_776449(
    name: "getListRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_GetListRolePolicies_776450, base: "/",
    url: url_GetListRolePolicies_776451, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoleTags_776504 = ref object of OpenApiRestCall_772597
proc url_PostListRoleTags_776506(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListRoleTags_776505(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776507 = query.getOrDefault("Action")
  valid_776507 = validateParameter(valid_776507, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_776507 != nil:
    section.add "Action", valid_776507
  var valid_776508 = query.getOrDefault("Version")
  valid_776508 = validateParameter(valid_776508, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776508 != nil:
    section.add "Version", valid_776508
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776509 = header.getOrDefault("X-Amz-Date")
  valid_776509 = validateParameter(valid_776509, JString, required = false,
                                 default = nil)
  if valid_776509 != nil:
    section.add "X-Amz-Date", valid_776509
  var valid_776510 = header.getOrDefault("X-Amz-Security-Token")
  valid_776510 = validateParameter(valid_776510, JString, required = false,
                                 default = nil)
  if valid_776510 != nil:
    section.add "X-Amz-Security-Token", valid_776510
  var valid_776511 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776511 = validateParameter(valid_776511, JString, required = false,
                                 default = nil)
  if valid_776511 != nil:
    section.add "X-Amz-Content-Sha256", valid_776511
  var valid_776512 = header.getOrDefault("X-Amz-Algorithm")
  valid_776512 = validateParameter(valid_776512, JString, required = false,
                                 default = nil)
  if valid_776512 != nil:
    section.add "X-Amz-Algorithm", valid_776512
  var valid_776513 = header.getOrDefault("X-Amz-Signature")
  valid_776513 = validateParameter(valid_776513, JString, required = false,
                                 default = nil)
  if valid_776513 != nil:
    section.add "X-Amz-Signature", valid_776513
  var valid_776514 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776514 = validateParameter(valid_776514, JString, required = false,
                                 default = nil)
  if valid_776514 != nil:
    section.add "X-Amz-SignedHeaders", valid_776514
  var valid_776515 = header.getOrDefault("X-Amz-Credential")
  valid_776515 = validateParameter(valid_776515, JString, required = false,
                                 default = nil)
  if valid_776515 != nil:
    section.add "X-Amz-Credential", valid_776515
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_776516 = formData.getOrDefault("RoleName")
  valid_776516 = validateParameter(valid_776516, JString, required = true,
                                 default = nil)
  if valid_776516 != nil:
    section.add "RoleName", valid_776516
  var valid_776517 = formData.getOrDefault("Marker")
  valid_776517 = validateParameter(valid_776517, JString, required = false,
                                 default = nil)
  if valid_776517 != nil:
    section.add "Marker", valid_776517
  var valid_776518 = formData.getOrDefault("MaxItems")
  valid_776518 = validateParameter(valid_776518, JInt, required = false, default = nil)
  if valid_776518 != nil:
    section.add "MaxItems", valid_776518
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776519: Call_PostListRoleTags_776504; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_776519.validator(path, query, header, formData, body)
  let scheme = call_776519.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776519.url(scheme.get, call_776519.host, call_776519.base,
                         call_776519.route, valid.getOrDefault("path"))
  result = hook(call_776519, url, valid)

proc call*(call_776520: Call_PostListRoleTags_776504; RoleName: string;
          Marker: string = ""; Action: string = "ListRoleTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776521 = newJObject()
  var formData_776522 = newJObject()
  add(formData_776522, "RoleName", newJString(RoleName))
  add(formData_776522, "Marker", newJString(Marker))
  add(query_776521, "Action", newJString(Action))
  add(formData_776522, "MaxItems", newJInt(MaxItems))
  add(query_776521, "Version", newJString(Version))
  result = call_776520.call(nil, query_776521, nil, formData_776522, nil)

var postListRoleTags* = Call_PostListRoleTags_776504(name: "postListRoleTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_PostListRoleTags_776505,
    base: "/", url: url_PostListRoleTags_776506,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoleTags_776486 = ref object of OpenApiRestCall_772597
proc url_GetListRoleTags_776488(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListRoleTags_776487(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776489 = query.getOrDefault("Action")
  valid_776489 = validateParameter(valid_776489, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_776489 != nil:
    section.add "Action", valid_776489
  var valid_776490 = query.getOrDefault("Marker")
  valid_776490 = validateParameter(valid_776490, JString, required = false,
                                 default = nil)
  if valid_776490 != nil:
    section.add "Marker", valid_776490
  var valid_776491 = query.getOrDefault("MaxItems")
  valid_776491 = validateParameter(valid_776491, JInt, required = false, default = nil)
  if valid_776491 != nil:
    section.add "MaxItems", valid_776491
  var valid_776492 = query.getOrDefault("RoleName")
  valid_776492 = validateParameter(valid_776492, JString, required = true,
                                 default = nil)
  if valid_776492 != nil:
    section.add "RoleName", valid_776492
  var valid_776493 = query.getOrDefault("Version")
  valid_776493 = validateParameter(valid_776493, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776493 != nil:
    section.add "Version", valid_776493
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776494 = header.getOrDefault("X-Amz-Date")
  valid_776494 = validateParameter(valid_776494, JString, required = false,
                                 default = nil)
  if valid_776494 != nil:
    section.add "X-Amz-Date", valid_776494
  var valid_776495 = header.getOrDefault("X-Amz-Security-Token")
  valid_776495 = validateParameter(valid_776495, JString, required = false,
                                 default = nil)
  if valid_776495 != nil:
    section.add "X-Amz-Security-Token", valid_776495
  var valid_776496 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776496 = validateParameter(valid_776496, JString, required = false,
                                 default = nil)
  if valid_776496 != nil:
    section.add "X-Amz-Content-Sha256", valid_776496
  var valid_776497 = header.getOrDefault("X-Amz-Algorithm")
  valid_776497 = validateParameter(valid_776497, JString, required = false,
                                 default = nil)
  if valid_776497 != nil:
    section.add "X-Amz-Algorithm", valid_776497
  var valid_776498 = header.getOrDefault("X-Amz-Signature")
  valid_776498 = validateParameter(valid_776498, JString, required = false,
                                 default = nil)
  if valid_776498 != nil:
    section.add "X-Amz-Signature", valid_776498
  var valid_776499 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776499 = validateParameter(valid_776499, JString, required = false,
                                 default = nil)
  if valid_776499 != nil:
    section.add "X-Amz-SignedHeaders", valid_776499
  var valid_776500 = header.getOrDefault("X-Amz-Credential")
  valid_776500 = validateParameter(valid_776500, JString, required = false,
                                 default = nil)
  if valid_776500 != nil:
    section.add "X-Amz-Credential", valid_776500
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776501: Call_GetListRoleTags_776486; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_776501.validator(path, query, header, formData, body)
  let scheme = call_776501.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776501.url(scheme.get, call_776501.host, call_776501.base,
                         call_776501.route, valid.getOrDefault("path"))
  result = hook(call_776501, url, valid)

proc call*(call_776502: Call_GetListRoleTags_776486; RoleName: string;
          Action: string = "ListRoleTags"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_776503 = newJObject()
  add(query_776503, "Action", newJString(Action))
  add(query_776503, "Marker", newJString(Marker))
  add(query_776503, "MaxItems", newJInt(MaxItems))
  add(query_776503, "RoleName", newJString(RoleName))
  add(query_776503, "Version", newJString(Version))
  result = call_776502.call(nil, query_776503, nil, nil, nil)

var getListRoleTags* = Call_GetListRoleTags_776486(name: "getListRoleTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_GetListRoleTags_776487,
    base: "/", url: url_GetListRoleTags_776488, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoles_776541 = ref object of OpenApiRestCall_772597
proc url_PostListRoles_776543(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListRoles_776542(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776544 = query.getOrDefault("Action")
  valid_776544 = validateParameter(valid_776544, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_776544 != nil:
    section.add "Action", valid_776544
  var valid_776545 = query.getOrDefault("Version")
  valid_776545 = validateParameter(valid_776545, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776545 != nil:
    section.add "Version", valid_776545
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776546 = header.getOrDefault("X-Amz-Date")
  valid_776546 = validateParameter(valid_776546, JString, required = false,
                                 default = nil)
  if valid_776546 != nil:
    section.add "X-Amz-Date", valid_776546
  var valid_776547 = header.getOrDefault("X-Amz-Security-Token")
  valid_776547 = validateParameter(valid_776547, JString, required = false,
                                 default = nil)
  if valid_776547 != nil:
    section.add "X-Amz-Security-Token", valid_776547
  var valid_776548 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776548 = validateParameter(valid_776548, JString, required = false,
                                 default = nil)
  if valid_776548 != nil:
    section.add "X-Amz-Content-Sha256", valid_776548
  var valid_776549 = header.getOrDefault("X-Amz-Algorithm")
  valid_776549 = validateParameter(valid_776549, JString, required = false,
                                 default = nil)
  if valid_776549 != nil:
    section.add "X-Amz-Algorithm", valid_776549
  var valid_776550 = header.getOrDefault("X-Amz-Signature")
  valid_776550 = validateParameter(valid_776550, JString, required = false,
                                 default = nil)
  if valid_776550 != nil:
    section.add "X-Amz-Signature", valid_776550
  var valid_776551 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776551 = validateParameter(valid_776551, JString, required = false,
                                 default = nil)
  if valid_776551 != nil:
    section.add "X-Amz-SignedHeaders", valid_776551
  var valid_776552 = header.getOrDefault("X-Amz-Credential")
  valid_776552 = validateParameter(valid_776552, JString, required = false,
                                 default = nil)
  if valid_776552 != nil:
    section.add "X-Amz-Credential", valid_776552
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_776553 = formData.getOrDefault("PathPrefix")
  valid_776553 = validateParameter(valid_776553, JString, required = false,
                                 default = nil)
  if valid_776553 != nil:
    section.add "PathPrefix", valid_776553
  var valid_776554 = formData.getOrDefault("Marker")
  valid_776554 = validateParameter(valid_776554, JString, required = false,
                                 default = nil)
  if valid_776554 != nil:
    section.add "Marker", valid_776554
  var valid_776555 = formData.getOrDefault("MaxItems")
  valid_776555 = validateParameter(valid_776555, JInt, required = false, default = nil)
  if valid_776555 != nil:
    section.add "MaxItems", valid_776555
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776556: Call_PostListRoles_776541; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776556.validator(path, query, header, formData, body)
  let scheme = call_776556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776556.url(scheme.get, call_776556.host, call_776556.base,
                         call_776556.route, valid.getOrDefault("path"))
  result = hook(call_776556, url, valid)

proc call*(call_776557: Call_PostListRoles_776541; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListRoles"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776558 = newJObject()
  var formData_776559 = newJObject()
  add(formData_776559, "PathPrefix", newJString(PathPrefix))
  add(formData_776559, "Marker", newJString(Marker))
  add(query_776558, "Action", newJString(Action))
  add(formData_776559, "MaxItems", newJInt(MaxItems))
  add(query_776558, "Version", newJString(Version))
  result = call_776557.call(nil, query_776558, nil, formData_776559, nil)

var postListRoles* = Call_PostListRoles_776541(name: "postListRoles",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_PostListRoles_776542,
    base: "/", url: url_PostListRoles_776543, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoles_776523 = ref object of OpenApiRestCall_772597
proc url_GetListRoles_776525(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListRoles_776524(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_776526 = query.getOrDefault("PathPrefix")
  valid_776526 = validateParameter(valid_776526, JString, required = false,
                                 default = nil)
  if valid_776526 != nil:
    section.add "PathPrefix", valid_776526
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776527 = query.getOrDefault("Action")
  valid_776527 = validateParameter(valid_776527, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_776527 != nil:
    section.add "Action", valid_776527
  var valid_776528 = query.getOrDefault("Marker")
  valid_776528 = validateParameter(valid_776528, JString, required = false,
                                 default = nil)
  if valid_776528 != nil:
    section.add "Marker", valid_776528
  var valid_776529 = query.getOrDefault("MaxItems")
  valid_776529 = validateParameter(valid_776529, JInt, required = false, default = nil)
  if valid_776529 != nil:
    section.add "MaxItems", valid_776529
  var valid_776530 = query.getOrDefault("Version")
  valid_776530 = validateParameter(valid_776530, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776530 != nil:
    section.add "Version", valid_776530
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776531 = header.getOrDefault("X-Amz-Date")
  valid_776531 = validateParameter(valid_776531, JString, required = false,
                                 default = nil)
  if valid_776531 != nil:
    section.add "X-Amz-Date", valid_776531
  var valid_776532 = header.getOrDefault("X-Amz-Security-Token")
  valid_776532 = validateParameter(valid_776532, JString, required = false,
                                 default = nil)
  if valid_776532 != nil:
    section.add "X-Amz-Security-Token", valid_776532
  var valid_776533 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776533 = validateParameter(valid_776533, JString, required = false,
                                 default = nil)
  if valid_776533 != nil:
    section.add "X-Amz-Content-Sha256", valid_776533
  var valid_776534 = header.getOrDefault("X-Amz-Algorithm")
  valid_776534 = validateParameter(valid_776534, JString, required = false,
                                 default = nil)
  if valid_776534 != nil:
    section.add "X-Amz-Algorithm", valid_776534
  var valid_776535 = header.getOrDefault("X-Amz-Signature")
  valid_776535 = validateParameter(valid_776535, JString, required = false,
                                 default = nil)
  if valid_776535 != nil:
    section.add "X-Amz-Signature", valid_776535
  var valid_776536 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776536 = validateParameter(valid_776536, JString, required = false,
                                 default = nil)
  if valid_776536 != nil:
    section.add "X-Amz-SignedHeaders", valid_776536
  var valid_776537 = header.getOrDefault("X-Amz-Credential")
  valid_776537 = validateParameter(valid_776537, JString, required = false,
                                 default = nil)
  if valid_776537 != nil:
    section.add "X-Amz-Credential", valid_776537
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776538: Call_GetListRoles_776523; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776538.validator(path, query, header, formData, body)
  let scheme = call_776538.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776538.url(scheme.get, call_776538.host, call_776538.base,
                         call_776538.route, valid.getOrDefault("path"))
  result = hook(call_776538, url, valid)

proc call*(call_776539: Call_GetListRoles_776523; PathPrefix: string = "";
          Action: string = "ListRoles"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776540 = newJObject()
  add(query_776540, "PathPrefix", newJString(PathPrefix))
  add(query_776540, "Action", newJString(Action))
  add(query_776540, "Marker", newJString(Marker))
  add(query_776540, "MaxItems", newJInt(MaxItems))
  add(query_776540, "Version", newJString(Version))
  result = call_776539.call(nil, query_776540, nil, nil, nil)

var getListRoles* = Call_GetListRoles_776523(name: "getListRoles",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_GetListRoles_776524, base: "/",
    url: url_GetListRoles_776525, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSAMLProviders_776575 = ref object of OpenApiRestCall_772597
proc url_PostListSAMLProviders_776577(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListSAMLProviders_776576(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776578 = query.getOrDefault("Action")
  valid_776578 = validateParameter(valid_776578, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_776578 != nil:
    section.add "Action", valid_776578
  var valid_776579 = query.getOrDefault("Version")
  valid_776579 = validateParameter(valid_776579, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776579 != nil:
    section.add "Version", valid_776579
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776580 = header.getOrDefault("X-Amz-Date")
  valid_776580 = validateParameter(valid_776580, JString, required = false,
                                 default = nil)
  if valid_776580 != nil:
    section.add "X-Amz-Date", valid_776580
  var valid_776581 = header.getOrDefault("X-Amz-Security-Token")
  valid_776581 = validateParameter(valid_776581, JString, required = false,
                                 default = nil)
  if valid_776581 != nil:
    section.add "X-Amz-Security-Token", valid_776581
  var valid_776582 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776582 = validateParameter(valid_776582, JString, required = false,
                                 default = nil)
  if valid_776582 != nil:
    section.add "X-Amz-Content-Sha256", valid_776582
  var valid_776583 = header.getOrDefault("X-Amz-Algorithm")
  valid_776583 = validateParameter(valid_776583, JString, required = false,
                                 default = nil)
  if valid_776583 != nil:
    section.add "X-Amz-Algorithm", valid_776583
  var valid_776584 = header.getOrDefault("X-Amz-Signature")
  valid_776584 = validateParameter(valid_776584, JString, required = false,
                                 default = nil)
  if valid_776584 != nil:
    section.add "X-Amz-Signature", valid_776584
  var valid_776585 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776585 = validateParameter(valid_776585, JString, required = false,
                                 default = nil)
  if valid_776585 != nil:
    section.add "X-Amz-SignedHeaders", valid_776585
  var valid_776586 = header.getOrDefault("X-Amz-Credential")
  valid_776586 = validateParameter(valid_776586, JString, required = false,
                                 default = nil)
  if valid_776586 != nil:
    section.add "X-Amz-Credential", valid_776586
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776587: Call_PostListSAMLProviders_776575; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_776587.validator(path, query, header, formData, body)
  let scheme = call_776587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776587.url(scheme.get, call_776587.host, call_776587.base,
                         call_776587.route, valid.getOrDefault("path"))
  result = hook(call_776587, url, valid)

proc call*(call_776588: Call_PostListSAMLProviders_776575;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## postListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776589 = newJObject()
  add(query_776589, "Action", newJString(Action))
  add(query_776589, "Version", newJString(Version))
  result = call_776588.call(nil, query_776589, nil, nil, nil)

var postListSAMLProviders* = Call_PostListSAMLProviders_776575(
    name: "postListSAMLProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_PostListSAMLProviders_776576, base: "/",
    url: url_PostListSAMLProviders_776577, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSAMLProviders_776560 = ref object of OpenApiRestCall_772597
proc url_GetListSAMLProviders_776562(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListSAMLProviders_776561(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776563 = query.getOrDefault("Action")
  valid_776563 = validateParameter(valid_776563, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_776563 != nil:
    section.add "Action", valid_776563
  var valid_776564 = query.getOrDefault("Version")
  valid_776564 = validateParameter(valid_776564, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776564 != nil:
    section.add "Version", valid_776564
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776565 = header.getOrDefault("X-Amz-Date")
  valid_776565 = validateParameter(valid_776565, JString, required = false,
                                 default = nil)
  if valid_776565 != nil:
    section.add "X-Amz-Date", valid_776565
  var valid_776566 = header.getOrDefault("X-Amz-Security-Token")
  valid_776566 = validateParameter(valid_776566, JString, required = false,
                                 default = nil)
  if valid_776566 != nil:
    section.add "X-Amz-Security-Token", valid_776566
  var valid_776567 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776567 = validateParameter(valid_776567, JString, required = false,
                                 default = nil)
  if valid_776567 != nil:
    section.add "X-Amz-Content-Sha256", valid_776567
  var valid_776568 = header.getOrDefault("X-Amz-Algorithm")
  valid_776568 = validateParameter(valid_776568, JString, required = false,
                                 default = nil)
  if valid_776568 != nil:
    section.add "X-Amz-Algorithm", valid_776568
  var valid_776569 = header.getOrDefault("X-Amz-Signature")
  valid_776569 = validateParameter(valid_776569, JString, required = false,
                                 default = nil)
  if valid_776569 != nil:
    section.add "X-Amz-Signature", valid_776569
  var valid_776570 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776570 = validateParameter(valid_776570, JString, required = false,
                                 default = nil)
  if valid_776570 != nil:
    section.add "X-Amz-SignedHeaders", valid_776570
  var valid_776571 = header.getOrDefault("X-Amz-Credential")
  valid_776571 = validateParameter(valid_776571, JString, required = false,
                                 default = nil)
  if valid_776571 != nil:
    section.add "X-Amz-Credential", valid_776571
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776572: Call_GetListSAMLProviders_776560; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_776572.validator(path, query, header, formData, body)
  let scheme = call_776572.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776572.url(scheme.get, call_776572.host, call_776572.base,
                         call_776572.route, valid.getOrDefault("path"))
  result = hook(call_776572, url, valid)

proc call*(call_776573: Call_GetListSAMLProviders_776560;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## getListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776574 = newJObject()
  add(query_776574, "Action", newJString(Action))
  add(query_776574, "Version", newJString(Version))
  result = call_776573.call(nil, query_776574, nil, nil, nil)

var getListSAMLProviders* = Call_GetListSAMLProviders_776560(
    name: "getListSAMLProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_GetListSAMLProviders_776561, base: "/",
    url: url_GetListSAMLProviders_776562, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSSHPublicKeys_776608 = ref object of OpenApiRestCall_772597
proc url_PostListSSHPublicKeys_776610(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListSSHPublicKeys_776609(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776611 = query.getOrDefault("Action")
  valid_776611 = validateParameter(valid_776611, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_776611 != nil:
    section.add "Action", valid_776611
  var valid_776612 = query.getOrDefault("Version")
  valid_776612 = validateParameter(valid_776612, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776612 != nil:
    section.add "Version", valid_776612
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776613 = header.getOrDefault("X-Amz-Date")
  valid_776613 = validateParameter(valid_776613, JString, required = false,
                                 default = nil)
  if valid_776613 != nil:
    section.add "X-Amz-Date", valid_776613
  var valid_776614 = header.getOrDefault("X-Amz-Security-Token")
  valid_776614 = validateParameter(valid_776614, JString, required = false,
                                 default = nil)
  if valid_776614 != nil:
    section.add "X-Amz-Security-Token", valid_776614
  var valid_776615 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776615 = validateParameter(valid_776615, JString, required = false,
                                 default = nil)
  if valid_776615 != nil:
    section.add "X-Amz-Content-Sha256", valid_776615
  var valid_776616 = header.getOrDefault("X-Amz-Algorithm")
  valid_776616 = validateParameter(valid_776616, JString, required = false,
                                 default = nil)
  if valid_776616 != nil:
    section.add "X-Amz-Algorithm", valid_776616
  var valid_776617 = header.getOrDefault("X-Amz-Signature")
  valid_776617 = validateParameter(valid_776617, JString, required = false,
                                 default = nil)
  if valid_776617 != nil:
    section.add "X-Amz-Signature", valid_776617
  var valid_776618 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776618 = validateParameter(valid_776618, JString, required = false,
                                 default = nil)
  if valid_776618 != nil:
    section.add "X-Amz-SignedHeaders", valid_776618
  var valid_776619 = header.getOrDefault("X-Amz-Credential")
  valid_776619 = validateParameter(valid_776619, JString, required = false,
                                 default = nil)
  if valid_776619 != nil:
    section.add "X-Amz-Credential", valid_776619
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_776620 = formData.getOrDefault("UserName")
  valid_776620 = validateParameter(valid_776620, JString, required = false,
                                 default = nil)
  if valid_776620 != nil:
    section.add "UserName", valid_776620
  var valid_776621 = formData.getOrDefault("Marker")
  valid_776621 = validateParameter(valid_776621, JString, required = false,
                                 default = nil)
  if valid_776621 != nil:
    section.add "Marker", valid_776621
  var valid_776622 = formData.getOrDefault("MaxItems")
  valid_776622 = validateParameter(valid_776622, JInt, required = false, default = nil)
  if valid_776622 != nil:
    section.add "MaxItems", valid_776622
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776623: Call_PostListSSHPublicKeys_776608; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776623.validator(path, query, header, formData, body)
  let scheme = call_776623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776623.url(scheme.get, call_776623.host, call_776623.base,
                         call_776623.route, valid.getOrDefault("path"))
  result = hook(call_776623, url, valid)

proc call*(call_776624: Call_PostListSSHPublicKeys_776608; UserName: string = "";
          Marker: string = ""; Action: string = "ListSSHPublicKeys"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776625 = newJObject()
  var formData_776626 = newJObject()
  add(formData_776626, "UserName", newJString(UserName))
  add(formData_776626, "Marker", newJString(Marker))
  add(query_776625, "Action", newJString(Action))
  add(formData_776626, "MaxItems", newJInt(MaxItems))
  add(query_776625, "Version", newJString(Version))
  result = call_776624.call(nil, query_776625, nil, formData_776626, nil)

var postListSSHPublicKeys* = Call_PostListSSHPublicKeys_776608(
    name: "postListSSHPublicKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_PostListSSHPublicKeys_776609, base: "/",
    url: url_PostListSSHPublicKeys_776610, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSSHPublicKeys_776590 = ref object of OpenApiRestCall_772597
proc url_GetListSSHPublicKeys_776592(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListSSHPublicKeys_776591(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_776593 = query.getOrDefault("UserName")
  valid_776593 = validateParameter(valid_776593, JString, required = false,
                                 default = nil)
  if valid_776593 != nil:
    section.add "UserName", valid_776593
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776594 = query.getOrDefault("Action")
  valid_776594 = validateParameter(valid_776594, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_776594 != nil:
    section.add "Action", valid_776594
  var valid_776595 = query.getOrDefault("Marker")
  valid_776595 = validateParameter(valid_776595, JString, required = false,
                                 default = nil)
  if valid_776595 != nil:
    section.add "Marker", valid_776595
  var valid_776596 = query.getOrDefault("MaxItems")
  valid_776596 = validateParameter(valid_776596, JInt, required = false, default = nil)
  if valid_776596 != nil:
    section.add "MaxItems", valid_776596
  var valid_776597 = query.getOrDefault("Version")
  valid_776597 = validateParameter(valid_776597, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776597 != nil:
    section.add "Version", valid_776597
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776598 = header.getOrDefault("X-Amz-Date")
  valid_776598 = validateParameter(valid_776598, JString, required = false,
                                 default = nil)
  if valid_776598 != nil:
    section.add "X-Amz-Date", valid_776598
  var valid_776599 = header.getOrDefault("X-Amz-Security-Token")
  valid_776599 = validateParameter(valid_776599, JString, required = false,
                                 default = nil)
  if valid_776599 != nil:
    section.add "X-Amz-Security-Token", valid_776599
  var valid_776600 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776600 = validateParameter(valid_776600, JString, required = false,
                                 default = nil)
  if valid_776600 != nil:
    section.add "X-Amz-Content-Sha256", valid_776600
  var valid_776601 = header.getOrDefault("X-Amz-Algorithm")
  valid_776601 = validateParameter(valid_776601, JString, required = false,
                                 default = nil)
  if valid_776601 != nil:
    section.add "X-Amz-Algorithm", valid_776601
  var valid_776602 = header.getOrDefault("X-Amz-Signature")
  valid_776602 = validateParameter(valid_776602, JString, required = false,
                                 default = nil)
  if valid_776602 != nil:
    section.add "X-Amz-Signature", valid_776602
  var valid_776603 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776603 = validateParameter(valid_776603, JString, required = false,
                                 default = nil)
  if valid_776603 != nil:
    section.add "X-Amz-SignedHeaders", valid_776603
  var valid_776604 = header.getOrDefault("X-Amz-Credential")
  valid_776604 = validateParameter(valid_776604, JString, required = false,
                                 default = nil)
  if valid_776604 != nil:
    section.add "X-Amz-Credential", valid_776604
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776605: Call_GetListSSHPublicKeys_776590; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776605.validator(path, query, header, formData, body)
  let scheme = call_776605.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776605.url(scheme.get, call_776605.host, call_776605.base,
                         call_776605.route, valid.getOrDefault("path"))
  result = hook(call_776605, url, valid)

proc call*(call_776606: Call_GetListSSHPublicKeys_776590; UserName: string = "";
          Action: string = "ListSSHPublicKeys"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776607 = newJObject()
  add(query_776607, "UserName", newJString(UserName))
  add(query_776607, "Action", newJString(Action))
  add(query_776607, "Marker", newJString(Marker))
  add(query_776607, "MaxItems", newJInt(MaxItems))
  add(query_776607, "Version", newJString(Version))
  result = call_776606.call(nil, query_776607, nil, nil, nil)

var getListSSHPublicKeys* = Call_GetListSSHPublicKeys_776590(
    name: "getListSSHPublicKeys", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_GetListSSHPublicKeys_776591, base: "/",
    url: url_GetListSSHPublicKeys_776592, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServerCertificates_776645 = ref object of OpenApiRestCall_772597
proc url_PostListServerCertificates_776647(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListServerCertificates_776646(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776648 = query.getOrDefault("Action")
  valid_776648 = validateParameter(valid_776648, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_776648 != nil:
    section.add "Action", valid_776648
  var valid_776649 = query.getOrDefault("Version")
  valid_776649 = validateParameter(valid_776649, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776649 != nil:
    section.add "Version", valid_776649
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776650 = header.getOrDefault("X-Amz-Date")
  valid_776650 = validateParameter(valid_776650, JString, required = false,
                                 default = nil)
  if valid_776650 != nil:
    section.add "X-Amz-Date", valid_776650
  var valid_776651 = header.getOrDefault("X-Amz-Security-Token")
  valid_776651 = validateParameter(valid_776651, JString, required = false,
                                 default = nil)
  if valid_776651 != nil:
    section.add "X-Amz-Security-Token", valid_776651
  var valid_776652 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776652 = validateParameter(valid_776652, JString, required = false,
                                 default = nil)
  if valid_776652 != nil:
    section.add "X-Amz-Content-Sha256", valid_776652
  var valid_776653 = header.getOrDefault("X-Amz-Algorithm")
  valid_776653 = validateParameter(valid_776653, JString, required = false,
                                 default = nil)
  if valid_776653 != nil:
    section.add "X-Amz-Algorithm", valid_776653
  var valid_776654 = header.getOrDefault("X-Amz-Signature")
  valid_776654 = validateParameter(valid_776654, JString, required = false,
                                 default = nil)
  if valid_776654 != nil:
    section.add "X-Amz-Signature", valid_776654
  var valid_776655 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776655 = validateParameter(valid_776655, JString, required = false,
                                 default = nil)
  if valid_776655 != nil:
    section.add "X-Amz-SignedHeaders", valid_776655
  var valid_776656 = header.getOrDefault("X-Amz-Credential")
  valid_776656 = validateParameter(valid_776656, JString, required = false,
                                 default = nil)
  if valid_776656 != nil:
    section.add "X-Amz-Credential", valid_776656
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_776657 = formData.getOrDefault("PathPrefix")
  valid_776657 = validateParameter(valid_776657, JString, required = false,
                                 default = nil)
  if valid_776657 != nil:
    section.add "PathPrefix", valid_776657
  var valid_776658 = formData.getOrDefault("Marker")
  valid_776658 = validateParameter(valid_776658, JString, required = false,
                                 default = nil)
  if valid_776658 != nil:
    section.add "Marker", valid_776658
  var valid_776659 = formData.getOrDefault("MaxItems")
  valid_776659 = validateParameter(valid_776659, JInt, required = false, default = nil)
  if valid_776659 != nil:
    section.add "MaxItems", valid_776659
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776660: Call_PostListServerCertificates_776645; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_776660.validator(path, query, header, formData, body)
  let scheme = call_776660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776660.url(scheme.get, call_776660.host, call_776660.base,
                         call_776660.route, valid.getOrDefault("path"))
  result = hook(call_776660, url, valid)

proc call*(call_776661: Call_PostListServerCertificates_776645;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListServerCertificates"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776662 = newJObject()
  var formData_776663 = newJObject()
  add(formData_776663, "PathPrefix", newJString(PathPrefix))
  add(formData_776663, "Marker", newJString(Marker))
  add(query_776662, "Action", newJString(Action))
  add(formData_776663, "MaxItems", newJInt(MaxItems))
  add(query_776662, "Version", newJString(Version))
  result = call_776661.call(nil, query_776662, nil, formData_776663, nil)

var postListServerCertificates* = Call_PostListServerCertificates_776645(
    name: "postListServerCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_PostListServerCertificates_776646, base: "/",
    url: url_PostListServerCertificates_776647,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServerCertificates_776627 = ref object of OpenApiRestCall_772597
proc url_GetListServerCertificates_776629(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListServerCertificates_776628(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_776630 = query.getOrDefault("PathPrefix")
  valid_776630 = validateParameter(valid_776630, JString, required = false,
                                 default = nil)
  if valid_776630 != nil:
    section.add "PathPrefix", valid_776630
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776631 = query.getOrDefault("Action")
  valid_776631 = validateParameter(valid_776631, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_776631 != nil:
    section.add "Action", valid_776631
  var valid_776632 = query.getOrDefault("Marker")
  valid_776632 = validateParameter(valid_776632, JString, required = false,
                                 default = nil)
  if valid_776632 != nil:
    section.add "Marker", valid_776632
  var valid_776633 = query.getOrDefault("MaxItems")
  valid_776633 = validateParameter(valid_776633, JInt, required = false, default = nil)
  if valid_776633 != nil:
    section.add "MaxItems", valid_776633
  var valid_776634 = query.getOrDefault("Version")
  valid_776634 = validateParameter(valid_776634, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776634 != nil:
    section.add "Version", valid_776634
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776635 = header.getOrDefault("X-Amz-Date")
  valid_776635 = validateParameter(valid_776635, JString, required = false,
                                 default = nil)
  if valid_776635 != nil:
    section.add "X-Amz-Date", valid_776635
  var valid_776636 = header.getOrDefault("X-Amz-Security-Token")
  valid_776636 = validateParameter(valid_776636, JString, required = false,
                                 default = nil)
  if valid_776636 != nil:
    section.add "X-Amz-Security-Token", valid_776636
  var valid_776637 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776637 = validateParameter(valid_776637, JString, required = false,
                                 default = nil)
  if valid_776637 != nil:
    section.add "X-Amz-Content-Sha256", valid_776637
  var valid_776638 = header.getOrDefault("X-Amz-Algorithm")
  valid_776638 = validateParameter(valid_776638, JString, required = false,
                                 default = nil)
  if valid_776638 != nil:
    section.add "X-Amz-Algorithm", valid_776638
  var valid_776639 = header.getOrDefault("X-Amz-Signature")
  valid_776639 = validateParameter(valid_776639, JString, required = false,
                                 default = nil)
  if valid_776639 != nil:
    section.add "X-Amz-Signature", valid_776639
  var valid_776640 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776640 = validateParameter(valid_776640, JString, required = false,
                                 default = nil)
  if valid_776640 != nil:
    section.add "X-Amz-SignedHeaders", valid_776640
  var valid_776641 = header.getOrDefault("X-Amz-Credential")
  valid_776641 = validateParameter(valid_776641, JString, required = false,
                                 default = nil)
  if valid_776641 != nil:
    section.add "X-Amz-Credential", valid_776641
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776642: Call_GetListServerCertificates_776627; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_776642.validator(path, query, header, formData, body)
  let scheme = call_776642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776642.url(scheme.get, call_776642.host, call_776642.base,
                         call_776642.route, valid.getOrDefault("path"))
  result = hook(call_776642, url, valid)

proc call*(call_776643: Call_GetListServerCertificates_776627;
          PathPrefix: string = ""; Action: string = "ListServerCertificates";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776644 = newJObject()
  add(query_776644, "PathPrefix", newJString(PathPrefix))
  add(query_776644, "Action", newJString(Action))
  add(query_776644, "Marker", newJString(Marker))
  add(query_776644, "MaxItems", newJInt(MaxItems))
  add(query_776644, "Version", newJString(Version))
  result = call_776643.call(nil, query_776644, nil, nil, nil)

var getListServerCertificates* = Call_GetListServerCertificates_776627(
    name: "getListServerCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_GetListServerCertificates_776628, base: "/",
    url: url_GetListServerCertificates_776629,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServiceSpecificCredentials_776681 = ref object of OpenApiRestCall_772597
proc url_PostListServiceSpecificCredentials_776683(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListServiceSpecificCredentials_776682(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776684 = query.getOrDefault("Action")
  valid_776684 = validateParameter(valid_776684, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_776684 != nil:
    section.add "Action", valid_776684
  var valid_776685 = query.getOrDefault("Version")
  valid_776685 = validateParameter(valid_776685, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776685 != nil:
    section.add "Version", valid_776685
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776686 = header.getOrDefault("X-Amz-Date")
  valid_776686 = validateParameter(valid_776686, JString, required = false,
                                 default = nil)
  if valid_776686 != nil:
    section.add "X-Amz-Date", valid_776686
  var valid_776687 = header.getOrDefault("X-Amz-Security-Token")
  valid_776687 = validateParameter(valid_776687, JString, required = false,
                                 default = nil)
  if valid_776687 != nil:
    section.add "X-Amz-Security-Token", valid_776687
  var valid_776688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776688 = validateParameter(valid_776688, JString, required = false,
                                 default = nil)
  if valid_776688 != nil:
    section.add "X-Amz-Content-Sha256", valid_776688
  var valid_776689 = header.getOrDefault("X-Amz-Algorithm")
  valid_776689 = validateParameter(valid_776689, JString, required = false,
                                 default = nil)
  if valid_776689 != nil:
    section.add "X-Amz-Algorithm", valid_776689
  var valid_776690 = header.getOrDefault("X-Amz-Signature")
  valid_776690 = validateParameter(valid_776690, JString, required = false,
                                 default = nil)
  if valid_776690 != nil:
    section.add "X-Amz-Signature", valid_776690
  var valid_776691 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776691 = validateParameter(valid_776691, JString, required = false,
                                 default = nil)
  if valid_776691 != nil:
    section.add "X-Amz-SignedHeaders", valid_776691
  var valid_776692 = header.getOrDefault("X-Amz-Credential")
  valid_776692 = validateParameter(valid_776692, JString, required = false,
                                 default = nil)
  if valid_776692 != nil:
    section.add "X-Amz-Credential", valid_776692
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  section = newJObject()
  var valid_776693 = formData.getOrDefault("UserName")
  valid_776693 = validateParameter(valid_776693, JString, required = false,
                                 default = nil)
  if valid_776693 != nil:
    section.add "UserName", valid_776693
  var valid_776694 = formData.getOrDefault("ServiceName")
  valid_776694 = validateParameter(valid_776694, JString, required = false,
                                 default = nil)
  if valid_776694 != nil:
    section.add "ServiceName", valid_776694
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776695: Call_PostListServiceSpecificCredentials_776681;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_776695.validator(path, query, header, formData, body)
  let scheme = call_776695.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776695.url(scheme.get, call_776695.host, call_776695.base,
                         call_776695.route, valid.getOrDefault("path"))
  result = hook(call_776695, url, valid)

proc call*(call_776696: Call_PostListServiceSpecificCredentials_776681;
          UserName: string = ""; Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"; ServiceName: string = ""): Recallable =
  ## postListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  var query_776697 = newJObject()
  var formData_776698 = newJObject()
  add(formData_776698, "UserName", newJString(UserName))
  add(query_776697, "Action", newJString(Action))
  add(query_776697, "Version", newJString(Version))
  add(formData_776698, "ServiceName", newJString(ServiceName))
  result = call_776696.call(nil, query_776697, nil, formData_776698, nil)

var postListServiceSpecificCredentials* = Call_PostListServiceSpecificCredentials_776681(
    name: "postListServiceSpecificCredentials", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_PostListServiceSpecificCredentials_776682, base: "/",
    url: url_PostListServiceSpecificCredentials_776683,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServiceSpecificCredentials_776664 = ref object of OpenApiRestCall_772597
proc url_GetListServiceSpecificCredentials_776666(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListServiceSpecificCredentials_776665(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_776667 = query.getOrDefault("ServiceName")
  valid_776667 = validateParameter(valid_776667, JString, required = false,
                                 default = nil)
  if valid_776667 != nil:
    section.add "ServiceName", valid_776667
  var valid_776668 = query.getOrDefault("UserName")
  valid_776668 = validateParameter(valid_776668, JString, required = false,
                                 default = nil)
  if valid_776668 != nil:
    section.add "UserName", valid_776668
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776669 = query.getOrDefault("Action")
  valid_776669 = validateParameter(valid_776669, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_776669 != nil:
    section.add "Action", valid_776669
  var valid_776670 = query.getOrDefault("Version")
  valid_776670 = validateParameter(valid_776670, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776670 != nil:
    section.add "Version", valid_776670
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776671 = header.getOrDefault("X-Amz-Date")
  valid_776671 = validateParameter(valid_776671, JString, required = false,
                                 default = nil)
  if valid_776671 != nil:
    section.add "X-Amz-Date", valid_776671
  var valid_776672 = header.getOrDefault("X-Amz-Security-Token")
  valid_776672 = validateParameter(valid_776672, JString, required = false,
                                 default = nil)
  if valid_776672 != nil:
    section.add "X-Amz-Security-Token", valid_776672
  var valid_776673 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776673 = validateParameter(valid_776673, JString, required = false,
                                 default = nil)
  if valid_776673 != nil:
    section.add "X-Amz-Content-Sha256", valid_776673
  var valid_776674 = header.getOrDefault("X-Amz-Algorithm")
  valid_776674 = validateParameter(valid_776674, JString, required = false,
                                 default = nil)
  if valid_776674 != nil:
    section.add "X-Amz-Algorithm", valid_776674
  var valid_776675 = header.getOrDefault("X-Amz-Signature")
  valid_776675 = validateParameter(valid_776675, JString, required = false,
                                 default = nil)
  if valid_776675 != nil:
    section.add "X-Amz-Signature", valid_776675
  var valid_776676 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776676 = validateParameter(valid_776676, JString, required = false,
                                 default = nil)
  if valid_776676 != nil:
    section.add "X-Amz-SignedHeaders", valid_776676
  var valid_776677 = header.getOrDefault("X-Amz-Credential")
  valid_776677 = validateParameter(valid_776677, JString, required = false,
                                 default = nil)
  if valid_776677 != nil:
    section.add "X-Amz-Credential", valid_776677
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776678: Call_GetListServiceSpecificCredentials_776664;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_776678.validator(path, query, header, formData, body)
  let scheme = call_776678.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776678.url(scheme.get, call_776678.host, call_776678.base,
                         call_776678.route, valid.getOrDefault("path"))
  result = hook(call_776678, url, valid)

proc call*(call_776679: Call_GetListServiceSpecificCredentials_776664;
          ServiceName: string = ""; UserName: string = "";
          Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"): Recallable =
  ## getListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776680 = newJObject()
  add(query_776680, "ServiceName", newJString(ServiceName))
  add(query_776680, "UserName", newJString(UserName))
  add(query_776680, "Action", newJString(Action))
  add(query_776680, "Version", newJString(Version))
  result = call_776679.call(nil, query_776680, nil, nil, nil)

var getListServiceSpecificCredentials* = Call_GetListServiceSpecificCredentials_776664(
    name: "getListServiceSpecificCredentials", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_GetListServiceSpecificCredentials_776665, base: "/",
    url: url_GetListServiceSpecificCredentials_776666,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSigningCertificates_776717 = ref object of OpenApiRestCall_772597
proc url_PostListSigningCertificates_776719(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListSigningCertificates_776718(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776720 = query.getOrDefault("Action")
  valid_776720 = validateParameter(valid_776720, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_776720 != nil:
    section.add "Action", valid_776720
  var valid_776721 = query.getOrDefault("Version")
  valid_776721 = validateParameter(valid_776721, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776721 != nil:
    section.add "Version", valid_776721
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776722 = header.getOrDefault("X-Amz-Date")
  valid_776722 = validateParameter(valid_776722, JString, required = false,
                                 default = nil)
  if valid_776722 != nil:
    section.add "X-Amz-Date", valid_776722
  var valid_776723 = header.getOrDefault("X-Amz-Security-Token")
  valid_776723 = validateParameter(valid_776723, JString, required = false,
                                 default = nil)
  if valid_776723 != nil:
    section.add "X-Amz-Security-Token", valid_776723
  var valid_776724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776724 = validateParameter(valid_776724, JString, required = false,
                                 default = nil)
  if valid_776724 != nil:
    section.add "X-Amz-Content-Sha256", valid_776724
  var valid_776725 = header.getOrDefault("X-Amz-Algorithm")
  valid_776725 = validateParameter(valid_776725, JString, required = false,
                                 default = nil)
  if valid_776725 != nil:
    section.add "X-Amz-Algorithm", valid_776725
  var valid_776726 = header.getOrDefault("X-Amz-Signature")
  valid_776726 = validateParameter(valid_776726, JString, required = false,
                                 default = nil)
  if valid_776726 != nil:
    section.add "X-Amz-Signature", valid_776726
  var valid_776727 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776727 = validateParameter(valid_776727, JString, required = false,
                                 default = nil)
  if valid_776727 != nil:
    section.add "X-Amz-SignedHeaders", valid_776727
  var valid_776728 = header.getOrDefault("X-Amz-Credential")
  valid_776728 = validateParameter(valid_776728, JString, required = false,
                                 default = nil)
  if valid_776728 != nil:
    section.add "X-Amz-Credential", valid_776728
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_776729 = formData.getOrDefault("UserName")
  valid_776729 = validateParameter(valid_776729, JString, required = false,
                                 default = nil)
  if valid_776729 != nil:
    section.add "UserName", valid_776729
  var valid_776730 = formData.getOrDefault("Marker")
  valid_776730 = validateParameter(valid_776730, JString, required = false,
                                 default = nil)
  if valid_776730 != nil:
    section.add "Marker", valid_776730
  var valid_776731 = formData.getOrDefault("MaxItems")
  valid_776731 = validateParameter(valid_776731, JInt, required = false, default = nil)
  if valid_776731 != nil:
    section.add "MaxItems", valid_776731
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776732: Call_PostListSigningCertificates_776717; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_776732.validator(path, query, header, formData, body)
  let scheme = call_776732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776732.url(scheme.get, call_776732.host, call_776732.base,
                         call_776732.route, valid.getOrDefault("path"))
  result = hook(call_776732, url, valid)

proc call*(call_776733: Call_PostListSigningCertificates_776717;
          UserName: string = ""; Marker: string = "";
          Action: string = "ListSigningCertificates"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776734 = newJObject()
  var formData_776735 = newJObject()
  add(formData_776735, "UserName", newJString(UserName))
  add(formData_776735, "Marker", newJString(Marker))
  add(query_776734, "Action", newJString(Action))
  add(formData_776735, "MaxItems", newJInt(MaxItems))
  add(query_776734, "Version", newJString(Version))
  result = call_776733.call(nil, query_776734, nil, formData_776735, nil)

var postListSigningCertificates* = Call_PostListSigningCertificates_776717(
    name: "postListSigningCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_PostListSigningCertificates_776718, base: "/",
    url: url_PostListSigningCertificates_776719,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSigningCertificates_776699 = ref object of OpenApiRestCall_772597
proc url_GetListSigningCertificates_776701(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListSigningCertificates_776700(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_776702 = query.getOrDefault("UserName")
  valid_776702 = validateParameter(valid_776702, JString, required = false,
                                 default = nil)
  if valid_776702 != nil:
    section.add "UserName", valid_776702
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776703 = query.getOrDefault("Action")
  valid_776703 = validateParameter(valid_776703, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_776703 != nil:
    section.add "Action", valid_776703
  var valid_776704 = query.getOrDefault("Marker")
  valid_776704 = validateParameter(valid_776704, JString, required = false,
                                 default = nil)
  if valid_776704 != nil:
    section.add "Marker", valid_776704
  var valid_776705 = query.getOrDefault("MaxItems")
  valid_776705 = validateParameter(valid_776705, JInt, required = false, default = nil)
  if valid_776705 != nil:
    section.add "MaxItems", valid_776705
  var valid_776706 = query.getOrDefault("Version")
  valid_776706 = validateParameter(valid_776706, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776706 != nil:
    section.add "Version", valid_776706
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776707 = header.getOrDefault("X-Amz-Date")
  valid_776707 = validateParameter(valid_776707, JString, required = false,
                                 default = nil)
  if valid_776707 != nil:
    section.add "X-Amz-Date", valid_776707
  var valid_776708 = header.getOrDefault("X-Amz-Security-Token")
  valid_776708 = validateParameter(valid_776708, JString, required = false,
                                 default = nil)
  if valid_776708 != nil:
    section.add "X-Amz-Security-Token", valid_776708
  var valid_776709 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776709 = validateParameter(valid_776709, JString, required = false,
                                 default = nil)
  if valid_776709 != nil:
    section.add "X-Amz-Content-Sha256", valid_776709
  var valid_776710 = header.getOrDefault("X-Amz-Algorithm")
  valid_776710 = validateParameter(valid_776710, JString, required = false,
                                 default = nil)
  if valid_776710 != nil:
    section.add "X-Amz-Algorithm", valid_776710
  var valid_776711 = header.getOrDefault("X-Amz-Signature")
  valid_776711 = validateParameter(valid_776711, JString, required = false,
                                 default = nil)
  if valid_776711 != nil:
    section.add "X-Amz-Signature", valid_776711
  var valid_776712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776712 = validateParameter(valid_776712, JString, required = false,
                                 default = nil)
  if valid_776712 != nil:
    section.add "X-Amz-SignedHeaders", valid_776712
  var valid_776713 = header.getOrDefault("X-Amz-Credential")
  valid_776713 = validateParameter(valid_776713, JString, required = false,
                                 default = nil)
  if valid_776713 != nil:
    section.add "X-Amz-Credential", valid_776713
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776714: Call_GetListSigningCertificates_776699; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_776714.validator(path, query, header, formData, body)
  let scheme = call_776714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776714.url(scheme.get, call_776714.host, call_776714.base,
                         call_776714.route, valid.getOrDefault("path"))
  result = hook(call_776714, url, valid)

proc call*(call_776715: Call_GetListSigningCertificates_776699;
          UserName: string = ""; Action: string = "ListSigningCertificates";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776716 = newJObject()
  add(query_776716, "UserName", newJString(UserName))
  add(query_776716, "Action", newJString(Action))
  add(query_776716, "Marker", newJString(Marker))
  add(query_776716, "MaxItems", newJInt(MaxItems))
  add(query_776716, "Version", newJString(Version))
  result = call_776715.call(nil, query_776716, nil, nil, nil)

var getListSigningCertificates* = Call_GetListSigningCertificates_776699(
    name: "getListSigningCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_GetListSigningCertificates_776700, base: "/",
    url: url_GetListSigningCertificates_776701,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserPolicies_776754 = ref object of OpenApiRestCall_772597
proc url_PostListUserPolicies_776756(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListUserPolicies_776755(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776757 = query.getOrDefault("Action")
  valid_776757 = validateParameter(valid_776757, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_776757 != nil:
    section.add "Action", valid_776757
  var valid_776758 = query.getOrDefault("Version")
  valid_776758 = validateParameter(valid_776758, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776758 != nil:
    section.add "Version", valid_776758
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776759 = header.getOrDefault("X-Amz-Date")
  valid_776759 = validateParameter(valid_776759, JString, required = false,
                                 default = nil)
  if valid_776759 != nil:
    section.add "X-Amz-Date", valid_776759
  var valid_776760 = header.getOrDefault("X-Amz-Security-Token")
  valid_776760 = validateParameter(valid_776760, JString, required = false,
                                 default = nil)
  if valid_776760 != nil:
    section.add "X-Amz-Security-Token", valid_776760
  var valid_776761 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776761 = validateParameter(valid_776761, JString, required = false,
                                 default = nil)
  if valid_776761 != nil:
    section.add "X-Amz-Content-Sha256", valid_776761
  var valid_776762 = header.getOrDefault("X-Amz-Algorithm")
  valid_776762 = validateParameter(valid_776762, JString, required = false,
                                 default = nil)
  if valid_776762 != nil:
    section.add "X-Amz-Algorithm", valid_776762
  var valid_776763 = header.getOrDefault("X-Amz-Signature")
  valid_776763 = validateParameter(valid_776763, JString, required = false,
                                 default = nil)
  if valid_776763 != nil:
    section.add "X-Amz-Signature", valid_776763
  var valid_776764 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776764 = validateParameter(valid_776764, JString, required = false,
                                 default = nil)
  if valid_776764 != nil:
    section.add "X-Amz-SignedHeaders", valid_776764
  var valid_776765 = header.getOrDefault("X-Amz-Credential")
  valid_776765 = validateParameter(valid_776765, JString, required = false,
                                 default = nil)
  if valid_776765 != nil:
    section.add "X-Amz-Credential", valid_776765
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_776766 = formData.getOrDefault("UserName")
  valid_776766 = validateParameter(valid_776766, JString, required = true,
                                 default = nil)
  if valid_776766 != nil:
    section.add "UserName", valid_776766
  var valid_776767 = formData.getOrDefault("Marker")
  valid_776767 = validateParameter(valid_776767, JString, required = false,
                                 default = nil)
  if valid_776767 != nil:
    section.add "Marker", valid_776767
  var valid_776768 = formData.getOrDefault("MaxItems")
  valid_776768 = validateParameter(valid_776768, JInt, required = false, default = nil)
  if valid_776768 != nil:
    section.add "MaxItems", valid_776768
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776769: Call_PostListUserPolicies_776754; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_776769.validator(path, query, header, formData, body)
  let scheme = call_776769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776769.url(scheme.get, call_776769.host, call_776769.base,
                         call_776769.route, valid.getOrDefault("path"))
  result = hook(call_776769, url, valid)

proc call*(call_776770: Call_PostListUserPolicies_776754; UserName: string;
          Marker: string = ""; Action: string = "ListUserPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776771 = newJObject()
  var formData_776772 = newJObject()
  add(formData_776772, "UserName", newJString(UserName))
  add(formData_776772, "Marker", newJString(Marker))
  add(query_776771, "Action", newJString(Action))
  add(formData_776772, "MaxItems", newJInt(MaxItems))
  add(query_776771, "Version", newJString(Version))
  result = call_776770.call(nil, query_776771, nil, formData_776772, nil)

var postListUserPolicies* = Call_PostListUserPolicies_776754(
    name: "postListUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_PostListUserPolicies_776755, base: "/",
    url: url_PostListUserPolicies_776756, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserPolicies_776736 = ref object of OpenApiRestCall_772597
proc url_GetListUserPolicies_776738(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListUserPolicies_776737(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_776739 = query.getOrDefault("UserName")
  valid_776739 = validateParameter(valid_776739, JString, required = true,
                                 default = nil)
  if valid_776739 != nil:
    section.add "UserName", valid_776739
  var valid_776740 = query.getOrDefault("Action")
  valid_776740 = validateParameter(valid_776740, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_776740 != nil:
    section.add "Action", valid_776740
  var valid_776741 = query.getOrDefault("Marker")
  valid_776741 = validateParameter(valid_776741, JString, required = false,
                                 default = nil)
  if valid_776741 != nil:
    section.add "Marker", valid_776741
  var valid_776742 = query.getOrDefault("MaxItems")
  valid_776742 = validateParameter(valid_776742, JInt, required = false, default = nil)
  if valid_776742 != nil:
    section.add "MaxItems", valid_776742
  var valid_776743 = query.getOrDefault("Version")
  valid_776743 = validateParameter(valid_776743, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776743 != nil:
    section.add "Version", valid_776743
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776744 = header.getOrDefault("X-Amz-Date")
  valid_776744 = validateParameter(valid_776744, JString, required = false,
                                 default = nil)
  if valid_776744 != nil:
    section.add "X-Amz-Date", valid_776744
  var valid_776745 = header.getOrDefault("X-Amz-Security-Token")
  valid_776745 = validateParameter(valid_776745, JString, required = false,
                                 default = nil)
  if valid_776745 != nil:
    section.add "X-Amz-Security-Token", valid_776745
  var valid_776746 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776746 = validateParameter(valid_776746, JString, required = false,
                                 default = nil)
  if valid_776746 != nil:
    section.add "X-Amz-Content-Sha256", valid_776746
  var valid_776747 = header.getOrDefault("X-Amz-Algorithm")
  valid_776747 = validateParameter(valid_776747, JString, required = false,
                                 default = nil)
  if valid_776747 != nil:
    section.add "X-Amz-Algorithm", valid_776747
  var valid_776748 = header.getOrDefault("X-Amz-Signature")
  valid_776748 = validateParameter(valid_776748, JString, required = false,
                                 default = nil)
  if valid_776748 != nil:
    section.add "X-Amz-Signature", valid_776748
  var valid_776749 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776749 = validateParameter(valid_776749, JString, required = false,
                                 default = nil)
  if valid_776749 != nil:
    section.add "X-Amz-SignedHeaders", valid_776749
  var valid_776750 = header.getOrDefault("X-Amz-Credential")
  valid_776750 = validateParameter(valid_776750, JString, required = false,
                                 default = nil)
  if valid_776750 != nil:
    section.add "X-Amz-Credential", valid_776750
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776751: Call_GetListUserPolicies_776736; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_776751.validator(path, query, header, formData, body)
  let scheme = call_776751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776751.url(scheme.get, call_776751.host, call_776751.base,
                         call_776751.route, valid.getOrDefault("path"))
  result = hook(call_776751, url, valid)

proc call*(call_776752: Call_GetListUserPolicies_776736; UserName: string;
          Action: string = "ListUserPolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776753 = newJObject()
  add(query_776753, "UserName", newJString(UserName))
  add(query_776753, "Action", newJString(Action))
  add(query_776753, "Marker", newJString(Marker))
  add(query_776753, "MaxItems", newJInt(MaxItems))
  add(query_776753, "Version", newJString(Version))
  result = call_776752.call(nil, query_776753, nil, nil, nil)

var getListUserPolicies* = Call_GetListUserPolicies_776736(
    name: "getListUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_GetListUserPolicies_776737, base: "/",
    url: url_GetListUserPolicies_776738, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserTags_776791 = ref object of OpenApiRestCall_772597
proc url_PostListUserTags_776793(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListUserTags_776792(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776794 = query.getOrDefault("Action")
  valid_776794 = validateParameter(valid_776794, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_776794 != nil:
    section.add "Action", valid_776794
  var valid_776795 = query.getOrDefault("Version")
  valid_776795 = validateParameter(valid_776795, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776795 != nil:
    section.add "Version", valid_776795
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776796 = header.getOrDefault("X-Amz-Date")
  valid_776796 = validateParameter(valid_776796, JString, required = false,
                                 default = nil)
  if valid_776796 != nil:
    section.add "X-Amz-Date", valid_776796
  var valid_776797 = header.getOrDefault("X-Amz-Security-Token")
  valid_776797 = validateParameter(valid_776797, JString, required = false,
                                 default = nil)
  if valid_776797 != nil:
    section.add "X-Amz-Security-Token", valid_776797
  var valid_776798 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776798 = validateParameter(valid_776798, JString, required = false,
                                 default = nil)
  if valid_776798 != nil:
    section.add "X-Amz-Content-Sha256", valid_776798
  var valid_776799 = header.getOrDefault("X-Amz-Algorithm")
  valid_776799 = validateParameter(valid_776799, JString, required = false,
                                 default = nil)
  if valid_776799 != nil:
    section.add "X-Amz-Algorithm", valid_776799
  var valid_776800 = header.getOrDefault("X-Amz-Signature")
  valid_776800 = validateParameter(valid_776800, JString, required = false,
                                 default = nil)
  if valid_776800 != nil:
    section.add "X-Amz-Signature", valid_776800
  var valid_776801 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776801 = validateParameter(valid_776801, JString, required = false,
                                 default = nil)
  if valid_776801 != nil:
    section.add "X-Amz-SignedHeaders", valid_776801
  var valid_776802 = header.getOrDefault("X-Amz-Credential")
  valid_776802 = validateParameter(valid_776802, JString, required = false,
                                 default = nil)
  if valid_776802 != nil:
    section.add "X-Amz-Credential", valid_776802
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_776803 = formData.getOrDefault("UserName")
  valid_776803 = validateParameter(valid_776803, JString, required = true,
                                 default = nil)
  if valid_776803 != nil:
    section.add "UserName", valid_776803
  var valid_776804 = formData.getOrDefault("Marker")
  valid_776804 = validateParameter(valid_776804, JString, required = false,
                                 default = nil)
  if valid_776804 != nil:
    section.add "Marker", valid_776804
  var valid_776805 = formData.getOrDefault("MaxItems")
  valid_776805 = validateParameter(valid_776805, JInt, required = false, default = nil)
  if valid_776805 != nil:
    section.add "MaxItems", valid_776805
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776806: Call_PostListUserTags_776791; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_776806.validator(path, query, header, formData, body)
  let scheme = call_776806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776806.url(scheme.get, call_776806.host, call_776806.base,
                         call_776806.route, valid.getOrDefault("path"))
  result = hook(call_776806, url, valid)

proc call*(call_776807: Call_PostListUserTags_776791; UserName: string;
          Marker: string = ""; Action: string = "ListUserTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776808 = newJObject()
  var formData_776809 = newJObject()
  add(formData_776809, "UserName", newJString(UserName))
  add(formData_776809, "Marker", newJString(Marker))
  add(query_776808, "Action", newJString(Action))
  add(formData_776809, "MaxItems", newJInt(MaxItems))
  add(query_776808, "Version", newJString(Version))
  result = call_776807.call(nil, query_776808, nil, formData_776809, nil)

var postListUserTags* = Call_PostListUserTags_776791(name: "postListUserTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_PostListUserTags_776792,
    base: "/", url: url_PostListUserTags_776793,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserTags_776773 = ref object of OpenApiRestCall_772597
proc url_GetListUserTags_776775(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListUserTags_776774(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_776776 = query.getOrDefault("UserName")
  valid_776776 = validateParameter(valid_776776, JString, required = true,
                                 default = nil)
  if valid_776776 != nil:
    section.add "UserName", valid_776776
  var valid_776777 = query.getOrDefault("Action")
  valid_776777 = validateParameter(valid_776777, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_776777 != nil:
    section.add "Action", valid_776777
  var valid_776778 = query.getOrDefault("Marker")
  valid_776778 = validateParameter(valid_776778, JString, required = false,
                                 default = nil)
  if valid_776778 != nil:
    section.add "Marker", valid_776778
  var valid_776779 = query.getOrDefault("MaxItems")
  valid_776779 = validateParameter(valid_776779, JInt, required = false, default = nil)
  if valid_776779 != nil:
    section.add "MaxItems", valid_776779
  var valid_776780 = query.getOrDefault("Version")
  valid_776780 = validateParameter(valid_776780, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776780 != nil:
    section.add "Version", valid_776780
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776781 = header.getOrDefault("X-Amz-Date")
  valid_776781 = validateParameter(valid_776781, JString, required = false,
                                 default = nil)
  if valid_776781 != nil:
    section.add "X-Amz-Date", valid_776781
  var valid_776782 = header.getOrDefault("X-Amz-Security-Token")
  valid_776782 = validateParameter(valid_776782, JString, required = false,
                                 default = nil)
  if valid_776782 != nil:
    section.add "X-Amz-Security-Token", valid_776782
  var valid_776783 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776783 = validateParameter(valid_776783, JString, required = false,
                                 default = nil)
  if valid_776783 != nil:
    section.add "X-Amz-Content-Sha256", valid_776783
  var valid_776784 = header.getOrDefault("X-Amz-Algorithm")
  valid_776784 = validateParameter(valid_776784, JString, required = false,
                                 default = nil)
  if valid_776784 != nil:
    section.add "X-Amz-Algorithm", valid_776784
  var valid_776785 = header.getOrDefault("X-Amz-Signature")
  valid_776785 = validateParameter(valid_776785, JString, required = false,
                                 default = nil)
  if valid_776785 != nil:
    section.add "X-Amz-Signature", valid_776785
  var valid_776786 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776786 = validateParameter(valid_776786, JString, required = false,
                                 default = nil)
  if valid_776786 != nil:
    section.add "X-Amz-SignedHeaders", valid_776786
  var valid_776787 = header.getOrDefault("X-Amz-Credential")
  valid_776787 = validateParameter(valid_776787, JString, required = false,
                                 default = nil)
  if valid_776787 != nil:
    section.add "X-Amz-Credential", valid_776787
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776788: Call_GetListUserTags_776773; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_776788.validator(path, query, header, formData, body)
  let scheme = call_776788.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776788.url(scheme.get, call_776788.host, call_776788.base,
                         call_776788.route, valid.getOrDefault("path"))
  result = hook(call_776788, url, valid)

proc call*(call_776789: Call_GetListUserTags_776773; UserName: string;
          Action: string = "ListUserTags"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776790 = newJObject()
  add(query_776790, "UserName", newJString(UserName))
  add(query_776790, "Action", newJString(Action))
  add(query_776790, "Marker", newJString(Marker))
  add(query_776790, "MaxItems", newJInt(MaxItems))
  add(query_776790, "Version", newJString(Version))
  result = call_776789.call(nil, query_776790, nil, nil, nil)

var getListUserTags* = Call_GetListUserTags_776773(name: "getListUserTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_GetListUserTags_776774,
    base: "/", url: url_GetListUserTags_776775, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUsers_776828 = ref object of OpenApiRestCall_772597
proc url_PostListUsers_776830(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListUsers_776829(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776831 = query.getOrDefault("Action")
  valid_776831 = validateParameter(valid_776831, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_776831 != nil:
    section.add "Action", valid_776831
  var valid_776832 = query.getOrDefault("Version")
  valid_776832 = validateParameter(valid_776832, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776832 != nil:
    section.add "Version", valid_776832
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776833 = header.getOrDefault("X-Amz-Date")
  valid_776833 = validateParameter(valid_776833, JString, required = false,
                                 default = nil)
  if valid_776833 != nil:
    section.add "X-Amz-Date", valid_776833
  var valid_776834 = header.getOrDefault("X-Amz-Security-Token")
  valid_776834 = validateParameter(valid_776834, JString, required = false,
                                 default = nil)
  if valid_776834 != nil:
    section.add "X-Amz-Security-Token", valid_776834
  var valid_776835 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776835 = validateParameter(valid_776835, JString, required = false,
                                 default = nil)
  if valid_776835 != nil:
    section.add "X-Amz-Content-Sha256", valid_776835
  var valid_776836 = header.getOrDefault("X-Amz-Algorithm")
  valid_776836 = validateParameter(valid_776836, JString, required = false,
                                 default = nil)
  if valid_776836 != nil:
    section.add "X-Amz-Algorithm", valid_776836
  var valid_776837 = header.getOrDefault("X-Amz-Signature")
  valid_776837 = validateParameter(valid_776837, JString, required = false,
                                 default = nil)
  if valid_776837 != nil:
    section.add "X-Amz-Signature", valid_776837
  var valid_776838 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776838 = validateParameter(valid_776838, JString, required = false,
                                 default = nil)
  if valid_776838 != nil:
    section.add "X-Amz-SignedHeaders", valid_776838
  var valid_776839 = header.getOrDefault("X-Amz-Credential")
  valid_776839 = validateParameter(valid_776839, JString, required = false,
                                 default = nil)
  if valid_776839 != nil:
    section.add "X-Amz-Credential", valid_776839
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_776840 = formData.getOrDefault("PathPrefix")
  valid_776840 = validateParameter(valid_776840, JString, required = false,
                                 default = nil)
  if valid_776840 != nil:
    section.add "PathPrefix", valid_776840
  var valid_776841 = formData.getOrDefault("Marker")
  valid_776841 = validateParameter(valid_776841, JString, required = false,
                                 default = nil)
  if valid_776841 != nil:
    section.add "Marker", valid_776841
  var valid_776842 = formData.getOrDefault("MaxItems")
  valid_776842 = validateParameter(valid_776842, JInt, required = false, default = nil)
  if valid_776842 != nil:
    section.add "MaxItems", valid_776842
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776843: Call_PostListUsers_776828; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776843.validator(path, query, header, formData, body)
  let scheme = call_776843.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776843.url(scheme.get, call_776843.host, call_776843.base,
                         call_776843.route, valid.getOrDefault("path"))
  result = hook(call_776843, url, valid)

proc call*(call_776844: Call_PostListUsers_776828; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListUsers"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776845 = newJObject()
  var formData_776846 = newJObject()
  add(formData_776846, "PathPrefix", newJString(PathPrefix))
  add(formData_776846, "Marker", newJString(Marker))
  add(query_776845, "Action", newJString(Action))
  add(formData_776846, "MaxItems", newJInt(MaxItems))
  add(query_776845, "Version", newJString(Version))
  result = call_776844.call(nil, query_776845, nil, formData_776846, nil)

var postListUsers* = Call_PostListUsers_776828(name: "postListUsers",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_PostListUsers_776829,
    base: "/", url: url_PostListUsers_776830, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUsers_776810 = ref object of OpenApiRestCall_772597
proc url_GetListUsers_776812(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListUsers_776811(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_776813 = query.getOrDefault("PathPrefix")
  valid_776813 = validateParameter(valid_776813, JString, required = false,
                                 default = nil)
  if valid_776813 != nil:
    section.add "PathPrefix", valid_776813
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776814 = query.getOrDefault("Action")
  valid_776814 = validateParameter(valid_776814, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_776814 != nil:
    section.add "Action", valid_776814
  var valid_776815 = query.getOrDefault("Marker")
  valid_776815 = validateParameter(valid_776815, JString, required = false,
                                 default = nil)
  if valid_776815 != nil:
    section.add "Marker", valid_776815
  var valid_776816 = query.getOrDefault("MaxItems")
  valid_776816 = validateParameter(valid_776816, JInt, required = false, default = nil)
  if valid_776816 != nil:
    section.add "MaxItems", valid_776816
  var valid_776817 = query.getOrDefault("Version")
  valid_776817 = validateParameter(valid_776817, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776817 != nil:
    section.add "Version", valid_776817
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776818 = header.getOrDefault("X-Amz-Date")
  valid_776818 = validateParameter(valid_776818, JString, required = false,
                                 default = nil)
  if valid_776818 != nil:
    section.add "X-Amz-Date", valid_776818
  var valid_776819 = header.getOrDefault("X-Amz-Security-Token")
  valid_776819 = validateParameter(valid_776819, JString, required = false,
                                 default = nil)
  if valid_776819 != nil:
    section.add "X-Amz-Security-Token", valid_776819
  var valid_776820 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776820 = validateParameter(valid_776820, JString, required = false,
                                 default = nil)
  if valid_776820 != nil:
    section.add "X-Amz-Content-Sha256", valid_776820
  var valid_776821 = header.getOrDefault("X-Amz-Algorithm")
  valid_776821 = validateParameter(valid_776821, JString, required = false,
                                 default = nil)
  if valid_776821 != nil:
    section.add "X-Amz-Algorithm", valid_776821
  var valid_776822 = header.getOrDefault("X-Amz-Signature")
  valid_776822 = validateParameter(valid_776822, JString, required = false,
                                 default = nil)
  if valid_776822 != nil:
    section.add "X-Amz-Signature", valid_776822
  var valid_776823 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776823 = validateParameter(valid_776823, JString, required = false,
                                 default = nil)
  if valid_776823 != nil:
    section.add "X-Amz-SignedHeaders", valid_776823
  var valid_776824 = header.getOrDefault("X-Amz-Credential")
  valid_776824 = validateParameter(valid_776824, JString, required = false,
                                 default = nil)
  if valid_776824 != nil:
    section.add "X-Amz-Credential", valid_776824
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776825: Call_GetListUsers_776810; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776825.validator(path, query, header, formData, body)
  let scheme = call_776825.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776825.url(scheme.get, call_776825.host, call_776825.base,
                         call_776825.route, valid.getOrDefault("path"))
  result = hook(call_776825, url, valid)

proc call*(call_776826: Call_GetListUsers_776810; PathPrefix: string = "";
          Action: string = "ListUsers"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776827 = newJObject()
  add(query_776827, "PathPrefix", newJString(PathPrefix))
  add(query_776827, "Action", newJString(Action))
  add(query_776827, "Marker", newJString(Marker))
  add(query_776827, "MaxItems", newJInt(MaxItems))
  add(query_776827, "Version", newJString(Version))
  result = call_776826.call(nil, query_776827, nil, nil, nil)

var getListUsers* = Call_GetListUsers_776810(name: "getListUsers",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_GetListUsers_776811, base: "/",
    url: url_GetListUsers_776812, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVirtualMFADevices_776865 = ref object of OpenApiRestCall_772597
proc url_PostListVirtualMFADevices_776867(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListVirtualMFADevices_776866(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776868 = query.getOrDefault("Action")
  valid_776868 = validateParameter(valid_776868, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_776868 != nil:
    section.add "Action", valid_776868
  var valid_776869 = query.getOrDefault("Version")
  valid_776869 = validateParameter(valid_776869, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776869 != nil:
    section.add "Version", valid_776869
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776870 = header.getOrDefault("X-Amz-Date")
  valid_776870 = validateParameter(valid_776870, JString, required = false,
                                 default = nil)
  if valid_776870 != nil:
    section.add "X-Amz-Date", valid_776870
  var valid_776871 = header.getOrDefault("X-Amz-Security-Token")
  valid_776871 = validateParameter(valid_776871, JString, required = false,
                                 default = nil)
  if valid_776871 != nil:
    section.add "X-Amz-Security-Token", valid_776871
  var valid_776872 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776872 = validateParameter(valid_776872, JString, required = false,
                                 default = nil)
  if valid_776872 != nil:
    section.add "X-Amz-Content-Sha256", valid_776872
  var valid_776873 = header.getOrDefault("X-Amz-Algorithm")
  valid_776873 = validateParameter(valid_776873, JString, required = false,
                                 default = nil)
  if valid_776873 != nil:
    section.add "X-Amz-Algorithm", valid_776873
  var valid_776874 = header.getOrDefault("X-Amz-Signature")
  valid_776874 = validateParameter(valid_776874, JString, required = false,
                                 default = nil)
  if valid_776874 != nil:
    section.add "X-Amz-Signature", valid_776874
  var valid_776875 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776875 = validateParameter(valid_776875, JString, required = false,
                                 default = nil)
  if valid_776875 != nil:
    section.add "X-Amz-SignedHeaders", valid_776875
  var valid_776876 = header.getOrDefault("X-Amz-Credential")
  valid_776876 = validateParameter(valid_776876, JString, required = false,
                                 default = nil)
  if valid_776876 != nil:
    section.add "X-Amz-Credential", valid_776876
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_776877 = formData.getOrDefault("Marker")
  valid_776877 = validateParameter(valid_776877, JString, required = false,
                                 default = nil)
  if valid_776877 != nil:
    section.add "Marker", valid_776877
  var valid_776878 = formData.getOrDefault("AssignmentStatus")
  valid_776878 = validateParameter(valid_776878, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_776878 != nil:
    section.add "AssignmentStatus", valid_776878
  var valid_776879 = formData.getOrDefault("MaxItems")
  valid_776879 = validateParameter(valid_776879, JInt, required = false, default = nil)
  if valid_776879 != nil:
    section.add "MaxItems", valid_776879
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776880: Call_PostListVirtualMFADevices_776865; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776880.validator(path, query, header, formData, body)
  let scheme = call_776880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776880.url(scheme.get, call_776880.host, call_776880.base,
                         call_776880.route, valid.getOrDefault("path"))
  result = hook(call_776880, url, valid)

proc call*(call_776881: Call_PostListVirtualMFADevices_776865; Marker: string = "";
          Action: string = "ListVirtualMFADevices";
          AssignmentStatus: string = "Assigned"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_776882 = newJObject()
  var formData_776883 = newJObject()
  add(formData_776883, "Marker", newJString(Marker))
  add(query_776882, "Action", newJString(Action))
  add(formData_776883, "AssignmentStatus", newJString(AssignmentStatus))
  add(formData_776883, "MaxItems", newJInt(MaxItems))
  add(query_776882, "Version", newJString(Version))
  result = call_776881.call(nil, query_776882, nil, formData_776883, nil)

var postListVirtualMFADevices* = Call_PostListVirtualMFADevices_776865(
    name: "postListVirtualMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_PostListVirtualMFADevices_776866, base: "/",
    url: url_PostListVirtualMFADevices_776867,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVirtualMFADevices_776847 = ref object of OpenApiRestCall_772597
proc url_GetListVirtualMFADevices_776849(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListVirtualMFADevices_776848(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776850 = query.getOrDefault("Action")
  valid_776850 = validateParameter(valid_776850, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_776850 != nil:
    section.add "Action", valid_776850
  var valid_776851 = query.getOrDefault("Marker")
  valid_776851 = validateParameter(valid_776851, JString, required = false,
                                 default = nil)
  if valid_776851 != nil:
    section.add "Marker", valid_776851
  var valid_776852 = query.getOrDefault("MaxItems")
  valid_776852 = validateParameter(valid_776852, JInt, required = false, default = nil)
  if valid_776852 != nil:
    section.add "MaxItems", valid_776852
  var valid_776853 = query.getOrDefault("Version")
  valid_776853 = validateParameter(valid_776853, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776853 != nil:
    section.add "Version", valid_776853
  var valid_776854 = query.getOrDefault("AssignmentStatus")
  valid_776854 = validateParameter(valid_776854, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_776854 != nil:
    section.add "AssignmentStatus", valid_776854
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776855 = header.getOrDefault("X-Amz-Date")
  valid_776855 = validateParameter(valid_776855, JString, required = false,
                                 default = nil)
  if valid_776855 != nil:
    section.add "X-Amz-Date", valid_776855
  var valid_776856 = header.getOrDefault("X-Amz-Security-Token")
  valid_776856 = validateParameter(valid_776856, JString, required = false,
                                 default = nil)
  if valid_776856 != nil:
    section.add "X-Amz-Security-Token", valid_776856
  var valid_776857 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776857 = validateParameter(valid_776857, JString, required = false,
                                 default = nil)
  if valid_776857 != nil:
    section.add "X-Amz-Content-Sha256", valid_776857
  var valid_776858 = header.getOrDefault("X-Amz-Algorithm")
  valid_776858 = validateParameter(valid_776858, JString, required = false,
                                 default = nil)
  if valid_776858 != nil:
    section.add "X-Amz-Algorithm", valid_776858
  var valid_776859 = header.getOrDefault("X-Amz-Signature")
  valid_776859 = validateParameter(valid_776859, JString, required = false,
                                 default = nil)
  if valid_776859 != nil:
    section.add "X-Amz-Signature", valid_776859
  var valid_776860 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776860 = validateParameter(valid_776860, JString, required = false,
                                 default = nil)
  if valid_776860 != nil:
    section.add "X-Amz-SignedHeaders", valid_776860
  var valid_776861 = header.getOrDefault("X-Amz-Credential")
  valid_776861 = validateParameter(valid_776861, JString, required = false,
                                 default = nil)
  if valid_776861 != nil:
    section.add "X-Amz-Credential", valid_776861
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776862: Call_GetListVirtualMFADevices_776847; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_776862.validator(path, query, header, formData, body)
  let scheme = call_776862.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776862.url(scheme.get, call_776862.host, call_776862.base,
                         call_776862.route, valid.getOrDefault("path"))
  result = hook(call_776862, url, valid)

proc call*(call_776863: Call_GetListVirtualMFADevices_776847;
          Action: string = "ListVirtualMFADevices"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08";
          AssignmentStatus: string = "Assigned"): Recallable =
  ## getListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  var query_776864 = newJObject()
  add(query_776864, "Action", newJString(Action))
  add(query_776864, "Marker", newJString(Marker))
  add(query_776864, "MaxItems", newJInt(MaxItems))
  add(query_776864, "Version", newJString(Version))
  add(query_776864, "AssignmentStatus", newJString(AssignmentStatus))
  result = call_776863.call(nil, query_776864, nil, nil, nil)

var getListVirtualMFADevices* = Call_GetListVirtualMFADevices_776847(
    name: "getListVirtualMFADevices", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_GetListVirtualMFADevices_776848, base: "/",
    url: url_GetListVirtualMFADevices_776849, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutGroupPolicy_776902 = ref object of OpenApiRestCall_772597
proc url_PostPutGroupPolicy_776904(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutGroupPolicy_776903(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776905 = query.getOrDefault("Action")
  valid_776905 = validateParameter(valid_776905, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_776905 != nil:
    section.add "Action", valid_776905
  var valid_776906 = query.getOrDefault("Version")
  valid_776906 = validateParameter(valid_776906, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776906 != nil:
    section.add "Version", valid_776906
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776907 = header.getOrDefault("X-Amz-Date")
  valid_776907 = validateParameter(valid_776907, JString, required = false,
                                 default = nil)
  if valid_776907 != nil:
    section.add "X-Amz-Date", valid_776907
  var valid_776908 = header.getOrDefault("X-Amz-Security-Token")
  valid_776908 = validateParameter(valid_776908, JString, required = false,
                                 default = nil)
  if valid_776908 != nil:
    section.add "X-Amz-Security-Token", valid_776908
  var valid_776909 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776909 = validateParameter(valid_776909, JString, required = false,
                                 default = nil)
  if valid_776909 != nil:
    section.add "X-Amz-Content-Sha256", valid_776909
  var valid_776910 = header.getOrDefault("X-Amz-Algorithm")
  valid_776910 = validateParameter(valid_776910, JString, required = false,
                                 default = nil)
  if valid_776910 != nil:
    section.add "X-Amz-Algorithm", valid_776910
  var valid_776911 = header.getOrDefault("X-Amz-Signature")
  valid_776911 = validateParameter(valid_776911, JString, required = false,
                                 default = nil)
  if valid_776911 != nil:
    section.add "X-Amz-Signature", valid_776911
  var valid_776912 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776912 = validateParameter(valid_776912, JString, required = false,
                                 default = nil)
  if valid_776912 != nil:
    section.add "X-Amz-SignedHeaders", valid_776912
  var valid_776913 = header.getOrDefault("X-Amz-Credential")
  valid_776913 = validateParameter(valid_776913, JString, required = false,
                                 default = nil)
  if valid_776913 != nil:
    section.add "X-Amz-Credential", valid_776913
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_776914 = formData.getOrDefault("PolicyName")
  valid_776914 = validateParameter(valid_776914, JString, required = true,
                                 default = nil)
  if valid_776914 != nil:
    section.add "PolicyName", valid_776914
  var valid_776915 = formData.getOrDefault("GroupName")
  valid_776915 = validateParameter(valid_776915, JString, required = true,
                                 default = nil)
  if valid_776915 != nil:
    section.add "GroupName", valid_776915
  var valid_776916 = formData.getOrDefault("PolicyDocument")
  valid_776916 = validateParameter(valid_776916, JString, required = true,
                                 default = nil)
  if valid_776916 != nil:
    section.add "PolicyDocument", valid_776916
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776917: Call_PostPutGroupPolicy_776902; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_776917.validator(path, query, header, formData, body)
  let scheme = call_776917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776917.url(scheme.get, call_776917.host, call_776917.base,
                         call_776917.route, valid.getOrDefault("path"))
  result = hook(call_776917, url, valid)

proc call*(call_776918: Call_PostPutGroupPolicy_776902; PolicyName: string;
          GroupName: string; PolicyDocument: string;
          Action: string = "PutGroupPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776919 = newJObject()
  var formData_776920 = newJObject()
  add(formData_776920, "PolicyName", newJString(PolicyName))
  add(formData_776920, "GroupName", newJString(GroupName))
  add(formData_776920, "PolicyDocument", newJString(PolicyDocument))
  add(query_776919, "Action", newJString(Action))
  add(query_776919, "Version", newJString(Version))
  result = call_776918.call(nil, query_776919, nil, formData_776920, nil)

var postPutGroupPolicy* = Call_PostPutGroupPolicy_776902(
    name: "postPutGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutGroupPolicy",
    validator: validate_PostPutGroupPolicy_776903, base: "/",
    url: url_PostPutGroupPolicy_776904, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutGroupPolicy_776884 = ref object of OpenApiRestCall_772597
proc url_GetPutGroupPolicy_776886(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutGroupPolicy_776885(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776887 = query.getOrDefault("Action")
  valid_776887 = validateParameter(valid_776887, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_776887 != nil:
    section.add "Action", valid_776887
  var valid_776888 = query.getOrDefault("PolicyDocument")
  valid_776888 = validateParameter(valid_776888, JString, required = true,
                                 default = nil)
  if valid_776888 != nil:
    section.add "PolicyDocument", valid_776888
  var valid_776889 = query.getOrDefault("GroupName")
  valid_776889 = validateParameter(valid_776889, JString, required = true,
                                 default = nil)
  if valid_776889 != nil:
    section.add "GroupName", valid_776889
  var valid_776890 = query.getOrDefault("Version")
  valid_776890 = validateParameter(valid_776890, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776890 != nil:
    section.add "Version", valid_776890
  var valid_776891 = query.getOrDefault("PolicyName")
  valid_776891 = validateParameter(valid_776891, JString, required = true,
                                 default = nil)
  if valid_776891 != nil:
    section.add "PolicyName", valid_776891
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776892 = header.getOrDefault("X-Amz-Date")
  valid_776892 = validateParameter(valid_776892, JString, required = false,
                                 default = nil)
  if valid_776892 != nil:
    section.add "X-Amz-Date", valid_776892
  var valid_776893 = header.getOrDefault("X-Amz-Security-Token")
  valid_776893 = validateParameter(valid_776893, JString, required = false,
                                 default = nil)
  if valid_776893 != nil:
    section.add "X-Amz-Security-Token", valid_776893
  var valid_776894 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776894 = validateParameter(valid_776894, JString, required = false,
                                 default = nil)
  if valid_776894 != nil:
    section.add "X-Amz-Content-Sha256", valid_776894
  var valid_776895 = header.getOrDefault("X-Amz-Algorithm")
  valid_776895 = validateParameter(valid_776895, JString, required = false,
                                 default = nil)
  if valid_776895 != nil:
    section.add "X-Amz-Algorithm", valid_776895
  var valid_776896 = header.getOrDefault("X-Amz-Signature")
  valid_776896 = validateParameter(valid_776896, JString, required = false,
                                 default = nil)
  if valid_776896 != nil:
    section.add "X-Amz-Signature", valid_776896
  var valid_776897 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776897 = validateParameter(valid_776897, JString, required = false,
                                 default = nil)
  if valid_776897 != nil:
    section.add "X-Amz-SignedHeaders", valid_776897
  var valid_776898 = header.getOrDefault("X-Amz-Credential")
  valid_776898 = validateParameter(valid_776898, JString, required = false,
                                 default = nil)
  if valid_776898 != nil:
    section.add "X-Amz-Credential", valid_776898
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776899: Call_GetPutGroupPolicy_776884; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_776899.validator(path, query, header, formData, body)
  let scheme = call_776899.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776899.url(scheme.get, call_776899.host, call_776899.base,
                         call_776899.route, valid.getOrDefault("path"))
  result = hook(call_776899, url, valid)

proc call*(call_776900: Call_GetPutGroupPolicy_776884; PolicyDocument: string;
          GroupName: string; PolicyName: string; Action: string = "PutGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_776901 = newJObject()
  add(query_776901, "Action", newJString(Action))
  add(query_776901, "PolicyDocument", newJString(PolicyDocument))
  add(query_776901, "GroupName", newJString(GroupName))
  add(query_776901, "Version", newJString(Version))
  add(query_776901, "PolicyName", newJString(PolicyName))
  result = call_776900.call(nil, query_776901, nil, nil, nil)

var getPutGroupPolicy* = Call_GetPutGroupPolicy_776884(name: "getPutGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutGroupPolicy", validator: validate_GetPutGroupPolicy_776885,
    base: "/", url: url_GetPutGroupPolicy_776886,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePermissionsBoundary_776938 = ref object of OpenApiRestCall_772597
proc url_PostPutRolePermissionsBoundary_776940(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutRolePermissionsBoundary_776939(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776941 = query.getOrDefault("Action")
  valid_776941 = validateParameter(valid_776941, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_776941 != nil:
    section.add "Action", valid_776941
  var valid_776942 = query.getOrDefault("Version")
  valid_776942 = validateParameter(valid_776942, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776942 != nil:
    section.add "Version", valid_776942
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776943 = header.getOrDefault("X-Amz-Date")
  valid_776943 = validateParameter(valid_776943, JString, required = false,
                                 default = nil)
  if valid_776943 != nil:
    section.add "X-Amz-Date", valid_776943
  var valid_776944 = header.getOrDefault("X-Amz-Security-Token")
  valid_776944 = validateParameter(valid_776944, JString, required = false,
                                 default = nil)
  if valid_776944 != nil:
    section.add "X-Amz-Security-Token", valid_776944
  var valid_776945 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776945 = validateParameter(valid_776945, JString, required = false,
                                 default = nil)
  if valid_776945 != nil:
    section.add "X-Amz-Content-Sha256", valid_776945
  var valid_776946 = header.getOrDefault("X-Amz-Algorithm")
  valid_776946 = validateParameter(valid_776946, JString, required = false,
                                 default = nil)
  if valid_776946 != nil:
    section.add "X-Amz-Algorithm", valid_776946
  var valid_776947 = header.getOrDefault("X-Amz-Signature")
  valid_776947 = validateParameter(valid_776947, JString, required = false,
                                 default = nil)
  if valid_776947 != nil:
    section.add "X-Amz-Signature", valid_776947
  var valid_776948 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776948 = validateParameter(valid_776948, JString, required = false,
                                 default = nil)
  if valid_776948 != nil:
    section.add "X-Amz-SignedHeaders", valid_776948
  var valid_776949 = header.getOrDefault("X-Amz-Credential")
  valid_776949 = validateParameter(valid_776949, JString, required = false,
                                 default = nil)
  if valid_776949 != nil:
    section.add "X-Amz-Credential", valid_776949
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_776950 = formData.getOrDefault("RoleName")
  valid_776950 = validateParameter(valid_776950, JString, required = true,
                                 default = nil)
  if valid_776950 != nil:
    section.add "RoleName", valid_776950
  var valid_776951 = formData.getOrDefault("PermissionsBoundary")
  valid_776951 = validateParameter(valid_776951, JString, required = true,
                                 default = nil)
  if valid_776951 != nil:
    section.add "PermissionsBoundary", valid_776951
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776952: Call_PostPutRolePermissionsBoundary_776938; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_776952.validator(path, query, header, formData, body)
  let scheme = call_776952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776952.url(scheme.get, call_776952.host, call_776952.base,
                         call_776952.route, valid.getOrDefault("path"))
  result = hook(call_776952, url, valid)

proc call*(call_776953: Call_PostPutRolePermissionsBoundary_776938;
          RoleName: string; PermissionsBoundary: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776954 = newJObject()
  var formData_776955 = newJObject()
  add(formData_776955, "RoleName", newJString(RoleName))
  add(formData_776955, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_776954, "Action", newJString(Action))
  add(query_776954, "Version", newJString(Version))
  result = call_776953.call(nil, query_776954, nil, formData_776955, nil)

var postPutRolePermissionsBoundary* = Call_PostPutRolePermissionsBoundary_776938(
    name: "postPutRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_PostPutRolePermissionsBoundary_776939, base: "/",
    url: url_PostPutRolePermissionsBoundary_776940,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePermissionsBoundary_776921 = ref object of OpenApiRestCall_772597
proc url_GetPutRolePermissionsBoundary_776923(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutRolePermissionsBoundary_776922(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776924 = query.getOrDefault("Action")
  valid_776924 = validateParameter(valid_776924, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_776924 != nil:
    section.add "Action", valid_776924
  var valid_776925 = query.getOrDefault("PermissionsBoundary")
  valid_776925 = validateParameter(valid_776925, JString, required = true,
                                 default = nil)
  if valid_776925 != nil:
    section.add "PermissionsBoundary", valid_776925
  var valid_776926 = query.getOrDefault("RoleName")
  valid_776926 = validateParameter(valid_776926, JString, required = true,
                                 default = nil)
  if valid_776926 != nil:
    section.add "RoleName", valid_776926
  var valid_776927 = query.getOrDefault("Version")
  valid_776927 = validateParameter(valid_776927, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776927 != nil:
    section.add "Version", valid_776927
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776928 = header.getOrDefault("X-Amz-Date")
  valid_776928 = validateParameter(valid_776928, JString, required = false,
                                 default = nil)
  if valid_776928 != nil:
    section.add "X-Amz-Date", valid_776928
  var valid_776929 = header.getOrDefault("X-Amz-Security-Token")
  valid_776929 = validateParameter(valid_776929, JString, required = false,
                                 default = nil)
  if valid_776929 != nil:
    section.add "X-Amz-Security-Token", valid_776929
  var valid_776930 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776930 = validateParameter(valid_776930, JString, required = false,
                                 default = nil)
  if valid_776930 != nil:
    section.add "X-Amz-Content-Sha256", valid_776930
  var valid_776931 = header.getOrDefault("X-Amz-Algorithm")
  valid_776931 = validateParameter(valid_776931, JString, required = false,
                                 default = nil)
  if valid_776931 != nil:
    section.add "X-Amz-Algorithm", valid_776931
  var valid_776932 = header.getOrDefault("X-Amz-Signature")
  valid_776932 = validateParameter(valid_776932, JString, required = false,
                                 default = nil)
  if valid_776932 != nil:
    section.add "X-Amz-Signature", valid_776932
  var valid_776933 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776933 = validateParameter(valid_776933, JString, required = false,
                                 default = nil)
  if valid_776933 != nil:
    section.add "X-Amz-SignedHeaders", valid_776933
  var valid_776934 = header.getOrDefault("X-Amz-Credential")
  valid_776934 = validateParameter(valid_776934, JString, required = false,
                                 default = nil)
  if valid_776934 != nil:
    section.add "X-Amz-Credential", valid_776934
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776935: Call_GetPutRolePermissionsBoundary_776921; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_776935.validator(path, query, header, formData, body)
  let scheme = call_776935.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776935.url(scheme.get, call_776935.host, call_776935.base,
                         call_776935.route, valid.getOrDefault("path"))
  result = hook(call_776935, url, valid)

proc call*(call_776936: Call_GetPutRolePermissionsBoundary_776921;
          PermissionsBoundary: string; RoleName: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Version: string (required)
  var query_776937 = newJObject()
  add(query_776937, "Action", newJString(Action))
  add(query_776937, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_776937, "RoleName", newJString(RoleName))
  add(query_776937, "Version", newJString(Version))
  result = call_776936.call(nil, query_776937, nil, nil, nil)

var getPutRolePermissionsBoundary* = Call_GetPutRolePermissionsBoundary_776921(
    name: "getPutRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_GetPutRolePermissionsBoundary_776922, base: "/",
    url: url_GetPutRolePermissionsBoundary_776923,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePolicy_776974 = ref object of OpenApiRestCall_772597
proc url_PostPutRolePolicy_776976(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutRolePolicy_776975(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776977 = query.getOrDefault("Action")
  valid_776977 = validateParameter(valid_776977, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_776977 != nil:
    section.add "Action", valid_776977
  var valid_776978 = query.getOrDefault("Version")
  valid_776978 = validateParameter(valid_776978, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776978 != nil:
    section.add "Version", valid_776978
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776979 = header.getOrDefault("X-Amz-Date")
  valid_776979 = validateParameter(valid_776979, JString, required = false,
                                 default = nil)
  if valid_776979 != nil:
    section.add "X-Amz-Date", valid_776979
  var valid_776980 = header.getOrDefault("X-Amz-Security-Token")
  valid_776980 = validateParameter(valid_776980, JString, required = false,
                                 default = nil)
  if valid_776980 != nil:
    section.add "X-Amz-Security-Token", valid_776980
  var valid_776981 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776981 = validateParameter(valid_776981, JString, required = false,
                                 default = nil)
  if valid_776981 != nil:
    section.add "X-Amz-Content-Sha256", valid_776981
  var valid_776982 = header.getOrDefault("X-Amz-Algorithm")
  valid_776982 = validateParameter(valid_776982, JString, required = false,
                                 default = nil)
  if valid_776982 != nil:
    section.add "X-Amz-Algorithm", valid_776982
  var valid_776983 = header.getOrDefault("X-Amz-Signature")
  valid_776983 = validateParameter(valid_776983, JString, required = false,
                                 default = nil)
  if valid_776983 != nil:
    section.add "X-Amz-Signature", valid_776983
  var valid_776984 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776984 = validateParameter(valid_776984, JString, required = false,
                                 default = nil)
  if valid_776984 != nil:
    section.add "X-Amz-SignedHeaders", valid_776984
  var valid_776985 = header.getOrDefault("X-Amz-Credential")
  valid_776985 = validateParameter(valid_776985, JString, required = false,
                                 default = nil)
  if valid_776985 != nil:
    section.add "X-Amz-Credential", valid_776985
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_776986 = formData.getOrDefault("PolicyName")
  valid_776986 = validateParameter(valid_776986, JString, required = true,
                                 default = nil)
  if valid_776986 != nil:
    section.add "PolicyName", valid_776986
  var valid_776987 = formData.getOrDefault("RoleName")
  valid_776987 = validateParameter(valid_776987, JString, required = true,
                                 default = nil)
  if valid_776987 != nil:
    section.add "RoleName", valid_776987
  var valid_776988 = formData.getOrDefault("PolicyDocument")
  valid_776988 = validateParameter(valid_776988, JString, required = true,
                                 default = nil)
  if valid_776988 != nil:
    section.add "PolicyDocument", valid_776988
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776989: Call_PostPutRolePolicy_776974; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_776989.validator(path, query, header, formData, body)
  let scheme = call_776989.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776989.url(scheme.get, call_776989.host, call_776989.base,
                         call_776989.route, valid.getOrDefault("path"))
  result = hook(call_776989, url, valid)

proc call*(call_776990: Call_PostPutRolePolicy_776974; PolicyName: string;
          RoleName: string; PolicyDocument: string;
          Action: string = "PutRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776991 = newJObject()
  var formData_776992 = newJObject()
  add(formData_776992, "PolicyName", newJString(PolicyName))
  add(formData_776992, "RoleName", newJString(RoleName))
  add(formData_776992, "PolicyDocument", newJString(PolicyDocument))
  add(query_776991, "Action", newJString(Action))
  add(query_776991, "Version", newJString(Version))
  result = call_776990.call(nil, query_776991, nil, formData_776992, nil)

var postPutRolePolicy* = Call_PostPutRolePolicy_776974(name: "postPutRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_PostPutRolePolicy_776975,
    base: "/", url: url_PostPutRolePolicy_776976,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePolicy_776956 = ref object of OpenApiRestCall_772597
proc url_GetPutRolePolicy_776958(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutRolePolicy_776957(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776959 = query.getOrDefault("Action")
  valid_776959 = validateParameter(valid_776959, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_776959 != nil:
    section.add "Action", valid_776959
  var valid_776960 = query.getOrDefault("PolicyDocument")
  valid_776960 = validateParameter(valid_776960, JString, required = true,
                                 default = nil)
  if valid_776960 != nil:
    section.add "PolicyDocument", valid_776960
  var valid_776961 = query.getOrDefault("RoleName")
  valid_776961 = validateParameter(valid_776961, JString, required = true,
                                 default = nil)
  if valid_776961 != nil:
    section.add "RoleName", valid_776961
  var valid_776962 = query.getOrDefault("Version")
  valid_776962 = validateParameter(valid_776962, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776962 != nil:
    section.add "Version", valid_776962
  var valid_776963 = query.getOrDefault("PolicyName")
  valid_776963 = validateParameter(valid_776963, JString, required = true,
                                 default = nil)
  if valid_776963 != nil:
    section.add "PolicyName", valid_776963
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776964 = header.getOrDefault("X-Amz-Date")
  valid_776964 = validateParameter(valid_776964, JString, required = false,
                                 default = nil)
  if valid_776964 != nil:
    section.add "X-Amz-Date", valid_776964
  var valid_776965 = header.getOrDefault("X-Amz-Security-Token")
  valid_776965 = validateParameter(valid_776965, JString, required = false,
                                 default = nil)
  if valid_776965 != nil:
    section.add "X-Amz-Security-Token", valid_776965
  var valid_776966 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776966 = validateParameter(valid_776966, JString, required = false,
                                 default = nil)
  if valid_776966 != nil:
    section.add "X-Amz-Content-Sha256", valid_776966
  var valid_776967 = header.getOrDefault("X-Amz-Algorithm")
  valid_776967 = validateParameter(valid_776967, JString, required = false,
                                 default = nil)
  if valid_776967 != nil:
    section.add "X-Amz-Algorithm", valid_776967
  var valid_776968 = header.getOrDefault("X-Amz-Signature")
  valid_776968 = validateParameter(valid_776968, JString, required = false,
                                 default = nil)
  if valid_776968 != nil:
    section.add "X-Amz-Signature", valid_776968
  var valid_776969 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776969 = validateParameter(valid_776969, JString, required = false,
                                 default = nil)
  if valid_776969 != nil:
    section.add "X-Amz-SignedHeaders", valid_776969
  var valid_776970 = header.getOrDefault("X-Amz-Credential")
  valid_776970 = validateParameter(valid_776970, JString, required = false,
                                 default = nil)
  if valid_776970 != nil:
    section.add "X-Amz-Credential", valid_776970
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776971: Call_GetPutRolePolicy_776956; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_776971.validator(path, query, header, formData, body)
  let scheme = call_776971.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776971.url(scheme.get, call_776971.host, call_776971.base,
                         call_776971.route, valid.getOrDefault("path"))
  result = hook(call_776971, url, valid)

proc call*(call_776972: Call_GetPutRolePolicy_776956; PolicyDocument: string;
          RoleName: string; PolicyName: string; Action: string = "PutRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_776973 = newJObject()
  add(query_776973, "Action", newJString(Action))
  add(query_776973, "PolicyDocument", newJString(PolicyDocument))
  add(query_776973, "RoleName", newJString(RoleName))
  add(query_776973, "Version", newJString(Version))
  add(query_776973, "PolicyName", newJString(PolicyName))
  result = call_776972.call(nil, query_776973, nil, nil, nil)

var getPutRolePolicy* = Call_GetPutRolePolicy_776956(name: "getPutRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_GetPutRolePolicy_776957,
    base: "/", url: url_GetPutRolePolicy_776958,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPermissionsBoundary_777010 = ref object of OpenApiRestCall_772597
proc url_PostPutUserPermissionsBoundary_777012(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutUserPermissionsBoundary_777011(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777013 = query.getOrDefault("Action")
  valid_777013 = validateParameter(valid_777013, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_777013 != nil:
    section.add "Action", valid_777013
  var valid_777014 = query.getOrDefault("Version")
  valid_777014 = validateParameter(valid_777014, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777014 != nil:
    section.add "Version", valid_777014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777015 = header.getOrDefault("X-Amz-Date")
  valid_777015 = validateParameter(valid_777015, JString, required = false,
                                 default = nil)
  if valid_777015 != nil:
    section.add "X-Amz-Date", valid_777015
  var valid_777016 = header.getOrDefault("X-Amz-Security-Token")
  valid_777016 = validateParameter(valid_777016, JString, required = false,
                                 default = nil)
  if valid_777016 != nil:
    section.add "X-Amz-Security-Token", valid_777016
  var valid_777017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777017 = validateParameter(valid_777017, JString, required = false,
                                 default = nil)
  if valid_777017 != nil:
    section.add "X-Amz-Content-Sha256", valid_777017
  var valid_777018 = header.getOrDefault("X-Amz-Algorithm")
  valid_777018 = validateParameter(valid_777018, JString, required = false,
                                 default = nil)
  if valid_777018 != nil:
    section.add "X-Amz-Algorithm", valid_777018
  var valid_777019 = header.getOrDefault("X-Amz-Signature")
  valid_777019 = validateParameter(valid_777019, JString, required = false,
                                 default = nil)
  if valid_777019 != nil:
    section.add "X-Amz-Signature", valid_777019
  var valid_777020 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777020 = validateParameter(valid_777020, JString, required = false,
                                 default = nil)
  if valid_777020 != nil:
    section.add "X-Amz-SignedHeaders", valid_777020
  var valid_777021 = header.getOrDefault("X-Amz-Credential")
  valid_777021 = validateParameter(valid_777021, JString, required = false,
                                 default = nil)
  if valid_777021 != nil:
    section.add "X-Amz-Credential", valid_777021
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_777022 = formData.getOrDefault("UserName")
  valid_777022 = validateParameter(valid_777022, JString, required = true,
                                 default = nil)
  if valid_777022 != nil:
    section.add "UserName", valid_777022
  var valid_777023 = formData.getOrDefault("PermissionsBoundary")
  valid_777023 = validateParameter(valid_777023, JString, required = true,
                                 default = nil)
  if valid_777023 != nil:
    section.add "PermissionsBoundary", valid_777023
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777024: Call_PostPutUserPermissionsBoundary_777010; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_777024.validator(path, query, header, formData, body)
  let scheme = call_777024.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777024.url(scheme.get, call_777024.host, call_777024.base,
                         call_777024.route, valid.getOrDefault("path"))
  result = hook(call_777024, url, valid)

proc call*(call_777025: Call_PostPutUserPermissionsBoundary_777010;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777026 = newJObject()
  var formData_777027 = newJObject()
  add(formData_777027, "UserName", newJString(UserName))
  add(formData_777027, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_777026, "Action", newJString(Action))
  add(query_777026, "Version", newJString(Version))
  result = call_777025.call(nil, query_777026, nil, formData_777027, nil)

var postPutUserPermissionsBoundary* = Call_PostPutUserPermissionsBoundary_777010(
    name: "postPutUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_PostPutUserPermissionsBoundary_777011, base: "/",
    url: url_PostPutUserPermissionsBoundary_777012,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPermissionsBoundary_776993 = ref object of OpenApiRestCall_772597
proc url_GetPutUserPermissionsBoundary_776995(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutUserPermissionsBoundary_776994(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   Action: JString (required)
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_776996 = query.getOrDefault("UserName")
  valid_776996 = validateParameter(valid_776996, JString, required = true,
                                 default = nil)
  if valid_776996 != nil:
    section.add "UserName", valid_776996
  var valid_776997 = query.getOrDefault("Action")
  valid_776997 = validateParameter(valid_776997, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_776997 != nil:
    section.add "Action", valid_776997
  var valid_776998 = query.getOrDefault("PermissionsBoundary")
  valid_776998 = validateParameter(valid_776998, JString, required = true,
                                 default = nil)
  if valid_776998 != nil:
    section.add "PermissionsBoundary", valid_776998
  var valid_776999 = query.getOrDefault("Version")
  valid_776999 = validateParameter(valid_776999, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_776999 != nil:
    section.add "Version", valid_776999
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777000 = header.getOrDefault("X-Amz-Date")
  valid_777000 = validateParameter(valid_777000, JString, required = false,
                                 default = nil)
  if valid_777000 != nil:
    section.add "X-Amz-Date", valid_777000
  var valid_777001 = header.getOrDefault("X-Amz-Security-Token")
  valid_777001 = validateParameter(valid_777001, JString, required = false,
                                 default = nil)
  if valid_777001 != nil:
    section.add "X-Amz-Security-Token", valid_777001
  var valid_777002 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777002 = validateParameter(valid_777002, JString, required = false,
                                 default = nil)
  if valid_777002 != nil:
    section.add "X-Amz-Content-Sha256", valid_777002
  var valid_777003 = header.getOrDefault("X-Amz-Algorithm")
  valid_777003 = validateParameter(valid_777003, JString, required = false,
                                 default = nil)
  if valid_777003 != nil:
    section.add "X-Amz-Algorithm", valid_777003
  var valid_777004 = header.getOrDefault("X-Amz-Signature")
  valid_777004 = validateParameter(valid_777004, JString, required = false,
                                 default = nil)
  if valid_777004 != nil:
    section.add "X-Amz-Signature", valid_777004
  var valid_777005 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777005 = validateParameter(valid_777005, JString, required = false,
                                 default = nil)
  if valid_777005 != nil:
    section.add "X-Amz-SignedHeaders", valid_777005
  var valid_777006 = header.getOrDefault("X-Amz-Credential")
  valid_777006 = validateParameter(valid_777006, JString, required = false,
                                 default = nil)
  if valid_777006 != nil:
    section.add "X-Amz-Credential", valid_777006
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777007: Call_GetPutUserPermissionsBoundary_776993; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_777007.validator(path, query, header, formData, body)
  let scheme = call_777007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777007.url(scheme.get, call_777007.host, call_777007.base,
                         call_777007.route, valid.getOrDefault("path"))
  result = hook(call_777007, url, valid)

proc call*(call_777008: Call_GetPutUserPermissionsBoundary_776993;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_777009 = newJObject()
  add(query_777009, "UserName", newJString(UserName))
  add(query_777009, "Action", newJString(Action))
  add(query_777009, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_777009, "Version", newJString(Version))
  result = call_777008.call(nil, query_777009, nil, nil, nil)

var getPutUserPermissionsBoundary* = Call_GetPutUserPermissionsBoundary_776993(
    name: "getPutUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_GetPutUserPermissionsBoundary_776994, base: "/",
    url: url_GetPutUserPermissionsBoundary_776995,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPolicy_777046 = ref object of OpenApiRestCall_772597
proc url_PostPutUserPolicy_777048(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutUserPolicy_777047(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777049 = query.getOrDefault("Action")
  valid_777049 = validateParameter(valid_777049, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_777049 != nil:
    section.add "Action", valid_777049
  var valid_777050 = query.getOrDefault("Version")
  valid_777050 = validateParameter(valid_777050, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777050 != nil:
    section.add "Version", valid_777050
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777051 = header.getOrDefault("X-Amz-Date")
  valid_777051 = validateParameter(valid_777051, JString, required = false,
                                 default = nil)
  if valid_777051 != nil:
    section.add "X-Amz-Date", valid_777051
  var valid_777052 = header.getOrDefault("X-Amz-Security-Token")
  valid_777052 = validateParameter(valid_777052, JString, required = false,
                                 default = nil)
  if valid_777052 != nil:
    section.add "X-Amz-Security-Token", valid_777052
  var valid_777053 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777053 = validateParameter(valid_777053, JString, required = false,
                                 default = nil)
  if valid_777053 != nil:
    section.add "X-Amz-Content-Sha256", valid_777053
  var valid_777054 = header.getOrDefault("X-Amz-Algorithm")
  valid_777054 = validateParameter(valid_777054, JString, required = false,
                                 default = nil)
  if valid_777054 != nil:
    section.add "X-Amz-Algorithm", valid_777054
  var valid_777055 = header.getOrDefault("X-Amz-Signature")
  valid_777055 = validateParameter(valid_777055, JString, required = false,
                                 default = nil)
  if valid_777055 != nil:
    section.add "X-Amz-Signature", valid_777055
  var valid_777056 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777056 = validateParameter(valid_777056, JString, required = false,
                                 default = nil)
  if valid_777056 != nil:
    section.add "X-Amz-SignedHeaders", valid_777056
  var valid_777057 = header.getOrDefault("X-Amz-Credential")
  valid_777057 = validateParameter(valid_777057, JString, required = false,
                                 default = nil)
  if valid_777057 != nil:
    section.add "X-Amz-Credential", valid_777057
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_777058 = formData.getOrDefault("PolicyName")
  valid_777058 = validateParameter(valid_777058, JString, required = true,
                                 default = nil)
  if valid_777058 != nil:
    section.add "PolicyName", valid_777058
  var valid_777059 = formData.getOrDefault("UserName")
  valid_777059 = validateParameter(valid_777059, JString, required = true,
                                 default = nil)
  if valid_777059 != nil:
    section.add "UserName", valid_777059
  var valid_777060 = formData.getOrDefault("PolicyDocument")
  valid_777060 = validateParameter(valid_777060, JString, required = true,
                                 default = nil)
  if valid_777060 != nil:
    section.add "PolicyDocument", valid_777060
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777061: Call_PostPutUserPolicy_777046; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_777061.validator(path, query, header, formData, body)
  let scheme = call_777061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777061.url(scheme.get, call_777061.host, call_777061.base,
                         call_777061.route, valid.getOrDefault("path"))
  result = hook(call_777061, url, valid)

proc call*(call_777062: Call_PostPutUserPolicy_777046; PolicyName: string;
          UserName: string; PolicyDocument: string;
          Action: string = "PutUserPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777063 = newJObject()
  var formData_777064 = newJObject()
  add(formData_777064, "PolicyName", newJString(PolicyName))
  add(formData_777064, "UserName", newJString(UserName))
  add(formData_777064, "PolicyDocument", newJString(PolicyDocument))
  add(query_777063, "Action", newJString(Action))
  add(query_777063, "Version", newJString(Version))
  result = call_777062.call(nil, query_777063, nil, formData_777064, nil)

var postPutUserPolicy* = Call_PostPutUserPolicy_777046(name: "postPutUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_PostPutUserPolicy_777047,
    base: "/", url: url_PostPutUserPolicy_777048,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPolicy_777028 = ref object of OpenApiRestCall_772597
proc url_GetPutUserPolicy_777030(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutUserPolicy_777029(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_777031 = query.getOrDefault("UserName")
  valid_777031 = validateParameter(valid_777031, JString, required = true,
                                 default = nil)
  if valid_777031 != nil:
    section.add "UserName", valid_777031
  var valid_777032 = query.getOrDefault("Action")
  valid_777032 = validateParameter(valid_777032, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_777032 != nil:
    section.add "Action", valid_777032
  var valid_777033 = query.getOrDefault("PolicyDocument")
  valid_777033 = validateParameter(valid_777033, JString, required = true,
                                 default = nil)
  if valid_777033 != nil:
    section.add "PolicyDocument", valid_777033
  var valid_777034 = query.getOrDefault("Version")
  valid_777034 = validateParameter(valid_777034, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777034 != nil:
    section.add "Version", valid_777034
  var valid_777035 = query.getOrDefault("PolicyName")
  valid_777035 = validateParameter(valid_777035, JString, required = true,
                                 default = nil)
  if valid_777035 != nil:
    section.add "PolicyName", valid_777035
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777036 = header.getOrDefault("X-Amz-Date")
  valid_777036 = validateParameter(valid_777036, JString, required = false,
                                 default = nil)
  if valid_777036 != nil:
    section.add "X-Amz-Date", valid_777036
  var valid_777037 = header.getOrDefault("X-Amz-Security-Token")
  valid_777037 = validateParameter(valid_777037, JString, required = false,
                                 default = nil)
  if valid_777037 != nil:
    section.add "X-Amz-Security-Token", valid_777037
  var valid_777038 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777038 = validateParameter(valid_777038, JString, required = false,
                                 default = nil)
  if valid_777038 != nil:
    section.add "X-Amz-Content-Sha256", valid_777038
  var valid_777039 = header.getOrDefault("X-Amz-Algorithm")
  valid_777039 = validateParameter(valid_777039, JString, required = false,
                                 default = nil)
  if valid_777039 != nil:
    section.add "X-Amz-Algorithm", valid_777039
  var valid_777040 = header.getOrDefault("X-Amz-Signature")
  valid_777040 = validateParameter(valid_777040, JString, required = false,
                                 default = nil)
  if valid_777040 != nil:
    section.add "X-Amz-Signature", valid_777040
  var valid_777041 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777041 = validateParameter(valid_777041, JString, required = false,
                                 default = nil)
  if valid_777041 != nil:
    section.add "X-Amz-SignedHeaders", valid_777041
  var valid_777042 = header.getOrDefault("X-Amz-Credential")
  valid_777042 = validateParameter(valid_777042, JString, required = false,
                                 default = nil)
  if valid_777042 != nil:
    section.add "X-Amz-Credential", valid_777042
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777043: Call_GetPutUserPolicy_777028; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_777043.validator(path, query, header, formData, body)
  let scheme = call_777043.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777043.url(scheme.get, call_777043.host, call_777043.base,
                         call_777043.route, valid.getOrDefault("path"))
  result = hook(call_777043, url, valid)

proc call*(call_777044: Call_GetPutUserPolicy_777028; UserName: string;
          PolicyDocument: string; PolicyName: string;
          Action: string = "PutUserPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_777045 = newJObject()
  add(query_777045, "UserName", newJString(UserName))
  add(query_777045, "Action", newJString(Action))
  add(query_777045, "PolicyDocument", newJString(PolicyDocument))
  add(query_777045, "Version", newJString(Version))
  add(query_777045, "PolicyName", newJString(PolicyName))
  result = call_777044.call(nil, query_777045, nil, nil, nil)

var getPutUserPolicy* = Call_GetPutUserPolicy_777028(name: "getPutUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_GetPutUserPolicy_777029,
    base: "/", url: url_GetPutUserPolicy_777030,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveClientIDFromOpenIDConnectProvider_777082 = ref object of OpenApiRestCall_772597
proc url_PostRemoveClientIDFromOpenIDConnectProvider_777084(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveClientIDFromOpenIDConnectProvider_777083(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777085 = query.getOrDefault("Action")
  valid_777085 = validateParameter(valid_777085, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_777085 != nil:
    section.add "Action", valid_777085
  var valid_777086 = query.getOrDefault("Version")
  valid_777086 = validateParameter(valid_777086, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777086 != nil:
    section.add "Version", valid_777086
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777087 = header.getOrDefault("X-Amz-Date")
  valid_777087 = validateParameter(valid_777087, JString, required = false,
                                 default = nil)
  if valid_777087 != nil:
    section.add "X-Amz-Date", valid_777087
  var valid_777088 = header.getOrDefault("X-Amz-Security-Token")
  valid_777088 = validateParameter(valid_777088, JString, required = false,
                                 default = nil)
  if valid_777088 != nil:
    section.add "X-Amz-Security-Token", valid_777088
  var valid_777089 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777089 = validateParameter(valid_777089, JString, required = false,
                                 default = nil)
  if valid_777089 != nil:
    section.add "X-Amz-Content-Sha256", valid_777089
  var valid_777090 = header.getOrDefault("X-Amz-Algorithm")
  valid_777090 = validateParameter(valid_777090, JString, required = false,
                                 default = nil)
  if valid_777090 != nil:
    section.add "X-Amz-Algorithm", valid_777090
  var valid_777091 = header.getOrDefault("X-Amz-Signature")
  valid_777091 = validateParameter(valid_777091, JString, required = false,
                                 default = nil)
  if valid_777091 != nil:
    section.add "X-Amz-Signature", valid_777091
  var valid_777092 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777092 = validateParameter(valid_777092, JString, required = false,
                                 default = nil)
  if valid_777092 != nil:
    section.add "X-Amz-SignedHeaders", valid_777092
  var valid_777093 = header.getOrDefault("X-Amz-Credential")
  valid_777093 = validateParameter(valid_777093, JString, required = false,
                                 default = nil)
  if valid_777093 != nil:
    section.add "X-Amz-Credential", valid_777093
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_777094 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_777094 = validateParameter(valid_777094, JString, required = true,
                                 default = nil)
  if valid_777094 != nil:
    section.add "OpenIDConnectProviderArn", valid_777094
  var valid_777095 = formData.getOrDefault("ClientID")
  valid_777095 = validateParameter(valid_777095, JString, required = true,
                                 default = nil)
  if valid_777095 != nil:
    section.add "ClientID", valid_777095
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777096: Call_PostRemoveClientIDFromOpenIDConnectProvider_777082;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_777096.validator(path, query, header, formData, body)
  let scheme = call_777096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777096.url(scheme.get, call_777096.host, call_777096.base,
                         call_777096.route, valid.getOrDefault("path"))
  result = hook(call_777096, url, valid)

proc call*(call_777097: Call_PostRemoveClientIDFromOpenIDConnectProvider_777082;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  var query_777098 = newJObject()
  var formData_777099 = newJObject()
  add(formData_777099, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_777098, "Action", newJString(Action))
  add(query_777098, "Version", newJString(Version))
  add(formData_777099, "ClientID", newJString(ClientID))
  result = call_777097.call(nil, query_777098, nil, formData_777099, nil)

var postRemoveClientIDFromOpenIDConnectProvider* = Call_PostRemoveClientIDFromOpenIDConnectProvider_777082(
    name: "postRemoveClientIDFromOpenIDConnectProvider",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_PostRemoveClientIDFromOpenIDConnectProvider_777083,
    base: "/", url: url_PostRemoveClientIDFromOpenIDConnectProvider_777084,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveClientIDFromOpenIDConnectProvider_777065 = ref object of OpenApiRestCall_772597
proc url_GetRemoveClientIDFromOpenIDConnectProvider_777067(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveClientIDFromOpenIDConnectProvider_777066(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_777068 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_777068 = validateParameter(valid_777068, JString, required = true,
                                 default = nil)
  if valid_777068 != nil:
    section.add "OpenIDConnectProviderArn", valid_777068
  var valid_777069 = query.getOrDefault("Action")
  valid_777069 = validateParameter(valid_777069, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_777069 != nil:
    section.add "Action", valid_777069
  var valid_777070 = query.getOrDefault("ClientID")
  valid_777070 = validateParameter(valid_777070, JString, required = true,
                                 default = nil)
  if valid_777070 != nil:
    section.add "ClientID", valid_777070
  var valid_777071 = query.getOrDefault("Version")
  valid_777071 = validateParameter(valid_777071, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777071 != nil:
    section.add "Version", valid_777071
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777072 = header.getOrDefault("X-Amz-Date")
  valid_777072 = validateParameter(valid_777072, JString, required = false,
                                 default = nil)
  if valid_777072 != nil:
    section.add "X-Amz-Date", valid_777072
  var valid_777073 = header.getOrDefault("X-Amz-Security-Token")
  valid_777073 = validateParameter(valid_777073, JString, required = false,
                                 default = nil)
  if valid_777073 != nil:
    section.add "X-Amz-Security-Token", valid_777073
  var valid_777074 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777074 = validateParameter(valid_777074, JString, required = false,
                                 default = nil)
  if valid_777074 != nil:
    section.add "X-Amz-Content-Sha256", valid_777074
  var valid_777075 = header.getOrDefault("X-Amz-Algorithm")
  valid_777075 = validateParameter(valid_777075, JString, required = false,
                                 default = nil)
  if valid_777075 != nil:
    section.add "X-Amz-Algorithm", valid_777075
  var valid_777076 = header.getOrDefault("X-Amz-Signature")
  valid_777076 = validateParameter(valid_777076, JString, required = false,
                                 default = nil)
  if valid_777076 != nil:
    section.add "X-Amz-Signature", valid_777076
  var valid_777077 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777077 = validateParameter(valid_777077, JString, required = false,
                                 default = nil)
  if valid_777077 != nil:
    section.add "X-Amz-SignedHeaders", valid_777077
  var valid_777078 = header.getOrDefault("X-Amz-Credential")
  valid_777078 = validateParameter(valid_777078, JString, required = false,
                                 default = nil)
  if valid_777078 != nil:
    section.add "X-Amz-Credential", valid_777078
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777079: Call_GetRemoveClientIDFromOpenIDConnectProvider_777065;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_777079.validator(path, query, header, formData, body)
  let scheme = call_777079.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777079.url(scheme.get, call_777079.host, call_777079.base,
                         call_777079.route, valid.getOrDefault("path"))
  result = hook(call_777079, url, valid)

proc call*(call_777080: Call_GetRemoveClientIDFromOpenIDConnectProvider_777065;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   Version: string (required)
  var query_777081 = newJObject()
  add(query_777081, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_777081, "Action", newJString(Action))
  add(query_777081, "ClientID", newJString(ClientID))
  add(query_777081, "Version", newJString(Version))
  result = call_777080.call(nil, query_777081, nil, nil, nil)

var getRemoveClientIDFromOpenIDConnectProvider* = Call_GetRemoveClientIDFromOpenIDConnectProvider_777065(
    name: "getRemoveClientIDFromOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_GetRemoveClientIDFromOpenIDConnectProvider_777066,
    base: "/", url: url_GetRemoveClientIDFromOpenIDConnectProvider_777067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromInstanceProfile_777117 = ref object of OpenApiRestCall_772597
proc url_PostRemoveRoleFromInstanceProfile_777119(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveRoleFromInstanceProfile_777118(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777120 = query.getOrDefault("Action")
  valid_777120 = validateParameter(valid_777120, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_777120 != nil:
    section.add "Action", valid_777120
  var valid_777121 = query.getOrDefault("Version")
  valid_777121 = validateParameter(valid_777121, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777121 != nil:
    section.add "Version", valid_777121
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777122 = header.getOrDefault("X-Amz-Date")
  valid_777122 = validateParameter(valid_777122, JString, required = false,
                                 default = nil)
  if valid_777122 != nil:
    section.add "X-Amz-Date", valid_777122
  var valid_777123 = header.getOrDefault("X-Amz-Security-Token")
  valid_777123 = validateParameter(valid_777123, JString, required = false,
                                 default = nil)
  if valid_777123 != nil:
    section.add "X-Amz-Security-Token", valid_777123
  var valid_777124 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777124 = validateParameter(valid_777124, JString, required = false,
                                 default = nil)
  if valid_777124 != nil:
    section.add "X-Amz-Content-Sha256", valid_777124
  var valid_777125 = header.getOrDefault("X-Amz-Algorithm")
  valid_777125 = validateParameter(valid_777125, JString, required = false,
                                 default = nil)
  if valid_777125 != nil:
    section.add "X-Amz-Algorithm", valid_777125
  var valid_777126 = header.getOrDefault("X-Amz-Signature")
  valid_777126 = validateParameter(valid_777126, JString, required = false,
                                 default = nil)
  if valid_777126 != nil:
    section.add "X-Amz-Signature", valid_777126
  var valid_777127 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777127 = validateParameter(valid_777127, JString, required = false,
                                 default = nil)
  if valid_777127 != nil:
    section.add "X-Amz-SignedHeaders", valid_777127
  var valid_777128 = header.getOrDefault("X-Amz-Credential")
  valid_777128 = validateParameter(valid_777128, JString, required = false,
                                 default = nil)
  if valid_777128 != nil:
    section.add "X-Amz-Credential", valid_777128
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_777129 = formData.getOrDefault("RoleName")
  valid_777129 = validateParameter(valid_777129, JString, required = true,
                                 default = nil)
  if valid_777129 != nil:
    section.add "RoleName", valid_777129
  var valid_777130 = formData.getOrDefault("InstanceProfileName")
  valid_777130 = validateParameter(valid_777130, JString, required = true,
                                 default = nil)
  if valid_777130 != nil:
    section.add "InstanceProfileName", valid_777130
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777131: Call_PostRemoveRoleFromInstanceProfile_777117;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_777131.validator(path, query, header, formData, body)
  let scheme = call_777131.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777131.url(scheme.get, call_777131.host, call_777131.base,
                         call_777131.route, valid.getOrDefault("path"))
  result = hook(call_777131, url, valid)

proc call*(call_777132: Call_PostRemoveRoleFromInstanceProfile_777117;
          RoleName: string; InstanceProfileName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_777133 = newJObject()
  var formData_777134 = newJObject()
  add(formData_777134, "RoleName", newJString(RoleName))
  add(query_777133, "Action", newJString(Action))
  add(formData_777134, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_777133, "Version", newJString(Version))
  result = call_777132.call(nil, query_777133, nil, formData_777134, nil)

var postRemoveRoleFromInstanceProfile* = Call_PostRemoveRoleFromInstanceProfile_777117(
    name: "postRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_PostRemoveRoleFromInstanceProfile_777118, base: "/",
    url: url_PostRemoveRoleFromInstanceProfile_777119,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromInstanceProfile_777100 = ref object of OpenApiRestCall_772597
proc url_GetRemoveRoleFromInstanceProfile_777102(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveRoleFromInstanceProfile_777101(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_777103 = query.getOrDefault("InstanceProfileName")
  valid_777103 = validateParameter(valid_777103, JString, required = true,
                                 default = nil)
  if valid_777103 != nil:
    section.add "InstanceProfileName", valid_777103
  var valid_777104 = query.getOrDefault("Action")
  valid_777104 = validateParameter(valid_777104, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_777104 != nil:
    section.add "Action", valid_777104
  var valid_777105 = query.getOrDefault("RoleName")
  valid_777105 = validateParameter(valid_777105, JString, required = true,
                                 default = nil)
  if valid_777105 != nil:
    section.add "RoleName", valid_777105
  var valid_777106 = query.getOrDefault("Version")
  valid_777106 = validateParameter(valid_777106, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777106 != nil:
    section.add "Version", valid_777106
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777107 = header.getOrDefault("X-Amz-Date")
  valid_777107 = validateParameter(valid_777107, JString, required = false,
                                 default = nil)
  if valid_777107 != nil:
    section.add "X-Amz-Date", valid_777107
  var valid_777108 = header.getOrDefault("X-Amz-Security-Token")
  valid_777108 = validateParameter(valid_777108, JString, required = false,
                                 default = nil)
  if valid_777108 != nil:
    section.add "X-Amz-Security-Token", valid_777108
  var valid_777109 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777109 = validateParameter(valid_777109, JString, required = false,
                                 default = nil)
  if valid_777109 != nil:
    section.add "X-Amz-Content-Sha256", valid_777109
  var valid_777110 = header.getOrDefault("X-Amz-Algorithm")
  valid_777110 = validateParameter(valid_777110, JString, required = false,
                                 default = nil)
  if valid_777110 != nil:
    section.add "X-Amz-Algorithm", valid_777110
  var valid_777111 = header.getOrDefault("X-Amz-Signature")
  valid_777111 = validateParameter(valid_777111, JString, required = false,
                                 default = nil)
  if valid_777111 != nil:
    section.add "X-Amz-Signature", valid_777111
  var valid_777112 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777112 = validateParameter(valid_777112, JString, required = false,
                                 default = nil)
  if valid_777112 != nil:
    section.add "X-Amz-SignedHeaders", valid_777112
  var valid_777113 = header.getOrDefault("X-Amz-Credential")
  valid_777113 = validateParameter(valid_777113, JString, required = false,
                                 default = nil)
  if valid_777113 != nil:
    section.add "X-Amz-Credential", valid_777113
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777114: Call_GetRemoveRoleFromInstanceProfile_777100;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_777114.validator(path, query, header, formData, body)
  let scheme = call_777114.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777114.url(scheme.get, call_777114.host, call_777114.base,
                         call_777114.route, valid.getOrDefault("path"))
  result = hook(call_777114, url, valid)

proc call*(call_777115: Call_GetRemoveRoleFromInstanceProfile_777100;
          InstanceProfileName: string; RoleName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_777116 = newJObject()
  add(query_777116, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_777116, "Action", newJString(Action))
  add(query_777116, "RoleName", newJString(RoleName))
  add(query_777116, "Version", newJString(Version))
  result = call_777115.call(nil, query_777116, nil, nil, nil)

var getRemoveRoleFromInstanceProfile* = Call_GetRemoveRoleFromInstanceProfile_777100(
    name: "getRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_GetRemoveRoleFromInstanceProfile_777101, base: "/",
    url: url_GetRemoveRoleFromInstanceProfile_777102,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveUserFromGroup_777152 = ref object of OpenApiRestCall_772597
proc url_PostRemoveUserFromGroup_777154(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveUserFromGroup_777153(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777155 = query.getOrDefault("Action")
  valid_777155 = validateParameter(valid_777155, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_777155 != nil:
    section.add "Action", valid_777155
  var valid_777156 = query.getOrDefault("Version")
  valid_777156 = validateParameter(valid_777156, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777156 != nil:
    section.add "Version", valid_777156
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777157 = header.getOrDefault("X-Amz-Date")
  valid_777157 = validateParameter(valid_777157, JString, required = false,
                                 default = nil)
  if valid_777157 != nil:
    section.add "X-Amz-Date", valid_777157
  var valid_777158 = header.getOrDefault("X-Amz-Security-Token")
  valid_777158 = validateParameter(valid_777158, JString, required = false,
                                 default = nil)
  if valid_777158 != nil:
    section.add "X-Amz-Security-Token", valid_777158
  var valid_777159 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777159 = validateParameter(valid_777159, JString, required = false,
                                 default = nil)
  if valid_777159 != nil:
    section.add "X-Amz-Content-Sha256", valid_777159
  var valid_777160 = header.getOrDefault("X-Amz-Algorithm")
  valid_777160 = validateParameter(valid_777160, JString, required = false,
                                 default = nil)
  if valid_777160 != nil:
    section.add "X-Amz-Algorithm", valid_777160
  var valid_777161 = header.getOrDefault("X-Amz-Signature")
  valid_777161 = validateParameter(valid_777161, JString, required = false,
                                 default = nil)
  if valid_777161 != nil:
    section.add "X-Amz-Signature", valid_777161
  var valid_777162 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777162 = validateParameter(valid_777162, JString, required = false,
                                 default = nil)
  if valid_777162 != nil:
    section.add "X-Amz-SignedHeaders", valid_777162
  var valid_777163 = header.getOrDefault("X-Amz-Credential")
  valid_777163 = validateParameter(valid_777163, JString, required = false,
                                 default = nil)
  if valid_777163 != nil:
    section.add "X-Amz-Credential", valid_777163
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_777164 = formData.getOrDefault("UserName")
  valid_777164 = validateParameter(valid_777164, JString, required = true,
                                 default = nil)
  if valid_777164 != nil:
    section.add "UserName", valid_777164
  var valid_777165 = formData.getOrDefault("GroupName")
  valid_777165 = validateParameter(valid_777165, JString, required = true,
                                 default = nil)
  if valid_777165 != nil:
    section.add "GroupName", valid_777165
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777166: Call_PostRemoveUserFromGroup_777152; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_777166.validator(path, query, header, formData, body)
  let scheme = call_777166.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777166.url(scheme.get, call_777166.host, call_777166.base,
                         call_777166.route, valid.getOrDefault("path"))
  result = hook(call_777166, url, valid)

proc call*(call_777167: Call_PostRemoveUserFromGroup_777152; UserName: string;
          GroupName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777168 = newJObject()
  var formData_777169 = newJObject()
  add(formData_777169, "UserName", newJString(UserName))
  add(formData_777169, "GroupName", newJString(GroupName))
  add(query_777168, "Action", newJString(Action))
  add(query_777168, "Version", newJString(Version))
  result = call_777167.call(nil, query_777168, nil, formData_777169, nil)

var postRemoveUserFromGroup* = Call_PostRemoveUserFromGroup_777152(
    name: "postRemoveUserFromGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_PostRemoveUserFromGroup_777153, base: "/",
    url: url_PostRemoveUserFromGroup_777154, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveUserFromGroup_777135 = ref object of OpenApiRestCall_772597
proc url_GetRemoveUserFromGroup_777137(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveUserFromGroup_777136(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_777138 = query.getOrDefault("UserName")
  valid_777138 = validateParameter(valid_777138, JString, required = true,
                                 default = nil)
  if valid_777138 != nil:
    section.add "UserName", valid_777138
  var valid_777139 = query.getOrDefault("Action")
  valid_777139 = validateParameter(valid_777139, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_777139 != nil:
    section.add "Action", valid_777139
  var valid_777140 = query.getOrDefault("GroupName")
  valid_777140 = validateParameter(valid_777140, JString, required = true,
                                 default = nil)
  if valid_777140 != nil:
    section.add "GroupName", valid_777140
  var valid_777141 = query.getOrDefault("Version")
  valid_777141 = validateParameter(valid_777141, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777141 != nil:
    section.add "Version", valid_777141
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777142 = header.getOrDefault("X-Amz-Date")
  valid_777142 = validateParameter(valid_777142, JString, required = false,
                                 default = nil)
  if valid_777142 != nil:
    section.add "X-Amz-Date", valid_777142
  var valid_777143 = header.getOrDefault("X-Amz-Security-Token")
  valid_777143 = validateParameter(valid_777143, JString, required = false,
                                 default = nil)
  if valid_777143 != nil:
    section.add "X-Amz-Security-Token", valid_777143
  var valid_777144 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777144 = validateParameter(valid_777144, JString, required = false,
                                 default = nil)
  if valid_777144 != nil:
    section.add "X-Amz-Content-Sha256", valid_777144
  var valid_777145 = header.getOrDefault("X-Amz-Algorithm")
  valid_777145 = validateParameter(valid_777145, JString, required = false,
                                 default = nil)
  if valid_777145 != nil:
    section.add "X-Amz-Algorithm", valid_777145
  var valid_777146 = header.getOrDefault("X-Amz-Signature")
  valid_777146 = validateParameter(valid_777146, JString, required = false,
                                 default = nil)
  if valid_777146 != nil:
    section.add "X-Amz-Signature", valid_777146
  var valid_777147 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777147 = validateParameter(valid_777147, JString, required = false,
                                 default = nil)
  if valid_777147 != nil:
    section.add "X-Amz-SignedHeaders", valid_777147
  var valid_777148 = header.getOrDefault("X-Amz-Credential")
  valid_777148 = validateParameter(valid_777148, JString, required = false,
                                 default = nil)
  if valid_777148 != nil:
    section.add "X-Amz-Credential", valid_777148
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777149: Call_GetRemoveUserFromGroup_777135; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_777149.validator(path, query, header, formData, body)
  let scheme = call_777149.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777149.url(scheme.get, call_777149.host, call_777149.base,
                         call_777149.route, valid.getOrDefault("path"))
  result = hook(call_777149, url, valid)

proc call*(call_777150: Call_GetRemoveUserFromGroup_777135; UserName: string;
          GroupName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_777151 = newJObject()
  add(query_777151, "UserName", newJString(UserName))
  add(query_777151, "Action", newJString(Action))
  add(query_777151, "GroupName", newJString(GroupName))
  add(query_777151, "Version", newJString(Version))
  result = call_777150.call(nil, query_777151, nil, nil, nil)

var getRemoveUserFromGroup* = Call_GetRemoveUserFromGroup_777135(
    name: "getRemoveUserFromGroup", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_GetRemoveUserFromGroup_777136, base: "/",
    url: url_GetRemoveUserFromGroup_777137, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetServiceSpecificCredential_777187 = ref object of OpenApiRestCall_772597
proc url_PostResetServiceSpecificCredential_777189(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostResetServiceSpecificCredential_777188(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777190 = query.getOrDefault("Action")
  valid_777190 = validateParameter(valid_777190, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_777190 != nil:
    section.add "Action", valid_777190
  var valid_777191 = query.getOrDefault("Version")
  valid_777191 = validateParameter(valid_777191, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777191 != nil:
    section.add "Version", valid_777191
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777192 = header.getOrDefault("X-Amz-Date")
  valid_777192 = validateParameter(valid_777192, JString, required = false,
                                 default = nil)
  if valid_777192 != nil:
    section.add "X-Amz-Date", valid_777192
  var valid_777193 = header.getOrDefault("X-Amz-Security-Token")
  valid_777193 = validateParameter(valid_777193, JString, required = false,
                                 default = nil)
  if valid_777193 != nil:
    section.add "X-Amz-Security-Token", valid_777193
  var valid_777194 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777194 = validateParameter(valid_777194, JString, required = false,
                                 default = nil)
  if valid_777194 != nil:
    section.add "X-Amz-Content-Sha256", valid_777194
  var valid_777195 = header.getOrDefault("X-Amz-Algorithm")
  valid_777195 = validateParameter(valid_777195, JString, required = false,
                                 default = nil)
  if valid_777195 != nil:
    section.add "X-Amz-Algorithm", valid_777195
  var valid_777196 = header.getOrDefault("X-Amz-Signature")
  valid_777196 = validateParameter(valid_777196, JString, required = false,
                                 default = nil)
  if valid_777196 != nil:
    section.add "X-Amz-Signature", valid_777196
  var valid_777197 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777197 = validateParameter(valid_777197, JString, required = false,
                                 default = nil)
  if valid_777197 != nil:
    section.add "X-Amz-SignedHeaders", valid_777197
  var valid_777198 = header.getOrDefault("X-Amz-Credential")
  valid_777198 = validateParameter(valid_777198, JString, required = false,
                                 default = nil)
  if valid_777198 != nil:
    section.add "X-Amz-Credential", valid_777198
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_777199 = formData.getOrDefault("UserName")
  valid_777199 = validateParameter(valid_777199, JString, required = false,
                                 default = nil)
  if valid_777199 != nil:
    section.add "UserName", valid_777199
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_777200 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_777200 = validateParameter(valid_777200, JString, required = true,
                                 default = nil)
  if valid_777200 != nil:
    section.add "ServiceSpecificCredentialId", valid_777200
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777201: Call_PostResetServiceSpecificCredential_777187;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_777201.validator(path, query, header, formData, body)
  let scheme = call_777201.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777201.url(scheme.get, call_777201.host, call_777201.base,
                         call_777201.route, valid.getOrDefault("path"))
  result = hook(call_777201, url, valid)

proc call*(call_777202: Call_PostResetServiceSpecificCredential_777187;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777203 = newJObject()
  var formData_777204 = newJObject()
  add(formData_777204, "UserName", newJString(UserName))
  add(formData_777204, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_777203, "Action", newJString(Action))
  add(query_777203, "Version", newJString(Version))
  result = call_777202.call(nil, query_777203, nil, formData_777204, nil)

var postResetServiceSpecificCredential* = Call_PostResetServiceSpecificCredential_777187(
    name: "postResetServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_PostResetServiceSpecificCredential_777188, base: "/",
    url: url_PostResetServiceSpecificCredential_777189,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetServiceSpecificCredential_777170 = ref object of OpenApiRestCall_772597
proc url_GetResetServiceSpecificCredential_777172(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetResetServiceSpecificCredential_777171(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_777173 = query.getOrDefault("UserName")
  valid_777173 = validateParameter(valid_777173, JString, required = false,
                                 default = nil)
  if valid_777173 != nil:
    section.add "UserName", valid_777173
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777174 = query.getOrDefault("Action")
  valid_777174 = validateParameter(valid_777174, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_777174 != nil:
    section.add "Action", valid_777174
  var valid_777175 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_777175 = validateParameter(valid_777175, JString, required = true,
                                 default = nil)
  if valid_777175 != nil:
    section.add "ServiceSpecificCredentialId", valid_777175
  var valid_777176 = query.getOrDefault("Version")
  valid_777176 = validateParameter(valid_777176, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777176 != nil:
    section.add "Version", valid_777176
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777177 = header.getOrDefault("X-Amz-Date")
  valid_777177 = validateParameter(valid_777177, JString, required = false,
                                 default = nil)
  if valid_777177 != nil:
    section.add "X-Amz-Date", valid_777177
  var valid_777178 = header.getOrDefault("X-Amz-Security-Token")
  valid_777178 = validateParameter(valid_777178, JString, required = false,
                                 default = nil)
  if valid_777178 != nil:
    section.add "X-Amz-Security-Token", valid_777178
  var valid_777179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777179 = validateParameter(valid_777179, JString, required = false,
                                 default = nil)
  if valid_777179 != nil:
    section.add "X-Amz-Content-Sha256", valid_777179
  var valid_777180 = header.getOrDefault("X-Amz-Algorithm")
  valid_777180 = validateParameter(valid_777180, JString, required = false,
                                 default = nil)
  if valid_777180 != nil:
    section.add "X-Amz-Algorithm", valid_777180
  var valid_777181 = header.getOrDefault("X-Amz-Signature")
  valid_777181 = validateParameter(valid_777181, JString, required = false,
                                 default = nil)
  if valid_777181 != nil:
    section.add "X-Amz-Signature", valid_777181
  var valid_777182 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777182 = validateParameter(valid_777182, JString, required = false,
                                 default = nil)
  if valid_777182 != nil:
    section.add "X-Amz-SignedHeaders", valid_777182
  var valid_777183 = header.getOrDefault("X-Amz-Credential")
  valid_777183 = validateParameter(valid_777183, JString, required = false,
                                 default = nil)
  if valid_777183 != nil:
    section.add "X-Amz-Credential", valid_777183
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777184: Call_GetResetServiceSpecificCredential_777170;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_777184.validator(path, query, header, formData, body)
  let scheme = call_777184.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777184.url(scheme.get, call_777184.host, call_777184.base,
                         call_777184.route, valid.getOrDefault("path"))
  result = hook(call_777184, url, valid)

proc call*(call_777185: Call_GetResetServiceSpecificCredential_777170;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_777186 = newJObject()
  add(query_777186, "UserName", newJString(UserName))
  add(query_777186, "Action", newJString(Action))
  add(query_777186, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_777186, "Version", newJString(Version))
  result = call_777185.call(nil, query_777186, nil, nil, nil)

var getResetServiceSpecificCredential* = Call_GetResetServiceSpecificCredential_777170(
    name: "getResetServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_GetResetServiceSpecificCredential_777171, base: "/",
    url: url_GetResetServiceSpecificCredential_777172,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResyncMFADevice_777224 = ref object of OpenApiRestCall_772597
proc url_PostResyncMFADevice_777226(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostResyncMFADevice_777225(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777227 = query.getOrDefault("Action")
  valid_777227 = validateParameter(valid_777227, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_777227 != nil:
    section.add "Action", valid_777227
  var valid_777228 = query.getOrDefault("Version")
  valid_777228 = validateParameter(valid_777228, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777228 != nil:
    section.add "Version", valid_777228
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777229 = header.getOrDefault("X-Amz-Date")
  valid_777229 = validateParameter(valid_777229, JString, required = false,
                                 default = nil)
  if valid_777229 != nil:
    section.add "X-Amz-Date", valid_777229
  var valid_777230 = header.getOrDefault("X-Amz-Security-Token")
  valid_777230 = validateParameter(valid_777230, JString, required = false,
                                 default = nil)
  if valid_777230 != nil:
    section.add "X-Amz-Security-Token", valid_777230
  var valid_777231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777231 = validateParameter(valid_777231, JString, required = false,
                                 default = nil)
  if valid_777231 != nil:
    section.add "X-Amz-Content-Sha256", valid_777231
  var valid_777232 = header.getOrDefault("X-Amz-Algorithm")
  valid_777232 = validateParameter(valid_777232, JString, required = false,
                                 default = nil)
  if valid_777232 != nil:
    section.add "X-Amz-Algorithm", valid_777232
  var valid_777233 = header.getOrDefault("X-Amz-Signature")
  valid_777233 = validateParameter(valid_777233, JString, required = false,
                                 default = nil)
  if valid_777233 != nil:
    section.add "X-Amz-Signature", valid_777233
  var valid_777234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777234 = validateParameter(valid_777234, JString, required = false,
                                 default = nil)
  if valid_777234 != nil:
    section.add "X-Amz-SignedHeaders", valid_777234
  var valid_777235 = header.getOrDefault("X-Amz-Credential")
  valid_777235 = validateParameter(valid_777235, JString, required = false,
                                 default = nil)
  if valid_777235 != nil:
    section.add "X-Amz-Credential", valid_777235
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_777236 = formData.getOrDefault("SerialNumber")
  valid_777236 = validateParameter(valid_777236, JString, required = true,
                                 default = nil)
  if valid_777236 != nil:
    section.add "SerialNumber", valid_777236
  var valid_777237 = formData.getOrDefault("UserName")
  valid_777237 = validateParameter(valid_777237, JString, required = true,
                                 default = nil)
  if valid_777237 != nil:
    section.add "UserName", valid_777237
  var valid_777238 = formData.getOrDefault("AuthenticationCode2")
  valid_777238 = validateParameter(valid_777238, JString, required = true,
                                 default = nil)
  if valid_777238 != nil:
    section.add "AuthenticationCode2", valid_777238
  var valid_777239 = formData.getOrDefault("AuthenticationCode1")
  valid_777239 = validateParameter(valid_777239, JString, required = true,
                                 default = nil)
  if valid_777239 != nil:
    section.add "AuthenticationCode1", valid_777239
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777240: Call_PostResyncMFADevice_777224; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_777240.validator(path, query, header, formData, body)
  let scheme = call_777240.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777240.url(scheme.get, call_777240.host, call_777240.base,
                         call_777240.route, valid.getOrDefault("path"))
  result = hook(call_777240, url, valid)

proc call*(call_777241: Call_PostResyncMFADevice_777224; SerialNumber: string;
          UserName: string; AuthenticationCode2: string;
          AuthenticationCode1: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   Version: string (required)
  var query_777242 = newJObject()
  var formData_777243 = newJObject()
  add(formData_777243, "SerialNumber", newJString(SerialNumber))
  add(formData_777243, "UserName", newJString(UserName))
  add(formData_777243, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_777242, "Action", newJString(Action))
  add(formData_777243, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_777242, "Version", newJString(Version))
  result = call_777241.call(nil, query_777242, nil, formData_777243, nil)

var postResyncMFADevice* = Call_PostResyncMFADevice_777224(
    name: "postResyncMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResyncMFADevice",
    validator: validate_PostResyncMFADevice_777225, base: "/",
    url: url_PostResyncMFADevice_777226, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResyncMFADevice_777205 = ref object of OpenApiRestCall_772597
proc url_GetResyncMFADevice_777207(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetResyncMFADevice_777206(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_777208 = query.getOrDefault("SerialNumber")
  valid_777208 = validateParameter(valid_777208, JString, required = true,
                                 default = nil)
  if valid_777208 != nil:
    section.add "SerialNumber", valid_777208
  var valid_777209 = query.getOrDefault("AuthenticationCode2")
  valid_777209 = validateParameter(valid_777209, JString, required = true,
                                 default = nil)
  if valid_777209 != nil:
    section.add "AuthenticationCode2", valid_777209
  var valid_777210 = query.getOrDefault("AuthenticationCode1")
  valid_777210 = validateParameter(valid_777210, JString, required = true,
                                 default = nil)
  if valid_777210 != nil:
    section.add "AuthenticationCode1", valid_777210
  var valid_777211 = query.getOrDefault("UserName")
  valid_777211 = validateParameter(valid_777211, JString, required = true,
                                 default = nil)
  if valid_777211 != nil:
    section.add "UserName", valid_777211
  var valid_777212 = query.getOrDefault("Action")
  valid_777212 = validateParameter(valid_777212, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_777212 != nil:
    section.add "Action", valid_777212
  var valid_777213 = query.getOrDefault("Version")
  valid_777213 = validateParameter(valid_777213, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777213 != nil:
    section.add "Version", valid_777213
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777214 = header.getOrDefault("X-Amz-Date")
  valid_777214 = validateParameter(valid_777214, JString, required = false,
                                 default = nil)
  if valid_777214 != nil:
    section.add "X-Amz-Date", valid_777214
  var valid_777215 = header.getOrDefault("X-Amz-Security-Token")
  valid_777215 = validateParameter(valid_777215, JString, required = false,
                                 default = nil)
  if valid_777215 != nil:
    section.add "X-Amz-Security-Token", valid_777215
  var valid_777216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777216 = validateParameter(valid_777216, JString, required = false,
                                 default = nil)
  if valid_777216 != nil:
    section.add "X-Amz-Content-Sha256", valid_777216
  var valid_777217 = header.getOrDefault("X-Amz-Algorithm")
  valid_777217 = validateParameter(valid_777217, JString, required = false,
                                 default = nil)
  if valid_777217 != nil:
    section.add "X-Amz-Algorithm", valid_777217
  var valid_777218 = header.getOrDefault("X-Amz-Signature")
  valid_777218 = validateParameter(valid_777218, JString, required = false,
                                 default = nil)
  if valid_777218 != nil:
    section.add "X-Amz-Signature", valid_777218
  var valid_777219 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777219 = validateParameter(valid_777219, JString, required = false,
                                 default = nil)
  if valid_777219 != nil:
    section.add "X-Amz-SignedHeaders", valid_777219
  var valid_777220 = header.getOrDefault("X-Amz-Credential")
  valid_777220 = validateParameter(valid_777220, JString, required = false,
                                 default = nil)
  if valid_777220 != nil:
    section.add "X-Amz-Credential", valid_777220
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777221: Call_GetResyncMFADevice_777205; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_777221.validator(path, query, header, formData, body)
  let scheme = call_777221.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777221.url(scheme.get, call_777221.host, call_777221.base,
                         call_777221.route, valid.getOrDefault("path"))
  result = hook(call_777221, url, valid)

proc call*(call_777222: Call_GetResyncMFADevice_777205; SerialNumber: string;
          AuthenticationCode2: string; AuthenticationCode1: string;
          UserName: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777223 = newJObject()
  add(query_777223, "SerialNumber", newJString(SerialNumber))
  add(query_777223, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_777223, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_777223, "UserName", newJString(UserName))
  add(query_777223, "Action", newJString(Action))
  add(query_777223, "Version", newJString(Version))
  result = call_777222.call(nil, query_777223, nil, nil, nil)

var getResyncMFADevice* = Call_GetResyncMFADevice_777205(
    name: "getResyncMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ResyncMFADevice", validator: validate_GetResyncMFADevice_777206,
    base: "/", url: url_GetResyncMFADevice_777207,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDefaultPolicyVersion_777261 = ref object of OpenApiRestCall_772597
proc url_PostSetDefaultPolicyVersion_777263(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetDefaultPolicyVersion_777262(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777264 = query.getOrDefault("Action")
  valid_777264 = validateParameter(valid_777264, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_777264 != nil:
    section.add "Action", valid_777264
  var valid_777265 = query.getOrDefault("Version")
  valid_777265 = validateParameter(valid_777265, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777265 != nil:
    section.add "Version", valid_777265
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777266 = header.getOrDefault("X-Amz-Date")
  valid_777266 = validateParameter(valid_777266, JString, required = false,
                                 default = nil)
  if valid_777266 != nil:
    section.add "X-Amz-Date", valid_777266
  var valid_777267 = header.getOrDefault("X-Amz-Security-Token")
  valid_777267 = validateParameter(valid_777267, JString, required = false,
                                 default = nil)
  if valid_777267 != nil:
    section.add "X-Amz-Security-Token", valid_777267
  var valid_777268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777268 = validateParameter(valid_777268, JString, required = false,
                                 default = nil)
  if valid_777268 != nil:
    section.add "X-Amz-Content-Sha256", valid_777268
  var valid_777269 = header.getOrDefault("X-Amz-Algorithm")
  valid_777269 = validateParameter(valid_777269, JString, required = false,
                                 default = nil)
  if valid_777269 != nil:
    section.add "X-Amz-Algorithm", valid_777269
  var valid_777270 = header.getOrDefault("X-Amz-Signature")
  valid_777270 = validateParameter(valid_777270, JString, required = false,
                                 default = nil)
  if valid_777270 != nil:
    section.add "X-Amz-Signature", valid_777270
  var valid_777271 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777271 = validateParameter(valid_777271, JString, required = false,
                                 default = nil)
  if valid_777271 != nil:
    section.add "X-Amz-SignedHeaders", valid_777271
  var valid_777272 = header.getOrDefault("X-Amz-Credential")
  valid_777272 = validateParameter(valid_777272, JString, required = false,
                                 default = nil)
  if valid_777272 != nil:
    section.add "X-Amz-Credential", valid_777272
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_777273 = formData.getOrDefault("PolicyArn")
  valid_777273 = validateParameter(valid_777273, JString, required = true,
                                 default = nil)
  if valid_777273 != nil:
    section.add "PolicyArn", valid_777273
  var valid_777274 = formData.getOrDefault("VersionId")
  valid_777274 = validateParameter(valid_777274, JString, required = true,
                                 default = nil)
  if valid_777274 != nil:
    section.add "VersionId", valid_777274
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777275: Call_PostSetDefaultPolicyVersion_777261; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_777275.validator(path, query, header, formData, body)
  let scheme = call_777275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777275.url(scheme.get, call_777275.host, call_777275.base,
                         call_777275.route, valid.getOrDefault("path"))
  result = hook(call_777275, url, valid)

proc call*(call_777276: Call_PostSetDefaultPolicyVersion_777261; PolicyArn: string;
          VersionId: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  var query_777277 = newJObject()
  var formData_777278 = newJObject()
  add(formData_777278, "PolicyArn", newJString(PolicyArn))
  add(query_777277, "Action", newJString(Action))
  add(query_777277, "Version", newJString(Version))
  add(formData_777278, "VersionId", newJString(VersionId))
  result = call_777276.call(nil, query_777277, nil, formData_777278, nil)

var postSetDefaultPolicyVersion* = Call_PostSetDefaultPolicyVersion_777261(
    name: "postSetDefaultPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_PostSetDefaultPolicyVersion_777262, base: "/",
    url: url_PostSetDefaultPolicyVersion_777263,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDefaultPolicyVersion_777244 = ref object of OpenApiRestCall_772597
proc url_GetSetDefaultPolicyVersion_777246(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetDefaultPolicyVersion_777245(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_777247 = query.getOrDefault("PolicyArn")
  valid_777247 = validateParameter(valid_777247, JString, required = true,
                                 default = nil)
  if valid_777247 != nil:
    section.add "PolicyArn", valid_777247
  var valid_777248 = query.getOrDefault("VersionId")
  valid_777248 = validateParameter(valid_777248, JString, required = true,
                                 default = nil)
  if valid_777248 != nil:
    section.add "VersionId", valid_777248
  var valid_777249 = query.getOrDefault("Action")
  valid_777249 = validateParameter(valid_777249, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_777249 != nil:
    section.add "Action", valid_777249
  var valid_777250 = query.getOrDefault("Version")
  valid_777250 = validateParameter(valid_777250, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777250 != nil:
    section.add "Version", valid_777250
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777251 = header.getOrDefault("X-Amz-Date")
  valid_777251 = validateParameter(valid_777251, JString, required = false,
                                 default = nil)
  if valid_777251 != nil:
    section.add "X-Amz-Date", valid_777251
  var valid_777252 = header.getOrDefault("X-Amz-Security-Token")
  valid_777252 = validateParameter(valid_777252, JString, required = false,
                                 default = nil)
  if valid_777252 != nil:
    section.add "X-Amz-Security-Token", valid_777252
  var valid_777253 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777253 = validateParameter(valid_777253, JString, required = false,
                                 default = nil)
  if valid_777253 != nil:
    section.add "X-Amz-Content-Sha256", valid_777253
  var valid_777254 = header.getOrDefault("X-Amz-Algorithm")
  valid_777254 = validateParameter(valid_777254, JString, required = false,
                                 default = nil)
  if valid_777254 != nil:
    section.add "X-Amz-Algorithm", valid_777254
  var valid_777255 = header.getOrDefault("X-Amz-Signature")
  valid_777255 = validateParameter(valid_777255, JString, required = false,
                                 default = nil)
  if valid_777255 != nil:
    section.add "X-Amz-Signature", valid_777255
  var valid_777256 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777256 = validateParameter(valid_777256, JString, required = false,
                                 default = nil)
  if valid_777256 != nil:
    section.add "X-Amz-SignedHeaders", valid_777256
  var valid_777257 = header.getOrDefault("X-Amz-Credential")
  valid_777257 = validateParameter(valid_777257, JString, required = false,
                                 default = nil)
  if valid_777257 != nil:
    section.add "X-Amz-Credential", valid_777257
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777258: Call_GetSetDefaultPolicyVersion_777244; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_777258.validator(path, query, header, formData, body)
  let scheme = call_777258.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777258.url(scheme.get, call_777258.host, call_777258.base,
                         call_777258.route, valid.getOrDefault("path"))
  result = hook(call_777258, url, valid)

proc call*(call_777259: Call_GetSetDefaultPolicyVersion_777244; PolicyArn: string;
          VersionId: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777260 = newJObject()
  add(query_777260, "PolicyArn", newJString(PolicyArn))
  add(query_777260, "VersionId", newJString(VersionId))
  add(query_777260, "Action", newJString(Action))
  add(query_777260, "Version", newJString(Version))
  result = call_777259.call(nil, query_777260, nil, nil, nil)

var getSetDefaultPolicyVersion* = Call_GetSetDefaultPolicyVersion_777244(
    name: "getSetDefaultPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_GetSetDefaultPolicyVersion_777245, base: "/",
    url: url_GetSetDefaultPolicyVersion_777246,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetSecurityTokenServicePreferences_777295 = ref object of OpenApiRestCall_772597
proc url_PostSetSecurityTokenServicePreferences_777297(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetSecurityTokenServicePreferences_777296(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777298 = query.getOrDefault("Action")
  valid_777298 = validateParameter(valid_777298, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_777298 != nil:
    section.add "Action", valid_777298
  var valid_777299 = query.getOrDefault("Version")
  valid_777299 = validateParameter(valid_777299, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777299 != nil:
    section.add "Version", valid_777299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777300 = header.getOrDefault("X-Amz-Date")
  valid_777300 = validateParameter(valid_777300, JString, required = false,
                                 default = nil)
  if valid_777300 != nil:
    section.add "X-Amz-Date", valid_777300
  var valid_777301 = header.getOrDefault("X-Amz-Security-Token")
  valid_777301 = validateParameter(valid_777301, JString, required = false,
                                 default = nil)
  if valid_777301 != nil:
    section.add "X-Amz-Security-Token", valid_777301
  var valid_777302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777302 = validateParameter(valid_777302, JString, required = false,
                                 default = nil)
  if valid_777302 != nil:
    section.add "X-Amz-Content-Sha256", valid_777302
  var valid_777303 = header.getOrDefault("X-Amz-Algorithm")
  valid_777303 = validateParameter(valid_777303, JString, required = false,
                                 default = nil)
  if valid_777303 != nil:
    section.add "X-Amz-Algorithm", valid_777303
  var valid_777304 = header.getOrDefault("X-Amz-Signature")
  valid_777304 = validateParameter(valid_777304, JString, required = false,
                                 default = nil)
  if valid_777304 != nil:
    section.add "X-Amz-Signature", valid_777304
  var valid_777305 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777305 = validateParameter(valid_777305, JString, required = false,
                                 default = nil)
  if valid_777305 != nil:
    section.add "X-Amz-SignedHeaders", valid_777305
  var valid_777306 = header.getOrDefault("X-Amz-Credential")
  valid_777306 = validateParameter(valid_777306, JString, required = false,
                                 default = nil)
  if valid_777306 != nil:
    section.add "X-Amz-Credential", valid_777306
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalEndpointTokenVersion` field"
  var valid_777307 = formData.getOrDefault("GlobalEndpointTokenVersion")
  valid_777307 = validateParameter(valid_777307, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_777307 != nil:
    section.add "GlobalEndpointTokenVersion", valid_777307
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777308: Call_PostSetSecurityTokenServicePreferences_777295;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_777308.validator(path, query, header, formData, body)
  let scheme = call_777308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777308.url(scheme.get, call_777308.host, call_777308.base,
                         call_777308.route, valid.getOrDefault("path"))
  result = hook(call_777308, url, valid)

proc call*(call_777309: Call_PostSetSecurityTokenServicePreferences_777295;
          Action: string = "SetSecurityTokenServicePreferences";
          GlobalEndpointTokenVersion: string = "v1Token";
          Version: string = "2010-05-08"): Recallable =
  ## postSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   Action: string (required)
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_777310 = newJObject()
  var formData_777311 = newJObject()
  add(query_777310, "Action", newJString(Action))
  add(formData_777311, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_777310, "Version", newJString(Version))
  result = call_777309.call(nil, query_777310, nil, formData_777311, nil)

var postSetSecurityTokenServicePreferences* = Call_PostSetSecurityTokenServicePreferences_777295(
    name: "postSetSecurityTokenServicePreferences", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_PostSetSecurityTokenServicePreferences_777296, base: "/",
    url: url_PostSetSecurityTokenServicePreferences_777297,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetSecurityTokenServicePreferences_777279 = ref object of OpenApiRestCall_772597
proc url_GetSetSecurityTokenServicePreferences_777281(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetSecurityTokenServicePreferences_777280(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777282 = query.getOrDefault("Action")
  valid_777282 = validateParameter(valid_777282, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_777282 != nil:
    section.add "Action", valid_777282
  var valid_777283 = query.getOrDefault("GlobalEndpointTokenVersion")
  valid_777283 = validateParameter(valid_777283, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_777283 != nil:
    section.add "GlobalEndpointTokenVersion", valid_777283
  var valid_777284 = query.getOrDefault("Version")
  valid_777284 = validateParameter(valid_777284, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777284 != nil:
    section.add "Version", valid_777284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777285 = header.getOrDefault("X-Amz-Date")
  valid_777285 = validateParameter(valid_777285, JString, required = false,
                                 default = nil)
  if valid_777285 != nil:
    section.add "X-Amz-Date", valid_777285
  var valid_777286 = header.getOrDefault("X-Amz-Security-Token")
  valid_777286 = validateParameter(valid_777286, JString, required = false,
                                 default = nil)
  if valid_777286 != nil:
    section.add "X-Amz-Security-Token", valid_777286
  var valid_777287 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777287 = validateParameter(valid_777287, JString, required = false,
                                 default = nil)
  if valid_777287 != nil:
    section.add "X-Amz-Content-Sha256", valid_777287
  var valid_777288 = header.getOrDefault("X-Amz-Algorithm")
  valid_777288 = validateParameter(valid_777288, JString, required = false,
                                 default = nil)
  if valid_777288 != nil:
    section.add "X-Amz-Algorithm", valid_777288
  var valid_777289 = header.getOrDefault("X-Amz-Signature")
  valid_777289 = validateParameter(valid_777289, JString, required = false,
                                 default = nil)
  if valid_777289 != nil:
    section.add "X-Amz-Signature", valid_777289
  var valid_777290 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777290 = validateParameter(valid_777290, JString, required = false,
                                 default = nil)
  if valid_777290 != nil:
    section.add "X-Amz-SignedHeaders", valid_777290
  var valid_777291 = header.getOrDefault("X-Amz-Credential")
  valid_777291 = validateParameter(valid_777291, JString, required = false,
                                 default = nil)
  if valid_777291 != nil:
    section.add "X-Amz-Credential", valid_777291
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777292: Call_GetSetSecurityTokenServicePreferences_777279;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_777292.validator(path, query, header, formData, body)
  let scheme = call_777292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777292.url(scheme.get, call_777292.host, call_777292.base,
                         call_777292.route, valid.getOrDefault("path"))
  result = hook(call_777292, url, valid)

proc call*(call_777293: Call_GetSetSecurityTokenServicePreferences_777279;
          Action: string = "SetSecurityTokenServicePreferences";
          GlobalEndpointTokenVersion: string = "v1Token";
          Version: string = "2010-05-08"): Recallable =
  ## getSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   Action: string (required)
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_777294 = newJObject()
  add(query_777294, "Action", newJString(Action))
  add(query_777294, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_777294, "Version", newJString(Version))
  result = call_777293.call(nil, query_777294, nil, nil, nil)

var getSetSecurityTokenServicePreferences* = Call_GetSetSecurityTokenServicePreferences_777279(
    name: "getSetSecurityTokenServicePreferences", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_GetSetSecurityTokenServicePreferences_777280, base: "/",
    url: url_GetSetSecurityTokenServicePreferences_777281,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulateCustomPolicy_777337 = ref object of OpenApiRestCall_772597
proc url_PostSimulateCustomPolicy_777339(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSimulateCustomPolicy_777338(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777340 = query.getOrDefault("Action")
  valid_777340 = validateParameter(valid_777340, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_777340 != nil:
    section.add "Action", valid_777340
  var valid_777341 = query.getOrDefault("Version")
  valid_777341 = validateParameter(valid_777341, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777341 != nil:
    section.add "Version", valid_777341
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777342 = header.getOrDefault("X-Amz-Date")
  valid_777342 = validateParameter(valid_777342, JString, required = false,
                                 default = nil)
  if valid_777342 != nil:
    section.add "X-Amz-Date", valid_777342
  var valid_777343 = header.getOrDefault("X-Amz-Security-Token")
  valid_777343 = validateParameter(valid_777343, JString, required = false,
                                 default = nil)
  if valid_777343 != nil:
    section.add "X-Amz-Security-Token", valid_777343
  var valid_777344 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777344 = validateParameter(valid_777344, JString, required = false,
                                 default = nil)
  if valid_777344 != nil:
    section.add "X-Amz-Content-Sha256", valid_777344
  var valid_777345 = header.getOrDefault("X-Amz-Algorithm")
  valid_777345 = validateParameter(valid_777345, JString, required = false,
                                 default = nil)
  if valid_777345 != nil:
    section.add "X-Amz-Algorithm", valid_777345
  var valid_777346 = header.getOrDefault("X-Amz-Signature")
  valid_777346 = validateParameter(valid_777346, JString, required = false,
                                 default = nil)
  if valid_777346 != nil:
    section.add "X-Amz-Signature", valid_777346
  var valid_777347 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777347 = validateParameter(valid_777347, JString, required = false,
                                 default = nil)
  if valid_777347 != nil:
    section.add "X-Amz-SignedHeaders", valid_777347
  var valid_777348 = header.getOrDefault("X-Amz-Credential")
  valid_777348 = validateParameter(valid_777348, JString, required = false,
                                 default = nil)
  if valid_777348 != nil:
    section.add "X-Amz-Credential", valid_777348
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  var valid_777349 = formData.getOrDefault("ResourceArns")
  valid_777349 = validateParameter(valid_777349, JArray, required = false,
                                 default = nil)
  if valid_777349 != nil:
    section.add "ResourceArns", valid_777349
  var valid_777350 = formData.getOrDefault("ContextEntries")
  valid_777350 = validateParameter(valid_777350, JArray, required = false,
                                 default = nil)
  if valid_777350 != nil:
    section.add "ContextEntries", valid_777350
  var valid_777351 = formData.getOrDefault("CallerArn")
  valid_777351 = validateParameter(valid_777351, JString, required = false,
                                 default = nil)
  if valid_777351 != nil:
    section.add "CallerArn", valid_777351
  var valid_777352 = formData.getOrDefault("ResourceOwner")
  valid_777352 = validateParameter(valid_777352, JString, required = false,
                                 default = nil)
  if valid_777352 != nil:
    section.add "ResourceOwner", valid_777352
  assert formData != nil,
        "formData argument is necessary due to required `ActionNames` field"
  var valid_777353 = formData.getOrDefault("ActionNames")
  valid_777353 = validateParameter(valid_777353, JArray, required = true, default = nil)
  if valid_777353 != nil:
    section.add "ActionNames", valid_777353
  var valid_777354 = formData.getOrDefault("Marker")
  valid_777354 = validateParameter(valid_777354, JString, required = false,
                                 default = nil)
  if valid_777354 != nil:
    section.add "Marker", valid_777354
  var valid_777355 = formData.getOrDefault("PolicyInputList")
  valid_777355 = validateParameter(valid_777355, JArray, required = true, default = nil)
  if valid_777355 != nil:
    section.add "PolicyInputList", valid_777355
  var valid_777356 = formData.getOrDefault("ResourceHandlingOption")
  valid_777356 = validateParameter(valid_777356, JString, required = false,
                                 default = nil)
  if valid_777356 != nil:
    section.add "ResourceHandlingOption", valid_777356
  var valid_777357 = formData.getOrDefault("MaxItems")
  valid_777357 = validateParameter(valid_777357, JInt, required = false, default = nil)
  if valid_777357 != nil:
    section.add "MaxItems", valid_777357
  var valid_777358 = formData.getOrDefault("ResourcePolicy")
  valid_777358 = validateParameter(valid_777358, JString, required = false,
                                 default = nil)
  if valid_777358 != nil:
    section.add "ResourcePolicy", valid_777358
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777359: Call_PostSimulateCustomPolicy_777337; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_777359.validator(path, query, header, formData, body)
  let scheme = call_777359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777359.url(scheme.get, call_777359.host, call_777359.base,
                         call_777359.route, valid.getOrDefault("path"))
  result = hook(call_777359, url, valid)

proc call*(call_777360: Call_PostSimulateCustomPolicy_777337;
          ActionNames: JsonNode; PolicyInputList: JsonNode;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceOwner: string = ""; Marker: string = "";
          Action: string = "SimulateCustomPolicy";
          ResourceHandlingOption: string = ""; MaxItems: int = 0;
          ResourcePolicy: string = ""; Version: string = "2010-05-08"): Recallable =
  ## postSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_777361 = newJObject()
  var formData_777362 = newJObject()
  if ResourceArns != nil:
    formData_777362.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_777362.add "ContextEntries", ContextEntries
  add(formData_777362, "CallerArn", newJString(CallerArn))
  add(formData_777362, "ResourceOwner", newJString(ResourceOwner))
  if ActionNames != nil:
    formData_777362.add "ActionNames", ActionNames
  add(formData_777362, "Marker", newJString(Marker))
  add(query_777361, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_777362.add "PolicyInputList", PolicyInputList
  add(formData_777362, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  add(formData_777362, "MaxItems", newJInt(MaxItems))
  add(formData_777362, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_777361, "Version", newJString(Version))
  result = call_777360.call(nil, query_777361, nil, formData_777362, nil)

var postSimulateCustomPolicy* = Call_PostSimulateCustomPolicy_777337(
    name: "postSimulateCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_PostSimulateCustomPolicy_777338, base: "/",
    url: url_PostSimulateCustomPolicy_777339, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulateCustomPolicy_777312 = ref object of OpenApiRestCall_772597
proc url_GetSimulateCustomPolicy_777314(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSimulateCustomPolicy_777313(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_777315 = query.getOrDefault("ContextEntries")
  valid_777315 = validateParameter(valid_777315, JArray, required = false,
                                 default = nil)
  if valid_777315 != nil:
    section.add "ContextEntries", valid_777315
  var valid_777316 = query.getOrDefault("ResourcePolicy")
  valid_777316 = validateParameter(valid_777316, JString, required = false,
                                 default = nil)
  if valid_777316 != nil:
    section.add "ResourcePolicy", valid_777316
  assert query != nil,
        "query argument is necessary due to required `ActionNames` field"
  var valid_777317 = query.getOrDefault("ActionNames")
  valid_777317 = validateParameter(valid_777317, JArray, required = true, default = nil)
  if valid_777317 != nil:
    section.add "ActionNames", valid_777317
  var valid_777318 = query.getOrDefault("PolicyInputList")
  valid_777318 = validateParameter(valid_777318, JArray, required = true, default = nil)
  if valid_777318 != nil:
    section.add "PolicyInputList", valid_777318
  var valid_777319 = query.getOrDefault("Action")
  valid_777319 = validateParameter(valid_777319, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_777319 != nil:
    section.add "Action", valid_777319
  var valid_777320 = query.getOrDefault("ResourceArns")
  valid_777320 = validateParameter(valid_777320, JArray, required = false,
                                 default = nil)
  if valid_777320 != nil:
    section.add "ResourceArns", valid_777320
  var valid_777321 = query.getOrDefault("Marker")
  valid_777321 = validateParameter(valid_777321, JString, required = false,
                                 default = nil)
  if valid_777321 != nil:
    section.add "Marker", valid_777321
  var valid_777322 = query.getOrDefault("ResourceOwner")
  valid_777322 = validateParameter(valid_777322, JString, required = false,
                                 default = nil)
  if valid_777322 != nil:
    section.add "ResourceOwner", valid_777322
  var valid_777323 = query.getOrDefault("CallerArn")
  valid_777323 = validateParameter(valid_777323, JString, required = false,
                                 default = nil)
  if valid_777323 != nil:
    section.add "CallerArn", valid_777323
  var valid_777324 = query.getOrDefault("ResourceHandlingOption")
  valid_777324 = validateParameter(valid_777324, JString, required = false,
                                 default = nil)
  if valid_777324 != nil:
    section.add "ResourceHandlingOption", valid_777324
  var valid_777325 = query.getOrDefault("MaxItems")
  valid_777325 = validateParameter(valid_777325, JInt, required = false, default = nil)
  if valid_777325 != nil:
    section.add "MaxItems", valid_777325
  var valid_777326 = query.getOrDefault("Version")
  valid_777326 = validateParameter(valid_777326, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777326 != nil:
    section.add "Version", valid_777326
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777327 = header.getOrDefault("X-Amz-Date")
  valid_777327 = validateParameter(valid_777327, JString, required = false,
                                 default = nil)
  if valid_777327 != nil:
    section.add "X-Amz-Date", valid_777327
  var valid_777328 = header.getOrDefault("X-Amz-Security-Token")
  valid_777328 = validateParameter(valid_777328, JString, required = false,
                                 default = nil)
  if valid_777328 != nil:
    section.add "X-Amz-Security-Token", valid_777328
  var valid_777329 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777329 = validateParameter(valid_777329, JString, required = false,
                                 default = nil)
  if valid_777329 != nil:
    section.add "X-Amz-Content-Sha256", valid_777329
  var valid_777330 = header.getOrDefault("X-Amz-Algorithm")
  valid_777330 = validateParameter(valid_777330, JString, required = false,
                                 default = nil)
  if valid_777330 != nil:
    section.add "X-Amz-Algorithm", valid_777330
  var valid_777331 = header.getOrDefault("X-Amz-Signature")
  valid_777331 = validateParameter(valid_777331, JString, required = false,
                                 default = nil)
  if valid_777331 != nil:
    section.add "X-Amz-Signature", valid_777331
  var valid_777332 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777332 = validateParameter(valid_777332, JString, required = false,
                                 default = nil)
  if valid_777332 != nil:
    section.add "X-Amz-SignedHeaders", valid_777332
  var valid_777333 = header.getOrDefault("X-Amz-Credential")
  valid_777333 = validateParameter(valid_777333, JString, required = false,
                                 default = nil)
  if valid_777333 != nil:
    section.add "X-Amz-Credential", valid_777333
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777334: Call_GetSimulateCustomPolicy_777312; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_777334.validator(path, query, header, formData, body)
  let scheme = call_777334.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777334.url(scheme.get, call_777334.host, call_777334.base,
                         call_777334.route, valid.getOrDefault("path"))
  result = hook(call_777334, url, valid)

proc call*(call_777335: Call_GetSimulateCustomPolicy_777312; ActionNames: JsonNode;
          PolicyInputList: JsonNode; ContextEntries: JsonNode = nil;
          ResourcePolicy: string = ""; Action: string = "SimulateCustomPolicy";
          ResourceArns: JsonNode = nil; Marker: string = ""; ResourceOwner: string = "";
          CallerArn: string = ""; ResourceHandlingOption: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_777336 = newJObject()
  if ContextEntries != nil:
    query_777336.add "ContextEntries", ContextEntries
  add(query_777336, "ResourcePolicy", newJString(ResourcePolicy))
  if ActionNames != nil:
    query_777336.add "ActionNames", ActionNames
  if PolicyInputList != nil:
    query_777336.add "PolicyInputList", PolicyInputList
  add(query_777336, "Action", newJString(Action))
  if ResourceArns != nil:
    query_777336.add "ResourceArns", ResourceArns
  add(query_777336, "Marker", newJString(Marker))
  add(query_777336, "ResourceOwner", newJString(ResourceOwner))
  add(query_777336, "CallerArn", newJString(CallerArn))
  add(query_777336, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_777336, "MaxItems", newJInt(MaxItems))
  add(query_777336, "Version", newJString(Version))
  result = call_777335.call(nil, query_777336, nil, nil, nil)

var getSimulateCustomPolicy* = Call_GetSimulateCustomPolicy_777312(
    name: "getSimulateCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_GetSimulateCustomPolicy_777313, base: "/",
    url: url_GetSimulateCustomPolicy_777314, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulatePrincipalPolicy_777389 = ref object of OpenApiRestCall_772597
proc url_PostSimulatePrincipalPolicy_777391(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSimulatePrincipalPolicy_777390(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777392 = query.getOrDefault("Action")
  valid_777392 = validateParameter(valid_777392, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_777392 != nil:
    section.add "Action", valid_777392
  var valid_777393 = query.getOrDefault("Version")
  valid_777393 = validateParameter(valid_777393, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777393 != nil:
    section.add "Version", valid_777393
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777394 = header.getOrDefault("X-Amz-Date")
  valid_777394 = validateParameter(valid_777394, JString, required = false,
                                 default = nil)
  if valid_777394 != nil:
    section.add "X-Amz-Date", valid_777394
  var valid_777395 = header.getOrDefault("X-Amz-Security-Token")
  valid_777395 = validateParameter(valid_777395, JString, required = false,
                                 default = nil)
  if valid_777395 != nil:
    section.add "X-Amz-Security-Token", valid_777395
  var valid_777396 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777396 = validateParameter(valid_777396, JString, required = false,
                                 default = nil)
  if valid_777396 != nil:
    section.add "X-Amz-Content-Sha256", valid_777396
  var valid_777397 = header.getOrDefault("X-Amz-Algorithm")
  valid_777397 = validateParameter(valid_777397, JString, required = false,
                                 default = nil)
  if valid_777397 != nil:
    section.add "X-Amz-Algorithm", valid_777397
  var valid_777398 = header.getOrDefault("X-Amz-Signature")
  valid_777398 = validateParameter(valid_777398, JString, required = false,
                                 default = nil)
  if valid_777398 != nil:
    section.add "X-Amz-Signature", valid_777398
  var valid_777399 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777399 = validateParameter(valid_777399, JString, required = false,
                                 default = nil)
  if valid_777399 != nil:
    section.add "X-Amz-SignedHeaders", valid_777399
  var valid_777400 = header.getOrDefault("X-Amz-Credential")
  valid_777400 = validateParameter(valid_777400, JString, required = false,
                                 default = nil)
  if valid_777400 != nil:
    section.add "X-Amz-Credential", valid_777400
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  var valid_777401 = formData.getOrDefault("ResourceArns")
  valid_777401 = validateParameter(valid_777401, JArray, required = false,
                                 default = nil)
  if valid_777401 != nil:
    section.add "ResourceArns", valid_777401
  var valid_777402 = formData.getOrDefault("ContextEntries")
  valid_777402 = validateParameter(valid_777402, JArray, required = false,
                                 default = nil)
  if valid_777402 != nil:
    section.add "ContextEntries", valid_777402
  var valid_777403 = formData.getOrDefault("CallerArn")
  valid_777403 = validateParameter(valid_777403, JString, required = false,
                                 default = nil)
  if valid_777403 != nil:
    section.add "CallerArn", valid_777403
  var valid_777404 = formData.getOrDefault("ResourceOwner")
  valid_777404 = validateParameter(valid_777404, JString, required = false,
                                 default = nil)
  if valid_777404 != nil:
    section.add "ResourceOwner", valid_777404
  assert formData != nil,
        "formData argument is necessary due to required `ActionNames` field"
  var valid_777405 = formData.getOrDefault("ActionNames")
  valid_777405 = validateParameter(valid_777405, JArray, required = true, default = nil)
  if valid_777405 != nil:
    section.add "ActionNames", valid_777405
  var valid_777406 = formData.getOrDefault("Marker")
  valid_777406 = validateParameter(valid_777406, JString, required = false,
                                 default = nil)
  if valid_777406 != nil:
    section.add "Marker", valid_777406
  var valid_777407 = formData.getOrDefault("PolicyInputList")
  valid_777407 = validateParameter(valid_777407, JArray, required = false,
                                 default = nil)
  if valid_777407 != nil:
    section.add "PolicyInputList", valid_777407
  var valid_777408 = formData.getOrDefault("ResourceHandlingOption")
  valid_777408 = validateParameter(valid_777408, JString, required = false,
                                 default = nil)
  if valid_777408 != nil:
    section.add "ResourceHandlingOption", valid_777408
  var valid_777409 = formData.getOrDefault("PolicySourceArn")
  valid_777409 = validateParameter(valid_777409, JString, required = true,
                                 default = nil)
  if valid_777409 != nil:
    section.add "PolicySourceArn", valid_777409
  var valid_777410 = formData.getOrDefault("MaxItems")
  valid_777410 = validateParameter(valid_777410, JInt, required = false, default = nil)
  if valid_777410 != nil:
    section.add "MaxItems", valid_777410
  var valid_777411 = formData.getOrDefault("ResourcePolicy")
  valid_777411 = validateParameter(valid_777411, JString, required = false,
                                 default = nil)
  if valid_777411 != nil:
    section.add "ResourcePolicy", valid_777411
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777412: Call_PostSimulatePrincipalPolicy_777389; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_777412.validator(path, query, header, formData, body)
  let scheme = call_777412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777412.url(scheme.get, call_777412.host, call_777412.base,
                         call_777412.route, valid.getOrDefault("path"))
  result = hook(call_777412, url, valid)

proc call*(call_777413: Call_PostSimulatePrincipalPolicy_777389;
          ActionNames: JsonNode; PolicySourceArn: string;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceOwner: string = ""; Marker: string = "";
          Action: string = "SimulatePrincipalPolicy";
          PolicyInputList: JsonNode = nil; ResourceHandlingOption: string = "";
          MaxItems: int = 0; ResourcePolicy: string = ""; Version: string = "2010-05-08"): Recallable =
  ## postSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_777414 = newJObject()
  var formData_777415 = newJObject()
  if ResourceArns != nil:
    formData_777415.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_777415.add "ContextEntries", ContextEntries
  add(formData_777415, "CallerArn", newJString(CallerArn))
  add(formData_777415, "ResourceOwner", newJString(ResourceOwner))
  if ActionNames != nil:
    formData_777415.add "ActionNames", ActionNames
  add(formData_777415, "Marker", newJString(Marker))
  add(query_777414, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_777415.add "PolicyInputList", PolicyInputList
  add(formData_777415, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  add(formData_777415, "PolicySourceArn", newJString(PolicySourceArn))
  add(formData_777415, "MaxItems", newJInt(MaxItems))
  add(formData_777415, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_777414, "Version", newJString(Version))
  result = call_777413.call(nil, query_777414, nil, formData_777415, nil)

var postSimulatePrincipalPolicy* = Call_PostSimulatePrincipalPolicy_777389(
    name: "postSimulatePrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_PostSimulatePrincipalPolicy_777390, base: "/",
    url: url_PostSimulatePrincipalPolicy_777391,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulatePrincipalPolicy_777363 = ref object of OpenApiRestCall_772597
proc url_GetSimulatePrincipalPolicy_777365(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSimulatePrincipalPolicy_777364(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_777366 = query.getOrDefault("ContextEntries")
  valid_777366 = validateParameter(valid_777366, JArray, required = false,
                                 default = nil)
  if valid_777366 != nil:
    section.add "ContextEntries", valid_777366
  var valid_777367 = query.getOrDefault("ResourcePolicy")
  valid_777367 = validateParameter(valid_777367, JString, required = false,
                                 default = nil)
  if valid_777367 != nil:
    section.add "ResourcePolicy", valid_777367
  assert query != nil,
        "query argument is necessary due to required `ActionNames` field"
  var valid_777368 = query.getOrDefault("ActionNames")
  valid_777368 = validateParameter(valid_777368, JArray, required = true, default = nil)
  if valid_777368 != nil:
    section.add "ActionNames", valid_777368
  var valid_777369 = query.getOrDefault("PolicyInputList")
  valid_777369 = validateParameter(valid_777369, JArray, required = false,
                                 default = nil)
  if valid_777369 != nil:
    section.add "PolicyInputList", valid_777369
  var valid_777370 = query.getOrDefault("PolicySourceArn")
  valid_777370 = validateParameter(valid_777370, JString, required = true,
                                 default = nil)
  if valid_777370 != nil:
    section.add "PolicySourceArn", valid_777370
  var valid_777371 = query.getOrDefault("Action")
  valid_777371 = validateParameter(valid_777371, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_777371 != nil:
    section.add "Action", valid_777371
  var valid_777372 = query.getOrDefault("ResourceArns")
  valid_777372 = validateParameter(valid_777372, JArray, required = false,
                                 default = nil)
  if valid_777372 != nil:
    section.add "ResourceArns", valid_777372
  var valid_777373 = query.getOrDefault("Marker")
  valid_777373 = validateParameter(valid_777373, JString, required = false,
                                 default = nil)
  if valid_777373 != nil:
    section.add "Marker", valid_777373
  var valid_777374 = query.getOrDefault("ResourceOwner")
  valid_777374 = validateParameter(valid_777374, JString, required = false,
                                 default = nil)
  if valid_777374 != nil:
    section.add "ResourceOwner", valid_777374
  var valid_777375 = query.getOrDefault("CallerArn")
  valid_777375 = validateParameter(valid_777375, JString, required = false,
                                 default = nil)
  if valid_777375 != nil:
    section.add "CallerArn", valid_777375
  var valid_777376 = query.getOrDefault("ResourceHandlingOption")
  valid_777376 = validateParameter(valid_777376, JString, required = false,
                                 default = nil)
  if valid_777376 != nil:
    section.add "ResourceHandlingOption", valid_777376
  var valid_777377 = query.getOrDefault("MaxItems")
  valid_777377 = validateParameter(valid_777377, JInt, required = false, default = nil)
  if valid_777377 != nil:
    section.add "MaxItems", valid_777377
  var valid_777378 = query.getOrDefault("Version")
  valid_777378 = validateParameter(valid_777378, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777378 != nil:
    section.add "Version", valid_777378
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777379 = header.getOrDefault("X-Amz-Date")
  valid_777379 = validateParameter(valid_777379, JString, required = false,
                                 default = nil)
  if valid_777379 != nil:
    section.add "X-Amz-Date", valid_777379
  var valid_777380 = header.getOrDefault("X-Amz-Security-Token")
  valid_777380 = validateParameter(valid_777380, JString, required = false,
                                 default = nil)
  if valid_777380 != nil:
    section.add "X-Amz-Security-Token", valid_777380
  var valid_777381 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777381 = validateParameter(valid_777381, JString, required = false,
                                 default = nil)
  if valid_777381 != nil:
    section.add "X-Amz-Content-Sha256", valid_777381
  var valid_777382 = header.getOrDefault("X-Amz-Algorithm")
  valid_777382 = validateParameter(valid_777382, JString, required = false,
                                 default = nil)
  if valid_777382 != nil:
    section.add "X-Amz-Algorithm", valid_777382
  var valid_777383 = header.getOrDefault("X-Amz-Signature")
  valid_777383 = validateParameter(valid_777383, JString, required = false,
                                 default = nil)
  if valid_777383 != nil:
    section.add "X-Amz-Signature", valid_777383
  var valid_777384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777384 = validateParameter(valid_777384, JString, required = false,
                                 default = nil)
  if valid_777384 != nil:
    section.add "X-Amz-SignedHeaders", valid_777384
  var valid_777385 = header.getOrDefault("X-Amz-Credential")
  valid_777385 = validateParameter(valid_777385, JString, required = false,
                                 default = nil)
  if valid_777385 != nil:
    section.add "X-Amz-Credential", valid_777385
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777386: Call_GetSimulatePrincipalPolicy_777363; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_777386.validator(path, query, header, formData, body)
  let scheme = call_777386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777386.url(scheme.get, call_777386.host, call_777386.base,
                         call_777386.route, valid.getOrDefault("path"))
  result = hook(call_777386, url, valid)

proc call*(call_777387: Call_GetSimulatePrincipalPolicy_777363;
          ActionNames: JsonNode; PolicySourceArn: string;
          ContextEntries: JsonNode = nil; ResourcePolicy: string = "";
          PolicyInputList: JsonNode = nil;
          Action: string = "SimulatePrincipalPolicy"; ResourceArns: JsonNode = nil;
          Marker: string = ""; ResourceOwner: string = ""; CallerArn: string = "";
          ResourceHandlingOption: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_777388 = newJObject()
  if ContextEntries != nil:
    query_777388.add "ContextEntries", ContextEntries
  add(query_777388, "ResourcePolicy", newJString(ResourcePolicy))
  if ActionNames != nil:
    query_777388.add "ActionNames", ActionNames
  if PolicyInputList != nil:
    query_777388.add "PolicyInputList", PolicyInputList
  add(query_777388, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_777388, "Action", newJString(Action))
  if ResourceArns != nil:
    query_777388.add "ResourceArns", ResourceArns
  add(query_777388, "Marker", newJString(Marker))
  add(query_777388, "ResourceOwner", newJString(ResourceOwner))
  add(query_777388, "CallerArn", newJString(CallerArn))
  add(query_777388, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_777388, "MaxItems", newJInt(MaxItems))
  add(query_777388, "Version", newJString(Version))
  result = call_777387.call(nil, query_777388, nil, nil, nil)

var getSimulatePrincipalPolicy* = Call_GetSimulatePrincipalPolicy_777363(
    name: "getSimulatePrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_GetSimulatePrincipalPolicy_777364, base: "/",
    url: url_GetSimulatePrincipalPolicy_777365,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagRole_777433 = ref object of OpenApiRestCall_772597
proc url_PostTagRole_777435(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostTagRole_777434(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777436 = query.getOrDefault("Action")
  valid_777436 = validateParameter(valid_777436, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_777436 != nil:
    section.add "Action", valid_777436
  var valid_777437 = query.getOrDefault("Version")
  valid_777437 = validateParameter(valid_777437, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777437 != nil:
    section.add "Version", valid_777437
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777438 = header.getOrDefault("X-Amz-Date")
  valid_777438 = validateParameter(valid_777438, JString, required = false,
                                 default = nil)
  if valid_777438 != nil:
    section.add "X-Amz-Date", valid_777438
  var valid_777439 = header.getOrDefault("X-Amz-Security-Token")
  valid_777439 = validateParameter(valid_777439, JString, required = false,
                                 default = nil)
  if valid_777439 != nil:
    section.add "X-Amz-Security-Token", valid_777439
  var valid_777440 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777440 = validateParameter(valid_777440, JString, required = false,
                                 default = nil)
  if valid_777440 != nil:
    section.add "X-Amz-Content-Sha256", valid_777440
  var valid_777441 = header.getOrDefault("X-Amz-Algorithm")
  valid_777441 = validateParameter(valid_777441, JString, required = false,
                                 default = nil)
  if valid_777441 != nil:
    section.add "X-Amz-Algorithm", valid_777441
  var valid_777442 = header.getOrDefault("X-Amz-Signature")
  valid_777442 = validateParameter(valid_777442, JString, required = false,
                                 default = nil)
  if valid_777442 != nil:
    section.add "X-Amz-Signature", valid_777442
  var valid_777443 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777443 = validateParameter(valid_777443, JString, required = false,
                                 default = nil)
  if valid_777443 != nil:
    section.add "X-Amz-SignedHeaders", valid_777443
  var valid_777444 = header.getOrDefault("X-Amz-Credential")
  valid_777444 = validateParameter(valid_777444, JString, required = false,
                                 default = nil)
  if valid_777444 != nil:
    section.add "X-Amz-Credential", valid_777444
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_777445 = formData.getOrDefault("RoleName")
  valid_777445 = validateParameter(valid_777445, JString, required = true,
                                 default = nil)
  if valid_777445 != nil:
    section.add "RoleName", valid_777445
  var valid_777446 = formData.getOrDefault("Tags")
  valid_777446 = validateParameter(valid_777446, JArray, required = true, default = nil)
  if valid_777446 != nil:
    section.add "Tags", valid_777446
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777447: Call_PostTagRole_777433; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_777447.validator(path, query, header, formData, body)
  let scheme = call_777447.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777447.url(scheme.get, call_777447.host, call_777447.base,
                         call_777447.route, valid.getOrDefault("path"))
  result = hook(call_777447, url, valid)

proc call*(call_777448: Call_PostTagRole_777433; RoleName: string; Tags: JsonNode;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## postTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777449 = newJObject()
  var formData_777450 = newJObject()
  add(formData_777450, "RoleName", newJString(RoleName))
  if Tags != nil:
    formData_777450.add "Tags", Tags
  add(query_777449, "Action", newJString(Action))
  add(query_777449, "Version", newJString(Version))
  result = call_777448.call(nil, query_777449, nil, formData_777450, nil)

var postTagRole* = Call_PostTagRole_777433(name: "postTagRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagRole",
                                        validator: validate_PostTagRole_777434,
                                        base: "/", url: url_PostTagRole_777435,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagRole_777416 = ref object of OpenApiRestCall_772597
proc url_GetTagRole_777418(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetTagRole_777417(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_777419 = query.getOrDefault("Tags")
  valid_777419 = validateParameter(valid_777419, JArray, required = true, default = nil)
  if valid_777419 != nil:
    section.add "Tags", valid_777419
  var valid_777420 = query.getOrDefault("Action")
  valid_777420 = validateParameter(valid_777420, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_777420 != nil:
    section.add "Action", valid_777420
  var valid_777421 = query.getOrDefault("RoleName")
  valid_777421 = validateParameter(valid_777421, JString, required = true,
                                 default = nil)
  if valid_777421 != nil:
    section.add "RoleName", valid_777421
  var valid_777422 = query.getOrDefault("Version")
  valid_777422 = validateParameter(valid_777422, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777422 != nil:
    section.add "Version", valid_777422
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777423 = header.getOrDefault("X-Amz-Date")
  valid_777423 = validateParameter(valid_777423, JString, required = false,
                                 default = nil)
  if valid_777423 != nil:
    section.add "X-Amz-Date", valid_777423
  var valid_777424 = header.getOrDefault("X-Amz-Security-Token")
  valid_777424 = validateParameter(valid_777424, JString, required = false,
                                 default = nil)
  if valid_777424 != nil:
    section.add "X-Amz-Security-Token", valid_777424
  var valid_777425 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777425 = validateParameter(valid_777425, JString, required = false,
                                 default = nil)
  if valid_777425 != nil:
    section.add "X-Amz-Content-Sha256", valid_777425
  var valid_777426 = header.getOrDefault("X-Amz-Algorithm")
  valid_777426 = validateParameter(valid_777426, JString, required = false,
                                 default = nil)
  if valid_777426 != nil:
    section.add "X-Amz-Algorithm", valid_777426
  var valid_777427 = header.getOrDefault("X-Amz-Signature")
  valid_777427 = validateParameter(valid_777427, JString, required = false,
                                 default = nil)
  if valid_777427 != nil:
    section.add "X-Amz-Signature", valid_777427
  var valid_777428 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777428 = validateParameter(valid_777428, JString, required = false,
                                 default = nil)
  if valid_777428 != nil:
    section.add "X-Amz-SignedHeaders", valid_777428
  var valid_777429 = header.getOrDefault("X-Amz-Credential")
  valid_777429 = validateParameter(valid_777429, JString, required = false,
                                 default = nil)
  if valid_777429 != nil:
    section.add "X-Amz-Credential", valid_777429
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777430: Call_GetTagRole_777416; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_777430.validator(path, query, header, formData, body)
  let scheme = call_777430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777430.url(scheme.get, call_777430.host, call_777430.base,
                         call_777430.route, valid.getOrDefault("path"))
  result = hook(call_777430, url, valid)

proc call*(call_777431: Call_GetTagRole_777416; Tags: JsonNode; RoleName: string;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## getTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_777432 = newJObject()
  if Tags != nil:
    query_777432.add "Tags", Tags
  add(query_777432, "Action", newJString(Action))
  add(query_777432, "RoleName", newJString(RoleName))
  add(query_777432, "Version", newJString(Version))
  result = call_777431.call(nil, query_777432, nil, nil, nil)

var getTagRole* = Call_GetTagRole_777416(name: "getTagRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagRole",
                                      validator: validate_GetTagRole_777417,
                                      base: "/", url: url_GetTagRole_777418,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagUser_777468 = ref object of OpenApiRestCall_772597
proc url_PostTagUser_777470(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostTagUser_777469(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777471 = query.getOrDefault("Action")
  valid_777471 = validateParameter(valid_777471, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_777471 != nil:
    section.add "Action", valid_777471
  var valid_777472 = query.getOrDefault("Version")
  valid_777472 = validateParameter(valid_777472, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777472 != nil:
    section.add "Version", valid_777472
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777473 = header.getOrDefault("X-Amz-Date")
  valid_777473 = validateParameter(valid_777473, JString, required = false,
                                 default = nil)
  if valid_777473 != nil:
    section.add "X-Amz-Date", valid_777473
  var valid_777474 = header.getOrDefault("X-Amz-Security-Token")
  valid_777474 = validateParameter(valid_777474, JString, required = false,
                                 default = nil)
  if valid_777474 != nil:
    section.add "X-Amz-Security-Token", valid_777474
  var valid_777475 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777475 = validateParameter(valid_777475, JString, required = false,
                                 default = nil)
  if valid_777475 != nil:
    section.add "X-Amz-Content-Sha256", valid_777475
  var valid_777476 = header.getOrDefault("X-Amz-Algorithm")
  valid_777476 = validateParameter(valid_777476, JString, required = false,
                                 default = nil)
  if valid_777476 != nil:
    section.add "X-Amz-Algorithm", valid_777476
  var valid_777477 = header.getOrDefault("X-Amz-Signature")
  valid_777477 = validateParameter(valid_777477, JString, required = false,
                                 default = nil)
  if valid_777477 != nil:
    section.add "X-Amz-Signature", valid_777477
  var valid_777478 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777478 = validateParameter(valid_777478, JString, required = false,
                                 default = nil)
  if valid_777478 != nil:
    section.add "X-Amz-SignedHeaders", valid_777478
  var valid_777479 = header.getOrDefault("X-Amz-Credential")
  valid_777479 = validateParameter(valid_777479, JString, required = false,
                                 default = nil)
  if valid_777479 != nil:
    section.add "X-Amz-Credential", valid_777479
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_777480 = formData.getOrDefault("UserName")
  valid_777480 = validateParameter(valid_777480, JString, required = true,
                                 default = nil)
  if valid_777480 != nil:
    section.add "UserName", valid_777480
  var valid_777481 = formData.getOrDefault("Tags")
  valid_777481 = validateParameter(valid_777481, JArray, required = true, default = nil)
  if valid_777481 != nil:
    section.add "Tags", valid_777481
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777482: Call_PostTagUser_777468; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_777482.validator(path, query, header, formData, body)
  let scheme = call_777482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777482.url(scheme.get, call_777482.host, call_777482.base,
                         call_777482.route, valid.getOrDefault("path"))
  result = hook(call_777482, url, valid)

proc call*(call_777483: Call_PostTagUser_777468; UserName: string; Tags: JsonNode;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## postTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777484 = newJObject()
  var formData_777485 = newJObject()
  add(formData_777485, "UserName", newJString(UserName))
  if Tags != nil:
    formData_777485.add "Tags", Tags
  add(query_777484, "Action", newJString(Action))
  add(query_777484, "Version", newJString(Version))
  result = call_777483.call(nil, query_777484, nil, formData_777485, nil)

var postTagUser* = Call_PostTagUser_777468(name: "postTagUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagUser",
                                        validator: validate_PostTagUser_777469,
                                        base: "/", url: url_PostTagUser_777470,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagUser_777451 = ref object of OpenApiRestCall_772597
proc url_GetTagUser_777453(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetTagUser_777452(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_777454 = query.getOrDefault("Tags")
  valid_777454 = validateParameter(valid_777454, JArray, required = true, default = nil)
  if valid_777454 != nil:
    section.add "Tags", valid_777454
  var valid_777455 = query.getOrDefault("UserName")
  valid_777455 = validateParameter(valid_777455, JString, required = true,
                                 default = nil)
  if valid_777455 != nil:
    section.add "UserName", valid_777455
  var valid_777456 = query.getOrDefault("Action")
  valid_777456 = validateParameter(valid_777456, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_777456 != nil:
    section.add "Action", valid_777456
  var valid_777457 = query.getOrDefault("Version")
  valid_777457 = validateParameter(valid_777457, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777457 != nil:
    section.add "Version", valid_777457
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777458 = header.getOrDefault("X-Amz-Date")
  valid_777458 = validateParameter(valid_777458, JString, required = false,
                                 default = nil)
  if valid_777458 != nil:
    section.add "X-Amz-Date", valid_777458
  var valid_777459 = header.getOrDefault("X-Amz-Security-Token")
  valid_777459 = validateParameter(valid_777459, JString, required = false,
                                 default = nil)
  if valid_777459 != nil:
    section.add "X-Amz-Security-Token", valid_777459
  var valid_777460 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777460 = validateParameter(valid_777460, JString, required = false,
                                 default = nil)
  if valid_777460 != nil:
    section.add "X-Amz-Content-Sha256", valid_777460
  var valid_777461 = header.getOrDefault("X-Amz-Algorithm")
  valid_777461 = validateParameter(valid_777461, JString, required = false,
                                 default = nil)
  if valid_777461 != nil:
    section.add "X-Amz-Algorithm", valid_777461
  var valid_777462 = header.getOrDefault("X-Amz-Signature")
  valid_777462 = validateParameter(valid_777462, JString, required = false,
                                 default = nil)
  if valid_777462 != nil:
    section.add "X-Amz-Signature", valid_777462
  var valid_777463 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777463 = validateParameter(valid_777463, JString, required = false,
                                 default = nil)
  if valid_777463 != nil:
    section.add "X-Amz-SignedHeaders", valid_777463
  var valid_777464 = header.getOrDefault("X-Amz-Credential")
  valid_777464 = validateParameter(valid_777464, JString, required = false,
                                 default = nil)
  if valid_777464 != nil:
    section.add "X-Amz-Credential", valid_777464
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777465: Call_GetTagUser_777451; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_777465.validator(path, query, header, formData, body)
  let scheme = call_777465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777465.url(scheme.get, call_777465.host, call_777465.base,
                         call_777465.route, valid.getOrDefault("path"))
  result = hook(call_777465, url, valid)

proc call*(call_777466: Call_GetTagUser_777451; Tags: JsonNode; UserName: string;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## getTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777467 = newJObject()
  if Tags != nil:
    query_777467.add "Tags", Tags
  add(query_777467, "UserName", newJString(UserName))
  add(query_777467, "Action", newJString(Action))
  add(query_777467, "Version", newJString(Version))
  result = call_777466.call(nil, query_777467, nil, nil, nil)

var getTagUser* = Call_GetTagUser_777451(name: "getTagUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagUser",
                                      validator: validate_GetTagUser_777452,
                                      base: "/", url: url_GetTagUser_777453,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagRole_777503 = ref object of OpenApiRestCall_772597
proc url_PostUntagRole_777505(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUntagRole_777504(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777506 = query.getOrDefault("Action")
  valid_777506 = validateParameter(valid_777506, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_777506 != nil:
    section.add "Action", valid_777506
  var valid_777507 = query.getOrDefault("Version")
  valid_777507 = validateParameter(valid_777507, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777507 != nil:
    section.add "Version", valid_777507
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777508 = header.getOrDefault("X-Amz-Date")
  valid_777508 = validateParameter(valid_777508, JString, required = false,
                                 default = nil)
  if valid_777508 != nil:
    section.add "X-Amz-Date", valid_777508
  var valid_777509 = header.getOrDefault("X-Amz-Security-Token")
  valid_777509 = validateParameter(valid_777509, JString, required = false,
                                 default = nil)
  if valid_777509 != nil:
    section.add "X-Amz-Security-Token", valid_777509
  var valid_777510 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777510 = validateParameter(valid_777510, JString, required = false,
                                 default = nil)
  if valid_777510 != nil:
    section.add "X-Amz-Content-Sha256", valid_777510
  var valid_777511 = header.getOrDefault("X-Amz-Algorithm")
  valid_777511 = validateParameter(valid_777511, JString, required = false,
                                 default = nil)
  if valid_777511 != nil:
    section.add "X-Amz-Algorithm", valid_777511
  var valid_777512 = header.getOrDefault("X-Amz-Signature")
  valid_777512 = validateParameter(valid_777512, JString, required = false,
                                 default = nil)
  if valid_777512 != nil:
    section.add "X-Amz-Signature", valid_777512
  var valid_777513 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777513 = validateParameter(valid_777513, JString, required = false,
                                 default = nil)
  if valid_777513 != nil:
    section.add "X-Amz-SignedHeaders", valid_777513
  var valid_777514 = header.getOrDefault("X-Amz-Credential")
  valid_777514 = validateParameter(valid_777514, JString, required = false,
                                 default = nil)
  if valid_777514 != nil:
    section.add "X-Amz-Credential", valid_777514
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_777515 = formData.getOrDefault("RoleName")
  valid_777515 = validateParameter(valid_777515, JString, required = true,
                                 default = nil)
  if valid_777515 != nil:
    section.add "RoleName", valid_777515
  var valid_777516 = formData.getOrDefault("TagKeys")
  valid_777516 = validateParameter(valid_777516, JArray, required = true, default = nil)
  if valid_777516 != nil:
    section.add "TagKeys", valid_777516
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777517: Call_PostUntagRole_777503; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_777517.validator(path, query, header, formData, body)
  let scheme = call_777517.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777517.url(scheme.get, call_777517.host, call_777517.base,
                         call_777517.route, valid.getOrDefault("path"))
  result = hook(call_777517, url, valid)

proc call*(call_777518: Call_PostUntagRole_777503; RoleName: string;
          TagKeys: JsonNode; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   Version: string (required)
  var query_777519 = newJObject()
  var formData_777520 = newJObject()
  add(formData_777520, "RoleName", newJString(RoleName))
  add(query_777519, "Action", newJString(Action))
  if TagKeys != nil:
    formData_777520.add "TagKeys", TagKeys
  add(query_777519, "Version", newJString(Version))
  result = call_777518.call(nil, query_777519, nil, formData_777520, nil)

var postUntagRole* = Call_PostUntagRole_777503(name: "postUntagRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_PostUntagRole_777504,
    base: "/", url: url_PostUntagRole_777505, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagRole_777486 = ref object of OpenApiRestCall_772597
proc url_GetUntagRole_777488(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUntagRole_777487(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777489 = query.getOrDefault("Action")
  valid_777489 = validateParameter(valid_777489, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_777489 != nil:
    section.add "Action", valid_777489
  var valid_777490 = query.getOrDefault("TagKeys")
  valid_777490 = validateParameter(valid_777490, JArray, required = true, default = nil)
  if valid_777490 != nil:
    section.add "TagKeys", valid_777490
  var valid_777491 = query.getOrDefault("RoleName")
  valid_777491 = validateParameter(valid_777491, JString, required = true,
                                 default = nil)
  if valid_777491 != nil:
    section.add "RoleName", valid_777491
  var valid_777492 = query.getOrDefault("Version")
  valid_777492 = validateParameter(valid_777492, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777492 != nil:
    section.add "Version", valid_777492
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777493 = header.getOrDefault("X-Amz-Date")
  valid_777493 = validateParameter(valid_777493, JString, required = false,
                                 default = nil)
  if valid_777493 != nil:
    section.add "X-Amz-Date", valid_777493
  var valid_777494 = header.getOrDefault("X-Amz-Security-Token")
  valid_777494 = validateParameter(valid_777494, JString, required = false,
                                 default = nil)
  if valid_777494 != nil:
    section.add "X-Amz-Security-Token", valid_777494
  var valid_777495 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777495 = validateParameter(valid_777495, JString, required = false,
                                 default = nil)
  if valid_777495 != nil:
    section.add "X-Amz-Content-Sha256", valid_777495
  var valid_777496 = header.getOrDefault("X-Amz-Algorithm")
  valid_777496 = validateParameter(valid_777496, JString, required = false,
                                 default = nil)
  if valid_777496 != nil:
    section.add "X-Amz-Algorithm", valid_777496
  var valid_777497 = header.getOrDefault("X-Amz-Signature")
  valid_777497 = validateParameter(valid_777497, JString, required = false,
                                 default = nil)
  if valid_777497 != nil:
    section.add "X-Amz-Signature", valid_777497
  var valid_777498 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777498 = validateParameter(valid_777498, JString, required = false,
                                 default = nil)
  if valid_777498 != nil:
    section.add "X-Amz-SignedHeaders", valid_777498
  var valid_777499 = header.getOrDefault("X-Amz-Credential")
  valid_777499 = validateParameter(valid_777499, JString, required = false,
                                 default = nil)
  if valid_777499 != nil:
    section.add "X-Amz-Credential", valid_777499
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777500: Call_GetUntagRole_777486; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_777500.validator(path, query, header, formData, body)
  let scheme = call_777500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777500.url(scheme.get, call_777500.host, call_777500.base,
                         call_777500.route, valid.getOrDefault("path"))
  result = hook(call_777500, url, valid)

proc call*(call_777501: Call_GetUntagRole_777486; TagKeys: JsonNode;
          RoleName: string; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_777502 = newJObject()
  add(query_777502, "Action", newJString(Action))
  if TagKeys != nil:
    query_777502.add "TagKeys", TagKeys
  add(query_777502, "RoleName", newJString(RoleName))
  add(query_777502, "Version", newJString(Version))
  result = call_777501.call(nil, query_777502, nil, nil, nil)

var getUntagRole* = Call_GetUntagRole_777486(name: "getUntagRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_GetUntagRole_777487, base: "/",
    url: url_GetUntagRole_777488, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagUser_777538 = ref object of OpenApiRestCall_772597
proc url_PostUntagUser_777540(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUntagUser_777539(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777541 = query.getOrDefault("Action")
  valid_777541 = validateParameter(valid_777541, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_777541 != nil:
    section.add "Action", valid_777541
  var valid_777542 = query.getOrDefault("Version")
  valid_777542 = validateParameter(valid_777542, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777542 != nil:
    section.add "Version", valid_777542
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777543 = header.getOrDefault("X-Amz-Date")
  valid_777543 = validateParameter(valid_777543, JString, required = false,
                                 default = nil)
  if valid_777543 != nil:
    section.add "X-Amz-Date", valid_777543
  var valid_777544 = header.getOrDefault("X-Amz-Security-Token")
  valid_777544 = validateParameter(valid_777544, JString, required = false,
                                 default = nil)
  if valid_777544 != nil:
    section.add "X-Amz-Security-Token", valid_777544
  var valid_777545 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777545 = validateParameter(valid_777545, JString, required = false,
                                 default = nil)
  if valid_777545 != nil:
    section.add "X-Amz-Content-Sha256", valid_777545
  var valid_777546 = header.getOrDefault("X-Amz-Algorithm")
  valid_777546 = validateParameter(valid_777546, JString, required = false,
                                 default = nil)
  if valid_777546 != nil:
    section.add "X-Amz-Algorithm", valid_777546
  var valid_777547 = header.getOrDefault("X-Amz-Signature")
  valid_777547 = validateParameter(valid_777547, JString, required = false,
                                 default = nil)
  if valid_777547 != nil:
    section.add "X-Amz-Signature", valid_777547
  var valid_777548 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777548 = validateParameter(valid_777548, JString, required = false,
                                 default = nil)
  if valid_777548 != nil:
    section.add "X-Amz-SignedHeaders", valid_777548
  var valid_777549 = header.getOrDefault("X-Amz-Credential")
  valid_777549 = validateParameter(valid_777549, JString, required = false,
                                 default = nil)
  if valid_777549 != nil:
    section.add "X-Amz-Credential", valid_777549
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_777550 = formData.getOrDefault("UserName")
  valid_777550 = validateParameter(valid_777550, JString, required = true,
                                 default = nil)
  if valid_777550 != nil:
    section.add "UserName", valid_777550
  var valid_777551 = formData.getOrDefault("TagKeys")
  valid_777551 = validateParameter(valid_777551, JArray, required = true, default = nil)
  if valid_777551 != nil:
    section.add "TagKeys", valid_777551
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777552: Call_PostUntagUser_777538; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_777552.validator(path, query, header, formData, body)
  let scheme = call_777552.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777552.url(scheme.get, call_777552.host, call_777552.base,
                         call_777552.route, valid.getOrDefault("path"))
  result = hook(call_777552, url, valid)

proc call*(call_777553: Call_PostUntagUser_777538; UserName: string;
          TagKeys: JsonNode; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: string (required)
  var query_777554 = newJObject()
  var formData_777555 = newJObject()
  add(formData_777555, "UserName", newJString(UserName))
  add(query_777554, "Action", newJString(Action))
  if TagKeys != nil:
    formData_777555.add "TagKeys", TagKeys
  add(query_777554, "Version", newJString(Version))
  result = call_777553.call(nil, query_777554, nil, formData_777555, nil)

var postUntagUser* = Call_PostUntagUser_777538(name: "postUntagUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_PostUntagUser_777539,
    base: "/", url: url_PostUntagUser_777540, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagUser_777521 = ref object of OpenApiRestCall_772597
proc url_GetUntagUser_777523(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUntagUser_777522(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_777524 = query.getOrDefault("UserName")
  valid_777524 = validateParameter(valid_777524, JString, required = true,
                                 default = nil)
  if valid_777524 != nil:
    section.add "UserName", valid_777524
  var valid_777525 = query.getOrDefault("Action")
  valid_777525 = validateParameter(valid_777525, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_777525 != nil:
    section.add "Action", valid_777525
  var valid_777526 = query.getOrDefault("TagKeys")
  valid_777526 = validateParameter(valid_777526, JArray, required = true, default = nil)
  if valid_777526 != nil:
    section.add "TagKeys", valid_777526
  var valid_777527 = query.getOrDefault("Version")
  valid_777527 = validateParameter(valid_777527, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777527 != nil:
    section.add "Version", valid_777527
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777528 = header.getOrDefault("X-Amz-Date")
  valid_777528 = validateParameter(valid_777528, JString, required = false,
                                 default = nil)
  if valid_777528 != nil:
    section.add "X-Amz-Date", valid_777528
  var valid_777529 = header.getOrDefault("X-Amz-Security-Token")
  valid_777529 = validateParameter(valid_777529, JString, required = false,
                                 default = nil)
  if valid_777529 != nil:
    section.add "X-Amz-Security-Token", valid_777529
  var valid_777530 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777530 = validateParameter(valid_777530, JString, required = false,
                                 default = nil)
  if valid_777530 != nil:
    section.add "X-Amz-Content-Sha256", valid_777530
  var valid_777531 = header.getOrDefault("X-Amz-Algorithm")
  valid_777531 = validateParameter(valid_777531, JString, required = false,
                                 default = nil)
  if valid_777531 != nil:
    section.add "X-Amz-Algorithm", valid_777531
  var valid_777532 = header.getOrDefault("X-Amz-Signature")
  valid_777532 = validateParameter(valid_777532, JString, required = false,
                                 default = nil)
  if valid_777532 != nil:
    section.add "X-Amz-Signature", valid_777532
  var valid_777533 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777533 = validateParameter(valid_777533, JString, required = false,
                                 default = nil)
  if valid_777533 != nil:
    section.add "X-Amz-SignedHeaders", valid_777533
  var valid_777534 = header.getOrDefault("X-Amz-Credential")
  valid_777534 = validateParameter(valid_777534, JString, required = false,
                                 default = nil)
  if valid_777534 != nil:
    section.add "X-Amz-Credential", valid_777534
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777535: Call_GetUntagUser_777521; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_777535.validator(path, query, header, formData, body)
  let scheme = call_777535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777535.url(scheme.get, call_777535.host, call_777535.base,
                         call_777535.route, valid.getOrDefault("path"))
  result = hook(call_777535, url, valid)

proc call*(call_777536: Call_GetUntagUser_777521; UserName: string;
          TagKeys: JsonNode; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: string (required)
  var query_777537 = newJObject()
  add(query_777537, "UserName", newJString(UserName))
  add(query_777537, "Action", newJString(Action))
  if TagKeys != nil:
    query_777537.add "TagKeys", TagKeys
  add(query_777537, "Version", newJString(Version))
  result = call_777536.call(nil, query_777537, nil, nil, nil)

var getUntagUser* = Call_GetUntagUser_777521(name: "getUntagUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_GetUntagUser_777522, base: "/",
    url: url_GetUntagUser_777523, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccessKey_777574 = ref object of OpenApiRestCall_772597
proc url_PostUpdateAccessKey_777576(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateAccessKey_777575(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777577 = query.getOrDefault("Action")
  valid_777577 = validateParameter(valid_777577, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_777577 != nil:
    section.add "Action", valid_777577
  var valid_777578 = query.getOrDefault("Version")
  valid_777578 = validateParameter(valid_777578, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777578 != nil:
    section.add "Version", valid_777578
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777579 = header.getOrDefault("X-Amz-Date")
  valid_777579 = validateParameter(valid_777579, JString, required = false,
                                 default = nil)
  if valid_777579 != nil:
    section.add "X-Amz-Date", valid_777579
  var valid_777580 = header.getOrDefault("X-Amz-Security-Token")
  valid_777580 = validateParameter(valid_777580, JString, required = false,
                                 default = nil)
  if valid_777580 != nil:
    section.add "X-Amz-Security-Token", valid_777580
  var valid_777581 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777581 = validateParameter(valid_777581, JString, required = false,
                                 default = nil)
  if valid_777581 != nil:
    section.add "X-Amz-Content-Sha256", valid_777581
  var valid_777582 = header.getOrDefault("X-Amz-Algorithm")
  valid_777582 = validateParameter(valid_777582, JString, required = false,
                                 default = nil)
  if valid_777582 != nil:
    section.add "X-Amz-Algorithm", valid_777582
  var valid_777583 = header.getOrDefault("X-Amz-Signature")
  valid_777583 = validateParameter(valid_777583, JString, required = false,
                                 default = nil)
  if valid_777583 != nil:
    section.add "X-Amz-Signature", valid_777583
  var valid_777584 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777584 = validateParameter(valid_777584, JString, required = false,
                                 default = nil)
  if valid_777584 != nil:
    section.add "X-Amz-SignedHeaders", valid_777584
  var valid_777585 = header.getOrDefault("X-Amz-Credential")
  valid_777585 = validateParameter(valid_777585, JString, required = false,
                                 default = nil)
  if valid_777585 != nil:
    section.add "X-Amz-Credential", valid_777585
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  var valid_777586 = formData.getOrDefault("UserName")
  valid_777586 = validateParameter(valid_777586, JString, required = false,
                                 default = nil)
  if valid_777586 != nil:
    section.add "UserName", valid_777586
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_777587 = formData.getOrDefault("AccessKeyId")
  valid_777587 = validateParameter(valid_777587, JString, required = true,
                                 default = nil)
  if valid_777587 != nil:
    section.add "AccessKeyId", valid_777587
  var valid_777588 = formData.getOrDefault("Status")
  valid_777588 = validateParameter(valid_777588, JString, required = true,
                                 default = newJString("Active"))
  if valid_777588 != nil:
    section.add "Status", valid_777588
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777589: Call_PostUpdateAccessKey_777574; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_777589.validator(path, query, header, formData, body)
  let scheme = call_777589.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777589.url(scheme.get, call_777589.host, call_777589.base,
                         call_777589.route, valid.getOrDefault("path"))
  result = hook(call_777589, url, valid)

proc call*(call_777590: Call_PostUpdateAccessKey_777574; AccessKeyId: string;
          UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777591 = newJObject()
  var formData_777592 = newJObject()
  add(formData_777592, "UserName", newJString(UserName))
  add(formData_777592, "AccessKeyId", newJString(AccessKeyId))
  add(formData_777592, "Status", newJString(Status))
  add(query_777591, "Action", newJString(Action))
  add(query_777591, "Version", newJString(Version))
  result = call_777590.call(nil, query_777591, nil, formData_777592, nil)

var postUpdateAccessKey* = Call_PostUpdateAccessKey_777574(
    name: "postUpdateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccessKey",
    validator: validate_PostUpdateAccessKey_777575, base: "/",
    url: url_PostUpdateAccessKey_777576, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccessKey_777556 = ref object of OpenApiRestCall_772597
proc url_GetUpdateAccessKey_777558(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateAccessKey_777557(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_777559 = query.getOrDefault("Status")
  valid_777559 = validateParameter(valid_777559, JString, required = true,
                                 default = newJString("Active"))
  if valid_777559 != nil:
    section.add "Status", valid_777559
  var valid_777560 = query.getOrDefault("AccessKeyId")
  valid_777560 = validateParameter(valid_777560, JString, required = true,
                                 default = nil)
  if valid_777560 != nil:
    section.add "AccessKeyId", valid_777560
  var valid_777561 = query.getOrDefault("UserName")
  valid_777561 = validateParameter(valid_777561, JString, required = false,
                                 default = nil)
  if valid_777561 != nil:
    section.add "UserName", valid_777561
  var valid_777562 = query.getOrDefault("Action")
  valid_777562 = validateParameter(valid_777562, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_777562 != nil:
    section.add "Action", valid_777562
  var valid_777563 = query.getOrDefault("Version")
  valid_777563 = validateParameter(valid_777563, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777563 != nil:
    section.add "Version", valid_777563
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777564 = header.getOrDefault("X-Amz-Date")
  valid_777564 = validateParameter(valid_777564, JString, required = false,
                                 default = nil)
  if valid_777564 != nil:
    section.add "X-Amz-Date", valid_777564
  var valid_777565 = header.getOrDefault("X-Amz-Security-Token")
  valid_777565 = validateParameter(valid_777565, JString, required = false,
                                 default = nil)
  if valid_777565 != nil:
    section.add "X-Amz-Security-Token", valid_777565
  var valid_777566 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777566 = validateParameter(valid_777566, JString, required = false,
                                 default = nil)
  if valid_777566 != nil:
    section.add "X-Amz-Content-Sha256", valid_777566
  var valid_777567 = header.getOrDefault("X-Amz-Algorithm")
  valid_777567 = validateParameter(valid_777567, JString, required = false,
                                 default = nil)
  if valid_777567 != nil:
    section.add "X-Amz-Algorithm", valid_777567
  var valid_777568 = header.getOrDefault("X-Amz-Signature")
  valid_777568 = validateParameter(valid_777568, JString, required = false,
                                 default = nil)
  if valid_777568 != nil:
    section.add "X-Amz-Signature", valid_777568
  var valid_777569 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777569 = validateParameter(valid_777569, JString, required = false,
                                 default = nil)
  if valid_777569 != nil:
    section.add "X-Amz-SignedHeaders", valid_777569
  var valid_777570 = header.getOrDefault("X-Amz-Credential")
  valid_777570 = validateParameter(valid_777570, JString, required = false,
                                 default = nil)
  if valid_777570 != nil:
    section.add "X-Amz-Credential", valid_777570
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777571: Call_GetUpdateAccessKey_777556; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_777571.validator(path, query, header, formData, body)
  let scheme = call_777571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777571.url(scheme.get, call_777571.host, call_777571.base,
                         call_777571.route, valid.getOrDefault("path"))
  result = hook(call_777571, url, valid)

proc call*(call_777572: Call_GetUpdateAccessKey_777556; AccessKeyId: string;
          Status: string = "Active"; UserName: string = "";
          Action: string = "UpdateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777573 = newJObject()
  add(query_777573, "Status", newJString(Status))
  add(query_777573, "AccessKeyId", newJString(AccessKeyId))
  add(query_777573, "UserName", newJString(UserName))
  add(query_777573, "Action", newJString(Action))
  add(query_777573, "Version", newJString(Version))
  result = call_777572.call(nil, query_777573, nil, nil, nil)

var getUpdateAccessKey* = Call_GetUpdateAccessKey_777556(
    name: "getUpdateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateAccessKey", validator: validate_GetUpdateAccessKey_777557,
    base: "/", url: url_GetUpdateAccessKey_777558,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountPasswordPolicy_777617 = ref object of OpenApiRestCall_772597
proc url_PostUpdateAccountPasswordPolicy_777619(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateAccountPasswordPolicy_777618(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777620 = query.getOrDefault("Action")
  valid_777620 = validateParameter(valid_777620, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_777620 != nil:
    section.add "Action", valid_777620
  var valid_777621 = query.getOrDefault("Version")
  valid_777621 = validateParameter(valid_777621, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777621 != nil:
    section.add "Version", valid_777621
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777622 = header.getOrDefault("X-Amz-Date")
  valid_777622 = validateParameter(valid_777622, JString, required = false,
                                 default = nil)
  if valid_777622 != nil:
    section.add "X-Amz-Date", valid_777622
  var valid_777623 = header.getOrDefault("X-Amz-Security-Token")
  valid_777623 = validateParameter(valid_777623, JString, required = false,
                                 default = nil)
  if valid_777623 != nil:
    section.add "X-Amz-Security-Token", valid_777623
  var valid_777624 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777624 = validateParameter(valid_777624, JString, required = false,
                                 default = nil)
  if valid_777624 != nil:
    section.add "X-Amz-Content-Sha256", valid_777624
  var valid_777625 = header.getOrDefault("X-Amz-Algorithm")
  valid_777625 = validateParameter(valid_777625, JString, required = false,
                                 default = nil)
  if valid_777625 != nil:
    section.add "X-Amz-Algorithm", valid_777625
  var valid_777626 = header.getOrDefault("X-Amz-Signature")
  valid_777626 = validateParameter(valid_777626, JString, required = false,
                                 default = nil)
  if valid_777626 != nil:
    section.add "X-Amz-Signature", valid_777626
  var valid_777627 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777627 = validateParameter(valid_777627, JString, required = false,
                                 default = nil)
  if valid_777627 != nil:
    section.add "X-Amz-SignedHeaders", valid_777627
  var valid_777628 = header.getOrDefault("X-Amz-Credential")
  valid_777628 = validateParameter(valid_777628, JString, required = false,
                                 default = nil)
  if valid_777628 != nil:
    section.add "X-Amz-Credential", valid_777628
  result.add "header", section
  ## parameters in `formData` object:
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  section = newJObject()
  var valid_777629 = formData.getOrDefault("RequireNumbers")
  valid_777629 = validateParameter(valid_777629, JBool, required = false, default = nil)
  if valid_777629 != nil:
    section.add "RequireNumbers", valid_777629
  var valid_777630 = formData.getOrDefault("RequireSymbols")
  valid_777630 = validateParameter(valid_777630, JBool, required = false, default = nil)
  if valid_777630 != nil:
    section.add "RequireSymbols", valid_777630
  var valid_777631 = formData.getOrDefault("RequireUppercaseCharacters")
  valid_777631 = validateParameter(valid_777631, JBool, required = false, default = nil)
  if valid_777631 != nil:
    section.add "RequireUppercaseCharacters", valid_777631
  var valid_777632 = formData.getOrDefault("MinimumPasswordLength")
  valid_777632 = validateParameter(valid_777632, JInt, required = false, default = nil)
  if valid_777632 != nil:
    section.add "MinimumPasswordLength", valid_777632
  var valid_777633 = formData.getOrDefault("RequireLowercaseCharacters")
  valid_777633 = validateParameter(valid_777633, JBool, required = false, default = nil)
  if valid_777633 != nil:
    section.add "RequireLowercaseCharacters", valid_777633
  var valid_777634 = formData.getOrDefault("PasswordReusePrevention")
  valid_777634 = validateParameter(valid_777634, JInt, required = false, default = nil)
  if valid_777634 != nil:
    section.add "PasswordReusePrevention", valid_777634
  var valid_777635 = formData.getOrDefault("HardExpiry")
  valid_777635 = validateParameter(valid_777635, JBool, required = false, default = nil)
  if valid_777635 != nil:
    section.add "HardExpiry", valid_777635
  var valid_777636 = formData.getOrDefault("AllowUsersToChangePassword")
  valid_777636 = validateParameter(valid_777636, JBool, required = false, default = nil)
  if valid_777636 != nil:
    section.add "AllowUsersToChangePassword", valid_777636
  var valid_777637 = formData.getOrDefault("MaxPasswordAge")
  valid_777637 = validateParameter(valid_777637, JInt, required = false, default = nil)
  if valid_777637 != nil:
    section.add "MaxPasswordAge", valid_777637
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777638: Call_PostUpdateAccountPasswordPolicy_777617;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_777638.validator(path, query, header, formData, body)
  let scheme = call_777638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777638.url(scheme.get, call_777638.host, call_777638.base,
                         call_777638.route, valid.getOrDefault("path"))
  result = hook(call_777638, url, valid)

proc call*(call_777639: Call_PostUpdateAccountPasswordPolicy_777617;
          RequireNumbers: bool = false; RequireSymbols: bool = false;
          RequireUppercaseCharacters: bool = false; MinimumPasswordLength: int = 0;
          RequireLowercaseCharacters: bool = false;
          PasswordReusePrevention: int = 0;
          Action: string = "UpdateAccountPasswordPolicy"; HardExpiry: bool = false;
          AllowUsersToChangePassword: bool = false; MaxPasswordAge: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   Action: string (required)
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: string (required)
  var query_777640 = newJObject()
  var formData_777641 = newJObject()
  add(formData_777641, "RequireNumbers", newJBool(RequireNumbers))
  add(formData_777641, "RequireSymbols", newJBool(RequireSymbols))
  add(formData_777641, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(formData_777641, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  add(formData_777641, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(formData_777641, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_777640, "Action", newJString(Action))
  add(formData_777641, "HardExpiry", newJBool(HardExpiry))
  add(formData_777641, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(formData_777641, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_777640, "Version", newJString(Version))
  result = call_777639.call(nil, query_777640, nil, formData_777641, nil)

var postUpdateAccountPasswordPolicy* = Call_PostUpdateAccountPasswordPolicy_777617(
    name: "postUpdateAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_PostUpdateAccountPasswordPolicy_777618, base: "/",
    url: url_PostUpdateAccountPasswordPolicy_777619,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountPasswordPolicy_777593 = ref object of OpenApiRestCall_772597
proc url_GetUpdateAccountPasswordPolicy_777595(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateAccountPasswordPolicy_777594(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Action: JString (required)
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: JString (required)
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  section = newJObject()
  var valid_777596 = query.getOrDefault("RequireLowercaseCharacters")
  valid_777596 = validateParameter(valid_777596, JBool, required = false, default = nil)
  if valid_777596 != nil:
    section.add "RequireLowercaseCharacters", valid_777596
  var valid_777597 = query.getOrDefault("RequireSymbols")
  valid_777597 = validateParameter(valid_777597, JBool, required = false, default = nil)
  if valid_777597 != nil:
    section.add "RequireSymbols", valid_777597
  var valid_777598 = query.getOrDefault("RequireNumbers")
  valid_777598 = validateParameter(valid_777598, JBool, required = false, default = nil)
  if valid_777598 != nil:
    section.add "RequireNumbers", valid_777598
  var valid_777599 = query.getOrDefault("HardExpiry")
  valid_777599 = validateParameter(valid_777599, JBool, required = false, default = nil)
  if valid_777599 != nil:
    section.add "HardExpiry", valid_777599
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777600 = query.getOrDefault("Action")
  valid_777600 = validateParameter(valid_777600, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_777600 != nil:
    section.add "Action", valid_777600
  var valid_777601 = query.getOrDefault("PasswordReusePrevention")
  valid_777601 = validateParameter(valid_777601, JInt, required = false, default = nil)
  if valid_777601 != nil:
    section.add "PasswordReusePrevention", valid_777601
  var valid_777602 = query.getOrDefault("RequireUppercaseCharacters")
  valid_777602 = validateParameter(valid_777602, JBool, required = false, default = nil)
  if valid_777602 != nil:
    section.add "RequireUppercaseCharacters", valid_777602
  var valid_777603 = query.getOrDefault("AllowUsersToChangePassword")
  valid_777603 = validateParameter(valid_777603, JBool, required = false, default = nil)
  if valid_777603 != nil:
    section.add "AllowUsersToChangePassword", valid_777603
  var valid_777604 = query.getOrDefault("MaxPasswordAge")
  valid_777604 = validateParameter(valid_777604, JInt, required = false, default = nil)
  if valid_777604 != nil:
    section.add "MaxPasswordAge", valid_777604
  var valid_777605 = query.getOrDefault("Version")
  valid_777605 = validateParameter(valid_777605, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777605 != nil:
    section.add "Version", valid_777605
  var valid_777606 = query.getOrDefault("MinimumPasswordLength")
  valid_777606 = validateParameter(valid_777606, JInt, required = false, default = nil)
  if valid_777606 != nil:
    section.add "MinimumPasswordLength", valid_777606
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777607 = header.getOrDefault("X-Amz-Date")
  valid_777607 = validateParameter(valid_777607, JString, required = false,
                                 default = nil)
  if valid_777607 != nil:
    section.add "X-Amz-Date", valid_777607
  var valid_777608 = header.getOrDefault("X-Amz-Security-Token")
  valid_777608 = validateParameter(valid_777608, JString, required = false,
                                 default = nil)
  if valid_777608 != nil:
    section.add "X-Amz-Security-Token", valid_777608
  var valid_777609 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777609 = validateParameter(valid_777609, JString, required = false,
                                 default = nil)
  if valid_777609 != nil:
    section.add "X-Amz-Content-Sha256", valid_777609
  var valid_777610 = header.getOrDefault("X-Amz-Algorithm")
  valid_777610 = validateParameter(valid_777610, JString, required = false,
                                 default = nil)
  if valid_777610 != nil:
    section.add "X-Amz-Algorithm", valid_777610
  var valid_777611 = header.getOrDefault("X-Amz-Signature")
  valid_777611 = validateParameter(valid_777611, JString, required = false,
                                 default = nil)
  if valid_777611 != nil:
    section.add "X-Amz-Signature", valid_777611
  var valid_777612 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777612 = validateParameter(valid_777612, JString, required = false,
                                 default = nil)
  if valid_777612 != nil:
    section.add "X-Amz-SignedHeaders", valid_777612
  var valid_777613 = header.getOrDefault("X-Amz-Credential")
  valid_777613 = validateParameter(valid_777613, JString, required = false,
                                 default = nil)
  if valid_777613 != nil:
    section.add "X-Amz-Credential", valid_777613
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777614: Call_GetUpdateAccountPasswordPolicy_777593; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_777614.validator(path, query, header, formData, body)
  let scheme = call_777614.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777614.url(scheme.get, call_777614.host, call_777614.base,
                         call_777614.route, valid.getOrDefault("path"))
  result = hook(call_777614, url, valid)

proc call*(call_777615: Call_GetUpdateAccountPasswordPolicy_777593;
          RequireLowercaseCharacters: bool = false; RequireSymbols: bool = false;
          RequireNumbers: bool = false; HardExpiry: bool = false;
          Action: string = "UpdateAccountPasswordPolicy";
          PasswordReusePrevention: int = 0;
          RequireUppercaseCharacters: bool = false;
          AllowUsersToChangePassword: bool = false; MaxPasswordAge: int = 0;
          Version: string = "2010-05-08"; MinimumPasswordLength: int = 0): Recallable =
  ## getUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Action: string (required)
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: string (required)
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  var query_777616 = newJObject()
  add(query_777616, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(query_777616, "RequireSymbols", newJBool(RequireSymbols))
  add(query_777616, "RequireNumbers", newJBool(RequireNumbers))
  add(query_777616, "HardExpiry", newJBool(HardExpiry))
  add(query_777616, "Action", newJString(Action))
  add(query_777616, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_777616, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(query_777616, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(query_777616, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_777616, "Version", newJString(Version))
  add(query_777616, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  result = call_777615.call(nil, query_777616, nil, nil, nil)

var getUpdateAccountPasswordPolicy* = Call_GetUpdateAccountPasswordPolicy_777593(
    name: "getUpdateAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_GetUpdateAccountPasswordPolicy_777594, base: "/",
    url: url_GetUpdateAccountPasswordPolicy_777595,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAssumeRolePolicy_777659 = ref object of OpenApiRestCall_772597
proc url_PostUpdateAssumeRolePolicy_777661(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateAssumeRolePolicy_777660(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777662 = query.getOrDefault("Action")
  valid_777662 = validateParameter(valid_777662, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_777662 != nil:
    section.add "Action", valid_777662
  var valid_777663 = query.getOrDefault("Version")
  valid_777663 = validateParameter(valid_777663, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777663 != nil:
    section.add "Version", valid_777663
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777664 = header.getOrDefault("X-Amz-Date")
  valid_777664 = validateParameter(valid_777664, JString, required = false,
                                 default = nil)
  if valid_777664 != nil:
    section.add "X-Amz-Date", valid_777664
  var valid_777665 = header.getOrDefault("X-Amz-Security-Token")
  valid_777665 = validateParameter(valid_777665, JString, required = false,
                                 default = nil)
  if valid_777665 != nil:
    section.add "X-Amz-Security-Token", valid_777665
  var valid_777666 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777666 = validateParameter(valid_777666, JString, required = false,
                                 default = nil)
  if valid_777666 != nil:
    section.add "X-Amz-Content-Sha256", valid_777666
  var valid_777667 = header.getOrDefault("X-Amz-Algorithm")
  valid_777667 = validateParameter(valid_777667, JString, required = false,
                                 default = nil)
  if valid_777667 != nil:
    section.add "X-Amz-Algorithm", valid_777667
  var valid_777668 = header.getOrDefault("X-Amz-Signature")
  valid_777668 = validateParameter(valid_777668, JString, required = false,
                                 default = nil)
  if valid_777668 != nil:
    section.add "X-Amz-Signature", valid_777668
  var valid_777669 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777669 = validateParameter(valid_777669, JString, required = false,
                                 default = nil)
  if valid_777669 != nil:
    section.add "X-Amz-SignedHeaders", valid_777669
  var valid_777670 = header.getOrDefault("X-Amz-Credential")
  valid_777670 = validateParameter(valid_777670, JString, required = false,
                                 default = nil)
  if valid_777670 != nil:
    section.add "X-Amz-Credential", valid_777670
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_777671 = formData.getOrDefault("RoleName")
  valid_777671 = validateParameter(valid_777671, JString, required = true,
                                 default = nil)
  if valid_777671 != nil:
    section.add "RoleName", valid_777671
  var valid_777672 = formData.getOrDefault("PolicyDocument")
  valid_777672 = validateParameter(valid_777672, JString, required = true,
                                 default = nil)
  if valid_777672 != nil:
    section.add "PolicyDocument", valid_777672
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777673: Call_PostUpdateAssumeRolePolicy_777659; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_777673.validator(path, query, header, formData, body)
  let scheme = call_777673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777673.url(scheme.get, call_777673.host, call_777673.base,
                         call_777673.route, valid.getOrDefault("path"))
  result = hook(call_777673, url, valid)

proc call*(call_777674: Call_PostUpdateAssumeRolePolicy_777659; RoleName: string;
          PolicyDocument: string; Action: string = "UpdateAssumeRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777675 = newJObject()
  var formData_777676 = newJObject()
  add(formData_777676, "RoleName", newJString(RoleName))
  add(formData_777676, "PolicyDocument", newJString(PolicyDocument))
  add(query_777675, "Action", newJString(Action))
  add(query_777675, "Version", newJString(Version))
  result = call_777674.call(nil, query_777675, nil, formData_777676, nil)

var postUpdateAssumeRolePolicy* = Call_PostUpdateAssumeRolePolicy_777659(
    name: "postUpdateAssumeRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_PostUpdateAssumeRolePolicy_777660, base: "/",
    url: url_PostUpdateAssumeRolePolicy_777661,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAssumeRolePolicy_777642 = ref object of OpenApiRestCall_772597
proc url_GetUpdateAssumeRolePolicy_777644(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateAssumeRolePolicy_777643(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777645 = query.getOrDefault("Action")
  valid_777645 = validateParameter(valid_777645, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_777645 != nil:
    section.add "Action", valid_777645
  var valid_777646 = query.getOrDefault("PolicyDocument")
  valid_777646 = validateParameter(valid_777646, JString, required = true,
                                 default = nil)
  if valid_777646 != nil:
    section.add "PolicyDocument", valid_777646
  var valid_777647 = query.getOrDefault("RoleName")
  valid_777647 = validateParameter(valid_777647, JString, required = true,
                                 default = nil)
  if valid_777647 != nil:
    section.add "RoleName", valid_777647
  var valid_777648 = query.getOrDefault("Version")
  valid_777648 = validateParameter(valid_777648, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777648 != nil:
    section.add "Version", valid_777648
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777649 = header.getOrDefault("X-Amz-Date")
  valid_777649 = validateParameter(valid_777649, JString, required = false,
                                 default = nil)
  if valid_777649 != nil:
    section.add "X-Amz-Date", valid_777649
  var valid_777650 = header.getOrDefault("X-Amz-Security-Token")
  valid_777650 = validateParameter(valid_777650, JString, required = false,
                                 default = nil)
  if valid_777650 != nil:
    section.add "X-Amz-Security-Token", valid_777650
  var valid_777651 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777651 = validateParameter(valid_777651, JString, required = false,
                                 default = nil)
  if valid_777651 != nil:
    section.add "X-Amz-Content-Sha256", valid_777651
  var valid_777652 = header.getOrDefault("X-Amz-Algorithm")
  valid_777652 = validateParameter(valid_777652, JString, required = false,
                                 default = nil)
  if valid_777652 != nil:
    section.add "X-Amz-Algorithm", valid_777652
  var valid_777653 = header.getOrDefault("X-Amz-Signature")
  valid_777653 = validateParameter(valid_777653, JString, required = false,
                                 default = nil)
  if valid_777653 != nil:
    section.add "X-Amz-Signature", valid_777653
  var valid_777654 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777654 = validateParameter(valid_777654, JString, required = false,
                                 default = nil)
  if valid_777654 != nil:
    section.add "X-Amz-SignedHeaders", valid_777654
  var valid_777655 = header.getOrDefault("X-Amz-Credential")
  valid_777655 = validateParameter(valid_777655, JString, required = false,
                                 default = nil)
  if valid_777655 != nil:
    section.add "X-Amz-Credential", valid_777655
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777656: Call_GetUpdateAssumeRolePolicy_777642; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_777656.validator(path, query, header, formData, body)
  let scheme = call_777656.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777656.url(scheme.get, call_777656.host, call_777656.base,
                         call_777656.route, valid.getOrDefault("path"))
  result = hook(call_777656, url, valid)

proc call*(call_777657: Call_GetUpdateAssumeRolePolicy_777642;
          PolicyDocument: string; RoleName: string;
          Action: string = "UpdateAssumeRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_777658 = newJObject()
  add(query_777658, "Action", newJString(Action))
  add(query_777658, "PolicyDocument", newJString(PolicyDocument))
  add(query_777658, "RoleName", newJString(RoleName))
  add(query_777658, "Version", newJString(Version))
  result = call_777657.call(nil, query_777658, nil, nil, nil)

var getUpdateAssumeRolePolicy* = Call_GetUpdateAssumeRolePolicy_777642(
    name: "getUpdateAssumeRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_GetUpdateAssumeRolePolicy_777643, base: "/",
    url: url_GetUpdateAssumeRolePolicy_777644,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateGroup_777695 = ref object of OpenApiRestCall_772597
proc url_PostUpdateGroup_777697(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateGroup_777696(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777698 = query.getOrDefault("Action")
  valid_777698 = validateParameter(valid_777698, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_777698 != nil:
    section.add "Action", valid_777698
  var valid_777699 = query.getOrDefault("Version")
  valid_777699 = validateParameter(valid_777699, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777699 != nil:
    section.add "Version", valid_777699
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777700 = header.getOrDefault("X-Amz-Date")
  valid_777700 = validateParameter(valid_777700, JString, required = false,
                                 default = nil)
  if valid_777700 != nil:
    section.add "X-Amz-Date", valid_777700
  var valid_777701 = header.getOrDefault("X-Amz-Security-Token")
  valid_777701 = validateParameter(valid_777701, JString, required = false,
                                 default = nil)
  if valid_777701 != nil:
    section.add "X-Amz-Security-Token", valid_777701
  var valid_777702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777702 = validateParameter(valid_777702, JString, required = false,
                                 default = nil)
  if valid_777702 != nil:
    section.add "X-Amz-Content-Sha256", valid_777702
  var valid_777703 = header.getOrDefault("X-Amz-Algorithm")
  valid_777703 = validateParameter(valid_777703, JString, required = false,
                                 default = nil)
  if valid_777703 != nil:
    section.add "X-Amz-Algorithm", valid_777703
  var valid_777704 = header.getOrDefault("X-Amz-Signature")
  valid_777704 = validateParameter(valid_777704, JString, required = false,
                                 default = nil)
  if valid_777704 != nil:
    section.add "X-Amz-Signature", valid_777704
  var valid_777705 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777705 = validateParameter(valid_777705, JString, required = false,
                                 default = nil)
  if valid_777705 != nil:
    section.add "X-Amz-SignedHeaders", valid_777705
  var valid_777706 = header.getOrDefault("X-Amz-Credential")
  valid_777706 = validateParameter(valid_777706, JString, required = false,
                                 default = nil)
  if valid_777706 != nil:
    section.add "X-Amz-Credential", valid_777706
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  var valid_777707 = formData.getOrDefault("NewGroupName")
  valid_777707 = validateParameter(valid_777707, JString, required = false,
                                 default = nil)
  if valid_777707 != nil:
    section.add "NewGroupName", valid_777707
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_777708 = formData.getOrDefault("GroupName")
  valid_777708 = validateParameter(valid_777708, JString, required = true,
                                 default = nil)
  if valid_777708 != nil:
    section.add "GroupName", valid_777708
  var valid_777709 = formData.getOrDefault("NewPath")
  valid_777709 = validateParameter(valid_777709, JString, required = false,
                                 default = nil)
  if valid_777709 != nil:
    section.add "NewPath", valid_777709
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777710: Call_PostUpdateGroup_777695; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_777710.validator(path, query, header, formData, body)
  let scheme = call_777710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777710.url(scheme.get, call_777710.host, call_777710.base,
                         call_777710.route, valid.getOrDefault("path"))
  result = hook(call_777710, url, valid)

proc call*(call_777711: Call_PostUpdateGroup_777695; GroupName: string;
          NewGroupName: string = ""; Action: string = "UpdateGroup";
          Version: string = "2010-05-08"; NewPath: string = ""): Recallable =
  ## postUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_777712 = newJObject()
  var formData_777713 = newJObject()
  add(formData_777713, "NewGroupName", newJString(NewGroupName))
  add(formData_777713, "GroupName", newJString(GroupName))
  add(query_777712, "Action", newJString(Action))
  add(query_777712, "Version", newJString(Version))
  add(formData_777713, "NewPath", newJString(NewPath))
  result = call_777711.call(nil, query_777712, nil, formData_777713, nil)

var postUpdateGroup* = Call_PostUpdateGroup_777695(name: "postUpdateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_PostUpdateGroup_777696,
    base: "/", url: url_PostUpdateGroup_777697, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateGroup_777677 = ref object of OpenApiRestCall_772597
proc url_GetUpdateGroup_777679(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateGroup_777678(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777680 = query.getOrDefault("Action")
  valid_777680 = validateParameter(valid_777680, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_777680 != nil:
    section.add "Action", valid_777680
  var valid_777681 = query.getOrDefault("GroupName")
  valid_777681 = validateParameter(valid_777681, JString, required = true,
                                 default = nil)
  if valid_777681 != nil:
    section.add "GroupName", valid_777681
  var valid_777682 = query.getOrDefault("NewGroupName")
  valid_777682 = validateParameter(valid_777682, JString, required = false,
                                 default = nil)
  if valid_777682 != nil:
    section.add "NewGroupName", valid_777682
  var valid_777683 = query.getOrDefault("NewPath")
  valid_777683 = validateParameter(valid_777683, JString, required = false,
                                 default = nil)
  if valid_777683 != nil:
    section.add "NewPath", valid_777683
  var valid_777684 = query.getOrDefault("Version")
  valid_777684 = validateParameter(valid_777684, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777684 != nil:
    section.add "Version", valid_777684
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777685 = header.getOrDefault("X-Amz-Date")
  valid_777685 = validateParameter(valid_777685, JString, required = false,
                                 default = nil)
  if valid_777685 != nil:
    section.add "X-Amz-Date", valid_777685
  var valid_777686 = header.getOrDefault("X-Amz-Security-Token")
  valid_777686 = validateParameter(valid_777686, JString, required = false,
                                 default = nil)
  if valid_777686 != nil:
    section.add "X-Amz-Security-Token", valid_777686
  var valid_777687 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777687 = validateParameter(valid_777687, JString, required = false,
                                 default = nil)
  if valid_777687 != nil:
    section.add "X-Amz-Content-Sha256", valid_777687
  var valid_777688 = header.getOrDefault("X-Amz-Algorithm")
  valid_777688 = validateParameter(valid_777688, JString, required = false,
                                 default = nil)
  if valid_777688 != nil:
    section.add "X-Amz-Algorithm", valid_777688
  var valid_777689 = header.getOrDefault("X-Amz-Signature")
  valid_777689 = validateParameter(valid_777689, JString, required = false,
                                 default = nil)
  if valid_777689 != nil:
    section.add "X-Amz-Signature", valid_777689
  var valid_777690 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777690 = validateParameter(valid_777690, JString, required = false,
                                 default = nil)
  if valid_777690 != nil:
    section.add "X-Amz-SignedHeaders", valid_777690
  var valid_777691 = header.getOrDefault("X-Amz-Credential")
  valid_777691 = validateParameter(valid_777691, JString, required = false,
                                 default = nil)
  if valid_777691 != nil:
    section.add "X-Amz-Credential", valid_777691
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777692: Call_GetUpdateGroup_777677; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_777692.validator(path, query, header, formData, body)
  let scheme = call_777692.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777692.url(scheme.get, call_777692.host, call_777692.base,
                         call_777692.route, valid.getOrDefault("path"))
  result = hook(call_777692, url, valid)

proc call*(call_777693: Call_GetUpdateGroup_777677; GroupName: string;
          Action: string = "UpdateGroup"; NewGroupName: string = "";
          NewPath: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_777694 = newJObject()
  add(query_777694, "Action", newJString(Action))
  add(query_777694, "GroupName", newJString(GroupName))
  add(query_777694, "NewGroupName", newJString(NewGroupName))
  add(query_777694, "NewPath", newJString(NewPath))
  add(query_777694, "Version", newJString(Version))
  result = call_777693.call(nil, query_777694, nil, nil, nil)

var getUpdateGroup* = Call_GetUpdateGroup_777677(name: "getUpdateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_GetUpdateGroup_777678,
    base: "/", url: url_GetUpdateGroup_777679, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateLoginProfile_777732 = ref object of OpenApiRestCall_772597
proc url_PostUpdateLoginProfile_777734(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateLoginProfile_777733(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777735 = query.getOrDefault("Action")
  valid_777735 = validateParameter(valid_777735, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_777735 != nil:
    section.add "Action", valid_777735
  var valid_777736 = query.getOrDefault("Version")
  valid_777736 = validateParameter(valid_777736, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777736 != nil:
    section.add "Version", valid_777736
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777737 = header.getOrDefault("X-Amz-Date")
  valid_777737 = validateParameter(valid_777737, JString, required = false,
                                 default = nil)
  if valid_777737 != nil:
    section.add "X-Amz-Date", valid_777737
  var valid_777738 = header.getOrDefault("X-Amz-Security-Token")
  valid_777738 = validateParameter(valid_777738, JString, required = false,
                                 default = nil)
  if valid_777738 != nil:
    section.add "X-Amz-Security-Token", valid_777738
  var valid_777739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777739 = validateParameter(valid_777739, JString, required = false,
                                 default = nil)
  if valid_777739 != nil:
    section.add "X-Amz-Content-Sha256", valid_777739
  var valid_777740 = header.getOrDefault("X-Amz-Algorithm")
  valid_777740 = validateParameter(valid_777740, JString, required = false,
                                 default = nil)
  if valid_777740 != nil:
    section.add "X-Amz-Algorithm", valid_777740
  var valid_777741 = header.getOrDefault("X-Amz-Signature")
  valid_777741 = validateParameter(valid_777741, JString, required = false,
                                 default = nil)
  if valid_777741 != nil:
    section.add "X-Amz-Signature", valid_777741
  var valid_777742 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777742 = validateParameter(valid_777742, JString, required = false,
                                 default = nil)
  if valid_777742 != nil:
    section.add "X-Amz-SignedHeaders", valid_777742
  var valid_777743 = header.getOrDefault("X-Amz-Credential")
  valid_777743 = validateParameter(valid_777743, JString, required = false,
                                 default = nil)
  if valid_777743 != nil:
    section.add "X-Amz-Credential", valid_777743
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_777744 = formData.getOrDefault("UserName")
  valid_777744 = validateParameter(valid_777744, JString, required = true,
                                 default = nil)
  if valid_777744 != nil:
    section.add "UserName", valid_777744
  var valid_777745 = formData.getOrDefault("Password")
  valid_777745 = validateParameter(valid_777745, JString, required = false,
                                 default = nil)
  if valid_777745 != nil:
    section.add "Password", valid_777745
  var valid_777746 = formData.getOrDefault("PasswordResetRequired")
  valid_777746 = validateParameter(valid_777746, JBool, required = false, default = nil)
  if valid_777746 != nil:
    section.add "PasswordResetRequired", valid_777746
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777747: Call_PostUpdateLoginProfile_777732; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_777747.validator(path, query, header, formData, body)
  let scheme = call_777747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777747.url(scheme.get, call_777747.host, call_777747.base,
                         call_777747.route, valid.getOrDefault("path"))
  result = hook(call_777747, url, valid)

proc call*(call_777748: Call_PostUpdateLoginProfile_777732; UserName: string;
          Password: string = ""; PasswordResetRequired: bool = false;
          Action: string = "UpdateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777749 = newJObject()
  var formData_777750 = newJObject()
  add(formData_777750, "UserName", newJString(UserName))
  add(formData_777750, "Password", newJString(Password))
  add(formData_777750, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_777749, "Action", newJString(Action))
  add(query_777749, "Version", newJString(Version))
  result = call_777748.call(nil, query_777749, nil, formData_777750, nil)

var postUpdateLoginProfile* = Call_PostUpdateLoginProfile_777732(
    name: "postUpdateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_PostUpdateLoginProfile_777733, base: "/",
    url: url_PostUpdateLoginProfile_777734, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateLoginProfile_777714 = ref object of OpenApiRestCall_772597
proc url_GetUpdateLoginProfile_777716(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateLoginProfile_777715(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_777717 = query.getOrDefault("UserName")
  valid_777717 = validateParameter(valid_777717, JString, required = true,
                                 default = nil)
  if valid_777717 != nil:
    section.add "UserName", valid_777717
  var valid_777718 = query.getOrDefault("PasswordResetRequired")
  valid_777718 = validateParameter(valid_777718, JBool, required = false, default = nil)
  if valid_777718 != nil:
    section.add "PasswordResetRequired", valid_777718
  var valid_777719 = query.getOrDefault("Action")
  valid_777719 = validateParameter(valid_777719, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_777719 != nil:
    section.add "Action", valid_777719
  var valid_777720 = query.getOrDefault("Password")
  valid_777720 = validateParameter(valid_777720, JString, required = false,
                                 default = nil)
  if valid_777720 != nil:
    section.add "Password", valid_777720
  var valid_777721 = query.getOrDefault("Version")
  valid_777721 = validateParameter(valid_777721, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777721 != nil:
    section.add "Version", valid_777721
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777722 = header.getOrDefault("X-Amz-Date")
  valid_777722 = validateParameter(valid_777722, JString, required = false,
                                 default = nil)
  if valid_777722 != nil:
    section.add "X-Amz-Date", valid_777722
  var valid_777723 = header.getOrDefault("X-Amz-Security-Token")
  valid_777723 = validateParameter(valid_777723, JString, required = false,
                                 default = nil)
  if valid_777723 != nil:
    section.add "X-Amz-Security-Token", valid_777723
  var valid_777724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777724 = validateParameter(valid_777724, JString, required = false,
                                 default = nil)
  if valid_777724 != nil:
    section.add "X-Amz-Content-Sha256", valid_777724
  var valid_777725 = header.getOrDefault("X-Amz-Algorithm")
  valid_777725 = validateParameter(valid_777725, JString, required = false,
                                 default = nil)
  if valid_777725 != nil:
    section.add "X-Amz-Algorithm", valid_777725
  var valid_777726 = header.getOrDefault("X-Amz-Signature")
  valid_777726 = validateParameter(valid_777726, JString, required = false,
                                 default = nil)
  if valid_777726 != nil:
    section.add "X-Amz-Signature", valid_777726
  var valid_777727 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777727 = validateParameter(valid_777727, JString, required = false,
                                 default = nil)
  if valid_777727 != nil:
    section.add "X-Amz-SignedHeaders", valid_777727
  var valid_777728 = header.getOrDefault("X-Amz-Credential")
  valid_777728 = validateParameter(valid_777728, JString, required = false,
                                 default = nil)
  if valid_777728 != nil:
    section.add "X-Amz-Credential", valid_777728
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777729: Call_GetUpdateLoginProfile_777714; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_777729.validator(path, query, header, formData, body)
  let scheme = call_777729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777729.url(scheme.get, call_777729.host, call_777729.base,
                         call_777729.route, valid.getOrDefault("path"))
  result = hook(call_777729, url, valid)

proc call*(call_777730: Call_GetUpdateLoginProfile_777714; UserName: string;
          PasswordResetRequired: bool = false;
          Action: string = "UpdateLoginProfile"; Password: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   Version: string (required)
  var query_777731 = newJObject()
  add(query_777731, "UserName", newJString(UserName))
  add(query_777731, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_777731, "Action", newJString(Action))
  add(query_777731, "Password", newJString(Password))
  add(query_777731, "Version", newJString(Version))
  result = call_777730.call(nil, query_777731, nil, nil, nil)

var getUpdateLoginProfile* = Call_GetUpdateLoginProfile_777714(
    name: "getUpdateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_GetUpdateLoginProfile_777715, base: "/",
    url: url_GetUpdateLoginProfile_777716, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateOpenIDConnectProviderThumbprint_777768 = ref object of OpenApiRestCall_772597
proc url_PostUpdateOpenIDConnectProviderThumbprint_777770(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateOpenIDConnectProviderThumbprint_777769(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777771 = query.getOrDefault("Action")
  valid_777771 = validateParameter(valid_777771, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_777771 != nil:
    section.add "Action", valid_777771
  var valid_777772 = query.getOrDefault("Version")
  valid_777772 = validateParameter(valid_777772, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777772 != nil:
    section.add "Version", valid_777772
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777773 = header.getOrDefault("X-Amz-Date")
  valid_777773 = validateParameter(valid_777773, JString, required = false,
                                 default = nil)
  if valid_777773 != nil:
    section.add "X-Amz-Date", valid_777773
  var valid_777774 = header.getOrDefault("X-Amz-Security-Token")
  valid_777774 = validateParameter(valid_777774, JString, required = false,
                                 default = nil)
  if valid_777774 != nil:
    section.add "X-Amz-Security-Token", valid_777774
  var valid_777775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777775 = validateParameter(valid_777775, JString, required = false,
                                 default = nil)
  if valid_777775 != nil:
    section.add "X-Amz-Content-Sha256", valid_777775
  var valid_777776 = header.getOrDefault("X-Amz-Algorithm")
  valid_777776 = validateParameter(valid_777776, JString, required = false,
                                 default = nil)
  if valid_777776 != nil:
    section.add "X-Amz-Algorithm", valid_777776
  var valid_777777 = header.getOrDefault("X-Amz-Signature")
  valid_777777 = validateParameter(valid_777777, JString, required = false,
                                 default = nil)
  if valid_777777 != nil:
    section.add "X-Amz-Signature", valid_777777
  var valid_777778 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777778 = validateParameter(valid_777778, JString, required = false,
                                 default = nil)
  if valid_777778 != nil:
    section.add "X-Amz-SignedHeaders", valid_777778
  var valid_777779 = header.getOrDefault("X-Amz-Credential")
  valid_777779 = validateParameter(valid_777779, JString, required = false,
                                 default = nil)
  if valid_777779 != nil:
    section.add "X-Amz-Credential", valid_777779
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_777780 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_777780 = validateParameter(valid_777780, JString, required = true,
                                 default = nil)
  if valid_777780 != nil:
    section.add "OpenIDConnectProviderArn", valid_777780
  var valid_777781 = formData.getOrDefault("ThumbprintList")
  valid_777781 = validateParameter(valid_777781, JArray, required = true, default = nil)
  if valid_777781 != nil:
    section.add "ThumbprintList", valid_777781
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777782: Call_PostUpdateOpenIDConnectProviderThumbprint_777768;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_777782.validator(path, query, header, formData, body)
  let scheme = call_777782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777782.url(scheme.get, call_777782.host, call_777782.base,
                         call_777782.route, valid.getOrDefault("path"))
  result = hook(call_777782, url, valid)

proc call*(call_777783: Call_PostUpdateOpenIDConnectProviderThumbprint_777768;
          OpenIDConnectProviderArn: string; ThumbprintList: JsonNode;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777784 = newJObject()
  var formData_777785 = newJObject()
  add(formData_777785, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  if ThumbprintList != nil:
    formData_777785.add "ThumbprintList", ThumbprintList
  add(query_777784, "Action", newJString(Action))
  add(query_777784, "Version", newJString(Version))
  result = call_777783.call(nil, query_777784, nil, formData_777785, nil)

var postUpdateOpenIDConnectProviderThumbprint* = Call_PostUpdateOpenIDConnectProviderThumbprint_777768(
    name: "postUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_PostUpdateOpenIDConnectProviderThumbprint_777769,
    base: "/", url: url_PostUpdateOpenIDConnectProviderThumbprint_777770,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateOpenIDConnectProviderThumbprint_777751 = ref object of OpenApiRestCall_772597
proc url_GetUpdateOpenIDConnectProviderThumbprint_777753(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateOpenIDConnectProviderThumbprint_777752(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_777754 = query.getOrDefault("ThumbprintList")
  valid_777754 = validateParameter(valid_777754, JArray, required = true, default = nil)
  if valid_777754 != nil:
    section.add "ThumbprintList", valid_777754
  var valid_777755 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_777755 = validateParameter(valid_777755, JString, required = true,
                                 default = nil)
  if valid_777755 != nil:
    section.add "OpenIDConnectProviderArn", valid_777755
  var valid_777756 = query.getOrDefault("Action")
  valid_777756 = validateParameter(valid_777756, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_777756 != nil:
    section.add "Action", valid_777756
  var valid_777757 = query.getOrDefault("Version")
  valid_777757 = validateParameter(valid_777757, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777757 != nil:
    section.add "Version", valid_777757
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777758 = header.getOrDefault("X-Amz-Date")
  valid_777758 = validateParameter(valid_777758, JString, required = false,
                                 default = nil)
  if valid_777758 != nil:
    section.add "X-Amz-Date", valid_777758
  var valid_777759 = header.getOrDefault("X-Amz-Security-Token")
  valid_777759 = validateParameter(valid_777759, JString, required = false,
                                 default = nil)
  if valid_777759 != nil:
    section.add "X-Amz-Security-Token", valid_777759
  var valid_777760 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777760 = validateParameter(valid_777760, JString, required = false,
                                 default = nil)
  if valid_777760 != nil:
    section.add "X-Amz-Content-Sha256", valid_777760
  var valid_777761 = header.getOrDefault("X-Amz-Algorithm")
  valid_777761 = validateParameter(valid_777761, JString, required = false,
                                 default = nil)
  if valid_777761 != nil:
    section.add "X-Amz-Algorithm", valid_777761
  var valid_777762 = header.getOrDefault("X-Amz-Signature")
  valid_777762 = validateParameter(valid_777762, JString, required = false,
                                 default = nil)
  if valid_777762 != nil:
    section.add "X-Amz-Signature", valid_777762
  var valid_777763 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777763 = validateParameter(valid_777763, JString, required = false,
                                 default = nil)
  if valid_777763 != nil:
    section.add "X-Amz-SignedHeaders", valid_777763
  var valid_777764 = header.getOrDefault("X-Amz-Credential")
  valid_777764 = validateParameter(valid_777764, JString, required = false,
                                 default = nil)
  if valid_777764 != nil:
    section.add "X-Amz-Credential", valid_777764
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777765: Call_GetUpdateOpenIDConnectProviderThumbprint_777751;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_777765.validator(path, query, header, formData, body)
  let scheme = call_777765.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777765.url(scheme.get, call_777765.host, call_777765.base,
                         call_777765.route, valid.getOrDefault("path"))
  result = hook(call_777765, url, valid)

proc call*(call_777766: Call_GetUpdateOpenIDConnectProviderThumbprint_777751;
          ThumbprintList: JsonNode; OpenIDConnectProviderArn: string;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777767 = newJObject()
  if ThumbprintList != nil:
    query_777767.add "ThumbprintList", ThumbprintList
  add(query_777767, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_777767, "Action", newJString(Action))
  add(query_777767, "Version", newJString(Version))
  result = call_777766.call(nil, query_777767, nil, nil, nil)

var getUpdateOpenIDConnectProviderThumbprint* = Call_GetUpdateOpenIDConnectProviderThumbprint_777751(
    name: "getUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_GetUpdateOpenIDConnectProviderThumbprint_777752,
    base: "/", url: url_GetUpdateOpenIDConnectProviderThumbprint_777753,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRole_777804 = ref object of OpenApiRestCall_772597
proc url_PostUpdateRole_777806(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateRole_777805(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777807 = query.getOrDefault("Action")
  valid_777807 = validateParameter(valid_777807, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_777807 != nil:
    section.add "Action", valid_777807
  var valid_777808 = query.getOrDefault("Version")
  valid_777808 = validateParameter(valid_777808, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777808 != nil:
    section.add "Version", valid_777808
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777809 = header.getOrDefault("X-Amz-Date")
  valid_777809 = validateParameter(valid_777809, JString, required = false,
                                 default = nil)
  if valid_777809 != nil:
    section.add "X-Amz-Date", valid_777809
  var valid_777810 = header.getOrDefault("X-Amz-Security-Token")
  valid_777810 = validateParameter(valid_777810, JString, required = false,
                                 default = nil)
  if valid_777810 != nil:
    section.add "X-Amz-Security-Token", valid_777810
  var valid_777811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777811 = validateParameter(valid_777811, JString, required = false,
                                 default = nil)
  if valid_777811 != nil:
    section.add "X-Amz-Content-Sha256", valid_777811
  var valid_777812 = header.getOrDefault("X-Amz-Algorithm")
  valid_777812 = validateParameter(valid_777812, JString, required = false,
                                 default = nil)
  if valid_777812 != nil:
    section.add "X-Amz-Algorithm", valid_777812
  var valid_777813 = header.getOrDefault("X-Amz-Signature")
  valid_777813 = validateParameter(valid_777813, JString, required = false,
                                 default = nil)
  if valid_777813 != nil:
    section.add "X-Amz-Signature", valid_777813
  var valid_777814 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777814 = validateParameter(valid_777814, JString, required = false,
                                 default = nil)
  if valid_777814 != nil:
    section.add "X-Amz-SignedHeaders", valid_777814
  var valid_777815 = header.getOrDefault("X-Amz-Credential")
  valid_777815 = validateParameter(valid_777815, JString, required = false,
                                 default = nil)
  if valid_777815 != nil:
    section.add "X-Amz-Credential", valid_777815
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_777816 = formData.getOrDefault("RoleName")
  valid_777816 = validateParameter(valid_777816, JString, required = true,
                                 default = nil)
  if valid_777816 != nil:
    section.add "RoleName", valid_777816
  var valid_777817 = formData.getOrDefault("MaxSessionDuration")
  valid_777817 = validateParameter(valid_777817, JInt, required = false, default = nil)
  if valid_777817 != nil:
    section.add "MaxSessionDuration", valid_777817
  var valid_777818 = formData.getOrDefault("Description")
  valid_777818 = validateParameter(valid_777818, JString, required = false,
                                 default = nil)
  if valid_777818 != nil:
    section.add "Description", valid_777818
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777819: Call_PostUpdateRole_777804; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_777819.validator(path, query, header, formData, body)
  let scheme = call_777819.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777819.url(scheme.get, call_777819.host, call_777819.base,
                         call_777819.route, valid.getOrDefault("path"))
  result = hook(call_777819, url, valid)

proc call*(call_777820: Call_PostUpdateRole_777804; RoleName: string;
          Action: string = "UpdateRole"; MaxSessionDuration: int = 0;
          Version: string = "2010-05-08"; Description: string = ""): Recallable =
  ## postUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  var query_777821 = newJObject()
  var formData_777822 = newJObject()
  add(formData_777822, "RoleName", newJString(RoleName))
  add(query_777821, "Action", newJString(Action))
  add(formData_777822, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_777821, "Version", newJString(Version))
  add(formData_777822, "Description", newJString(Description))
  result = call_777820.call(nil, query_777821, nil, formData_777822, nil)

var postUpdateRole* = Call_PostUpdateRole_777804(name: "postUpdateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_PostUpdateRole_777805,
    base: "/", url: url_PostUpdateRole_777806, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRole_777786 = ref object of OpenApiRestCall_772597
proc url_GetUpdateRole_777788(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateRole_777787(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Version: JString (required)
  section = newJObject()
  var valid_777789 = query.getOrDefault("Description")
  valid_777789 = validateParameter(valid_777789, JString, required = false,
                                 default = nil)
  if valid_777789 != nil:
    section.add "Description", valid_777789
  var valid_777790 = query.getOrDefault("MaxSessionDuration")
  valid_777790 = validateParameter(valid_777790, JInt, required = false, default = nil)
  if valid_777790 != nil:
    section.add "MaxSessionDuration", valid_777790
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777791 = query.getOrDefault("Action")
  valid_777791 = validateParameter(valid_777791, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_777791 != nil:
    section.add "Action", valid_777791
  var valid_777792 = query.getOrDefault("RoleName")
  valid_777792 = validateParameter(valid_777792, JString, required = true,
                                 default = nil)
  if valid_777792 != nil:
    section.add "RoleName", valid_777792
  var valid_777793 = query.getOrDefault("Version")
  valid_777793 = validateParameter(valid_777793, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777793 != nil:
    section.add "Version", valid_777793
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777794 = header.getOrDefault("X-Amz-Date")
  valid_777794 = validateParameter(valid_777794, JString, required = false,
                                 default = nil)
  if valid_777794 != nil:
    section.add "X-Amz-Date", valid_777794
  var valid_777795 = header.getOrDefault("X-Amz-Security-Token")
  valid_777795 = validateParameter(valid_777795, JString, required = false,
                                 default = nil)
  if valid_777795 != nil:
    section.add "X-Amz-Security-Token", valid_777795
  var valid_777796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777796 = validateParameter(valid_777796, JString, required = false,
                                 default = nil)
  if valid_777796 != nil:
    section.add "X-Amz-Content-Sha256", valid_777796
  var valid_777797 = header.getOrDefault("X-Amz-Algorithm")
  valid_777797 = validateParameter(valid_777797, JString, required = false,
                                 default = nil)
  if valid_777797 != nil:
    section.add "X-Amz-Algorithm", valid_777797
  var valid_777798 = header.getOrDefault("X-Amz-Signature")
  valid_777798 = validateParameter(valid_777798, JString, required = false,
                                 default = nil)
  if valid_777798 != nil:
    section.add "X-Amz-Signature", valid_777798
  var valid_777799 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777799 = validateParameter(valid_777799, JString, required = false,
                                 default = nil)
  if valid_777799 != nil:
    section.add "X-Amz-SignedHeaders", valid_777799
  var valid_777800 = header.getOrDefault("X-Amz-Credential")
  valid_777800 = validateParameter(valid_777800, JString, required = false,
                                 default = nil)
  if valid_777800 != nil:
    section.add "X-Amz-Credential", valid_777800
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777801: Call_GetUpdateRole_777786; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_777801.validator(path, query, header, formData, body)
  let scheme = call_777801.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777801.url(scheme.get, call_777801.host, call_777801.base,
                         call_777801.route, valid.getOrDefault("path"))
  result = hook(call_777801, url, valid)

proc call*(call_777802: Call_GetUpdateRole_777786; RoleName: string;
          Description: string = ""; MaxSessionDuration: int = 0;
          Action: string = "UpdateRole"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Version: string (required)
  var query_777803 = newJObject()
  add(query_777803, "Description", newJString(Description))
  add(query_777803, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_777803, "Action", newJString(Action))
  add(query_777803, "RoleName", newJString(RoleName))
  add(query_777803, "Version", newJString(Version))
  result = call_777802.call(nil, query_777803, nil, nil, nil)

var getUpdateRole* = Call_GetUpdateRole_777786(name: "getUpdateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_GetUpdateRole_777787,
    base: "/", url: url_GetUpdateRole_777788, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRoleDescription_777840 = ref object of OpenApiRestCall_772597
proc url_PostUpdateRoleDescription_777842(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateRoleDescription_777841(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777843 = query.getOrDefault("Action")
  valid_777843 = validateParameter(valid_777843, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_777843 != nil:
    section.add "Action", valid_777843
  var valid_777844 = query.getOrDefault("Version")
  valid_777844 = validateParameter(valid_777844, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777844 != nil:
    section.add "Version", valid_777844
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777845 = header.getOrDefault("X-Amz-Date")
  valid_777845 = validateParameter(valid_777845, JString, required = false,
                                 default = nil)
  if valid_777845 != nil:
    section.add "X-Amz-Date", valid_777845
  var valid_777846 = header.getOrDefault("X-Amz-Security-Token")
  valid_777846 = validateParameter(valid_777846, JString, required = false,
                                 default = nil)
  if valid_777846 != nil:
    section.add "X-Amz-Security-Token", valid_777846
  var valid_777847 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777847 = validateParameter(valid_777847, JString, required = false,
                                 default = nil)
  if valid_777847 != nil:
    section.add "X-Amz-Content-Sha256", valid_777847
  var valid_777848 = header.getOrDefault("X-Amz-Algorithm")
  valid_777848 = validateParameter(valid_777848, JString, required = false,
                                 default = nil)
  if valid_777848 != nil:
    section.add "X-Amz-Algorithm", valid_777848
  var valid_777849 = header.getOrDefault("X-Amz-Signature")
  valid_777849 = validateParameter(valid_777849, JString, required = false,
                                 default = nil)
  if valid_777849 != nil:
    section.add "X-Amz-Signature", valid_777849
  var valid_777850 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777850 = validateParameter(valid_777850, JString, required = false,
                                 default = nil)
  if valid_777850 != nil:
    section.add "X-Amz-SignedHeaders", valid_777850
  var valid_777851 = header.getOrDefault("X-Amz-Credential")
  valid_777851 = validateParameter(valid_777851, JString, required = false,
                                 default = nil)
  if valid_777851 != nil:
    section.add "X-Amz-Credential", valid_777851
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_777852 = formData.getOrDefault("RoleName")
  valid_777852 = validateParameter(valid_777852, JString, required = true,
                                 default = nil)
  if valid_777852 != nil:
    section.add "RoleName", valid_777852
  var valid_777853 = formData.getOrDefault("Description")
  valid_777853 = validateParameter(valid_777853, JString, required = true,
                                 default = nil)
  if valid_777853 != nil:
    section.add "Description", valid_777853
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777854: Call_PostUpdateRoleDescription_777840; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_777854.validator(path, query, header, formData, body)
  let scheme = call_777854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777854.url(scheme.get, call_777854.host, call_777854.base,
                         call_777854.route, valid.getOrDefault("path"))
  result = hook(call_777854, url, valid)

proc call*(call_777855: Call_PostUpdateRoleDescription_777840; RoleName: string;
          Description: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  var query_777856 = newJObject()
  var formData_777857 = newJObject()
  add(formData_777857, "RoleName", newJString(RoleName))
  add(query_777856, "Action", newJString(Action))
  add(query_777856, "Version", newJString(Version))
  add(formData_777857, "Description", newJString(Description))
  result = call_777855.call(nil, query_777856, nil, formData_777857, nil)

var postUpdateRoleDescription* = Call_PostUpdateRoleDescription_777840(
    name: "postUpdateRoleDescription", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_PostUpdateRoleDescription_777841, base: "/",
    url: url_PostUpdateRoleDescription_777842,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRoleDescription_777823 = ref object of OpenApiRestCall_772597
proc url_GetUpdateRoleDescription_777825(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateRoleDescription_777824(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Description` field"
  var valid_777826 = query.getOrDefault("Description")
  valid_777826 = validateParameter(valid_777826, JString, required = true,
                                 default = nil)
  if valid_777826 != nil:
    section.add "Description", valid_777826
  var valid_777827 = query.getOrDefault("Action")
  valid_777827 = validateParameter(valid_777827, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_777827 != nil:
    section.add "Action", valid_777827
  var valid_777828 = query.getOrDefault("RoleName")
  valid_777828 = validateParameter(valid_777828, JString, required = true,
                                 default = nil)
  if valid_777828 != nil:
    section.add "RoleName", valid_777828
  var valid_777829 = query.getOrDefault("Version")
  valid_777829 = validateParameter(valid_777829, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777829 != nil:
    section.add "Version", valid_777829
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777830 = header.getOrDefault("X-Amz-Date")
  valid_777830 = validateParameter(valid_777830, JString, required = false,
                                 default = nil)
  if valid_777830 != nil:
    section.add "X-Amz-Date", valid_777830
  var valid_777831 = header.getOrDefault("X-Amz-Security-Token")
  valid_777831 = validateParameter(valid_777831, JString, required = false,
                                 default = nil)
  if valid_777831 != nil:
    section.add "X-Amz-Security-Token", valid_777831
  var valid_777832 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777832 = validateParameter(valid_777832, JString, required = false,
                                 default = nil)
  if valid_777832 != nil:
    section.add "X-Amz-Content-Sha256", valid_777832
  var valid_777833 = header.getOrDefault("X-Amz-Algorithm")
  valid_777833 = validateParameter(valid_777833, JString, required = false,
                                 default = nil)
  if valid_777833 != nil:
    section.add "X-Amz-Algorithm", valid_777833
  var valid_777834 = header.getOrDefault("X-Amz-Signature")
  valid_777834 = validateParameter(valid_777834, JString, required = false,
                                 default = nil)
  if valid_777834 != nil:
    section.add "X-Amz-Signature", valid_777834
  var valid_777835 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777835 = validateParameter(valid_777835, JString, required = false,
                                 default = nil)
  if valid_777835 != nil:
    section.add "X-Amz-SignedHeaders", valid_777835
  var valid_777836 = header.getOrDefault("X-Amz-Credential")
  valid_777836 = validateParameter(valid_777836, JString, required = false,
                                 default = nil)
  if valid_777836 != nil:
    section.add "X-Amz-Credential", valid_777836
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777837: Call_GetUpdateRoleDescription_777823; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_777837.validator(path, query, header, formData, body)
  let scheme = call_777837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777837.url(scheme.get, call_777837.host, call_777837.base,
                         call_777837.route, valid.getOrDefault("path"))
  result = hook(call_777837, url, valid)

proc call*(call_777838: Call_GetUpdateRoleDescription_777823; Description: string;
          RoleName: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Version: string (required)
  var query_777839 = newJObject()
  add(query_777839, "Description", newJString(Description))
  add(query_777839, "Action", newJString(Action))
  add(query_777839, "RoleName", newJString(RoleName))
  add(query_777839, "Version", newJString(Version))
  result = call_777838.call(nil, query_777839, nil, nil, nil)

var getUpdateRoleDescription* = Call_GetUpdateRoleDescription_777823(
    name: "getUpdateRoleDescription", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_GetUpdateRoleDescription_777824, base: "/",
    url: url_GetUpdateRoleDescription_777825, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSAMLProvider_777875 = ref object of OpenApiRestCall_772597
proc url_PostUpdateSAMLProvider_777877(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateSAMLProvider_777876(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777878 = query.getOrDefault("Action")
  valid_777878 = validateParameter(valid_777878, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_777878 != nil:
    section.add "Action", valid_777878
  var valid_777879 = query.getOrDefault("Version")
  valid_777879 = validateParameter(valid_777879, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777879 != nil:
    section.add "Version", valid_777879
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777880 = header.getOrDefault("X-Amz-Date")
  valid_777880 = validateParameter(valid_777880, JString, required = false,
                                 default = nil)
  if valid_777880 != nil:
    section.add "X-Amz-Date", valid_777880
  var valid_777881 = header.getOrDefault("X-Amz-Security-Token")
  valid_777881 = validateParameter(valid_777881, JString, required = false,
                                 default = nil)
  if valid_777881 != nil:
    section.add "X-Amz-Security-Token", valid_777881
  var valid_777882 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777882 = validateParameter(valid_777882, JString, required = false,
                                 default = nil)
  if valid_777882 != nil:
    section.add "X-Amz-Content-Sha256", valid_777882
  var valid_777883 = header.getOrDefault("X-Amz-Algorithm")
  valid_777883 = validateParameter(valid_777883, JString, required = false,
                                 default = nil)
  if valid_777883 != nil:
    section.add "X-Amz-Algorithm", valid_777883
  var valid_777884 = header.getOrDefault("X-Amz-Signature")
  valid_777884 = validateParameter(valid_777884, JString, required = false,
                                 default = nil)
  if valid_777884 != nil:
    section.add "X-Amz-Signature", valid_777884
  var valid_777885 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777885 = validateParameter(valid_777885, JString, required = false,
                                 default = nil)
  if valid_777885 != nil:
    section.add "X-Amz-SignedHeaders", valid_777885
  var valid_777886 = header.getOrDefault("X-Amz-Credential")
  valid_777886 = validateParameter(valid_777886, JString, required = false,
                                 default = nil)
  if valid_777886 != nil:
    section.add "X-Amz-Credential", valid_777886
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_777887 = formData.getOrDefault("SAMLProviderArn")
  valid_777887 = validateParameter(valid_777887, JString, required = true,
                                 default = nil)
  if valid_777887 != nil:
    section.add "SAMLProviderArn", valid_777887
  var valid_777888 = formData.getOrDefault("SAMLMetadataDocument")
  valid_777888 = validateParameter(valid_777888, JString, required = true,
                                 default = nil)
  if valid_777888 != nil:
    section.add "SAMLMetadataDocument", valid_777888
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777889: Call_PostUpdateSAMLProvider_777875; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_777889.validator(path, query, header, formData, body)
  let scheme = call_777889.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777889.url(scheme.get, call_777889.host, call_777889.base,
                         call_777889.route, valid.getOrDefault("path"))
  result = hook(call_777889, url, valid)

proc call*(call_777890: Call_PostUpdateSAMLProvider_777875;
          SAMLProviderArn: string; SAMLMetadataDocument: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Version: string (required)
  var query_777891 = newJObject()
  var formData_777892 = newJObject()
  add(formData_777892, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_777891, "Action", newJString(Action))
  add(formData_777892, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_777891, "Version", newJString(Version))
  result = call_777890.call(nil, query_777891, nil, formData_777892, nil)

var postUpdateSAMLProvider* = Call_PostUpdateSAMLProvider_777875(
    name: "postUpdateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_PostUpdateSAMLProvider_777876, base: "/",
    url: url_PostUpdateSAMLProvider_777877, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSAMLProvider_777858 = ref object of OpenApiRestCall_772597
proc url_GetUpdateSAMLProvider_777860(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateSAMLProvider_777859(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SAMLMetadataDocument` field"
  var valid_777861 = query.getOrDefault("SAMLMetadataDocument")
  valid_777861 = validateParameter(valid_777861, JString, required = true,
                                 default = nil)
  if valid_777861 != nil:
    section.add "SAMLMetadataDocument", valid_777861
  var valid_777862 = query.getOrDefault("Action")
  valid_777862 = validateParameter(valid_777862, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_777862 != nil:
    section.add "Action", valid_777862
  var valid_777863 = query.getOrDefault("SAMLProviderArn")
  valid_777863 = validateParameter(valid_777863, JString, required = true,
                                 default = nil)
  if valid_777863 != nil:
    section.add "SAMLProviderArn", valid_777863
  var valid_777864 = query.getOrDefault("Version")
  valid_777864 = validateParameter(valid_777864, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777864 != nil:
    section.add "Version", valid_777864
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777865 = header.getOrDefault("X-Amz-Date")
  valid_777865 = validateParameter(valid_777865, JString, required = false,
                                 default = nil)
  if valid_777865 != nil:
    section.add "X-Amz-Date", valid_777865
  var valid_777866 = header.getOrDefault("X-Amz-Security-Token")
  valid_777866 = validateParameter(valid_777866, JString, required = false,
                                 default = nil)
  if valid_777866 != nil:
    section.add "X-Amz-Security-Token", valid_777866
  var valid_777867 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777867 = validateParameter(valid_777867, JString, required = false,
                                 default = nil)
  if valid_777867 != nil:
    section.add "X-Amz-Content-Sha256", valid_777867
  var valid_777868 = header.getOrDefault("X-Amz-Algorithm")
  valid_777868 = validateParameter(valid_777868, JString, required = false,
                                 default = nil)
  if valid_777868 != nil:
    section.add "X-Amz-Algorithm", valid_777868
  var valid_777869 = header.getOrDefault("X-Amz-Signature")
  valid_777869 = validateParameter(valid_777869, JString, required = false,
                                 default = nil)
  if valid_777869 != nil:
    section.add "X-Amz-Signature", valid_777869
  var valid_777870 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777870 = validateParameter(valid_777870, JString, required = false,
                                 default = nil)
  if valid_777870 != nil:
    section.add "X-Amz-SignedHeaders", valid_777870
  var valid_777871 = header.getOrDefault("X-Amz-Credential")
  valid_777871 = validateParameter(valid_777871, JString, required = false,
                                 default = nil)
  if valid_777871 != nil:
    section.add "X-Amz-Credential", valid_777871
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777872: Call_GetUpdateSAMLProvider_777858; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_777872.validator(path, query, header, formData, body)
  let scheme = call_777872.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777872.url(scheme.get, call_777872.host, call_777872.base,
                         call_777872.route, valid.getOrDefault("path"))
  result = hook(call_777872, url, valid)

proc call*(call_777873: Call_GetUpdateSAMLProvider_777858;
          SAMLMetadataDocument: string; SAMLProviderArn: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_777874 = newJObject()
  add(query_777874, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_777874, "Action", newJString(Action))
  add(query_777874, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_777874, "Version", newJString(Version))
  result = call_777873.call(nil, query_777874, nil, nil, nil)

var getUpdateSAMLProvider* = Call_GetUpdateSAMLProvider_777858(
    name: "getUpdateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_GetUpdateSAMLProvider_777859, base: "/",
    url: url_GetUpdateSAMLProvider_777860, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSSHPublicKey_777911 = ref object of OpenApiRestCall_772597
proc url_PostUpdateSSHPublicKey_777913(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateSSHPublicKey_777912(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777914 = query.getOrDefault("Action")
  valid_777914 = validateParameter(valid_777914, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_777914 != nil:
    section.add "Action", valid_777914
  var valid_777915 = query.getOrDefault("Version")
  valid_777915 = validateParameter(valid_777915, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777915 != nil:
    section.add "Version", valid_777915
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777916 = header.getOrDefault("X-Amz-Date")
  valid_777916 = validateParameter(valid_777916, JString, required = false,
                                 default = nil)
  if valid_777916 != nil:
    section.add "X-Amz-Date", valid_777916
  var valid_777917 = header.getOrDefault("X-Amz-Security-Token")
  valid_777917 = validateParameter(valid_777917, JString, required = false,
                                 default = nil)
  if valid_777917 != nil:
    section.add "X-Amz-Security-Token", valid_777917
  var valid_777918 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777918 = validateParameter(valid_777918, JString, required = false,
                                 default = nil)
  if valid_777918 != nil:
    section.add "X-Amz-Content-Sha256", valid_777918
  var valid_777919 = header.getOrDefault("X-Amz-Algorithm")
  valid_777919 = validateParameter(valid_777919, JString, required = false,
                                 default = nil)
  if valid_777919 != nil:
    section.add "X-Amz-Algorithm", valid_777919
  var valid_777920 = header.getOrDefault("X-Amz-Signature")
  valid_777920 = validateParameter(valid_777920, JString, required = false,
                                 default = nil)
  if valid_777920 != nil:
    section.add "X-Amz-Signature", valid_777920
  var valid_777921 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777921 = validateParameter(valid_777921, JString, required = false,
                                 default = nil)
  if valid_777921 != nil:
    section.add "X-Amz-SignedHeaders", valid_777921
  var valid_777922 = header.getOrDefault("X-Amz-Credential")
  valid_777922 = validateParameter(valid_777922, JString, required = false,
                                 default = nil)
  if valid_777922 != nil:
    section.add "X-Amz-Credential", valid_777922
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_777923 = formData.getOrDefault("UserName")
  valid_777923 = validateParameter(valid_777923, JString, required = true,
                                 default = nil)
  if valid_777923 != nil:
    section.add "UserName", valid_777923
  var valid_777924 = formData.getOrDefault("SSHPublicKeyId")
  valid_777924 = validateParameter(valid_777924, JString, required = true,
                                 default = nil)
  if valid_777924 != nil:
    section.add "SSHPublicKeyId", valid_777924
  var valid_777925 = formData.getOrDefault("Status")
  valid_777925 = validateParameter(valid_777925, JString, required = true,
                                 default = newJString("Active"))
  if valid_777925 != nil:
    section.add "Status", valid_777925
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777926: Call_PostUpdateSSHPublicKey_777911; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_777926.validator(path, query, header, formData, body)
  let scheme = call_777926.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777926.url(scheme.get, call_777926.host, call_777926.base,
                         call_777926.route, valid.getOrDefault("path"))
  result = hook(call_777926, url, valid)

proc call*(call_777927: Call_PostUpdateSSHPublicKey_777911; UserName: string;
          SSHPublicKeyId: string; Status: string = "Active";
          Action: string = "UpdateSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777928 = newJObject()
  var formData_777929 = newJObject()
  add(formData_777929, "UserName", newJString(UserName))
  add(formData_777929, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_777929, "Status", newJString(Status))
  add(query_777928, "Action", newJString(Action))
  add(query_777928, "Version", newJString(Version))
  result = call_777927.call(nil, query_777928, nil, formData_777929, nil)

var postUpdateSSHPublicKey* = Call_PostUpdateSSHPublicKey_777911(
    name: "postUpdateSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_PostUpdateSSHPublicKey_777912, base: "/",
    url: url_PostUpdateSSHPublicKey_777913, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSSHPublicKey_777893 = ref object of OpenApiRestCall_772597
proc url_GetUpdateSSHPublicKey_777895(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateSSHPublicKey_777894(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_777896 = query.getOrDefault("Status")
  valid_777896 = validateParameter(valid_777896, JString, required = true,
                                 default = newJString("Active"))
  if valid_777896 != nil:
    section.add "Status", valid_777896
  var valid_777897 = query.getOrDefault("SSHPublicKeyId")
  valid_777897 = validateParameter(valid_777897, JString, required = true,
                                 default = nil)
  if valid_777897 != nil:
    section.add "SSHPublicKeyId", valid_777897
  var valid_777898 = query.getOrDefault("UserName")
  valid_777898 = validateParameter(valid_777898, JString, required = true,
                                 default = nil)
  if valid_777898 != nil:
    section.add "UserName", valid_777898
  var valid_777899 = query.getOrDefault("Action")
  valid_777899 = validateParameter(valid_777899, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_777899 != nil:
    section.add "Action", valid_777899
  var valid_777900 = query.getOrDefault("Version")
  valid_777900 = validateParameter(valid_777900, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777900 != nil:
    section.add "Version", valid_777900
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777901 = header.getOrDefault("X-Amz-Date")
  valid_777901 = validateParameter(valid_777901, JString, required = false,
                                 default = nil)
  if valid_777901 != nil:
    section.add "X-Amz-Date", valid_777901
  var valid_777902 = header.getOrDefault("X-Amz-Security-Token")
  valid_777902 = validateParameter(valid_777902, JString, required = false,
                                 default = nil)
  if valid_777902 != nil:
    section.add "X-Amz-Security-Token", valid_777902
  var valid_777903 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777903 = validateParameter(valid_777903, JString, required = false,
                                 default = nil)
  if valid_777903 != nil:
    section.add "X-Amz-Content-Sha256", valid_777903
  var valid_777904 = header.getOrDefault("X-Amz-Algorithm")
  valid_777904 = validateParameter(valid_777904, JString, required = false,
                                 default = nil)
  if valid_777904 != nil:
    section.add "X-Amz-Algorithm", valid_777904
  var valid_777905 = header.getOrDefault("X-Amz-Signature")
  valid_777905 = validateParameter(valid_777905, JString, required = false,
                                 default = nil)
  if valid_777905 != nil:
    section.add "X-Amz-Signature", valid_777905
  var valid_777906 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777906 = validateParameter(valid_777906, JString, required = false,
                                 default = nil)
  if valid_777906 != nil:
    section.add "X-Amz-SignedHeaders", valid_777906
  var valid_777907 = header.getOrDefault("X-Amz-Credential")
  valid_777907 = validateParameter(valid_777907, JString, required = false,
                                 default = nil)
  if valid_777907 != nil:
    section.add "X-Amz-Credential", valid_777907
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777908: Call_GetUpdateSSHPublicKey_777893; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_777908.validator(path, query, header, formData, body)
  let scheme = call_777908.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777908.url(scheme.get, call_777908.host, call_777908.base,
                         call_777908.route, valid.getOrDefault("path"))
  result = hook(call_777908, url, valid)

proc call*(call_777909: Call_GetUpdateSSHPublicKey_777893; SSHPublicKeyId: string;
          UserName: string; Status: string = "Active";
          Action: string = "UpdateSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777910 = newJObject()
  add(query_777910, "Status", newJString(Status))
  add(query_777910, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_777910, "UserName", newJString(UserName))
  add(query_777910, "Action", newJString(Action))
  add(query_777910, "Version", newJString(Version))
  result = call_777909.call(nil, query_777910, nil, nil, nil)

var getUpdateSSHPublicKey* = Call_GetUpdateSSHPublicKey_777893(
    name: "getUpdateSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_GetUpdateSSHPublicKey_777894, base: "/",
    url: url_GetUpdateSSHPublicKey_777895, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServerCertificate_777948 = ref object of OpenApiRestCall_772597
proc url_PostUpdateServerCertificate_777950(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateServerCertificate_777949(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777951 = query.getOrDefault("Action")
  valid_777951 = validateParameter(valid_777951, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_777951 != nil:
    section.add "Action", valid_777951
  var valid_777952 = query.getOrDefault("Version")
  valid_777952 = validateParameter(valid_777952, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777952 != nil:
    section.add "Version", valid_777952
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777953 = header.getOrDefault("X-Amz-Date")
  valid_777953 = validateParameter(valid_777953, JString, required = false,
                                 default = nil)
  if valid_777953 != nil:
    section.add "X-Amz-Date", valid_777953
  var valid_777954 = header.getOrDefault("X-Amz-Security-Token")
  valid_777954 = validateParameter(valid_777954, JString, required = false,
                                 default = nil)
  if valid_777954 != nil:
    section.add "X-Amz-Security-Token", valid_777954
  var valid_777955 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777955 = validateParameter(valid_777955, JString, required = false,
                                 default = nil)
  if valid_777955 != nil:
    section.add "X-Amz-Content-Sha256", valid_777955
  var valid_777956 = header.getOrDefault("X-Amz-Algorithm")
  valid_777956 = validateParameter(valid_777956, JString, required = false,
                                 default = nil)
  if valid_777956 != nil:
    section.add "X-Amz-Algorithm", valid_777956
  var valid_777957 = header.getOrDefault("X-Amz-Signature")
  valid_777957 = validateParameter(valid_777957, JString, required = false,
                                 default = nil)
  if valid_777957 != nil:
    section.add "X-Amz-Signature", valid_777957
  var valid_777958 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777958 = validateParameter(valid_777958, JString, required = false,
                                 default = nil)
  if valid_777958 != nil:
    section.add "X-Amz-SignedHeaders", valid_777958
  var valid_777959 = header.getOrDefault("X-Amz-Credential")
  valid_777959 = validateParameter(valid_777959, JString, required = false,
                                 default = nil)
  if valid_777959 != nil:
    section.add "X-Amz-Credential", valid_777959
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_777960 = formData.getOrDefault("ServerCertificateName")
  valid_777960 = validateParameter(valid_777960, JString, required = true,
                                 default = nil)
  if valid_777960 != nil:
    section.add "ServerCertificateName", valid_777960
  var valid_777961 = formData.getOrDefault("NewServerCertificateName")
  valid_777961 = validateParameter(valid_777961, JString, required = false,
                                 default = nil)
  if valid_777961 != nil:
    section.add "NewServerCertificateName", valid_777961
  var valid_777962 = formData.getOrDefault("NewPath")
  valid_777962 = validateParameter(valid_777962, JString, required = false,
                                 default = nil)
  if valid_777962 != nil:
    section.add "NewPath", valid_777962
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777963: Call_PostUpdateServerCertificate_777948; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_777963.validator(path, query, header, formData, body)
  let scheme = call_777963.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777963.url(scheme.get, call_777963.host, call_777963.base,
                         call_777963.route, valid.getOrDefault("path"))
  result = hook(call_777963, url, valid)

proc call*(call_777964: Call_PostUpdateServerCertificate_777948;
          ServerCertificateName: string;
          Action: string = "UpdateServerCertificate";
          NewServerCertificateName: string = ""; Version: string = "2010-05-08";
          NewPath: string = ""): Recallable =
  ## postUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_777965 = newJObject()
  var formData_777966 = newJObject()
  add(formData_777966, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_777965, "Action", newJString(Action))
  add(formData_777966, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  add(query_777965, "Version", newJString(Version))
  add(formData_777966, "NewPath", newJString(NewPath))
  result = call_777964.call(nil, query_777965, nil, formData_777966, nil)

var postUpdateServerCertificate* = Call_PostUpdateServerCertificate_777948(
    name: "postUpdateServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_PostUpdateServerCertificate_777949, base: "/",
    url: url_PostUpdateServerCertificate_777950,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServerCertificate_777930 = ref object of OpenApiRestCall_772597
proc url_GetUpdateServerCertificate_777932(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateServerCertificate_777931(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_777933 = query.getOrDefault("ServerCertificateName")
  valid_777933 = validateParameter(valid_777933, JString, required = true,
                                 default = nil)
  if valid_777933 != nil:
    section.add "ServerCertificateName", valid_777933
  var valid_777934 = query.getOrDefault("Action")
  valid_777934 = validateParameter(valid_777934, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_777934 != nil:
    section.add "Action", valid_777934
  var valid_777935 = query.getOrDefault("NewServerCertificateName")
  valid_777935 = validateParameter(valid_777935, JString, required = false,
                                 default = nil)
  if valid_777935 != nil:
    section.add "NewServerCertificateName", valid_777935
  var valid_777936 = query.getOrDefault("NewPath")
  valid_777936 = validateParameter(valid_777936, JString, required = false,
                                 default = nil)
  if valid_777936 != nil:
    section.add "NewPath", valid_777936
  var valid_777937 = query.getOrDefault("Version")
  valid_777937 = validateParameter(valid_777937, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777937 != nil:
    section.add "Version", valid_777937
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777938 = header.getOrDefault("X-Amz-Date")
  valid_777938 = validateParameter(valid_777938, JString, required = false,
                                 default = nil)
  if valid_777938 != nil:
    section.add "X-Amz-Date", valid_777938
  var valid_777939 = header.getOrDefault("X-Amz-Security-Token")
  valid_777939 = validateParameter(valid_777939, JString, required = false,
                                 default = nil)
  if valid_777939 != nil:
    section.add "X-Amz-Security-Token", valid_777939
  var valid_777940 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777940 = validateParameter(valid_777940, JString, required = false,
                                 default = nil)
  if valid_777940 != nil:
    section.add "X-Amz-Content-Sha256", valid_777940
  var valid_777941 = header.getOrDefault("X-Amz-Algorithm")
  valid_777941 = validateParameter(valid_777941, JString, required = false,
                                 default = nil)
  if valid_777941 != nil:
    section.add "X-Amz-Algorithm", valid_777941
  var valid_777942 = header.getOrDefault("X-Amz-Signature")
  valid_777942 = validateParameter(valid_777942, JString, required = false,
                                 default = nil)
  if valid_777942 != nil:
    section.add "X-Amz-Signature", valid_777942
  var valid_777943 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777943 = validateParameter(valid_777943, JString, required = false,
                                 default = nil)
  if valid_777943 != nil:
    section.add "X-Amz-SignedHeaders", valid_777943
  var valid_777944 = header.getOrDefault("X-Amz-Credential")
  valid_777944 = validateParameter(valid_777944, JString, required = false,
                                 default = nil)
  if valid_777944 != nil:
    section.add "X-Amz-Credential", valid_777944
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777945: Call_GetUpdateServerCertificate_777930; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_777945.validator(path, query, header, formData, body)
  let scheme = call_777945.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777945.url(scheme.get, call_777945.host, call_777945.base,
                         call_777945.route, valid.getOrDefault("path"))
  result = hook(call_777945, url, valid)

proc call*(call_777946: Call_GetUpdateServerCertificate_777930;
          ServerCertificateName: string;
          Action: string = "UpdateServerCertificate";
          NewServerCertificateName: string = ""; NewPath: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_777947 = newJObject()
  add(query_777947, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_777947, "Action", newJString(Action))
  add(query_777947, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  add(query_777947, "NewPath", newJString(NewPath))
  add(query_777947, "Version", newJString(Version))
  result = call_777946.call(nil, query_777947, nil, nil, nil)

var getUpdateServerCertificate* = Call_GetUpdateServerCertificate_777930(
    name: "getUpdateServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_GetUpdateServerCertificate_777931, base: "/",
    url: url_GetUpdateServerCertificate_777932,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServiceSpecificCredential_777985 = ref object of OpenApiRestCall_772597
proc url_PostUpdateServiceSpecificCredential_777987(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateServiceSpecificCredential_777986(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777988 = query.getOrDefault("Action")
  valid_777988 = validateParameter(valid_777988, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_777988 != nil:
    section.add "Action", valid_777988
  var valid_777989 = query.getOrDefault("Version")
  valid_777989 = validateParameter(valid_777989, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777989 != nil:
    section.add "Version", valid_777989
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777990 = header.getOrDefault("X-Amz-Date")
  valid_777990 = validateParameter(valid_777990, JString, required = false,
                                 default = nil)
  if valid_777990 != nil:
    section.add "X-Amz-Date", valid_777990
  var valid_777991 = header.getOrDefault("X-Amz-Security-Token")
  valid_777991 = validateParameter(valid_777991, JString, required = false,
                                 default = nil)
  if valid_777991 != nil:
    section.add "X-Amz-Security-Token", valid_777991
  var valid_777992 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777992 = validateParameter(valid_777992, JString, required = false,
                                 default = nil)
  if valid_777992 != nil:
    section.add "X-Amz-Content-Sha256", valid_777992
  var valid_777993 = header.getOrDefault("X-Amz-Algorithm")
  valid_777993 = validateParameter(valid_777993, JString, required = false,
                                 default = nil)
  if valid_777993 != nil:
    section.add "X-Amz-Algorithm", valid_777993
  var valid_777994 = header.getOrDefault("X-Amz-Signature")
  valid_777994 = validateParameter(valid_777994, JString, required = false,
                                 default = nil)
  if valid_777994 != nil:
    section.add "X-Amz-Signature", valid_777994
  var valid_777995 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777995 = validateParameter(valid_777995, JString, required = false,
                                 default = nil)
  if valid_777995 != nil:
    section.add "X-Amz-SignedHeaders", valid_777995
  var valid_777996 = header.getOrDefault("X-Amz-Credential")
  valid_777996 = validateParameter(valid_777996, JString, required = false,
                                 default = nil)
  if valid_777996 != nil:
    section.add "X-Amz-Credential", valid_777996
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  section = newJObject()
  var valid_777997 = formData.getOrDefault("UserName")
  valid_777997 = validateParameter(valid_777997, JString, required = false,
                                 default = nil)
  if valid_777997 != nil:
    section.add "UserName", valid_777997
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_777998 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_777998 = validateParameter(valid_777998, JString, required = true,
                                 default = nil)
  if valid_777998 != nil:
    section.add "ServiceSpecificCredentialId", valid_777998
  var valid_777999 = formData.getOrDefault("Status")
  valid_777999 = validateParameter(valid_777999, JString, required = true,
                                 default = newJString("Active"))
  if valid_777999 != nil:
    section.add "Status", valid_777999
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778000: Call_PostUpdateServiceSpecificCredential_777985;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_778000.validator(path, query, header, formData, body)
  let scheme = call_778000.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778000.url(scheme.get, call_778000.host, call_778000.base,
                         call_778000.route, valid.getOrDefault("path"))
  result = hook(call_778000, url, valid)

proc call*(call_778001: Call_PostUpdateServiceSpecificCredential_777985;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Status: string = "Active";
          Action: string = "UpdateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_778002 = newJObject()
  var formData_778003 = newJObject()
  add(formData_778003, "UserName", newJString(UserName))
  add(formData_778003, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_778003, "Status", newJString(Status))
  add(query_778002, "Action", newJString(Action))
  add(query_778002, "Version", newJString(Version))
  result = call_778001.call(nil, query_778002, nil, formData_778003, nil)

var postUpdateServiceSpecificCredential* = Call_PostUpdateServiceSpecificCredential_777985(
    name: "postUpdateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_PostUpdateServiceSpecificCredential_777986, base: "/",
    url: url_PostUpdateServiceSpecificCredential_777987,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServiceSpecificCredential_777967 = ref object of OpenApiRestCall_772597
proc url_GetUpdateServiceSpecificCredential_777969(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateServiceSpecificCredential_777968(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_777970 = query.getOrDefault("Status")
  valid_777970 = validateParameter(valid_777970, JString, required = true,
                                 default = newJString("Active"))
  if valid_777970 != nil:
    section.add "Status", valid_777970
  var valid_777971 = query.getOrDefault("UserName")
  valid_777971 = validateParameter(valid_777971, JString, required = false,
                                 default = nil)
  if valid_777971 != nil:
    section.add "UserName", valid_777971
  var valid_777972 = query.getOrDefault("Action")
  valid_777972 = validateParameter(valid_777972, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_777972 != nil:
    section.add "Action", valid_777972
  var valid_777973 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_777973 = validateParameter(valid_777973, JString, required = true,
                                 default = nil)
  if valid_777973 != nil:
    section.add "ServiceSpecificCredentialId", valid_777973
  var valid_777974 = query.getOrDefault("Version")
  valid_777974 = validateParameter(valid_777974, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_777974 != nil:
    section.add "Version", valid_777974
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777975 = header.getOrDefault("X-Amz-Date")
  valid_777975 = validateParameter(valid_777975, JString, required = false,
                                 default = nil)
  if valid_777975 != nil:
    section.add "X-Amz-Date", valid_777975
  var valid_777976 = header.getOrDefault("X-Amz-Security-Token")
  valid_777976 = validateParameter(valid_777976, JString, required = false,
                                 default = nil)
  if valid_777976 != nil:
    section.add "X-Amz-Security-Token", valid_777976
  var valid_777977 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777977 = validateParameter(valid_777977, JString, required = false,
                                 default = nil)
  if valid_777977 != nil:
    section.add "X-Amz-Content-Sha256", valid_777977
  var valid_777978 = header.getOrDefault("X-Amz-Algorithm")
  valid_777978 = validateParameter(valid_777978, JString, required = false,
                                 default = nil)
  if valid_777978 != nil:
    section.add "X-Amz-Algorithm", valid_777978
  var valid_777979 = header.getOrDefault("X-Amz-Signature")
  valid_777979 = validateParameter(valid_777979, JString, required = false,
                                 default = nil)
  if valid_777979 != nil:
    section.add "X-Amz-Signature", valid_777979
  var valid_777980 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777980 = validateParameter(valid_777980, JString, required = false,
                                 default = nil)
  if valid_777980 != nil:
    section.add "X-Amz-SignedHeaders", valid_777980
  var valid_777981 = header.getOrDefault("X-Amz-Credential")
  valid_777981 = validateParameter(valid_777981, JString, required = false,
                                 default = nil)
  if valid_777981 != nil:
    section.add "X-Amz-Credential", valid_777981
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777982: Call_GetUpdateServiceSpecificCredential_777967;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_777982.validator(path, query, header, formData, body)
  let scheme = call_777982.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777982.url(scheme.get, call_777982.host, call_777982.base,
                         call_777982.route, valid.getOrDefault("path"))
  result = hook(call_777982, url, valid)

proc call*(call_777983: Call_GetUpdateServiceSpecificCredential_777967;
          ServiceSpecificCredentialId: string; Status: string = "Active";
          UserName: string = ""; Action: string = "UpdateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_777984 = newJObject()
  add(query_777984, "Status", newJString(Status))
  add(query_777984, "UserName", newJString(UserName))
  add(query_777984, "Action", newJString(Action))
  add(query_777984, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_777984, "Version", newJString(Version))
  result = call_777983.call(nil, query_777984, nil, nil, nil)

var getUpdateServiceSpecificCredential* = Call_GetUpdateServiceSpecificCredential_777967(
    name: "getUpdateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_GetUpdateServiceSpecificCredential_777968, base: "/",
    url: url_GetUpdateServiceSpecificCredential_777969,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSigningCertificate_778022 = ref object of OpenApiRestCall_772597
proc url_PostUpdateSigningCertificate_778024(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateSigningCertificate_778023(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_778025 = query.getOrDefault("Action")
  valid_778025 = validateParameter(valid_778025, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_778025 != nil:
    section.add "Action", valid_778025
  var valid_778026 = query.getOrDefault("Version")
  valid_778026 = validateParameter(valid_778026, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_778026 != nil:
    section.add "Version", valid_778026
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_778027 = header.getOrDefault("X-Amz-Date")
  valid_778027 = validateParameter(valid_778027, JString, required = false,
                                 default = nil)
  if valid_778027 != nil:
    section.add "X-Amz-Date", valid_778027
  var valid_778028 = header.getOrDefault("X-Amz-Security-Token")
  valid_778028 = validateParameter(valid_778028, JString, required = false,
                                 default = nil)
  if valid_778028 != nil:
    section.add "X-Amz-Security-Token", valid_778028
  var valid_778029 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_778029 = validateParameter(valid_778029, JString, required = false,
                                 default = nil)
  if valid_778029 != nil:
    section.add "X-Amz-Content-Sha256", valid_778029
  var valid_778030 = header.getOrDefault("X-Amz-Algorithm")
  valid_778030 = validateParameter(valid_778030, JString, required = false,
                                 default = nil)
  if valid_778030 != nil:
    section.add "X-Amz-Algorithm", valid_778030
  var valid_778031 = header.getOrDefault("X-Amz-Signature")
  valid_778031 = validateParameter(valid_778031, JString, required = false,
                                 default = nil)
  if valid_778031 != nil:
    section.add "X-Amz-Signature", valid_778031
  var valid_778032 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_778032 = validateParameter(valid_778032, JString, required = false,
                                 default = nil)
  if valid_778032 != nil:
    section.add "X-Amz-SignedHeaders", valid_778032
  var valid_778033 = header.getOrDefault("X-Amz-Credential")
  valid_778033 = validateParameter(valid_778033, JString, required = false,
                                 default = nil)
  if valid_778033 != nil:
    section.add "X-Amz-Credential", valid_778033
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_778034 = formData.getOrDefault("UserName")
  valid_778034 = validateParameter(valid_778034, JString, required = false,
                                 default = nil)
  if valid_778034 != nil:
    section.add "UserName", valid_778034
  assert formData != nil,
        "formData argument is necessary due to required `Status` field"
  var valid_778035 = formData.getOrDefault("Status")
  valid_778035 = validateParameter(valid_778035, JString, required = true,
                                 default = newJString("Active"))
  if valid_778035 != nil:
    section.add "Status", valid_778035
  var valid_778036 = formData.getOrDefault("CertificateId")
  valid_778036 = validateParameter(valid_778036, JString, required = true,
                                 default = nil)
  if valid_778036 != nil:
    section.add "CertificateId", valid_778036
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778037: Call_PostUpdateSigningCertificate_778022; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_778037.validator(path, query, header, formData, body)
  let scheme = call_778037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778037.url(scheme.get, call_778037.host, call_778037.base,
                         call_778037.route, valid.getOrDefault("path"))
  result = hook(call_778037, url, valid)

proc call*(call_778038: Call_PostUpdateSigningCertificate_778022;
          CertificateId: string; UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_778039 = newJObject()
  var formData_778040 = newJObject()
  add(formData_778040, "UserName", newJString(UserName))
  add(formData_778040, "Status", newJString(Status))
  add(formData_778040, "CertificateId", newJString(CertificateId))
  add(query_778039, "Action", newJString(Action))
  add(query_778039, "Version", newJString(Version))
  result = call_778038.call(nil, query_778039, nil, formData_778040, nil)

var postUpdateSigningCertificate* = Call_PostUpdateSigningCertificate_778022(
    name: "postUpdateSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_PostUpdateSigningCertificate_778023, base: "/",
    url: url_PostUpdateSigningCertificate_778024,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSigningCertificate_778004 = ref object of OpenApiRestCall_772597
proc url_GetUpdateSigningCertificate_778006(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateSigningCertificate_778005(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_778007 = query.getOrDefault("Status")
  valid_778007 = validateParameter(valid_778007, JString, required = true,
                                 default = newJString("Active"))
  if valid_778007 != nil:
    section.add "Status", valid_778007
  var valid_778008 = query.getOrDefault("CertificateId")
  valid_778008 = validateParameter(valid_778008, JString, required = true,
                                 default = nil)
  if valid_778008 != nil:
    section.add "CertificateId", valid_778008
  var valid_778009 = query.getOrDefault("UserName")
  valid_778009 = validateParameter(valid_778009, JString, required = false,
                                 default = nil)
  if valid_778009 != nil:
    section.add "UserName", valid_778009
  var valid_778010 = query.getOrDefault("Action")
  valid_778010 = validateParameter(valid_778010, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_778010 != nil:
    section.add "Action", valid_778010
  var valid_778011 = query.getOrDefault("Version")
  valid_778011 = validateParameter(valid_778011, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_778011 != nil:
    section.add "Version", valid_778011
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_778012 = header.getOrDefault("X-Amz-Date")
  valid_778012 = validateParameter(valid_778012, JString, required = false,
                                 default = nil)
  if valid_778012 != nil:
    section.add "X-Amz-Date", valid_778012
  var valid_778013 = header.getOrDefault("X-Amz-Security-Token")
  valid_778013 = validateParameter(valid_778013, JString, required = false,
                                 default = nil)
  if valid_778013 != nil:
    section.add "X-Amz-Security-Token", valid_778013
  var valid_778014 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_778014 = validateParameter(valid_778014, JString, required = false,
                                 default = nil)
  if valid_778014 != nil:
    section.add "X-Amz-Content-Sha256", valid_778014
  var valid_778015 = header.getOrDefault("X-Amz-Algorithm")
  valid_778015 = validateParameter(valid_778015, JString, required = false,
                                 default = nil)
  if valid_778015 != nil:
    section.add "X-Amz-Algorithm", valid_778015
  var valid_778016 = header.getOrDefault("X-Amz-Signature")
  valid_778016 = validateParameter(valid_778016, JString, required = false,
                                 default = nil)
  if valid_778016 != nil:
    section.add "X-Amz-Signature", valid_778016
  var valid_778017 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_778017 = validateParameter(valid_778017, JString, required = false,
                                 default = nil)
  if valid_778017 != nil:
    section.add "X-Amz-SignedHeaders", valid_778017
  var valid_778018 = header.getOrDefault("X-Amz-Credential")
  valid_778018 = validateParameter(valid_778018, JString, required = false,
                                 default = nil)
  if valid_778018 != nil:
    section.add "X-Amz-Credential", valid_778018
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778019: Call_GetUpdateSigningCertificate_778004; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_778019.validator(path, query, header, formData, body)
  let scheme = call_778019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778019.url(scheme.get, call_778019.host, call_778019.base,
                         call_778019.route, valid.getOrDefault("path"))
  result = hook(call_778019, url, valid)

proc call*(call_778020: Call_GetUpdateSigningCertificate_778004;
          CertificateId: string; Status: string = "Active"; UserName: string = "";
          Action: string = "UpdateSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_778021 = newJObject()
  add(query_778021, "Status", newJString(Status))
  add(query_778021, "CertificateId", newJString(CertificateId))
  add(query_778021, "UserName", newJString(UserName))
  add(query_778021, "Action", newJString(Action))
  add(query_778021, "Version", newJString(Version))
  result = call_778020.call(nil, query_778021, nil, nil, nil)

var getUpdateSigningCertificate* = Call_GetUpdateSigningCertificate_778004(
    name: "getUpdateSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_GetUpdateSigningCertificate_778005, base: "/",
    url: url_GetUpdateSigningCertificate_778006,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateUser_778059 = ref object of OpenApiRestCall_772597
proc url_PostUpdateUser_778061(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateUser_778060(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_778062 = query.getOrDefault("Action")
  valid_778062 = validateParameter(valid_778062, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_778062 != nil:
    section.add "Action", valid_778062
  var valid_778063 = query.getOrDefault("Version")
  valid_778063 = validateParameter(valid_778063, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_778063 != nil:
    section.add "Version", valid_778063
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_778064 = header.getOrDefault("X-Amz-Date")
  valid_778064 = validateParameter(valid_778064, JString, required = false,
                                 default = nil)
  if valid_778064 != nil:
    section.add "X-Amz-Date", valid_778064
  var valid_778065 = header.getOrDefault("X-Amz-Security-Token")
  valid_778065 = validateParameter(valid_778065, JString, required = false,
                                 default = nil)
  if valid_778065 != nil:
    section.add "X-Amz-Security-Token", valid_778065
  var valid_778066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_778066 = validateParameter(valid_778066, JString, required = false,
                                 default = nil)
  if valid_778066 != nil:
    section.add "X-Amz-Content-Sha256", valid_778066
  var valid_778067 = header.getOrDefault("X-Amz-Algorithm")
  valid_778067 = validateParameter(valid_778067, JString, required = false,
                                 default = nil)
  if valid_778067 != nil:
    section.add "X-Amz-Algorithm", valid_778067
  var valid_778068 = header.getOrDefault("X-Amz-Signature")
  valid_778068 = validateParameter(valid_778068, JString, required = false,
                                 default = nil)
  if valid_778068 != nil:
    section.add "X-Amz-Signature", valid_778068
  var valid_778069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_778069 = validateParameter(valid_778069, JString, required = false,
                                 default = nil)
  if valid_778069 != nil:
    section.add "X-Amz-SignedHeaders", valid_778069
  var valid_778070 = header.getOrDefault("X-Amz-Credential")
  valid_778070 = validateParameter(valid_778070, JString, required = false,
                                 default = nil)
  if valid_778070 != nil:
    section.add "X-Amz-Credential", valid_778070
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_778071 = formData.getOrDefault("UserName")
  valid_778071 = validateParameter(valid_778071, JString, required = true,
                                 default = nil)
  if valid_778071 != nil:
    section.add "UserName", valid_778071
  var valid_778072 = formData.getOrDefault("NewUserName")
  valid_778072 = validateParameter(valid_778072, JString, required = false,
                                 default = nil)
  if valid_778072 != nil:
    section.add "NewUserName", valid_778072
  var valid_778073 = formData.getOrDefault("NewPath")
  valid_778073 = validateParameter(valid_778073, JString, required = false,
                                 default = nil)
  if valid_778073 != nil:
    section.add "NewPath", valid_778073
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778074: Call_PostUpdateUser_778059; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_778074.validator(path, query, header, formData, body)
  let scheme = call_778074.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778074.url(scheme.get, call_778074.host, call_778074.base,
                         call_778074.route, valid.getOrDefault("path"))
  result = hook(call_778074, url, valid)

proc call*(call_778075: Call_PostUpdateUser_778059; UserName: string;
          NewUserName: string = ""; Action: string = "UpdateUser";
          Version: string = "2010-05-08"; NewPath: string = ""): Recallable =
  ## postUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_778076 = newJObject()
  var formData_778077 = newJObject()
  add(formData_778077, "UserName", newJString(UserName))
  add(formData_778077, "NewUserName", newJString(NewUserName))
  add(query_778076, "Action", newJString(Action))
  add(query_778076, "Version", newJString(Version))
  add(formData_778077, "NewPath", newJString(NewPath))
  result = call_778075.call(nil, query_778076, nil, formData_778077, nil)

var postUpdateUser* = Call_PostUpdateUser_778059(name: "postUpdateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_PostUpdateUser_778060,
    base: "/", url: url_PostUpdateUser_778061, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateUser_778041 = ref object of OpenApiRestCall_772597
proc url_GetUpdateUser_778043(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateUser_778042(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_778044 = query.getOrDefault("UserName")
  valid_778044 = validateParameter(valid_778044, JString, required = true,
                                 default = nil)
  if valid_778044 != nil:
    section.add "UserName", valid_778044
  var valid_778045 = query.getOrDefault("Action")
  valid_778045 = validateParameter(valid_778045, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_778045 != nil:
    section.add "Action", valid_778045
  var valid_778046 = query.getOrDefault("NewUserName")
  valid_778046 = validateParameter(valid_778046, JString, required = false,
                                 default = nil)
  if valid_778046 != nil:
    section.add "NewUserName", valid_778046
  var valid_778047 = query.getOrDefault("NewPath")
  valid_778047 = validateParameter(valid_778047, JString, required = false,
                                 default = nil)
  if valid_778047 != nil:
    section.add "NewPath", valid_778047
  var valid_778048 = query.getOrDefault("Version")
  valid_778048 = validateParameter(valid_778048, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_778048 != nil:
    section.add "Version", valid_778048
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_778049 = header.getOrDefault("X-Amz-Date")
  valid_778049 = validateParameter(valid_778049, JString, required = false,
                                 default = nil)
  if valid_778049 != nil:
    section.add "X-Amz-Date", valid_778049
  var valid_778050 = header.getOrDefault("X-Amz-Security-Token")
  valid_778050 = validateParameter(valid_778050, JString, required = false,
                                 default = nil)
  if valid_778050 != nil:
    section.add "X-Amz-Security-Token", valid_778050
  var valid_778051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_778051 = validateParameter(valid_778051, JString, required = false,
                                 default = nil)
  if valid_778051 != nil:
    section.add "X-Amz-Content-Sha256", valid_778051
  var valid_778052 = header.getOrDefault("X-Amz-Algorithm")
  valid_778052 = validateParameter(valid_778052, JString, required = false,
                                 default = nil)
  if valid_778052 != nil:
    section.add "X-Amz-Algorithm", valid_778052
  var valid_778053 = header.getOrDefault("X-Amz-Signature")
  valid_778053 = validateParameter(valid_778053, JString, required = false,
                                 default = nil)
  if valid_778053 != nil:
    section.add "X-Amz-Signature", valid_778053
  var valid_778054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_778054 = validateParameter(valid_778054, JString, required = false,
                                 default = nil)
  if valid_778054 != nil:
    section.add "X-Amz-SignedHeaders", valid_778054
  var valid_778055 = header.getOrDefault("X-Amz-Credential")
  valid_778055 = validateParameter(valid_778055, JString, required = false,
                                 default = nil)
  if valid_778055 != nil:
    section.add "X-Amz-Credential", valid_778055
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778056: Call_GetUpdateUser_778041; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_778056.validator(path, query, header, formData, body)
  let scheme = call_778056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778056.url(scheme.get, call_778056.host, call_778056.base,
                         call_778056.route, valid.getOrDefault("path"))
  result = hook(call_778056, url, valid)

proc call*(call_778057: Call_GetUpdateUser_778041; UserName: string;
          Action: string = "UpdateUser"; NewUserName: string = ""; NewPath: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_778058 = newJObject()
  add(query_778058, "UserName", newJString(UserName))
  add(query_778058, "Action", newJString(Action))
  add(query_778058, "NewUserName", newJString(NewUserName))
  add(query_778058, "NewPath", newJString(NewPath))
  add(query_778058, "Version", newJString(Version))
  result = call_778057.call(nil, query_778058, nil, nil, nil)

var getUpdateUser* = Call_GetUpdateUser_778041(name: "getUpdateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_GetUpdateUser_778042,
    base: "/", url: url_GetUpdateUser_778043, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSSHPublicKey_778095 = ref object of OpenApiRestCall_772597
proc url_PostUploadSSHPublicKey_778097(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUploadSSHPublicKey_778096(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_778098 = query.getOrDefault("Action")
  valid_778098 = validateParameter(valid_778098, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_778098 != nil:
    section.add "Action", valid_778098
  var valid_778099 = query.getOrDefault("Version")
  valid_778099 = validateParameter(valid_778099, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_778099 != nil:
    section.add "Version", valid_778099
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_778100 = header.getOrDefault("X-Amz-Date")
  valid_778100 = validateParameter(valid_778100, JString, required = false,
                                 default = nil)
  if valid_778100 != nil:
    section.add "X-Amz-Date", valid_778100
  var valid_778101 = header.getOrDefault("X-Amz-Security-Token")
  valid_778101 = validateParameter(valid_778101, JString, required = false,
                                 default = nil)
  if valid_778101 != nil:
    section.add "X-Amz-Security-Token", valid_778101
  var valid_778102 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_778102 = validateParameter(valid_778102, JString, required = false,
                                 default = nil)
  if valid_778102 != nil:
    section.add "X-Amz-Content-Sha256", valid_778102
  var valid_778103 = header.getOrDefault("X-Amz-Algorithm")
  valid_778103 = validateParameter(valid_778103, JString, required = false,
                                 default = nil)
  if valid_778103 != nil:
    section.add "X-Amz-Algorithm", valid_778103
  var valid_778104 = header.getOrDefault("X-Amz-Signature")
  valid_778104 = validateParameter(valid_778104, JString, required = false,
                                 default = nil)
  if valid_778104 != nil:
    section.add "X-Amz-Signature", valid_778104
  var valid_778105 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_778105 = validateParameter(valid_778105, JString, required = false,
                                 default = nil)
  if valid_778105 != nil:
    section.add "X-Amz-SignedHeaders", valid_778105
  var valid_778106 = header.getOrDefault("X-Amz-Credential")
  valid_778106 = validateParameter(valid_778106, JString, required = false,
                                 default = nil)
  if valid_778106 != nil:
    section.add "X-Amz-Credential", valid_778106
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_778107 = formData.getOrDefault("UserName")
  valid_778107 = validateParameter(valid_778107, JString, required = true,
                                 default = nil)
  if valid_778107 != nil:
    section.add "UserName", valid_778107
  var valid_778108 = formData.getOrDefault("SSHPublicKeyBody")
  valid_778108 = validateParameter(valid_778108, JString, required = true,
                                 default = nil)
  if valid_778108 != nil:
    section.add "SSHPublicKeyBody", valid_778108
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778109: Call_PostUploadSSHPublicKey_778095; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_778109.validator(path, query, header, formData, body)
  let scheme = call_778109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778109.url(scheme.get, call_778109.host, call_778109.base,
                         call_778109.route, valid.getOrDefault("path"))
  result = hook(call_778109, url, valid)

proc call*(call_778110: Call_PostUploadSSHPublicKey_778095; UserName: string;
          SSHPublicKeyBody: string; Action: string = "UploadSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_778111 = newJObject()
  var formData_778112 = newJObject()
  add(formData_778112, "UserName", newJString(UserName))
  add(formData_778112, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(query_778111, "Action", newJString(Action))
  add(query_778111, "Version", newJString(Version))
  result = call_778110.call(nil, query_778111, nil, formData_778112, nil)

var postUploadSSHPublicKey* = Call_PostUploadSSHPublicKey_778095(
    name: "postUploadSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_PostUploadSSHPublicKey_778096, base: "/",
    url: url_PostUploadSSHPublicKey_778097, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSSHPublicKey_778078 = ref object of OpenApiRestCall_772597
proc url_GetUploadSSHPublicKey_778080(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUploadSSHPublicKey_778079(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyBody` field"
  var valid_778081 = query.getOrDefault("SSHPublicKeyBody")
  valid_778081 = validateParameter(valid_778081, JString, required = true,
                                 default = nil)
  if valid_778081 != nil:
    section.add "SSHPublicKeyBody", valid_778081
  var valid_778082 = query.getOrDefault("UserName")
  valid_778082 = validateParameter(valid_778082, JString, required = true,
                                 default = nil)
  if valid_778082 != nil:
    section.add "UserName", valid_778082
  var valid_778083 = query.getOrDefault("Action")
  valid_778083 = validateParameter(valid_778083, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_778083 != nil:
    section.add "Action", valid_778083
  var valid_778084 = query.getOrDefault("Version")
  valid_778084 = validateParameter(valid_778084, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_778084 != nil:
    section.add "Version", valid_778084
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_778085 = header.getOrDefault("X-Amz-Date")
  valid_778085 = validateParameter(valid_778085, JString, required = false,
                                 default = nil)
  if valid_778085 != nil:
    section.add "X-Amz-Date", valid_778085
  var valid_778086 = header.getOrDefault("X-Amz-Security-Token")
  valid_778086 = validateParameter(valid_778086, JString, required = false,
                                 default = nil)
  if valid_778086 != nil:
    section.add "X-Amz-Security-Token", valid_778086
  var valid_778087 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_778087 = validateParameter(valid_778087, JString, required = false,
                                 default = nil)
  if valid_778087 != nil:
    section.add "X-Amz-Content-Sha256", valid_778087
  var valid_778088 = header.getOrDefault("X-Amz-Algorithm")
  valid_778088 = validateParameter(valid_778088, JString, required = false,
                                 default = nil)
  if valid_778088 != nil:
    section.add "X-Amz-Algorithm", valid_778088
  var valid_778089 = header.getOrDefault("X-Amz-Signature")
  valid_778089 = validateParameter(valid_778089, JString, required = false,
                                 default = nil)
  if valid_778089 != nil:
    section.add "X-Amz-Signature", valid_778089
  var valid_778090 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_778090 = validateParameter(valid_778090, JString, required = false,
                                 default = nil)
  if valid_778090 != nil:
    section.add "X-Amz-SignedHeaders", valid_778090
  var valid_778091 = header.getOrDefault("X-Amz-Credential")
  valid_778091 = validateParameter(valid_778091, JString, required = false,
                                 default = nil)
  if valid_778091 != nil:
    section.add "X-Amz-Credential", valid_778091
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778092: Call_GetUploadSSHPublicKey_778078; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_778092.validator(path, query, header, formData, body)
  let scheme = call_778092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778092.url(scheme.get, call_778092.host, call_778092.base,
                         call_778092.route, valid.getOrDefault("path"))
  result = hook(call_778092, url, valid)

proc call*(call_778093: Call_GetUploadSSHPublicKey_778078;
          SSHPublicKeyBody: string; UserName: string;
          Action: string = "UploadSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_778094 = newJObject()
  add(query_778094, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(query_778094, "UserName", newJString(UserName))
  add(query_778094, "Action", newJString(Action))
  add(query_778094, "Version", newJString(Version))
  result = call_778093.call(nil, query_778094, nil, nil, nil)

var getUploadSSHPublicKey* = Call_GetUploadSSHPublicKey_778078(
    name: "getUploadSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_GetUploadSSHPublicKey_778079, base: "/",
    url: url_GetUploadSSHPublicKey_778080, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadServerCertificate_778133 = ref object of OpenApiRestCall_772597
proc url_PostUploadServerCertificate_778135(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUploadServerCertificate_778134(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_778136 = query.getOrDefault("Action")
  valid_778136 = validateParameter(valid_778136, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_778136 != nil:
    section.add "Action", valid_778136
  var valid_778137 = query.getOrDefault("Version")
  valid_778137 = validateParameter(valid_778137, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_778137 != nil:
    section.add "Version", valid_778137
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_778138 = header.getOrDefault("X-Amz-Date")
  valid_778138 = validateParameter(valid_778138, JString, required = false,
                                 default = nil)
  if valid_778138 != nil:
    section.add "X-Amz-Date", valid_778138
  var valid_778139 = header.getOrDefault("X-Amz-Security-Token")
  valid_778139 = validateParameter(valid_778139, JString, required = false,
                                 default = nil)
  if valid_778139 != nil:
    section.add "X-Amz-Security-Token", valid_778139
  var valid_778140 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_778140 = validateParameter(valid_778140, JString, required = false,
                                 default = nil)
  if valid_778140 != nil:
    section.add "X-Amz-Content-Sha256", valid_778140
  var valid_778141 = header.getOrDefault("X-Amz-Algorithm")
  valid_778141 = validateParameter(valid_778141, JString, required = false,
                                 default = nil)
  if valid_778141 != nil:
    section.add "X-Amz-Algorithm", valid_778141
  var valid_778142 = header.getOrDefault("X-Amz-Signature")
  valid_778142 = validateParameter(valid_778142, JString, required = false,
                                 default = nil)
  if valid_778142 != nil:
    section.add "X-Amz-Signature", valid_778142
  var valid_778143 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_778143 = validateParameter(valid_778143, JString, required = false,
                                 default = nil)
  if valid_778143 != nil:
    section.add "X-Amz-SignedHeaders", valid_778143
  var valid_778144 = header.getOrDefault("X-Amz-Credential")
  valid_778144 = validateParameter(valid_778144, JString, required = false,
                                 default = nil)
  if valid_778144 != nil:
    section.add "X-Amz-Credential", valid_778144
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_778145 = formData.getOrDefault("CertificateBody")
  valid_778145 = validateParameter(valid_778145, JString, required = true,
                                 default = nil)
  if valid_778145 != nil:
    section.add "CertificateBody", valid_778145
  var valid_778146 = formData.getOrDefault("ServerCertificateName")
  valid_778146 = validateParameter(valid_778146, JString, required = true,
                                 default = nil)
  if valid_778146 != nil:
    section.add "ServerCertificateName", valid_778146
  var valid_778147 = formData.getOrDefault("PrivateKey")
  valid_778147 = validateParameter(valid_778147, JString, required = true,
                                 default = nil)
  if valid_778147 != nil:
    section.add "PrivateKey", valid_778147
  var valid_778148 = formData.getOrDefault("CertificateChain")
  valid_778148 = validateParameter(valid_778148, JString, required = false,
                                 default = nil)
  if valid_778148 != nil:
    section.add "CertificateChain", valid_778148
  var valid_778149 = formData.getOrDefault("Path")
  valid_778149 = validateParameter(valid_778149, JString, required = false,
                                 default = nil)
  if valid_778149 != nil:
    section.add "Path", valid_778149
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778150: Call_PostUploadServerCertificate_778133; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_778150.validator(path, query, header, formData, body)
  let scheme = call_778150.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778150.url(scheme.get, call_778150.host, call_778150.base,
                         call_778150.route, valid.getOrDefault("path"))
  result = hook(call_778150, url, valid)

proc call*(call_778151: Call_PostUploadServerCertificate_778133;
          CertificateBody: string; ServerCertificateName: string;
          PrivateKey: string; Action: string = "UploadServerCertificate";
          CertificateChain: string = ""; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  var query_778152 = newJObject()
  var formData_778153 = newJObject()
  add(formData_778153, "CertificateBody", newJString(CertificateBody))
  add(formData_778153, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_778152, "Action", newJString(Action))
  add(formData_778153, "PrivateKey", newJString(PrivateKey))
  add(formData_778153, "CertificateChain", newJString(CertificateChain))
  add(query_778152, "Version", newJString(Version))
  add(formData_778153, "Path", newJString(Path))
  result = call_778151.call(nil, query_778152, nil, formData_778153, nil)

var postUploadServerCertificate* = Call_PostUploadServerCertificate_778133(
    name: "postUploadServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_PostUploadServerCertificate_778134, base: "/",
    url: url_PostUploadServerCertificate_778135,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadServerCertificate_778113 = ref object of OpenApiRestCall_772597
proc url_GetUploadServerCertificate_778115(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUploadServerCertificate_778114(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_778116 = query.getOrDefault("ServerCertificateName")
  valid_778116 = validateParameter(valid_778116, JString, required = true,
                                 default = nil)
  if valid_778116 != nil:
    section.add "ServerCertificateName", valid_778116
  var valid_778117 = query.getOrDefault("CertificateBody")
  valid_778117 = validateParameter(valid_778117, JString, required = true,
                                 default = nil)
  if valid_778117 != nil:
    section.add "CertificateBody", valid_778117
  var valid_778118 = query.getOrDefault("CertificateChain")
  valid_778118 = validateParameter(valid_778118, JString, required = false,
                                 default = nil)
  if valid_778118 != nil:
    section.add "CertificateChain", valid_778118
  var valid_778119 = query.getOrDefault("Action")
  valid_778119 = validateParameter(valid_778119, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_778119 != nil:
    section.add "Action", valid_778119
  var valid_778120 = query.getOrDefault("Path")
  valid_778120 = validateParameter(valid_778120, JString, required = false,
                                 default = nil)
  if valid_778120 != nil:
    section.add "Path", valid_778120
  var valid_778121 = query.getOrDefault("PrivateKey")
  valid_778121 = validateParameter(valid_778121, JString, required = true,
                                 default = nil)
  if valid_778121 != nil:
    section.add "PrivateKey", valid_778121
  var valid_778122 = query.getOrDefault("Version")
  valid_778122 = validateParameter(valid_778122, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_778122 != nil:
    section.add "Version", valid_778122
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_778123 = header.getOrDefault("X-Amz-Date")
  valid_778123 = validateParameter(valid_778123, JString, required = false,
                                 default = nil)
  if valid_778123 != nil:
    section.add "X-Amz-Date", valid_778123
  var valid_778124 = header.getOrDefault("X-Amz-Security-Token")
  valid_778124 = validateParameter(valid_778124, JString, required = false,
                                 default = nil)
  if valid_778124 != nil:
    section.add "X-Amz-Security-Token", valid_778124
  var valid_778125 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_778125 = validateParameter(valid_778125, JString, required = false,
                                 default = nil)
  if valid_778125 != nil:
    section.add "X-Amz-Content-Sha256", valid_778125
  var valid_778126 = header.getOrDefault("X-Amz-Algorithm")
  valid_778126 = validateParameter(valid_778126, JString, required = false,
                                 default = nil)
  if valid_778126 != nil:
    section.add "X-Amz-Algorithm", valid_778126
  var valid_778127 = header.getOrDefault("X-Amz-Signature")
  valid_778127 = validateParameter(valid_778127, JString, required = false,
                                 default = nil)
  if valid_778127 != nil:
    section.add "X-Amz-Signature", valid_778127
  var valid_778128 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_778128 = validateParameter(valid_778128, JString, required = false,
                                 default = nil)
  if valid_778128 != nil:
    section.add "X-Amz-SignedHeaders", valid_778128
  var valid_778129 = header.getOrDefault("X-Amz-Credential")
  valid_778129 = validateParameter(valid_778129, JString, required = false,
                                 default = nil)
  if valid_778129 != nil:
    section.add "X-Amz-Credential", valid_778129
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778130: Call_GetUploadServerCertificate_778113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_778130.validator(path, query, header, formData, body)
  let scheme = call_778130.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778130.url(scheme.get, call_778130.host, call_778130.base,
                         call_778130.route, valid.getOrDefault("path"))
  result = hook(call_778130, url, valid)

proc call*(call_778131: Call_GetUploadServerCertificate_778113;
          ServerCertificateName: string; CertificateBody: string;
          PrivateKey: string; CertificateChain: string = "";
          Action: string = "UploadServerCertificate"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_778132 = newJObject()
  add(query_778132, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_778132, "CertificateBody", newJString(CertificateBody))
  add(query_778132, "CertificateChain", newJString(CertificateChain))
  add(query_778132, "Action", newJString(Action))
  add(query_778132, "Path", newJString(Path))
  add(query_778132, "PrivateKey", newJString(PrivateKey))
  add(query_778132, "Version", newJString(Version))
  result = call_778131.call(nil, query_778132, nil, nil, nil)

var getUploadServerCertificate* = Call_GetUploadServerCertificate_778113(
    name: "getUploadServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_GetUploadServerCertificate_778114, base: "/",
    url: url_GetUploadServerCertificate_778115,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSigningCertificate_778171 = ref object of OpenApiRestCall_772597
proc url_PostUploadSigningCertificate_778173(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUploadSigningCertificate_778172(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_778174 = query.getOrDefault("Action")
  valid_778174 = validateParameter(valid_778174, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_778174 != nil:
    section.add "Action", valid_778174
  var valid_778175 = query.getOrDefault("Version")
  valid_778175 = validateParameter(valid_778175, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_778175 != nil:
    section.add "Version", valid_778175
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_778176 = header.getOrDefault("X-Amz-Date")
  valid_778176 = validateParameter(valid_778176, JString, required = false,
                                 default = nil)
  if valid_778176 != nil:
    section.add "X-Amz-Date", valid_778176
  var valid_778177 = header.getOrDefault("X-Amz-Security-Token")
  valid_778177 = validateParameter(valid_778177, JString, required = false,
                                 default = nil)
  if valid_778177 != nil:
    section.add "X-Amz-Security-Token", valid_778177
  var valid_778178 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_778178 = validateParameter(valid_778178, JString, required = false,
                                 default = nil)
  if valid_778178 != nil:
    section.add "X-Amz-Content-Sha256", valid_778178
  var valid_778179 = header.getOrDefault("X-Amz-Algorithm")
  valid_778179 = validateParameter(valid_778179, JString, required = false,
                                 default = nil)
  if valid_778179 != nil:
    section.add "X-Amz-Algorithm", valid_778179
  var valid_778180 = header.getOrDefault("X-Amz-Signature")
  valid_778180 = validateParameter(valid_778180, JString, required = false,
                                 default = nil)
  if valid_778180 != nil:
    section.add "X-Amz-Signature", valid_778180
  var valid_778181 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_778181 = validateParameter(valid_778181, JString, required = false,
                                 default = nil)
  if valid_778181 != nil:
    section.add "X-Amz-SignedHeaders", valid_778181
  var valid_778182 = header.getOrDefault("X-Amz-Credential")
  valid_778182 = validateParameter(valid_778182, JString, required = false,
                                 default = nil)
  if valid_778182 != nil:
    section.add "X-Amz-Credential", valid_778182
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_778183 = formData.getOrDefault("CertificateBody")
  valid_778183 = validateParameter(valid_778183, JString, required = true,
                                 default = nil)
  if valid_778183 != nil:
    section.add "CertificateBody", valid_778183
  var valid_778184 = formData.getOrDefault("UserName")
  valid_778184 = validateParameter(valid_778184, JString, required = false,
                                 default = nil)
  if valid_778184 != nil:
    section.add "UserName", valid_778184
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778185: Call_PostUploadSigningCertificate_778171; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_778185.validator(path, query, header, formData, body)
  let scheme = call_778185.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778185.url(scheme.get, call_778185.host, call_778185.base,
                         call_778185.route, valid.getOrDefault("path"))
  result = hook(call_778185, url, valid)

proc call*(call_778186: Call_PostUploadSigningCertificate_778171;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_778187 = newJObject()
  var formData_778188 = newJObject()
  add(formData_778188, "CertificateBody", newJString(CertificateBody))
  add(formData_778188, "UserName", newJString(UserName))
  add(query_778187, "Action", newJString(Action))
  add(query_778187, "Version", newJString(Version))
  result = call_778186.call(nil, query_778187, nil, formData_778188, nil)

var postUploadSigningCertificate* = Call_PostUploadSigningCertificate_778171(
    name: "postUploadSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_PostUploadSigningCertificate_778172, base: "/",
    url: url_PostUploadSigningCertificate_778173,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSigningCertificate_778154 = ref object of OpenApiRestCall_772597
proc url_GetUploadSigningCertificate_778156(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUploadSigningCertificate_778155(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CertificateBody` field"
  var valid_778157 = query.getOrDefault("CertificateBody")
  valid_778157 = validateParameter(valid_778157, JString, required = true,
                                 default = nil)
  if valid_778157 != nil:
    section.add "CertificateBody", valid_778157
  var valid_778158 = query.getOrDefault("UserName")
  valid_778158 = validateParameter(valid_778158, JString, required = false,
                                 default = nil)
  if valid_778158 != nil:
    section.add "UserName", valid_778158
  var valid_778159 = query.getOrDefault("Action")
  valid_778159 = validateParameter(valid_778159, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_778159 != nil:
    section.add "Action", valid_778159
  var valid_778160 = query.getOrDefault("Version")
  valid_778160 = validateParameter(valid_778160, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_778160 != nil:
    section.add "Version", valid_778160
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_778161 = header.getOrDefault("X-Amz-Date")
  valid_778161 = validateParameter(valid_778161, JString, required = false,
                                 default = nil)
  if valid_778161 != nil:
    section.add "X-Amz-Date", valid_778161
  var valid_778162 = header.getOrDefault("X-Amz-Security-Token")
  valid_778162 = validateParameter(valid_778162, JString, required = false,
                                 default = nil)
  if valid_778162 != nil:
    section.add "X-Amz-Security-Token", valid_778162
  var valid_778163 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_778163 = validateParameter(valid_778163, JString, required = false,
                                 default = nil)
  if valid_778163 != nil:
    section.add "X-Amz-Content-Sha256", valid_778163
  var valid_778164 = header.getOrDefault("X-Amz-Algorithm")
  valid_778164 = validateParameter(valid_778164, JString, required = false,
                                 default = nil)
  if valid_778164 != nil:
    section.add "X-Amz-Algorithm", valid_778164
  var valid_778165 = header.getOrDefault("X-Amz-Signature")
  valid_778165 = validateParameter(valid_778165, JString, required = false,
                                 default = nil)
  if valid_778165 != nil:
    section.add "X-Amz-Signature", valid_778165
  var valid_778166 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_778166 = validateParameter(valid_778166, JString, required = false,
                                 default = nil)
  if valid_778166 != nil:
    section.add "X-Amz-SignedHeaders", valid_778166
  var valid_778167 = header.getOrDefault("X-Amz-Credential")
  valid_778167 = validateParameter(valid_778167, JString, required = false,
                                 default = nil)
  if valid_778167 != nil:
    section.add "X-Amz-Credential", valid_778167
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778168: Call_GetUploadSigningCertificate_778154; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_778168.validator(path, query, header, formData, body)
  let scheme = call_778168.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778168.url(scheme.get, call_778168.host, call_778168.base,
                         call_778168.route, valid.getOrDefault("path"))
  result = hook(call_778168, url, valid)

proc call*(call_778169: Call_GetUploadSigningCertificate_778154;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_778170 = newJObject()
  add(query_778170, "CertificateBody", newJString(CertificateBody))
  add(query_778170, "UserName", newJString(UserName))
  add(query_778170, "Action", newJString(Action))
  add(query_778170, "Version", newJString(Version))
  result = call_778169.call(nil, query_778170, nil, nil, nil)

var getUploadSigningCertificate* = Call_GetUploadSigningCertificate_778154(
    name: "getUploadSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_GetUploadSigningCertificate_778155, base: "/",
    url: url_GetUploadSigningCertificate_778156,
    schemes: {Scheme.Https, Scheme.Http})
proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  echo recall.headers
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, "")
  result.sign(input.getOrDefault("query"), SHA256)
